; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\xmlmodule.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__7B7A869E_ctype@h DB 01H
__457DD326_basetsd@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__86261D59_stralign@h DB 01H
__D4D471B4_xmlmodule@c DB 01H
msvcjmc	ENDS
PUBLIC	_xmlModuleOpen
PUBLIC	_xmlModuleSymbol
PUBLIC	_xmlModuleClose
PUBLIC	_xmlModuleFree
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BA@OFEBAJM@creating?5module@		; `string'
PUBLIC	??_C@_0BD@JFAKKDJO@failed?5to?5open?5?$CFs?6@	; `string'
PUBLIC	??_C@_0BA@IHHNNHF@null?5parameter?6@		; `string'
PUBLIC	??_C@_0BL@MIBDMDEL@failed?5to?5find?5symbol?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BF@JLJIEBED@null?5module?5pointer?6@	; `string'
PUBLIC	??_C@_0BF@CKAMEDGJ@failed?5to?5close?3?5?$CFs?6@ ; `string'
EXTRN	_xmlStrdup:PROC
EXTRN	___xmlRaiseError:PROC
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
;	COMDAT ??_C@_0BF@CKAMEDGJ@failed?5to?5close?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BF@CKAMEDGJ@failed?5to?5close?3?5?$CFs?6@ DB 'failed to close: %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JLJIEBED@null?5module?5pointer?6@
CONST	SEGMENT
??_C@_0BF@JLJIEBED@null?5module?5pointer?6@ DB 'null module pointer', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MIBDMDEL@failed?5to?5find?5symbol?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BL@MIBDMDEL@failed?5to?5find?5symbol?3?5?$CFs?6@ DB 'failed to fin'
	DB	'd symbol: %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IHHNNHF@null?5parameter?6@
CONST	SEGMENT
??_C@_0BA@IHHNNHF@null?5parameter?6@ DB 'null parameter', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JFAKKDJO@failed?5to?5open?5?$CFs?6@
CONST	SEGMENT
??_C@_0BD@JFAKKDJO@failed?5to?5open?5?$CFs?6@ DB 'failed to open %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OFEBAJM@creating?5module@
CONST	SEGMENT
??_C@_0BA@OFEBAJM@creating?5module@ DB 'creating module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ DB 'Memory al'
	DB	'location failed : %s', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlmodule.c
;	COMDAT _xmlModuleErrMemory
_TEXT	SEGMENT
_module$ = 8						; size = 4
_extra$ = 12						; size = 4
_xmlModuleErrMemory PROC				; COMDAT

; 50   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __D4D471B4_xmlmodule@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _module$[ebp]
	xor	ecx, ecx
	test	eax, eax
	je	SHORT $LN2@xmlModuleE

; 51   :     const char *name = NULL;
; 52   : 
; 53   :     if (module != NULL) {
; 54   :         name = (const char *) module->name;

	mov	ecx, DWORD PTR [eax]
$LN2@xmlModuleE:

; 55   :     }
; 56   : 
; 57   :     __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_MODULE,

	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	ecx
	push	eax
	push	0
	push	0
	push	3
	push	2
	push	26					; 0000001aH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 58   :                     XML_ERR_NO_MEMORY, XML_ERR_FATAL, NULL, 0, extra,
; 59   :                     name, NULL, 0, 0,
; 60   :                     "Memory allocation failed : %s\n", extra);
; 61   : }

	pop	ebp
	ret	0
_xmlModuleErrMemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlmodule.c
;	COMDAT _xmlModulePlatformSymbol
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_name$ = 12						; size = 4
_symbol$ = 16						; size = 4
_xmlModulePlatformSymbol PROC				; COMDAT

; 342  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __D4D471B4_xmlmodule@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _name$[ebp]
	push	DWORD PTR _handle$[ebp]
	call	DWORD PTR __imp__GetProcAddress@8
	mov	ecx, DWORD PTR _symbol$[ebp]
	mov	DWORD PTR [ecx], eax
	neg	eax
	sbb	eax, eax
	neg	eax
	dec	eax

; 343  : XML_IGNORE_PEDANTIC_WARNINGS
; 344  : #ifdef _WIN32_WCE
; 345  :     /*
; 346  :      * GetProcAddressA seems only available on WinCE
; 347  :      */
; 348  :     *symbol = GetProcAddressA(handle, name);
; 349  : #else
; 350  :     *symbol = GetProcAddress(handle, name);
; 351  : #endif
; 352  :     return (NULL == *symbol) ? -1 : 0;
; 353  : XML_POP_WARNINGS
; 354  : }

	pop	ebp
	ret	0
_xmlModulePlatformSymbol ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlmodule.c
;	COMDAT _xmlModulePlatformClose
_TEXT	SEGMENT
_handle$ = 8						; size = 4
_xmlModulePlatformClose PROC				; COMDAT

; 327  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __D4D471B4_xmlmodule@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _handle$[ebp]
	call	DWORD PTR __imp__FreeLibrary@4
	neg	eax
	sbb	eax, eax
	inc	eax

; 328  :     int rc;
; 329  : 
; 330  :     rc = FreeLibrary(handle);
; 331  :     return (0 == rc);
; 332  : }

	pop	ebp
	ret	0
_xmlModulePlatformClose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlmodule.c
;	COMDAT _xmlModulePlatformOpen
_TEXT	SEGMENT
_name$ = 8						; size = 4
_xmlModulePlatformOpen PROC				; COMDAT

; 316  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __D4D471B4_xmlmodule@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _name$[ebp]
	call	DWORD PTR __imp__LoadLibraryA@4

; 317  :     return LoadLibraryA(name);
; 318  : }

	pop	ebp
	ret	0
_xmlModulePlatformOpen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlmodule.c
;	COMDAT _xmlModuleFree
_TEXT	SEGMENT
_module$ = 8						; size = 4
_xmlModuleFree PROC					; COMDAT

; 192  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __D4D471B4_xmlmodule@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _module$[ebp]
	test	esi, esi
	jne	SHORT $LN2@xmlModuleF

; 193  :     if (NULL == module) {
; 194  :         __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_MODULE,

	push	OFFSET ??_C@_0BF@JLJIEBED@null?5module?5pointer?6@
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	push	3
	push	4901					; 00001325H
	push	26					; 0000001aH
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	call	___xmlRaiseError
	add	esp, 64					; 00000040H

; 195  :                         XML_MODULE_CLOSE, XML_ERR_FATAL, NULL, 0, NULL,
; 196  :                         NULL, NULL, 0, 0, "null module pointer\n");
; 197  :         return -1;

	or	eax, -1
	pop	esi

; 204  : }

	pop	ebp
	ret	0
$LN2@xmlModuleF:

; 198  :     }
; 199  : 
; 200  :     xmlFree(module->name);

	push	DWORD PTR [esi]
	call	DWORD PTR _xmlFree

; 201  :     xmlFree(module);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 8

; 202  : 
; 203  :     return (0);

	xor	eax, eax
	pop	esi

; 204  : }

	pop	ebp
	ret	0
_xmlModuleFree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlmodule.c
;	COMDAT _xmlModuleClose
_TEXT	SEGMENT
_module$ = 8						; size = 4
_xmlModuleClose PROC					; COMDAT

; 156  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __D4D471B4_xmlmodule@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _module$[ebp]
	test	esi, esi
	jne	SHORT $LN2@xmlModuleC

; 157  :     int rc;
; 158  : 
; 159  :     if (NULL == module) {
; 160  :         __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_MODULE,

	push	OFFSET ??_C@_0BF@JLJIEBED@null?5module?5pointer?6@
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	push	3
	push	4901					; 00001325H
	push	26					; 0000001aH
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	call	___xmlRaiseError
	add	esp, 64					; 00000040H

; 161  :                         XML_MODULE_CLOSE, XML_ERR_FATAL, NULL, 0, 0,
; 162  :                         NULL, NULL, 0, 0, "null module pointer\n");
; 163  :         return -1;

	or	eax, -1
	pop	esi

; 177  :     return (rc);
; 178  : }

	pop	ebp
	ret	0
$LN2@xmlModuleC:

; 330  :     rc = FreeLibrary(handle);

	push	DWORD PTR [esi+4]
	call	DWORD PTR __imp__FreeLibrary@4

; 331  :     return (0 == rc);

	test	eax, eax

; 164  :     }
; 165  : 
; 166  :     rc = xmlModulePlatformClose(module->handle);
; 167  : 
; 168  :     if (rc != 0) {

	jne	SHORT $LN3@xmlModuleC

; 169  :         __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_MODULE,

	mov	eax, DWORD PTR [esi]
	push	eax
	push	OFFSET ??_C@_0BF@CKAMEDGJ@failed?5to?5close?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	eax
	push	0
	push	0
	push	0
	push	3
	push	4901					; 00001325H
	push	26					; 0000001aH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 170  :                         XML_MODULE_CLOSE, XML_ERR_FATAL, NULL, 0, 0,
; 171  :                         (const char *) module->name, NULL, 0, 0,
; 172  :                         "failed to close: %s\n", module->name);
; 173  :         return -2;

	mov	eax, -2					; fffffffeH
	pop	esi

; 177  :     return (rc);
; 178  : }

	pop	ebp
	ret	0
$LN3@xmlModuleC:

; 174  :     }
; 175  : 
; 176  :     rc = xmlModuleFree(module);

	push	esi
	call	_xmlModuleFree
	add	esp, 4
	pop	esi

; 177  :     return (rc);
; 178  : }

	pop	ebp
	ret	0
_xmlModuleClose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlmodule.c
;	COMDAT _xmlModuleSymbol
_TEXT	SEGMENT
_module$ = 8						; size = 4
_name$ = 12						; size = 4
_symbol$ = 16						; size = 4
_xmlModuleSymbol PROC					; COMDAT

; 120  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __D4D471B4_xmlmodule@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _module$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlModuleS

; 121  :     int rc = -1;
; 122  : 
; 123  :     if ((NULL == module) || (symbol == NULL) || (name == NULL)) {

	mov	esi, DWORD PTR _symbol$[ebp]
	test	esi, esi
	je	SHORT $LN3@xmlModuleS
	mov	edi, DWORD PTR _name$[ebp]
	test	edi, edi
	je	SHORT $LN3@xmlModuleS

; 350  :     *symbol = GetProcAddress(handle, name);

	push	edi
	push	DWORD PTR [eax+4]
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR [esi], eax

; 351  : #endif
; 352  :     return (NULL == *symbol) ? -1 : 0;

	mov	esi, eax
	neg	esi
	sbb	esi, esi
	neg	esi

; 128  :     }
; 129  : 
; 130  :     rc = xmlModulePlatformSymbol(module->handle, name, symbol);
; 131  : 
; 132  :     if (rc == -1) {

	test	eax, eax
	jne	SHORT $LN4@xmlModuleS

; 133  :         __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_MODULE,

	push	edi
	push	OFFSET ??_C@_0BL@MIBDMDEL@failed?5to?5find?5symbol?3?5?$CFs?6@
	push	eax
	push	eax
	push	eax
	push	edi
	push	eax
	push	eax
	push	eax
	push	3
	push	4900					; 00001324H
	push	26					; 0000001aH
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
$LN4@xmlModuleS:

; 134  :                         XML_MODULE_OPEN, XML_ERR_FATAL, NULL, 0, 0,
; 135  :                         name, NULL, 0, 0,
; 136  :                         "failed to find symbol: %s\n",
; 137  : 			(name == NULL ? "NULL" : name));
; 138  :         return rc;
; 139  :     }
; 140  : 
; 141  :     return rc;
; 142  : }

	pop	edi
	lea	eax, DWORD PTR [esi-1]
	pop	esi
	pop	ebp
	ret	0
$LN3@xmlModuleS:

; 124  :         __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_MODULE,

	push	OFFSET ??_C@_0BA@IHHNNHF@null?5parameter?6@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	4900					; 00001324H
	push	26					; 0000001aH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 64					; 00000040H

; 125  :                         XML_MODULE_OPEN, XML_ERR_FATAL, NULL, 0, 0,
; 126  :                         NULL, NULL, 0, 0, "null parameter\n");
; 127  :         return rc;

	or	eax, -1
	pop	edi

; 134  :                         XML_MODULE_OPEN, XML_ERR_FATAL, NULL, 0, 0,
; 135  :                         name, NULL, 0, 0,
; 136  :                         "failed to find symbol: %s\n",
; 137  : 			(name == NULL ? "NULL" : name));
; 138  :         return rc;
; 139  :     }
; 140  : 
; 141  :     return rc;
; 142  : }

	pop	esi
	pop	ebp
	ret	0
_xmlModuleSymbol ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlmodule.c
;	COMDAT _xmlModuleOpen
_TEXT	SEGMENT
_name$ = 8						; size = 4
_options$ = 12						; size = 4
_xmlModuleOpen PROC					; COMDAT

; 79   : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __D4D471B4_xmlmodule@c
	call	@__CheckForDebuggerJustMyCode@4
	push	8
	call	DWORD PTR _xmlMalloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN2@xmlModuleO

; 57   :     __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_MODULE,

	push	OFFSET ??_C@_0BA@OFEBAJM@creating?5module@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	eax
	push	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_0BA@OFEBAJM@creating?5module@
	push	eax
	push	eax
	push	3
	push	2
	push	26					; 0000001aH
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 80   :     xmlModulePtr module;
; 81   : 
; 82   :     module = (xmlModulePtr) xmlMalloc(sizeof(xmlModule));
; 83   :     if (module == NULL) {
; 84   :         xmlModuleErrMemory(NULL, "creating module");
; 85   :         return (NULL);

	xor	eax, eax
	pop	esi

; 102  : }

	pop	ebp
	ret	0
$LN2@xmlModuleO:
	push	edi

; 317  :     return LoadLibraryA(name);

	mov	edi, DWORD PTR _name$[ebp]
	xorps	xmm0, xmm0
	push	edi

; 86   :     }
; 87   : 
; 88   :     memset(module, 0, sizeof(xmlModule));

	movq	QWORD PTR [esi], xmm0

; 317  :     return LoadLibraryA(name);

	call	DWORD PTR __imp__LoadLibraryA@4

; 89   : 
; 90   :     module->handle = xmlModulePlatformOpen(name);

	mov	DWORD PTR [esi+4], eax

; 91   : 
; 92   :     if (module->handle == NULL) {

	test	eax, eax
	jne	SHORT $LN3@xmlModuleO

; 93   :         xmlFree(module);

	push	esi
	call	DWORD PTR _xmlFree

; 94   :         __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_MODULE,

	push	edi
	push	OFFSET ??_C@_0BD@JFAKKDJO@failed?5to?5open?5?$CFs?6@
	push	0
	push	0
	push	0
	push	edi
	push	0
	push	0
	push	0
	push	3
	push	4900					; 00001324H
	push	26					; 0000001aH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 95   :                         XML_MODULE_OPEN, XML_ERR_FATAL, NULL, 0, 0,
; 96   :                         name, NULL, 0, 0, "failed to open %s\n", name);
; 97   :         return(NULL);

	xor	eax, eax
	pop	edi
	pop	esi

; 102  : }

	pop	ebp
	ret	0
$LN3@xmlModuleO:

; 98   :     }
; 99   : 
; 100  :     module->name = xmlStrdup((const xmlChar *) name);

	push	edi
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [esi], eax

; 101  :     return (module);

	mov	eax, esi
	pop	edi
	pop	esi

; 102  : }

	pop	ebp
	ret	0
_xmlModuleOpen ENDP
_TEXT	ENDS
END
