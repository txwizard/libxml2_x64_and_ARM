; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\xmlwriter.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__DA396148_xmlwriter@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_xmlNewTextWriter
PUBLIC	_xmlNewTextWriterFilename
PUBLIC	_xmlNewTextWriterMemory
PUBLIC	_xmlNewTextWriterPushParser
PUBLIC	_xmlNewTextWriterDoc
PUBLIC	_xmlNewTextWriterTree
PUBLIC	_xmlFreeTextWriter
PUBLIC	_xmlTextWriterStartDocument
PUBLIC	_xmlTextWriterEndDocument
PUBLIC	_xmlTextWriterStartComment
PUBLIC	_xmlTextWriterEndComment
PUBLIC	_xmlTextWriterWriteFormatComment
PUBLIC	_xmlTextWriterWriteVFormatComment
PUBLIC	_xmlTextWriterWriteComment
PUBLIC	_xmlTextWriterStartElement
PUBLIC	_xmlTextWriterStartElementNS
PUBLIC	_xmlTextWriterEndElement
PUBLIC	_xmlTextWriterFullEndElement
PUBLIC	_xmlTextWriterWriteFormatElement
PUBLIC	_xmlTextWriterWriteVFormatElement
PUBLIC	_xmlTextWriterWriteElement
PUBLIC	_xmlTextWriterWriteFormatElementNS
PUBLIC	_xmlTextWriterWriteVFormatElementNS
PUBLIC	_xmlTextWriterWriteElementNS
PUBLIC	_xmlTextWriterWriteFormatRaw
PUBLIC	_xmlTextWriterWriteVFormatRaw
PUBLIC	_xmlTextWriterWriteRawLen
PUBLIC	_xmlTextWriterWriteRaw
PUBLIC	_xmlTextWriterWriteFormatString
PUBLIC	_xmlTextWriterWriteVFormatString
PUBLIC	_xmlTextWriterWriteString
PUBLIC	_xmlTextWriterWriteBase64
PUBLIC	_xmlTextWriterWriteBinHex
PUBLIC	_xmlTextWriterStartAttribute
PUBLIC	_xmlTextWriterStartAttributeNS
PUBLIC	_xmlTextWriterEndAttribute
PUBLIC	_xmlTextWriterWriteFormatAttribute
PUBLIC	_xmlTextWriterWriteVFormatAttribute
PUBLIC	_xmlTextWriterWriteAttribute
PUBLIC	_xmlTextWriterWriteFormatAttributeNS
PUBLIC	_xmlTextWriterWriteVFormatAttributeNS
PUBLIC	_xmlTextWriterWriteAttributeNS
PUBLIC	_xmlTextWriterStartPI
PUBLIC	_xmlTextWriterEndPI
PUBLIC	_xmlTextWriterWriteFormatPI
PUBLIC	_xmlTextWriterWriteVFormatPI
PUBLIC	_xmlTextWriterWritePI
PUBLIC	_xmlTextWriterStartCDATA
PUBLIC	_xmlTextWriterEndCDATA
PUBLIC	_xmlTextWriterWriteFormatCDATA
PUBLIC	_xmlTextWriterWriteVFormatCDATA
PUBLIC	_xmlTextWriterWriteCDATA
PUBLIC	_xmlTextWriterStartDTD
PUBLIC	_xmlTextWriterEndDTD
PUBLIC	_xmlTextWriterWriteFormatDTD
PUBLIC	_xmlTextWriterWriteVFormatDTD
PUBLIC	_xmlTextWriterWriteDTD
PUBLIC	_xmlTextWriterStartDTDElement
PUBLIC	_xmlTextWriterEndDTDElement
PUBLIC	_xmlTextWriterWriteFormatDTDElement
PUBLIC	_xmlTextWriterWriteVFormatDTDElement
PUBLIC	_xmlTextWriterWriteDTDElement
PUBLIC	_xmlTextWriterStartDTDAttlist
PUBLIC	_xmlTextWriterEndDTDAttlist
PUBLIC	_xmlTextWriterWriteFormatDTDAttlist
PUBLIC	_xmlTextWriterWriteVFormatDTDAttlist
PUBLIC	_xmlTextWriterWriteDTDAttlist
PUBLIC	_xmlTextWriterStartDTDEntity
PUBLIC	_xmlTextWriterEndDTDEntity
PUBLIC	_xmlTextWriterWriteFormatDTDInternalEntity
PUBLIC	_xmlTextWriterWriteVFormatDTDInternalEntity
PUBLIC	_xmlTextWriterWriteDTDInternalEntity
PUBLIC	_xmlTextWriterWriteDTDExternalEntity
PUBLIC	_xmlTextWriterWriteDTDExternalEntityContents
PUBLIC	_xmlTextWriterWriteDTDEntity
PUBLIC	_xmlTextWriterWriteDTDNotation
PUBLIC	_xmlTextWriterSetIndent
PUBLIC	_xmlTextWriterSetIndentString
PUBLIC	_xmlTextWriterSetQuoteChar
PUBLIC	_xmlTextWriterFlush
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0CD@BLMOIHCP@xmlNewTextWriter?5?3?5out?5of?5memor@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_0CM@BPKCIIPG@xmlNewTextWriterFilename?5?3?5cann@ ; `string'
PUBLIC	??_C@_0CL@DOKHFPFK@xmlNewTextWriterFilename?5?3?5out?5@ ; `string'
PUBLIC	??_C@_0CJ@HOKLKMGC@xmlNewTextWriterMemory?5?3?5out?5of@ ; `string'
PUBLIC	??_C@_0CP@MDJJPOLB@xmlNewTextWriterPushParser?5?3?5in@ ; `string'
PUBLIC	??_C@_0EA@BHKIBNFO@xmlNewTextWriterPushParser?5?3?5er@ ; `string'
PUBLIC	??_C@_0DJ@DOJNHAEH@xmlNewTextWriterPushParser?5?3?5er@ ; `string'
PUBLIC	??_C@_0DJ@MHFIEMJE@xmlNewTextWriterDoc?5?3?5error?5at?5@ ; `string'
PUBLIC	??_C@_03HLLJOCDO@1?40@				; `string'
PUBLIC	??_C@_0CL@MKPGDELP@xmlNewTextWriterDoc?5?3?5error?5at?5@ ; `string'
PUBLIC	??_C@_0DM@HKPAOPJL@xmlNewTextWriterDoc?5?3?5error?5at?5@ ; `string'
PUBLIC	??_C@_0CP@PFMBJEMH@xmlNewTextWriterTree?5?3?5invalid?5@ ; `string'
PUBLIC	??_C@_0CO@KMFPACDM@xmlTextWriterStartDocument?5?3?5in@ ; `string'
PUBLIC	??_C@_0DL@JOCNHFIJ@xmlTextWriterStartDocument?5?3?5no@ ; `string'
PUBLIC	??_C@_0CN@ODOCGFDE@xmlTextWriterStartDocument?5?3?5ou@ ; `string'
PUBLIC	??_C@_0P@CNJADHFP@?$DM?$DPxml?5version?$DN@	; `string'
PUBLIC	??_C@_0L@GJNPICMJ@?5encoding?$DN@		; `string'
PUBLIC	??_C@_0N@BGGHLCGN@?5standalone?$DN@		; `string'
PUBLIC	??_C@_03KCOJOIAE@?$DP?$DO?6@			; `string'
PUBLIC	??_C@_0CM@MFAOOHEJ@xmlTextWriterEndDocument?5?3?5inva@ ; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0CN@DOOOICJG@xmlTextWriterStartComment?5?3?5inv@ ; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO@				; `string'
PUBLIC	??_C@_0CM@FINCADKE@xmlTextWriterStartElement?5?3?5out@ ; `string'
PUBLIC	??_C@_04FFDNBKGC@?$DM?$CB?9?9@			; `string'
PUBLIC	??_C@_0CL@GJMJAJAF@xmlTextWriterEndComment?5?3?5inval@ ; `string'
PUBLIC	??_C@_0DI@MAGHMILC@xmlTextWriterEndComment?5?3?5not?5a@ ; `string'
PUBLIC	??_C@_03PNLDJJMO@?9?9?$DO@			; `string'
PUBLIC	??_C@_0DE@JBFCJMHJ@xmlTextWriterWriteVFormatCommen@ ; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM@				; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3@				; `string'
PUBLIC	??_C@_0CO@MGJEFOHO@xmlTextWriterStartElementNS?5?3?5o@ ; `string'
PUBLIC	??_C@_05PPEFOGKI@xmlns@				; `string'
PUBLIC	??_C@_02HCGKDMEN@?1?$DO@			; `string'
PUBLIC	??_C@_02DPNDACHE@?$DM?1@			; `string'
PUBLIC	??_C@_0CM@KBMCGCHN@xmlTextWriterWriteRawLen?5?3?5inva@ ; `string'
PUBLIC	??_C@_0CN@MACOIGNG@xmlTextWriterWriteRawLen?5?3?5inva@ ; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6@			; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN@				; `string'
PUBLIC	??_C@_0DA@LBMIIMOH@xmlTextWriterStartAttributeNS?5?3@ ; `string'
PUBLIC	??_C@_03PJHHNEEI@xml@				; `string'
PUBLIC	??_C@_0FG@KFBLHCOM@xmlTextWriterStartPI?5?3?5target?5n@ ; `string'
PUBLIC	??_C@_0CD@KBFLMPAO@xmlTextWriterStartPI?5?3?5nested?5P@ ; `string'
PUBLIC	??_C@_0CH@IKGNFAGK@xmlTextWriterStartPI?5?3?5out?5of?5m@ ; `string'
PUBLIC	??_C@_02HFBBBACF@?$DM?$DP@			; `string'
PUBLIC	??_C@_02GOEMJPDN@?$DP?$DO@			; `string'
PUBLIC	??_C@_0DO@LGFOPFHE@xmlTextWriterStartCDATA?5?3?5CDATA@ ; `string'
PUBLIC	??_C@_0CK@FMBLGDPB@xmlTextWriterStartCDATA?5?3?5out?5o@ ; `string'
PUBLIC	??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL@		; `string'
PUBLIC	??_C@_03MCHNFBAC@?$FN?$FN?$DO@			; `string'
PUBLIC	??_C@_0DF@KCNCPLNC@xmlTextWriterStartDTD?5?3?5DTD?5all@ ; `string'
PUBLIC	??_C@_0CI@CDIDIABN@xmlTextWriterStartDTD?5?3?5out?5of?5@ ; `string'
PUBLIC	??_C@_0L@JKHDJBPI@?$DM?$CBDOCTYPE?5@		; `string'
PUBLIC	??_C@_0DD@KKKOOJH@xmlTextWriterStartDTD?5?3?5system?5@ ; `string'
PUBLIC	??_C@_07GAMBALOD@PUBLIC?5@			; `string'
PUBLIC	??_C@_07PBLMPJLL@SYSTEM?5@			; `string'
PUBLIC	??_C@_08HBIFNNEL@?6?5?5?5?5?5?5?5@		; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN@				; `string'
PUBLIC	??_C@_02GBLMOEJC@?5?$FL@			; `string'
PUBLIC	??_C@_0CP@HLOPJJJB@xmlTextWriterStartDTDElement?5?3?5@ ; `string'
PUBLIC	??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@		; `string'
PUBLIC	??_C@_0CP@EGINGCOH@xmlTextWriterStartDTDAttlist?5?3?5@ ; `string'
PUBLIC	??_C@_0L@NDHICKFH@?$DM?$CBATTLIST?5@		; `string'
PUBLIC	??_C@_09POADHIMD@?$DM?$CBENTITY?5@		; `string'
PUBLIC	??_C@_02KLLMIGEE@?$CF?5@			; `string'
PUBLIC	??_C@_0EI@DDDMEPLI@xmlTextWriterWriteDTDExternalEn@ ; `string'
PUBLIC	??_C@_0HK@MIJHHHOH@xmlTextWriterWriteDTDExternalEn@ ; `string'
PUBLIC	??_C@_0FM@COPKODIE@xmlTextWriterWriteDTDExternalEn@ ; `string'
PUBLIC	??_C@_0EI@PKOPPIFG@xmlTextWriterWriteDTDExternalEn@ ; `string'
PUBLIC	??_C@_08GBBLECIH@?5PUBLIC?5@			; `string'
PUBLIC	??_C@_07FCENLLFI@?5SYSTEM@			; `string'
PUBLIC	??_C@_07CGHGCOMH@?5NDATA?5@			; `string'
PUBLIC	??_C@_0M@IOFINGOM@?$DM?$CBNOTATION?5@		; `string'
PUBLIC	??_C@_0DA@HGAENLDC@xmlTextWriterWriteDocCallback?5?3@ ; `string'
PUBLIC	??_C@_0DA@LOAGMMIC@xmlTextWriterCloseDocCallback?5?3@ ; `string'
PUBLIC	??_C@_0CI@EEFGHMNP@xmlTextWriterVSprintf?5?3?5out?5of?5@ ; `string'
PUBLIC	??_C@_0CE@EPNLGKMK@SAX?4startDocument?$CI?$CJ?3?5out?5of?5mem@ ; `string'
EXTRN	_xmlStrdup:PROC
EXTRN	_xmlStrcmp:PROC
EXTRN	_xmlStrcasecmp:PROC
EXTRN	_xmlStrlen:PROC
EXTRN	_xmlStrcat:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_xmlNewDoc:PROC
EXTRN	_xmlFreeDoc:PROC
EXTRN	_xmlSetDocCompressMode:PROC
EXTRN	___xmlRaiseError:PROC
EXTRN	_xmlListCreate:PROC
EXTRN	_xmlListDelete:PROC
EXTRN	_xmlListSearch:PROC
EXTRN	_xmlListEmpty:PROC
EXTRN	_xmlListFront:PROC
EXTRN	_xmlListSize:PROC
EXTRN	_xmlListPopFront:PROC
EXTRN	_xmlListPushFront:PROC
EXTRN	_xmlLinkGetData:PROC
EXTRN	_xmlEncodeSpecialChars:PROC
EXTRN	_xmlFindCharEncodingHandler:PROC
EXTRN	_xmlOutputBufferCreateFilename:PROC
EXTRN	_xmlOutputBufferCreateBuffer:PROC
EXTRN	_xmlOutputBufferCreateIO:PROC
EXTRN	_xmlOutputBufferWrite:PROC
EXTRN	_xmlOutputBufferWriteString:PROC
EXTRN	_xmlOutputBufferFlush:PROC
EXTRN	_xmlOutputBufferClose:PROC
EXTRN	_xmlFreeParserCtxt:PROC
EXTRN	_xmlCreatePushParserCtxt:PROC
EXTRN	_xmlParseChunk:PROC
EXTRN	_xmlSAX2StartElement:PROC
EXTRN	_xmlSAX2EndElement:PROC
EXTRN	_xmlSAX2InitDefaultSAXHandler:PROC
EXTRN	_xmlCanonicPath:PROC
EXTRN	_htmlNewDocNoDtD:PROC
EXTRN	_xmlBufCreateSize:PROC
EXTRN	_xmlCharEncOutput:PROC
EXTRN	_xmlBufAttrSerializeTxtContent:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	_memset:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT ??_C@_0CE@EPNLGKMK@SAX?4startDocument?$CI?$CJ?3?5out?5of?5mem@
CONST	SEGMENT
??_C@_0CE@EPNLGKMK@SAX?4startDocument?$CI?$CJ?3?5out?5of?5mem@ DB 'SAX.st'
	DB	'artDocument(): out of memory', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EEFGHMNP@xmlTextWriterVSprintf?5?3?5out?5of?5@
CONST	SEGMENT
??_C@_0CI@EEFGHMNP@xmlTextWriterVSprintf?5?3?5out?5of?5@ DB 'xmlTextWrite'
	DB	'rVSprintf : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LOAGMMIC@xmlTextWriterCloseDocCallback?5?3@
CONST	SEGMENT
??_C@_0DA@LOAGMMIC@xmlTextWriterCloseDocCallback?5?3@ DB 'xmlTextWriterCl'
	DB	'oseDocCallback : XML error %d !', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HGAENLDC@xmlTextWriterWriteDocCallback?5?3@
CONST	SEGMENT
??_C@_0DA@HGAENLDC@xmlTextWriterWriteDocCallback?5?3@ DB 'xmlTextWriterWr'
	DB	'iteDocCallback : XML error %d !', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IOFINGOM@?$DM?$CBNOTATION?5@
CONST	SEGMENT
??_C@_0M@IOFINGOM@?$DM?$CBNOTATION?5@ DB '<!NOTATION ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CGHGCOMH@?5NDATA?5@
CONST	SEGMENT
??_C@_07CGHGCOMH@?5NDATA?5@ DB ' NDATA ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCENLLFI@?5SYSTEM@
CONST	SEGMENT
??_C@_07FCENLLFI@?5SYSTEM@ DB ' SYSTEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GBBLECIH@?5PUBLIC?5@
CONST	SEGMENT
??_C@_08GBBLECIH@?5PUBLIC?5@ DB ' PUBLIC ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@PKOPPIFG@xmlTextWriterWriteDTDExternalEn@
CONST	SEGMENT
??_C@_0EI@PKOPPIFG@xmlTextWriterWriteDTDExternalEn@ DB 'xmlTextWriterWrit'
	DB	'eDTDExternalEntityContents: system identifier needed!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@COPKODIE@xmlTextWriterWriteDTDExternalEn@
CONST	SEGMENT
??_C@_0FM@COPKODIE@xmlTextWriterWriteDTDExternalEn@ DB 'xmlTextWriterWrit'
	DB	'eDTDExternalEntityContents: notation not allowed with paramet'
	DB	'er entities!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HK@MIJHHHOH@xmlTextWriterWriteDTDExternalEn@
CONST	SEGMENT
??_C@_0HK@MIJHHHOH@xmlTextWriterWriteDTDExternalEn@ DB 'xmlTextWriterWrit'
	DB	'eDTDExternalEntityContents: you must call xmlTextWriterStartD'
	DB	'TDEntity before the call to this function!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@DDDMEPLI@xmlTextWriterWriteDTDExternalEn@
CONST	SEGMENT
??_C@_0EI@DDDMEPLI@xmlTextWriterWriteDTDExternalEn@ DB 'xmlTextWriterWrit'
	DB	'eDTDExternalEntityContents: xmlTextWriterPtr invalid!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KLLMIGEE@?$CF?5@
CONST	SEGMENT
??_C@_02KLLMIGEE@?$CF?5@ DB '% ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09POADHIMD@?$DM?$CBENTITY?5@
CONST	SEGMENT
??_C@_09POADHIMD@?$DM?$CBENTITY?5@ DB '<!ENTITY ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NDHICKFH@?$DM?$CBATTLIST?5@
CONST	SEGMENT
??_C@_0L@NDHICKFH@?$DM?$CBATTLIST?5@ DB '<!ATTLIST ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EGINGCOH@xmlTextWriterStartDTDAttlist?5?3?5@
CONST	SEGMENT
??_C@_0CP@EGINGCOH@xmlTextWriterStartDTDAttlist?5?3?5@ DB 'xmlTextWriterS'
	DB	'tartDTDAttlist : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@
CONST	SEGMENT
??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@ DB '<!ELEMENT ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HLOPJJJB@xmlTextWriterStartDTDElement?5?3?5@
CONST	SEGMENT
??_C@_0CP@HLOPJJJB@xmlTextWriterStartDTDElement?5?3?5@ DB 'xmlTextWriterS'
	DB	'tartDTDElement : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GBLMOEJC@?5?$FL@
CONST	SEGMENT
??_C@_02GBLMOEJC@?5?$FL@ DB ' [', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBIFNNEL@?6?5?5?5?5?5?5?5@
CONST	SEGMENT
??_C@_08HBIFNNEL@?6?5?5?5?5?5?5?5@ DB 0aH, '       ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PBLMPJLL@SYSTEM?5@
CONST	SEGMENT
??_C@_07PBLMPJLL@SYSTEM?5@ DB 'SYSTEM ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GAMBALOD@PUBLIC?5@
CONST	SEGMENT
??_C@_07GAMBALOD@PUBLIC?5@ DB 'PUBLIC ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KKKOOJH@xmlTextWriterStartDTD?5?3?5system?5@
CONST	SEGMENT
??_C@_0DD@KKKOOJH@xmlTextWriterStartDTD?5?3?5system?5@ DB 'xmlTextWriterS'
	DB	'tartDTD : system identifier needed!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JKHDJBPI@?$DM?$CBDOCTYPE?5@
CONST	SEGMENT
??_C@_0L@JKHDJBPI@?$DM?$CBDOCTYPE?5@ DB '<!DOCTYPE ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CDIDIABN@xmlTextWriterStartDTD?5?3?5out?5of?5@
CONST	SEGMENT
??_C@_0CI@CDIDIABN@xmlTextWriterStartDTD?5?3?5out?5of?5@ DB 'xmlTextWrite'
	DB	'rStartDTD : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@KCNCPLNC@xmlTextWriterStartDTD?5?3?5DTD?5all@
CONST	SEGMENT
??_C@_0DF@KCNCPLNC@xmlTextWriterStartDTD?5?3?5DTD?5all@ DB 'xmlTextWriter'
	DB	'StartDTD : DTD allowed only in prolog!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03MCHNFBAC@?$FN?$FN?$DO@
CONST	SEGMENT
??_C@_03MCHNFBAC@?$FN?$FN?$DO@ DB ']]>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL@
CONST	SEGMENT
??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL@ DB '<![CDATA[', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FMBLGDPB@xmlTextWriterStartCDATA?5?3?5out?5o@
CONST	SEGMENT
??_C@_0CK@FMBLGDPB@xmlTextWriterStartCDATA?5?3?5out?5o@ DB 'xmlTextWriter'
	DB	'StartCDATA : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@LGFOPFHE@xmlTextWriterStartCDATA?5?3?5CDATA@
CONST	SEGMENT
??_C@_0DO@LGFOPFHE@xmlTextWriterStartCDATA?5?3?5CDATA@ DB 'xmlTextWriterS'
	DB	'tartCDATA : CDATA not allowed in this context!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GOEMJPDN@?$DP?$DO@
CONST	SEGMENT
??_C@_02GOEMJPDN@?$DP?$DO@ DB '?>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HFBBBACF@?$DM?$DP@
CONST	SEGMENT
??_C@_02HFBBBACF@?$DM?$DP@ DB '<?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IKGNFAGK@xmlTextWriterStartPI?5?3?5out?5of?5m@
CONST	SEGMENT
??_C@_0CH@IKGNFAGK@xmlTextWriterStartPI?5?3?5out?5of?5m@ DB 'xmlTextWrite'
	DB	'rStartPI : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KBFLMPAO@xmlTextWriterStartPI?5?3?5nested?5P@
CONST	SEGMENT
??_C@_0CD@KBFLMPAO@xmlTextWriterStartPI?5?3?5nested?5P@ DB 'xmlTextWriter'
	DB	'StartPI : nested PI!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@KFBLHCOM@xmlTextWriterStartPI?5?3?5target?5n@
CONST	SEGMENT
??_C@_0FG@KFBLHCOM@xmlTextWriterStartPI?5?3?5target?5n@ DB 'xmlTextWriter'
	DB	'StartPI : target name [Xx][Mm][Ll] is reserved for xml standa'
	DB	'rdization!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PJHHNEEI@xml@
CONST	SEGMENT
??_C@_03PJHHNEEI@xml@ DB 'xml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LBMIIMOH@xmlTextWriterStartAttributeNS?5?3@
CONST	SEGMENT
??_C@_0DA@LBMIIMOH@xmlTextWriterStartAttributeNS?5?3@ DB 'xmlTextWriterSt'
	DB	'artAttributeNS : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
?dtable@?1??xmlOutputBufferWriteBase64@@9@9 DB 041H	; `xmlOutputBufferWriteBase64'::`2'::dtable
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	04bH
	DB	04cH
	DB	04dH
	DB	04eH
	DB	04fH
	DB	050H
	DB	051H
	DB	052H
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	061H
	DB	062H
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	06bH
	DB	06cH
	DB	06dH
	DB	06eH
	DB	06fH
	DB	070H
	DB	071H
	DB	072H
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	030H
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	02bH
	DB	02fH
?hex@?1??xmlOutputBufferWriteBinHex@@9@9 DB 030H	; `xmlOutputBufferWriteBinHex'::`2'::hex
	DB	031H
	DB	032H
	DB	033H
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	041H
	DB	042H
	DB	043H
	DB	044H
	DB	045H
	DB	046H
_DATA	ENDS
;	COMDAT ??_C@_0CN@MACOIGNG@xmlTextWriterWriteRawLen?5?3?5inva@
CONST	SEGMENT
??_C@_0CN@MACOIGNG@xmlTextWriterWriteRawLen?5?3?5inva@ DB 'xmlTextWriterW'
	DB	'riteRawLen : invalid content!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@KBMCGCHN@xmlTextWriterWriteRawLen?5?3?5inva@
CONST	SEGMENT
??_C@_0CM@KBMCGCHN@xmlTextWriterWriteRawLen?5?3?5inva@ DB 'xmlTextWriterW'
	DB	'riteRawLen : invalid writer!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNDACHE@?$DM?1@
CONST	SEGMENT
??_C@_02DPNDACHE@?$DM?1@ DB '</', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCGKDMEN@?1?$DO@
CONST	SEGMENT
??_C@_02HCGKDMEN@?1?$DO@ DB '/>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPEFOGKI@xmlns@
CONST	SEGMENT
??_C@_05PPEFOGKI@xmlns@ DB 'xmlns', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@MGJEFOHO@xmlTextWriterStartElementNS?5?3?5o@
CONST	SEGMENT
??_C@_0CO@MGJEFOHO@xmlTextWriterStartElementNS?5?3?5o@ DB 'xmlTextWriterS'
	DB	'tartElementNS : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JBFCJMHJ@xmlTextWriterWriteVFormatCommen@
CONST	SEGMENT
??_C@_0DE@JBFCJMHJ@xmlTextWriterWriteVFormatCommen@ DB 'xmlTextWriterWrit'
	DB	'eVFormatComment : invalid writer!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PNLDJJMO@?9?9?$DO@
CONST	SEGMENT
??_C@_03PNLDJJMO@?9?9?$DO@ DB '-->', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@MAGHMILC@xmlTextWriterEndComment?5?3?5not?5a@
CONST	SEGMENT
??_C@_0DI@MAGHMILC@xmlTextWriterEndComment?5?3?5not?5a@ DB 'xmlTextWriter'
	DB	'EndComment : not allowed in this context!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GJMJAJAF@xmlTextWriterEndComment?5?3?5inval@
CONST	SEGMENT
??_C@_0CL@GJMJAJAF@xmlTextWriterEndComment?5?3?5inval@ DB 'xmlTextWriterE'
	DB	'ndComment : invalid writer!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04FFDNBKGC@?$DM?$CB?9?9@
CONST	SEGMENT
??_C@_04FFDNBKGC@?$DM?$CB?9?9@ DB '<!--', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FINCADKE@xmlTextWriterStartElement?5?3?5out@
CONST	SEGMENT
??_C@_0CM@FINCADKE@xmlTextWriterStartElement?5?3?5out@ DB 'xmlTextWriterS'
	DB	'tartElement : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DOOOICJG@xmlTextWriterStartComment?5?3?5inv@
CONST	SEGMENT
??_C@_0CN@DOOOICJG@xmlTextWriterStartComment?5?3?5inv@ DB 'xmlTextWriterS'
	DB	'tartComment : invalid writer!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@MFAOOHEJ@xmlTextWriterEndDocument?5?3?5inva@
CONST	SEGMENT
??_C@_0CM@MFAOOHEJ@xmlTextWriterEndDocument?5?3?5inva@ DB 'xmlTextWriterE'
	DB	'ndDocument : invalid writer!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCOJOIAE@?$DP?$DO?6@
CONST	SEGMENT
??_C@_03KCOJOIAE@?$DP?$DO?6@ DB '?>', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BGGHLCGN@?5standalone?$DN@
CONST	SEGMENT
??_C@_0N@BGGHLCGN@?5standalone?$DN@ DB ' standalone=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GJNPICMJ@?5encoding?$DN@
CONST	SEGMENT
??_C@_0L@GJNPICMJ@?5encoding?$DN@ DB ' encoding=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CNJADHFP@?$DM?$DPxml?5version?$DN@
CONST	SEGMENT
??_C@_0P@CNJADHFP@?$DM?$DPxml?5version?$DN@ DB '<?xml version=', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@ODOCGFDE@xmlTextWriterStartDocument?5?3?5ou@
CONST	SEGMENT
??_C@_0CN@ODOCGFDE@xmlTextWriterStartDocument?5?3?5ou@ DB 'xmlTextWriterS'
	DB	'tartDocument : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@JOCNHFIJ@xmlTextWriterStartDocument?5?3?5no@
CONST	SEGMENT
??_C@_0DL@JOCNHFIJ@xmlTextWriterStartDocument?5?3?5no@ DB 'xmlTextWriterS'
	DB	'tartDocument : not allowed in this context!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KMFPACDM@xmlTextWriterStartDocument?5?3?5in@
CONST	SEGMENT
??_C@_0CO@KMFPACDM@xmlTextWriterStartDocument?5?3?5in@ DB 'xmlTextWriterS'
	DB	'tartDocument : invalid writer!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@PFMBJEMH@xmlNewTextWriterTree?5?3?5invalid?5@
CONST	SEGMENT
??_C@_0CP@PFMBJEMH@xmlNewTextWriterTree?5?3?5invalid?5@ DB 'xmlNewTextWri'
	DB	'terTree : invalid document tree!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@HKPAOPJL@xmlNewTextWriterDoc?5?3?5error?5at?5@
CONST	SEGMENT
??_C@_0DM@HKPAOPJL@xmlNewTextWriterDoc?5?3?5error?5at?5@ DB 'xmlNewTextWr'
	DB	'iterDoc : error at xmlNewTextWriterPushParser!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MKPGDELP@xmlNewTextWriterDoc?5?3?5error?5at?5@
CONST	SEGMENT
??_C@_0CL@MKPGDELP@xmlNewTextWriterDoc?5?3?5error?5at?5@ DB 'xmlNewTextWr'
	DB	'iterDoc : error at xmlNewDoc!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HLLJOCDO@1?40@
CONST	SEGMENT
??_C@_03HLLJOCDO@1?40@ DB '1.0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@MHFIEMJE@xmlNewTextWriterDoc?5?3?5error?5at?5@
CONST	SEGMENT
??_C@_0DJ@MHFIEMJE@xmlNewTextWriterDoc?5?3?5error?5at?5@ DB 'xmlNewTextWr'
	DB	'iterDoc : error at xmlCreatePushParserCtxt!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DOJNHAEH@xmlNewTextWriterPushParser?5?3?5er@
CONST	SEGMENT
??_C@_0DJ@DOJNHAEH@xmlNewTextWriterPushParser?5?3?5er@ DB 'xmlNewTextWrit'
	DB	'erPushParser : error at xmlNewTextWriter!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@BHKIBNFO@xmlNewTextWriterPushParser?5?3?5er@
CONST	SEGMENT
??_C@_0EA@BHKIBNFO@xmlNewTextWriterPushParser?5?3?5er@ DB 'xmlNewTextWrit'
	DB	'erPushParser : error at xmlOutputBufferCreateIO!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@MDJJPOLB@xmlNewTextWriterPushParser?5?3?5in@
CONST	SEGMENT
??_C@_0CP@MDJJPOLB@xmlNewTextWriterPushParser?5?3?5in@ DB 'xmlNewTextWrit'
	DB	'erPushParser : invalid context!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HOKLKMGC@xmlNewTextWriterMemory?5?3?5out?5of@
CONST	SEGMENT
??_C@_0CJ@HOKLKMGC@xmlNewTextWriterMemory?5?3?5out?5of@ DB 'xmlNewTextWri'
	DB	'terMemory : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DOKHFPFK@xmlNewTextWriterFilename?5?3?5out?5@
CONST	SEGMENT
??_C@_0CL@DOKHFPFK@xmlNewTextWriterFilename?5?3?5out?5@ DB 'xmlNewTextWri'
	DB	'terFilename : out of memory!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BPKCIIPG@xmlNewTextWriterFilename?5?3?5cann@
CONST	SEGMENT
??_C@_0CM@BPKCIIPG@xmlNewTextWriterFilename?5?3?5cann@ DB 'xmlNewTextWrit'
	DB	'erFilename : cannot open uri', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BLMOIHCP@xmlNewTextWriter?5?3?5out?5of?5memor@
CONST	SEGMENT
??_C@_0CD@BLMOIHCP@xmlNewTextWriter?5?3?5out?5of?5memor@ DB 'xmlNewTextWr'
	DB	'iter : out of memory!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlOutputBufferWriteBinHex
_TEXT	SEGMENT
_out$ = 8						; size = 4
_len$ = 12						; size = 4
_data$ = 16						; size = 4
_xmlOutputBufferWriteBinHex PROC			; COMDAT

; 1674 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _out$[ebp]
	test	ebx, ebx
	je	SHORT $LN6@xmlOutputB

; 1675 :     int count;
; 1676 :     int sum;
; 1677 :     static char hex[16] =
; 1678 : 	{'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
; 1679 :     int i;
; 1680 : 
; 1681 :     if ((out == NULL) || (data == NULL) || (len < 0)) {

	mov	ecx, DWORD PTR _data$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@xmlOutputB
	mov	eax, DWORD PTR _len$[ebp]
	test	eax, eax
	js	SHORT $LN6@xmlOutputB

; 1682 :         return -1;
; 1683 :     }
; 1684 : 
; 1685 :     sum = 0;

	xor	edi, edi

; 1686 :     for (i = 0; i < len; i++) {

	xor	esi, esi
	test	eax, eax
	jle	SHORT $LN3@xmlOutputB
	npad	3
$LL4@xmlOutputB:

; 1687 :         count =

	movzx	eax, BYTE PTR [esi+ecx]
	shr	eax, 4
	add	eax, OFFSET ?hex@?1??xmlOutputBufferWriteBinHex@@9@9
	push	eax
	push	1
	push	ebx
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1688 :             xmlOutputBufferWrite(out, 1,
; 1689 :                                  (const char *) &hex[data[i] >> 4]);
; 1690 :         if (count == -1)

	cmp	eax, -1
	je	SHORT $LN6@xmlOutputB

; 1691 :             return -1;
; 1692 :         sum += count;

	add	edi, eax

; 1693 :         count =

	mov	eax, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [esi+eax]
	and	eax, 15					; 0000000fH
	add	eax, OFFSET ?hex@?1??xmlOutputBufferWriteBinHex@@9@9
	push	eax
	push	1
	push	ebx
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1694 :             xmlOutputBufferWrite(out, 1,
; 1695 :                                  (const char *) &hex[data[i] & 0xF]);
; 1696 :         if (count == -1)

	cmp	eax, -1
	je	SHORT $LN6@xmlOutputB

; 1686 :     for (i = 0; i < len; i++) {

	mov	ecx, DWORD PTR _data$[ebp]
	inc	esi

; 1697 :             return -1;
; 1698 :         sum += count;

	add	edi, eax
	cmp	esi, DWORD PTR _len$[ebp]
	jl	SHORT $LL4@xmlOutputB
$LN3@xmlOutputB:

; 1699 :     }
; 1700 : 
; 1701 :     return sum;

	mov	eax, edi
	pop	edi

; 1702 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN6@xmlOutputB:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
_xmlOutputBufferWriteBinHex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlWriterErrMsgInt
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_val$ = 20						; size = 4
_xmlWriterErrMsgInt PROC				; COMDAT

; 159  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	push	DWORD PTR _msg$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	0
	push	eax
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	DWORD PTR _error$[ebp]
	push	25					; 00000019H
	push	0
	test	ecx, ecx
	je	SHORT $LN2@xmlWriterE

; 166  :                     XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, val, 0, msg, val);
; 167  :     }
; 168  : }

	push	DWORD PTR [ecx+32]
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
	pop	ebp
	ret	0
$LN2@xmlWriterE:

; 160  :     if (ctxt != NULL) {
; 161  : 	__xmlRaiseError(NULL, NULL, NULL, ctxt->ctxt,
; 162  : 	            NULL, XML_FROM_WRITER, error, XML_ERR_FATAL,
; 163  : 		    NULL, 0, NULL, NULL, NULL, val, 0, msg, val);
; 164  :     } else {
; 165  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	0

; 166  :                     XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, val, 0, msg, val);
; 167  :     }
; 168  : }

	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
	pop	ebp
	ret	0
_xmlWriterErrMsgInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlWriterErrMsg
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_xmlWriterErrMsg PROC					; COMDAT

; 136  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _msg$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	DWORD PTR _error$[ebp]
	push	25					; 00000019H
	push	0
	test	eax, eax
	je	SHORT $LN2@xmlWriterE

; 143  :                     XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, 0, 0, "%s", msg);
; 144  :     }
; 145  : }

	push	DWORD PTR [eax+32]
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
	pop	ebp
	ret	0
$LN2@xmlWriterE:

; 137  :     if (ctxt != NULL) {
; 138  : 	__xmlRaiseError(NULL, NULL, NULL, ctxt->ctxt,
; 139  : 	            NULL, XML_FROM_WRITER, error, XML_ERR_FATAL,
; 140  : 		    NULL, 0, NULL, NULL, NULL, 0, 0, "%s", msg);
; 141  :     } else {
; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	0

; 143  :                     XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, 0, 0, "%s", msg);
; 144  :     }
; 145  : }

	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
	pop	ebp
	ret	0
_xmlWriterErrMsg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterHandleStateDependencies
_TEXT	SEGMENT
_extra$ = -4						; size = 3
_writer$ = 8						; size = 4
_p$ = 12						; size = 4
_xmlTextWriterHandleStateDependencies PROC		; COMDAT

; 4673 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _writer$[ebp]
	test	ebx, ebx
	je	$LN19@xmlTextWri

; 4674 :     int count;
; 4675 :     int sum;
; 4676 :     char extra[3];
; 4677 : 
; 4678 :     if (writer == NULL)
; 4679 :         return -1;
; 4680 : 
; 4681 :     if (p == NULL)

	mov	esi, DWORD PTR _p$[ebp]
	test	esi, esi
	jne	SHORT $LN5@xmlTextWri

; 4734 : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 4682 :         return 0;
; 4683 : 
; 4684 :     sum = 0;
; 4685 :     extra[0] = extra[1] = extra[2] = '\0';
; 4686 :     if (p != 0) {
; 4687 :         sum = 0;
; 4688 :         switch (p->state) {

	mov	eax, DWORD PTR [esi+4]
	xor	edi, edi
	dec	eax
	mov	WORD PTR _extra$[ebp+1], 0
	mov	BYTE PTR _extra$[ebp], 0
	cmp	eax, 14					; 0000000eH
	ja	SHORT $LN15@xmlTextWri
	movzx	eax, BYTE PTR $LN20@xmlTextWri[eax]
	jmp	DWORD PTR $LN23@xmlTextWri[eax*4]
$LN7@xmlTextWri:

; 4689 :             case XML_TEXTWRITER_NAME:
; 4690 :                 /* Output namespace declarations */
; 4691 :                 count = xmlTextWriterOutputNSDecl(writer);

	push	ebx
	call	_xmlTextWriterOutputNSDecl
	mov	edi, eax
	add	esp, 4

; 4692 :                 if (count < 0)

	test	edi, edi
	js	SHORT $LN19@xmlTextWri

; 4693 :                     return -1;
; 4694 :                 sum += count;
; 4695 :                 extra[0] = '>';

	mov	BYTE PTR _extra$[ebp], 62		; 0000003eH

; 4696 :                 p->state = XML_TEXTWRITER_TEXT;

	mov	DWORD PTR [esi+4], 3

; 4697 :                 break;

	jmp	SHORT $LN18@xmlTextWri
$LN9@xmlTextWri:

; 4698 :             case XML_TEXTWRITER_PI:
; 4699 :                 extra[0] = ' ';
; 4700 :                 p->state = XML_TEXTWRITER_PI_TEXT;

	mov	DWORD PTR [esi+4], 5

; 4701 :                 break;

	jmp	SHORT $LN21@xmlTextWri
$LN10@xmlTextWri:

; 4702 :             case XML_TEXTWRITER_DTD:
; 4703 :                 extra[0] = ' ';

	mov	WORD PTR _extra$[ebp], 23328		; 00005b20H

; 4704 :                 extra[1] = '[';
; 4705 :                 p->state = XML_TEXTWRITER_DTD_TEXT;

	mov	DWORD PTR [esi+4], 8

; 4706 :                 break;

	jmp	SHORT $LN18@xmlTextWri
$LN11@xmlTextWri:

; 4707 :             case XML_TEXTWRITER_DTD_ELEM:
; 4708 :                 extra[0] = ' ';
; 4709 :                 p->state = XML_TEXTWRITER_DTD_ELEM_TEXT;

	mov	DWORD PTR [esi+4], 10			; 0000000aH

; 4710 :                 break;

	jmp	SHORT $LN21@xmlTextWri
$LN12@xmlTextWri:

; 4711 :             case XML_TEXTWRITER_DTD_ATTL:
; 4712 :                 extra[0] = ' ';
; 4713 :                 p->state = XML_TEXTWRITER_DTD_ATTL_TEXT;

	mov	DWORD PTR [esi+4], 12			; 0000000cH

; 4714 :                 break;

	jmp	SHORT $LN21@xmlTextWri
$LN13@xmlTextWri:

; 4715 :             case XML_TEXTWRITER_DTD_ENTY:
; 4716 :             case XML_TEXTWRITER_DTD_PENT:
; 4717 :                 extra[0] = ' ';
; 4718 :                 extra[1] = writer->qchar;

	mov	al, BYTE PTR [ebx+28]
	mov	BYTE PTR _extra$[ebp+1], al

; 4719 :                 p->state = XML_TEXTWRITER_DTD_ENTY_TEXT;

	mov	DWORD PTR [esi+4], 14			; 0000000eH
$LN21@xmlTextWri:

; 4720 :                 break;
; 4721 :             default:
; 4722 :                 break;
; 4723 :         }
; 4724 :     }
; 4725 : 
; 4726 :     if (*extra != '\0') {
; 4727 :         count = xmlOutputBufferWriteString(writer->out, extra);

	mov	BYTE PTR _extra$[ebp], 32		; 00000020H
$LN18@xmlTextWri:
	lea	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	DWORD PTR [ebx]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4728 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN19@xmlTextWri

; 4729 :             return -1;
; 4730 :         sum += count;

	add	edi, eax
$LN15@xmlTextWri:

; 4731 :     }
; 4732 : 
; 4733 :     return sum;

	mov	eax, edi
	pop	edi

; 4734 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN23@xmlTextWri:
	DD	$LN7@xmlTextWri
	DD	$LN9@xmlTextWri
	DD	$LN10@xmlTextWri
	DD	$LN11@xmlTextWri
	DD	$LN12@xmlTextWri
	DD	$LN13@xmlTextWri
	DD	$LN15@xmlTextWri
$LN20@xmlTextWri:
	DB	0
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	2
	DB	6
	DB	3
	DB	6
	DB	4
	DB	6
	DB	5
	DB	6
	DB	5
_xmlTextWriterHandleStateDependencies ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteIndent
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterWriteIndent PROC				; COMDAT

; 4643 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _writer$[ebp]
	push	DWORD PTR [ebx+4]
	call	_xmlListSize
	add	esp, 4
	cmp	eax, 1
	jl	SHORT $LN9@xmlTextWri

; 4644 :     int lksize;
; 4645 :     int i;
; 4646 :     int ret;
; 4647 : 
; 4648 :     lksize = xmlListSize(writer->nodes);
; 4649 :     if (lksize < 1)
; 4650 :         return (-1);            /* list is empty */
; 4651 :     for (i = 0; i < (lksize - 1); i++) {

	lea	edi, DWORD PTR [eax-1]
	xor	esi, esi
	test	edi, edi
	jle	SHORT $LN3@xmlTextWri
	npad	4
$LL4@xmlTextWri:

; 4652 :         ret = xmlOutputBufferWriteString(writer->out,

	push	DWORD PTR [ebx+24]
	push	DWORD PTR [ebx]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4653 :                                          (const char *) writer->ichar);
; 4654 :         if (ret == -1)

	cmp	eax, -1
	je	SHORT $LN9@xmlTextWri

; 4644 :     int lksize;
; 4645 :     int i;
; 4646 :     int ret;
; 4647 : 
; 4648 :     lksize = xmlListSize(writer->nodes);
; 4649 :     if (lksize < 1)
; 4650 :         return (-1);            /* list is empty */
; 4651 :     for (i = 0; i < (lksize - 1); i++) {

	inc	esi
	cmp	esi, edi
	jl	SHORT $LL4@xmlTextWri
$LN3@xmlTextWri:

; 4655 :             return (-1);
; 4656 :     }
; 4657 : 
; 4658 :     return (lksize - 1);

	mov	eax, edi
	pop	edi

; 4659 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN9@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterWriteIndent ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartDocumentCallback
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_xmlTextWriterStartDocumentCallback PROC		; COMDAT

; 4510 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [esi+32], 0
	je	SHORT $LN2@xmlTextWri

; 4511 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;
; 4512 :     xmlDocPtr doc;
; 4513 : 
; 4514 :     if (ctxt->html) {
; 4515 : #ifdef LIBXML_HTML_ENABLED
; 4516 :         if (ctxt->myDoc == NULL)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	jne	$LN10@xmlTextWri

; 4517 :             ctxt->myDoc = htmlNewDocNoDtD(NULL, NULL);

	push	eax
	push	eax
	call	_htmlNewDocNoDtD
	add	esp, 8
	mov	DWORD PTR [esi+8], eax

; 4518 :         if (ctxt->myDoc == NULL) {

	test	eax, eax
	jne	SHORT $LN10@xmlTextWri

; 4539 :         if (doc != NULL) {

	jmp	SHORT $LN21@xmlTextWri
$LN2@xmlTextWri:

; 4519 :             if ((ctxt->sax != NULL) && (ctxt->sax->error != NULL))
; 4520 :                 ctxt->sax->error(ctxt->userData,
; 4521 :                                  "SAX.startDocument(): out of memory\n");
; 4522 :             ctxt->errNo = XML_ERR_NO_MEMORY;
; 4523 :             ctxt->instate = XML_PARSER_EOF;
; 4524 :             ctxt->disableSAX = 1;
; 4525 :             return;
; 4526 :         }
; 4527 : #else
; 4528 :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 4529 :                         "libxml2 built without HTML support\n");
; 4530 :         ctxt->errNo = XML_ERR_INTERNAL_ERROR;
; 4531 :         ctxt->instate = XML_PARSER_EOF;
; 4532 :         ctxt->disableSAX = 1;
; 4533 :         return;
; 4534 : #endif
; 4535 :     } else {
; 4536 :         doc = ctxt->myDoc;

	mov	edi, DWORD PTR [esi+8]

; 4537 :         if (doc == NULL)

	test	edi, edi
	jne	SHORT $LN17@xmlTextWri

; 4538 :             doc = ctxt->myDoc = xmlNewDoc(ctxt->version);

	push	DWORD PTR [esi+20]
	call	_xmlNewDoc
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR [esi+8], edi

; 4539 :         if (doc != NULL) {

	test	edi, edi
	jne	SHORT $LN17@xmlTextWri
$LN21@xmlTextWri:

; 4546 :             }
; 4547 :         } else {
; 4548 :             if ((ctxt->sax != NULL) && (ctxt->sax->error != NULL))
; 4549 :                 ctxt->sax->error(ctxt->userData,
; 4550 :                                  "SAX.startDocument(): out of memory\n");
; 4551 :             ctxt->errNo = XML_ERR_NO_MEMORY;

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN13@xmlTextWri
	mov	eax, DWORD PTR [eax+88]
	test	eax, eax
	je	SHORT $LN13@xmlTextWri
	push	OFFSET ??_C@_0CE@EPNLGKMK@SAX?4startDocument?$CI?$CJ?3?5out?5of?5mem@
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 8
$LN13@xmlTextWri:
	pop	edi
	mov	DWORD PTR [esi+84], 2

; 4552 :             ctxt->instate = XML_PARSER_EOF;

	mov	DWORD PTR [esi+172], -1

; 4553 :             ctxt->disableSAX = 1;

	mov	DWORD PTR [esi+212], 1

; 4563 :                 xmlStrdup((const xmlChar *) ctxt->input->filename);
; 4564 :     }
; 4565 : }

	pop	esi
	pop	ebp
	ret	0
$LN17@xmlTextWri:

; 4540 :             if (doc->children == NULL) {

	cmp	DWORD PTR [edi+12], 0
	jne	SHORT $LN10@xmlTextWri

; 4541 :                 if (ctxt->encoding != NULL)

	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN11@xmlTextWri

; 4542 :                     doc->encoding = xmlStrdup(ctxt->encoding);

	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN12@xmlTextWri
$LN11@xmlTextWri:

; 4543 :                 else
; 4544 :                     doc->encoding = NULL;

	xor	eax, eax
$LN12@xmlTextWri:

; 4545 :                 doc->standalone = ctxt->standalone;

	mov	DWORD PTR [edi+60], eax
	mov	eax, DWORD PTR [esi+28]
	mov	DWORD PTR [edi+40], eax
$LN10@xmlTextWri:

; 4554 :             return;
; 4555 :         }
; 4556 :     }
; 4557 :     if ((ctxt->myDoc != NULL) && (ctxt->myDoc->URL == NULL) &&
; 4558 :         (ctxt->input != NULL) && (ctxt->input->filename != NULL)) {

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN15@xmlTextWri
	cmp	DWORD PTR [eax+72], 0
	jne	SHORT $LN15@xmlTextWri
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	SHORT $LN15@xmlTextWri
	mov	eax, DWORD PTR [eax+4]
	test	eax, eax
	je	SHORT $LN15@xmlTextWri

; 4559 :         ctxt->myDoc->URL =

	push	eax
	call	_xmlCanonicPath
	mov	ecx, DWORD PTR [esi+8]
	add	esp, 4
	mov	DWORD PTR [ecx+72], eax

; 4560 :             xmlCanonicPath((const xmlChar *) ctxt->input->filename);
; 4561 :         if (ctxt->myDoc->URL == NULL)

	mov	eax, DWORD PTR [esi+8]
	cmp	DWORD PTR [eax+72], 0
	jne	SHORT $LN15@xmlTextWri

; 4562 :             ctxt->myDoc->URL =

	mov	eax, DWORD PTR [esi+36]
	push	DWORD PTR [eax+4]
	call	_xmlStrdup
	mov	ecx, DWORD PTR [esi+8]
	add	esp, 4
	mov	DWORD PTR [ecx+72], eax
$LN15@xmlTextWri:

; 4563 :                 xmlStrdup((const xmlChar *) ctxt->input->filename);
; 4564 :     }
; 4565 : }

	pop	edi
	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterStartDocumentCallback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlOutputBufferWriteBase64
_TEXT	SEGMENT
_linelen$1$ = -16					; size = 4
_sum$1$ = -12						; size = 4
_ogroup$1 = -8						; size = 4
_igroup$2 = -4						; size = 3
_out$ = 8						; size = 4
_len$ = 12						; size = 4
_data$ = 16						; size = 4
_xmlOutputBufferWriteBase64 PROC			; COMDAT

; 1543 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	push	ebx
	push	esi
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	cmp	DWORD PTR _out$[ebp], 0
	je	$LN8@xmlOutputB

; 1544 :     static unsigned char dtable[64] =
; 1545 :             {'A','B','C','D','E','F','G','H','I','J','K','L','M',
; 1546 : 	     'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
; 1547 : 	     'a','b','c','d','e','f','g','h','i','j','k','l','m',
; 1548 : 	     'n','o','p','q','r','s','t','u','v','w','x','y','z',
; 1549 : 	     '0','1','2','3','4','5','6','7','8','9','+','/'};
; 1550 : 
; 1551 :     int i;
; 1552 :     int linelen;
; 1553 :     int count;
; 1554 :     int sum;
; 1555 : 
; 1556 :     if ((out == NULL) || (len < 0) || (data == NULL))

	mov	ebx, DWORD PTR _len$[ebp]
	test	ebx, ebx
	js	$LN8@xmlOutputB
	cmp	DWORD PTR _data$[ebp], 0
	je	$LN8@xmlOutputB

; 1557 :         return(-1);
; 1558 : 
; 1559 :     linelen = 0;
; 1560 :     sum = 0;

	xor	esi, esi
	mov	DWORD PTR _linelen$1$[ebp], 0
	mov	DWORD PTR _sum$1$[ebp], esi

; 1561 : 
; 1562 :     i = 0;

	xor	edi, edi
$LL2@xmlOutputB:

; 1563 :     while (1) {
; 1564 :         unsigned char igroup[3];
; 1565 :         unsigned char ogroup[4];
; 1566 :         int c;
; 1567 :         int n;
; 1568 : 
; 1569 :         igroup[0] = igroup[1] = igroup[2] = 0;
; 1570 :         for (n = 0; n < 3 && i < len; n++, i++) {

	mov	esi, DWORD PTR _data$[ebp]
	xor	eax, eax
	mov	WORD PTR _igroup$2[ebp+1], 0
	mov	BYTE PTR _igroup$2[ebp], 0
	npad	1
$LL6@xmlOutputB:
	cmp	edi, ebx
	jge	SHORT $LN5@xmlOutputB

; 1571 :             c = data[i];
; 1572 :             igroup[n] = (unsigned char) c;

	mov	cl, BYTE PTR [edi+esi]
	inc	edi
	mov	BYTE PTR _igroup$2[ebp+eax], cl
	inc	eax
	cmp	eax, 3
	jl	SHORT $LL6@xmlOutputB
$LN5@xmlOutputB:

; 1573 :         }
; 1574 : 
; 1575 :         if (n > 0) {

	mov	esi, DWORD PTR _sum$1$[ebp]
	test	eax, eax
	jle	$LN9@xmlOutputB

; 1576 :             ogroup[0] = dtable[igroup[0] >> 2];

	movzx	edx, BYTE PTR _igroup$2[ebp]

; 1577 :             ogroup[1] = dtable[((igroup[0] & 3) << 4) | (igroup[1] >> 4)];

	movzx	esi, BYTE PTR _igroup$2[ebp+1]
	mov	ecx, edx
	shr	ecx, 2
	and	edx, 3
	shl	edx, 4
	mov	cl, BYTE PTR ?dtable@?1??xmlOutputBufferWriteBase64@@9@9[ecx]
	mov	BYTE PTR _ogroup$1[ebp], cl
	mov	ecx, esi
	shr	ecx, 4

; 1578 :             ogroup[2] =

	and	esi, 15					; 0000000fH
	or	ecx, edx
	shl	esi, 2
	movzx	edx, BYTE PTR _igroup$2[ebp+2]
	mov	cl, BYTE PTR ?dtable@?1??xmlOutputBufferWriteBase64@@9@9[ecx]
	mov	BYTE PTR _ogroup$1[ebp+1], cl
	mov	ecx, edx
	shr	ecx, 6

; 1579 :                 dtable[((igroup[1] & 0xF) << 2) | (igroup[2] >> 6)];
; 1580 :             ogroup[3] = dtable[igroup[2] & 0x3F];

	and	edx, 63					; 0000003fH
	or	ecx, esi
	mov	ch, BYTE PTR ?dtable@?1??xmlOutputBufferWriteBase64@@9@9[ecx]
	mov	cl, BYTE PTR ?dtable@?1??xmlOutputBufferWriteBase64@@9@9[edx]
	mov	BYTE PTR _ogroup$1[ebp+2], ch
	mov	BYTE PTR _ogroup$1[ebp+3], cl

; 1581 : 
; 1582 :             if (n < 3) {

	cmp	eax, 3
	jge	SHORT $LN11@xmlOutputB

; 1583 :                 ogroup[3] = '=';
; 1584 :                 if (n < 2) {

	cmp	eax, 2
	movzx	ecx, ch
	mov	eax, 61					; 0000003dH
	mov	BYTE PTR _ogroup$1[ebp+3], 61		; 0000003dH
	cmovl	ecx, eax
	mov	BYTE PTR _ogroup$1[ebp+2], cl
$LN11@xmlOutputB:

; 1585 :                     ogroup[2] = '=';
; 1586 :                 }
; 1587 :             }
; 1588 : 
; 1589 :             if (linelen >= B64LINELEN) {

	cmp	DWORD PTR _linelen$1$[ebp], 72		; 00000048H
	jl	SHORT $LN27@xmlOutputB

; 1590 :                 count = xmlOutputBufferWrite(out, 2, B64CRLF);

	push	OFFSET ??_C@_02PCIJFNDE@?$AN?6@
	push	2
	push	DWORD PTR _out$[ebp]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1591 :                 if (count == -1)

	cmp	eax, -1
	je	SHORT $LN8@xmlOutputB

; 1592 :                     return -1;
; 1593 :                 sum += count;

	mov	esi, DWORD PTR _sum$1$[ebp]
	add	esi, eax

; 1594 :                 linelen = 0;

	mov	DWORD PTR _linelen$1$[ebp], 0
	jmp	SHORT $LN12@xmlOutputB
$LN27@xmlOutputB:

; 1585 :                     ogroup[2] = '=';
; 1586 :                 }
; 1587 :             }
; 1588 : 
; 1589 :             if (linelen >= B64LINELEN) {

	mov	esi, DWORD PTR _sum$1$[ebp]
$LN12@xmlOutputB:

; 1595 :             }
; 1596 :             count = xmlOutputBufferWrite(out, 4, (const char *) ogroup);

	lea	eax, DWORD PTR _ogroup$1[ebp]
	push	eax
	push	4
	push	DWORD PTR _out$[ebp]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1597 :             if (count == -1)

	cmp	eax, -1
	je	SHORT $LN8@xmlOutputB

; 1598 :                 return -1;
; 1599 :             sum += count;

	add	esi, eax

; 1600 : 
; 1601 :             linelen += 4;

	add	DWORD PTR _linelen$1$[ebp], 4
	mov	DWORD PTR _sum$1$[ebp], esi
$LN9@xmlOutputB:

; 1602 :         }
; 1603 : 
; 1604 :         if (i >= len)

	cmp	edi, ebx
	jl	$LL2@xmlOutputB

; 1605 :             break;
; 1606 :     }
; 1607 : 
; 1608 :     return sum;

	pop	edi
	mov	eax, esi

; 1609 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@xmlOutputB:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlOutputBufferWriteBase64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterVSprintf
_TEXT	SEGMENT
_format$ = 8						; size = 4
_argptr$ = 12						; size = 4
_xmlTextWriterVSprintf PROC				; COMDAT

; 4469 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, 512				; 00000200H
	push	esi
	call	DWORD PTR _xmlMalloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $LN20@xmlTextWri
	mov	ebx, DWORD PTR _argptr$[ebp]
$LL2@xmlTextWri:
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h

; 1440 :         int const _Result = __stdio_common_vsprintf(

	call	___local_stdio_printf_options
	push	ebx
	push	0
	push	DWORD PTR _format$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	edi
	push	DWORD PTR [eax+4]
	or	ecx, 2
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

	mov	ecx, -1
	test	eax, eax
	cmovs	eax, ecx
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c

; 4485 :            || (count == size - 1) || (count == size) || (count > size)) {

	test	eax, eax
	js	SHORT $LN5@xmlTextWri
	lea	ecx, DWORD PTR [esi-1]
	cmp	eax, ecx
	je	SHORT $LN5@xmlTextWri
	cmp	eax, esi
	je	SHORT $LN5@xmlTextWri
	jle	SHORT $LN3@xmlTextWri
$LN5@xmlTextWri:

; 4486 : 	va_end(locarg);
; 4487 :         xmlFree(buf);

	push	edi
	call	DWORD PTR _xmlFree

; 4488 :         size += BUFSIZ;

	add	esi, 512				; 00000200H

; 4489 :         buf = (xmlChar *) xmlMalloc(size);

	push	esi
	call	DWORD PTR _xmlMalloc
	mov	edi, eax
	add	esp, 8

; 4490 :         if (buf == NULL) {

	test	edi, edi
	jne	SHORT $LL2@xmlTextWri
$LN20@xmlTextWri:

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CI@EEFGHMNP@xmlTextWriterVSprintf?5?3?5out?5of?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	2
	push	25					; 00000019H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 4491 :             xmlWriterErrMsg(NULL, XML_ERR_NO_MEMORY,
; 4492 :                             "xmlTextWriterVSprintf : out of memory!\n");
; 4493 :             return NULL;

	xor	eax, eax
	pop	edi

; 4500 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN3@xmlTextWri:

; 4494 :         }
; 4495 : 	VA_COPY(locarg, argptr);
; 4496 :     }
; 4497 :     va_end(locarg);
; 4498 : 
; 4499 :     return buf;

	mov	eax, edi
	pop	edi

; 4500 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterVSprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterCloseDocCallback
_TEXT	SEGMENT
_context$ = 8						; size = 4
_xmlTextWriterCloseDocCallback PROC			; COMDAT

; 4444 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	1
	push	0
	push	0
	push	DWORD PTR _context$[ebp]
	call	_xmlParseChunk
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@xmlTextWri

; 165  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	eax
	push	OFFSET ??_C@_0DA@LOAGMMIC@xmlTextWriterCloseDocCallback?5?3@
	push	0
	push	eax
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	1
	push	25					; 00000019H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 4445 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) context;
; 4446 :     int rc;
; 4447 : 
; 4448 :     if ((rc = xmlParseChunk(ctxt, NULL, 0, 1)) != 0) {
; 4449 :         xmlWriterErrMsgInt(NULL, XML_ERR_INTERNAL_ERROR,
; 4450 :                         "xmlTextWriterCloseDocCallback : XML error %d !\n",
; 4451 :                         rc);
; 4452 :         return -1;

	or	eax, -1

; 4456 : }

	pop	ebp
	ret	0
$LN2@xmlTextWri:

; 4453 :     }
; 4454 : 
; 4455 :     return 0;

	xor	eax, eax

; 4456 : }

	pop	ebp
	ret	0
_xmlTextWriterCloseDocCallback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteDocCallback
_TEXT	SEGMENT
_context$ = 8						; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlTextWriterWriteDocCallback PROC			; COMDAT

; 4420 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	0
	push	DWORD PTR _len$[ebp]
	push	DWORD PTR _str$[ebp]
	push	DWORD PTR _context$[ebp]
	call	_xmlParseChunk
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN2@xmlTextWri

; 165  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	eax
	push	OFFSET ??_C@_0DA@HGAENLDC@xmlTextWriterWriteDocCallback?5?3@
	push	0
	push	eax
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	1
	push	25					; 00000019H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 4421 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) context;
; 4422 :     int rc;
; 4423 : 
; 4424 :     if ((rc = xmlParseChunk(ctxt, str, len, 0)) != 0) {
; 4425 :         xmlWriterErrMsgInt(NULL, XML_ERR_INTERNAL_ERROR,
; 4426 :                         "xmlTextWriterWriteDocCallback : XML error %d !\n",
; 4427 :                         rc);
; 4428 :         return -1;

	or	eax, -1

; 4432 : }

	pop	ebp
	ret	0
$LN2@xmlTextWri:

; 4429 :     }
; 4430 : 
; 4431 :     return len;

	mov	eax, DWORD PTR _len$[ebp]

; 4432 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteDocCallback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlCmpTextWriterNsStackEntry
_TEXT	SEGMENT
_data0$ = 8						; size = 4
_data1$ = 12						; size = 4
_xmlCmpTextWriterNsStackEntry PROC			; COMDAT

; 4383 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _data0$[ebp]
	mov	edi, DWORD PTR _data1$[ebp]
	cmp	esi, edi
	jne	SHORT $LN2@xmlCmpText

; 4384 :     xmlTextWriterNsStackEntry *p0;
; 4385 :     xmlTextWriterNsStackEntry *p1;
; 4386 :     int rc;
; 4387 : 
; 4388 :     if (data0 == data1)
; 4389 :         return 0;

	pop	edi
	xor	eax, eax

; 4403 :         rc = -1;
; 4404 : 
; 4405 :     return rc;
; 4406 : }

	pop	esi
	pop	ebp
	ret	0
$LN2@xmlCmpText:

; 4390 : 
; 4391 :     if (data0 == 0)

	test	esi, esi
	je	SHORT $LN6@xmlCmpText

; 4392 :         return -1;
; 4393 : 
; 4394 :     if (data1 == 0)

	test	edi, edi
	jne	SHORT $LN4@xmlCmpText

; 4395 :         return 1;

	lea	eax, DWORD PTR [edi+1]
	pop	edi

; 4403 :         rc = -1;
; 4404 : 
; 4405 :     return rc;
; 4406 : }

	pop	esi
	pop	ebp
	ret	0
$LN4@xmlCmpText:

; 4396 : 
; 4397 :     p0 = (xmlTextWriterNsStackEntry *) data0;
; 4398 :     p1 = (xmlTextWriterNsStackEntry *) data1;
; 4399 : 
; 4400 :     rc = xmlStrcmp(p0->prefix, p1->prefix);

	push	DWORD PTR [edi]
	push	DWORD PTR [esi]
	call	_xmlStrcmp
	add	esp, 8

; 4401 : 
; 4402 :     if ((rc != 0) || (p0->elem != p1->elem))

	test	eax, eax
	jne	SHORT $LN6@xmlCmpText
	mov	ecx, DWORD PTR [esi+8]
	cmp	ecx, DWORD PTR [edi+8]
	je	SHORT $LN1@xmlCmpText
$LN6@xmlCmpText:

; 4403 :         rc = -1;
; 4404 : 
; 4405 :     return rc;
; 4406 : }

	or	eax, -1
$LN1@xmlCmpText:
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_xmlCmpTextWriterNsStackEntry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlFreeTextWriterNsStackEntry
_TEXT	SEGMENT
_lk$ = 8						; size = 4
_xmlFreeTextWriterNsStackEntry PROC			; COMDAT

; 4357 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _lk$[ebp]
	call	_xmlLinkGetData
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	SHORT $LN1@xmlFreeTex

; 4358 :     xmlTextWriterNsStackEntry *p;
; 4359 : 
; 4360 :     p = (xmlTextWriterNsStackEntry *) xmlLinkGetData(lk);
; 4361 :     if (p == 0)
; 4362 :         return;
; 4363 : 
; 4364 :     if (p->prefix != 0)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@xmlFreeTex

; 4365 :         xmlFree(p->prefix);

	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN3@xmlFreeTex:

; 4366 :     if (p->uri != 0)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@xmlFreeTex

; 4367 :         xmlFree(p->uri);

	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN4@xmlFreeTex:

; 4368 : 
; 4369 :     xmlFree(p);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN1@xmlFreeTex:
	pop	esi

; 4370 : }

	pop	ebp
	ret	0
_xmlFreeTextWriterNsStackEntry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterOutputNSDecl
_TEXT	SEGMENT
_sum$1$ = -4						; size = 4
_namespaceURI$1$ = 8					; size = 4
_writer$ = 8						; size = 4
_xmlTextWriterOutputNSDecl PROC				; COMDAT

; 4312 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _writer$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR _sum$1$[ebp], ebx
	push	DWORD PTR [edi+8]
	call	_xmlListEmpty
	add	esp, 4
	test	eax, eax
	jne	$LN62@xmlTextWri
	npad	4
$LL2@xmlTextWri:

; 4320 :         xmlChar *namespaceURI = NULL;
; 4321 :         xmlChar *prefix = NULL;
; 4322 : 
; 4323 :         lk = xmlListFront(writer->nsstack);

	push	DWORD PTR [edi+8]
	mov	DWORD PTR _namespaceURI$1$[ebp], 0
	xor	ebx, ebx
	call	_xmlListFront

; 4324 :         np = (xmlTextWriterNsStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	esi, eax
	add	esp, 8

; 4325 : 
; 4326 :         if (np != 0) {

	test	esi, esi
	je	SHORT $LN4@xmlTextWri

; 4327 :             namespaceURI = xmlStrdup(np->uri);

	push	DWORD PTR [esi+4]
	call	_xmlStrdup

; 4328 :             prefix = xmlStrdup(np->prefix);

	push	DWORD PTR [esi]
	mov	DWORD PTR _namespaceURI$1$[ebp], eax
	call	_xmlStrdup
	add	esp, 8
	mov	ebx, eax
$LN4@xmlTextWri:

; 4329 :         }
; 4330 : 
; 4331 :         xmlListPopFront(writer->nsstack);

	push	DWORD PTR [edi+8]
	call	_xmlListPopFront
	add	esp, 4

; 4332 : 
; 4333 :         if (np != 0) {

	test	esi, esi
	je	$LN63@xmlTextWri

; 2032 :     count = xmlTextWriterStartAttribute(writer, name);

	push	ebx
	push	edi
	call	_xmlTextWriterStartAttribute
	mov	esi, eax
	add	esp, 8

; 2033 :     if (count < 0)

	test	esi, esi
	js	SHORT $LN61@xmlTextWri

; 2034 :         return -1;
; 2035 :     sum += count;
; 2036 :     count = xmlTextWriterWriteString(writer, content);

	push	DWORD PTR _namespaceURI$1$[ebp]
	push	edi
	call	_xmlTextWriterWriteString
	add	esp, 8

; 2037 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN61@xmlTextWri

; 1927 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [edi+4]

; 2039 :     sum += count;

	add	esi, eax

; 1927 :     lk = xmlListFront(writer->nodes);

	call	_xmlListFront
	add	esp, 4

; 1928 :     if (lk == 0) {

	test	eax, eax
	je	SHORT $LN61@xmlTextWri

; 1929 :         return -1;
; 1930 :     }
; 1931 : 
; 1932 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ecx, eax
	add	esp, 4

; 1933 :     if (p == 0) {

	test	ecx, ecx
	je	SHORT $LN61@xmlTextWri

; 1934 :         return -1;
; 1935 :     }
; 1936 : 
; 1937 :     sum = 0;
; 1938 :     switch (p->state) {

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, 2
	jne	SHORT $LN61@xmlTextWri

; 1939 :         case XML_TEXTWRITER_ATTRIBUTE:
; 1940 :             p->state = XML_TEXTWRITER_NAME;
; 1941 : 
; 1942 :             count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	eax, DWORD PTR [edi+28]
	mov	DWORD PTR [ecx+4], 1
	push	eax
	push	1
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1943 :             if (count < 0) {

	test	eax, eax
	js	SHORT $LN61@xmlTextWri

; 2045 :     return sum;

	add	esi, eax
	jmp	SHORT $LN8@xmlTextWri
$LN61@xmlTextWri:

; 4334 :             count = xmlTextWriterWriteAttribute(writer, prefix, namespaceURI);
; 4335 :             xmlFree(namespaceURI);

	or	esi, -1
$LN8@xmlTextWri:
	push	DWORD PTR _namespaceURI$1$[ebp]
	call	DWORD PTR _xmlFree

; 4336 :             xmlFree(prefix);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 8

; 4337 : 
; 4338 :             if (count < 0) {

	test	esi, esi
	js	SHORT $LN58@xmlTextWri

; 4342 :             }
; 4343 :             sum += count;

	mov	ebx, DWORD PTR _sum$1$[ebp]
	add	ebx, esi
	mov	DWORD PTR _sum$1$[ebp], ebx
	jmp	SHORT $LN5@xmlTextWri
$LN63@xmlTextWri:

; 4332 : 
; 4333 :         if (np != 0) {

	mov	ebx, DWORD PTR _sum$1$[ebp]
$LN5@xmlTextWri:

; 4313 :     xmlLinkPtr lk;
; 4314 :     xmlTextWriterNsStackEntry *np;
; 4315 :     int count;
; 4316 :     int sum;
; 4317 : 
; 4318 :     sum = 0;
; 4319 :     while (!xmlListEmpty(writer->nsstack)) {

	push	DWORD PTR [edi+8]
	call	_xmlListEmpty
	add	esp, 4
	test	eax, eax
	je	$LL2@xmlTextWri
$LN62@xmlTextWri:
	pop	edi

; 4344 :         }
; 4345 :     }
; 4346 :     return sum;
; 4347 : }

	pop	esi
	mov	eax, ebx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN58@xmlTextWri:

; 4339 :                 xmlListDelete(writer->nsstack);

	push	DWORD PTR [edi+8]
	call	_xmlListDelete
	add	esp, 4

; 4340 :                 writer->nsstack = NULL;

	mov	DWORD PTR [edi+8], 0

; 4341 :                 return -1;

	or	eax, -1
	pop	edi

; 4344 :         }
; 4345 :     }
; 4346 :     return sum;
; 4347 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextWriterOutputNSDecl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlCmpTextWriterStackEntry
_TEXT	SEGMENT
_data0$ = 8						; size = 4
_data1$ = 12						; size = 4
_xmlCmpTextWriterStackEntry PROC			; COMDAT

; 4281 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _data0$[ebp]
	mov	ecx, DWORD PTR _data1$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN2@xmlCmpText

; 4282 :     xmlTextWriterStackEntry *p0;
; 4283 :     xmlTextWriterStackEntry *p1;
; 4284 : 
; 4285 :     if (data0 == data1)
; 4286 :         return 0;

	xor	eax, eax

; 4298 : }

	pop	ebp
	ret	0
$LN2@xmlCmpText:

; 4287 : 
; 4288 :     if (data0 == 0)

	test	eax, eax
	jne	SHORT $LN3@xmlCmpText

; 4289 :         return -1;

	or	eax, -1

; 4298 : }

	pop	ebp
	ret	0
$LN3@xmlCmpText:

; 4290 : 
; 4291 :     if (data1 == 0)

	test	ecx, ecx
	jne	SHORT $LN4@xmlCmpText

; 4292 :         return 1;

	mov	eax, 1

; 4298 : }

	pop	ebp
	ret	0
$LN4@xmlCmpText:

; 4293 : 
; 4294 :     p0 = (xmlTextWriterStackEntry *) data0;
; 4295 :     p1 = (xmlTextWriterStackEntry *) data1;
; 4296 : 
; 4297 :     return xmlStrcmp(p0->name, p1->name);

	push	DWORD PTR [ecx]
	push	DWORD PTR [eax]
	call	_xmlStrcmp
	add	esp, 8

; 4298 : }

	pop	ebp
	ret	0
_xmlCmpTextWriterStackEntry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlFreeTextWriterStackEntry
_TEXT	SEGMENT
_lk$ = 8						; size = 4
_xmlFreeTextWriterStackEntry PROC			; COMDAT

; 4258 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _lk$[ebp]
	call	_xmlLinkGetData
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	je	SHORT $LN1@xmlFreeTex

; 4259 :     xmlTextWriterStackEntry *p;
; 4260 : 
; 4261 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);
; 4262 :     if (p == 0)
; 4263 :         return;
; 4264 : 
; 4265 :     if (p->name != 0)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@xmlFreeTex

; 4266 :         xmlFree(p->name);

	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN3@xmlFreeTex:

; 4267 :     xmlFree(p);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN1@xmlFreeTex:
	pop	esi

; 4268 : }

	pop	ebp
	ret	0
_xmlFreeTextWriterStackEntry ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterFlush
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterFlush PROC				; COMDAT

; 4232 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _writer$[ebp]
	test	eax, eax
	jne	SHORT $LN2@xmlTextWri

; 4233 :     int count;
; 4234 : 
; 4235 :     if (writer == NULL)
; 4236 :         return -1;

	or	eax, -1

; 4242 : 
; 4243 :     return count;
; 4244 : }

	pop	ebp
	ret	0
$LN2@xmlTextWri:

; 4237 : 
; 4238 :     if (writer->out == NULL)

	mov	eax, DWORD PTR [eax]
	test	eax, eax
	jne	SHORT $LN3@xmlTextWri

; 4242 : 
; 4243 :     return count;
; 4244 : }

	pop	ebp
	ret	0
$LN3@xmlTextWri:

; 4239 :         count = 0;
; 4240 :     else
; 4241 :         count = xmlOutputBufferFlush(writer->out);

	mov	DWORD PTR _writer$[ebp], eax

; 4242 : 
; 4243 :     return count;
; 4244 : }

	pop	ebp

; 4239 :         count = 0;
; 4240 :     else
; 4241 :         count = xmlOutputBufferFlush(writer->out);

	jmp	_xmlOutputBufferFlush
_xmlTextWriterFlush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterSetQuoteChar
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_quotechar$ = 12					; size = 1
_xmlTextWriterSetQuoteChar PROC				; COMDAT

; 4624 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _writer$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@xmlTextWri

; 4625 :     if ((writer == NULL) || ((quotechar != '\'') && (quotechar != '"')))

	mov	al, BYTE PTR _quotechar$[ebp]
	cmp	al, 39					; 00000027H
	je	SHORT $LN2@xmlTextWri
	cmp	al, 34					; 00000022H
	jne	SHORT $LN3@xmlTextWri
$LN2@xmlTextWri:

; 4627 : 
; 4628 :     writer->qchar = quotechar;

	mov	BYTE PTR [ecx+28], al

; 4629 : 
; 4630 :     return 0;

	xor	eax, eax

; 4631 : }

	pop	ebp
	ret	0
$LN3@xmlTextWri:

; 4626 :         return -1;

	or	eax, -1

; 4631 : }

	pop	ebp
	ret	0
_xmlTextWriterSetQuoteChar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterSetIndentString
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_str$ = 12						; size = 4
_xmlTextWriterSetIndentString PROC			; COMDAT

; 4599 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN3@xmlTextWri

; 4600 :     if ((writer == NULL) || (!str))

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN3@xmlTextWri

; 4602 : 
; 4603 :     if (writer->ichar != NULL)

	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN4@xmlTextWri

; 4604 :         xmlFree(writer->ichar);

	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN4@xmlTextWri:

; 4605 :     writer->ichar = xmlStrdup(str);

	push	DWORD PTR _str$[ebp]
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [esi+24], eax

; 4606 : 
; 4607 :     if (!writer->ichar)

	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 4608 :         return -1;
; 4609 :     else
; 4610 :         return 0;

	xor	eax, eax
	pop	esi

; 4611 : }

	pop	ebp
	ret	0
$LN3@xmlTextWri:

; 4601 :         return -1;

	or	eax, -1
	pop	esi

; 4611 : }

	pop	ebp
	ret	0
_xmlTextWriterSetIndentString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterSetIndent
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_indent$ = 12						; size = 4
_xmlTextWriterSetIndent PROC				; COMDAT

; 4578 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _writer$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 4579 :     if ((writer == NULL) || (indent < 0))

	mov	ecx, DWORD PTR _indent$[ebp]
	test	ecx, ecx
	js	SHORT $LN3@xmlTextWri

; 4581 : 
; 4582 :     writer->indent = indent;

	mov	DWORD PTR [eax+16], ecx

; 4583 :     writer->doindent = 1;

	mov	DWORD PTR [eax+20], 1

; 4584 : 
; 4585 :     return 0;

	xor	eax, eax

; 4586 : }

	pop	ebp
	ret	0
$LN3@xmlTextWri:

; 4580 :         return -1;

	or	eax, -1

; 4586 : }

	pop	ebp
	ret	0
_xmlTextWriterSetIndent ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteDTDNotation
_TEXT	SEGMENT
_p$1$ = 8						; size = 4
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_pubid$ = 16						; size = 4
_sysid$ = 20						; size = 4
_xmlTextWriterWriteDTDNotation PROC			; COMDAT

; 4114 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _writer$[ebp]
	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 4115 :     int count;
; 4116 :     int sum;
; 4117 :     xmlLinkPtr lk;
; 4118 :     xmlTextWriterStackEntry *p;
; 4119 : 
; 4120 :     if (writer == NULL || name == NULL || *name == '\0')

	mov	ebx, DWORD PTR _name$[ebp]
	test	ebx, ebx
	je	SHORT $LN5@xmlTextWri
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN5@xmlTextWri

; 4121 :         return -1;
; 4122 : 
; 4123 :     sum = 0;
; 4124 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [edi+4]
	xor	esi, esi
	call	_xmlListFront
	add	esp, 4

; 4125 :     if (lk == 0) {

	test	eax, eax
	je	SHORT $LN5@xmlTextWri

; 4126 :         return -1;
; 4127 :     }
; 4128 : 
; 4129 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4
	mov	DWORD PTR _p$1$[ebp], eax

; 4130 :     if (p != 0) {

	test	eax, eax
	je	SHORT $LN12@xmlTextWri

; 4131 :         switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 7
	je	SHORT $LN8@xmlTextWri
	sub	eax, 1
	je	SHORT $LN12@xmlTextWri
$LN5@xmlTextWri:
	pop	edi

; 4218 : 
; 4219 :     return sum;
; 4220 : }

	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN8@xmlTextWri:

; 4132 :             case XML_TEXTWRITER_DTD:
; 4133 :                 count = xmlOutputBufferWriteString(writer->out, " [");

	push	OFFSET ??_C@_02GBLMOEJC@?5?$FL@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	mov	esi, eax
	add	esp, 8

; 4134 :                 if (count < 0)

	test	esi, esi
	js	SHORT $LN5@xmlTextWri

; 4135 :                     return -1;
; 4136 :                 sum += count;
; 4137 :                 if (writer->indent) {

	cmp	DWORD PTR [edi+16], 0
	je	SHORT $LN10@xmlTextWri

; 4138 :                     count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4139 :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 4140 :                         return -1;
; 4141 :                     sum += count;

	add	esi, eax
$LN10@xmlTextWri:

; 4142 :                 }
; 4143 :                 p->state = XML_TEXTWRITER_DTD_TEXT;

	mov	eax, DWORD PTR _p$1$[ebp]
	mov	DWORD PTR [eax+4], 8
$LN12@xmlTextWri:

; 4144 :                 /* fallthrough */
; 4145 :             case XML_TEXTWRITER_DTD_TEXT:
; 4146 :                 break;
; 4147 :             default:
; 4148 :                 return -1;
; 4149 :         }
; 4150 :     }
; 4151 : 
; 4152 :     if (writer->indent) {

	cmp	DWORD PTR [edi+16], 0
	je	SHORT $LN14@xmlTextWri

; 4153 :         count = xmlTextWriterWriteIndent(writer);

	push	edi
	call	_xmlTextWriterWriteIndent
	add	esp, 4

; 4154 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 4155 :             return -1;
; 4156 :         sum += count;

	add	esi, eax
$LN14@xmlTextWri:

; 4157 :     }
; 4158 : 
; 4159 :     count = xmlOutputBufferWriteString(writer->out, "<!NOTATION ");

	push	OFFSET ??_C@_0M@IOFINGOM@?$DM?$CBNOTATION?5@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4160 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 4161 :         return -1;
; 4162 :     sum += count;
; 4163 :     count = xmlOutputBufferWriteString(writer->out, (const char *) name);

	push	ebx
	push	DWORD PTR [edi]
	add	esi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4164 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 4165 :         return -1;
; 4166 :     sum += count;

	add	esi, eax

; 4167 : 
; 4168 :     if (pubid != 0) {

	mov	eax, DWORD PTR _pubid$[ebp]
	test	eax, eax
	je	SHORT $LN32@xmlTextWri

; 4169 :         count = xmlOutputBufferWriteString(writer->out, " PUBLIC ");

	push	OFFSET ??_C@_08GBBLECIH@?5PUBLIC?5@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4170 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4171 :             return -1;
; 4172 :         sum += count;
; 4173 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	ebx, DWORD PTR [edi+28]
	add	esi, eax
	push	ebx
	push	1
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 4174 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4175 :             return -1;
; 4176 :         sum += count;
; 4177 :         count =

	push	DWORD PTR _pubid$[ebp]
	add	esi, eax
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4178 :             xmlOutputBufferWriteString(writer->out, (const char *) pubid);
; 4179 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4180 :             return -1;
; 4181 :         sum += count;
; 4182 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [edi]
	add	esi, eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 4183 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4184 :             return -1;
; 4185 :         sum += count;

	add	esi, eax
	mov	eax, DWORD PTR _pubid$[ebp]
	jmp	SHORT $LN18@xmlTextWri
$LN32@xmlTextWri:
	lea	ebx, DWORD PTR [edi+28]
$LN18@xmlTextWri:

; 4186 :     }
; 4187 : 
; 4188 :     if (sysid != 0) {

	cmp	DWORD PTR _sysid$[ebp], 0
	je	SHORT $LN23@xmlTextWri

; 4189 :         if (pubid == 0) {

	test	eax, eax
	jne	SHORT $LN24@xmlTextWri

; 4190 :             count = xmlOutputBufferWriteString(writer->out, " SYSTEM");

	push	OFFSET ??_C@_07FCENLLFI@?5SYSTEM@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4191 :             if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4192 :                 return -1;
; 4193 :             sum += count;

	add	esi, eax
$LN24@xmlTextWri:

; 4194 :         }
; 4195 :         count = xmlOutputBufferWriteString(writer->out, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4196 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4197 :             return -1;
; 4198 :         sum += count;
; 4199 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [edi]
	add	esi, eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 4200 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4201 :             return -1;
; 4202 :         sum += count;
; 4203 :         count =

	push	DWORD PTR _sysid$[ebp]
	add	esi, eax
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4204 :             xmlOutputBufferWriteString(writer->out, (const char *) sysid);
; 4205 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4206 :             return -1;
; 4207 :         sum += count;
; 4208 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [edi]
	add	esi, eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 4209 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4210 :             return -1;
; 4211 :         sum += count;

	add	esi, eax
$LN23@xmlTextWri:

; 4212 :     }
; 4213 : 
; 4214 :     count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4215 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 4216 :         return -1;
; 4217 :     sum += count;

	pop	edi
	add	eax, esi

; 4218 : 
; 4219 :     return sum;
; 4220 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterWriteDTDNotation ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteDTDEntity
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_pe$ = 12						; size = 4
_name$ = 16						; size = 4
_pubid$ = 20						; size = 4
_sysid$ = 24						; size = 4
_ndataid$ = 28						; size = 4
_content$ = 32						; size = 4
_xmlTextWriterWriteDTDEntity PROC			; COMDAT

; 3861 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	cmp	DWORD PTR _content$[ebp], 0
	mov	eax, DWORD PTR _sysid$[ebp]
	mov	ecx, DWORD PTR _pubid$[ebp]
	jne	SHORT $LN2@xmlTextWri

; 3862 :     if ((content == NULL) && (pubid == NULL) && (sysid == NULL))

	test	ecx, ecx
	jne	SHORT $LN2@xmlTextWri
	test	eax, eax
	je	SHORT $LN6@xmlTextWri
$LN2@xmlTextWri:

; 3863 :         return -1;
; 3864 :     if ((pe != 0) && (ndataid != NULL))

	mov	edx, DWORD PTR _pe$[ebp]
	test	edx, edx
	je	SHORT $LN3@xmlTextWri
	cmp	DWORD PTR _ndataid$[ebp], 0
	je	SHORT $LN3@xmlTextWri
$LN6@xmlTextWri:

; 3865 :         return -1;

	or	eax, -1

; 3872 :                                                sysid, ndataid);
; 3873 : }

	pop	ebp
	ret	0
$LN3@xmlTextWri:

; 3866 : 
; 3867 :     if ((pubid == NULL) && (sysid == NULL))

	test	ecx, ecx
	jne	SHORT $LN4@xmlTextWri
	test	eax, eax
	jne	SHORT $LN4@xmlTextWri

; 3868 :         return xmlTextWriterWriteDTDInternalEntity(writer, pe, name,

	push	DWORD PTR _content$[ebp]
	push	DWORD PTR _name$[ebp]
	push	edx
	push	DWORD PTR _writer$[ebp]
	call	_xmlTextWriterWriteDTDInternalEntity
	add	esp, 16					; 00000010H

; 3872 :                                                sysid, ndataid);
; 3873 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:

; 3869 :                                                    content);
; 3870 : 
; 3871 :     return xmlTextWriterWriteDTDExternalEntity(writer, pe, name, pubid,

	push	DWORD PTR _ndataid$[ebp]
	push	eax
	push	ecx
	push	DWORD PTR _name$[ebp]
	push	edx
	push	DWORD PTR _writer$[ebp]
	call	_xmlTextWriterWriteDTDExternalEntity
	add	esp, 24					; 00000018H

; 3872 :                                                sysid, ndataid);
; 3873 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteDTDEntity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteDTDExternalEntityContents
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_pubid$ = 12						; size = 4
_sysid$ = 16						; size = 4
_ndataid$ = 20						; size = 4
_xmlTextWriterWriteDTDExternalEntityContents PROC	; COMDAT

; 3983 : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _writer$[ebp]
	test	edi, edi
	jne	SHORT $LN4@xmlTextWri

; 3984 :     int count;
; 3985 :     int sum;
; 3986 :     xmlLinkPtr lk;
; 3987 :     xmlTextWriterStackEntry *p;
; 3988 : 
; 3989 :     if (writer == NULL) {
; 3990 :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0EI@DDDMEPLI@xmlTextWriterWriteDTDExternalEn@
	push	1
	push	edi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 3991 :                         "xmlTextWriterWriteDTDExternalEntityContents: xmlTextWriterPtr invalid!\n");
; 3992 :         return -1;

	or	eax, -1
	pop	edi

; 4097 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	ebx
	push	esi

; 3993 :     }
; 3994 : 
; 3995 :     sum = 0;
; 3996 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [edi+4]
	xor	esi, esi
	call	_xmlListFront
	add	esp, 4

; 3997 :     if (lk == 0) {

	test	eax, eax
	je	$LN10@xmlTextWri

; 3998 :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,
; 3999 :                         "xmlTextWriterWriteDTDExternalEntityContents: you must call xmlTextWriterStartDTDEntity before the call to this function!\n");
; 4000 :         return -1;
; 4001 :     }
; 4002 : 
; 4003 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 4004 :     if (p == 0)

	test	eax, eax
	je	$LN29@xmlTextWri

; 4005 :         return -1;
; 4006 : 
; 4007 :     switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 13					; 0000000dH
	je	SHORT $LN9@xmlTextWri
	sub	eax, 2
	jne	$LN10@xmlTextWri

; 4008 :         case XML_TEXTWRITER_DTD_ENTY:
; 4009 :             break;
; 4010 :         case XML_TEXTWRITER_DTD_PENT:
; 4011 :             if (ndataid != NULL) {

	cmp	DWORD PTR _ndataid$[ebp], esi
	je	SHORT $LN9@xmlTextWri

; 4012 :                 xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0FM@COPKODIE@xmlTextWriterWriteDTDExternalEn@

; 4013 :                                 "xmlTextWriterWriteDTDExternalEntityContents: notation not allowed with parameter entities!\n");
; 4014 :                 return -1;
; 4015 :             }
; 4016 :             break;
; 4017 :         default:
; 4018 :             xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	1
	push	edi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 4019 :                             "xmlTextWriterWriteDTDExternalEntityContents: you must call xmlTextWriterStartDTDEntity before the call to this function!\n");
; 4020 :             return -1;

	or	eax, -1
	pop	esi
	pop	ebx
	pop	edi

; 4097 : }

	pop	ebp
	ret	0
$LN9@xmlTextWri:

; 4021 :     }
; 4022 : 
; 4023 :     if (pubid != 0) {

	mov	ebx, DWORD PTR _pubid$[ebp]
	mov	eax, DWORD PTR _sysid$[ebp]
	test	ebx, ebx
	je	$LN28@xmlTextWri

; 4024 :         if (sysid == 0) {

	test	eax, eax
	jne	SHORT $LN12@xmlTextWri

; 4025 :             xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0EI@PKOPPIFG@xmlTextWriterWriteDTDExternalEn@
	push	1
	push	edi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
	or	eax, -1
	pop	esi
	pop	ebx
	pop	edi

; 4097 : }

	pop	ebp
	ret	0
$LN12@xmlTextWri:

; 4026 :                             "xmlTextWriterWriteDTDExternalEntityContents: system identifier needed!\n");
; 4027 :             return -1;
; 4028 :         }
; 4029 : 
; 4030 :         count = xmlOutputBufferWriteString(writer->out, " PUBLIC ");

	push	OFFSET ??_C@_08GBBLECIH@?5PUBLIC?5@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	mov	esi, eax
	add	esp, 8

; 4031 :         if (count < 0)

	test	esi, esi
	js	$LN29@xmlTextWri

; 4032 :             return -1;
; 4033 :         sum += count;
; 4034 : 
; 4035 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	eax, DWORD PTR [edi+28]
	push	eax
	push	1
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 4036 :         if (count < 0)

	test	eax, eax
	js	$LN29@xmlTextWri

; 4037 :             return -1;
; 4038 :         sum += count;
; 4039 : 
; 4040 :         count =

	push	ebx
	push	DWORD PTR [edi]
	add	esi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4041 :             xmlOutputBufferWriteString(writer->out, (const char *) pubid);
; 4042 :         if (count < 0)

	test	eax, eax
	js	$LN29@xmlTextWri

; 4043 :             return -1;
; 4044 :         sum += count;

	add	esi, eax

; 4045 : 
; 4046 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	eax, DWORD PTR [edi+28]
	push	eax
	push	1
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 4047 :         if (count < 0)

	test	eax, eax
	js	$LN29@xmlTextWri

; 4048 :             return -1;
; 4049 :         sum += count;

	add	esi, eax
	mov	eax, DWORD PTR _sysid$[ebp]
$LN28@xmlTextWri:

; 4050 :     }
; 4051 : 
; 4052 :     if (sysid != 0) {

	test	eax, eax
	je	SHORT $LN17@xmlTextWri

; 4053 :         if (pubid == 0) {

	test	ebx, ebx
	jne	SHORT $LN18@xmlTextWri

; 4054 :             count = xmlOutputBufferWriteString(writer->out, " SYSTEM");

	push	OFFSET ??_C@_07FCENLLFI@?5SYSTEM@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4055 :             if (count < 0)

	test	eax, eax
	js	$LN29@xmlTextWri

; 4056 :                 return -1;
; 4057 :             sum += count;

	add	esi, eax
$LN18@xmlTextWri:

; 4058 :         }
; 4059 : 
; 4060 :         count = xmlOutputBufferWriteString(writer->out, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4061 :         if (count < 0)

	test	eax, eax
	js	$LN29@xmlTextWri

; 4062 :             return -1;
; 4063 :         sum += count;
; 4064 : 
; 4065 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	ebx, DWORD PTR [edi+28]
	add	esi, eax
	push	ebx
	push	1
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 4066 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN29@xmlTextWri

; 4067 :             return -1;
; 4068 :         sum += count;
; 4069 : 
; 4070 :         count =

	push	DWORD PTR _sysid$[ebp]
	add	esi, eax
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4071 :             xmlOutputBufferWriteString(writer->out, (const char *) sysid);
; 4072 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN29@xmlTextWri

; 4073 :             return -1;
; 4074 :         sum += count;
; 4075 : 
; 4076 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [edi]
	add	esi, eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 4077 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN29@xmlTextWri

; 4078 :             return -1;
; 4079 :         sum += count;

	add	esi, eax
$LN17@xmlTextWri:

; 4080 :     }
; 4081 : 
; 4082 :     if (ndataid != NULL) {

	mov	ebx, DWORD PTR _ndataid$[ebp]
	test	ebx, ebx
	je	SHORT $LN24@xmlTextWri

; 4083 :         count = xmlOutputBufferWriteString(writer->out, " NDATA ");

	push	OFFSET ??_C@_07CGHGCOMH@?5NDATA?5@
	push	DWORD PTR [edi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4084 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN29@xmlTextWri

; 4085 :             return -1;
; 4086 :         sum += count;
; 4087 : 
; 4088 :         count =

	push	ebx
	push	DWORD PTR [edi]
	add	esi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 4089 :             xmlOutputBufferWriteString(writer->out,
; 4090 :                                        (const char *) ndataid);
; 4091 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN29@xmlTextWri

; 4092 :             return -1;
; 4093 :         sum += count;

	add	esi, eax
$LN24@xmlTextWri:

; 4094 :     }
; 4095 : 
; 4096 :     return sum;

	mov	eax, esi
	pop	esi
	pop	ebx
	pop	edi

; 4097 : }

	pop	ebp
	ret	0
$LN10@xmlTextWri:

; 4013 :                                 "xmlTextWriterWriteDTDExternalEntityContents: notation not allowed with parameter entities!\n");
; 4014 :                 return -1;
; 4015 :             }
; 4016 :             break;
; 4017 :         default:
; 4018 :             xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0HK@MIJHHHOH@xmlTextWriterWriteDTDExternalEn@
	push	1
	push	edi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
$LN29@xmlTextWri:

; 4019 :                             "xmlTextWriterWriteDTDExternalEntityContents: you must call xmlTextWriterStartDTDEntity before the call to this function!\n");
; 4020 :             return -1;

	pop	esi
	pop	ebx
	or	eax, -1
	pop	edi

; 4097 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteDTDExternalEntityContents ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteDTDExternalEntity
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_pe$ = 12						; size = 4
_name$ = 16						; size = 4
_pubid$ = 20						; size = 4
_sysid$ = 24						; size = 4
_ndataid$ = 28						; size = 4
_xmlTextWriterWriteDTDExternalEntity PROC		; COMDAT

; 3937 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	cmp	DWORD PTR _pubid$[ebp], 0
	mov	edi, DWORD PTR _sysid$[ebp]
	jne	SHORT $LN2@xmlTextWri

; 3938 :     int count;
; 3939 :     int sum;
; 3940 : 
; 3941 :     if (((pubid == NULL) && (sysid == NULL)))

	test	edi, edi
	je	SHORT $LN8@xmlTextWri
$LN2@xmlTextWri:

; 3942 :         return -1;
; 3943 :     if ((pe != 0) && (ndataid != NULL))

	mov	eax, DWORD PTR _pe$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri
	cmp	DWORD PTR _ndataid$[ebp], 0
	jne	SHORT $LN8@xmlTextWri
$LN3@xmlTextWri:

; 3944 :         return -1;
; 3945 : 
; 3946 :     sum = 0;
; 3947 :     count = xmlTextWriterStartDTDEntity(writer, pe, name);

	push	DWORD PTR _name$[ebp]
	push	eax
	push	DWORD PTR _writer$[ebp]
	call	_xmlTextWriterStartDTDEntity
	mov	esi, eax
	add	esp, 12					; 0000000cH

; 3948 :     if (count == -1)

	cmp	esi, -1
	je	SHORT $LN8@xmlTextWri

; 3949 :         return -1;
; 3950 :     sum += count;
; 3951 : 
; 3952 :     count =

	push	DWORD PTR _ndataid$[ebp]
	push	edi
	push	DWORD PTR _pubid$[ebp]
	mov	edi, DWORD PTR _writer$[ebp]
	push	edi
	call	_xmlTextWriterWriteDTDExternalEntityContents
	add	esp, 16					; 00000010H

; 3953 :         xmlTextWriterWriteDTDExternalEntityContents(writer, pubid, sysid,
; 3954 :                                                     ndataid);
; 3955 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN8@xmlTextWri

; 3956 :         return -1;
; 3957 :     sum += count;
; 3958 : 
; 3959 :     count = xmlTextWriterEndDTDEntity(writer);

	push	edi
	add	esi, eax
	call	_xmlTextWriterEndDTDEntity
	add	esp, 4

; 3960 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN8@xmlTextWri

; 3962 :     sum += count;

	pop	edi
	add	eax, esi

; 3963 : 
; 3964 :     return sum;
; 3965 : }

	pop	esi
	pop	ebp
	ret	0
$LN8@xmlTextWri:
	pop	edi

; 3961 :         return -1;

	or	eax, -1

; 3963 : 
; 3964 :     return sum;
; 3965 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteDTDExternalEntity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteDTDInternalEntity
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_pe$ = 12						; size = 4
_name$ = 16						; size = 4
_content$ = 20						; size = 4
_xmlTextWriterWriteDTDInternalEntity PROC		; COMDAT

; 3891 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _name$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 3892 :     int count;
; 3893 :     int sum;
; 3894 : 
; 3895 :     if ((name == NULL) || (*name == '\0') || (content == NULL))

	cmp	BYTE PTR [eax], 0
	je	SHORT $LN3@xmlTextWri
	cmp	DWORD PTR _content$[ebp], 0
	je	SHORT $LN3@xmlTextWri

; 3897 : 
; 3898 :     sum = 0;
; 3899 :     count = xmlTextWriterStartDTDEntity(writer, pe, name);

	mov	ebx, DWORD PTR _writer$[ebp]
	push	eax
	push	DWORD PTR _pe$[ebp]
	push	ebx
	call	_xmlTextWriterStartDTDEntity
	mov	esi, eax
	add	esp, 12					; 0000000cH

; 3900 :     if (count == -1)

	cmp	esi, -1
	je	SHORT $LN3@xmlTextWri

; 3901 :         return -1;
; 3902 :     sum += count;
; 3903 : 
; 3904 :     count = xmlTextWriterWriteString(writer, content);

	push	DWORD PTR _content$[ebp]
	push	ebx
	call	_xmlTextWriterWriteString
	add	esp, 8

; 3905 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN3@xmlTextWri

; 3906 :         return -1;
; 3907 :     sum += count;
; 3908 : 
; 3909 :     count = xmlTextWriterEndDTDEntity(writer);

	push	ebx
	add	esi, eax
	call	_xmlTextWriterEndDTDEntity
	add	esp, 4

; 3910 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN3@xmlTextWri

; 3911 :         return -1;
; 3912 :     sum += count;

	add	eax, esi
	pop	esi

; 3913 : 
; 3914 :     return sum;
; 3915 : }

	pop	ebx
	pop	ebp
	ret	0
$LN3@xmlTextWri:
	pop	esi

; 3896 :         return -1;

	or	eax, -1

; 3913 : 
; 3914 :     return sum;
; 3915 : }

	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterWriteDTDInternalEntity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatDTDInternalEntity
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_pe$ = 12						; size = 4
_name$ = 16						; size = 4
_format$ = 20						; size = 4
_argptr$ = 24						; size = 4
_xmlTextWriterWriteVFormatDTDInternalEntity PROC	; COMDAT

; 3822 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 3823 :     int rc;
; 3824 :     xmlChar *buf;
; 3825 : 
; 3826 :     if (writer == NULL)
; 3827 :         return -1;
; 3828 : 
; 3829 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 3830 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 3832 : 
; 3833 :     rc = xmlTextWriterWriteDTDInternalEntity(writer, pe, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	DWORD PTR _pe$[ebp]
	push	esi
	call	_xmlTextWriterWriteDTDInternalEntity

; 3834 : 
; 3835 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 20					; 00000014H

; 3836 :     return rc;

	mov	eax, esi
	pop	edi

; 3837 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 3831 :         return -1;

	or	eax, -1

; 3837 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatDTDInternalEntity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatDTDInternalEntity
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_pe$ = 12						; size = 4
_name$ = 16						; size = 4
_format$ = 20						; size = 4
_xmlTextWriterWriteFormatDTDInternalEntity PROC		; COMDAT

; 3791 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 3826 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 3792 :     int rc;
; 3793 :     va_list ap;
; 3794 : 
; 3795 :     va_start(ap, format);
; 3796 : 
; 3797 :     rc = xmlTextWriterWriteVFormatDTDInternalEntity(writer, pe, name,
; 3798 :                                                     format, ap);
; 3799 : 
; 3800 :     va_end(ap);
; 3801 :     return rc;

	or	eax, -1
	pop	esi

; 3802 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 3829 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 3830 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 3792 :     int rc;
; 3793 :     va_list ap;
; 3794 : 
; 3795 :     va_start(ap, format);
; 3796 : 
; 3797 :     rc = xmlTextWriterWriteVFormatDTDInternalEntity(writer, pe, name,
; 3798 :                                                     format, ap);
; 3799 : 
; 3800 :     va_end(ap);
; 3801 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 3802 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 3833 :     rc = xmlTextWriterWriteDTDInternalEntity(writer, pe, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	DWORD PTR _pe$[ebp]
	push	esi
	call	_xmlTextWriterWriteDTDInternalEntity

; 3834 : 
; 3835 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 20					; 00000014H

; 3792 :     int rc;
; 3793 :     va_list ap;
; 3794 : 
; 3795 :     va_start(ap, format);
; 3796 : 
; 3797 :     rc = xmlTextWriterWriteVFormatDTDInternalEntity(writer, pe, name,
; 3798 :                                                     format, ap);
; 3799 : 
; 3800 :     va_end(ap);
; 3801 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 3802 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatDTDInternalEntity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndDTDEntity
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndDTDEntity PROC				; COMDAT

; 3727 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN15@xmlTextWri

; 3728 :     int count;
; 3729 :     int sum;
; 3730 :     xmlLinkPtr lk;
; 3731 :     xmlTextWriterStackEntry *p;
; 3732 : 
; 3733 :     if (writer == NULL)
; 3734 :         return -1;
; 3735 : 
; 3736 :     sum = 0;

	push	DWORD PTR [esi+4]
	xor	edi, edi

; 3737 :     lk = xmlListFront(writer->nodes);

	call	_xmlListFront
	add	esp, 4

; 3738 :     if (lk == 0)

	test	eax, eax
	je	SHORT $LN15@xmlTextWri

; 3739 :         return -1;
; 3740 : 
; 3741 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 3742 :     if (p == 0)

	test	eax, eax
	je	SHORT $LN15@xmlTextWri

; 3743 :         return -1;
; 3744 : 
; 3745 :     switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 13					; 0000000dH
	je	SHORT $LN9@xmlTextWri
	sub	eax, 1
	je	SHORT $LN7@xmlTextWri
	sub	eax, 1
	je	SHORT $LN9@xmlTextWri
$LN15@xmlTextWri:
	pop	edi

; 3766 :             return -1;

	or	eax, -1

; 3772 : }

	pop	esi
	pop	ebp
	ret	0
$LN7@xmlTextWri:

; 3746 :         case XML_TEXTWRITER_DTD_ENTY_TEXT:
; 3747 :             count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	eax, DWORD PTR [esi+28]
	push	eax
	push	1
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	mov	edi, eax
	add	esp, 12					; 0000000cH

; 3748 :             if (count < 0)

	test	edi, edi
	js	SHORT $LN15@xmlTextWri
$LN9@xmlTextWri:

; 3749 :                 return -1;
; 3750 :             sum += count;
; 3751 :             /* Falls through. */
; 3752 :         case XML_TEXTWRITER_DTD_ENTY:
; 3753 :         case XML_TEXTWRITER_DTD_PENT:
; 3754 :             count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3755 :             if (count < 0)

	test	eax, eax
	js	SHORT $LN15@xmlTextWri

; 3756 :                 return -1;
; 3757 :             sum += count;

	add	edi, eax

; 3758 :             break;
; 3759 :         default:
; 3760 :             return -1;
; 3761 :     }
; 3762 : 
; 3763 :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN12@xmlTextWri

; 3764 :         count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3765 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN15@xmlTextWri

; 3767 :         sum += count;

	add	edi, eax
$LN12@xmlTextWri:

; 3768 :     }
; 3769 : 
; 3770 :     xmlListPopFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListPopFront
	add	esp, 4

; 3771 :     return sum;

	mov	eax, edi
	pop	edi

; 3772 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterEndDTDEntity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartDTDEntity
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_pe$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlTextWriterStartDTDEntity PROC			; COMDAT

; 3628 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 3629 :     int count;
; 3630 :     int sum;
; 3631 :     xmlLinkPtr lk;
; 3632 :     xmlTextWriterStackEntry *p;
; 3633 : 
; 3634 :     if (writer == NULL || name == NULL || *name == '\0')

	mov	eax, DWORD PTR _name$[ebp]
	test	eax, eax
	je	SHORT $LN5@xmlTextWri
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN5@xmlTextWri

; 3635 :         return -1;
; 3636 : 
; 3637 :     sum = 0;
; 3638 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	xor	edi, edi
	call	_xmlListFront
	add	esp, 4

; 3639 :     if (lk != 0) {

	test	eax, eax
	je	SHORT $LN12@xmlTextWri

; 3640 : 
; 3641 :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ebx, eax
	add	esp, 4

; 3642 :         if (p != 0) {

	test	ebx, ebx
	je	SHORT $LN12@xmlTextWri

; 3643 :             switch (p->state) {

	mov	eax, DWORD PTR [ebx+4]
	sub	eax, edi
	je	SHORT $LN12@xmlTextWri
	sub	eax, 7
	je	SHORT $LN8@xmlTextWri
	sub	eax, 1
	je	SHORT $LN12@xmlTextWri
$LN5@xmlTextWri:
	pop	edi

; 3713 : 
; 3714 :     return sum;
; 3715 : }

	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN8@xmlTextWri:

; 3644 :                 case XML_TEXTWRITER_DTD:
; 3645 :                     count = xmlOutputBufferWriteString(writer->out, " [");

	push	OFFSET ??_C@_02GBLMOEJC@?5?$FL@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 8

; 3646 :                     if (count < 0)

	test	edi, edi
	js	SHORT $LN5@xmlTextWri

; 3647 :                         return -1;
; 3648 :                     sum += count;
; 3649 :                     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN10@xmlTextWri

; 3650 :                         count =

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3651 :                             xmlOutputBufferWriteString(writer->out, "\n");
; 3652 :                         if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 3653 :                             return -1;
; 3654 :                         sum += count;

	add	edi, eax
$LN10@xmlTextWri:

; 3655 :                     }
; 3656 :                     p->state = XML_TEXTWRITER_DTD_TEXT;

	mov	DWORD PTR [ebx+4], 8
$LN12@xmlTextWri:

; 3657 :                     /* fallthrough */
; 3658 :                 case XML_TEXTWRITER_DTD_TEXT:
; 3659 :                 case XML_TEXTWRITER_NONE:
; 3660 :                     break;
; 3661 :                 default:
; 3662 :                     return -1;
; 3663 :             }
; 3664 :         }
; 3665 :     }
; 3666 : 
; 3667 :     p = (xmlTextWriterStackEntry *)

	push	8
	call	DWORD PTR _xmlMalloc
	mov	ebx, eax
	add	esp, 4

; 3668 :         xmlMalloc(sizeof(xmlTextWriterStackEntry));
; 3669 :     if (p == 0) {

	test	ebx, ebx
	jne	SHORT $LN14@xmlTextWri

; 3670 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CP@HLOPJJJB@xmlTextWriterStartDTDElement?5?3?5@
	push	2
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 3713 : 
; 3714 :     return sum;
; 3715 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN14@xmlTextWri:

; 3671 :                         "xmlTextWriterStartDTDElement : out of memory!\n");
; 3672 :         return -1;
; 3673 :     }
; 3674 : 
; 3675 :     p->name = xmlStrdup(name);

	push	DWORD PTR _name$[ebp]
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [ebx], eax

; 3676 :     if (p->name == 0) {

	test	eax, eax
	jne	SHORT $LN15@xmlTextWri

; 3677 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CP@HLOPJJJB@xmlTextWriterStartDTDElement?5?3?5@
	push	2
	push	esi
	call	_xmlWriterErrMsg

; 3678 :                         "xmlTextWriterStartDTDElement : out of memory!\n");
; 3679 :         xmlFree(p);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 3713 : 
; 3714 :     return sum;
; 3715 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN15@xmlTextWri:

; 3680 :         return -1;
; 3681 :     }
; 3682 : 
; 3683 :     if (pe != 0)
; 3684 :         p->state = XML_TEXTWRITER_DTD_PENT;
; 3685 :     else
; 3686 :         p->state = XML_TEXTWRITER_DTD_ENTY;
; 3687 : 
; 3688 :     xmlListPushFront(writer->nodes, p);

	xor	eax, eax
	cmp	DWORD PTR _pe$[ebp], eax
	push	ebx
	setne	al
	lea	eax, DWORD PTR [eax*2+13]
	mov	DWORD PTR [ebx+4], eax
	push	DWORD PTR [esi+4]
	call	_xmlListPushFront
	add	esp, 8

; 3689 : 
; 3690 :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN18@xmlTextWri

; 3691 :         count = xmlTextWriterWriteIndent(writer);

	push	esi
	call	_xmlTextWriterWriteIndent
	add	esp, 4

; 3692 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3693 :             return -1;
; 3694 :         sum += count;

	add	edi, eax
$LN18@xmlTextWri:

; 3695 :     }
; 3696 : 
; 3697 :     count = xmlOutputBufferWriteString(writer->out, "<!ENTITY ");

	push	OFFSET ??_C@_09POADHIMD@?$DM?$CBENTITY?5@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3698 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3699 :         return -1;
; 3700 :     sum += count;

	add	edi, eax

; 3701 : 
; 3702 :     if (pe != 0) {

	cmp	DWORD PTR _pe$[ebp], 0
	je	SHORT $LN21@xmlTextWri

; 3703 :         count = xmlOutputBufferWriteString(writer->out, "% ");

	push	OFFSET ??_C@_02KLLMIGEE@?$CF?5@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3704 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3705 :             return -1;
; 3706 :         sum += count;

	add	edi, eax
$LN21@xmlTextWri:

; 3707 :     }
; 3708 : 
; 3709 :     count = xmlOutputBufferWriteString(writer->out, (const char *) name);

	push	DWORD PTR _name$[ebp]
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3710 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3711 :         return -1;
; 3712 :     sum += count;

	add	eax, edi
	pop	edi

; 3713 : 
; 3714 :     return sum;
; 3715 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterStartDTDEntity ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteDTDAttlist
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_content$ = 16						; size = 4
_xmlTextWriterWriteDTDAttlist PROC			; COMDAT

; 3589 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	cmp	DWORD PTR _content$[ebp], 0
	je	SHORT $LN7@xmlTextWri

; 3590 :     int count;
; 3591 :     int sum;
; 3592 : 
; 3593 :     if (content == NULL)
; 3594 :         return -1;
; 3595 : 
; 3596 :     sum = 0;
; 3597 :     count = xmlTextWriterStartDTDAttlist(writer, name);

	push	DWORD PTR _name$[ebp]
	mov	ebx, DWORD PTR _writer$[ebp]
	push	ebx
	call	_xmlTextWriterStartDTDAttlist
	mov	esi, eax
	add	esp, 8

; 3598 :     if (count == -1)

	cmp	esi, -1
	je	SHORT $LN7@xmlTextWri

; 3599 :         return -1;
; 3600 :     sum += count;
; 3601 : 
; 3602 :     count = xmlTextWriterWriteString(writer, content);

	push	DWORD PTR _content$[ebp]
	push	ebx
	call	_xmlTextWriterWriteString
	add	esp, 8

; 3603 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 3604 :         return -1;
; 3605 :     sum += count;
; 3606 : 
; 3607 :     count = xmlTextWriterEndDTDAttlist(writer);

	push	ebx
	add	esi, eax
	call	_xmlTextWriterEndDTDAttlist
	add	esp, 4

; 3608 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 3610 :     sum += count;

	add	eax, esi
	pop	esi

; 3611 : 
; 3612 :     return sum;
; 3613 : }

	pop	ebx
	pop	ebp
	ret	0
$LN7@xmlTextWri:
	pop	esi

; 3609 :         return -1;

	or	eax, -1

; 3611 : 
; 3612 :     return sum;
; 3613 : }

	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterWriteDTDAttlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatDTDAttlist
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_format$ = 16						; size = 4
_argptr$ = 20						; size = 4
_xmlTextWriterWriteVFormatDTDAttlist PROC		; COMDAT

; 3559 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 3560 :     int rc;
; 3561 :     xmlChar *buf;
; 3562 : 
; 3563 :     if (writer == NULL)
; 3564 :         return -1;
; 3565 : 
; 3566 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 3567 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 3569 : 
; 3570 :     rc = xmlTextWriterWriteDTDAttlist(writer, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteDTDAttlist

; 3571 : 
; 3572 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 3573 :     return rc;

	mov	eax, esi
	pop	edi

; 3574 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 3568 :         return -1;

	or	eax, -1

; 3574 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatDTDAttlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatDTDAttlist
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_format$ = 16						; size = 4
_xmlTextWriterWriteFormatDTDAttlist PROC		; COMDAT

; 3532 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 3563 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 3533 :     int rc;
; 3534 :     va_list ap;
; 3535 : 
; 3536 :     va_start(ap, format);
; 3537 : 
; 3538 :     rc = xmlTextWriterWriteVFormatDTDAttlist(writer, name, format, ap);
; 3539 : 
; 3540 :     va_end(ap);
; 3541 :     return rc;

	or	eax, -1
	pop	esi

; 3542 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 3566 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 3567 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 3533 :     int rc;
; 3534 :     va_list ap;
; 3535 : 
; 3536 :     va_start(ap, format);
; 3537 : 
; 3538 :     rc = xmlTextWriterWriteVFormatDTDAttlist(writer, name, format, ap);
; 3539 : 
; 3540 :     va_end(ap);
; 3541 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 3542 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 3570 :     rc = xmlTextWriterWriteDTDAttlist(writer, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteDTDAttlist

; 3571 : 
; 3572 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 3533 :     int rc;
; 3534 :     va_list ap;
; 3535 : 
; 3536 :     va_start(ap, format);
; 3537 : 
; 3538 :     rc = xmlTextWriterWriteVFormatDTDAttlist(writer, name, format, ap);
; 3539 : 
; 3540 :     va_end(ap);
; 3541 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 3542 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatDTDAttlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndDTDAttlist
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndDTDAttlist PROC			; COMDAT

; 3476 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN9@xmlTextWri

; 3477 :     int count;
; 3478 :     int sum;
; 3479 :     xmlLinkPtr lk;
; 3480 :     xmlTextWriterStackEntry *p;
; 3481 : 
; 3482 :     if (writer == NULL)
; 3483 :         return -1;
; 3484 : 
; 3485 :     sum = 0;
; 3486 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 3487 :     if (lk == 0)

	test	eax, eax
	je	SHORT $LN9@xmlTextWri

; 3488 :         return -1;
; 3489 : 
; 3490 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 3491 :     if (p == 0)

	test	eax, eax
	je	SHORT $LN9@xmlTextWri

; 3492 :         return -1;
; 3493 : 
; 3494 :     switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	add	eax, -11				; fffffff5H
	cmp	eax, 1
	ja	SHORT $LN9@xmlTextWri

; 3495 :         case XML_TEXTWRITER_DTD_ATTL:
; 3496 :         case XML_TEXTWRITER_DTD_ATTL_TEXT:
; 3497 :             count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 8

; 3498 :             if (count < 0)

	test	edi, edi
	js	SHORT $LN9@xmlTextWri

; 3504 :     }
; 3505 : 
; 3506 :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN10@xmlTextWri

; 3507 :         count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3508 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN9@xmlTextWri

; 3509 :             return -1;
; 3510 :         sum += count;

	add	edi, eax
$LN10@xmlTextWri:

; 3511 :     }
; 3512 : 
; 3513 :     xmlListPopFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListPopFront
	add	esp, 4

; 3514 :     return sum;

	mov	eax, edi
	pop	edi

; 3515 : }

	pop	esi
	pop	ebp
	ret	0
$LN9@xmlTextWri:
	pop	edi

; 3499 :                 return -1;
; 3500 :             sum += count;
; 3501 :             break;
; 3502 :         default:
; 3503 :             return -1;

	or	eax, -1

; 3515 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterEndDTDAttlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartDTDAttlist
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlTextWriterStartDTDAttlist PROC			; COMDAT

; 3389 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 3390 :     int count;
; 3391 :     int sum;
; 3392 :     xmlLinkPtr lk;
; 3393 :     xmlTextWriterStackEntry *p;
; 3394 : 
; 3395 :     if (writer == NULL || name == NULL || *name == '\0')

	mov	eax, DWORD PTR _name$[ebp]
	test	eax, eax
	je	SHORT $LN5@xmlTextWri
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN5@xmlTextWri

; 3396 :         return -1;
; 3397 : 
; 3398 :     sum = 0;
; 3399 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	xor	edi, edi
	call	_xmlListFront
	add	esp, 4

; 3400 :     if (lk == 0) {

	test	eax, eax
	je	SHORT $LN5@xmlTextWri

; 3401 :         return -1;
; 3402 :     }
; 3403 : 
; 3404 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ebx, eax
	add	esp, 4

; 3405 :     if (p != 0) {

	test	ebx, ebx
	je	SHORT $LN12@xmlTextWri

; 3406 :         switch (p->state) {

	mov	eax, DWORD PTR [ebx+4]
	sub	eax, edi
	je	SHORT $LN12@xmlTextWri
	sub	eax, 7
	je	SHORT $LN8@xmlTextWri
	sub	eax, 1
	je	SHORT $LN12@xmlTextWri
$LN5@xmlTextWri:
	pop	edi

; 3462 : 
; 3463 :     return sum;
; 3464 : }

	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN8@xmlTextWri:

; 3407 :             case XML_TEXTWRITER_DTD:
; 3408 :                 count = xmlOutputBufferWriteString(writer->out, " [");

	push	OFFSET ??_C@_02GBLMOEJC@?5?$FL@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 8

; 3409 :                 if (count < 0)

	test	edi, edi
	js	SHORT $LN5@xmlTextWri

; 3410 :                     return -1;
; 3411 :                 sum += count;
; 3412 :                 if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN10@xmlTextWri

; 3413 :                     count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3414 :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 3415 :                         return -1;
; 3416 :                     sum += count;

	add	edi, eax
$LN10@xmlTextWri:

; 3417 :                 }
; 3418 :                 p->state = XML_TEXTWRITER_DTD_TEXT;

	mov	DWORD PTR [ebx+4], 8
$LN12@xmlTextWri:

; 3419 :                 /* fallthrough */
; 3420 :             case XML_TEXTWRITER_DTD_TEXT:
; 3421 :             case XML_TEXTWRITER_NONE:
; 3422 :                 break;
; 3423 :             default:
; 3424 :                 return -1;
; 3425 :         }
; 3426 :     }
; 3427 : 
; 3428 :     p = (xmlTextWriterStackEntry *)

	push	8
	call	DWORD PTR _xmlMalloc
	mov	ebx, eax
	add	esp, 4

; 3429 :         xmlMalloc(sizeof(xmlTextWriterStackEntry));
; 3430 :     if (p == 0) {

	test	ebx, ebx
	jne	SHORT $LN14@xmlTextWri

; 3431 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CP@EGINGCOH@xmlTextWriterStartDTDAttlist?5?3?5@
	push	2
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 3462 : 
; 3463 :     return sum;
; 3464 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN14@xmlTextWri:

; 3432 :                         "xmlTextWriterStartDTDAttlist : out of memory!\n");
; 3433 :         return -1;
; 3434 :     }
; 3435 : 
; 3436 :     p->name = xmlStrdup(name);

	push	DWORD PTR _name$[ebp]
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [ebx], eax

; 3437 :     if (p->name == 0) {

	test	eax, eax
	jne	SHORT $LN15@xmlTextWri

; 3438 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CP@EGINGCOH@xmlTextWriterStartDTDAttlist?5?3?5@
	push	2
	push	esi
	call	_xmlWriterErrMsg

; 3439 :                         "xmlTextWriterStartDTDAttlist : out of memory!\n");
; 3440 :         xmlFree(p);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 3462 : 
; 3463 :     return sum;
; 3464 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN15@xmlTextWri:

; 3441 :         return -1;
; 3442 :     }
; 3443 :     p->state = XML_TEXTWRITER_DTD_ATTL;

	mov	DWORD PTR [ebx+4], 11			; 0000000bH

; 3444 : 
; 3445 :     xmlListPushFront(writer->nodes, p);

	push	ebx
	push	DWORD PTR [esi+4]
	call	_xmlListPushFront
	add	esp, 8

; 3446 : 
; 3447 :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN16@xmlTextWri

; 3448 :         count = xmlTextWriterWriteIndent(writer);

	push	esi
	call	_xmlTextWriterWriteIndent
	add	esp, 4

; 3449 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3450 :             return -1;
; 3451 :         sum += count;

	add	edi, eax
$LN16@xmlTextWri:

; 3452 :     }
; 3453 : 
; 3454 :     count = xmlOutputBufferWriteString(writer->out, "<!ATTLIST ");

	push	OFFSET ??_C@_0L@NDHICKFH@?$DM?$CBATTLIST?5@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3455 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3456 :         return -1;
; 3457 :     sum += count;
; 3458 :     count = xmlOutputBufferWriteString(writer->out, (const char *) name);

	push	DWORD PTR _name$[ebp]
	add	edi, eax
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3459 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3460 :         return -1;
; 3461 :     sum += count;

	add	eax, edi
	pop	edi

; 3462 : 
; 3463 :     return sum;
; 3464 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterStartDTDAttlist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteDTDElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_content$ = 16						; size = 4
_xmlTextWriterWriteDTDElement PROC			; COMDAT

; 3352 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	cmp	DWORD PTR _content$[ebp], 0
	je	SHORT $LN7@xmlTextWri

; 3353 :     int count;
; 3354 :     int sum;
; 3355 : 
; 3356 :     if (content == NULL)
; 3357 :         return -1;
; 3358 : 
; 3359 :     sum = 0;
; 3360 :     count = xmlTextWriterStartDTDElement(writer, name);

	push	DWORD PTR _name$[ebp]
	mov	ebx, DWORD PTR _writer$[ebp]
	push	ebx
	call	_xmlTextWriterStartDTDElement
	mov	esi, eax
	add	esp, 8

; 3361 :     if (count == -1)

	cmp	esi, -1
	je	SHORT $LN7@xmlTextWri

; 3362 :         return -1;
; 3363 :     sum += count;
; 3364 : 
; 3365 :     count = xmlTextWriterWriteString(writer, content);

	push	DWORD PTR _content$[ebp]
	push	ebx
	call	_xmlTextWriterWriteString
	add	esp, 8

; 3366 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 3367 :         return -1;
; 3368 :     sum += count;
; 3369 : 
; 3370 :     count = xmlTextWriterEndDTDElement(writer);

	push	ebx
	add	esi, eax
	call	_xmlTextWriterEndDTDElement
	add	esp, 4

; 3371 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 3373 :     sum += count;

	add	eax, esi
	pop	esi

; 3374 : 
; 3375 :     return sum;
; 3376 : }

	pop	ebx
	pop	ebp
	ret	0
$LN7@xmlTextWri:
	pop	esi

; 3372 :         return -1;

	or	eax, -1

; 3374 : 
; 3375 :     return sum;
; 3376 : }

	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterWriteDTDElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatDTDElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_format$ = 16						; size = 4
_argptr$ = 20						; size = 4
_xmlTextWriterWriteVFormatDTDElement PROC		; COMDAT

; 3322 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 3323 :     int rc;
; 3324 :     xmlChar *buf;
; 3325 : 
; 3326 :     if (writer == NULL)
; 3327 :         return -1;
; 3328 : 
; 3329 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 3330 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 3332 : 
; 3333 :     rc = xmlTextWriterWriteDTDElement(writer, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteDTDElement

; 3334 : 
; 3335 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 3336 :     return rc;

	mov	eax, esi
	pop	edi

; 3337 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 3331 :         return -1;

	or	eax, -1

; 3337 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatDTDElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatDTDElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_format$ = 16						; size = 4
_xmlTextWriterWriteFormatDTDElement PROC		; COMDAT

; 3295 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 3326 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 3296 :     int rc;
; 3297 :     va_list ap;
; 3298 : 
; 3299 :     va_start(ap, format);
; 3300 : 
; 3301 :     rc = xmlTextWriterWriteVFormatDTDElement(writer, name, format, ap);
; 3302 : 
; 3303 :     va_end(ap);
; 3304 :     return rc;

	or	eax, -1
	pop	esi

; 3305 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 3329 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 3330 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 3296 :     int rc;
; 3297 :     va_list ap;
; 3298 : 
; 3299 :     va_start(ap, format);
; 3300 : 
; 3301 :     rc = xmlTextWriterWriteVFormatDTDElement(writer, name, format, ap);
; 3302 : 
; 3303 :     va_end(ap);
; 3304 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 3305 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 3333 :     rc = xmlTextWriterWriteDTDElement(writer, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteDTDElement

; 3334 : 
; 3335 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 3296 :     int rc;
; 3297 :     va_list ap;
; 3298 : 
; 3299 :     va_start(ap, format);
; 3300 : 
; 3301 :     rc = xmlTextWriterWriteVFormatDTDElement(writer, name, format, ap);
; 3302 : 
; 3303 :     va_end(ap);
; 3304 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 3305 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatDTDElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndDTDElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndDTDElement PROC			; COMDAT

; 3239 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN9@xmlTextWri

; 3240 :     int count;
; 3241 :     int sum;
; 3242 :     xmlLinkPtr lk;
; 3243 :     xmlTextWriterStackEntry *p;
; 3244 : 
; 3245 :     if (writer == NULL)
; 3246 :         return -1;
; 3247 : 
; 3248 :     sum = 0;
; 3249 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 3250 :     if (lk == 0)

	test	eax, eax
	je	SHORT $LN9@xmlTextWri

; 3251 :         return -1;
; 3252 : 
; 3253 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 3254 :     if (p == 0)

	test	eax, eax
	je	SHORT $LN9@xmlTextWri

; 3255 :         return -1;
; 3256 : 
; 3257 :     switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	add	eax, -9					; fffffff7H
	cmp	eax, 1
	ja	SHORT $LN9@xmlTextWri

; 3258 :         case XML_TEXTWRITER_DTD_ELEM:
; 3259 :         case XML_TEXTWRITER_DTD_ELEM_TEXT:
; 3260 :             count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 8

; 3261 :             if (count < 0)

	test	edi, edi
	js	SHORT $LN9@xmlTextWri

; 3267 :     }
; 3268 : 
; 3269 :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN10@xmlTextWri

; 3270 :         count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3271 :         if (count < 0)

	test	eax, eax
	js	SHORT $LN9@xmlTextWri

; 3272 :             return -1;
; 3273 :         sum += count;

	add	edi, eax
$LN10@xmlTextWri:

; 3274 :     }
; 3275 : 
; 3276 :     xmlListPopFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListPopFront
	add	esp, 4

; 3277 :     return sum;

	mov	eax, edi
	pop	edi

; 3278 : }

	pop	esi
	pop	ebp
	ret	0
$LN9@xmlTextWri:
	pop	edi

; 3262 :                 return -1;
; 3263 :             sum += count;
; 3264 :             break;
; 3265 :         default:
; 3266 :             return -1;

	or	eax, -1

; 3278 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterEndDTDElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartDTDElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlTextWriterStartDTDElement PROC			; COMDAT

; 3152 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 3153 :     int count;
; 3154 :     int sum;
; 3155 :     xmlLinkPtr lk;
; 3156 :     xmlTextWriterStackEntry *p;
; 3157 : 
; 3158 :     if (writer == NULL || name == NULL || *name == '\0')

	mov	eax, DWORD PTR _name$[ebp]
	test	eax, eax
	je	SHORT $LN5@xmlTextWri
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN5@xmlTextWri

; 3159 :         return -1;
; 3160 : 
; 3161 :     sum = 0;
; 3162 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	xor	edi, edi
	call	_xmlListFront
	add	esp, 4

; 3163 :     if (lk == 0) {

	test	eax, eax
	je	SHORT $LN5@xmlTextWri

; 3164 :         return -1;
; 3165 :     }
; 3166 : 
; 3167 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ebx, eax
	add	esp, 4

; 3168 :     if (p != 0) {

	test	ebx, ebx
	je	SHORT $LN12@xmlTextWri

; 3169 :         switch (p->state) {

	mov	eax, DWORD PTR [ebx+4]
	sub	eax, edi
	je	SHORT $LN12@xmlTextWri
	sub	eax, 7
	je	SHORT $LN8@xmlTextWri
	sub	eax, 1
	je	SHORT $LN12@xmlTextWri
$LN5@xmlTextWri:
	pop	edi

; 3225 : 
; 3226 :     return sum;
; 3227 : }

	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN8@xmlTextWri:

; 3170 :             case XML_TEXTWRITER_DTD:
; 3171 :                 count = xmlOutputBufferWriteString(writer->out, " [");

	push	OFFSET ??_C@_02GBLMOEJC@?5?$FL@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 8

; 3172 :                 if (count < 0)

	test	edi, edi
	js	SHORT $LN5@xmlTextWri

; 3173 :                     return -1;
; 3174 :                 sum += count;
; 3175 :                 if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN10@xmlTextWri

; 3176 :                     count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3177 :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 3178 :                         return -1;
; 3179 :                     sum += count;

	add	edi, eax
$LN10@xmlTextWri:

; 3180 :                 }
; 3181 :                 p->state = XML_TEXTWRITER_DTD_TEXT;

	mov	DWORD PTR [ebx+4], 8
$LN12@xmlTextWri:

; 3182 :                 /* fallthrough */
; 3183 :             case XML_TEXTWRITER_DTD_TEXT:
; 3184 :             case XML_TEXTWRITER_NONE:
; 3185 :                 break;
; 3186 :             default:
; 3187 :                 return -1;
; 3188 :         }
; 3189 :     }
; 3190 : 
; 3191 :     p = (xmlTextWriterStackEntry *)

	push	8
	call	DWORD PTR _xmlMalloc
	mov	ebx, eax
	add	esp, 4

; 3192 :         xmlMalloc(sizeof(xmlTextWriterStackEntry));
; 3193 :     if (p == 0) {

	test	ebx, ebx
	jne	SHORT $LN14@xmlTextWri

; 3194 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CP@HLOPJJJB@xmlTextWriterStartDTDElement?5?3?5@
	push	2
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 3225 : 
; 3226 :     return sum;
; 3227 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN14@xmlTextWri:

; 3195 :                         "xmlTextWriterStartDTDElement : out of memory!\n");
; 3196 :         return -1;
; 3197 :     }
; 3198 : 
; 3199 :     p->name = xmlStrdup(name);

	push	DWORD PTR _name$[ebp]
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [ebx], eax

; 3200 :     if (p->name == 0) {

	test	eax, eax
	jne	SHORT $LN15@xmlTextWri

; 3201 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CP@HLOPJJJB@xmlTextWriterStartDTDElement?5?3?5@
	push	2
	push	esi
	call	_xmlWriterErrMsg

; 3202 :                         "xmlTextWriterStartDTDElement : out of memory!\n");
; 3203 :         xmlFree(p);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 3225 : 
; 3226 :     return sum;
; 3227 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN15@xmlTextWri:

; 3204 :         return -1;
; 3205 :     }
; 3206 :     p->state = XML_TEXTWRITER_DTD_ELEM;

	mov	DWORD PTR [ebx+4], 9

; 3207 : 
; 3208 :     xmlListPushFront(writer->nodes, p);

	push	ebx
	push	DWORD PTR [esi+4]
	call	_xmlListPushFront
	add	esp, 8

; 3209 : 
; 3210 :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN16@xmlTextWri

; 3211 :         count = xmlTextWriterWriteIndent(writer);

	push	esi
	call	_xmlTextWriterWriteIndent
	add	esp, 4

; 3212 :         if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3213 :             return -1;
; 3214 :         sum += count;

	add	edi, eax
$LN16@xmlTextWri:

; 3215 :     }
; 3216 : 
; 3217 :     count = xmlOutputBufferWriteString(writer->out, "<!ELEMENT ");

	push	OFFSET ??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3218 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3219 :         return -1;
; 3220 :     sum += count;
; 3221 :     count = xmlOutputBufferWriteString(writer->out, (const char *) name);

	push	DWORD PTR _name$[ebp]
	add	edi, eax
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 3222 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 3223 :         return -1;
; 3224 :     sum += count;

	add	eax, edi
	pop	edi

; 3225 : 
; 3226 :     return sum;
; 3227 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterStartDTDElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteDTD
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_pubid$ = 16						; size = 4
_sysid$ = 20						; size = 4
_subset$ = 24						; size = 4
_xmlTextWriterWriteDTD PROC				; COMDAT

; 3118 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _sysid$[ebp]
	mov	edi, DWORD PTR _writer$[ebp]
	push	DWORD PTR _pubid$[ebp]
	push	DWORD PTR _name$[ebp]
	push	edi
	call	_xmlTextWriterStartDTD
	mov	esi, eax
	add	esp, 16					; 00000010H
	cmp	esi, -1
	je	SHORT $LN7@xmlTextWri

; 3119 :     int count;
; 3120 :     int sum;
; 3121 : 
; 3122 :     sum = 0;
; 3123 :     count = xmlTextWriterStartDTD(writer, name, pubid, sysid);
; 3124 :     if (count == -1)
; 3125 :         return -1;
; 3126 :     sum += count;
; 3127 :     if (subset != 0) {

	mov	eax, DWORD PTR _subset$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 3128 :         count = xmlTextWriterWriteString(writer, subset);

	push	eax
	push	edi
	call	_xmlTextWriterWriteString
	add	esp, 8

; 3129 :         if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 3130 :             return -1;
; 3131 :         sum += count;

	add	esi, eax
$LN3@xmlTextWri:

; 3132 :     }
; 3133 :     count = xmlTextWriterEndDTD(writer);

	push	edi
	call	_xmlTextWriterEndDTD
	add	esp, 4

; 3134 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 3136 :     sum += count;

	pop	edi
	add	eax, esi

; 3137 : 
; 3138 :     return sum;
; 3139 : }

	pop	esi
	pop	ebp
	ret	0
$LN7@xmlTextWri:
	pop	edi

; 3135 :         return -1;

	or	eax, -1

; 3137 : 
; 3138 :     return sum;
; 3139 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteDTD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatDTD
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_pubid$ = 16						; size = 4
_sysid$ = 20						; size = 4
_format$ = 24						; size = 4
_argptr$ = 28						; size = 4
_xmlTextWriterWriteVFormatDTD PROC			; COMDAT

; 3084 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 3085 :     int rc;
; 3086 :     xmlChar *buf;
; 3087 : 
; 3088 :     if (writer == NULL)
; 3089 :         return -1;
; 3090 : 
; 3091 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 3092 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 3094 : 
; 3095 :     rc = xmlTextWriterWriteDTD(writer, name, pubid, sysid, buf);

	push	edi
	push	DWORD PTR _sysid$[ebp]
	push	DWORD PTR _pubid$[ebp]
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteDTD

; 3096 : 
; 3097 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 24					; 00000018H

; 3098 :     return rc;

	mov	eax, esi
	pop	edi

; 3099 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 3093 :         return -1;

	or	eax, -1

; 3099 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatDTD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatDTD
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_pubid$ = 16						; size = 4
_sysid$ = 20						; size = 4
_format$ = 24						; size = 4
_xmlTextWriterWriteFormatDTD PROC			; COMDAT

; 3052 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 3088 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 3053 :     int rc;
; 3054 :     va_list ap;
; 3055 : 
; 3056 :     va_start(ap, format);
; 3057 : 
; 3058 :     rc = xmlTextWriterWriteVFormatDTD(writer, name, pubid, sysid, format,
; 3059 :                                       ap);
; 3060 : 
; 3061 :     va_end(ap);
; 3062 :     return rc;

	or	eax, -1
	pop	esi

; 3063 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 3091 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 3092 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 3053 :     int rc;
; 3054 :     va_list ap;
; 3055 : 
; 3056 :     va_start(ap, format);
; 3057 : 
; 3058 :     rc = xmlTextWriterWriteVFormatDTD(writer, name, pubid, sysid, format,
; 3059 :                                       ap);
; 3060 : 
; 3061 :     va_end(ap);
; 3062 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 3063 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 3095 :     rc = xmlTextWriterWriteDTD(writer, name, pubid, sysid, buf);

	push	edi
	push	DWORD PTR _sysid$[ebp]
	push	DWORD PTR _pubid$[ebp]
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteDTD

; 3096 : 
; 3097 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 24					; 00000018H

; 3053 :     int rc;
; 3054 :     va_list ap;
; 3055 : 
; 3056 :     va_start(ap, format);
; 3057 : 
; 3058 :     rc = xmlTextWriterWriteVFormatDTD(writer, name, pubid, sysid, format,
; 3059 :                                       ap);
; 3060 : 
; 3061 :     va_end(ap);
; 3062 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 3063 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatDTD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndDTD
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndDTD PROC				; COMDAT

; 2967 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	$LN27@xmlTextWri

; 2968 :     int loop;
; 2969 :     int count;
; 2970 :     int sum;
; 2971 :     xmlLinkPtr lk;
; 2972 :     xmlTextWriterStackEntry *p;
; 2973 : 
; 2974 :     if (writer == NULL)
; 2975 :         return -1;
; 2976 : 
; 2977 :     sum = 0;

	xor	ebx, ebx
	npad	3
$LL2@xmlTextWri:

; 2978 :     loop = 1;
; 2979 :     while (loop) {
; 2980 :         lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 2981 :         if (lk == NULL)

	test	eax, eax
	je	$LN3@xmlTextWri

; 2982 :             break;
; 2983 :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 2984 :         if (p == 0)

	test	eax, eax
	je	$LN3@xmlTextWri

; 2985 :             break;
; 2986 :         switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	add	eax, -7					; fffffff9H
	cmp	eax, 9
	ja	$LN3@xmlTextWri
	jmp	DWORD PTR $LN35@xmlTextWri[eax*4]
$LN9@xmlTextWri:

; 2987 :             case XML_TEXTWRITER_DTD_TEXT:
; 2988 :                 count = xmlOutputBufferWriteString(writer->out, "]");

	push	OFFSET ??_C@_01LBDDMOBJ@?$FN@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2989 :                 if (count < 0)

	test	eax, eax
	js	SHORT $LN27@xmlTextWri

; 2990 :                     return -1;
; 2991 :                 sum += count;

	add	ebx, eax
$LN11@xmlTextWri:

; 2992 :                 /* fallthrough */
; 2993 :             case XML_TEXTWRITER_DTD:
; 2994 :                 count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8
	mov	edi, eax

; 2995 : 
; 2996 :                 if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN12@xmlTextWri

; 2997 :                     if (count < 0)

	test	edi, edi
	js	SHORT $LN27@xmlTextWri

; 2998 :                         return -1;
; 2999 :                     sum += count;
; 3000 :                     count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	add	ebx, edi
	call	_xmlOutputBufferWriteString
	add	esp, 8
	mov	edi, eax
$LN12@xmlTextWri:

; 3001 :                 }
; 3002 : 
; 3003 :                 xmlListPopFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListPopFront

; 3004 :                 break;

	jmp	SHORT $LN32@xmlTextWri
$LN14@xmlTextWri:

; 3005 :             case XML_TEXTWRITER_DTD_ELEM:
; 3006 :             case XML_TEXTWRITER_DTD_ELEM_TEXT:
; 3007 :                 count = xmlTextWriterEndDTDElement(writer);

	push	esi
	call	_xmlTextWriterEndDTDElement

; 3008 :                 break;

	jmp	SHORT $LN33@xmlTextWri
$LN15@xmlTextWri:

; 3009 :             case XML_TEXTWRITER_DTD_ATTL:
; 3010 :             case XML_TEXTWRITER_DTD_ATTL_TEXT:
; 3011 :                 count = xmlTextWriterEndDTDAttlist(writer);

	push	esi
	call	_xmlTextWriterEndDTDAttlist

; 3012 :                 break;

	jmp	SHORT $LN33@xmlTextWri
$LN16@xmlTextWri:

; 3013 :             case XML_TEXTWRITER_DTD_ENTY:
; 3014 :             case XML_TEXTWRITER_DTD_PENT:
; 3015 :             case XML_TEXTWRITER_DTD_ENTY_TEXT:
; 3016 :                 count = xmlTextWriterEndDTDEntity(writer);

	push	esi
	call	_xmlTextWriterEndDTDEntity

; 3017 :                 break;

	jmp	SHORT $LN33@xmlTextWri
$LN17@xmlTextWri:

; 3018 :             case XML_TEXTWRITER_COMMENT:
; 3019 :                 count = xmlTextWriterEndComment(writer);

	push	esi
	call	_xmlTextWriterEndComment
$LN33@xmlTextWri:

; 3020 :                 break;
; 3021 :             default:
; 3022 :                 loop = 0;
; 3023 :                 continue;
; 3024 :         }
; 3025 : 
; 3026 :         if (count < 0)

	mov	edi, eax
$LN32@xmlTextWri:
	add	esp, 4
	test	edi, edi
	js	SHORT $LN27@xmlTextWri

; 3027 :             return -1;
; 3028 :         sum += count;

	add	ebx, edi
	jmp	$LL2@xmlTextWri
$LN3@xmlTextWri:
	pop	edi

; 3029 :     }
; 3030 : 
; 3031 :     return sum;
; 3032 : }

	pop	esi
	mov	eax, ebx
	pop	ebx
	pop	ebp
	ret	0
$LN27@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN35@xmlTextWri:
	DD	$LN11@xmlTextWri
	DD	$LN9@xmlTextWri
	DD	$LN14@xmlTextWri
	DD	$LN14@xmlTextWri
	DD	$LN15@xmlTextWri
	DD	$LN15@xmlTextWri
	DD	$LN16@xmlTextWri
	DD	$LN16@xmlTextWri
	DD	$LN16@xmlTextWri
	DD	$LN17@xmlTextWri
_xmlTextWriterEndDTD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartDTD
_TEXT	SEGMENT
tv451 = 8						; size = 4
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_pubid$ = 16						; size = 4
_sysid$ = 20						; size = 4
_xmlTextWriterStartDTD PROC				; COMDAT

; 2832 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN3@xmlTextWri

; 2833 :     int count;
; 2834 :     int sum;
; 2835 :     xmlLinkPtr lk;
; 2836 :     xmlTextWriterStackEntry *p;
; 2837 : 
; 2838 :     if (writer == NULL || name == NULL || *name == '\0')

	mov	ebx, DWORD PTR _name$[ebp]
	test	ebx, ebx
	je	SHORT $LN3@xmlTextWri
	cmp	BYTE PTR [ebx], 0
	je	SHORT $LN3@xmlTextWri

; 2839 :         return -1;
; 2840 : 
; 2841 :     sum = 0;
; 2842 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 2843 :     if ((lk != NULL) && (xmlLinkGetData(lk) != NULL)) {

	test	eax, eax
	je	SHORT $LN4@xmlTextWri
	push	eax
	call	_xmlLinkGetData
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@xmlTextWri

; 2844 :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0DF@KCNCPLNC@xmlTextWriterStartDTD?5?3?5DTD?5all@

; 2955 : }

	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
$LN3@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN4@xmlTextWri:

; 2845 :                         "xmlTextWriterStartDTD : DTD allowed only in prolog!\n");
; 2846 :         return -1;
; 2847 :     }
; 2848 : 
; 2849 :     p = (xmlTextWriterStackEntry *)

	push	8
	call	DWORD PTR _xmlMalloc
	mov	edi, eax
	add	esp, 4

; 2850 :         xmlMalloc(sizeof(xmlTextWriterStackEntry));
; 2851 :     if (p == 0) {

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 2852 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CI@CDIDIABN@xmlTextWriterStartDTD?5?3?5out?5of?5@
	push	2

; 2955 : }

	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 2853 :                         "xmlTextWriterStartDTD : out of memory!\n");
; 2854 :         return -1;
; 2855 :     }
; 2856 : 
; 2857 :     p->name = xmlStrdup(name);

	push	ebx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [edi], eax

; 2858 :     if (p->name == 0) {

	test	eax, eax
	jne	SHORT $LN6@xmlTextWri

; 2859 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CI@CDIDIABN@xmlTextWriterStartDTD?5?3?5out?5of?5@
	push	2
	push	esi
	call	_xmlWriterErrMsg

; 2860 :                         "xmlTextWriterStartDTD : out of memory!\n");
; 2861 :         xmlFree(p);

	push	edi
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 2955 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN6@xmlTextWri:

; 2862 :         return -1;
; 2863 :     }
; 2864 :     p->state = XML_TEXTWRITER_DTD;

	mov	DWORD PTR [edi+4], 7

; 2865 : 
; 2866 :     xmlListPushFront(writer->nodes, p);

	push	edi
	push	DWORD PTR [esi+4]
	call	_xmlListPushFront

; 2867 : 
; 2868 :     count = xmlOutputBufferWriteString(writer->out, "<!DOCTYPE ");

	push	OFFSET ??_C@_0L@JKHDJBPI@?$DM?$CBDOCTYPE?5@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 16					; 00000010H

; 2869 :     if (count < 0)

	test	edi, edi
	js	$LN3@xmlTextWri

; 2870 :         return -1;
; 2871 :     sum += count;
; 2872 :     count = xmlOutputBufferWriteString(writer->out, (const char *) name);

	push	ebx
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2873 :     if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri

; 2874 :         return -1;
; 2875 :     sum += count;
; 2876 : 
; 2877 :     if (pubid != 0) {

	mov	ebx, DWORD PTR _pubid$[ebp]
	add	edi, eax
	mov	eax, DWORD PTR _sysid$[ebp]
	mov	edx, OFFSET ??_C@_01CLKCMJKC@?5@
	mov	ecx, OFFSET ??_C@_01EEMJAFIK@?6@
	test	ebx, ebx
	je	$LN9@xmlTextWri

; 2878 :         if (sysid == 0) {

	test	eax, eax
	jne	SHORT $LN10@xmlTextWri

; 2879 :             xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0DD@KKKOOJH@xmlTextWriterStartDTD?5?3?5system?5@

; 2955 : }

	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN10@xmlTextWri:

; 2880 :                             "xmlTextWriterStartDTD : system identifier needed!\n");
; 2881 :             return -1;
; 2882 :         }
; 2883 : 
; 2884 :         if (writer->indent)
; 2885 :             count = xmlOutputBufferWrite(writer->out, 1, "\n");
; 2886 :         else
; 2887 :             count = xmlOutputBufferWrite(writer->out, 1, " ");
; 2888 :         if (count < 0)

	cmp	DWORD PTR [esi+16], 0
	mov	eax, edx
	cmovne	eax, ecx
	push	eax
	push	1
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv451[ebp], eax
	test	eax, eax
	js	$LN3@xmlTextWri

; 2889 :             return -1;
; 2890 :         sum += count;
; 2891 : 
; 2892 :         count = xmlOutputBufferWriteString(writer->out, "PUBLIC ");

	push	OFFSET ??_C@_07GAMBALOD@PUBLIC?5@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2893 :         if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri

; 2894 :             return -1;
; 2895 :         sum += count;

	add	eax, DWORD PTR tv451[ebp]
	add	edi, eax

; 2896 : 
; 2897 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	eax, DWORD PTR [esi+28]
	push	eax
	push	1
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 2898 :         if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri

; 2899 :             return -1;
; 2900 :         sum += count;
; 2901 : 
; 2902 :         count =

	push	ebx
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2903 :             xmlOutputBufferWriteString(writer->out, (const char *) pubid);
; 2904 :         if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri

; 2905 :             return -1;
; 2906 :         sum += count;

	add	edi, eax

; 2907 : 
; 2908 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	eax, DWORD PTR [esi+28]
	push	eax
	push	1
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 2909 :         if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri

; 2910 :             return -1;
; 2911 :         sum += count;

	add	edi, eax
	mov	edx, OFFSET ??_C@_01CLKCMJKC@?5@
	mov	eax, DWORD PTR _sysid$[ebp]
$LN9@xmlTextWri:

; 2912 :     }
; 2913 : 
; 2914 :     if (sysid != 0) {

	test	eax, eax
	je	$LN18@xmlTextWri

; 2915 :         if (pubid == 0) {

	mov	ecx, DWORD PTR [esi+16]
	mov	eax, DWORD PTR [esi]
	test	ebx, ebx
	jne	SHORT $LN19@xmlTextWri

; 2916 :             if (writer->indent)
; 2917 :                 count = xmlOutputBufferWrite(writer->out, 1, "\n");
; 2918 :             else
; 2919 :                 count = xmlOutputBufferWrite(writer->out, 1, " ");
; 2920 :             if (count < 0)

	test	ecx, ecx
	mov	ecx, OFFSET ??_C@_01EEMJAFIK@?6@
	cmovne	edx, ecx
	push	edx
	push	1
	push	eax
	call	_xmlOutputBufferWrite
	mov	ebx, eax
	add	esp, 12					; 0000000cH
	test	ebx, ebx
	js	$LN3@xmlTextWri

; 2921 :                 return -1;
; 2922 :             sum += count;
; 2923 :             count = xmlOutputBufferWriteString(writer->out, "SYSTEM ");

	push	OFFSET ??_C@_07PBLMPJLL@SYSTEM?5@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2924 :             if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri

; 2925 :                 return -1;
; 2926 :             sum += count;

	add	eax, ebx

; 2927 :         } else {

	jmp	SHORT $LN20@xmlTextWri
$LN19@xmlTextWri:

; 2928 : 			if (writer->indent)

	test	ecx, ecx
	je	SHORT $LN25@xmlTextWri

; 2929 :             count = xmlOutputBufferWriteString(writer->out, "\n       ");

	push	OFFSET ??_C@_08HBIFNNEL@?6?5?5?5?5?5?5?5@
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8
	jmp	SHORT $LN26@xmlTextWri
$LN25@xmlTextWri:

; 2930 :             else
; 2931 :                 count = xmlOutputBufferWrite(writer->out, 1, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	push	1
	push	eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH
$LN26@xmlTextWri:

; 2932 :             if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri
$LN20@xmlTextWri:

; 2933 :                 return -1;
; 2934 :             sum += count;
; 2935 :         }
; 2936 : 
; 2937 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	ebx, DWORD PTR [esi+28]
	add	edi, eax
	push	ebx
	push	1
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 2938 :         if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri

; 2939 :             return -1;
; 2940 :         sum += count;
; 2941 : 
; 2942 :         count =

	push	DWORD PTR _sysid$[ebp]
	add	edi, eax
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2943 :             xmlOutputBufferWriteString(writer->out, (const char *) sysid);
; 2944 :         if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri

; 2945 :             return -1;
; 2946 :         sum += count;
; 2947 : 
; 2948 :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 2949 :         if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri

; 2950 :             return -1;
; 2951 :         sum += count;

	add	edi, eax
$LN18@xmlTextWri:

; 2952 :     }
; 2953 : 
; 2954 :     return sum;

	mov	eax, edi
	pop	edi

; 2955 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterStartDTD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteCDATA
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_content$ = 12						; size = 4
_xmlTextWriterWriteCDATA PROC				; COMDAT

; 2794 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _writer$[ebp]
	push	edi
	call	_xmlTextWriterStartCDATA
	mov	esi, eax
	add	esp, 4
	cmp	esi, -1
	je	SHORT $LN7@xmlTextWri

; 2795 :     int count;
; 2796 :     int sum;
; 2797 : 
; 2798 :     sum = 0;
; 2799 :     count = xmlTextWriterStartCDATA(writer);
; 2800 :     if (count == -1)
; 2801 :         return -1;
; 2802 :     sum += count;
; 2803 :     if (content != 0) {

	mov	eax, DWORD PTR _content$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 2804 :         count = xmlTextWriterWriteString(writer, content);

	push	eax
	push	edi
	call	_xmlTextWriterWriteString
	add	esp, 8

; 2805 :         if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 2806 :             return -1;
; 2807 :         sum += count;

	add	esi, eax
$LN3@xmlTextWri:

; 2808 :     }
; 2809 :     count = xmlTextWriterEndCDATA(writer);

	push	edi
	call	_xmlTextWriterEndCDATA
	add	esp, 4

; 2810 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 2812 :     sum += count;

	pop	edi
	add	eax, esi

; 2813 : 
; 2814 :     return sum;
; 2815 : }

	pop	esi
	pop	ebp
	ret	0
$LN7@xmlTextWri:
	pop	edi

; 2811 :         return -1;

	or	eax, -1

; 2813 : 
; 2814 :     return sum;
; 2815 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteCDATA ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatCDATA
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_format$ = 12						; size = 4
_argptr$ = 16						; size = 4
_xmlTextWriterWriteVFormatCDATA PROC			; COMDAT

; 2766 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 2767 :     int rc;
; 2768 :     xmlChar *buf;
; 2769 : 
; 2770 :     if (writer == NULL)
; 2771 :         return -1;
; 2772 : 
; 2773 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2774 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 2776 : 
; 2777 :     rc = xmlTextWriterWriteCDATA(writer, buf);

	push	edi
	push	esi
	call	_xmlTextWriterWriteCDATA

; 2778 : 
; 2779 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 12					; 0000000cH

; 2780 :     return rc;

	mov	eax, esi
	pop	edi

; 2781 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 2775 :         return -1;

	or	eax, -1

; 2781 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatCDATA ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatCDATA
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_format$ = 12						; size = 4
_xmlTextWriterWriteFormatCDATA PROC			; COMDAT

; 2741 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 2770 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 2742 :     int rc;
; 2743 :     va_list ap;
; 2744 : 
; 2745 :     va_start(ap, format);
; 2746 : 
; 2747 :     rc = xmlTextWriterWriteVFormatCDATA(writer, format, ap);
; 2748 : 
; 2749 :     va_end(ap);
; 2750 :     return rc;

	or	eax, -1
	pop	esi

; 2751 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 2773 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2774 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 2742 :     int rc;
; 2743 :     va_list ap;
; 2744 : 
; 2745 :     va_start(ap, format);
; 2746 : 
; 2747 :     rc = xmlTextWriterWriteVFormatCDATA(writer, format, ap);
; 2748 : 
; 2749 :     va_end(ap);
; 2750 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 2751 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 2777 :     rc = xmlTextWriterWriteCDATA(writer, buf);

	push	edi
	push	esi
	call	_xmlTextWriterWriteCDATA

; 2778 : 
; 2779 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 12					; 0000000cH

; 2742 :     int rc;
; 2743 :     va_list ap;
; 2744 : 
; 2745 :     va_start(ap, format);
; 2746 : 
; 2747 :     rc = xmlTextWriterWriteVFormatCDATA(writer, format, ap);
; 2748 : 
; 2749 :     va_end(ap);
; 2750 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 2751 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatCDATA ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndCDATA
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndCDATA PROC				; COMDAT

; 2695 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN11@xmlTextWri

; 2696 :     int count;
; 2697 :     int sum;
; 2698 :     xmlLinkPtr lk;
; 2699 :     xmlTextWriterStackEntry *p;
; 2700 : 
; 2701 :     if (writer == NULL)
; 2702 :         return -1;
; 2703 : 
; 2704 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 2705 :     if (lk == 0)

	test	eax, eax
	je	SHORT $LN11@xmlTextWri

; 2706 :         return -1;
; 2707 : 
; 2708 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 2709 :     if (p == 0)

	test	eax, eax
	je	SHORT $LN11@xmlTextWri

; 2710 :         return -1;
; 2711 : 
; 2712 :     sum = 0;
; 2713 :     switch (p->state) {

	cmp	DWORD PTR [eax+4], 6
	jne	SHORT $LN11@xmlTextWri

; 2714 :         case XML_TEXTWRITER_CDATA:
; 2715 :             count = xmlOutputBufferWriteString(writer->out, "]]>");

	push	OFFSET ??_C@_03MCHNFBAC@?$FN?$FN?$DO@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 8

; 2716 :             if (count < 0)

	test	edi, edi
	js	SHORT $LN11@xmlTextWri

; 2718 :             sum += count;
; 2719 :             break;
; 2720 :         default:
; 2721 :             return -1;
; 2722 :     }
; 2723 : 
; 2724 :     xmlListPopFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListPopFront
	add	esp, 4

; 2725 :     return sum;

	mov	eax, edi
	pop	edi

; 2726 : }

	pop	esi
	pop	ebp
	ret	0
$LN11@xmlTextWri:
	pop	edi

; 2717 :                 return -1;

	or	eax, -1

; 2726 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterEndCDATA ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartCDATA
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterStartCDATA PROC				; COMDAT

; 2616 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	$LN18@xmlTextWri

; 2617 :     int count;
; 2618 :     int sum;
; 2619 :     xmlLinkPtr lk;
; 2620 :     xmlTextWriterStackEntry *p;
; 2621 : 
; 2622 :     if (writer == NULL)
; 2623 :         return -1;
; 2624 : 
; 2625 :     sum = 0;

	push	DWORD PTR [esi+4]
	xor	edi, edi

; 2626 :     lk = xmlListFront(writer->nodes);

	call	_xmlListFront
	add	esp, 4

; 2627 :     if (lk != 0) {

	test	eax, eax
	je	SHORT $LN2@xmlTextWri

; 2628 :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ebx, eax
	add	esp, 4

; 2629 :         if (p != 0) {

	test	ebx, ebx
	je	SHORT $LN2@xmlTextWri

; 2630 :             switch (p->state) {

	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, 6
	ja	SHORT $LN18@xmlTextWri
	jmp	DWORD PTR $LN21@xmlTextWri[eax*4]
$LN8@xmlTextWri:

; 2631 :                 case XML_TEXTWRITER_NONE:
; 2632 : 		case XML_TEXTWRITER_TEXT:
; 2633 :                 case XML_TEXTWRITER_PI:
; 2634 :                 case XML_TEXTWRITER_PI_TEXT:
; 2635 :                     break;
; 2636 :                 case XML_TEXTWRITER_ATTRIBUTE:
; 2637 :                     count = xmlTextWriterEndAttribute(writer);

	push	esi
	call	_xmlTextWriterEndAttribute
	mov	edi, eax
	add	esp, 4

; 2638 :                     if (count < 0)

	test	edi, edi
	js	SHORT $LN18@xmlTextWri
$LN10@xmlTextWri:

; 2639 :                         return -1;
; 2640 :                     sum += count;
; 2641 :                     /* fallthrough */
; 2642 :                 case XML_TEXTWRITER_NAME:
; 2643 :                     /* Output namespace declarations */
; 2644 :                     count = xmlTextWriterOutputNSDecl(writer);

	push	esi
	call	_xmlTextWriterOutputNSDecl
	add	esp, 4

; 2645 :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN18@xmlTextWri

; 2646 :                         return -1;
; 2647 :                     sum += count;
; 2648 :                     count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2649 :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN18@xmlTextWri

; 2650 :                         return -1;
; 2651 :                     sum += count;

	add	edi, eax

; 2652 :                     p->state = XML_TEXTWRITER_TEXT;

	mov	DWORD PTR [ebx+4], 3
$LN2@xmlTextWri:

; 2656 :                                     "xmlTextWriterStartCDATA : CDATA not allowed in this context!\n");
; 2657 :                     return -1;
; 2658 :                 default:
; 2659 :                     return -1;
; 2660 :             }
; 2661 :         }
; 2662 :     }
; 2663 : 
; 2664 :     p = (xmlTextWriterStackEntry *)

	push	8
	call	DWORD PTR _xmlMalloc
	add	esp, 4

; 2665 :         xmlMalloc(sizeof(xmlTextWriterStackEntry));
; 2666 :     if (p == 0) {

	test	eax, eax
	jne	SHORT $LN15@xmlTextWri

; 2667 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CK@FMBLGDPB@xmlTextWriterStartCDATA?5?3?5out?5o@
	push	2

; 2681 : 
; 2682 :     return sum;
; 2683 : }

	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
$LN18@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN13@xmlTextWri:

; 2653 :                     break;
; 2654 :                 case XML_TEXTWRITER_CDATA:
; 2655 :                     xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0DO@LGFOPFHE@xmlTextWriterStartCDATA?5?3?5CDATA@
	push	1

; 2681 : 
; 2682 :     return sum;
; 2683 : }

	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN15@xmlTextWri:

; 2668 :                         "xmlTextWriterStartCDATA : out of memory!\n");
; 2669 :         return -1;
; 2670 :     }
; 2671 : 
; 2672 :     p->name = NULL;
; 2673 :     p->state = XML_TEXTWRITER_CDATA;
; 2674 : 
; 2675 :     xmlListPushFront(writer->nodes, p);

	push	eax
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 6
	push	DWORD PTR [esi+4]
	call	_xmlListPushFront

; 2676 : 
; 2677 :     count = xmlOutputBufferWriteString(writer->out, "<![CDATA[");

	push	OFFSET ??_C@_09BLLNCBLF@?$DM?$CB?$FLCDATA?$FL@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 16					; 00000010H

; 2678 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN18@xmlTextWri

; 2679 :         return -1;
; 2680 :     sum += count;

	add	eax, edi
	pop	edi

; 2681 : 
; 2682 :     return sum;
; 2683 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
	npad	1
$LN21@xmlTextWri:
	DD	$LN2@xmlTextWri
	DD	$LN10@xmlTextWri
	DD	$LN8@xmlTextWri
	DD	$LN2@xmlTextWri
	DD	$LN2@xmlTextWri
	DD	$LN2@xmlTextWri
	DD	$LN13@xmlTextWri
_xmlTextWriterStartCDATA ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWritePI
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_target$ = 12						; size = 4
_content$ = 16						; size = 4
_xmlTextWriterWritePI PROC				; COMDAT

; 2583 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _target$[ebp]
	mov	edi, DWORD PTR _writer$[ebp]
	push	edi
	call	_xmlTextWriterStartPI
	mov	esi, eax
	add	esp, 8
	cmp	esi, -1
	je	SHORT $LN7@xmlTextWri

; 2584 :     int count;
; 2585 :     int sum;
; 2586 : 
; 2587 :     sum = 0;
; 2588 :     count = xmlTextWriterStartPI(writer, target);
; 2589 :     if (count == -1)
; 2590 :         return -1;
; 2591 :     sum += count;
; 2592 :     if (content != 0) {

	mov	eax, DWORD PTR _content$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 2593 :         count = xmlTextWriterWriteString(writer, content);

	push	eax
	push	edi
	call	_xmlTextWriterWriteString
	add	esp, 8

; 2594 :         if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 2595 :             return -1;
; 2596 :         sum += count;

	add	esi, eax
$LN3@xmlTextWri:

; 2597 :     }
; 2598 :     count = xmlTextWriterEndPI(writer);

	push	edi
	call	_xmlTextWriterEndPI
	add	esp, 4

; 2599 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 2601 :     sum += count;

	pop	edi
	add	eax, esi

; 2602 : 
; 2603 :     return sum;
; 2604 : }

	pop	esi
	pop	ebp
	ret	0
$LN7@xmlTextWri:
	pop	edi

; 2600 :         return -1;

	or	eax, -1

; 2602 : 
; 2603 :     return sum;
; 2604 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWritePI ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatPI
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_target$ = 12						; size = 4
_format$ = 16						; size = 4
_argptr$ = 20						; size = 4
_xmlTextWriterWriteVFormatPI PROC			; COMDAT

; 2553 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 2554 :     int rc;
; 2555 :     xmlChar *buf;
; 2556 : 
; 2557 :     if (writer == NULL)
; 2558 :         return -1;
; 2559 : 
; 2560 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2561 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 2563 : 
; 2564 :     rc = xmlTextWriterWritePI(writer, target, buf);

	push	edi
	push	DWORD PTR _target$[ebp]
	push	esi
	call	_xmlTextWriterWritePI

; 2565 : 
; 2566 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 2567 :     return rc;

	mov	eax, esi
	pop	edi

; 2568 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 2562 :         return -1;

	or	eax, -1

; 2568 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatPI ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatPI
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_target$ = 12						; size = 4
_format$ = 16						; size = 4
_xmlTextWriterWriteFormatPI PROC			; COMDAT

; 2526 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 2557 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 2527 :     int rc;
; 2528 :     va_list ap;
; 2529 : 
; 2530 :     va_start(ap, format);
; 2531 : 
; 2532 :     rc = xmlTextWriterWriteVFormatPI(writer, target, format, ap);
; 2533 : 
; 2534 :     va_end(ap);
; 2535 :     return rc;

	or	eax, -1
	pop	esi

; 2536 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 2560 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2561 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 2527 :     int rc;
; 2528 :     va_list ap;
; 2529 : 
; 2530 :     va_start(ap, format);
; 2531 : 
; 2532 :     rc = xmlTextWriterWriteVFormatPI(writer, target, format, ap);
; 2533 : 
; 2534 :     va_end(ap);
; 2535 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 2536 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 2564 :     rc = xmlTextWriterWritePI(writer, target, buf);

	push	edi
	push	DWORD PTR _target$[ebp]
	push	esi
	call	_xmlTextWriterWritePI

; 2565 : 
; 2566 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 2527 :     int rc;
; 2528 :     va_list ap;
; 2529 : 
; 2530 :     va_start(ap, format);
; 2531 : 
; 2532 :     rc = xmlTextWriterWriteVFormatPI(writer, target, format, ap);
; 2533 : 
; 2534 :     va_end(ap);
; 2535 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 2536 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatPI ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndPI
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndPI PROC				; COMDAT

; 2471 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN9@xmlTextWri

; 2472 :     int count;
; 2473 :     int sum;
; 2474 :     xmlLinkPtr lk;
; 2475 :     xmlTextWriterStackEntry *p;
; 2476 : 
; 2477 :     if (writer == NULL)
; 2478 :         return -1;
; 2479 : 
; 2480 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 2481 :     if (lk == 0)

	test	eax, eax
	je	SHORT $LN13@xmlTextWri

; 2482 :         return 0;
; 2483 : 
; 2484 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 2485 :     if (p == 0)

	test	eax, eax
	je	SHORT $LN13@xmlTextWri

; 2487 : 
; 2488 :     sum = 0;
; 2489 :     switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	add	eax, -4					; fffffffcH
	cmp	eax, 1
	ja	SHORT $LN9@xmlTextWri

; 2490 :         case XML_TEXTWRITER_PI:
; 2491 :         case XML_TEXTWRITER_PI_TEXT:
; 2492 :             count = xmlOutputBufferWriteString(writer->out, "?>");

	push	OFFSET ??_C@_02GOEMJPDN@?$DP?$DO@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 8

; 2493 :             if (count < 0)

	test	edi, edi
	js	SHORT $LN9@xmlTextWri

; 2499 :     }
; 2500 : 
; 2501 :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN10@xmlTextWri

; 2502 :         count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2503 : 	if (count < 0)

	test	eax, eax
	js	SHORT $LN9@xmlTextWri

; 2504 : 	return -1;
; 2505 :         sum += count;

	add	edi, eax
$LN10@xmlTextWri:

; 2506 :     }
; 2507 : 
; 2508 :     xmlListPopFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListPopFront
	add	esp, 4

; 2509 :     return sum;

	mov	eax, edi
	pop	edi

; 2510 : }

	pop	esi
	pop	ebp
	ret	0
$LN13@xmlTextWri:
	pop	edi

; 2486 :         return 0;

	xor	eax, eax

; 2510 : }

	pop	esi
	pop	ebp
	ret	0
$LN9@xmlTextWri:
	pop	edi

; 2494 :                 return -1;
; 2495 :             sum += count;
; 2496 :             break;
; 2497 :         default:
; 2498 :             return -1;

	or	eax, -1

; 2510 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterEndPI ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartPI
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_target$ = 12						; size = 4
_xmlTextWriterStartPI PROC				; COMDAT

; 2375 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 2376 :     int count;
; 2377 :     int sum;
; 2378 :     xmlLinkPtr lk;
; 2379 :     xmlTextWriterStackEntry *p;
; 2380 : 
; 2381 :     if ((writer == NULL) || (target == NULL) || (*target == '\0'))

	mov	eax, DWORD PTR _target$[ebp]
	test	eax, eax
	je	SHORT $LN5@xmlTextWri
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN5@xmlTextWri

; 2382 :         return -1;
; 2383 : 
; 2384 :     if (xmlStrcasecmp(target, (const xmlChar *) "xml") == 0) {

	push	OFFSET ??_C@_03PJHHNEEI@xml@
	push	eax
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@xmlTextWri

; 2385 :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0FG@KFBLHCOM@xmlTextWriterStartPI?5?3?5target?5n@

; 2457 : 
; 2458 :     return sum;
; 2459 : }

	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
$LN5@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN6@xmlTextWri:

; 2386 :                         "xmlTextWriterStartPI : target name [Xx][Mm][Ll] is reserved for xml standardization!\n");
; 2387 :         return -1;
; 2388 :     }
; 2389 : 
; 2390 :     sum = 0;
; 2391 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	xor	edi, edi
	call	_xmlListFront
	add	esp, 4

; 2392 :     if (lk != 0) {

	test	eax, eax
	je	SHORT $LN2@xmlTextWri

; 2393 :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ebx, eax
	add	esp, 4

; 2394 :         if (p != 0) {

	test	ebx, ebx
	je	SHORT $LN2@xmlTextWri

; 2395 :             switch (p->state) {

	mov	eax, DWORD PTR [ebx+4]
	cmp	eax, 7
	ja	SHORT $LN5@xmlTextWri
	jmp	DWORD PTR $LN25@xmlTextWri[eax*4]
$LN9@xmlTextWri:

; 2396 :                 case XML_TEXTWRITER_ATTRIBUTE:
; 2397 :                     count = xmlTextWriterEndAttribute(writer);

	push	esi
	call	_xmlTextWriterEndAttribute
	mov	edi, eax
	add	esp, 4

; 2398 :                     if (count < 0)

	test	edi, edi
	js	SHORT $LN5@xmlTextWri
$LN11@xmlTextWri:

; 2399 :                         return -1;
; 2400 :                     sum += count;
; 2401 :                     /* fallthrough */
; 2402 :                 case XML_TEXTWRITER_NAME:
; 2403 :                     /* Output namespace declarations */
; 2404 :                     count = xmlTextWriterOutputNSDecl(writer);

	push	esi
	call	_xmlTextWriterOutputNSDecl
	add	esp, 4

; 2405 :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 2406 :                         return -1;
; 2407 :                     sum += count;
; 2408 :                     count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2409 :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 2410 :                         return -1;
; 2411 :                     sum += count;

	add	edi, eax

; 2412 :                     p->state = XML_TEXTWRITER_TEXT;

	mov	DWORD PTR [ebx+4], 3
$LN2@xmlTextWri:

; 2421 :                                     "xmlTextWriterStartPI : nested PI!\n");
; 2422 :                     return -1;
; 2423 :                 default:
; 2424 :                     return -1;
; 2425 :             }
; 2426 :         }
; 2427 :     }
; 2428 : 
; 2429 :     p = (xmlTextWriterStackEntry *)

	push	8
	call	DWORD PTR _xmlMalloc
	mov	ebx, eax
	add	esp, 4

; 2430 :         xmlMalloc(sizeof(xmlTextWriterStackEntry));
; 2431 :     if (p == 0) {

	test	ebx, ebx
	jne	SHORT $LN17@xmlTextWri

; 2432 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CH@IKGNFAGK@xmlTextWriterStartPI?5?3?5out?5of?5m@
	push	2

; 2457 : 
; 2458 :     return sum;
; 2459 : }

	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN15@xmlTextWri:

; 2413 :                     break;
; 2414 :                 case XML_TEXTWRITER_NONE:
; 2415 :                 case XML_TEXTWRITER_TEXT:
; 2416 :                 case XML_TEXTWRITER_DTD:
; 2417 :                     break;
; 2418 :                 case XML_TEXTWRITER_PI:
; 2419 :                 case XML_TEXTWRITER_PI_TEXT:
; 2420 :                     xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0CD@KBFLMPAO@xmlTextWriterStartPI?5?3?5nested?5P@

; 2457 : 
; 2458 :     return sum;
; 2459 : }

	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN17@xmlTextWri:

; 2433 :                         "xmlTextWriterStartPI : out of memory!\n");
; 2434 :         return -1;
; 2435 :     }
; 2436 : 
; 2437 :     p->name = xmlStrdup(target);

	push	DWORD PTR _target$[ebp]
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [ebx], eax

; 2438 :     if (p->name == 0) {

	test	eax, eax
	jne	SHORT $LN18@xmlTextWri

; 2439 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CH@IKGNFAGK@xmlTextWriterStartPI?5?3?5out?5of?5m@
	push	2
	push	esi
	call	_xmlWriterErrMsg

; 2440 :                         "xmlTextWriterStartPI : out of memory!\n");
; 2441 :         xmlFree(p);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 2457 : 
; 2458 :     return sum;
; 2459 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN18@xmlTextWri:

; 2442 :         return -1;
; 2443 :     }
; 2444 :     p->state = XML_TEXTWRITER_PI;

	mov	DWORD PTR [ebx+4], 4

; 2445 : 
; 2446 :     xmlListPushFront(writer->nodes, p);

	push	ebx
	push	DWORD PTR [esi+4]
	call	_xmlListPushFront

; 2447 : 
; 2448 :     count = xmlOutputBufferWriteString(writer->out, "<?");

	push	OFFSET ??_C@_02HFBBBACF@?$DM?$DP@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 16					; 00000010H

; 2449 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 2450 :         return -1;
; 2451 :     sum += count;
; 2452 :     count =

	push	DWORD PTR [ebx]
	add	edi, eax
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 2453 :         xmlOutputBufferWriteString(writer->out, (const char *) p->name);
; 2454 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 2455 :         return -1;
; 2456 :     sum += count;

	add	eax, edi
	pop	edi

; 2457 : 
; 2458 :     return sum;
; 2459 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
	npad	1
$LN25@xmlTextWri:
	DD	$LN2@xmlTextWri
	DD	$LN11@xmlTextWri
	DD	$LN9@xmlTextWri
	DD	$LN2@xmlTextWri
	DD	$LN15@xmlTextWri
	DD	$LN15@xmlTextWri
	DD	$LN5@xmlTextWri
	DD	$LN2@xmlTextWri
_xmlTextWriterStartPI ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteAttributeNS
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_prefix$ = 12						; size = 4
_name$ = 16						; size = 4
_namespaceURI$ = 20					; size = 4
_content$ = 24						; size = 4
_xmlTextWriterWriteAttributeNS PROC			; COMDAT

; 2134 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN3@xmlTextWri

; 2135 :     int count;
; 2136 :     int sum;
; 2137 : 
; 2138 :     if ((writer == NULL) || (name == NULL) || (*name == '\0'))

	mov	eax, DWORD PTR _name$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN3@xmlTextWri

; 2140 : 
; 2141 :     sum = 0;
; 2142 :     count = xmlTextWriterStartAttributeNS(writer, prefix, name, namespaceURI);

	push	DWORD PTR _namespaceURI$[ebp]
	push	eax
	push	DWORD PTR _prefix$[ebp]
	push	esi
	call	_xmlTextWriterStartAttributeNS
	mov	edi, eax
	add	esp, 16					; 00000010H

; 2143 :     if (count < 0)

	test	edi, edi
	js	SHORT $LN3@xmlTextWri

; 2144 :         return -1;
; 2145 :     sum += count;
; 2146 :     count = xmlTextWriterWriteString(writer, content);

	push	DWORD PTR _content$[ebp]
	push	esi
	call	_xmlTextWriterWriteString
	add	esp, 8

; 2147 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN3@xmlTextWri

; 2148 :         return -1;
; 2149 :     sum += count;
; 2150 :     count = xmlTextWriterEndAttribute(writer);

	push	esi
	add	edi, eax
	call	_xmlTextWriterEndAttribute
	add	esp, 4

; 2151 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN3@xmlTextWri

; 2152 :         return -1;
; 2153 :     sum += count;

	add	eax, edi
	pop	edi

; 2154 : 
; 2155 :     return sum;
; 2156 : }

	pop	esi
	pop	ebp
	ret	0
$LN3@xmlTextWri:
	pop	edi

; 2139 :         return -1;

	or	eax, -1

; 2154 : 
; 2155 :     return sum;
; 2156 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteAttributeNS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatAttributeNS
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_prefix$ = 12						; size = 4
_name$ = 16						; size = 4
_namespaceURI$ = 20					; size = 4
_format$ = 24						; size = 4
_argptr$ = 28						; size = 4
_xmlTextWriterWriteVFormatAttributeNS PROC		; COMDAT

; 2099 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 2100 :     int rc;
; 2101 :     xmlChar *buf;
; 2102 : 
; 2103 :     if (writer == NULL)
; 2104 :         return -1;
; 2105 : 
; 2106 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2107 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 2109 : 
; 2110 :     rc = xmlTextWriterWriteAttributeNS(writer, prefix, name, namespaceURI,

	push	edi
	push	DWORD PTR _namespaceURI$[ebp]
	push	DWORD PTR _name$[ebp]
	push	DWORD PTR _prefix$[ebp]
	push	esi
	call	_xmlTextWriterWriteAttributeNS

; 2111 :                                        buf);
; 2112 : 
; 2113 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 24					; 00000018H

; 2114 :     return rc;

	mov	eax, esi
	pop	edi

; 2115 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 2108 :         return -1;

	or	eax, -1

; 2115 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatAttributeNS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatAttributeNS
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_prefix$ = 12						; size = 4
_name$ = 16						; size = 4
_namespaceURI$ = 20					; size = 4
_format$ = 24						; size = 4
_xmlTextWriterWriteFormatAttributeNS PROC		; COMDAT

; 2067 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 2103 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 2068 :     int rc;
; 2069 :     va_list ap;
; 2070 : 
; 2071 :     va_start(ap, format);
; 2072 : 
; 2073 :     rc = xmlTextWriterWriteVFormatAttributeNS(writer, prefix, name,
; 2074 :                                               namespaceURI, format, ap);
; 2075 : 
; 2076 :     va_end(ap);
; 2077 :     return rc;

	or	eax, -1
	pop	esi

; 2078 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 2106 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2107 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 2068 :     int rc;
; 2069 :     va_list ap;
; 2070 : 
; 2071 :     va_start(ap, format);
; 2072 : 
; 2073 :     rc = xmlTextWriterWriteVFormatAttributeNS(writer, prefix, name,
; 2074 :                                               namespaceURI, format, ap);
; 2075 : 
; 2076 :     va_end(ap);
; 2077 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 2078 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 2110 :     rc = xmlTextWriterWriteAttributeNS(writer, prefix, name, namespaceURI,

	push	edi
	push	DWORD PTR _namespaceURI$[ebp]
	push	DWORD PTR _name$[ebp]
	push	DWORD PTR _prefix$[ebp]
	push	esi
	call	_xmlTextWriterWriteAttributeNS

; 2111 :                                        buf);
; 2112 : 
; 2113 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 24					; 00000018H

; 2068 :     int rc;
; 2069 :     va_list ap;
; 2070 : 
; 2071 :     va_start(ap, format);
; 2072 : 
; 2073 :     rc = xmlTextWriterWriteVFormatAttributeNS(writer, prefix, name,
; 2074 :                                               namespaceURI, format, ap);
; 2075 : 
; 2076 :     va_end(ap);
; 2077 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 2078 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatAttributeNS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteAttribute
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_content$ = 16						; size = 4
_xmlTextWriterWriteAttribute PROC			; COMDAT

; 2027 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _name$[ebp]
	mov	edi, DWORD PTR _writer$[ebp]
	push	edi
	call	_xmlTextWriterStartAttribute
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	js	SHORT $LN40@xmlTextWri

; 2028 :     int count;
; 2029 :     int sum;
; 2030 : 
; 2031 :     sum = 0;
; 2032 :     count = xmlTextWriterStartAttribute(writer, name);
; 2033 :     if (count < 0)
; 2034 :         return -1;
; 2035 :     sum += count;
; 2036 :     count = xmlTextWriterWriteString(writer, content);

	push	DWORD PTR _content$[ebp]
	push	edi
	call	_xmlTextWriterWriteString
	add	esp, 8

; 2037 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN40@xmlTextWri

; 2038 :         return -1;
; 2039 :     sum += count;
; 2040 :     count = xmlTextWriterEndAttribute(writer);

	push	edi
	add	esi, eax
	call	_xmlTextWriterEndAttribute
	add	esp, 4

; 2041 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN40@xmlTextWri

; 2043 :     sum += count;

	pop	edi
	add	eax, esi

; 2044 : 
; 2045 :     return sum;
; 2046 : }

	pop	esi
	pop	ebp
	ret	0
$LN40@xmlTextWri:
	pop	edi

; 2042 :         return -1;

	or	eax, -1

; 2044 : 
; 2045 :     return sum;
; 2046 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatAttribute
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_format$ = 16						; size = 4
_argptr$ = 20						; size = 4
_xmlTextWriterWriteVFormatAttribute PROC		; COMDAT

; 1997 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 1998 :     int rc;
; 1999 :     xmlChar *buf;
; 2000 : 
; 2001 :     if (writer == NULL)
; 2002 :         return -1;
; 2003 : 
; 2004 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2005 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 2007 : 
; 2008 :     rc = xmlTextWriterWriteAttribute(writer, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteAttribute

; 2009 : 
; 2010 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 2011 :     return rc;

	mov	eax, esi
	pop	edi

; 2012 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 2006 :         return -1;

	or	eax, -1

; 2012 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatAttribute
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_format$ = 16						; size = 4
_xmlTextWriterWriteFormatAttribute PROC			; COMDAT

; 1970 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 2001 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 1971 :     int rc;
; 1972 :     va_list ap;
; 1973 : 
; 1974 :     va_start(ap, format);
; 1975 : 
; 1976 :     rc = xmlTextWriterWriteVFormatAttribute(writer, name, format, ap);
; 1977 : 
; 1978 :     va_end(ap);
; 1979 :     return rc;

	or	eax, -1
	pop	esi

; 1980 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 2004 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2005 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 1971 :     int rc;
; 1972 :     va_list ap;
; 1973 : 
; 1974 :     va_start(ap, format);
; 1975 : 
; 1976 :     rc = xmlTextWriterWriteVFormatAttribute(writer, name, format, ap);
; 1977 : 
; 1978 :     va_end(ap);
; 1979 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 1980 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 2008 :     rc = xmlTextWriterWriteAttribute(writer, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteAttribute

; 2009 : 
; 2010 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 1971 :     int rc;
; 1972 :     va_list ap;
; 1973 : 
; 1974 :     va_start(ap, format);
; 1975 : 
; 1976 :     rc = xmlTextWriterWriteVFormatAttribute(writer, name, format, ap);
; 1977 : 
; 1978 :     va_end(ap);
; 1979 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 1980 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndAttribute
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndAttribute PROC				; COMDAT

; 1918 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN11@xmlTextWri

; 1919 :     int count;
; 1920 :     int sum;
; 1921 :     xmlLinkPtr lk;
; 1922 :     xmlTextWriterStackEntry *p;
; 1923 : 
; 1924 :     if (writer == NULL)
; 1925 :         return -1;
; 1926 : 
; 1927 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 1928 :     if (lk == 0) {

	test	eax, eax
	je	SHORT $LN11@xmlTextWri

; 1929 :         return -1;
; 1930 :     }
; 1931 : 
; 1932 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 1933 :     if (p == 0) {

	test	eax, eax
	je	SHORT $LN11@xmlTextWri

; 1934 :         return -1;
; 1935 :     }
; 1936 : 
; 1937 :     sum = 0;
; 1938 :     switch (p->state) {

	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 2
	jne	SHORT $LN11@xmlTextWri

; 1939 :         case XML_TEXTWRITER_ATTRIBUTE:
; 1940 :             p->state = XML_TEXTWRITER_NAME;

	mov	DWORD PTR [eax+4], 1

; 1941 : 
; 1942 :             count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	eax, DWORD PTR [esi+28]
	push	eax
	push	1
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1943 :             if (count < 0) {

	test	eax, eax
	jns	SHORT $LN1@xmlTextWri
$LN11@xmlTextWri:

; 1944 :                 return -1;

	or	eax, -1
$LN1@xmlTextWri:
	pop	esi

; 1945 :             }
; 1946 :             sum += count;
; 1947 :             break;
; 1948 :         default:
; 1949 :             return -1;
; 1950 :     }
; 1951 : 
; 1952 :     return sum;
; 1953 : }

	pop	ebp
	ret	0
_xmlTextWriterEndAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartAttributeNS
_TEXT	SEGMENT
_nsentry$1 = -12					; size = 12
_curns$1$ = 8						; size = 4
_writer$ = 8						; size = 4
_prefix$ = 12						; size = 4
_name$ = 16						; size = 4
_namespaceURI$ = 20					; size = 4
_xmlTextWriterStartAttributeNS PROC			; COMDAT

; 1831 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	push	ebx
	push	esi
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _writer$[ebp]
	test	edi, edi
	je	$LN3@xmlTextWri

; 1832 :     int count;
; 1833 :     int sum;
; 1834 :     xmlChar *buf;
; 1835 :     xmlTextWriterNsStackEntry *p;
; 1836 : 
; 1837 :     if ((writer == NULL) || (name == NULL) || (*name == '\0'))

	mov	ebx, DWORD PTR _name$[ebp]
	test	ebx, ebx
	je	$LN3@xmlTextWri
	cmp	BYTE PTR [ebx], 0
	je	$LN3@xmlTextWri

; 1838 :         return -1;
; 1839 : 
; 1840 :     /* Handle namespace first in case of error */
; 1841 :     if (namespaceURI != 0) {

	cmp	DWORD PTR _namespaceURI$[ebp], 0
	mov	esi, DWORD PTR _prefix$[ebp]
	je	$LN9@xmlTextWri

; 1842 :         xmlTextWriterNsStackEntry nsentry, *curns;
; 1843 : 
; 1844 :         buf = xmlStrdup(BAD_CAST "xmlns");

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	call	_xmlStrdup
	add	esp, 4
	mov	ebx, eax

; 1845 :         if (prefix != 0) {

	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 1846 :             buf = xmlStrcat(buf, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	push	ebx
	call	_xmlStrcat

; 1847 :             buf = xmlStrcat(buf, prefix);

	push	esi
	push	eax
	call	_xmlStrcat
	add	esp, 16					; 00000010H
	mov	ebx, eax
$LN5@xmlTextWri:

; 1848 :         }
; 1849 : 
; 1850 :         nsentry.prefix = buf;
; 1851 :         nsentry.uri = (xmlChar *)namespaceURI;

	mov	eax, DWORD PTR _namespaceURI$[ebp]

; 1852 :         nsentry.elem = xmlListFront(writer->nodes);

	push	DWORD PTR [edi+4]
	mov	DWORD PTR _nsentry$1[ebp], ebx
	mov	DWORD PTR _nsentry$1[ebp+4], eax
	call	_xmlListFront
	mov	DWORD PTR _nsentry$1[ebp+8], eax

; 1853 : 
; 1854 :         curns = (xmlTextWriterNsStackEntry *)xmlListSearch(writer->nsstack,

	lea	eax, DWORD PTR _nsentry$1[ebp]
	push	eax
	push	DWORD PTR [edi+8]
	call	_xmlListSearch
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _curns$1$[ebp], eax

; 1855 :                                                            (void *)&nsentry);
; 1856 :         if ((curns != NULL)) {

	test	eax, eax
	je	SHORT $LN8@xmlTextWri

; 1857 :             xmlFree(buf);

	push	ebx
	call	DWORD PTR _xmlFree

; 1858 :             if (xmlStrcmp(curns->uri, namespaceURI) == 0) {

	mov	eax, DWORD PTR _curns$1$[ebp]
	push	DWORD PTR _namespaceURI$[ebp]
	push	DWORD PTR [eax+4]
	call	_xmlStrcmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	$LN15@xmlTextWri
$LN3@xmlTextWri:
	pop	edi

; 1906 : }

	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@xmlTextWri:

; 1859 :                 /* Namespace already defined on element skip */
; 1860 :                 buf = NULL;
; 1861 :             } else {
; 1862 :                 /* Prefix mismatch so error out */
; 1863 :                 return -1;
; 1864 :             }
; 1865 :         }
; 1866 : 
; 1867 :         /* Do not add namespace decl to list - it is already there */
; 1868 :         if (buf != NULL) {

	test	ebx, ebx
	je	SHORT $LN15@xmlTextWri

; 1869 :             p = (xmlTextWriterNsStackEntry *)

	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	mov	esi, eax
	add	esp, 4

; 1870 :                 xmlMalloc(sizeof(xmlTextWriterNsStackEntry));
; 1871 :             if (p == 0) {

	test	esi, esi
	jne	SHORT $LN10@xmlTextWri

; 1872 :                 xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0DA@LBMIIMOH@xmlTextWriterStartAttributeNS?5?3@
	push	2
	push	edi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 1906 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@xmlTextWri:

; 1873 : 								        "xmlTextWriterStartAttributeNS : out of memory!\n");
; 1874 :                 return -1;
; 1875 :             }
; 1876 : 
; 1877 :             p->prefix = buf;
; 1878 :             p->uri = xmlStrdup(namespaceURI);

	push	DWORD PTR _namespaceURI$[ebp]
	mov	DWORD PTR [esi], ebx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [esi+4], eax

; 1879 :             if (p->uri == 0) {

	test	eax, eax
	jne	SHORT $LN11@xmlTextWri

; 1880 :                 xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0DA@LBMIIMOH@xmlTextWriterStartAttributeNS?5?3@
	push	2
	push	edi
	call	_xmlWriterErrMsg

; 1881 :                         "xmlTextWriterStartAttributeNS : out of memory!\n");
; 1882 :                 xmlFree(p);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 1906 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@xmlTextWri:

; 1883 :                 return -1;
; 1884 :             }
; 1885 :             p->elem = xmlListFront(writer->nodes);

	push	DWORD PTR [edi+4]
	call	_xmlListFront
	mov	DWORD PTR [esi+8], eax

; 1886 : 
; 1887 :             xmlListPushFront(writer->nsstack, p);

	push	esi
	push	DWORD PTR [edi+8]
	call	_xmlListPushFront
	mov	esi, DWORD PTR _prefix$[ebp]
	add	esp, 12					; 0000000cH
$LN15@xmlTextWri:

; 1888 :         }
; 1889 :     }
; 1890 : 
; 1891 :     buf = NULL;

	mov	ebx, DWORD PTR _name$[ebp]
$LN9@xmlTextWri:
	xor	eax, eax

; 1892 :     if (prefix != 0) {

	test	esi, esi
	je	SHORT $LN12@xmlTextWri

; 1893 :         buf = xmlStrdup(prefix);

	push	esi
	call	_xmlStrdup

; 1894 :         buf = xmlStrcat(buf, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	push	eax
	call	_xmlStrcat
	add	esp, 12					; 0000000cH
$LN12@xmlTextWri:

; 1895 :     }
; 1896 :     buf = xmlStrcat(buf, name);

	push	ebx
	push	eax
	call	_xmlStrcat
	mov	esi, eax

; 1897 : 
; 1898 :     sum = 0;
; 1899 :     count = xmlTextWriterStartAttribute(writer, buf);

	push	esi
	push	edi
	call	_xmlTextWriterStartAttribute

; 1900 :     xmlFree(buf);

	push	esi
	mov	edi, eax
	call	DWORD PTR _xmlFree
	add	esp, 20					; 00000014H

; 1901 :     if (count < 0)

	test	edi, edi
	js	$LN3@xmlTextWri

; 1902 :         return -1;
; 1903 :     sum += count;
; 1904 : 
; 1905 :     return sum;

	mov	eax, edi
	pop	edi

; 1906 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextWriterStartAttributeNS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartAttribute
_TEXT	SEGMENT
_p$1$ = 8						; size = 4
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlTextWriterStartAttribute PROC			; COMDAT

; 1763 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	$LN5@xmlTextWri

; 1764 :     int count;
; 1765 :     int sum;
; 1766 :     xmlLinkPtr lk;
; 1767 :     xmlTextWriterStackEntry *p;
; 1768 : 
; 1769 :     if ((writer == NULL) || (name == NULL) || (*name == '\0'))

	mov	ebx, DWORD PTR _name$[ebp]
	test	ebx, ebx
	je	$LN5@xmlTextWri
	cmp	BYTE PTR [ebx], 0
	je	$LN5@xmlTextWri

; 1770 :         return -1;
; 1771 : 
; 1772 :     sum = 0;
; 1773 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	xor	edi, edi
	call	_xmlListFront
	add	esp, 4

; 1774 :     if (lk == 0)

	test	eax, eax
	je	$LN5@xmlTextWri

; 1775 :         return -1;
; 1776 : 
; 1777 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4
	mov	DWORD PTR _p$1$[ebp], eax

; 1778 :     if (p == 0)

	test	eax, eax
	je	SHORT $LN5@xmlTextWri

; 1779 :         return -1;
; 1780 : 
; 1781 :     switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 1
	je	SHORT $LN10@xmlTextWri
	sub	eax, 1
	jne	SHORT $LN5@xmlTextWri

; 1782 :         case XML_TEXTWRITER_ATTRIBUTE:
; 1783 :             count = xmlTextWriterEndAttribute(writer);

	push	esi
	call	_xmlTextWriterEndAttribute
	mov	edi, eax
	add	esp, 4

; 1784 :             if (count < 0)

	test	edi, edi
	js	SHORT $LN5@xmlTextWri
$LN10@xmlTextWri:

; 1785 :                 return -1;
; 1786 :             sum += count;
; 1787 :             /* fallthrough */
; 1788 :         case XML_TEXTWRITER_NAME:
; 1789 :             count = xmlOutputBufferWriteString(writer->out, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1790 :             if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 1791 :                 return -1;
; 1792 :             sum += count;
; 1793 :             count =

	push	ebx
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1794 :                 xmlOutputBufferWriteString(writer->out,
; 1795 :                                            (const char *) name);
; 1796 :             if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 1797 :                 return -1;
; 1798 :             sum += count;
; 1799 :             count = xmlOutputBufferWriteString(writer->out, "=");

	push	OFFSET ??_C@_01NEMOKFLO@?$DN@
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1800 :             if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 1801 :                 return -1;
; 1802 :             sum += count;

	add	edi, eax

; 1803 :             count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	eax, DWORD PTR [esi+28]
	push	eax
	push	1
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	mov	ecx, eax
	add	esp, 12					; 0000000cH

; 1804 :             if (count < 0)

	test	ecx, ecx
	js	SHORT $LN5@xmlTextWri

; 1805 :                 return -1;
; 1806 :             sum += count;
; 1807 :             p->state = XML_TEXTWRITER_ATTRIBUTE;

	mov	eax, DWORD PTR _p$1$[ebp]
	mov	DWORD PTR [eax+4], 2
	lea	eax, DWORD PTR [ecx+edi]
	pop	edi

; 1808 :             break;
; 1809 :         default:
; 1810 :             return -1;
; 1811 :     }
; 1812 : 
; 1813 :     return sum;
; 1814 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterStartAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteBinHex
_TEXT	SEGMENT
_sum$1$ = -8						; size = 4
_data$1$ = -4						; size = 4
_out$1$ = 8						; size = 4
_writer$ = 8						; size = 4
_data$ = 12						; size = 4
_start$ = 16						; size = 4
_len$ = 20						; size = 4
_xmlTextWriterWriteBinHex PROC				; COMDAT

; 1718 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	push	ebx
	push	esi
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	$LN3@xmlTextWri

; 1719 :     int count;
; 1720 :     int sum;
; 1721 :     xmlLinkPtr lk;
; 1722 :     xmlTextWriterStackEntry *p;
; 1723 : 
; 1724 :     if ((writer == NULL) || (data == NULL) || (start < 0) || (len < 0))

	mov	edi, DWORD PTR _data$[ebp]
	test	edi, edi
	je	$LN3@xmlTextWri
	cmp	DWORD PTR _start$[ebp], 0
	jl	$LN3@xmlTextWri
	mov	ebx, DWORD PTR _len$[ebp]
	test	ebx, ebx
	js	$LN3@xmlTextWri

; 1725 :         return -1;
; 1726 : 
; 1727 :     sum = 0;
; 1728 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	mov	DWORD PTR _sum$1$[ebp], 0
	call	_xmlListFront
	add	esp, 4

; 1729 :     if (lk != 0) {

	test	eax, eax
	je	SHORT $LN5@xmlTextWri

; 1730 :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 1731 :         if (p != 0) {

	test	eax, eax
	je	SHORT $LN5@xmlTextWri

; 1732 :             count = xmlTextWriterHandleStateDependencies(writer, p);

	push	eax
	push	esi
	call	_xmlTextWriterHandleStateDependencies
	add	esp, 8
	mov	DWORD PTR _sum$1$[ebp], eax

; 1733 :             if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri
$LN5@xmlTextWri:

; 1734 :                 return -1;
; 1735 :             sum += count;
; 1736 :         }
; 1737 :     }
; 1738 : 
; 1739 :     if (writer->indent)

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN7@xmlTextWri

; 1740 :         writer->doindent = 0;

	mov	DWORD PTR [esi+20], 0
$LN7@xmlTextWri:

; 1741 : 
; 1742 :     count =

	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [esi]
	add	eax, edi
	mov	DWORD PTR _data$1$[ebp], eax
	mov	DWORD PTR _out$1$[ebp], ecx

; 1681 :     if ((out == NULL) || (data == NULL) || (len < 0)) {

	test	ecx, ecx
	je	SHORT $LN3@xmlTextWri
	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 1682 :         return -1;
; 1683 :     }
; 1684 : 
; 1685 :     sum = 0;

	xor	esi, esi

; 1686 :     for (i = 0; i < len; i++) {

	xor	edi, edi
	test	ebx, ebx
	jle	SHORT $LN8@xmlTextWri
$LL13@xmlTextWri:

; 1687 :         count =

	movzx	eax, BYTE PTR [edi+eax]
	shr	eax, 4
	add	eax, OFFSET ?hex@?1??xmlOutputBufferWriteBinHex@@9@9
	push	eax
	push	1
	push	ecx
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1688 :             xmlOutputBufferWrite(out, 1,
; 1689 :                                  (const char *) &hex[data[i] >> 4]);
; 1690 :         if (count == -1)

	cmp	eax, -1
	je	SHORT $LN3@xmlTextWri

; 1691 :             return -1;
; 1692 :         sum += count;

	add	esi, eax

; 1693 :         count =

	mov	eax, DWORD PTR _data$1$[ebp]
	movzx	eax, BYTE PTR [edi+eax]
	and	eax, 15					; 0000000fH
	add	eax, OFFSET ?hex@?1??xmlOutputBufferWriteBinHex@@9@9
	push	eax
	push	1
	push	DWORD PTR _out$1$[ebp]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1694 :             xmlOutputBufferWrite(out, 1,
; 1695 :                                  (const char *) &hex[data[i] & 0xF]);
; 1696 :         if (count == -1)

	cmp	eax, -1
	je	SHORT $LN3@xmlTextWri

; 1697 :             return -1;
; 1698 :         sum += count;

	mov	ecx, DWORD PTR _out$1$[ebp]
	add	esi, eax
	mov	eax, DWORD PTR _data$1$[ebp]
	inc	edi
	cmp	edi, ebx
	jl	SHORT $LL13@xmlTextWri

; 1743 :         xmlOutputBufferWriteBinHex(writer->out, len,
; 1744 :                                    (unsigned char *) data + start);
; 1745 :     if (count < 0)

	test	esi, esi
	js	SHORT $LN3@xmlTextWri
$LN8@xmlTextWri:

; 1746 :         return -1;
; 1747 :     sum += count;

	mov	eax, DWORD PTR _sum$1$[ebp]
	pop	edi
	add	eax, esi

; 1748 : 
; 1749 :     return sum;
; 1750 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextWriterWriteBinHex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteBase64
_TEXT	SEGMENT
_data$1$ = -24						; size = 4
_sum$1$ = -20						; size = 4
_out$1$ = -16						; size = 4
_linelen$1$ = -12					; size = 4
_sum$1$ = -8						; size = 4
_ogroup$1 = -4						; size = 4
_igroup$2 = 8						; size = 3
_writer$ = 8						; size = 4
_data$ = 12						; size = 4
_start$ = 16						; size = 4
_len$ = 20						; size = 4
_xmlTextWriterWriteBase64 PROC				; COMDAT

; 1625 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	push	ebx
	push	esi
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	$LN3@xmlTextWri

; 1626 :     int count;
; 1627 :     int sum;
; 1628 :     xmlLinkPtr lk;
; 1629 :     xmlTextWriterStackEntry *p;
; 1630 : 
; 1631 :     if ((writer == NULL) || (data == NULL) || (start < 0) || (len < 0))

	mov	edi, DWORD PTR _data$[ebp]
	test	edi, edi
	je	$LN3@xmlTextWri
	cmp	DWORD PTR _start$[ebp], 0
	jl	$LN3@xmlTextWri
	mov	ebx, DWORD PTR _len$[ebp]
	test	ebx, ebx
	js	$LN3@xmlTextWri

; 1632 :         return -1;
; 1633 : 
; 1634 :     sum = 0;
; 1635 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	mov	DWORD PTR _sum$1$[ebp], 0
	call	_xmlListFront
	add	esp, 4

; 1636 :     if (lk != 0) {

	test	eax, eax
	je	SHORT $LN5@xmlTextWri

; 1637 :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 1638 :         if (p != 0) {

	test	eax, eax
	je	SHORT $LN5@xmlTextWri

; 1639 :             count = xmlTextWriterHandleStateDependencies(writer, p);

	push	eax
	push	esi
	call	_xmlTextWriterHandleStateDependencies
	add	esp, 8
	mov	DWORD PTR _sum$1$[ebp], eax

; 1640 :             if (count < 0)

	test	eax, eax
	js	$LN3@xmlTextWri
$LN5@xmlTextWri:

; 1641 :                 return -1;
; 1642 :             sum += count;
; 1643 :         }
; 1644 :     }
; 1645 : 
; 1646 :     if (writer->indent)

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN7@xmlTextWri

; 1647 :         writer->doindent = 0;

	mov	DWORD PTR [esi+20], 0
$LN7@xmlTextWri:

; 1648 : 
; 1649 :     count =

	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR [esi]
	add	eax, edi
	mov	DWORD PTR _data$1$[ebp], eax
	mov	DWORD PTR _out$1$[ebp], ecx

; 1556 :     if ((out == NULL) || (len < 0) || (data == NULL))

	test	ecx, ecx
	je	$LN3@xmlTextWri
	test	eax, eax
	je	$LN3@xmlTextWri

; 1557 :         return(-1);
; 1558 : 
; 1559 :     linelen = 0;
; 1560 :     sum = 0;

	xor	esi, esi
	mov	DWORD PTR _linelen$1$[ebp], 0
	mov	DWORD PTR _sum$1$[ebp], esi

; 1561 : 
; 1562 :     i = 0;

	xor	edi, edi
	npad	2
$LL11@xmlTextWri:
	mov	esi, DWORD PTR _data$1$[ebp]

; 1563 :     while (1) {
; 1564 :         unsigned char igroup[3];
; 1565 :         unsigned char ogroup[4];
; 1566 :         int c;
; 1567 :         int n;
; 1568 : 
; 1569 :         igroup[0] = igroup[1] = igroup[2] = 0;
; 1570 :         for (n = 0; n < 3 && i < len; n++, i++) {

	xor	eax, eax
	mov	WORD PTR _igroup$2[ebp+1], 0
	mov	BYTE PTR _igroup$2[ebp], 0
	npad	1
$LL15@xmlTextWri:
	cmp	edi, ebx
	jge	SHORT $LN14@xmlTextWri

; 1571 :             c = data[i];
; 1572 :             igroup[n] = (unsigned char) c;

	mov	cl, BYTE PTR [edi+esi]
	inc	edi
	mov	BYTE PTR _igroup$2[ebp+eax], cl
	inc	eax
	cmp	eax, 3
	jl	SHORT $LL15@xmlTextWri
$LN14@xmlTextWri:

; 1573 :         }
; 1574 : 
; 1575 :         if (n > 0) {

	mov	esi, DWORD PTR _sum$1$[ebp]
	test	eax, eax
	jle	$LN18@xmlTextWri

; 1576 :             ogroup[0] = dtable[igroup[0] >> 2];

	movzx	edx, BYTE PTR _igroup$2[ebp]

; 1577 :             ogroup[1] = dtable[((igroup[0] & 3) << 4) | (igroup[1] >> 4)];

	movzx	esi, BYTE PTR _igroup$2[ebp+1]
	mov	ecx, edx
	shr	ecx, 2
	and	edx, 3
	shl	edx, 4
	mov	cl, BYTE PTR ?dtable@?1??xmlOutputBufferWriteBase64@@9@9[ecx]
	mov	BYTE PTR _ogroup$1[ebp], cl
	mov	ecx, esi
	shr	ecx, 4

; 1578 :             ogroup[2] =

	and	esi, 15					; 0000000fH
	or	ecx, edx
	shl	esi, 2
	movzx	edx, BYTE PTR _igroup$2[ebp+2]
	mov	cl, BYTE PTR ?dtable@?1??xmlOutputBufferWriteBase64@@9@9[ecx]
	mov	BYTE PTR _ogroup$1[ebp+1], cl
	mov	ecx, edx
	shr	ecx, 6

; 1579 :                 dtable[((igroup[1] & 0xF) << 2) | (igroup[2] >> 6)];
; 1580 :             ogroup[3] = dtable[igroup[2] & 0x3F];

	and	edx, 63					; 0000003fH
	or	ecx, esi
	mov	ch, BYTE PTR ?dtable@?1??xmlOutputBufferWriteBase64@@9@9[ecx]
	mov	cl, BYTE PTR ?dtable@?1??xmlOutputBufferWriteBase64@@9@9[edx]
	mov	BYTE PTR _ogroup$1[ebp+2], ch
	mov	BYTE PTR _ogroup$1[ebp+3], cl

; 1581 : 
; 1582 :             if (n < 3) {

	cmp	eax, 3
	jge	SHORT $LN20@xmlTextWri

; 1583 :                 ogroup[3] = '=';
; 1584 :                 if (n < 2) {

	cmp	eax, 2
	movzx	ecx, ch
	mov	eax, 61					; 0000003dH
	mov	BYTE PTR _ogroup$1[ebp+3], 61		; 0000003dH
	cmovl	ecx, eax
	mov	BYTE PTR _ogroup$1[ebp+2], cl
$LN20@xmlTextWri:

; 1585 :                     ogroup[2] = '=';
; 1586 :                 }
; 1587 :             }
; 1588 : 
; 1589 :             if (linelen >= B64LINELEN) {

	cmp	DWORD PTR _linelen$1$[ebp], 72		; 00000048H
	jl	SHORT $LN37@xmlTextWri

; 1590 :                 count = xmlOutputBufferWrite(out, 2, B64CRLF);

	push	OFFSET ??_C@_02PCIJFNDE@?$AN?6@
	push	2
	push	DWORD PTR _out$1$[ebp]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1591 :                 if (count == -1)

	cmp	eax, -1
	je	SHORT $LN3@xmlTextWri

; 1592 :                     return -1;
; 1593 :                 sum += count;

	mov	esi, DWORD PTR _sum$1$[ebp]
	add	esi, eax

; 1594 :                 linelen = 0;

	mov	DWORD PTR _linelen$1$[ebp], 0
	jmp	SHORT $LN21@xmlTextWri
$LN37@xmlTextWri:

; 1585 :                     ogroup[2] = '=';
; 1586 :                 }
; 1587 :             }
; 1588 : 
; 1589 :             if (linelen >= B64LINELEN) {

	mov	esi, DWORD PTR _sum$1$[ebp]
$LN21@xmlTextWri:

; 1595 :             }
; 1596 :             count = xmlOutputBufferWrite(out, 4, (const char *) ogroup);

	lea	eax, DWORD PTR _ogroup$1[ebp]
	push	eax
	push	4
	push	DWORD PTR _out$1$[ebp]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1597 :             if (count == -1)

	cmp	eax, -1
	je	SHORT $LN3@xmlTextWri

; 1598 :                 return -1;
; 1599 :             sum += count;

	add	esi, eax

; 1600 : 
; 1601 :             linelen += 4;

	add	DWORD PTR _linelen$1$[ebp], 4
	mov	DWORD PTR _sum$1$[ebp], esi
$LN18@xmlTextWri:

; 1602 :         }
; 1603 : 
; 1604 :         if (i >= len)

	cmp	edi, ebx
	jl	$LL11@xmlTextWri

; 1650 :         xmlOutputBufferWriteBase64(writer->out, len,
; 1651 :                                    (unsigned char *) data + start);
; 1652 :     if (count < 0)

	test	esi, esi
	js	SHORT $LN3@xmlTextWri

; 1653 :         return -1;
; 1654 :     sum += count;

	mov	eax, DWORD PTR _sum$1$[ebp]
	pop	edi
	add	eax, esi

; 1655 : 
; 1656 :     return sum;
; 1657 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextWriterWriteBase64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteString
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_content$ = 12						; size = 4
_xmlTextWriterWriteString PROC				; COMDAT

; 1479 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _writer$[ebp]
	test	ebx, ebx
	je	SHORT $LN5@xmlTextWri

; 1480 :     int count;
; 1481 :     int sum;
; 1482 :     xmlLinkPtr lk;
; 1483 :     xmlTextWriterStackEntry *p;
; 1484 :     xmlChar *buf;
; 1485 : 
; 1486 :     if ((writer == NULL) || (content == NULL))

	mov	edi, DWORD PTR _content$[ebp]
	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 1487 :         return -1;
; 1488 : 
; 1489 :     sum = 0;
; 1490 :     buf = (xmlChar *) content;
; 1491 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [ebx+4]
	mov	esi, edi
	call	_xmlListFront
	add	esp, 4

; 1492 :     if (lk != 0) {

	test	eax, eax
	je	SHORT $LN10@xmlTextWri

; 1493 :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 1494 :         if (p != 0) {

	test	eax, eax
	je	SHORT $LN10@xmlTextWri

; 1495 :             switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	sub	eax, 1
	je	SHORT $LN8@xmlTextWri
	sub	eax, 1
	je	SHORT $LN9@xmlTextWri
	sub	eax, 1
	jne	SHORT $LN10@xmlTextWri
$LN8@xmlTextWri:

; 1496 :                 case XML_TEXTWRITER_NAME:
; 1497 :                 case XML_TEXTWRITER_TEXT:
; 1498 : #if 0
; 1499 :                     buf = NULL;
; 1500 : 		    xmlOutputBufferWriteEscape(writer->out, content, NULL);
; 1501 : #endif
; 1502 :                     buf = xmlEncodeSpecialChars(NULL, content);

	push	edi
	push	0
	call	_xmlEncodeSpecialChars
	add	esp, 8
	mov	esi, eax
$LN10@xmlTextWri:

; 1507 :                                                   writer->doc, NULL, content);
; 1508 :                     break;
; 1509 : 		default:
; 1510 : 		    break;
; 1511 :             }
; 1512 :         }
; 1513 :     }
; 1514 : 
; 1515 :     if (buf != NULL) {

	test	esi, esi
	je	SHORT $LN17@xmlTextWri

; 1407 :     return xmlTextWriterWriteRawLen(writer, content, xmlStrlen(content));

	push	esi
	call	_xmlStrlen
	push	eax
	push	esi
	push	ebx
	call	_xmlTextWriterWriteRawLen
	add	esp, 16					; 00000010H

; 1516 :         count = xmlTextWriterWriteRaw(writer, buf);

	mov	ebx, eax

; 1517 : 
; 1518 :         if (buf != content)     /* buf was allocated by us, so free it */

	cmp	esi, edi
	je	SHORT $LN12@xmlTextWri

; 1519 :             xmlFree(buf);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN12@xmlTextWri:

; 1520 : 
; 1521 :         if (count < 0)

	test	ebx, ebx
	jns	SHORT $LN11@xmlTextWri
$LN5@xmlTextWri:
	pop	edi

; 1527 : }

	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN9@xmlTextWri:

; 1503 :                     break;
; 1504 :                 case XML_TEXTWRITER_ATTRIBUTE:
; 1505 :                     buf = NULL;
; 1506 :                     xmlBufAttrSerializeTxtContent(writer->out->buffer,

	mov	eax, DWORD PTR [ebx]
	push	edi
	push	0
	push	DWORD PTR [ebx+40]
	push	DWORD PTR [eax+16]
	call	_xmlBufAttrSerializeTxtContent
	add	esp, 16					; 00000010H
$LN17@xmlTextWri:

; 1522 :             return -1;
; 1523 :         sum += count;
; 1524 :     }
; 1525 : 
; 1526 :     return sum;

	xor	ebx, ebx
$LN11@xmlTextWri:
	pop	edi

; 1527 : }

	pop	esi
	mov	eax, ebx
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterWriteString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatString
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_format$ = 12						; size = 4
_argptr$ = 16						; size = 4
_xmlTextWriterWriteVFormatString PROC			; COMDAT

; 1451 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN3@xmlTextWri

; 1452 :     int rc;
; 1453 :     xmlChar *buf;
; 1454 : 
; 1455 :     if ((writer == NULL) || (format == NULL))

	mov	eax, DWORD PTR _format$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 1457 : 
; 1458 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	eax
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 1459 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN3@xmlTextWri

; 1460 :         return -1;
; 1461 : 
; 1462 :     rc = xmlTextWriterWriteString(writer, buf);

	push	edi
	push	esi
	call	_xmlTextWriterWriteString

; 1463 : 
; 1464 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 12					; 0000000cH

; 1465 :     return rc;

	mov	eax, esi
	pop	edi

; 1466 : }

	pop	esi
	pop	ebp
	ret	0
$LN3@xmlTextWri:
	pop	edi

; 1456 :         return -1;

	or	eax, -1

; 1466 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatString
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_format$ = 12						; size = 4
_xmlTextWriterWriteFormatString PROC			; COMDAT

; 1423 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _writer$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@xmlTextWri

; 1424 :     int rc;
; 1425 :     va_list ap;
; 1426 : 
; 1427 :     if ((writer == NULL) || (format == NULL))

	mov	eax, DWORD PTR _format$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 1429 : 
; 1430 :     va_start(ap, format);
; 1431 : 
; 1432 :     rc = xmlTextWriterWriteVFormatString(writer, format, ap);

	lea	edx, DWORD PTR _format$[ebp+4]
	push	edx
	push	eax
	push	ecx
	call	_xmlTextWriterWriteVFormatString
	add	esp, 12					; 0000000cH

; 1433 : 
; 1434 :     va_end(ap);
; 1435 :     return rc;
; 1436 : }

	pop	ebp
	ret	0
$LN3@xmlTextWri:

; 1428 :         return -1;

	or	eax, -1

; 1433 : 
; 1434 :     va_end(ap);
; 1435 :     return rc;
; 1436 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatString ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteRaw
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_content$ = 12						; size = 4
_xmlTextWriterWriteRaw PROC				; COMDAT

; 1406 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _content$[ebp]
	call	_xmlStrlen
	push	eax
	push	DWORD PTR _content$[ebp]
	push	DWORD PTR _writer$[ebp]
	call	_xmlTextWriterWriteRawLen
	add	esp, 16					; 00000010H

; 1407 :     return xmlTextWriterWriteRawLen(writer, content, xmlStrlen(content));
; 1408 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteRaw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteRawLen
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_content$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlTextWriterWriteRawLen PROC				; COMDAT

; 1353 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN2@xmlTextWri

; 1354 :     int count;
; 1355 :     int sum;
; 1356 :     xmlLinkPtr lk;
; 1357 :     xmlTextWriterStackEntry *p;
; 1358 : 
; 1359 :     if (writer == NULL) {
; 1360 :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0CM@KBMCGCHN@xmlTextWriterWriteRawLen?5?3?5inva@
	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 1361 :                         "xmlTextWriterWriteRawLen : invalid writer!\n");
; 1362 :         return -1;

	or	eax, -1
	pop	esi

; 1390 :     }
; 1391 : 
; 1392 :     return sum;
; 1393 : }

	pop	ebp
	ret	0
$LN2@xmlTextWri:

; 1363 :     }
; 1364 : 
; 1365 :     if ((content == NULL) || (len < 0)) {

	cmp	DWORD PTR _content$[ebp], 0
	je	SHORT $LN4@xmlTextWri
	cmp	DWORD PTR _len$[ebp], 0
	jl	SHORT $LN4@xmlTextWri

; 1369 :     }
; 1370 : 
; 1371 :     sum = 0;

	push	edi

; 1372 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	xor	edi, edi
	call	_xmlListFront
	add	esp, 4

; 1373 :     if (lk != 0) {

	test	eax, eax
	je	SHORT $LN5@xmlTextWri

; 1374 :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData

; 1375 :         count = xmlTextWriterHandleStateDependencies(writer, p);

	push	eax
	push	esi
	call	_xmlTextWriterHandleStateDependencies
	mov	edi, eax
	add	esp, 12					; 0000000cH

; 1376 :         if (count < 0)

	test	edi, edi
	js	SHORT $LN11@xmlTextWri
$LN5@xmlTextWri:

; 1377 :             return -1;
; 1378 :         sum += count;
; 1379 :     }
; 1380 : 
; 1381 :     if (writer->indent)

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN7@xmlTextWri

; 1382 :         writer->doindent = 0;

	mov	DWORD PTR [esi+20], 0
$LN7@xmlTextWri:

; 1383 : 
; 1384 :     if (content != NULL) {
; 1385 :         count =

	push	DWORD PTR _content$[ebp]
	push	DWORD PTR _len$[ebp]
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 1386 :             xmlOutputBufferWrite(writer->out, len, (const char *) content);
; 1387 :         if (count < 0)

	test	eax, eax
	jns	SHORT $LN9@xmlTextWri
$LN11@xmlTextWri:
	pop	edi

; 1388 :             return -1;

	or	eax, -1
	pop	esi

; 1390 :     }
; 1391 : 
; 1392 :     return sum;
; 1393 : }

	pop	ebp
	ret	0
$LN9@xmlTextWri:

; 1389 :         sum += count;

	add	eax, edi
	pop	edi
	pop	esi

; 1390 :     }
; 1391 : 
; 1392 :     return sum;
; 1393 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:

; 1366 :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0CN@MACOIGNG@xmlTextWriterWriteRawLen?5?3?5inva@
	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 1367 :                         "xmlTextWriterWriteRawLen : invalid content!\n");
; 1368 :         return -1;

	or	eax, -1
	pop	esi

; 1390 :     }
; 1391 : 
; 1392 :     return sum;
; 1393 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteRawLen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatRaw
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_format$ = 12						; size = 4
_argptr$ = 16						; size = 4
_xmlTextWriterWriteVFormatRaw PROC			; COMDAT

; 1322 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN7@xmlTextWri

; 1323 :     int rc;
; 1324 :     xmlChar *buf;
; 1325 : 
; 1326 :     if (writer == NULL)
; 1327 :         return -1;
; 1328 : 
; 1329 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 1330 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN7@xmlTextWri

; 1407 :     return xmlTextWriterWriteRawLen(writer, content, xmlStrlen(content));

	push	edi
	call	_xmlStrlen
	push	eax
	push	edi
	push	esi
	call	_xmlTextWriterWriteRawLen

; 1332 : 
; 1333 :     rc = xmlTextWriterWriteRaw(writer, buf);
; 1334 : 
; 1335 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 20					; 00000014H

; 1336 :     return rc;

	mov	eax, esi
	pop	edi

; 1337 : }

	pop	esi
	pop	ebp
	ret	0
$LN7@xmlTextWri:
	pop	edi

; 1331 :         return -1;

	or	eax, -1

; 1337 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatRaw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatRaw
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_format$ = 12						; size = 4
_xmlTextWriterWriteFormatRaw PROC			; COMDAT

; 1297 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 1326 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 1298 :     int rc;
; 1299 :     va_list ap;
; 1300 : 
; 1301 :     va_start(ap, format);
; 1302 : 
; 1303 :     rc = xmlTextWriterWriteVFormatRaw(writer, format, ap);
; 1304 : 
; 1305 :     va_end(ap);
; 1306 :     return rc;

	or	eax, -1
	pop	esi

; 1307 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 1329 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 1330 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 1298 :     int rc;
; 1299 :     va_list ap;
; 1300 : 
; 1301 :     va_start(ap, format);
; 1302 : 
; 1303 :     rc = xmlTextWriterWriteVFormatRaw(writer, format, ap);
; 1304 : 
; 1305 :     va_end(ap);
; 1306 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 1307 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 1407 :     return xmlTextWriterWriteRawLen(writer, content, xmlStrlen(content));

	push	edi
	call	_xmlStrlen
	push	eax
	push	edi
	push	esi
	call	_xmlTextWriterWriteRawLen

; 1335 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 20					; 00000014H

; 1298 :     int rc;
; 1299 :     va_list ap;
; 1300 : 
; 1301 :     va_start(ap, format);
; 1302 : 
; 1303 :     rc = xmlTextWriterWriteVFormatRaw(writer, format, ap);
; 1304 : 
; 1305 :     va_end(ap);
; 1306 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 1307 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatRaw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteElementNS
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_prefix$ = 12						; size = 4
_name$ = 16						; size = 4
_namespaceURI$ = 20					; size = 4
_content$ = 24						; size = 4
_xmlTextWriterWriteElementNS PROC			; COMDAT

; 2339 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN3@xmlTextWri

; 2340 :     int count;
; 2341 :     int sum;
; 2342 : 
; 2343 :     if ((writer == NULL) || (name == NULL) || (*name == '\0'))

	mov	eax, DWORD PTR _name$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN3@xmlTextWri

; 2345 : 
; 2346 :     sum = 0;
; 2347 :     count =

	push	DWORD PTR _namespaceURI$[ebp]
	push	eax
	push	DWORD PTR _prefix$[ebp]
	push	esi
	call	_xmlTextWriterStartElementNS
	mov	edi, eax
	add	esp, 16					; 00000010H

; 2348 :         xmlTextWriterStartElementNS(writer, prefix, name, namespaceURI);
; 2349 :     if (count < 0)

	test	edi, edi
	js	SHORT $LN3@xmlTextWri

; 2350 :         return -1;
; 2351 :     sum += count;
; 2352 :     count = xmlTextWriterWriteString(writer, content);

	push	DWORD PTR _content$[ebp]
	push	esi
	call	_xmlTextWriterWriteString
	add	esp, 8

; 2353 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN3@xmlTextWri

; 2354 :         return -1;
; 2355 :     sum += count;
; 2356 :     count = xmlTextWriterEndElement(writer);

	push	esi
	add	edi, eax
	call	_xmlTextWriterEndElement
	add	esp, 4

; 2357 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN3@xmlTextWri

; 2358 :         return -1;
; 2359 :     sum += count;

	add	eax, edi
	pop	edi

; 2360 : 
; 2361 :     return sum;
; 2362 : }

	pop	esi
	pop	ebp
	ret	0
$LN3@xmlTextWri:
	pop	edi

; 2344 :         return -1;

	or	eax, -1

; 2360 : 
; 2361 :     return sum;
; 2362 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteElementNS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatElementNS
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_prefix$ = 12						; size = 4
_name$ = 16						; size = 4
_namespaceURI$ = 20					; size = 4
_format$ = 24						; size = 4
_argptr$ = 28						; size = 4
_xmlTextWriterWriteVFormatElementNS PROC		; COMDAT

; 2304 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 2305 :     int rc;
; 2306 :     xmlChar *buf;
; 2307 : 
; 2308 :     if (writer == NULL)
; 2309 :         return -1;
; 2310 : 
; 2311 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2312 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 2314 : 
; 2315 :     rc = xmlTextWriterWriteElementNS(writer, prefix, name, namespaceURI,

	push	edi
	push	DWORD PTR _namespaceURI$[ebp]
	push	DWORD PTR _name$[ebp]
	push	DWORD PTR _prefix$[ebp]
	push	esi
	call	_xmlTextWriterWriteElementNS

; 2316 :                                      buf);
; 2317 : 
; 2318 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 24					; 00000018H

; 2319 :     return rc;

	mov	eax, esi
	pop	edi

; 2320 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 2313 :         return -1;

	or	eax, -1

; 2320 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatElementNS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatElementNS
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_prefix$ = 12						; size = 4
_name$ = 16						; size = 4
_namespaceURI$ = 20					; size = 4
_format$ = 24						; size = 4
_xmlTextWriterWriteFormatElementNS PROC			; COMDAT

; 2272 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 2308 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 2273 :     int rc;
; 2274 :     va_list ap;
; 2275 : 
; 2276 :     va_start(ap, format);
; 2277 : 
; 2278 :     rc = xmlTextWriterWriteVFormatElementNS(writer, prefix, name,
; 2279 :                                             namespaceURI, format, ap);
; 2280 : 
; 2281 :     va_end(ap);
; 2282 :     return rc;

	or	eax, -1
	pop	esi

; 2283 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 2311 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2312 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 2273 :     int rc;
; 2274 :     va_list ap;
; 2275 : 
; 2276 :     va_start(ap, format);
; 2277 : 
; 2278 :     rc = xmlTextWriterWriteVFormatElementNS(writer, prefix, name,
; 2279 :                                             namespaceURI, format, ap);
; 2280 : 
; 2281 :     va_end(ap);
; 2282 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 2283 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 2315 :     rc = xmlTextWriterWriteElementNS(writer, prefix, name, namespaceURI,

	push	edi
	push	DWORD PTR _namespaceURI$[ebp]
	push	DWORD PTR _name$[ebp]
	push	DWORD PTR _prefix$[ebp]
	push	esi
	call	_xmlTextWriterWriteElementNS

; 2316 :                                      buf);
; 2317 : 
; 2318 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 24					; 00000018H

; 2273 :     int rc;
; 2274 :     va_list ap;
; 2275 : 
; 2276 :     va_start(ap, format);
; 2277 : 
; 2278 :     rc = xmlTextWriterWriteVFormatElementNS(writer, prefix, name,
; 2279 :                                             namespaceURI, format, ap);
; 2280 : 
; 2281 :     va_end(ap);
; 2282 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 2283 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatElementNS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_content$ = 16						; size = 4
_xmlTextWriterWriteElement PROC				; COMDAT

; 2230 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _name$[ebp]
	mov	edi, DWORD PTR _writer$[ebp]
	push	edi
	call	_xmlTextWriterStartElement
	mov	esi, eax
	add	esp, 8
	cmp	esi, -1
	je	SHORT $LN7@xmlTextWri

; 2231 :     int count;
; 2232 :     int sum;
; 2233 : 
; 2234 :     sum = 0;
; 2235 :     count = xmlTextWriterStartElement(writer, name);
; 2236 :     if (count == -1)
; 2237 :         return -1;
; 2238 :     sum += count;
; 2239 :     if (content != NULL) {

	mov	eax, DWORD PTR _content$[ebp]
	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 2240 : 	count = xmlTextWriterWriteString(writer, content);

	push	eax
	push	edi
	call	_xmlTextWriterWriteString
	add	esp, 8

; 2241 : 	if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 2242 : 	    return -1;
; 2243 : 	sum += count;

	add	esi, eax
$LN3@xmlTextWri:

; 2244 :     }
; 2245 :     count = xmlTextWriterEndElement(writer);

	push	edi
	call	_xmlTextWriterEndElement
	add	esp, 4

; 2246 :     if (count == -1)

	cmp	eax, -1
	je	SHORT $LN7@xmlTextWri

; 2248 :     sum += count;

	pop	edi
	add	eax, esi

; 2249 : 
; 2250 :     return sum;
; 2251 : }

	pop	esi
	pop	ebp
	ret	0
$LN7@xmlTextWri:
	pop	edi

; 2247 :         return -1;

	or	eax, -1

; 2249 : 
; 2250 :     return sum;
; 2251 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_format$ = 16						; size = 4
_argptr$ = 20						; size = 4
_xmlTextWriterWriteVFormatElement PROC			; COMDAT

; 2200 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlTextWri

; 2201 :     int rc;
; 2202 :     xmlChar *buf;
; 2203 : 
; 2204 :     if (writer == NULL)
; 2205 :         return -1;
; 2206 : 
; 2207 :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2208 :     if (buf == NULL)

	test	edi, edi
	je	SHORT $LN5@xmlTextWri

; 2210 : 
; 2211 :     rc = xmlTextWriterWriteElement(writer, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteElement

; 2212 : 
; 2213 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 2214 :     return rc;

	mov	eax, esi
	pop	edi

; 2215 : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlTextWri:
	pop	edi

; 2209 :         return -1;

	or	eax, -1

; 2215 : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_format$ = 16						; size = 4
_xmlTextWriterWriteFormatElement PROC			; COMDAT

; 2173 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4

; 2204 :     if (writer == NULL)

	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 2174 :     int rc;
; 2175 :     va_list ap;
; 2176 : 
; 2177 :     va_start(ap, format);
; 2178 : 
; 2179 :     rc = xmlTextWriterWriteVFormatElement(writer, name, format, ap);
; 2180 : 
; 2181 :     va_end(ap);
; 2182 :     return rc;

	or	eax, -1
	pop	esi

; 2183 : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	edi

; 2207 :     buf = xmlTextWriterVSprintf(format, argptr);

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 2208 :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN5@xmlTextWri

; 2174 :     int rc;
; 2175 :     va_list ap;
; 2176 : 
; 2177 :     va_start(ap, format);
; 2178 : 
; 2179 :     rc = xmlTextWriterWriteVFormatElement(writer, name, format, ap);
; 2180 : 
; 2181 :     va_end(ap);
; 2182 :     return rc;

	pop	edi
	or	eax, -1
	pop	esi

; 2183 : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 2211 :     rc = xmlTextWriterWriteElement(writer, name, buf);

	push	edi
	push	DWORD PTR _name$[ebp]
	push	esi
	call	_xmlTextWriterWriteElement

; 2212 : 
; 2213 :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 2174 :     int rc;
; 2175 :     va_list ap;
; 2176 : 
; 2177 :     va_start(ap, format);
; 2178 : 
; 2179 :     rc = xmlTextWriterWriteVFormatElement(writer, name, format, ap);
; 2180 : 
; 2181 :     va_end(ap);
; 2182 :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 2183 : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterFullEndElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterFullEndElement PROC			; COMDAT

; 1211 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN23@xmlTextWri

; 1212 :     int count;
; 1213 :     int sum;
; 1214 :     xmlLinkPtr lk;
; 1215 :     xmlTextWriterStackEntry *p;
; 1216 : 
; 1217 :     if (writer == NULL)
; 1218 :         return -1;
; 1219 : 
; 1220 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 1221 :     if (lk == 0)

	test	eax, eax
	je	SHORT $LN23@xmlTextWri

; 1222 :         return -1;
; 1223 : 
; 1224 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ebx, eax
	add	esp, 4

; 1225 :     if (p == 0)

	test	ebx, ebx
	je	SHORT $LN23@xmlTextWri

; 1226 :         return -1;
; 1227 : 
; 1228 :     sum = 0;
; 1229 :     switch (p->state) {

	mov	ecx, DWORD PTR [ebx+4]
	xor	edi, edi
	sub	ecx, 1
	je	SHORT $LN9@xmlTextWri
	sub	ecx, 1
	je	SHORT $LN7@xmlTextWri
	sub	ecx, 1
	je	SHORT $LN12@xmlTextWri
$LN23@xmlTextWri:
	pop	edi

; 1282 : }

	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN7@xmlTextWri:

; 1230 :         case XML_TEXTWRITER_ATTRIBUTE:
; 1231 :             count = xmlTextWriterEndAttribute(writer);

	push	esi
	call	_xmlTextWriterEndAttribute
	mov	edi, eax
	add	esp, 4

; 1232 :             if (count < 0)

	test	edi, edi
	js	SHORT $LN23@xmlTextWri
$LN9@xmlTextWri:

; 1233 :                 return -1;
; 1234 :             sum += count;
; 1235 :             /* fallthrough */
; 1236 :         case XML_TEXTWRITER_NAME:
; 1237 :             /* Output namespace declarations */
; 1238 :             count = xmlTextWriterOutputNSDecl(writer);

	push	esi
	call	_xmlTextWriterOutputNSDecl
	add	esp, 4

; 1239 :             if (count < 0)

	test	eax, eax
	js	SHORT $LN23@xmlTextWri

; 1240 :                 return -1;
; 1241 :             sum += count;
; 1242 : 
; 1243 :             count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1244 :             if (count < 0)

	test	eax, eax
	js	SHORT $LN23@xmlTextWri

; 1245 :                 return -1;
; 1246 :             sum += count;

	add	edi, eax

; 1247 :             if (writer->indent)

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN22@xmlTextWri

; 1248 :                 writer->doindent = 0;

	mov	DWORD PTR [esi+20], 0
$LN12@xmlTextWri:

; 1249 :             /* fallthrough */
; 1250 :         case XML_TEXTWRITER_TEXT:
; 1251 :             if ((writer->indent) && (writer->doindent)) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN22@xmlTextWri
	cmp	DWORD PTR [esi+20], 0
	je	SHORT $LN22@xmlTextWri

; 1252 :                 count = xmlTextWriterWriteIndent(writer);

	push	esi
	call	_xmlTextWriterWriteIndent
	add	esp, 4

; 1253 :                 sum += count;

	add	edi, eax
$LN22@xmlTextWri:

; 1254 :                 writer->doindent = 1;
; 1255 :             } else
; 1256 :                 writer->doindent = 1;
; 1257 :             count = xmlOutputBufferWriteString(writer->out, "</");

	mov	DWORD PTR [esi+20], 1
	push	OFFSET ??_C@_02DPNDACHE@?$DM?1@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1258 :             if (count < 0)

	test	eax, eax
	js	SHORT $LN23@xmlTextWri

; 1259 :                 return -1;
; 1260 :             sum += count;
; 1261 :             count = xmlOutputBufferWriteString(writer->out,

	push	DWORD PTR [ebx]
	add	edi, eax
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1262 :                                                (const char *) p->name);
; 1263 :             if (count < 0)

	test	eax, eax
	js	$LN23@xmlTextWri

; 1264 :                 return -1;
; 1265 :             sum += count;
; 1266 :             count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1267 :             if (count < 0)

	test	eax, eax
	js	$LN23@xmlTextWri

; 1268 :                 return -1;
; 1269 :             sum += count;

	add	edi, eax

; 1270 :             break;
; 1271 :         default:
; 1272 :             return -1;
; 1273 :     }
; 1274 : 
; 1275 :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN20@xmlTextWri

; 1276 :         count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1277 :         sum += count;

	add	edi, eax
$LN20@xmlTextWri:

; 1278 :     }
; 1279 : 
; 1280 :     xmlListPopFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListPopFront
	add	esp, 4

; 1281 :     return sum;

	mov	eax, edi
	pop	edi

; 1282 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterFullEndElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndElement PROC				; COMDAT

; 1119 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	SHORT $LN23@xmlTextWri

; 1120 :     int count;
; 1121 :     int sum;
; 1122 :     xmlLinkPtr lk;
; 1123 :     xmlTextWriterStackEntry *p;
; 1124 : 
; 1125 :     if (writer == NULL)
; 1126 :         return -1;
; 1127 : 
; 1128 :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 1129 :     if (lk == 0) {

	test	eax, eax
	jne	SHORT $LN5@xmlTextWri
$LN26@xmlTextWri:

; 1199 : }

	push	DWORD PTR [esi+8]
	call	_xmlListDelete
	add	esp, 4
	mov	DWORD PTR [esi+8], 0
$LN23@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN5@xmlTextWri:

; 1130 :         xmlListDelete(writer->nsstack);
; 1131 :         writer->nsstack = NULL;
; 1132 :         return -1;
; 1133 :     }
; 1134 : 
; 1135 :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ebx, eax
	add	esp, 4

; 1136 :     if (p == 0) {

	test	ebx, ebx
	je	SHORT $LN26@xmlTextWri

; 1137 :         xmlListDelete(writer->nsstack);
; 1138 :         writer->nsstack = NULL;
; 1139 :         return -1;
; 1140 :     }
; 1141 : 
; 1142 :     sum = 0;
; 1143 :     switch (p->state) {

	mov	eax, DWORD PTR [ebx+4]
	xor	edi, edi
	sub	eax, 1
	je	SHORT $LN8@xmlTextWri
	sub	eax, 1
	je	SHORT $LN7@xmlTextWri
	sub	eax, 1
	jne	SHORT $LN23@xmlTextWri

; 1163 :             if (count < 0)
; 1164 :                 return -1;
; 1165 :             sum += count;
; 1166 :             break;
; 1167 :         case XML_TEXTWRITER_TEXT:
; 1168 :             if ((writer->indent) && (writer->doindent)) {

	cmp	DWORD PTR [esi+16], edi
	je	SHORT $LN22@xmlTextWri
	cmp	DWORD PTR [esi+20], edi
	je	SHORT $LN22@xmlTextWri

; 1169 :                 count = xmlTextWriterWriteIndent(writer);

	push	esi
	call	_xmlTextWriterWriteIndent
	add	esp, 4

; 1170 :                 sum += count;

	mov	edi, eax
$LN22@xmlTextWri:

; 1171 :                 writer->doindent = 1;
; 1172 :             } else
; 1173 :                 writer->doindent = 1;
; 1174 :             count = xmlOutputBufferWriteString(writer->out, "</");

	mov	DWORD PTR [esi+20], 1
	push	OFFSET ??_C@_02DPNDACHE@?$DM?1@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1175 :             if (count < 0)

	test	eax, eax
	js	SHORT $LN23@xmlTextWri

; 1176 :                 return -1;
; 1177 :             sum += count;
; 1178 :             count = xmlOutputBufferWriteString(writer->out,

	push	DWORD PTR [ebx]
	add	edi, eax
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1179 :                                                (const char *) p->name);
; 1180 :             if (count < 0)

	test	eax, eax
	js	SHORT $LN23@xmlTextWri

; 1181 :                 return -1;
; 1182 :             sum += count;

	add	edi, eax

; 1183 :             count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@

; 1184 :             if (count < 0)
; 1185 :                 return -1;
; 1186 :             sum += count;
; 1187 :             break;

	jmp	SHORT $LN25@xmlTextWri
$LN7@xmlTextWri:

; 1144 :         case XML_TEXTWRITER_ATTRIBUTE:
; 1145 :             count = xmlTextWriterEndAttribute(writer);

	push	esi
	call	_xmlTextWriterEndAttribute
	mov	edi, eax
	add	esp, 4

; 1146 :             if (count < 0) {

	test	edi, edi
	js	$LN26@xmlTextWri
$LN8@xmlTextWri:

; 1147 :                 xmlListDelete(writer->nsstack);
; 1148 :                 writer->nsstack = NULL;
; 1149 :                 return -1;
; 1150 :             }
; 1151 :             sum += count;
; 1152 :             /* fallthrough */
; 1153 :         case XML_TEXTWRITER_NAME:
; 1154 :             /* Output namespace declarations */
; 1155 :             count = xmlTextWriterOutputNSDecl(writer);

	push	esi
	call	_xmlTextWriterOutputNSDecl
	add	esp, 4

; 1156 :             if (count < 0)

	test	eax, eax
	js	$LN23@xmlTextWri

; 1157 :                 return -1;
; 1158 :             sum += count;

	add	edi, eax

; 1159 : 
; 1160 :             if (writer->indent) /* next element needs indent */

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN11@xmlTextWri

; 1161 :                 writer->doindent = 1;

	mov	DWORD PTR [esi+20], 1
$LN11@xmlTextWri:

; 1162 :             count = xmlOutputBufferWriteString(writer->out, "/>");

	push	OFFSET ??_C@_02HCGKDMEN@?1?$DO@
$LN25@xmlTextWri:

; 1188 :         default:
; 1189 :             return -1;
; 1190 :     }
; 1191 : 
; 1192 :     if (writer->indent) {

	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8
	test	eax, eax
	js	$LN23@xmlTextWri
	add	edi, eax
	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN20@xmlTextWri

; 1193 :         count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1194 :         sum += count;

	add	edi, eax
$LN20@xmlTextWri:

; 1195 :     }
; 1196 : 
; 1197 :     xmlListPopFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListPopFront
	add	esp, 4

; 1198 :     return sum;

	mov	eax, edi
	pop	edi

; 1199 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterEndElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartElementNS
_TEXT	SEGMENT
_count$1$ = 8						; size = 4
_writer$ = 8						; size = 4
_prefix$ = 12						; size = 4
_name$ = 16						; size = 4
_namespaceURI$ = 20					; size = 4
_xmlTextWriterStartElementNS PROC			; COMDAT

; 1056 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _writer$[ebp]
	test	edi, edi
	je	SHORT $LN3@xmlTextWri

; 1057 :     int count;
; 1058 :     int sum;
; 1059 :     xmlChar *buf;
; 1060 : 
; 1061 :     if ((writer == NULL) || (name == NULL) || (*name == '\0'))

	mov	esi, DWORD PTR _name$[ebp]
	test	esi, esi
	je	SHORT $LN3@xmlTextWri
	cmp	BYTE PTR [esi], 0
	je	SHORT $LN3@xmlTextWri

; 1062 :         return -1;
; 1063 : 
; 1064 :     buf = NULL;
; 1065 :     if (prefix != 0) {

	mov	ebx, DWORD PTR _prefix$[ebp]
	xor	eax, eax
	test	ebx, ebx
	je	SHORT $LN4@xmlTextWri

; 1066 :         buf = xmlStrdup(prefix);

	push	ebx
	call	_xmlStrdup

; 1067 :         buf = xmlStrcat(buf, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	push	eax
	call	_xmlStrcat
	add	esp, 12					; 0000000cH
$LN4@xmlTextWri:

; 1068 :     }
; 1069 :     buf = xmlStrcat(buf, name);

	push	esi
	push	eax
	call	_xmlStrcat
	mov	esi, eax

; 1070 : 
; 1071 :     sum = 0;
; 1072 :     count = xmlTextWriterStartElement(writer, buf);

	push	esi
	push	edi
	call	_xmlTextWriterStartElement

; 1073 :     xmlFree(buf);

	push	esi
	mov	DWORD PTR _count$1$[ebp], eax
	call	DWORD PTR _xmlFree

; 1074 :     if (count < 0)

	mov	eax, DWORD PTR _count$1$[ebp]
	add	esp, 20					; 00000014H
	test	eax, eax
	js	SHORT $LN3@xmlTextWri

; 1075 :         return -1;
; 1076 :     sum += count;
; 1077 : 
; 1078 :     if (namespaceURI != 0) {

	cmp	DWORD PTR _namespaceURI$[ebp], 0
	je	SHORT $LN1@xmlTextWri

; 1079 :         xmlTextWriterNsStackEntry *p = (xmlTextWriterNsStackEntry *)

	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	mov	esi, eax
	add	esp, 4

; 1080 :         xmlMalloc(sizeof(xmlTextWriterNsStackEntry));
; 1081 :         if (p == 0) {

	test	esi, esi
	jne	SHORT $LN7@xmlTextWri

; 1082 :             xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CO@MGJEFOHO@xmlTextWriterStartElementNS?5?3?5o@
	push	2
	push	edi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
$LN3@xmlTextWri:

; 1104 :     }
; 1105 : 
; 1106 :     return sum;
; 1107 : }

	or	eax, -1
$LN1@xmlTextWri:
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN7@xmlTextWri:

; 1083 :                             "xmlTextWriterStartElementNS : out of memory!\n");
; 1084 :             return -1;
; 1085 :         }
; 1086 : 
; 1087 :         buf = xmlStrdup(BAD_CAST "xmlns");

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	call	_xmlStrdup
	add	esp, 4

; 1088 :         if (prefix != 0) {

	test	ebx, ebx
	je	SHORT $LN8@xmlTextWri

; 1089 :             buf = xmlStrcat(buf, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	push	eax
	call	_xmlStrcat

; 1090 :             buf = xmlStrcat(buf, prefix);

	push	ebx
	push	eax
	call	_xmlStrcat
	add	esp, 16					; 00000010H
$LN8@xmlTextWri:

; 1091 :         }
; 1092 : 
; 1093 :         p->prefix = buf;
; 1094 :         p->uri = xmlStrdup(namespaceURI);

	push	DWORD PTR _namespaceURI$[ebp]
	mov	DWORD PTR [esi], eax
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [esi+4], eax

; 1095 :         if (p->uri == 0) {

	test	eax, eax
	jne	SHORT $LN9@xmlTextWri

; 1096 :             xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CO@MGJEFOHO@xmlTextWriterStartElementNS?5?3?5o@
	push	2
	push	edi
	call	_xmlWriterErrMsg

; 1097 :                             "xmlTextWriterStartElementNS : out of memory!\n");
; 1098 :             xmlFree(p);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 1104 :     }
; 1105 : 
; 1106 :     return sum;
; 1107 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN9@xmlTextWri:

; 1099 :             return -1;
; 1100 :         }
; 1101 :         p->elem = xmlListFront(writer->nodes);

	push	DWORD PTR [edi+4]
	call	_xmlListFront
	mov	DWORD PTR [esi+8], eax

; 1102 : 
; 1103 :         xmlListPushFront(writer->nsstack, p);

	push	esi
	push	DWORD PTR [edi+8]
	call	_xmlListPushFront
	mov	eax, DWORD PTR _count$1$[ebp]
	add	esp, 12					; 0000000cH
	pop	edi

; 1104 :     }
; 1105 : 
; 1106 :     return sum;
; 1107 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterStartElementNS ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartElement
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlTextWriterStartElement PROC				; COMDAT

; 957  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	$LN5@xmlTextWri

; 958  :     int count;
; 959  :     int sum;
; 960  :     xmlLinkPtr lk;
; 961  :     xmlTextWriterStackEntry *p;
; 962  : 
; 963  :     if ((writer == NULL) || (name == NULL) || (*name == '\0'))

	mov	eax, DWORD PTR _name$[ebp]
	test	eax, eax
	je	$LN5@xmlTextWri
	cmp	BYTE PTR [eax], 0
	je	$LN5@xmlTextWri

; 964  :         return -1;
; 965  : 
; 966  :     sum = 0;
; 967  :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	xor	edi, edi
	call	_xmlListFront
	add	esp, 4

; 968  :     if (lk != 0) {

	test	eax, eax
	je	SHORT $LN16@xmlTextWri

; 969  :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ebx, eax
	add	esp, 4

; 970  :         if (p != 0) {

	test	ebx, ebx
	je	SHORT $LN16@xmlTextWri

; 971  :             switch (p->state) {

	mov	eax, DWORD PTR [ebx+4]
	dec	eax
	cmp	eax, 4
	ja	SHORT $LN16@xmlTextWri
	jmp	DWORD PTR $LN24@xmlTextWri[eax*4]
$LN10@xmlTextWri:

; 972  :                 case XML_TEXTWRITER_PI:
; 973  :                 case XML_TEXTWRITER_PI_TEXT:
; 974  :                     return -1;
; 975  :                 case XML_TEXTWRITER_NONE:
; 976  :                     break;
; 977  : 				case XML_TEXTWRITER_ATTRIBUTE:
; 978  : 					count = xmlTextWriterEndAttribute(writer);

	push	esi
	call	_xmlTextWriterEndAttribute
	mov	edi, eax
	add	esp, 4

; 979  : 					if (count < 0)

	test	edi, edi
	js	SHORT $LN5@xmlTextWri
$LN12@xmlTextWri:

; 980  : 						return -1;
; 981  : 					sum += count;
; 982  : 					/* fallthrough */
; 983  :                 case XML_TEXTWRITER_NAME:
; 984  :                     /* Output namespace declarations */
; 985  :                     count = xmlTextWriterOutputNSDecl(writer);

	push	esi
	call	_xmlTextWriterOutputNSDecl
	add	esp, 4

; 986  :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 987  :                         return -1;
; 988  :                     sum += count;
; 989  :                     count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 990  :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 991  :                         return -1;
; 992  :                     sum += count;

	add	edi, eax

; 993  :                     if (writer->indent)

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN15@xmlTextWri

; 994  :                         count =

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN15@xmlTextWri:

; 995  :                             xmlOutputBufferWriteString(writer->out, "\n");
; 996  :                     p->state = XML_TEXTWRITER_TEXT;

	mov	DWORD PTR [ebx+4], 3
$LN16@xmlTextWri:

; 997  :                     break;
; 998  :                 default:
; 999  :                     break;
; 1000 :             }
; 1001 :         }
; 1002 :     }
; 1003 : 
; 1004 :     p = (xmlTextWriterStackEntry *)

	push	8
	call	DWORD PTR _xmlMalloc
	mov	ebx, eax
	add	esp, 4

; 1005 :         xmlMalloc(sizeof(xmlTextWriterStackEntry));
; 1006 :     if (p == 0) {

	test	ebx, ebx
	jne	SHORT $LN17@xmlTextWri

; 1007 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CM@FINCADKE@xmlTextWriterStartElement?5?3?5out@
	push	2
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
$LN5@xmlTextWri:

; 1037 : 
; 1038 :     return sum;
; 1039 : }

	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
$LN17@xmlTextWri:

; 1008 :                         "xmlTextWriterStartElement : out of memory!\n");
; 1009 :         return -1;
; 1010 :     }
; 1011 : 
; 1012 :     p->name = xmlStrdup(name);

	push	DWORD PTR _name$[ebp]
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [ebx], eax

; 1013 :     if (p->name == 0) {

	test	eax, eax
	jne	SHORT $LN18@xmlTextWri

; 1014 :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CM@FINCADKE@xmlTextWriterStartElement?5?3?5out@
	push	2
	push	esi
	call	_xmlWriterErrMsg

; 1015 :                         "xmlTextWriterStartElement : out of memory!\n");
; 1016 :         xmlFree(p);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 1037 : 
; 1038 :     return sum;
; 1039 : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN18@xmlTextWri:

; 1017 :         return -1;
; 1018 :     }
; 1019 :     p->state = XML_TEXTWRITER_NAME;

	mov	DWORD PTR [ebx+4], 1

; 1020 : 
; 1021 :     xmlListPushFront(writer->nodes, p);

	push	ebx
	push	DWORD PTR [esi+4]
	call	_xmlListPushFront
	add	esp, 8

; 1022 : 
; 1023 :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN19@xmlTextWri

; 1024 :         count = xmlTextWriterWriteIndent(writer);

	push	esi
	call	_xmlTextWriterWriteIndent
	add	esp, 4

; 1025 :         sum += count;

	add	edi, eax
$LN19@xmlTextWri:

; 1026 :     }
; 1027 : 
; 1028 :     count = xmlOutputBufferWriteString(writer->out, "<");

	push	OFFSET ??_C@_01MNNFJEPP@?$DM@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1029 :     if (count < 0)

	test	eax, eax
	js	SHORT $LN5@xmlTextWri

; 1030 :         return -1;
; 1031 :     sum += count;
; 1032 :     count =

	push	DWORD PTR [ebx]
	add	edi, eax
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1033 :         xmlOutputBufferWriteString(writer->out, (const char *) p->name);
; 1034 :     if (count < 0)

	test	eax, eax
	js	$LN5@xmlTextWri

; 1035 :         return -1;
; 1036 :     sum += count;

	add	eax, edi
	pop	edi

; 1037 : 
; 1038 :     return sum;
; 1039 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
	npad	1
$LN24@xmlTextWri:
	DD	$LN12@xmlTextWri
	DD	$LN10@xmlTextWri
	DD	$LN16@xmlTextWri
	DD	$LN5@xmlTextWri
	DD	$LN5@xmlTextWri
_xmlTextWriterStartElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteComment
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_content$ = 12						; size = 4
_xmlTextWriterWriteComment PROC				; COMDAT

; 925  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _writer$[ebp]
	push	edi
	call	_xmlTextWriterStartComment
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	js	SHORT $LN6@xmlTextWri

; 926  :     int count;
; 927  :     int sum;
; 928  : 
; 929  :     sum = 0;
; 930  :     count = xmlTextWriterStartComment(writer);
; 931  :     if (count < 0)
; 932  :         return -1;
; 933  :     sum += count;
; 934  :     count = xmlTextWriterWriteString(writer, content);

	push	DWORD PTR _content$[ebp]
	push	edi
	call	_xmlTextWriterWriteString
	add	esp, 8

; 935  :     if (count < 0)

	test	eax, eax
	js	SHORT $LN6@xmlTextWri

; 936  :         return -1;
; 937  :     sum += count;
; 938  :     count = xmlTextWriterEndComment(writer);

	push	edi
	add	esi, eax
	call	_xmlTextWriterEndComment
	add	esp, 4

; 939  :     if (count < 0)

	test	eax, eax
	js	SHORT $LN6@xmlTextWri

; 941  :     sum += count;

	pop	edi
	add	eax, esi

; 942  : 
; 943  :     return sum;
; 944  : }

	pop	esi
	pop	ebp
	ret	0
$LN6@xmlTextWri:
	pop	edi

; 940  :         return -1;

	or	eax, -1

; 942  : 
; 943  :     return sum;
; 944  : }

	pop	esi
	pop	ebp
	ret	0
_xmlTextWriterWriteComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteVFormatComment
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_format$ = 12						; size = 4
_argptr$ = 16						; size = 4
_xmlTextWriterWriteVFormatComment PROC			; COMDAT

; 894  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN2@xmlTextWri

; 895  :     int rc;
; 896  :     xmlChar *buf;
; 897  : 
; 898  :     if (writer == NULL) {
; 899  :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0DE@JBFCJMHJ@xmlTextWriterWriteVFormatCommen@
	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 900  :                         "xmlTextWriterWriteVFormatComment : invalid writer!\n");
; 901  :         return -1;

	or	eax, -1
	pop	esi

; 912  : }

	pop	ebp
	ret	0
$LN2@xmlTextWri:
	push	edi

; 902  :     }
; 903  : 
; 904  :     buf = xmlTextWriterVSprintf(format, argptr);

	push	DWORD PTR _argptr$[ebp]
	push	DWORD PTR _format$[ebp]
	call	_xmlTextWriterVSprintf
	mov	edi, eax
	add	esp, 8

; 905  :     if (buf == NULL)

	test	edi, edi
	jne	SHORT $LN3@xmlTextWri

; 906  :         return -1;

	pop	edi
	or	eax, -1
	pop	esi

; 912  : }

	pop	ebp
	ret	0
$LN3@xmlTextWri:

; 907  : 
; 908  :     rc = xmlTextWriterWriteComment(writer, buf);

	push	edi
	push	esi
	call	_xmlTextWriterWriteComment

; 909  : 
; 910  :     xmlFree(buf);

	push	edi
	mov	esi, eax
	call	DWORD PTR _xmlFree
	add	esp, 12					; 0000000cH

; 911  :     return rc;

	mov	eax, esi
	pop	edi
	pop	esi

; 912  : }

	pop	ebp
	ret	0
_xmlTextWriterWriteVFormatComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterWriteFormatComment
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_format$ = 12						; size = 4
_xmlTextWriterWriteFormatComment PROC			; COMDAT

; 869  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	DWORD PTR _format$[ebp]
	push	DWORD PTR _writer$[ebp]
	call	_xmlTextWriterWriteVFormatComment
	add	esp, 12					; 0000000cH

; 870  :     int rc;
; 871  :     va_list ap;
; 872  : 
; 873  :     va_start(ap, format);
; 874  : 
; 875  :     rc = xmlTextWriterWriteVFormatComment(writer, format, ap);
; 876  : 
; 877  :     va_end(ap);
; 878  :     return rc;
; 879  : }

	pop	ebp
	ret	0
_xmlTextWriterWriteFormatComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndComment
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndComment PROC				; COMDAT

; 810  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 811  :     int count;
; 812  :     int sum;
; 813  :     xmlLinkPtr lk;
; 814  :     xmlTextWriterStackEntry *p;
; 815  : 
; 816  :     if (writer == NULL) {
; 817  :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0CL@GJMJAJAF@xmlTextWriterEndComment?5?3?5inval@
	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 818  :                         "xmlTextWriterEndComment : invalid writer!\n");
; 819  :         return -1;

	or	eax, -1
	pop	esi

; 854  : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:

; 820  :     }
; 821  : 
; 822  :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 823  :     if (lk == 0) {

	test	eax, eax
	jne	SHORT $LN5@xmlTextWri

; 824  :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0DI@MAGHMILC@xmlTextWriterEndComment?5?3?5not?5a@
	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 825  :                         "xmlTextWriterEndComment : not allowed in this context!\n");
; 826  :         return -1;

	or	eax, -1
	pop	esi

; 854  : }

	pop	ebp
	ret	0
$LN5@xmlTextWri:
	push	edi

; 827  :     }
; 828  : 
; 829  :     p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 830  :     if (p == 0)

	test	eax, eax
	je	SHORT $LN13@xmlTextWri

; 831  :         return -1;
; 832  : 
; 833  :     sum = 0;
; 834  :     switch (p->state) {

	cmp	DWORD PTR [eax+4], 16			; 00000010H
	jne	SHORT $LN13@xmlTextWri

; 835  :         case XML_TEXTWRITER_COMMENT:
; 836  :             count = xmlOutputBufferWriteString(writer->out, "-->");

	push	OFFSET ??_C@_03PNLDJJMO@?9?9?$DO@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 8

; 837  :             if (count < 0)

	test	edi, edi
	js	SHORT $LN13@xmlTextWri

; 838  :                 return -1;
; 839  :             sum += count;
; 840  :             break;
; 841  :         default:
; 842  :             return -1;
; 843  :     }
; 844  : 
; 845  :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN10@xmlTextWri

; 846  :         count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 847  :         if (count < 0)

	test	eax, eax
	js	SHORT $LN13@xmlTextWri

; 849  :         sum += count;

	add	edi, eax
$LN10@xmlTextWri:

; 850  :     }
; 851  : 
; 852  :     xmlListPopFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListPopFront
	add	esp, 4

; 853  :     return sum;

	mov	eax, edi
	pop	edi
	pop	esi

; 854  : }

	pop	ebp
	ret	0
$LN13@xmlTextWri:
	pop	edi

; 848  :             return -1;

	or	eax, -1
	pop	esi

; 854  : }

	pop	ebp
	ret	0
_xmlTextWriterEndComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartComment
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterStartComment PROC				; COMDAT

; 726  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN4@xmlTextWri

; 727  :     int count;
; 728  :     int sum;
; 729  :     xmlLinkPtr lk;
; 730  :     xmlTextWriterStackEntry *p;
; 731  : 
; 732  :     if (writer == NULL) {
; 733  :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0CN@DOOOICJG@xmlTextWriterStartComment?5?3?5inv@
	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 734  :                         "xmlTextWriterStartComment : invalid writer!\n");
; 735  :         return -1;

	or	eax, -1
	pop	esi

; 796  : 
; 797  :     return sum;
; 798  : }

	pop	ebp
	ret	0
$LN4@xmlTextWri:
	push	ebx
	push	edi

; 736  :     }
; 737  : 
; 738  :     sum = 0;
; 739  :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	xor	edi, edi
	call	_xmlListFront
	add	esp, 4

; 740  :     if (lk != 0) {

	test	eax, eax
	je	SHORT $LN7@xmlTextWri

; 741  :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	mov	ebx, eax
	add	esp, 4

; 742  :         if (p != 0) {

	test	ebx, ebx
	je	SHORT $LN7@xmlTextWri

; 743  :             switch (p->state) {

	mov	eax, DWORD PTR [ebx+4]
	sub	eax, edi
	je	SHORT $LN7@xmlTextWri
	sub	eax, 1
	je	SHORT $LN8@xmlTextWri
	sub	eax, 2
	je	SHORT $LN7@xmlTextWri

; 776  :                         "xmlTextWriterStartElement : out of memory!\n");
; 777  :         return -1;

	pop	edi
	pop	ebx
	or	eax, -1
	pop	esi

; 796  : 
; 797  :     return sum;
; 798  : }

	pop	ebp
	ret	0
$LN8@xmlTextWri:

; 744  :                 case XML_TEXTWRITER_TEXT:
; 745  :                 case XML_TEXTWRITER_NONE:
; 746  :                     break;
; 747  :                 case XML_TEXTWRITER_NAME:
; 748  :                     /* Output namespace declarations */
; 749  :                     count = xmlTextWriterOutputNSDecl(writer);

	push	esi
	call	_xmlTextWriterOutputNSDecl
	mov	edi, eax
	add	esp, 4

; 750  :                     if (count < 0)

	test	edi, edi
	js	SHORT $LN19@xmlTextWri

; 751  :                         return -1;
; 752  :                     sum += count;
; 753  :                     count = xmlOutputBufferWriteString(writer->out, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 754  :                     if (count < 0)

	test	eax, eax
	js	SHORT $LN19@xmlTextWri

; 755  :                         return -1;
; 756  :                     sum += count;

	add	edi, eax

; 757  :                     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN11@xmlTextWri

; 758  :                         count =

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 759  :                             xmlOutputBufferWriteString(writer->out, "\n");
; 760  :                         if (count < 0)

	test	eax, eax
	js	SHORT $LN19@xmlTextWri

; 761  :                             return -1;
; 762  :                         sum += count;

	add	edi, eax
$LN11@xmlTextWri:

; 763  :                     }
; 764  :                     p->state = XML_TEXTWRITER_TEXT;

	mov	DWORD PTR [ebx+4], 3
$LN7@xmlTextWri:

; 765  :                     break;
; 766  :                 default:
; 767  :                     return -1;
; 768  :             }
; 769  :         }
; 770  :     }
; 771  : 
; 772  :     p = (xmlTextWriterStackEntry *)

	push	8
	call	DWORD PTR _xmlMalloc
	add	esp, 4

; 773  :         xmlMalloc(sizeof(xmlTextWriterStackEntry));
; 774  :     if (p == 0) {

	test	eax, eax
	jne	SHORT $LN14@xmlTextWri

; 775  :         xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CM@FINCADKE@xmlTextWriterStartElement?5?3?5out@
	push	2
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH
$LN19@xmlTextWri:

; 776  :                         "xmlTextWriterStartElement : out of memory!\n");
; 777  :         return -1;

	pop	edi
	pop	ebx
	or	eax, -1
	pop	esi

; 796  : 
; 797  :     return sum;
; 798  : }

	pop	ebp
	ret	0
$LN14@xmlTextWri:

; 778  :     }
; 779  : 
; 780  :     p->name = NULL;
; 781  :     p->state = XML_TEXTWRITER_COMMENT;
; 782  : 
; 783  :     xmlListPushFront(writer->nodes, p);

	push	eax
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 16			; 00000010H
	push	DWORD PTR [esi+4]
	call	_xmlListPushFront
	add	esp, 8

; 784  : 
; 785  :     if (writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	je	SHORT $LN15@xmlTextWri

; 786  :         count = xmlTextWriterWriteIndent(writer);

	push	esi
	call	_xmlTextWriterWriteIndent
	add	esp, 4

; 787  :         if (count < 0)

	test	eax, eax
	js	SHORT $LN19@xmlTextWri

; 788  :             return -1;
; 789  :         sum += count;

	add	edi, eax
$LN15@xmlTextWri:

; 790  :     }
; 791  : 
; 792  :     count = xmlOutputBufferWriteString(writer->out, "<!--");

	push	OFFSET ??_C@_04FFDNBKGC@?$DM?$CB?9?9@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 793  :     if (count < 0)

	test	eax, eax
	js	SHORT $LN19@xmlTextWri

; 794  :         return -1;
; 795  :     sum += count;

	add	eax, edi
	pop	edi
	pop	ebx
	pop	esi

; 796  : 
; 797  :     return sum;
; 798  : }

	pop	ebp
	ret	0
_xmlTextWriterStartComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterEndDocument
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlTextWriterEndDocument PROC				; COMDAT

; 640  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	jne	SHORT $LN6@xmlTextWri

; 641  :     int count;
; 642  :     int sum;
; 643  :     xmlLinkPtr lk;
; 644  :     xmlTextWriterStackEntry *p;
; 645  : 
; 646  :     if (writer == NULL) {
; 647  :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0CM@MFAOOHEJ@xmlTextWriterEndDocument?5?3?5inva@
	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 648  :                         "xmlTextWriterEndDocument : invalid writer!\n");
; 649  :         return -1;

	or	eax, -1
	pop	esi

; 712  : 
; 713  :     return sum;
; 714  : }

	pop	ebp
	ret	0
$LN6@xmlTextWri:
	push	edi

; 650  :     }
; 651  : 
; 652  :     sum = 0;
; 653  :     while ((lk = xmlListFront(writer->nodes)) != NULL) {

	push	DWORD PTR [esi+4]
	xor	edi, edi
	call	_xmlListFront
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@xmlTextWri
	npad	3
$LL2@xmlTextWri:

; 654  :         p = (xmlTextWriterStackEntry *) xmlLinkGetData(lk);

	push	eax
	call	_xmlLinkGetData
	add	esp, 4

; 655  :         if (p == 0)

	test	eax, eax
	je	SHORT $LN3@xmlTextWri

; 656  :             break;
; 657  :         switch (p->state) {

	mov	eax, DWORD PTR [eax+4]
	dec	eax
	cmp	eax, 15					; 0000000fH
	ja	SHORT $LN18@xmlTextWri
	movzx	eax, BYTE PTR $LN37@xmlTextWri[eax]
	jmp	DWORD PTR $LN42@xmlTextWri[eax*4]
$LN8@xmlTextWri:

; 658  :             case XML_TEXTWRITER_NAME:
; 659  :             case XML_TEXTWRITER_ATTRIBUTE:
; 660  :             case XML_TEXTWRITER_TEXT:
; 661  :                 count = xmlTextWriterEndElement(writer);

	push	esi
	call	_xmlTextWriterEndElement

; 662  :                 if (count < 0)
; 663  :                     return -1;
; 664  :                 sum += count;
; 665  :                 break;

	jmp	SHORT $LN40@xmlTextWri
$LN10@xmlTextWri:

; 666  :             case XML_TEXTWRITER_PI:
; 667  :             case XML_TEXTWRITER_PI_TEXT:
; 668  :                 count = xmlTextWriterEndPI(writer);

	push	esi
	call	_xmlTextWriterEndPI

; 669  :                 if (count < 0)
; 670  :                     return -1;
; 671  :                 sum += count;
; 672  :                 break;

	jmp	SHORT $LN40@xmlTextWri
$LN12@xmlTextWri:

; 673  :             case XML_TEXTWRITER_CDATA:
; 674  :                 count = xmlTextWriterEndCDATA(writer);

	push	esi
	call	_xmlTextWriterEndCDATA

; 675  :                 if (count < 0)
; 676  :                     return -1;
; 677  :                 sum += count;
; 678  :                 break;

	jmp	SHORT $LN40@xmlTextWri
$LN14@xmlTextWri:

; 679  :             case XML_TEXTWRITER_DTD:
; 680  :             case XML_TEXTWRITER_DTD_TEXT:
; 681  :             case XML_TEXTWRITER_DTD_ELEM:
; 682  :             case XML_TEXTWRITER_DTD_ELEM_TEXT:
; 683  :             case XML_TEXTWRITER_DTD_ATTL:
; 684  :             case XML_TEXTWRITER_DTD_ATTL_TEXT:
; 685  :             case XML_TEXTWRITER_DTD_ENTY:
; 686  :             case XML_TEXTWRITER_DTD_ENTY_TEXT:
; 687  :             case XML_TEXTWRITER_DTD_PENT:
; 688  :                 count = xmlTextWriterEndDTD(writer);

	push	esi
	call	_xmlTextWriterEndDTD

; 689  :                 if (count < 0)
; 690  :                     return -1;
; 691  :                 sum += count;
; 692  :                 break;

	jmp	SHORT $LN40@xmlTextWri
$LN16@xmlTextWri:

; 693  :             case XML_TEXTWRITER_COMMENT:
; 694  :                 count = xmlTextWriterEndComment(writer);

	push	esi
	call	_xmlTextWriterEndComment
$LN40@xmlTextWri:

; 650  :     }
; 651  : 
; 652  :     sum = 0;
; 653  :     while ((lk = xmlListFront(writer->nodes)) != NULL) {

	add	esp, 4
	test	eax, eax
	js	SHORT $LN36@xmlTextWri
	add	edi, eax
$LN18@xmlTextWri:
	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4
	test	eax, eax
	jne	SHORT $LL2@xmlTextWri
$LN3@xmlTextWri:

; 695  :                 if (count < 0)
; 696  :                     return -1;
; 697  :                 sum += count;
; 698  :                 break;
; 699  :             default:
; 700  :                 break;
; 701  :         }
; 702  :     }
; 703  : 
; 704  :     if (!writer->indent) {

	cmp	DWORD PTR [esi+16], 0
	jne	SHORT $LN19@xmlTextWri

; 705  :         count = xmlOutputBufferWriteString(writer->out, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 706  :         if (count < 0)

	test	eax, eax
	jns	SHORT $LN20@xmlTextWri
$LN36@xmlTextWri:
	pop	edi

; 707  :             return -1;

	or	eax, -1
	pop	esi

; 712  : 
; 713  :     return sum;
; 714  : }

	pop	ebp
	ret	0
$LN20@xmlTextWri:

; 708  :         sum += count;

	add	edi, eax
$LN19@xmlTextWri:

; 4238 :     if (writer->out == NULL)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	jne	SHORT $LN24@xmlTextWri

; 709  :     }
; 710  : 
; 711  :     sum += xmlTextWriterFlush(writer);

	mov	eax, edi
	pop	edi
	pop	esi

; 712  : 
; 713  :     return sum;
; 714  : }

	pop	ebp
	ret	0
$LN24@xmlTextWri:

; 4241 :         count = xmlOutputBufferFlush(writer->out);

	push	eax
	call	_xmlOutputBufferFlush
	add	esp, 4

; 709  :     }
; 710  : 
; 711  :     sum += xmlTextWriterFlush(writer);

	add	eax, edi
	pop	edi
	pop	esi

; 712  : 
; 713  :     return sum;
; 714  : }

	pop	ebp
	ret	0
	npad	1
$LN42@xmlTextWri:
	DD	$LN8@xmlTextWri
	DD	$LN10@xmlTextWri
	DD	$LN12@xmlTextWri
	DD	$LN14@xmlTextWri
	DD	$LN16@xmlTextWri
$LN37@xmlTextWri:
	DB	0
	DB	0
	DB	0
	DB	1
	DB	1
	DB	2
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	4
_xmlTextWriterEndDocument ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlTextWriterStartDocument
_TEXT	SEGMENT
tv481 = 8						; size = 4
_writer$ = 8						; size = 4
_version$ = 12						; size = 4
_encoding$ = 16						; size = 4
_standalone$ = 20					; size = 4
_xmlTextWriterStartDocument PROC			; COMDAT

; 521  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	$LN30@xmlTextWri

; 522  :     int count;
; 523  :     int sum;
; 524  :     xmlLinkPtr lk;
; 525  :     xmlCharEncodingHandlerPtr encoder;
; 526  : 
; 527  :     if ((writer == NULL) || (writer->out == NULL)) {

	cmp	DWORD PTR [esi], 0
	je	$LN3@xmlTextWri

; 528  :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,
; 529  :                         "xmlTextWriterStartDocument : invalid writer!\n");
; 530  :         return -1;
; 531  :     }
; 532  : 
; 533  :     lk = xmlListFront(writer->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListFront
	add	esp, 4

; 534  :     if ((lk != NULL) && (xmlLinkGetData(lk) != NULL)) {

	test	eax, eax
	je	SHORT $LN4@xmlTextWri
	push	eax
	call	_xmlLinkGetData
	add	esp, 4
	test	eax, eax
	je	SHORT $LN4@xmlTextWri

; 535  :         xmlWriterErrMsg(writer, XML_ERR_INTERNAL_ERROR,

	push	OFFSET ??_C@_0DL@JOCNHFIJ@xmlTextWriterStartDocument?5?3?5no@
	push	1
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 625  : 
; 626  :     return sum;
; 627  : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN4@xmlTextWri:

; 536  :                         "xmlTextWriterStartDocument : not allowed in this context!\n");
; 537  :         return -1;
; 538  :     }
; 539  : 
; 540  :     encoder = NULL;
; 541  :     if (encoding != NULL) {

	mov	eax, DWORD PTR _encoding$[ebp]
	xor	ecx, ecx
	test	eax, eax
	je	SHORT $LN6@xmlTextWri

; 542  :         encoder = xmlFindCharEncodingHandler(encoding);

	push	eax
	call	_xmlFindCharEncodingHandler
	mov	ecx, eax
	add	esp, 4

; 543  :         if (encoder == NULL) {

	test	ecx, ecx
	jne	SHORT $LN6@xmlTextWri

; 544  :             xmlWriterErrMsg(writer, XML_ERR_NO_MEMORY,

	push	OFFSET ??_C@_0CN@ODOCGFDE@xmlTextWriterStartDocument?5?3?5ou@
	push	2
	push	esi
	call	_xmlWriterErrMsg
	add	esp, 12					; 0000000cH

; 625  : 
; 626  :     return sum;
; 627  : }

	or	eax, -1
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN6@xmlTextWri:

; 545  :                             "xmlTextWriterStartDocument : out of memory!\n");
; 546  :             return -1;
; 547  :         }
; 548  :     }
; 549  : 
; 550  :     writer->out->encoder = encoder;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax+12], ecx
	mov	eax, DWORD PTR [esi]

; 551  :     if (encoder != NULL) {

	test	ecx, ecx
	je	SHORT $LN7@xmlTextWri

; 552  : 	if (writer->out->conv == NULL) {

	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN9@xmlTextWri

; 553  : 	    writer->out->conv = xmlBufCreateSize(4000);

	push	4000					; 00000fa0H
	call	_xmlBufCreateSize
	mov	ecx, DWORD PTR [esi]
	add	esp, 4
	mov	DWORD PTR [ecx+20], eax
	mov	eax, DWORD PTR [esi]
$LN9@xmlTextWri:

; 554  : 	}
; 555  :         xmlCharEncOutput(writer->out, 1);

	push	1
	push	eax
	call	_xmlCharEncOutput

; 556  :         if ((writer->doc != NULL) && (writer->doc->encoding == NULL))

	mov	eax, DWORD PTR [esi+40]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@xmlTextWri
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN8@xmlTextWri

; 557  :             writer->doc->encoding = xmlStrdup((xmlChar *)writer->out->encoder->name);

	mov	eax, DWORD PTR [esi]
	mov	eax, DWORD PTR [eax+12]
	push	DWORD PTR [eax]
	call	_xmlStrdup
	mov	ecx, DWORD PTR [esi+40]
	add	esp, 4
	mov	DWORD PTR [ecx+60], eax

; 558  :     } else

	jmp	SHORT $LN8@xmlTextWri
$LN7@xmlTextWri:

; 559  :         writer->out->conv = NULL;

	mov	DWORD PTR [eax+20], 0
$LN8@xmlTextWri:

; 560  : 
; 561  :     sum = 0;
; 562  :     count = xmlOutputBufferWriteString(writer->out, "<?xml version=");

	push	OFFSET ??_C@_0P@CNJADHFP@?$DM?$DPxml?5version?$DN@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	mov	edi, eax
	add	esp, 8

; 563  :     if (count < 0)

	test	edi, edi
	js	$LN31@xmlTextWri

; 564  :         return -1;
; 565  :     sum += count;
; 566  :     count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	lea	ebx, DWORD PTR [esi+28]
	push	ebx
	push	1
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 567  :     if (count < 0)

	test	eax, eax
	js	$LN31@xmlTextWri

; 568  :         return -1;
; 569  :     sum += count;
; 570  :     if (version != 0)
; 571  :         count = xmlOutputBufferWriteString(writer->out, version);
; 572  :     else
; 573  :         count = xmlOutputBufferWriteString(writer->out, "1.0");
; 574  :     if (count < 0)

	mov	ecx, DWORD PTR _version$[ebp]
	add	edi, eax
	test	ecx, ecx
	mov	eax, OFFSET ??_C@_03HLLJOCDO@1?40@
	cmovne	eax, ecx
	push	eax
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8
	mov	DWORD PTR tv481[ebp], eax
	test	eax, eax
	js	$LN31@xmlTextWri

; 575  :         return -1;
; 576  :     sum += count;
; 577  :     count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 578  :     if (count < 0)

	test	eax, eax
	js	$LN31@xmlTextWri

; 579  :         return -1;
; 580  :     sum += count;

	add	eax, DWORD PTR tv481[ebp]
	add	edi, eax

; 581  :     if (writer->out->encoder != 0) {

	mov	eax, DWORD PTR [esi]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN17@xmlTextWri

; 582  :         count = xmlOutputBufferWriteString(writer->out, " encoding=");

	push	OFFSET ??_C@_0L@GJNPICMJ@?5encoding?$DN@
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 583  :         if (count < 0)

	test	eax, eax
	js	$LN31@xmlTextWri

; 584  :             return -1;
; 585  :         sum += count;
; 586  :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 587  :         if (count < 0)

	test	eax, eax
	js	$LN31@xmlTextWri

; 588  :             return -1;
; 589  :         sum += count;
; 590  :         count =

	mov	ecx, DWORD PTR [esi]
	add	edi, eax
	mov	eax, DWORD PTR [ecx+12]
	push	DWORD PTR [eax]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 591  :             xmlOutputBufferWriteString(writer->out,
; 592  :                                        writer->out->encoder->name);
; 593  :         if (count < 0)

	test	eax, eax
	js	$LN31@xmlTextWri

; 594  :             return -1;
; 595  :         sum += count;
; 596  :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 597  :         if (count < 0)

	test	eax, eax
	js	$LN31@xmlTextWri

; 598  :             return -1;
; 599  :         sum += count;

	add	edi, eax
$LN17@xmlTextWri:

; 600  :     }
; 601  : 
; 602  :     if (standalone != 0) {

	cmp	DWORD PTR _standalone$[ebp], 0
	je	SHORT $LN22@xmlTextWri

; 603  :         count = xmlOutputBufferWriteString(writer->out, " standalone=");

	push	OFFSET ??_C@_0N@BGGHLCGN@?5standalone?$DN@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 604  :         if (count < 0)

	test	eax, eax
	js	$LN31@xmlTextWri

; 605  :             return -1;
; 606  :         sum += count;
; 607  :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 608  :         if (count < 0)

	test	eax, eax
	js	$LN31@xmlTextWri

; 609  :             return -1;
; 610  :         sum += count;
; 611  :         count = xmlOutputBufferWriteString(writer->out, standalone);

	push	DWORD PTR _standalone$[ebp]
	add	edi, eax
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 612  :         if (count < 0)

	test	eax, eax
	js	$LN31@xmlTextWri

; 613  :             return -1;
; 614  :         sum += count;
; 615  :         count = xmlOutputBufferWrite(writer->out, 1, &writer->qchar);

	push	ebx
	push	1
	push	DWORD PTR [esi]
	add	edi, eax
	call	_xmlOutputBufferWrite
	add	esp, 12					; 0000000cH

; 616  :         if (count < 0)

	test	eax, eax
	js	SHORT $LN31@xmlTextWri

; 617  :             return -1;
; 618  :         sum += count;

	add	edi, eax
$LN22@xmlTextWri:

; 619  :     }
; 620  : 
; 621  :     count = xmlOutputBufferWriteString(writer->out, "?>\n");

	push	OFFSET ??_C@_03KCOJOIAE@?$DP?$DO?6@
	push	DWORD PTR [esi]
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 622  :     if (count < 0)

	test	eax, eax
	js	SHORT $LN31@xmlTextWri

; 623  :         return -1;
; 624  :     sum += count;

	add	eax, edi
	pop	edi

; 625  : 
; 626  :     return sum;
; 627  : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN3@xmlTextWri:

; 138  : 	__xmlRaiseError(NULL, NULL, NULL, ctxt->ctxt,

	push	OFFSET ??_C@_0CO@KMFPACDM@xmlTextWriterStartDocument?5?3?5in@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	1
	push	25					; 00000019H
	push	0
	push	DWORD PTR [esi+32]

; 139  : 	            NULL, XML_FROM_WRITER, error, XML_ERR_FATAL,
; 140  : 		    NULL, 0, NULL, NULL, NULL, 0, 0, "%s", msg);
; 141  :     } else {

	jmp	SHORT $LN33@xmlTextWri
$LN30@xmlTextWri:

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CO@KMFPACDM@xmlTextWriterStartDocument?5?3?5in@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	1
	push	25					; 00000019H
	push	0
	push	0
$LN33@xmlTextWri:

; 625  : 
; 626  :     return sum;
; 627  : }

	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
$LN31@xmlTextWri:
	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	pop	ebp
	ret	0
_xmlTextWriterStartDocument ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlFreeTextWriter
_TEXT	SEGMENT
_writer$ = 8						; size = 4
_xmlFreeTextWriter PROC					; COMDAT

; 478  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _writer$[ebp]
	test	esi, esi
	je	$LN1@xmlFreeTex

; 479  :     if (writer == NULL)
; 480  :         return;
; 481  : 
; 482  :     if (writer->out != NULL)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@xmlFreeTex

; 483  :         xmlOutputBufferClose(writer->out);

	push	eax
	call	_xmlOutputBufferClose
	add	esp, 4
$LN3@xmlFreeTex:

; 484  : 
; 485  :     if (writer->nodes != NULL)

	mov	eax, DWORD PTR [esi+4]
	test	eax, eax
	je	SHORT $LN4@xmlFreeTex

; 486  :         xmlListDelete(writer->nodes);

	push	eax
	call	_xmlListDelete
	add	esp, 4
$LN4@xmlFreeTex:

; 487  : 
; 488  :     if (writer->nsstack != NULL)

	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN5@xmlFreeTex

; 489  :         xmlListDelete(writer->nsstack);

	push	eax
	call	_xmlListDelete
	add	esp, 4
$LN5@xmlFreeTex:

; 490  : 
; 491  :     if (writer->ctxt != NULL) {

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN6@xmlFreeTex

; 492  :         if ((writer->ctxt->myDoc != NULL) && (writer->no_doc_free == 0)) {

	mov	ecx, DWORD PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN7@xmlFreeTex
	cmp	DWORD PTR [esi+36], 0
	jne	SHORT $LN7@xmlFreeTex

; 493  : 	    xmlFreeDoc(writer->ctxt->myDoc);

	push	ecx
	call	_xmlFreeDoc

; 494  : 	    writer->ctxt->myDoc = NULL;

	mov	eax, DWORD PTR [esi+32]
	add	esp, 4
	mov	DWORD PTR [eax+8], 0
	mov	eax, DWORD PTR [esi+32]
$LN7@xmlFreeTex:

; 495  : 	}
; 496  :         xmlFreeParserCtxt(writer->ctxt);

	push	eax
	call	_xmlFreeParserCtxt
	add	esp, 4
$LN6@xmlFreeTex:

; 497  :     }
; 498  : 
; 499  :     if (writer->doc != NULL)

	mov	eax, DWORD PTR [esi+40]
	test	eax, eax
	je	SHORT $LN8@xmlFreeTex

; 500  :         xmlFreeDoc(writer->doc);

	push	eax
	call	_xmlFreeDoc
	add	esp, 4
$LN8@xmlFreeTex:

; 501  : 
; 502  :     if (writer->ichar != NULL)

	mov	eax, DWORD PTR [esi+24]
	test	eax, eax
	je	SHORT $LN9@xmlFreeTex

; 503  :         xmlFree(writer->ichar);

	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN9@xmlFreeTex:

; 504  :     xmlFree(writer);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN1@xmlFreeTex:
	pop	esi

; 505  : }

	pop	ebp
	ret	0
_xmlFreeTextWriter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlNewTextWriterTree
_TEXT	SEGMENT
_saxHandler$ = -128					; size = 128
_doc$ = 8						; size = 4
_node$ = 12						; size = 4
_compression$ = 16					; size = 4
_xmlNewTextWriterTree PROC				; COMDAT

; 424  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _doc$[ebp]
	test	edi, edi
	jne	SHORT $LN2@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CP@PFMBJEMH@xmlNewTextWriterTree?5?3?5invalid?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	3
	push	1
	push	25					; 00000019H
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 425  :     xmlTextWriterPtr ret;
; 426  :     xmlSAXHandler saxHandler;
; 427  :     xmlParserCtxtPtr ctxt;
; 428  : 
; 429  :     if (doc == NULL) {
; 430  :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 431  :                         "xmlNewTextWriterTree : invalid document tree!\n");
; 432  :         return NULL;

	xor	eax, eax
	pop	edi

; 468  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@xmlNewText:
	push	esi

; 433  :     }
; 434  : 
; 435  :     memset(&saxHandler, '\0', sizeof(saxHandler));

	push	128					; 00000080H
	lea	eax, DWORD PTR _saxHandler$[ebp]
	push	0
	push	eax
	call	_memset

; 436  :     xmlSAX2InitDefaultSAXHandler(&saxHandler, 1);

	lea	eax, DWORD PTR _saxHandler$[ebp]
	push	1
	push	eax
	call	_xmlSAX2InitDefaultSAXHandler

; 437  :     saxHandler.startDocument = xmlTextWriterStartDocumentCallback;
; 438  :     saxHandler.startElement = xmlSAX2StartElement;
; 439  :     saxHandler.endElement = xmlSAX2EndElement;
; 440  : 
; 441  :     ctxt = xmlCreatePushParserCtxt(&saxHandler, NULL, NULL, 0, NULL);

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _saxHandler$[ebp]
	mov	DWORD PTR _saxHandler$[ebp+48], OFFSET _xmlTextWriterStartDocumentCallback
	push	0
	push	eax
	mov	DWORD PTR _saxHandler$[ebp+56], OFFSET _xmlSAX2StartElement
	mov	DWORD PTR _saxHandler$[ebp+60], OFFSET _xmlSAX2EndElement
	call	_xmlCreatePushParserCtxt
	mov	esi, eax
	add	esp, 40					; 00000028H

; 442  :     if (ctxt == NULL) {

	test	esi, esi
	jne	SHORT $LN3@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0DJ@MHFIEMJE@xmlNewTextWriterDoc?5?3?5error?5at?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	1
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 443  :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 444  :                         "xmlNewTextWriterDoc : error at xmlCreatePushParserCtxt!\n");
; 445  :         return NULL;

	xor	eax, eax
	pop	esi
	pop	edi

; 468  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@xmlNewText:
	push	ebx

; 446  :     }
; 447  :     /*
; 448  :      * For some reason this seems to completely break if node names
; 449  :      * are interned.
; 450  :      */
; 451  :     ctxt->dictNames = 0;
; 452  : 
; 453  :     ret = xmlNewTextWriterPushParser(ctxt, compression);

	push	DWORD PTR _compression$[ebp]
	mov	DWORD PTR [esi+364], 0
	push	esi
	call	_xmlNewTextWriterPushParser
	mov	ebx, eax
	add	esp, 8

; 454  :     if (ret == NULL) {

	test	ebx, ebx
	jne	SHORT $LN4@xmlNewText

; 455  :         xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0DM@HKPAOPJL@xmlNewTextWriterDoc?5?3?5error?5at?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	3
	push	1
	push	25					; 00000019H
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	ebx
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 456  :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 457  :                         "xmlNewTextWriterDoc : error at xmlNewTextWriterPushParser!\n");
; 458  :         return NULL;

	xor	eax, eax
	pop	ebx
	pop	esi
	pop	edi

; 468  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@xmlNewText:

; 459  :     }
; 460  : 
; 461  :     ctxt->myDoc = doc;
; 462  :     ctxt->node = node;
; 463  :     ret->no_doc_free = 1;
; 464  : 
; 465  :     xmlSetDocCompressMode(doc, compression);

	push	DWORD PTR _compression$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [esi+8], edi
	mov	DWORD PTR [esi+52], eax
	push	edi
	mov	DWORD PTR [ebx+36], 1
	call	_xmlSetDocCompressMode
	add	esp, 8

; 466  : 
; 467  :     return ret;

	mov	eax, ebx
	pop	ebx
	pop	esi
	pop	edi

; 468  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_xmlNewTextWriterTree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlNewTextWriterDoc
_TEXT	SEGMENT
_saxHandler$ = -128					; size = 128
_doc$ = 8						; size = 4
_compression$ = 12					; size = 4
_xmlNewTextWriterDoc PROC				; COMDAT

; 361  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	128					; 00000080H
	lea	eax, DWORD PTR _saxHandler$[ebp]
	push	0
	push	eax
	call	_memset
	lea	eax, DWORD PTR _saxHandler$[ebp]
	push	1
	push	eax
	call	_xmlSAX2InitDefaultSAXHandler
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _saxHandler$[ebp]
	mov	DWORD PTR _saxHandler$[ebp+48], OFFSET _xmlTextWriterStartDocumentCallback
	push	0
	push	eax
	mov	DWORD PTR _saxHandler$[ebp+56], OFFSET _xmlSAX2StartElement
	mov	DWORD PTR _saxHandler$[ebp+60], OFFSET _xmlSAX2EndElement
	call	_xmlCreatePushParserCtxt
	mov	esi, eax
	add	esp, 40					; 00000028H
	test	esi, esi
	jne	SHORT $LN2@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0DJ@MHFIEMJE@xmlNewTextWriterDoc?5?3?5error?5at?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	1
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 362  :     xmlTextWriterPtr ret;
; 363  :     xmlSAXHandler saxHandler;
; 364  :     xmlParserCtxtPtr ctxt;
; 365  : 
; 366  :     memset(&saxHandler, '\0', sizeof(saxHandler));
; 367  :     xmlSAX2InitDefaultSAXHandler(&saxHandler, 1);
; 368  :     saxHandler.startDocument = xmlTextWriterStartDocumentCallback;
; 369  :     saxHandler.startElement = xmlSAX2StartElement;
; 370  :     saxHandler.endElement = xmlSAX2EndElement;
; 371  : 
; 372  :     ctxt = xmlCreatePushParserCtxt(&saxHandler, NULL, NULL, 0, NULL);
; 373  :     if (ctxt == NULL) {
; 374  :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 375  :                 "xmlNewTextWriterDoc : error at xmlCreatePushParserCtxt!\n");
; 376  :         return NULL;

	xor	eax, eax
	pop	esi

; 409  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@xmlNewText:

; 377  :     }
; 378  :     /*
; 379  :      * For some reason this seems to completely break if node names
; 380  :      * are interned.
; 381  :      */
; 382  :     ctxt->dictNames = 0;
; 383  : 
; 384  :     ctxt->myDoc = xmlNewDoc(BAD_CAST XML_DEFAULT_VERSION);

	push	OFFSET ??_C@_03HLLJOCDO@1?40@
	mov	DWORD PTR [esi+364], 0
	call	_xmlNewDoc
	add	esp, 4
	mov	DWORD PTR [esi+8], eax

; 385  :     if (ctxt->myDoc == NULL) {

	test	eax, eax
	jne	SHORT $LN3@xmlNewText

; 386  :         xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CL@MKPGDELP@xmlNewTextWriterDoc?5?3?5error?5at?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	1
	push	25					; 00000019H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 387  :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 388  :                         "xmlNewTextWriterDoc : error at xmlNewDoc!\n");
; 389  :         return NULL;

	xor	eax, eax
	pop	esi

; 409  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@xmlNewText:
	push	edi

; 390  :     }
; 391  : 
; 392  :     ret = xmlNewTextWriterPushParser(ctxt, compression);

	push	DWORD PTR _compression$[ebp]
	push	esi
	call	_xmlNewTextWriterPushParser
	mov	edi, eax
	add	esp, 8
	mov	eax, DWORD PTR [esi+8]

; 393  :     if (ret == NULL) {

	test	edi, edi
	jne	SHORT $LN4@xmlNewText

; 394  :         xmlFreeDoc(ctxt->myDoc);

	push	eax
	call	_xmlFreeDoc

; 395  :         xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0DM@HKPAOPJL@xmlNewTextWriterDoc?5?3?5error?5at?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	push	3
	push	1
	push	25					; 00000019H
	push	edi
	push	edi
	push	edi
	push	edi
	push	edi
	call	___xmlRaiseError
	add	esp, 76					; 0000004cH

; 396  :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 397  :                 "xmlNewTextWriterDoc : error at xmlNewTextWriterPushParser!\n");
; 398  :         return NULL;

	xor	eax, eax
	pop	edi
	pop	esi

; 409  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@xmlNewText:

; 399  :     }
; 400  : 
; 401  :     xmlSetDocCompressMode(ctxt->myDoc, compression);

	push	DWORD PTR _compression$[ebp]
	push	eax
	call	_xmlSetDocCompressMode

; 402  : 
; 403  :     if (doc != NULL) {

	mov	ecx, DWORD PTR _doc$[ebp]
	add	esp, 8
	test	ecx, ecx
	je	SHORT $LN5@xmlNewText

; 404  :         *doc = ctxt->myDoc;

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx], eax

; 405  : 	ret->no_doc_free = 1;

	mov	DWORD PTR [edi+36], 1
$LN5@xmlNewText:

; 406  :     }
; 407  : 
; 408  :     return ret;

	mov	eax, edi
	pop	edi
	pop	esi

; 409  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_xmlNewTextWriterDoc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlNewTextWriterPushParser
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_compression$ = 12					; size = 4
_xmlNewTextWriterPushParser PROC			; COMDAT

; 318  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	jne	SHORT $LN2@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CP@MDJJPOLB@xmlNewTextWriterPushParser?5?3?5in@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	push	3
	push	1
	push	25					; 00000019H
	push	esi
	push	esi
	push	esi
	push	esi
	push	esi
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 319  :     xmlTextWriterPtr ret;
; 320  :     xmlOutputBufferPtr out;
; 321  : 
; 322  :     if (ctxt == NULL) {
; 323  :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 324  :                         "xmlNewTextWriterPushParser : invalid context!\n");
; 325  :         return NULL;

	xor	eax, eax
	pop	esi

; 346  : 
; 347  :     return ret;
; 348  : }

	pop	ebp
	ret	0
$LN2@xmlNewText:
	push	edi

; 326  :     }
; 327  : 
; 328  :     out = xmlOutputBufferCreateIO(xmlTextWriterWriteDocCallback,

	push	0
	push	esi
	push	OFFSET _xmlTextWriterCloseDocCallback
	push	OFFSET _xmlTextWriterWriteDocCallback
	call	_xmlOutputBufferCreateIO
	mov	edi, eax
	add	esp, 16					; 00000010H

; 329  :                                   xmlTextWriterCloseDocCallback,
; 330  :                                   (void *) ctxt, NULL);
; 331  :     if (out == NULL) {

	test	edi, edi
	jne	SHORT $LN3@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0EA@BHKIBNFO@xmlNewTextWriterPushParser?5?3?5er@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	1
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 332  :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 333  :                         "xmlNewTextWriterPushParser : error at xmlOutputBufferCreateIO!\n");
; 334  :         return NULL;

	xor	eax, eax
	pop	edi
	pop	esi

; 346  : 
; 347  :     return ret;
; 348  : }

	pop	ebp
	ret	0
$LN3@xmlNewText:

; 335  :     }
; 336  : 
; 337  :     ret = xmlNewTextWriter(out);

	push	edi
	call	_xmlNewTextWriter
	add	esp, 4

; 338  :     if (ret == NULL) {

	test	eax, eax
	jne	SHORT $LN4@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0DJ@DOJNHAEH@xmlNewTextWriterPushParser?5?3?5er@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	1
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError

; 339  :         xmlWriterErrMsg(NULL, XML_ERR_INTERNAL_ERROR,
; 340  :                         "xmlNewTextWriterPushParser : error at xmlNewTextWriter!\n");
; 341  :         xmlOutputBufferClose(out);

	push	edi
	call	_xmlOutputBufferClose
	add	esp, 72					; 00000048H

; 342  :         return NULL;

	xor	eax, eax
	pop	edi
	pop	esi

; 346  : 
; 347  :     return ret;
; 348  : }

	pop	ebp
	ret	0
$LN4@xmlNewText:
	pop	edi

; 343  :     }
; 344  : 
; 345  :     ret->ctxt = ctxt;

	mov	DWORD PTR [eax+32], esi
	pop	esi

; 346  : 
; 347  :     return ret;
; 348  : }

	pop	ebp
	ret	0
_xmlNewTextWriterPushParser ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlNewTextWriterMemory
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_compression$ = 12					; size = 4
_xmlNewTextWriterMemory PROC				; COMDAT

; 279  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	0
	push	DWORD PTR _buf$[ebp]
	call	_xmlOutputBufferCreateBuffer
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	jne	SHORT $LN2@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CJ@HOKLKMGC@xmlNewTextWriterMemory?5?3?5out?5of@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	2
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 297  :         return NULL;
; 298  :     }
; 299  : 
; 300  :     return ret;
; 301  : }

	xor	eax, eax
	pop	esi
	pop	ebp
	ret	0
$LN2@xmlNewText:

; 280  :     xmlTextWriterPtr ret;
; 281  :     xmlOutputBufferPtr out;
; 282  : 
; 283  : /*::todo handle compression */
; 284  :     out = xmlOutputBufferCreateBuffer(buf, NULL);
; 285  : 
; 286  :     if (out == NULL) {
; 287  :         xmlWriterErrMsg(NULL, XML_ERR_NO_MEMORY,
; 288  :                         "xmlNewTextWriterMemory : out of memory!\n");
; 289  :         return NULL;
; 290  :     }
; 291  : 
; 292  :     ret = xmlNewTextWriter(out);

	push	esi
	call	_xmlNewTextWriter
	add	esp, 4

; 293  :     if (ret == NULL) {

	test	eax, eax
	jne	SHORT $LN1@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CJ@HOKLKMGC@xmlNewTextWriterMemory?5?3?5out?5of@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	2
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError

; 294  :         xmlWriterErrMsg(NULL, XML_ERR_NO_MEMORY,
; 295  :                         "xmlNewTextWriterMemory : out of memory!\n");
; 296  :         xmlOutputBufferClose(out);

	push	esi
	call	_xmlOutputBufferClose
	add	esp, 72					; 00000048H

; 297  :         return NULL;
; 298  :     }
; 299  : 
; 300  :     return ret;
; 301  : }

	xor	eax, eax
$LN1@xmlNewText:
	pop	esi
	pop	ebp
	ret	0
_xmlNewTextWriterMemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlNewTextWriterFilename
_TEXT	SEGMENT
_uri$ = 8						; size = 4
_compression$ = 12					; size = 4
_xmlNewTextWriterFilename PROC				; COMDAT

; 243  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _compression$[ebp]
	push	0
	push	DWORD PTR _uri$[ebp]
	call	_xmlOutputBufferCreateFilename
	mov	esi, eax
	add	esp, 12					; 0000000cH
	test	esi, esi
	jne	SHORT $LN2@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CM@BPKCIIPG@xmlNewTextWriterFilename?5?3?5cann@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	1516					; 000005ecH
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 244  :     xmlTextWriterPtr ret;
; 245  :     xmlOutputBufferPtr out;
; 246  : 
; 247  :     out = xmlOutputBufferCreateFilename(uri, NULL, compression);
; 248  :     if (out == NULL) {
; 249  :         xmlWriterErrMsg(NULL, XML_IO_EIO,
; 250  :                         "xmlNewTextWriterFilename : cannot open uri\n");
; 251  :         return NULL;

	xor	eax, eax
	pop	esi

; 264  :     return ret;
; 265  : }

	pop	ebp
	ret	0
$LN2@xmlNewText:

; 252  :     }
; 253  : 
; 254  :     ret = xmlNewTextWriter(out);

	push	esi
	call	_xmlNewTextWriter
	add	esp, 4

; 255  :     if (ret == NULL) {

	test	eax, eax
	jne	SHORT $LN3@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CL@DOKHFPFK@xmlNewTextWriterFilename?5?3?5out?5@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	2
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError

; 256  :         xmlWriterErrMsg(NULL, XML_ERR_NO_MEMORY,
; 257  :                         "xmlNewTextWriterFilename : out of memory!\n");
; 258  :         xmlOutputBufferClose(out);

	push	esi
	call	_xmlOutputBufferClose
	add	esp, 72					; 00000048H

; 259  :         return NULL;

	xor	eax, eax
	pop	esi

; 264  :     return ret;
; 265  : }

	pop	ebp
	ret	0
$LN3@xmlNewText:

; 260  :     }
; 261  : 
; 262  :     ret->indent = 0;

	mov	DWORD PTR [eax+16], 0

; 263  :     ret->doindent = 0;

	mov	DWORD PTR [eax+20], 0
	pop	esi

; 264  :     return ret;
; 265  : }

	pop	ebp
	ret	0
_xmlNewTextWriterFilename ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlwriter.c
;	COMDAT _xmlNewTextWriter
_TEXT	SEGMENT
_out$ = 8						; size = 4
_xmlNewTextWriter PROC					; COMDAT

; 182  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __DA396148_xmlwriter@c
	call	@__CheckForDebuggerJustMyCode@4
	push	44					; 0000002cH
	call	DWORD PTR _xmlMalloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN2@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CD@BLMOIHCP@xmlNewTextWriter?5?3?5out?5of?5memor@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	2
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 183  :     xmlTextWriterPtr ret;
; 184  : 
; 185  :     ret = (xmlTextWriterPtr) xmlMalloc(sizeof(xmlTextWriter));
; 186  :     if (ret == NULL) {
; 187  :         xmlWriterErrMsg(NULL, XML_ERR_NO_MEMORY,
; 188  :                         "xmlNewTextWriter : out of memory!\n");
; 189  :         return NULL;

	xor	eax, eax
	pop	esi

; 230  : }

	pop	ebp
	ret	0
$LN2@xmlNewText:

; 190  :     }
; 191  :     memset(ret, 0, (size_t) sizeof(xmlTextWriter));

	push	44					; 0000002cH
	push	0
	push	esi
	call	_memset

; 192  : 
; 193  :     ret->nodes = xmlListCreate(xmlFreeTextWriterStackEntry,

	push	OFFSET _xmlCmpTextWriterStackEntry
	push	OFFSET _xmlFreeTextWriterStackEntry
	call	_xmlListCreate
	add	esp, 20					; 00000014H
	mov	DWORD PTR [esi+4], eax

; 194  :                                xmlCmpTextWriterStackEntry);
; 195  :     if (ret->nodes == NULL) {

	test	eax, eax
	jne	SHORT $LN3@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CD@BLMOIHCP@xmlNewTextWriter?5?3?5out?5of?5memor@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	2
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError

; 196  :         xmlWriterErrMsg(NULL, XML_ERR_NO_MEMORY,
; 197  :                         "xmlNewTextWriter : out of memory!\n");
; 198  :         xmlFree(ret);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 72					; 00000048H

; 199  :         return NULL;

	xor	eax, eax
	pop	esi

; 230  : }

	pop	ebp
	ret	0
$LN3@xmlNewText:

; 200  :     }
; 201  : 
; 202  :     ret->nsstack = xmlListCreate(xmlFreeTextWriterNsStackEntry,

	push	OFFSET _xmlCmpTextWriterNsStackEntry
	push	OFFSET _xmlFreeTextWriterNsStackEntry
	call	_xmlListCreate
	add	esp, 8
	mov	DWORD PTR [esi+8], eax

; 203  :                                  xmlCmpTextWriterNsStackEntry);
; 204  :     if (ret->nsstack == NULL) {

	test	eax, eax
	jne	SHORT $LN4@xmlNewText

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CD@BLMOIHCP@xmlNewTextWriter?5?3?5out?5of?5memor@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	push	3
	push	2
	push	25					; 00000019H
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError

; 205  :         xmlWriterErrMsg(NULL, XML_ERR_NO_MEMORY,
; 206  :                         "xmlNewTextWriter : out of memory!\n");
; 207  :         xmlListDelete(ret->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListDelete
	add	esp, 72					; 00000048H

; 208  :         xmlFree(ret);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4

; 209  :         return NULL;

	xor	eax, eax
	pop	esi

; 230  : }

	pop	ebp
	ret	0
$LN4@xmlNewText:

; 210  :     }
; 211  : 
; 212  :     ret->out = out;

	mov	eax, DWORD PTR _out$[ebp]

; 213  :     ret->ichar = xmlStrdup(BAD_CAST " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	DWORD PTR [esi], eax
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR [esi+24], eax

; 214  :     ret->qchar = '"';

	mov	BYTE PTR [esi+28], 34			; 00000022H

; 215  : 
; 216  :     if (!ret->ichar) {

	test	eax, eax
	jne	SHORT $LN5@xmlNewText

; 217  :         xmlListDelete(ret->nodes);

	push	DWORD PTR [esi+4]
	call	_xmlListDelete

; 218  :         xmlListDelete(ret->nsstack);

	push	DWORD PTR [esi+8]
	call	_xmlListDelete

; 219  :         xmlFree(ret);

	push	esi
	call	DWORD PTR _xmlFree

; 142  : 	__xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_WRITER, error,

	push	OFFSET ??_C@_0CD@BLMOIHCP@xmlNewTextWriter?5?3?5out?5of?5memor@
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	2
	push	25					; 00000019H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 80					; 00000050H

; 220  :         xmlWriterErrMsg(NULL, XML_ERR_NO_MEMORY,
; 221  :                         "xmlNewTextWriter : out of memory!\n");
; 222  :         return NULL;

	xor	eax, eax
	pop	esi

; 230  : }

	pop	ebp
	ret	0
$LN5@xmlNewText:

; 223  :     }
; 224  : 
; 225  :     ret->doc = xmlNewDoc(NULL);

	push	0
	call	_xmlNewDoc
	add	esp, 4
	mov	DWORD PTR [esi+40], eax

; 226  : 
; 227  :     ret->no_doc_free = 0;

	mov	DWORD PTR [esi+36], 0

; 228  : 
; 229  :     return ret;

	mov	eax, esi
	pop	esi

; 230  : }

	pop	ebp
	ret	0
_xmlNewTextWriter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vsnprintf PROC						; COMDAT

; 1439 :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A452D4A0_stdio@h
	call	@__CheckForDebuggerJustMyCode@4
	call	___local_stdio_printf_options
	push	DWORD PTR __ArgList$[ebp]
	mov	ecx, eax
	push	0
	push	DWORD PTR __Format$[ebp]
	push	DWORD PTR __BufferCount$[ebp]
	mov	eax, DWORD PTR [ecx]
	push	DWORD PTR __Buffer$[ebp]
	or	eax, 2
	push	DWORD PTR [ecx+4]
	push	eax
	call	DWORD PTR __imp____stdio_common_vsprintf
	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx

; 1440 :         int const _Result = __stdio_common_vsprintf(
; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;
; 1445 :     }

	pop	ebp
	ret	0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
	mov	ecx, OFFSET __2CC6E67D_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
