; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\HTMLparser.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CL@ILDKNODA@greek?5capital?5letter?5omega?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_05IAEKHIAN@alpha@				; `string'
PUBLIC	??_C@_0CJ@NGKKADHM@greek?5small?5letter?5alpha?0?5U?$CL03B@ ; `string'
PUBLIC	??_C@_04PJMJLBJE@beta@				; `string'
PUBLIC	??_C@_0CI@HELPLLEJ@greek?5small?5letter?5beta?0?5U?$CL03B2@ ; `string'
PUBLIC	??_C@_05KDLBCAI@gamma@				; `string'
PUBLIC	??_C@_0CJ@GAGCCHKA@greek?5small?5letter?5gamma?0?5U?$CL03B@ ; `string'
PUBLIC	??_C@_05NCGEDJPM@delta@				; `string'
PUBLIC	??_C@_0CJ@BFJAILD@greek?5small?5letter?5delta?0?5U?$CL03B@ ; `string'
PUBLIC	??_C@_07DOCPLGLO@epsilon@			; `string'
PUBLIC	??_C@_0CL@DLPCDOME@greek?5small?5letter?5epsilon?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_04KJFJGNNH@zeta@				; `string'
PUBLIC	??_C@_0CI@BDECAAKJ@greek?5small?5letter?5zeta?0?5U?$CL03B6@ ; `string'
PUBLIC	??_C@_03PNFNLNLI@eta@				; `string'
PUBLIC	??_C@_0CH@KEKGFBMN@greek?5small?5letter?5eta?0?5U?$CL03B7?5@ ; `string'
PUBLIC	??_C@_05FECKLAFM@theta@				; `string'
PUBLIC	??_C@_0CJ@OCPPMBNL@greek?5small?5letter?5theta?0?5U?$CL03B@ ; `string'
PUBLIC	??_C@_04OBKEGAOB@iota@				; `string'
PUBLIC	??_C@_0CI@IFKGGLBF@greek?5small?5letter?5iota?0?5U?$CL03B9@ ; `string'
PUBLIC	??_C@_05MLHEGNBC@kappa@				; `string'
PUBLIC	??_C@_0CJ@FMCMBLI@greek?5small?5letter?5kappa?0?5U?$CL03B@ ; `string'
PUBLIC	??_C@_06COJIGPIB@lambda@			; `string'
PUBLIC	??_C@_0CK@PECPLDML@greek?5small?5letter?5lambda?0?5U?$CL03@ ; `string'
PUBLIC	??_C@_02BCPJPDCN@mu@				; `string'
PUBLIC	??_C@_0CG@GBCBMJNP@greek?5small?5letter?5mu?0?5U?$CL03BC?5I@ ; `string'
PUBLIC	??_C@_02BALPENHE@nu@				; `string'
PUBLIC	??_C@_0CG@CAKLFEAP@greek?5small?5letter?5nu?0?5U?$CL03BD?5I@ ; `string'
PUBLIC	??_C@_02OOGDMPOL@xi@				; `string'
PUBLIC	??_C@_0CG@HDKNCKDK@greek?5small?5letter?5xi?0?5U?$CL03BE?5I@ ; `string'
PUBLIC	??_C@_07PBNNEOII@omicron@			; `string'
PUBLIC	??_C@_0CH@GIJCJIME@greek?5small?5letter?5omicron?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_02OAHAJOFD@pi@				; `string'
PUBLIC	??_C@_0CG@KLOCKGKD@greek?5small?5letter?5pi?0?5U?$CL03C0?5I@ ; `string'
PUBLIC	??_C@_03LLCMKFAE@rho@				; `string'
PUBLIC	??_C@_0CH@IDBCMKBI@greek?5small?5letter?5rho?0?5U?$CL03C1?5@ ; `string'
PUBLIC	??_C@_06IAEFNBA@sigmaf@				; `string'
PUBLIC	??_C@_0CP@IIMCBNML@greek?5small?5letter?5final?5sigma?0@ ; `string'
PUBLIC	??_C@_05MNLBPJCA@sigma@				; `string'
PUBLIC	??_C@_0CJ@CGFNIIGJ@greek?5small?5letter?5sigma?0?5U?$CL03C@ ; `string'
PUBLIC	??_C@_03CBLLDLIM@tau@				; `string'
PUBLIC	??_C@_0CH@DHNJIMD@greek?5small?5letter?5tau?0?5U?$CL03C4?5@ ; `string'
PUBLIC	??_C@_07ECJEIHJF@upsilon@			; `string'
PUBLIC	??_C@_0CL@IFBHJODJ@greek?5small?5letter?5upsilon?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_03EHHPMKAJ@phi@				; `string'
PUBLIC	??_C@_0CH@KFHMBLGI@greek?5small?5letter?5phi?0?5U?$CL03C6?5@ ; `string'
PUBLIC	??_C@_03FNDDCHI@chi@				; `string'
PUBLIC	??_C@_0CH@FNBJGLJ@greek?5small?5letter?5chi?0?5U?$CL03C7?5@ ; `string'
PUBLIC	??_C@_03FHAMIGJI@psi@				; `string'
PUBLIC	??_C@_0CH@CAAILPN@greek?5small?5letter?5psi?0?5U?$CL03C8?5@ ; `string'
PUBLIC	??_C@_05OLLLNAFN@omega@				; `string'
PUBLIC	??_C@_0CJ@NIEIIOKC@greek?5small?5letter?5omega?0?5U?$CL03C@ ; `string'
PUBLIC	??_C@_08KICBPJKJ@thetasym@			; `string'
PUBLIC	??_C@_0CM@BLIOHCJH@greek?5small?5letter?5theta?5symbol@ ; `string'
PUBLIC	??_C@_05HPKIDMJD@upsih@				; `string'
PUBLIC	??_C@_0CL@EJFICJGP@greek?5upsilon?5with?5hook?5symbol?0@ ; `string'
PUBLIC	??_C@_03ILOHKOKA@piv@				; `string'
PUBLIC	??_C@_0CA@BEPNCOE@greek?5pi?5symbol?0?5U?$CL03D6?5ISOgrk3@ ; `string'
PUBLIC	??_C@_04MKHONPBA@ensp@				; `string'
PUBLIC	??_C@_0BI@MFLEMBMM@en?5space?0?5U?$CL2002?5ISOpub@ ; `string'
PUBLIC	??_C@_04NIMLHAPO@emsp@				; `string'
PUBLIC	??_C@_0BI@KECKOMLC@em?5space?0?5U?$CL2003?5ISOpub@ ; `string'
PUBLIC	??_C@_06KIEAGDHN@thinsp@			; `string'
PUBLIC	??_C@_0BK@BMAGNFEE@thin?5space?0?5U?$CL2009?5ISOpub@ ; `string'
PUBLIC	??_C@_04KBAMANKO@zwnj@				; `string'
PUBLIC	??_C@_0CL@DLBANCKG@zero?5width?5non?9joiner?0?5U?$CL200C?5N@ ; `string'
PUBLIC	??_C@_03BEJFJNOD@zwj@				; `string'
PUBLIC	??_C@_0CH@HBJLDPCB@zero?5width?5joiner?0?5U?$CL200D?5NEW?5R@ ; `string'
PUBLIC	??_C@_03CIGNMBIM@lrm@				; `string'
PUBLIC	??_C@_0CI@JMDAIFJP@left?9to?9right?5mark?0?5U?$CL200E?5NEW?5@ ; `string'
PUBLIC	??_C@_03IOBDGPFK@rlm@				; `string'
PUBLIC	??_C@_0CI@CAGBGDGP@right?9to?9left?5mark?0?5U?$CL200F?5NEW?5@ ; `string'
PUBLIC	??_C@_05GIHIEGDL@ndash@				; `string'
PUBLIC	??_C@_0BH@PNMIOILG@en?5dash?0?5U?$CL2013?5ISOpub@ ; `string'
PUBLIC	??_C@_05OOOMDEJF@mdash@				; `string'
PUBLIC	??_C@_0BH@KANBCIDP@em?5dash?0?5U?$CL2014?5ISOpub@ ; `string'
PUBLIC	??_C@_05OMKFBBEI@lsquo@				; `string'
PUBLIC	??_C@_0CK@GNEELPIK@left?5single?5quotation?5mark?0?5U?$CL2@ ; `string'
PUBLIC	??_C@_05NFHJHCKD@rsquo@				; `string'
PUBLIC	??_C@_0CL@GEEKPFIM@right?5single?5quotation?5mark?0?5U?$CL@ ; `string'
PUBLIC	??_C@_05EDKFBPDE@sbquo@				; `string'
PUBLIC	??_C@_0CI@NPEPNHFF@single?5low?99?5quotation?5mark?0?5U?$CL@ ; `string'
PUBLIC	??_C@_05DOGFFKNK@ldquo@				; `string'
PUBLIC	??_C@_0CK@DIJLOOKF@left?5double?5quotation?5mark?0?5U?$CL2@ ; `string'
PUBLIC	??_C@_05HLJDJDB@rdquo@				; `string'
PUBLIC	??_C@_0CL@ECIPNNCJ@right?5double?5quotation?5mark?0?5U?$CL@ ; `string'
PUBLIC	??_C@_05EGPDLKK@bdquo@				; `string'
PUBLIC	??_C@_0CI@JHNLBCGB@double?5low?99?5quotation?5mark?0?5U?$CL@ ; `string'
PUBLIC	??_C@_06DEOCNA@dagger@				; `string'
PUBLIC	??_C@_0BG@KCAEGFLE@dagger?0?5U?$CL2020?5ISOpub@	; `string'
PUBLIC	??_C@_06MPIJNLEM@Dagger@			; `string'
PUBLIC	??_C@_0BN@EMJEPPHC@double?5dagger?0?5U?$CL2021?5ISOpub@ ; `string'
PUBLIC	??_C@_04OELGKIO@bull@				; `string'
PUBLIC	??_C@_0CL@DGNFAKNB@bullet?5?$DN?5black?5small?5circle?0?5U?$CL@ ; `string'
PUBLIC	??_C@_06MHPIOHEE@hellip@			; `string'
PUBLIC	??_C@_0DG@IFMGDAHK@horizontal?5ellipsis?5?$DN?5three?5dot@ ; `string'
PUBLIC	??_C@_06BCNCCGDG@permil@			; `string'
PUBLIC	??_C@_0BP@MOFLNGGL@per?5mille?5sign?0?5U?$CL2030?5ISOtech@ ; `string'
PUBLIC	??_C@_05NIKGJPCK@prime@				; `string'
PUBLIC	??_C@_0CH@BOHNNDDJ@prime?5?$DN?5minutes?5?$DN?5feet?0?5U?$CL2032?5@ ; `string'
PUBLIC	??_C@_05NPAKJKBM@Prime@				; `string'
PUBLIC	??_C@_0DA@NOHFAGMO@double?5prime?5?$DN?5seconds?5?$DN?5inches@ ; `string'
PUBLIC	??_C@_06GELNDNKI@lsaquo@			; `string'
PUBLIC	??_C@_0DP@FIMACBKH@single?5left?9pointing?5angle?5quot@ ; `string'
PUBLIC	??_C@_06FDFMNKDL@rsaquo@			; `string'
PUBLIC	??_C@_0EA@GOMGFHEI@single?5right?9pointing?5angle?5quo@ ; `string'
PUBLIC	??_C@_05PHLALINO@oline@				; `string'
PUBLIC	??_C@_0CJ@PIHCOGHN@overline?5?$DN?5spacing?5overscore?0?5U@ ; `string'
PUBLIC	??_C@_05POHGDHA@frasl@				; `string'
PUBLIC	??_C@_0BL@ECLANJNI@fraction?5slash?0?5U?$CL2044?5NEW@ ; `string'
PUBLIC	??_C@_04IBPOGLCH@euro@				; `string'
PUBLIC	??_C@_0BG@JOOOHDJA@euro?5sign?0?5U?$CL20AC?5NEW@ ; `string'
PUBLIC	??_C@_05NGOMGBBD@image@				; `string'
PUBLIC	??_C@_0DH@HDIEDNLH@blackletter?5capital?5I?5?$DN?5imagina@ ; `string'
PUBLIC	??_C@_06PDPFIHAI@weierp@			; `string'
PUBLIC	??_C@_0DN@GALPCJE@script?5capital?5P?5?$DN?5power?5set?5?$DN?5@ ; `string'
PUBLIC	??_C@_04DGGKDJMA@real@				; `string'
PUBLIC	??_C@_0DJ@HIEIFFHC@blackletter?5capital?5R?5?$DN?5real?5pa@ ; `string'
PUBLIC	??_C@_05IJFCMOFM@trade@				; `string'
PUBLIC	??_C@_0BP@FGOALMKH@trade?5mark?5sign?0?5U?$CL2122?5ISOnum@ ; `string'
PUBLIC	??_C@_07HGDIPDGB@alefsym@			; `string'
PUBLIC	??_C@_0DF@FEFKAOCF@alef?5symbol?5?$DN?5first?5transfinite@ ; `string'
PUBLIC	??_C@_04KMPJKFIC@larr@				; `string'
PUBLIC	??_C@_0BP@MANNKCID@leftwards?5arrow?0?5U?$CL2190?5ISOnum@ ; `string'
PUBLIC	??_C@_04MBAJFAHB@uarr@				; `string'
PUBLIC	??_C@_0BN@OACCONEB@upwards?5arrow?0?5U?$CL2191?5ISOnum@ ; `string'
PUBLIC	??_C@_04HDCJIMGB@rarr@				; `string'
PUBLIC	??_C@_0CA@IGGHOOCM@rightwards?5arrow?0?5U?$CL2192?5ISOnum@ ; `string'
PUBLIC	??_C@_04JMIJOOED@darr@				; `string'
PUBLIC	??_C@_0BP@DOIMJHPM@downwards?5arrow?0?5U?$CL2193?5ISOnum@ ; `string'
PUBLIC	??_C@_04FJHJADEC@harr@				; `string'
PUBLIC	??_C@_0CB@IHAAEEFA@left?5right?5arrow?0?5U?$CL2194?5ISOams@ ; `string'
PUBLIC	??_C@_05IKKJKHCL@crarr@				; `string'
PUBLIC	??_C@_0EE@KKIJJMBC@downwards?5arrow?5with?5corner?5lef@ ; `string'
PUBLIC	??_C@_04MMLAKLM@lArr@				; `string'
PUBLIC	??_C@_0CH@MGOLKEFA@leftwards?5double?5arrow?0?5U?$CL21D0?5@ ; `string'
PUBLIC	??_C@_04GBDLPPEP@uArr@				; `string'
PUBLIC	??_C@_0CF@KBBKONBL@upwards?5double?5arrow?0?5U?$CL21D1?5IS@ ; `string'
PUBLIC	??_C@_04NDBLCDFP@rArr@				; `string'
PUBLIC	??_C@_0CI@IKAGJDHN@rightwards?5double?5arrow?0?5U?$CL21D2@ ; `string'
PUBLIC	??_C@_04DMLLEBHN@dArr@				; `string'
PUBLIC	??_C@_0CH@GBOLFAFE@downwards?5double?5arrow?0?5U?$CL21D3?5@ ; `string'
PUBLIC	??_C@_04PJELKMHM@hArr@				; `string'
PUBLIC	??_C@_0CI@IFCBBNJJ@left?5right?5double?5arrow?0?5U?$CL21D4@ ; `string'
PUBLIC	??_C@_06PLFKNBPH@forall@			; `string'
PUBLIC	??_C@_0BI@NOOLIOLI@for?5all?0?5U?$CL2200?5ISOtech@ ; `string'
PUBLIC	??_C@_04FPLDHIIH@part@				; `string'
PUBLIC	??_C@_0CF@GGOIFMBL@partial?5differential?0?5U?$CL2202?5IS@ ; `string'
PUBLIC	??_C@_05IEGMLJMJ@exist@				; `string'
PUBLIC	??_C@_0BN@EAFHKNPG@there?5exists?0?5U?$CL2203?5ISOtech@ ; `string'
PUBLIC	??_C@_05LBJMNBOG@empty@				; `string'
PUBLIC	??_C@_0DA@LKCPIGBO@empty?5set?5?$DN?5null?5set?5?$DN?5diameter@ ; `string'
PUBLIC	??_C@_05HEJFDJKB@nabla@				; `string'
PUBLIC	??_C@_0CM@GCEKGKCK@nabla?5?$DN?5backward?5difference?0?5U?$CL@ ; `string'
PUBLIC	??_C@_04GIANKECK@isin@				; `string'
PUBLIC	??_C@_0BL@GDBOMBIM@element?5of?0?5U?$CL2208?5ISOtech@ ; `string'
PUBLIC	??_C@_05DPIEFBKH@notin@				; `string'
PUBLIC	??_C@_0CC@DDLOCPFN@not?5an?5element?5of?0?5U?$CL2209?5ISOte@ ; `string'
PUBLIC	??_C@_02PGMIBACJ@ni@				; `string'
PUBLIC	??_C@_0CD@BGLAPDGA@contains?5as?5member?0?5U?$CL220B?5ISOt@ ; `string'
PUBLIC	??_C@_04EDCDKCIE@prod@				; `string'
PUBLIC	??_C@_0CN@JGMMGEDP@n?9ary?5product?5?$DN?5product?5sign?0?5U@ ; `string'
PUBLIC	??_C@_03CFFIJAMA@sum@				; `string'
PUBLIC	??_C@_0CA@MLFCAEFK@n?9ary?5summation?0?5U?$CL2211?5ISOamsb@ ; `string'
PUBLIC	??_C@_05ODKEFHFK@minus@				; `string'
PUBLIC	??_C@_0BL@FJCONNGD@minus?5sign?0?5U?$CL2212?5ISOtech@ ; `string'
PUBLIC	??_C@_06CKLHNNN@lowast@				; `string'
PUBLIC	??_C@_0CC@CNKJAFM@asterisk?5operator?0?5U?$CL2217?5ISOte@ ; `string'
PUBLIC	??_C@_05BBBHAEPE@radic@				; `string'
PUBLIC	??_C@_0CL@ILNDCHNK@square?5root?5?$DN?5radical?5sign?0?5U?$CL2@ ; `string'
PUBLIC	??_C@_04GNINHFNB@prop@				; `string'
PUBLIC	??_C@_0CA@BMLNCKCC@proportional?5to?0?5U?$CL221D?5ISOtech@ ; `string'
PUBLIC	??_C@_05OFPBNHLL@infin@				; `string'
PUBLIC	??_C@_0BJ@MNMMNFFJ@infinity?0?5U?$CL221E?5ISOtech@ ; `string'
PUBLIC	??_C@_03DFNEKLMP@ang@				; `string'
PUBLIC	??_C@_0BG@GBCFPCNE@angle?0?5U?$CL2220?5ISOamso@	; `string'
PUBLIC	??_C@_03BOPJPIAM@and@				; `string'
PUBLIC	??_C@_0CE@NKBACHGA@logical?5and?5?$DN?5wedge?0?5U?$CL2227?5ISO@ ; `string'
PUBLIC	??_C@_02FODMLBIE@or@				; `string'
PUBLIC	??_C@_0CB@FLAIEBBA@logical?5or?5?$DN?5vee?0?5U?$CL2228?5ISOtec@ ; `string'
PUBLIC	??_C@_03JBACKAOP@cap@				; `string'
PUBLIC	??_C@_0CD@JBIOOGBO@intersection?5?$DN?5cap?0?5U?$CL2229?5ISOt@ ; `string'
PUBLIC	??_C@_03IKCNKLED@cup@				; `string'
PUBLIC	??_C@_0BM@JDEPIPG@union?5?$DN?5cup?0?5U?$CL222A?5ISOtech@ ; `string'
PUBLIC	??_C@_03JBIPMCLC@int@				; `string'
PUBLIC	??_C@_0BJ@DAPJHJHO@integral?0?5U?$CL222B?5ISOtech@ ; `string'
PUBLIC	??_C@_06PLMBDDJI@there4@			; `string'
PUBLIC	??_C@_0BK@MEMCAFFC@therefore?0?5U?$CL2234?5ISOtech@ ; `string'
PUBLIC	??_C@_03DAGEMKNE@sim@				; `string'
PUBLIC	??_C@_0DK@DFMGNFEL@tilde?5operator?5?$DN?5varies?5with?5?$DN?5@ ; `string'
PUBLIC	??_C@_04OMPPPJGA@cong@				; `string'
PUBLIC	??_C@_0CH@JKKBMPFH@approximately?5equal?5to?0?5U?$CL2245?5@ ; `string'
PUBLIC	??_C@_05EKOANGCP@asymp@				; `string'
PUBLIC	??_C@_0DA@ELDFLNNK@almost?5equal?5to?5?$DN?5asymptotic?5to@ ; `string'
PUBLIC	??_C@_02FKHNFPCF@ne@				; `string'
PUBLIC	??_C@_0BN@PJGPJIIG@not?5equal?5to?0?5U?$CL2260?5ISOtech@ ; `string'
PUBLIC	??_C@_05LADEHHLL@equiv@				; `string'
PUBLIC	??_C@_0BN@MJCNDCCF@identical?5to?0?5U?$CL2261?5ISOtech@ ; `string'
PUBLIC	??_C@_02FJPJILEL@le@				; `string'
PUBLIC	??_C@_0CG@EDHLKJHI@less?9than?5or?5equal?5to?0?5U?$CL2264?5I@ ; `string'
PUBLIC	??_C@_02FFKMGEKK@ge@				; `string'
PUBLIC	??_C@_0CJ@OOFAGHNB@greater?9than?5or?5equal?5to?0?5U?$CL226@ ; `string'
PUBLIC	??_C@_0BK@JKNHIPAJ@subset?5of?0?5U?$CL2282?5ISOtech@ ; `string'
PUBLIC	??_C@_0BM@ICBAIMLO@superset?5of?0?5U?$CL2283?5ISOtech@ ; `string'
PUBLIC	??_C@_04GDKEGNCC@nsub@				; `string'
PUBLIC	??_C@_0CA@PMHNPAEI@not?5a?5subset?5of?0?5U?$CL2284?5ISOamsn@ ; `string'
PUBLIC	??_C@_04IIJHECPP@sube@				; `string'
PUBLIC	??_C@_0CG@IBKNAAAC@subset?5of?5or?5equal?5to?0?5U?$CL2286?5I@ ; `string'
PUBLIC	??_C@_04JHDFDFOB@supe@				; `string'
PUBLIC	??_C@_0CI@GNKICMCH@superset?5of?5or?5equal?5to?0?5U?$CL2287@ ; `string'
PUBLIC	??_C@_05GJJFMLCJ@oplus@				; `string'
PUBLIC	??_C@_0CK@PJJPJOGF@circled?5plus?5?$DN?5direct?5sum?0?5U?$CL22@ ; `string'
PUBLIC	??_C@_06JILOEKEG@otimes@			; `string'
PUBLIC	??_C@_0CP@BNGPDPFL@circled?5times?5?$DN?5vector?5product?0@ ; `string'
PUBLIC	??_C@_04LELNCKNE@perp@				; `string'
PUBLIC	??_C@_0DI@FJMFCLO@up?5tack?5?$DN?5orthogonal?5to?5?$DN?5perpe@ ; `string'
PUBLIC	??_C@_04DLDDMCEG@sdot@				; `string'
PUBLIC	??_C@_0BN@IIJHENBC@dot?5operator?0?5U?$CL22C5?5ISOamsb@ ; `string'
PUBLIC	??_C@_05GNCPEPNF@lceil@				; `string'
PUBLIC	??_C@_0CL@JGNLAJJH@left?5ceiling?5?$DN?5apl?5upstile?0?5U?$CL2@ ; `string'
PUBLIC	??_C@_05FEPDCMDO@rceil@				; `string'
PUBLIC	??_C@_0BO@BHDCDMKC@right?5ceiling?0?5U?$CL2309?5ISOamsc@ ; `string'
PUBLIC	??_C@_06JBCNAACH@lfloor@			; `string'
PUBLIC	??_C@_0CL@MFJOBEGJ@left?5floor?5?$DN?5apl?5downstile?0?5U?$CL2@ ; `string'
PUBLIC	??_C@_06KGMMOHLE@rfloor@			; `string'
PUBLIC	??_C@_0BM@CNFHBOON@right?5floor?0?5U?$CL230B?5ISOamsc@ ; `string'
PUBLIC	??_C@_0DC@PHLLJIFD@left?9pointing?5angle?5bracket?5?$DN?5b@ ; `string'
PUBLIC	??_C@_04FBKADAGB@rang@				; `string'
PUBLIC	??_C@_0DD@OPBENGIH@right?9pointing?5angle?5bracket?5?$DN?5@ ; `string'
PUBLIC	??_C@_03DJBAHFDJ@loz@				; `string'
PUBLIC	??_C@_0BH@EDOKOFKC@lozenge?0?5U?$CL25CA?5ISOpub@ ; `string'
PUBLIC	??_C@_06OOCJPKKB@spades@			; `string'
PUBLIC	??_C@_0CA@PJGGGHFM@black?5spade?5suit?0?5U?$CL2660?5ISOpub@ ; `string'
PUBLIC	??_C@_05IPDPNMDB@clubs@				; `string'
PUBLIC	??_C@_0CK@IOPKIONM@black?5club?5suit?5?$DN?5shamrock?0?5U?$CL2@ ; `string'
PUBLIC	??_C@_06LAHNGALJ@hearts@			; `string'
PUBLIC	??_C@_0CM@FKGBKKJF@black?5heart?5suit?5?$DN?5valentine?0?5U@ ; `string'
PUBLIC	??_C@_05IOPNOEAM@diams@				; `string'
PUBLIC	??_C@_0CC@EHCGNBJI@black?5diamond?5suit?0?5U?$CL2666?5ISOp@ ; `string'
PUBLIC	??_C@_04NEODDMOL@head@				; `string'
PUBLIC	??_C@_04IEJGKNJ@body@				; `string'
PUBLIC	??_C@_02IACHLLMH@h1@				; `string'
PUBLIC	??_C@_02KLAKOIAE@h2@				; `string'
PUBLIC	??_C@_02LCBBNJEF@h3@				; `string'
PUBLIC	??_C@_02PNFAEPIC@h4@				; `string'
PUBLIC	??_C@_02OEELHOMD@h5@				; `string'
PUBLIC	??_C@_02MPGGCNAA@h6@				; `string'
PUBLIC	??_C@_02JLMMKIPN@ul@				; `string'
PUBLIC	??_C@_02IKHNIOFL@ol@				; `string'
PUBLIC	??_C@_03DAPAKLGM@dir@				; `string'
PUBLIC	??_C@_04EEIGNHLG@menu@				; `string'
PUBLIC	??_C@_03PKHLKDKD@pre@				; `string'
PUBLIC	??_C@_01JBBJJEPG@p@				; `string'
PUBLIC	??_C@_02IGCIGBLK@dl@				; `string'
PUBLIC	??_C@_03FEJMGOGI@div@				; `string'
PUBLIC	??_C@_06BBLOAEEI@center@			; `string'
PUBLIC	??_C@_08NOCGLLG@noscript@			; `string'
PUBLIC	??_C@_08NAAIELI@noframes@			; `string'
PUBLIC	??_C@_0L@NKGPHNMG@blockquote@			; `string'
PUBLIC	??_C@_04MLMMMEIO@form@				; `string'
PUBLIC	??_C@_07JMLOFMGP@isindex@			; `string'
PUBLIC	??_C@_02FLHDKHAB@hr@				; `string'
PUBLIC	??_C@_05LCLENNFI@table@				; `string'
PUBLIC	??_C@_08EPOEGPEK@fieldset@			; `string'
PUBLIC	??_C@_07LHEPONKL@address@			; `string'
PUBLIC	??_C@_02BIBFFKJD@tt@				; `string'
PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_01OJONOECF@b@				; `string'
PUBLIC	??_C@_01OMGOGALD@u@				; `string'
PUBLIC	??_C@_01LKDEMHDF@s@				; `string'
PUBLIC	??_C@_06LGJEBFOF@strike@			; `string'
PUBLIC	??_C@_03CCCOBCKE@big@				; `string'
PUBLIC	??_C@_05KJDGBEEG@small@				; `string'
PUBLIC	??_C@_02JOPBDKMM@em@				; `string'
PUBLIC	??_C@_06KHACOKFA@strong@			; `string'
PUBLIC	??_C@_03NNNLLBAM@dfn@				; `string'
PUBLIC	??_C@_04NDFOBODE@code@				; `string'
PUBLIC	??_C@_04GLAFCDBO@samp@				; `string'
PUBLIC	??_C@_03HIFOOBAM@kbd@				; `string'
PUBLIC	??_C@_03MEPDGFMA@var@				; `string'
PUBLIC	??_C@_04OKBDOCJI@cite@				; `string'
PUBLIC	??_C@_04FKPKGNKN@abbr@				; `string'
PUBLIC	??_C@_07DBMAFMJI@acronym@			; `string'
PUBLIC	??_C@_01MCMALHOG@a@				; `string'
PUBLIC	??_C@_03PCCGDNHJ@img@				; `string'
PUBLIC	??_C@_06MJBNHHFM@applet@			; `string'
PUBLIC	??_C@_05KJAEOLKJ@embed@				; `string'
PUBLIC	??_C@_06IEOJBDIK@object@			; `string'
PUBLIC	??_C@_04EFPADHIC@font@				; `string'
PUBLIC	??_C@_08IOLGIJGJ@basefont@			; `string'
PUBLIC	??_C@_02FGOECCNH@br@				; `string'
PUBLIC	??_C@_06OLONEIEH@script@			; `string'
PUBLIC	??_C@_03HBNNNHNM@map@				; `string'
PUBLIC	??_C@_01IIACKFLH@q@				; `string'
PUBLIC	??_C@_03KCMAIMAP@sub@				; `string'
PUBLIC	??_C@_03NKDEPMNM@sup@				; `string'
PUBLIC	??_C@_04FOPLNFFP@span@				; `string'
PUBLIC	??_C@_03OCCPALPP@bdo@				; `string'
PUBLIC	??_C@_06PKBNCBKI@iframe@			; `string'
PUBLIC	??_C@_05DFJCHPDH@input@				; `string'
PUBLIC	??_C@_06LGNCCACI@select@			; `string'
PUBLIC	??_C@_08DEBIGDAL@textarea@			; `string'
PUBLIC	??_C@_05IDCCNNGI@label@				; `string'
PUBLIC	??_C@_06HFKPFKMP@button@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id@				; `string'
PUBLIC	??_C@_05ENKANFLO@class@				; `string'
PUBLIC	??_C@_05IAKJCFIM@style@				; `string'
PUBLIC	??_C@_05PHLGJONK@title@				; `string'
PUBLIC	??_C@_04IOHABJIC@lang@				; `string'
PUBLIC	??_C@_07BAILDNBN@onclick@			; `string'
PUBLIC	??_C@_0L@BPDJNBPF@ondblclick@			; `string'
PUBLIC	??_C@_0M@LPLDHDON@onmousedown@			; `string'
PUBLIC	??_C@_09KEIMJDF@onmouseup@			; `string'
PUBLIC	??_C@_0M@BMKHHAKK@onmouseover@			; `string'
PUBLIC	??_C@_0L@CEIFEFAI@onmouseout@			; `string'
PUBLIC	??_C@_0L@HBNKHJBD@onkeypress@			; `string'
PUBLIC	??_C@_09HFCNBPMA@onkeydown@			; `string'
PUBLIC	??_C@_07BAEMJOMG@onkeyup@			; `string'
PUBLIC	??_C@_07EAJPFAFH@charset@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type@				; `string'
PUBLIC	??_C@_04MEMAJGDJ@name@				; `string'
PUBLIC	??_C@_04CMBCJJJD@href@				; `string'
PUBLIC	??_C@_08KALGMAGF@hreflang@			; `string'
PUBLIC	??_C@_03JINJGFJE@rel@				; `string'
PUBLIC	??_C@_03CIPEJPEP@rev@				; `string'
PUBLIC	??_C@_09KPFGNPLK@accesskey@			; `string'
PUBLIC	??_C@_05KFCIHKGL@shape@				; `string'
PUBLIC	??_C@_06LAPHAKDE@coords@			; `string'
PUBLIC	??_C@_08KAJGIJLO@tabindex@			; `string'
PUBLIC	??_C@_07PCOLHBIB@onfocus@			; `string'
PUBLIC	??_C@_06PAKCKPPO@onblur@			; `string'
PUBLIC	??_C@_06JJLAMBGK@target@			; `string'
PUBLIC	??_C@_04IMCGAIPI@rows@				; `string'
PUBLIC	??_C@_04MBNFPKFL@cols@				; `string'
PUBLIC	??_C@_03FHLPDODD@alt@				; `string'
PUBLIC	??_C@_03LOJEKLML@src@				; `string'
PUBLIC	??_C@_05MEHLAELG@clear@				; `string'
PUBLIC	??_C@_05LJDNNBIK@param@				; `string'
PUBLIC	??_C@_08HMEGOPJI@codebase@			; `string'
PUBLIC	??_C@_07NEJBDDEA@archive@			; `string'
PUBLIC	??_C@_06LNLHEAAG@height@			; `string'
PUBLIC	??_C@_05IGKADHGO@width@				; `string'
PUBLIC	??_C@_05CBJPDLOK@align@				; `string'
PUBLIC	??_C@_06HPCPMHFO@hspace@			; `string'
PUBLIC	??_C@_06EIMOCAMN@vspace@			; `string'
PUBLIC	??_C@_06FFHHDLMH@nohref@			; `string'
PUBLIC	??_C@_04IAGNFIBA@size@				; `string'
PUBLIC	??_C@_05PEENBMOG@color@				; `string'
PUBLIC	??_C@_04POCOPAPC@face@				; `string'
PUBLIC	??_C@_03NOMOFEHF@ins@				; `string'
PUBLIC	??_C@_03ONKLGNNH@del@				; `string'
PUBLIC	??_C@_06FKJAAAAK@onload@			; `string'
PUBLIC	??_C@_08KEOAPEKG@onunload@			; `string'
PUBLIC	??_C@_0L@EGCKCJDC@background@			; `string'
PUBLIC	??_C@_07PMHCLHIB@bgcolor@			; `string'
PUBLIC	??_C@_04CIMGMMMG@text@				; `string'
PUBLIC	??_C@_04OHHBHOGB@link@				; `string'
PUBLIC	??_C@_05ENOKMGAD@vlink@				; `string'
PUBLIC	??_C@_05FDDJPECA@alink@				; `string'
PUBLIC	??_C@_05MFEJDJP@value@				; `string'
PUBLIC	??_C@_08BEHKFNNO@disabled@			; `string'
PUBLIC	??_C@_04ENMBGAPA@char@				; `string'
PUBLIC	??_C@_07CAOCHGPK@charoff@			; `string'
PUBLIC	??_C@_06ICIJKACG@valign@			; `string'
PUBLIC	??_C@_03HNOLNALI@col@				; `string'
PUBLIC	??_C@_08FGNPMIBK@datetime@			; `string'
PUBLIC	??_C@_07HGKHBOGE@compact@			; `string'
PUBLIC	??_C@_02EDDPJOD@dt@				; `string'
PUBLIC	??_C@_02EOPBOLLC@dd@				; `string'
PUBLIC	??_C@_06BCIOHMBM@legend@			; `string'
PUBLIC	??_C@_06GABBCIBA@method@			; `string'
PUBLIC	??_C@_07BCBJKKO@enctype@			; `string'
PUBLIC	??_C@_06MPKMECK@accept@				; `string'
PUBLIC	??_C@_08PPMJAGMH@onsubmit@			; `string'
PUBLIC	??_C@_07CDGCELIF@onreset@			; `string'
PUBLIC	??_C@_0P@IIOBAHEN@accept?9charset@		; `string'
PUBLIC	??_C@_08BMDPBLHN@longdesc@			; `string'
PUBLIC	??_C@_0M@GPMBJNCP@frameborder@			; `string'
PUBLIC	??_C@_0M@LFIDEBFM@marginwidth@			; `string'
PUBLIC	??_C@_0N@HFFDDCPA@marginheight@			; `string'
PUBLIC	??_C@_08BOOCAMGJ@noresize@			; `string'
PUBLIC	??_C@_09PKEBEIDM@scrolling@			; `string'
PUBLIC	??_C@_08GMEGJMDB@frameset@			; `string'
PUBLIC	??_C@_05MIJNFGED@frame@				; `string'
PUBLIC	??_C@_07LNMDFKEJ@profile@			; `string'
PUBLIC	??_C@_04BHIIPFEC@base@				; `string'
PUBLIC	??_C@_04HLJJCGEF@meta@				; `string'
PUBLIC	??_C@_07NCHIIBII@noshade@			; `string'
PUBLIC	??_C@_07CPCPJPKL@version@			; `string'
PUBLIC	??_C@_06KPMBKPGA@usemap@			; `string'
PUBLIC	??_C@_05HANCGNOO@ismap@				; `string'
PUBLIC	??_C@_06ODFLABIG@border@			; `string'
PUBLIC	??_C@_06JIKFICKK@hidden@			; `string'
PUBLIC	??_C@_07JKIHKJOO@palette@			; `string'
PUBLIC	??_C@_0M@GDAEHHFP@pluginspace@			; `string'
PUBLIC	??_C@_09DBOPNCLL@pluginurl@			; `string'
PUBLIC	??_C@_05CCBEFJDC@units@				; `string'
PUBLIC	??_C@_07FJOBMBFC@checked@			; `string'
PUBLIC	??_C@_08JOKHDEJH@readonly@			; `string'
PUBLIC	??_C@_09GGMBJIEG@maxlength@			; `string'
PUBLIC	??_C@_08ILAMBHAE@onselect@			; `string'
PUBLIC	??_C@_08CLANFAGI@onchange@			; `string'
PUBLIC	??_C@_06FJNEHIA@prompt@				; `string'
PUBLIC	??_C@_03JOHEBPFF@for@				; `string'
PUBLIC	??_C@_05CECBHAPI@media@				; `string'
PUBLIC	??_C@_04GOEDGNCF@area@				; `string'
PUBLIC	??_C@_06DDLLCOJG@action@			; `string'
PUBLIC	??_C@_02PFEMMEEH@li@				; `string'
PUBLIC	??_C@_0L@NALBGOHO@http?9equiv@			; `string'
PUBLIC	??_C@_06MMEMGLOP@scheme@			; `string'
PUBLIC	??_C@_07ICAJMOAO@content@			; `string'
PUBLIC	??_C@_07JDFLJJH@declare@			; `string'
PUBLIC	??_C@_07MKGILGMB@classid@			; `string'
PUBLIC	??_C@_04PJOLNDGD@data@				; `string'
PUBLIC	??_C@_08EANEMJD@codetype@			; `string'
PUBLIC	??_C@_07EEGFOKKL@standby@			; `string'
PUBLIC	??_C@_05FAGFPHJG@start@				; `string'
PUBLIC	??_C@_06OGMGCFPO@option@			; `string'
PUBLIC	??_C@_08CJLOJPNI@selected@			; `string'
PUBLIC	??_C@_09JLAJHNIL@valuetype@			; `string'
PUBLIC	??_C@_05MBNCFBEN@defer@				; `string'
PUBLIC	??_C@_05GFHEIIDD@event@				; `string'
PUBLIC	??_C@_08JGCCIMAA@language@			; `string'
PUBLIC	??_C@_08KGPIHINJ@optgroup@			; `string'
PUBLIC	??_C@_08CKJFGDBG@multiple@			; `string'
PUBLIC	??_C@_07PJIIAIPG@summary@			; `string'
PUBLIC	??_C@_05CBLPGGM@rules@				; `string'
PUBLIC	??_C@_0M@HGLPBPKF@cellspacing@			; `string'
PUBLIC	??_C@_0M@NLHEMCJP@cellpadding@			; `string'
PUBLIC	??_C@_0N@LOJCLIGN@datapagesize@			; `string'
PUBLIC	??_C@_07BANDPJOM@caption@			; `string'
PUBLIC	??_C@_08LBGGHKOD@colgroup@			; `string'
PUBLIC	??_C@_05DDLACFIC@thead@				; `string'
PUBLIC	??_C@_05KDGBEENM@tfoot@				; `string'
PUBLIC	??_C@_05OPBKHDLA@tbody@				; `string'
PUBLIC	??_C@_02EOEPPNBF@tr@				; `string'
PUBLIC	??_C@_06KMFGCGJP@nowrap@			; `string'
PUBLIC	??_C@_04HABAAEPG@axis@				; `string'
PUBLIC	??_C@_07LANIGEJC@headers@			; `string'
PUBLIC	??_C@_05DCCHDMEJ@scope@				; `string'
PUBLIC	??_C@_07HIFHGKLD@rowspan@			; `string'
PUBLIC	??_C@_07KBFHKJFO@colspan@			; `string'
PUBLIC	??_C@_02POGCAHMO@th@				; `string'
PUBLIC	??_C@_02FCNHEIMC@td@				; `string'
PUBLIC	??_C@_07NLIDIJLK@anchor?5@			; `string'
PUBLIC	??_C@_0BB@OPBMKOHB@abbreviated?5form@		; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0BH@PNOGHPJ@information?5on?5author?5@	; `string'
PUBLIC	??_C@_0N@LANOFEKD@java?5applet?5@		; `string'
PUBLIC	??_C@_0BM@EIGPEHBO@client?9side?5image?5map?5area?5@ ; `string'
PUBLIC	??_C@_0BA@NADNLNKK@bold?5text?5style@		; `string'
PUBLIC	??_C@_0BD@JABNPIOC@document?5base?5uri?5@	; `string'
PUBLIC	??_C@_0BA@OGIGFOOK@base?5font?5size?5@		; `string'
PUBLIC	??_C@_0BF@EJIKDIMB@i18n?5bidi?5over?9ride?5@	; `string'
PUBLIC	??_C@_0BB@BAJOIDME@large?5text?5style@		; `string'
PUBLIC	??_C@_0BA@KOLCJLFL@long?5quotation?5@		; `string'
PUBLIC	??_C@_0P@MOMBBGBM@document?5body?5@		; `string'
PUBLIC	??_C@_0BD@EKEEJOJN@forced?5line?5break?5@	; `string'
PUBLIC	??_C@_0N@NFGALFIH@push?5button?5@		; `string'
PUBLIC	??_C@_0P@LNCJOIOH@table?5caption?5@		; `string'
PUBLIC	??_C@_0CA@LHLKAMHN@shorthand?5for?5div?5align?$DNcenter?5@ ; `string'
PUBLIC	??_C@_08JKLKPBNF@citation@			; `string'
PUBLIC	??_C@_0BH@LEOBKMKN@computer?5code?5fragment@	; `string'
PUBLIC	??_C@_0O@FGGFNENO@table?5column?5@		; `string'
PUBLIC	??_C@_0BE@LOIFNDJE@table?5column?5group?5@	; `string'
PUBLIC	??_C@_0BI@HABKMEJP@definition?5description?5@	; `string'
PUBLIC	??_C@_0O@HPOOFJNH@deleted?5text?5@		; `string'
PUBLIC	??_C@_0BE@BOOBDIMI@instance?5definition@	; `string'
PUBLIC	??_C@_0P@IKNDKLJF@directory?5list@		; `string'
PUBLIC	??_C@_0CB@MBOOJGEG@generic?5language?1style?5containe@ ; `string'
PUBLIC	??_C@_0BB@MIKJLFPH@definition?5list?5@		; `string'
PUBLIC	??_C@_0BB@EJJHCHJK@definition?5term?5@		; `string'
PUBLIC	??_C@_08NCOPEMNJ@emphasis@			; `string'
PUBLIC	??_C@_0BJ@EHDFJKJB@generic?5embedded?5object?5@	; `string'
PUBLIC	??_C@_0BE@NIBLILIK@form?5control?5group?5@	; `string'
PUBLIC	??_C@_0BG@MPBFEMBF@local?5change?5to?5font?5@	; `string'
PUBLIC	??_C@_0BC@CONPLKGA@interactive?5form?5@		; `string'
PUBLIC	??_C@_0L@NAMFAOCF@subwindow?5@			; `string'
PUBLIC	??_C@_0BD@NKGGDHCH@window?5subdivision@		; `string'
PUBLIC	??_C@_08EPCFAACE@heading?5@			; `string'
PUBLIC	??_C@_0P@GMKONMK@document?5head?5@		; `string'
PUBLIC	??_C@_0BB@GBCDCJBE@horizontal?5rule?5@		; `string'
PUBLIC	??_C@_04PNIFHPHN@html@				; `string'
PUBLIC	??_C@_0BH@MPDMFBKE@document?5root?5element?5@	; `string'
PUBLIC	??_C@_0BC@JCIMLGAN@italic?5text?5style@		; `string'
PUBLIC	??_C@_0BC@BHNEGLHO@inline?5subwindow?5@		; `string'
PUBLIC	??_C@_0BA@OHBCJHIG@embedded?5image?5@		; `string'
PUBLIC	??_C@_0O@HMLFLPEN@form?5control?5@		; `string'
PUBLIC	??_C@_0O@CEDLIJIG@inserted?5text@		; `string'
PUBLIC	??_C@_0BE@NOGKIGME@single?5line?5prompt?5@	; `string'
PUBLIC	??_C@_0BP@HBOCGMHA@text?5to?5be?5entered?5by?5the?5user@ ; `string'
PUBLIC	??_C@_0BH@INJKJBGO@form?5field?5label?5text?5@	; `string'
PUBLIC	??_C@_0BB@LGOCAIB@fieldset?5legend?5@		; `string'
PUBLIC	??_C@_0L@DHBHFPMN@list?5item?5@			; `string'
PUBLIC	??_C@_0BK@GCIIKCBE@a?5media?9independent?5link?5@ ; `string'
PUBLIC	??_C@_0BH@LIKCJKCB@client?9side?5image?5map?5@	; `string'
PUBLIC	??_C@_0L@NDLIJHAH@menu?5list?5@			; `string'
PUBLIC	??_C@_0BJ@OJDJPIOL@generic?5metainformation?5@	; `string'
PUBLIC	??_C@_0DL@IAGMJJEB@alternate?5content?5container?5for@ ; `string'
PUBLIC	??_C@_0DM@CPJFPKPD@alternate?5content?5container?5for@ ; `string'
PUBLIC	??_C@_0O@PMECOPH@ordered?5list?5@		; `string'
PUBLIC	??_C@_0O@IBBKJGKJ@option?5group?5@		; `string'
PUBLIC	??_C@_0BD@HJHAAEHL@selectable?5choice?5@	; `string'
PUBLIC	??_C@_0L@ICLNKGCC@paragraph?5@			; `string'
PUBLIC	??_C@_0BG@OGBECHLM@named?5property?5value?5@	; `string'
PUBLIC	??_C@_0BD@OKGNAEP@preformatted?5text?5@		; `string'
PUBLIC	??_C@_0BI@IDGHJEGP@short?5inline?5quotation?5@	; `string'
PUBLIC	??_C@_0BK@GECKKPAM@strike?9through?5text?5style@ ; `string'
PUBLIC	??_C@_0CF@MKBFLFJI@sample?5program?5output?0?5scripts?0@ ; `string'
PUBLIC	??_C@_0BD@EEALOKGK@script?5statements?5@	; `string'
PUBLIC	??_C@_0BB@OKAAEBHI@option?5selector?5@		; `string'
PUBLIC	??_C@_0BB@PLNNDOJH@small?5text?5style@		; `string'
PUBLIC	??_C@_0CC@KPKCOJB@generic?5language?1style?5containe@ ; `string'
PUBLIC	??_C@_0BE@KLPAPDBO@strike?9through?5text@	; `string'
PUBLIC	??_C@_0BA@HHIAOMPI@strong?5emphasis@		; `string'
PUBLIC	??_C@_0M@LPADJHJK@style?5info?5@		; `string'
PUBLIC	??_C@_09KAIPOAII@subscript@			; `string'
PUBLIC	??_C@_0N@LLOPBEAI@superscript?5@		; `string'
PUBLIC	??_C@_0M@COHBKCLJ@table?5body?5@		; `string'
PUBLIC	??_C@_0BA@OHMNJJHC@table?5data?5cell@		; `string'
PUBLIC	??_C@_0BH@ODGBEBOO@multi?9line?5text?5field?5@	; `string'
PUBLIC	??_C@_0O@HFPJPDFP@table?5footer?5@		; `string'
PUBLIC	??_C@_0BC@CCIFOICB@table?5header?5cell@		; `string'
PUBLIC	??_C@_0O@JOOJEINB@table?5header?5@		; `string'
PUBLIC	??_C@_0BA@CCGKIMBG@document?5title?5@		; `string'
PUBLIC	??_C@_0L@OLDIHEAD@table?5row?5@			; `string'
PUBLIC	??_C@_0CC@HPKPLEFL@teletype?5or?5monospaced?5text?5sty@ ; `string'
PUBLIC	??_C@_0BG@NHDOOMEA@underlined?5text?5style@	; `string'
PUBLIC	??_C@_0BA@DILGCPPM@unordered?5list?5@		; `string'
PUBLIC	??_C@_0CL@IOIBPELD@instance?5of?5a?5variable?5or?5progr@ ; `string'
PUBLIC	??_C@_07KMIIAGPH@listing@			; `string'
PUBLIC	??_C@_03BPAAIJBF@xmp@				; `string'
PUBLIC	??_C@_04KJFGKBNM@quot@				; `string'
PUBLIC	??_C@_0CK@JDDAPBGE@quotation?5mark?5?$DN?5APL?5quote?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_03DCBBJBAA@amp@				; `string'
PUBLIC	??_C@_0BJ@FIPLPGNA@ampersand?0?5U?$CL0026?5ISOnum@ ; `string'
PUBLIC	??_C@_04LBCJFAKL@apos@				; `string'
PUBLIC	??_C@_0N@EHENLBIK@single?5quote@		; `string'
PUBLIC	??_C@_02KCAKIFL@lt@				; `string'
PUBLIC	??_C@_0BO@IKPLCPFL@less?9than?5sign?0?5U?$CL003C?5ISOnum@ ; `string'
PUBLIC	??_C@_02GHFEHLK@gt@				; `string'
PUBLIC	??_C@_0CB@INPPCIDE@greater?9than?5sign?0?5U?$CL003E?5ISOnu@ ; `string'
PUBLIC	??_C@_04PHHIFBLJ@nbsp@				; `string'
PUBLIC	??_C@_0DD@LJPHBFKA@no?9break?5space?5?$DN?5non?9breaking?5s@ ; `string'
PUBLIC	??_C@_05BNEGCBFC@iexcl@				; `string'
PUBLIC	??_C@_0CJ@LDCHJPND@inverted?5exclamation?5mark?0?5U?$CL00@ ; `string'
PUBLIC	??_C@_04OCKNFIJG@cent@				; `string'
PUBLIC	??_C@_0BJ@JAJDJOGE@cent?5sign?0?5U?$CL00A2?5ISOnum@ ; `string'
PUBLIC	??_C@_05EBEEKLCG@pound@				; `string'
PUBLIC	??_C@_0BK@CBLMFKEA@pound?5sign?0?5U?$CL00A3?5ISOnum@ ; `string'
PUBLIC	??_C@_06HEGEHONB@curren@			; `string'
PUBLIC	??_C@_0BN@KCBDNOJC@currency?5sign?0?5U?$CL00A4?5ISOnum@ ; `string'
PUBLIC	??_C@_03HNOOIABH@yen@				; `string'
PUBLIC	??_C@_0CE@IIBMKILI@yen?5sign?5?$DN?5yuan?5sign?0?5U?$CL00A5?5IS@ ; `string'
PUBLIC	??_C@_06ILPBEBAD@brvbar@			; `string'
PUBLIC	??_C@_0DA@CCMOAPKD@broken?5bar?5?$DN?5broken?5vertical?5ba@ ; `string'
PUBLIC	??_C@_04IKJFFMEH@sect@				; `string'
PUBLIC	??_C@_0BM@NBPOBBLJ@section?5sign?0?5U?$CL00A7?5ISOnum@ ; `string'
PUBLIC	??_C@_03LBNAMJF@uml@				; `string'
PUBLIC	??_C@_0CN@DADBLGNL@diaeresis?5?$DN?5spacing?5diaeresis?0?5@ ; `string'
PUBLIC	??_C@_04COAGEIMF@copy@				; `string'
PUBLIC	??_C@_0BO@GKHKBHFO@copyright?5sign?0?5U?$CL00A9?5ISOnum@ ; `string'
PUBLIC	??_C@_04JPPACPLE@ordf@				; `string'
PUBLIC	??_C@_0CK@IDODFDJH@feminine?5ordinal?5indicator?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_05PGIFNFKK@laquo@				; `string'
PUBLIC	??_C@_0FD@BNFCAIHO@left?9pointing?5double?5angle?5quot@ ; `string'
PUBLIC	??_C@_03NJKJADM@not@				; `string'
PUBLIC	??_C@_0BI@BCMLJBGJ@not?5sign?0?5U?$CL00AC?5ISOnum@ ; `string'
PUBLIC	??_C@_03BPAIHHLG@shy@				; `string'
PUBLIC	??_C@_0DC@LBOPPEOL@soft?5hyphen?5?$DN?5discretionary?5hyp@ ; `string'
PUBLIC	??_C@_03HLCNLMFP@reg@				; `string'
PUBLIC	??_C@_0DM@GCGJPANE@registered?5sign?5?$DN?5registered?5tr@ ; `string'
PUBLIC	??_C@_04IMHNEFHF@macr@				; `string'
PUBLIC	??_C@_0EA@HOMEIEDB@macron?5?$DN?5spacing?5macron?5?$DN?5overl@ ; `string'
PUBLIC	??_C@_03OFPLEBM@deg@				; `string'
PUBLIC	??_C@_0BL@CCCHHGNH@degree?5sign?0?5U?$CL00B0?5ISOnum@ ; `string'
PUBLIC	??_C@_06CAEEBBM@plusmn@				; `string'
PUBLIC	??_C@_0DE@CHKDBJJG@plus?9minus?5sign?5?$DN?5plus?9or?9minus@ ; `string'
PUBLIC	??_C@_04GCMPPOHC@sup2@				; `string'
PUBLIC	??_C@_0EB@LEPBNIBM@superscript?5two?5?$DN?5superscript?5d@ ; `string'
PUBLIC	??_C@_04HLNEMPDD@sup3@				; `string'
PUBLIC	??_C@_0ED@GIKFIKLK@superscript?5three?5?$DN?5superscript@ ; `string'
PUBLIC	??_C@_05EEJEIAPO@acute@				; `string'
PUBLIC	??_C@_0CM@HPINDAMO@acute?5accent?5?$DN?5spacing?5acute?0?5U@ ; `string'
PUBLIC	??_C@_05PCPGMEFP@micro@				; `string'
PUBLIC	??_C@_0BK@KOECHADG@micro?5sign?0?5U?$CL00B5?5ISOnum@ ; `string'
PUBLIC	??_C@_04GIAGJOJD@para@				; `string'
PUBLIC	??_C@_0CN@MOKENOBK@pilcrow?5sign?5?$DN?5paragraph?5sign?0?5@ ; `string'
PUBLIC	??_C@_06HHCHNCAA@middot@			; `string'
PUBLIC	??_C@_0DM@HGAIAHA@middle?5dot?5?$DN?5Georgian?5comma?5Gre@ ; `string'
PUBLIC	??_C@_05KLIFGPMF@cedil@				; `string'
PUBLIC	??_C@_0CJ@ILEJKNLC@cedilla?5?$DN?5spacing?5cedilla?0?5U?$CL00@ ; `string'
PUBLIC	??_C@_04EJOCKNLB@sup1@				; `string'
PUBLIC	??_C@_0DH@CNBAIMGE@superscript?5one?5?$DN?5superscript?5d@ ; `string'
PUBLIC	??_C@_04HMAEPGHP@ordm@				; `string'
PUBLIC	??_C@_0CL@FJKJODCC@masculine?5ordinal?5indicator?0?5U?$CL@ ; `string'
PUBLIC	??_C@_05MPFJLGEB@raquo@				; `string'
PUBLIC	??_C@_0FD@EGIHNJHG@right?9pointing?5double?5angle?5quo@ ; `string'
PUBLIC	??_C@_06NPFNIPNE@frac14@			; `string'
PUBLIC	??_C@_0EC@KBCMBOHG@vulgar?5fraction?5one?5quarter?5?$DN?5f@ ; `string'
PUBLIC	??_C@_06IJAHCIFC@frac12@			; `string'
PUBLIC	??_C@_0DM@DIGGMOPD@vulgar?5fraction?5one?5half?5?$DN?5frac@ ; `string'
PUBLIC	??_C@_06NMNJFLLK@frac34@			; `string'
PUBLIC	??_C@_0EI@KLKHBCM@vulgar?5fraction?5three?5quarters?5@ ; `string'
PUBLIC	??_C@_06JMONPFKG@iquest@			; `string'
PUBLIC	??_C@_0DN@EEILHCCA@inverted?5question?5mark?5?$DN?5turned@ ; `string'
PUBLIC	??_C@_06NNGAMJGH@Agrave@			; `string'
PUBLIC	??_C@_0FB@KEPDLJAE@latin?5capital?5letter?5A?5with?5gra@ ; `string'
PUBLIC	??_C@_06IKEGIAOO@Aacute@			; `string'
PUBLIC	??_C@_0DC@MHBNMNMK@latin?5capital?5letter?5A?5with?5acu@ ; `string'
PUBLIC	??_C@_05LCALGNL@Acirc@				; `string'
PUBLIC	??_C@_0DH@KHFDKONJ@latin?5capital?5letter?5A?5with?5cir@ ; `string'
PUBLIC	??_C@_06KCNKLAAC@Atilde@			; `string'
PUBLIC	??_C@_0DC@OLJINFKG@latin?5capital?5letter?5A?5with?5til@ ; `string'
PUBLIC	??_C@_04IJOIFFGN@Auml@				; `string'
PUBLIC	??_C@_0DG@FBFBPIGP@latin?5capital?5letter?5A?5with?5dia@ ; `string'
PUBLIC	??_C@_05CHPAJHPJ@Aring@				; `string'
PUBLIC	??_C@_0FF@OIKGDIMD@latin?5capital?5letter?5A?5with?5rin@ ; `string'
PUBLIC	??_C@_05GGABFNI@AElig@				; `string'
PUBLIC	??_C@_0EE@MODCPHBF@latin?5capital?5letter?5AE?5?$DN?5latin@ ; `string'
PUBLIC	??_C@_06PCMIHOPM@Ccedil@			; `string'
PUBLIC	??_C@_0DE@JIEMILBI@latin?5capital?5letter?5C?5with?5ced@ ; `string'
PUBLIC	??_C@_06CJCPONHE@Egrave@			; `string'
PUBLIC	??_C@_0DC@BADGAJKO@latin?5capital?5letter?5E?5with?5gra@ ; `string'
PUBLIC	??_C@_06HOAJKEPN@Eacute@			; `string'
PUBLIC	??_C@_0DC@IDKEOPOP@latin?5capital?5letter?5E?5with?5acu@ ; `string'
PUBLIC	??_C@_05JALBPEMN@Ecirc@				; `string'
PUBLIC	??_C@_0DH@CICENEJK@latin?5capital?5letter?5E?5with?5cir@ ; `string'
PUBLIC	??_C@_04HMGIPDKN@Euml@				; `string'
PUBLIC	??_C@_0DG@HBMMEOHM@latin?5capital?5letter?5E?5with?5dia@ ; `string'
PUBLIC	??_C@_06OOIPIHAA@Igrave@			; `string'
PUBLIC	??_C@_0DC@OHCNNALC@latin?5capital?5letter?5I?5with?5gra@ ; `string'
PUBLIC	??_C@_06LJKJMOIJ@Iacute@			; `string'
PUBLIC	??_C@_0DC@HJKBEGLE@latin?5capital?5letter?5I?5with?5acu@ ; `string'
PUBLIC	??_C@_05OHHDDELG@Icirc@				; `string'
PUBLIC	??_C@_0DH@EMKFLPMJ@latin?5capital?5letter?5I?5with?5cir@ ; `string'
PUBLIC	??_C@_04LJJIBOKM@Iuml@				; `string'
PUBLIC	??_C@_0DG@MPAICMBD@latin?5capital?5letter?5I?5with?5dia@ ; `string'
PUBLIC	??_C@_03CBGEMLIN@ETH@				; `string'
PUBLIC	??_C@_0CJ@LDDCJAMI@latin?5capital?5letter?5ETH?0?5U?$CL00D@ ; `string'
PUBLIC	??_C@_06FEJCMAOL@Ntilde@			; `string'
PUBLIC	??_C@_0DC@JKOMNMAH@latin?5capital?5letter?5N?5with?5til@ ; `string'
PUBLIC	??_C@_06INFPLCDK@Ograve@			; `string'
PUBLIC	??_C@_0DC@EGPMPLAO@latin?5capital?5letter?5O?5with?5gra@ ; `string'
PUBLIC	??_C@_06NKHJPLLD@Oacute@			; `string'
PUBLIC	??_C@_0DC@NFGOBNEP@latin?5capital?5letter?5O?5with?5acu@ ; `string'
PUBLIC	??_C@_05DBCKNHKL@Ocirc@				; `string'
PUBLIC	??_C@_0DH@KHBIKCFI@latin?5capital?5letter?5O?5with?5cir@ ; `string'
PUBLIC	??_C@_06PCOFMLFP@Otilde@			; `string'
PUBLIC	??_C@_0DC@PAAAKFFJ@latin?5capital?5letter?5O?5with?5til@ ; `string'
PUBLIC	??_C@_04DGNIOLAM@Ouml@				; `string'
PUBLIC	??_C@_0DG@KGFFNOCC@latin?5capital?5letter?5O?5with?5dia@ ; `string'
PUBLIC	??_C@_05MJOOAIJH@times@				; `string'
PUBLIC	??_C@_0CD@DGCLGCAP@multiplication?5sign?0?5U?$CL00D7?5ISO@ ; `string'
PUBLIC	??_C@_06HJKNGHPC@Oslash@			; `string'
PUBLIC	??_C@_0FA@JOMDMBPL@latin?5capital?5letter?5O?5with?5str@ ; `string'
PUBLIC	??_C@_06EOPBHBLK@Ugrave@			; `string'
PUBLIC	??_C@_0DC@FAAHPKBG@latin?5capital?5letter?5U?5with?5gra@ ; `string'
PUBLIC	??_C@_06BJNHDIDD@Uacute@			; `string'
PUBLIC	??_C@_0DC@MJMJLCAF@latin?5capital?5letter?5U?5with?5acu@ ; `string'
PUBLIC	??_C@_05JDGHPGFG@Ucirc@				; `string'
PUBLIC	??_C@_0DH@MPJOGDLJ@latin?5capital?5letter?5U?5with?5cir@ ; `string'
PUBLIC	??_C@_04BMIIGECP@Uuml@				; `string'
PUBLIC	??_C@_0DG@GOPODDHD@latin?5capital?5letter?5U?5with?5dia@ ; `string'
PUBLIC	??_C@_06NOHHFCEH@Yacute@			; `string'
PUBLIC	??_C@_0DC@NGFCNODC@latin?5capital?5letter?5Y?5with?5acu@ ; `string'
PUBLIC	??_C@_05HDBENHAL@THORN@				; `string'
PUBLIC	??_C@_0CL@CHGPFKBD@latin?5capital?5letter?5THORN?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_05GMKDJMCJ@szlig@				; `string'
PUBLIC	??_C@_0DF@GONKECDL@latin?5small?5letter?5sharp?5s?5?$DN?5es@ ; `string'
PUBLIC	??_C@_06BCNNPAPL@agrave@			; `string'
PUBLIC	??_C@_0EN@PDCHJIBF@latin?5small?5letter?5a?5with?5grave@ ; `string'
PUBLIC	??_C@_06EFPLLJHC@aacute@			; `string'
PUBLIC	??_C@_0DA@FMJKAKAM@latin?5small?5letter?5a?5with?5acute@ ; `string'
PUBLIC	??_C@_05MIMLDON@acirc@				; `string'
PUBLIC	??_C@_0DF@OHHHJIGO@latin?5small?5letter?5a?5with?5circu@ ; `string'
PUBLIC	??_C@_06GNGHIJJO@atilde@			; `string'
PUBLIC	??_C@_0DA@HABPBCGA@latin?5small?5letter?5a?5with?5tilde@ ; `string'
PUBLIC	??_C@_04EICJHKGJ@auml@				; `string'
PUBLIC	??_C@_0DE@EPMHJDIB@latin?5small?5letter?5a?5with?5diaer@ ; `string'
PUBLIC	??_C@_05CAFMJCMP@aring@				; `string'
PUBLIC	??_C@_0FB@ICHFIEOC@latin?5small?5letter?5a?5with?5ring?5@ ; `string'
PUBLIC	??_C@_05MAANDPOK@aelig@				; `string'
PUBLIC	??_C@_0EA@CAAHFPMH@latin?5small?5letter?5ae?5?$DN?5latin?5s@ ; `string'
PUBLIC	??_C@_06DNHFEHGA@ccedil@			; `string'
PUBLIC	??_C@_0DC@EILMCCNK@latin?5small?5letter?5c?5with?5cedil@ ; `string'
PUBLIC	??_C@_06OGJCNEOI@egrave@			; `string'
PUBLIC	??_C@_0DA@ILLBMOGI@latin?5small?5letter?5e?5with?5grave@ ; `string'
PUBLIC	??_C@_06LBLEJNGB@eacute@			; `string'
PUBLIC	??_C@_0DA@BICDCICJ@latin?5small?5letter?5e?5with?5acute@ ; `string'
PUBLIC	??_C@_05JHBNPBPL@ecirc@				; `string'
PUBLIC	??_C@_0DF@GIAAOCCN@latin?5small?5letter?5e?5with?5circu@ ; `string'
PUBLIC	??_C@_04LNKJNMKJ@euml@				; `string'
PUBLIC	??_C@_0DE@GPFKCFJC@latin?5small?5letter?5e?5with?5diaer@ ; `string'
PUBLIC	??_C@_06CBDCLOJM@igrave@			; `string'
PUBLIC	??_C@_0DA@HMKKBHHE@latin?5small?5letter?5i?5with?5grave@ ; `string'
PUBLIC	??_C@_06HGBEPHBF@iacute@			; `string'
PUBLIC	??_C@_0DA@OCCGIBHC@latin?5small?5letter?5i?5with?5acute@ ; `string'
PUBLIC	??_C@_05OANPDBIA@icirc@				; `string'
PUBLIC	??_C@_0DF@MIBIJHO@latin?5small?5letter?5i?5with?5circu@ ; `string'
PUBLIC	??_C@_04HIFJDBKI@iuml@				; `string'
PUBLIC	??_C@_0DE@NBJOEHPN@latin?5small?5letter?5i?5with?5diaer@ ; `string'
PUBLIC	??_C@_03CMJPAGPB@eth@				; `string'
PUBLIC	??_C@_0CH@LGCMOCIP@latin?5small?5letter?5eth?0?5U?$CL00F0?5@ ; `string'
PUBLIC	??_C@_06JLCPPJHH@ntilde@			; `string'
PUBLIC	??_C@_0DA@LBLCGIED@latin?5small?5letter?5n?5with?5tilde@ ; `string'
PUBLIC	??_C@_06ECOCILKG@ograve@			; `string'
PUBLIC	??_C@_0DA@GNKCEPEK@latin?5small?5letter?5o?5with?5grave@ ; `string'
PUBLIC	??_C@_06BFMEMCCP@oacute@			; `string'
PUBLIC	??_C@_0DA@PODAKJAL@latin?5small?5letter?5o?5with?5acute@ ; `string'
PUBLIC	??_C@_05DGIGNCJN@ocirc@				; `string'
PUBLIC	??_C@_0DF@FHOFOHGN@latin?5small?5letter?5o?5with?5circu@ ; `string'
PUBLIC	??_C@_06DNFIPCMD@otilde@			; `string'
PUBLIC	??_C@_0DA@NLFOBBBN@latin?5small?5letter?5o?5with?5tilde@ ; `string'
PUBLIC	??_C@_04PHBJMEAI@ouml@				; `string'
PUBLIC	??_C@_0DE@IBKMGEO@latin?5small?5letter?5o?5with?5diaer@ ; `string'
PUBLIC	??_C@_06FFHJEHBN@divide@			; `string'
PUBLIC	??_C@_0BN@DJHBCHKN@division?5sign?0?5U?$CL00F7?5ISOnum@ ; `string'
PUBLIC	??_C@_06LGBAFOGO@oslash@			; `string'
PUBLIC	??_C@_0EP@JDKOEFON@latin?5small?5letter?5o?5with?5strok@ ; `string'
PUBLIC	??_C@_06IBEMEICG@ugrave@			; `string'
PUBLIC	??_C@_0DA@HLFJEOFC@latin?5small?5letter?5u?5with?5grave@ ; `string'
PUBLIC	??_C@_06NGGKABKP@uacute@			; `string'
PUBLIC	??_C@_0DA@OCJHAGEB@latin?5small?5letter?5u?5with?5acute@ ; `string'
PUBLIC	??_C@_05JEMLPDGA@ucirc@				; `string'
PUBLIC	??_C@_0DF@DPGDCGIM@latin?5small?5letter?5u?5with?5circu@ ; `string'
PUBLIC	??_C@_04NNEJELCL@uuml@				; `string'
PUBLIC	??_C@_0DE@MALBCLBP@latin?5small?5letter?5u?5with?5diaer@ ; `string'
PUBLIC	??_C@_06BBMKGLNL@yacute@			; `string'
PUBLIC	??_C@_0DA@PNAMGKHG@latin?5small?5letter?5y?5with?5acute@ ; `string'
PUBLIC	??_C@_05LIICDAEF@thorn@				; `string'
PUBLIC	??_C@_0CO@PJIHMBHF@latin?5small?5letter?5thorn?5with?0?5@ ; `string'
PUBLIC	??_C@_04BILJKGCK@yuml@				; `string'
PUBLIC	??_C@_0DE@JBLHCCEO@latin?5small?5letter?5y?5with?5diaer@ ; `string'
PUBLIC	??_C@_05DMGKHEKI@OElig@				; `string'
PUBLIC	??_C@_0CK@MKAIEJDG@latin?5capital?5ligature?5OE?0?5U?$CL01@ ; `string'
PUBLIC	??_C@_05PKAHFOJK@oelig@				; `string'
PUBLIC	??_C@_0CI@PBDOLLDF@latin?5small?5ligature?5oe?0?5U?$CL0153@ ; `string'
PUBLIC	??_C@_06CDFPFCIB@Scaron@			; `string'
PUBLIC	??_C@_0DC@DIFHMFIC@latin?5capital?5letter?5S?5with?5car@ ; `string'
PUBLIC	??_C@_06OMOCGLBN@scaron@			; `string'
PUBLIC	??_C@_0DA@KEKHKDDJ@latin?5small?5letter?5s?5with?5caron@ ; `string'
PUBLIC	??_C@_04NJHIIJCO@Yuml@				; `string'
PUBLIC	??_C@_0DG@DAKEFH@latin?5capital?5letter?5Y?5with?5dia@ ; `string'
PUBLIC	??_C@_04IEHKEKAD@fnof@				; `string'
PUBLIC	??_C@_0DM@ONFHMKBH@latin?5small?5f?5with?5hook?5?$DN?5funct@ ; `string'
PUBLIC	??_C@_04LIMEDJKM@circ@				; `string'
PUBLIC	??_C@_0DB@JBEBEMPM@modifier?5letter?5circumflex?5acce@ ; `string'
PUBLIC	??_C@_05GMAILABC@tilde@				; `string'
PUBLIC	??_C@_0BL@KGODGBKN@small?5tilde?0?5U?$CL02DC?5ISOdia@ ; `string'
PUBLIC	??_C@_05IHOGHNDL@Alpha@				; `string'
PUBLIC	??_C@_0CD@LPBPODOI@greek?5capital?5letter?5alpha?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_04DIAIJOJA@Beta@				; `string'
PUBLIC	??_C@_0CC@OOBPMHFM@greek?5capital?5letter?5beta?0?5U?$CL03@ ; `string'
PUBLIC	??_C@_05NJHBHDO@Gamma@				; `string'
PUBLIC	??_C@_0CL@LGHPBLEE@greek?5capital?5letter?5gamma?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_05NFMIDMMK@Delta@				; `string'
PUBLIC	??_C@_0CL@NHEEDEFH@greek?5capital?5letter?5delta?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_07MHFJNEOI@Epsilon@			; `string'
PUBLIC	??_C@_0CF@JDHAIGGH@greek?5capital?5letter?5epsilon?0?5U@ ; `string'
PUBLIC	??_C@_04GIJIECND@Zeta@				; `string'
PUBLIC	??_C@_0CC@GEHHHHOP@greek?5capital?5letter?5zeta?0?5U?$CL03@ ; `string'
PUBLIC	??_C@_03FNGPBCIG@Eta@				; `string'
PUBLIC	??_C@_0CB@GCINFKKN@greek?5capital?5letter?5eta?0?5U?$CL039@ ; `string'
PUBLIC	??_C@_05FDIGLFGK@Theta@				; `string'
PUBLIC	??_C@_0CL@DEOCPNDP@greek?5capital?5letter?5theta?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_04CAGFEPOF@Iota@				; `string'
PUBLIC	??_C@_0CC@BFEJFF@greek?5capital?5letter?5iota?0?5U?$CL03@ ; `string'
PUBLIC	??_C@_05MMNIGICE@Kappa@				; `string'
PUBLIC	??_C@_0CD@BBAOAFHF@greek?5capital?5letter?5kappa?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_06OBCFFGBN@Lambda@			; `string'
PUBLIC	??_C@_0CM@NLEFHINL@greek?5capital?5letter?5lambda?0?5U?$CL@ ; `string'
PUBLIC	??_C@_02CKLELFMN@Mu@				; `string'
PUBLIC	??_C@_0CA@JHDDCCNN@greek?5capital?5letter?5mu?0?5U?$CL039C@ ; `string'
PUBLIC	??_C@_02CIPCALJE@Nu@				; `string'
PUBLIC	??_C@_0CA@EBJANCBL@greek?5capital?5letter?5nu?0?5U?$CL039D@ ; `string'
PUBLIC	??_C@_02NGCOIJAL@Xi@				; `string'
PUBLIC	??_C@_0CI@DEKDLEND@greek?5capital?5letter?5xi?0?5U?$CL039E@ ; `string'
PUBLIC	??_C@_07IKLCMNO@Omicron@			; `string'
PUBLIC	??_C@_0CF@LAEOEFAO@greek?5capital?5letter?5omicron?0?5U@ ; `string'
PUBLIC	??_C@_02NIDNNILD@Pi@				; `string'
PUBLIC	??_C@_0CI@GJIDFEDM@greek?5capital?5letter?5pi?0?5U?$CL03A0@ ; `string'
PUBLIC	??_C@_03BLBOAKDK@Rho@				; `string'
PUBLIC	??_C@_0CB@KMJAKGAP@greek?5capital?5letter?5rho?0?5U?$CL03A@ ; `string'
PUBLIC	??_C@_05MKBNPMBG@Sigma@				; `string'
PUBLIC	??_C@_0CL@HFCPNIPL@greek?5capital?5letter?5sigma?0?5U?$CL0@ ; `string'
PUBLIC	??_C@_03IBIJJELC@Tau@				; `string'
PUBLIC	??_C@_0CB@HFBLNIAO@greek?5capital?5letter?5tau?0?5U?$CL03A@ ; `string'
PUBLIC	??_C@_07LLOCOFMD@Upsilon@			; `string'
PUBLIC	??_C@_0CN@JFDLHIKN@greek?5capital?5letter?5upsilon?0?5U@ ; `string'
PUBLIC	??_C@_03OHENGFDH@Phi@				; `string'
PUBLIC	??_C@_0CJ@HBFJNDBB@greek?5capital?5letter?5phi?0?5U?$CL03A@ ; `string'
PUBLIC	??_C@_03KFOBJNEG@Chi@				; `string'
PUBLIC	??_C@_0CB@GAGJNAFN@greek?5capital?5letter?5chi?0?5U?$CL03A@ ; `string'
PUBLIC	??_C@_03PHDOCJKG@Psi@				; `string'
PUBLIC	??_C@_0CJ@NGCFEDIE@greek?5capital?5letter?5psi?0?5U?$CL03A@ ; `string'
PUBLIC	??_C@_05OMBHNFGL@Omega@				; `string'
_DATA	SEGMENT
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_xmlIsBaseCharGroup:BYTE:010H
COMM	_xmlIsCharGroup:BYTE:010H
COMM	_xmlIsCombiningGroup:BYTE:010H
COMM	_xmlIsDigitGroup:BYTE:010H
COMM	_xmlIsExtenderGroup:BYTE:010H
COMM	_xmlIsIdeographicGroup:BYTE:010H
COMM	_xmlIsPubidChar_tab:BYTE:0100H
COMM	_xmlParserMaxDepth:DWORD
_DATA	ENDS
;	COMDAT ??_C@_05OMBHNFGL@Omega@
CONST	SEGMENT
??_C@_05OMBHNFGL@Omega@ DB 'Omega', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NGCFEDIE@greek?5capital?5letter?5psi?0?5U?$CL03A@
CONST	SEGMENT
??_C@_0CJ@NGCFEDIE@greek?5capital?5letter?5psi?0?5U?$CL03A@ DB 'greek cap'
	DB	'ital letter psi, U+03A8 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PHDOCJKG@Psi@
CONST	SEGMENT
??_C@_03PHDOCJKG@Psi@ DB 'Psi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GAGJNAFN@greek?5capital?5letter?5chi?0?5U?$CL03A@
CONST	SEGMENT
??_C@_0CB@GAGJNAFN@greek?5capital?5letter?5chi?0?5U?$CL03A@ DB 'greek cap'
	DB	'ital letter chi, U+03A7', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KFOBJNEG@Chi@
CONST	SEGMENT
??_C@_03KFOBJNEG@Chi@ DB 'Chi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HBFJNDBB@greek?5capital?5letter?5phi?0?5U?$CL03A@
CONST	SEGMENT
??_C@_0CJ@HBFJNDBB@greek?5capital?5letter?5phi?0?5U?$CL03A@ DB 'greek cap'
	DB	'ital letter phi, U+03A6 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OHENGFDH@Phi@
CONST	SEGMENT
??_C@_03OHENGFDH@Phi@ DB 'Phi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JFDLHIKN@greek?5capital?5letter?5upsilon?0?5U@
CONST	SEGMENT
??_C@_0CN@JFDLHIKN@greek?5capital?5letter?5upsilon?0?5U@ DB 'greek capita'
	DB	'l letter upsilon, U+03A5 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LLOCOFMD@Upsilon@
CONST	SEGMENT
??_C@_07LLOCOFMD@Upsilon@ DB 'Upsilon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@HFBLNIAO@greek?5capital?5letter?5tau?0?5U?$CL03A@
CONST	SEGMENT
??_C@_0CB@HFBLNIAO@greek?5capital?5letter?5tau?0?5U?$CL03A@ DB 'greek cap'
	DB	'ital letter tau, U+03A4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03IBIJJELC@Tau@
CONST	SEGMENT
??_C@_03IBIJJELC@Tau@ DB 'Tau', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HFCPNIPL@greek?5capital?5letter?5sigma?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CL@HFCPNIPL@greek?5capital?5letter?5sigma?0?5U?$CL0@ DB 'greek cap'
	DB	'ital letter sigma, U+03A3 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKBNPMBG@Sigma@
CONST	SEGMENT
??_C@_05MKBNPMBG@Sigma@ DB 'Sigma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KMJAKGAP@greek?5capital?5letter?5rho?0?5U?$CL03A@
CONST	SEGMENT
??_C@_0CB@KMJAKGAP@greek?5capital?5letter?5rho?0?5U?$CL03A@ DB 'greek cap'
	DB	'ital letter rho, U+03A1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BLBOAKDK@Rho@
CONST	SEGMENT
??_C@_03BLBOAKDK@Rho@ DB 'Rho', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GJIDFEDM@greek?5capital?5letter?5pi?0?5U?$CL03A0@
CONST	SEGMENT
??_C@_0CI@GJIDFEDM@greek?5capital?5letter?5pi?0?5U?$CL03A0@ DB 'greek cap'
	DB	'ital letter pi, U+03A0 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NIDNNILD@Pi@
CONST	SEGMENT
??_C@_02NIDNNILD@Pi@ DB 'Pi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LAEOEFAO@greek?5capital?5letter?5omicron?0?5U@
CONST	SEGMENT
??_C@_0CF@LAEOEFAO@greek?5capital?5letter?5omicron?0?5U@ DB 'greek capita'
	DB	'l letter omicron, U+039F', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IKLCMNO@Omicron@
CONST	SEGMENT
??_C@_07IKLCMNO@Omicron@ DB 'Omicron', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DEKDLEND@greek?5capital?5letter?5xi?0?5U?$CL039E@
CONST	SEGMENT
??_C@_0CI@DEKDLEND@greek?5capital?5letter?5xi?0?5U?$CL039E@ DB 'greek cap'
	DB	'ital letter xi, U+039E ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02NGCOIJAL@Xi@
CONST	SEGMENT
??_C@_02NGCOIJAL@Xi@ DB 'Xi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EBJANCBL@greek?5capital?5letter?5nu?0?5U?$CL039D@
CONST	SEGMENT
??_C@_0CA@EBJANCBL@greek?5capital?5letter?5nu?0?5U?$CL039D@ DB 'greek cap'
	DB	'ital letter nu, U+039D', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CIPCALJE@Nu@
CONST	SEGMENT
??_C@_02CIPCALJE@Nu@ DB 'Nu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JHDDCCNN@greek?5capital?5letter?5mu?0?5U?$CL039C@
CONST	SEGMENT
??_C@_0CA@JHDDCCNN@greek?5capital?5letter?5mu?0?5U?$CL039C@ DB 'greek cap'
	DB	'ital letter mu, U+039C', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02CKLELFMN@Mu@
CONST	SEGMENT
??_C@_02CKLELFMN@Mu@ DB 'Mu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@NLEFHINL@greek?5capital?5letter?5lambda?0?5U?$CL@
CONST	SEGMENT
??_C@_0CM@NLEFHINL@greek?5capital?5letter?5lambda?0?5U?$CL@ DB 'greek cap'
	DB	'ital letter lambda, U+039B ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OBCFFGBN@Lambda@
CONST	SEGMENT
??_C@_06OBCFFGBN@Lambda@ DB 'Lambda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BBAOAFHF@greek?5capital?5letter?5kappa?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CD@BBAOAFHF@greek?5capital?5letter?5kappa?0?5U?$CL0@ DB 'greek cap'
	DB	'ital letter kappa, U+039A', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MMNIGICE@Kappa@
CONST	SEGMENT
??_C@_05MMNIGICE@Kappa@ DB 'Kappa', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BFEJFF@greek?5capital?5letter?5iota?0?5U?$CL03@
CONST	SEGMENT
??_C@_0CC@BFEJFF@greek?5capital?5letter?5iota?0?5U?$CL03@ DB 'greek capit'
	DB	'al letter iota, U+0399', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CAGFEPOF@Iota@
CONST	SEGMENT
??_C@_04CAGFEPOF@Iota@ DB 'Iota', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DEOCPNDP@greek?5capital?5letter?5theta?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CL@DEOCPNDP@greek?5capital?5letter?5theta?0?5U?$CL0@ DB 'greek cap'
	DB	'ital letter theta, U+0398 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FDIGLFGK@Theta@
CONST	SEGMENT
??_C@_05FDIGLFGK@Theta@ DB 'Theta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GCINFKKN@greek?5capital?5letter?5eta?0?5U?$CL039@
CONST	SEGMENT
??_C@_0CB@GCINFKKN@greek?5capital?5letter?5eta?0?5U?$CL039@ DB 'greek cap'
	DB	'ital letter eta, U+0397', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FNGPBCIG@Eta@
CONST	SEGMENT
??_C@_03FNGPBCIG@Eta@ DB 'Eta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GEHHHHOP@greek?5capital?5letter?5zeta?0?5U?$CL03@
CONST	SEGMENT
??_C@_0CC@GEHHHHOP@greek?5capital?5letter?5zeta?0?5U?$CL03@ DB 'greek cap'
	DB	'ital letter zeta, U+0396', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIJIECND@Zeta@
CONST	SEGMENT
??_C@_04GIJIECND@Zeta@ DB 'Zeta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@JDHAIGGH@greek?5capital?5letter?5epsilon?0?5U@
CONST	SEGMENT
??_C@_0CF@JDHAIGGH@greek?5capital?5letter?5epsilon?0?5U@ DB 'greek capita'
	DB	'l letter epsilon, U+0395', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MHFJNEOI@Epsilon@
CONST	SEGMENT
??_C@_07MHFJNEOI@Epsilon@ DB 'Epsilon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NHEEDEFH@greek?5capital?5letter?5delta?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CL@NHEEDEFH@greek?5capital?5letter?5delta?0?5U?$CL0@ DB 'greek cap'
	DB	'ital letter delta, U+0394 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NFMIDMMK@Delta@
CONST	SEGMENT
??_C@_05NFMIDMMK@Delta@ DB 'Delta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LGHPBLEE@greek?5capital?5letter?5gamma?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CL@LGHPBLEE@greek?5capital?5letter?5gamma?0?5U?$CL0@ DB 'greek cap'
	DB	'ital letter gamma, U+0393 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NJHBHDO@Gamma@
CONST	SEGMENT
??_C@_05NJHBHDO@Gamma@ DB 'Gamma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OOBPMHFM@greek?5capital?5letter?5beta?0?5U?$CL03@
CONST	SEGMENT
??_C@_0CC@OOBPMHFM@greek?5capital?5letter?5beta?0?5U?$CL03@ DB 'greek cap'
	DB	'ital letter beta, U+0392', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIAIJOJA@Beta@
CONST	SEGMENT
??_C@_04DIAIJOJA@Beta@ DB 'Beta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LPBPODOI@greek?5capital?5letter?5alpha?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CD@LPBPODOI@greek?5capital?5letter?5alpha?0?5U?$CL0@ DB 'greek cap'
	DB	'ital letter alpha, U+0391', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHOGHNDL@Alpha@
CONST	SEGMENT
??_C@_05IHOGHNDL@Alpha@ DB 'Alpha', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KGODGBKN@small?5tilde?0?5U?$CL02DC?5ISOdia@
CONST	SEGMENT
??_C@_0BL@KGODGBKN@small?5tilde?0?5U?$CL02DC?5ISOdia@ DB 'small tilde, U+'
	DB	'02DC ISOdia', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05GMAILABC@tilde@
CONST	SEGMENT
??_C@_05GMAILABC@tilde@ DB 'tilde', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JBEBEMPM@modifier?5letter?5circumflex?5acce@
CONST	SEGMENT
??_C@_0DB@JBEBEMPM@modifier?5letter?5circumflex?5acce@ DB 'modifier lette'
	DB	'r circumflex accent, U+02C6 ISOpub', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LIMEDJKM@circ@
CONST	SEGMENT
??_C@_04LIMEDJKM@circ@ DB 'circ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@ONFHMKBH@latin?5small?5f?5with?5hook?5?$DN?5funct@
CONST	SEGMENT
??_C@_0DM@ONFHMKBH@latin?5small?5f?5with?5hook?5?$DN?5funct@ DB 'latin sm'
	DB	'all f with hook = function = florin, U+0192 ISOtech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEHKEKAD@fnof@
CONST	SEGMENT
??_C@_04IEHKEKAD@fnof@ DB 'fnof', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@DAKEFH@latin?5capital?5letter?5Y?5with?5dia@
CONST	SEGMENT
??_C@_0DG@DAKEFH@latin?5capital?5letter?5Y?5with?5dia@ DB 'latin capital '
	DB	'letter Y with diaeresis, U+0178 ISOlat2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NJHIIJCO@Yuml@
CONST	SEGMENT
??_C@_04NJHIIJCO@Yuml@ DB 'Yuml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KEKHKDDJ@latin?5small?5letter?5s?5with?5caron@
CONST	SEGMENT
??_C@_0DA@KEKHKDDJ@latin?5small?5letter?5s?5with?5caron@ DB 'latin small '
	DB	'letter s with caron, U+0161 ISOlat2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMOCGLBN@scaron@
CONST	SEGMENT
??_C@_06OMOCGLBN@scaron@ DB 'scaron', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@DIFHMFIC@latin?5capital?5letter?5S?5with?5car@
CONST	SEGMENT
??_C@_0DC@DIFHMFIC@latin?5capital?5letter?5S?5with?5car@ DB 'latin capita'
	DB	'l letter S with caron, U+0160 ISOlat2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDFPFCIB@Scaron@
CONST	SEGMENT
??_C@_06CDFPFCIB@Scaron@ DB 'Scaron', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PBDOLLDF@latin?5small?5ligature?5oe?0?5U?$CL0153@
CONST	SEGMENT
??_C@_0CI@PBDOLLDF@latin?5small?5ligature?5oe?0?5U?$CL0153@ DB 'latin sma'
	DB	'll ligature oe, U+0153 ISOlat2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PKAHFOJK@oelig@
CONST	SEGMENT
??_C@_05PKAHFOJK@oelig@ DB 'oelig', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MKAIEJDG@latin?5capital?5ligature?5OE?0?5U?$CL01@
CONST	SEGMENT
??_C@_0CK@MKAIEJDG@latin?5capital?5ligature?5OE?0?5U?$CL01@ DB 'latin cap'
	DB	'ital ligature OE, U+0152 ISOlat2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DMGKHEKI@OElig@
CONST	SEGMENT
??_C@_05DMGKHEKI@OElig@ DB 'OElig', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JBLHCCEO@latin?5small?5letter?5y?5with?5diaer@
CONST	SEGMENT
??_C@_0DE@JBLHCCEO@latin?5small?5letter?5y?5with?5diaer@ DB 'latin small '
	DB	'letter y with diaeresis, U+00FF ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BILJKGCK@yuml@
CONST	SEGMENT
??_C@_04BILJKGCK@yuml@ DB 'yuml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PJIHMBHF@latin?5small?5letter?5thorn?5with?0?5@
CONST	SEGMENT
??_C@_0CO@PJIHMBHF@latin?5small?5letter?5thorn?5with?0?5@ DB 'latin small'
	DB	' letter thorn with, U+00FE ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LIICDAEF@thorn@
CONST	SEGMENT
??_C@_05LIICDAEF@thorn@ DB 'thorn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PNAMGKHG@latin?5small?5letter?5y?5with?5acute@
CONST	SEGMENT
??_C@_0DA@PNAMGKHG@latin?5small?5letter?5y?5with?5acute@ DB 'latin small '
	DB	'letter y with acute, U+00FD ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBMKGLNL@yacute@
CONST	SEGMENT
??_C@_06BBMKGLNL@yacute@ DB 'yacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@MALBCLBP@latin?5small?5letter?5u?5with?5diaer@
CONST	SEGMENT
??_C@_0DE@MALBCLBP@latin?5small?5letter?5u?5with?5diaer@ DB 'latin small '
	DB	'letter u with diaeresis, U+00FC ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNEJELCL@uuml@
CONST	SEGMENT
??_C@_04NNEJELCL@uuml@ DB 'uuml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@DPGDCGIM@latin?5small?5letter?5u?5with?5circu@
CONST	SEGMENT
??_C@_0DF@DPGDCGIM@latin?5small?5letter?5u?5with?5circu@ DB 'latin small '
	DB	'letter u with circumflex, U+00FB ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JEMLPDGA@ucirc@
CONST	SEGMENT
??_C@_05JEMLPDGA@ucirc@ DB 'ucirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OCJHAGEB@latin?5small?5letter?5u?5with?5acute@
CONST	SEGMENT
??_C@_0DA@OCJHAGEB@latin?5small?5letter?5u?5with?5acute@ DB 'latin small '
	DB	'letter u with acute, U+00FA ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NGGKABKP@uacute@
CONST	SEGMENT
??_C@_06NGGKABKP@uacute@ DB 'uacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HLFJEOFC@latin?5small?5letter?5u?5with?5grave@
CONST	SEGMENT
??_C@_0DA@HLFJEOFC@latin?5small?5letter?5u?5with?5grave@ DB 'latin small '
	DB	'letter u with grave, U+00F9 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBEMEICG@ugrave@
CONST	SEGMENT
??_C@_06IBEMEICG@ugrave@ DB 'ugrave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@JDKOEFON@latin?5small?5letter?5o?5with?5strok@
CONST	SEGMENT
??_C@_0EP@JDKOEFON@latin?5small?5letter?5o?5with?5strok@ DB 'latin small '
	DB	'letter o with stroke, = latin small letter o slash, U+00F8 IS'
	DB	'Olat1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGBAFOGO@oslash@
CONST	SEGMENT
??_C@_06LGBAFOGO@oslash@ DB 'oslash', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DJHBCHKN@division?5sign?0?5U?$CL00F7?5ISOnum@
CONST	SEGMENT
??_C@_0BN@DJHBCHKN@division?5sign?0?5U?$CL00F7?5ISOnum@ DB 'division sign'
	DB	', U+00F7 ISOnum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFHJEHBN@divide@
CONST	SEGMENT
??_C@_06FFHJEHBN@divide@ DB 'divide', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@IBKMGEO@latin?5small?5letter?5o?5with?5diaer@
CONST	SEGMENT
??_C@_0DE@IBKMGEO@latin?5small?5letter?5o?5with?5diaer@ DB 'latin small l'
	DB	'etter o with diaeresis, U+00F6 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHBJMEAI@ouml@
CONST	SEGMENT
??_C@_04PHBJMEAI@ouml@ DB 'ouml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NLFOBBBN@latin?5small?5letter?5o?5with?5tilde@
CONST	SEGMENT
??_C@_0DA@NLFOBBBN@latin?5small?5letter?5o?5with?5tilde@ DB 'latin small '
	DB	'letter o with tilde, U+00F5 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DNFIPCMD@otilde@
CONST	SEGMENT
??_C@_06DNFIPCMD@otilde@ DB 'otilde', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FHOFOHGN@latin?5small?5letter?5o?5with?5circu@
CONST	SEGMENT
??_C@_0DF@FHOFOHGN@latin?5small?5letter?5o?5with?5circu@ DB 'latin small '
	DB	'letter o with circumflex, U+00F4 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DGIGNCJN@ocirc@
CONST	SEGMENT
??_C@_05DGIGNCJN@ocirc@ DB 'ocirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PODAKJAL@latin?5small?5letter?5o?5with?5acute@
CONST	SEGMENT
??_C@_0DA@PODAKJAL@latin?5small?5letter?5o?5with?5acute@ DB 'latin small '
	DB	'letter o with acute, U+00F3 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BFMEMCCP@oacute@
CONST	SEGMENT
??_C@_06BFMEMCCP@oacute@ DB 'oacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@GNKCEPEK@latin?5small?5letter?5o?5with?5grave@
CONST	SEGMENT
??_C@_0DA@GNKCEPEK@latin?5small?5letter?5o?5with?5grave@ DB 'latin small '
	DB	'letter o with grave, U+00F2 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECOCILKG@ograve@
CONST	SEGMENT
??_C@_06ECOCILKG@ograve@ DB 'ograve', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LBLCGIED@latin?5small?5letter?5n?5with?5tilde@
CONST	SEGMENT
??_C@_0DA@LBLCGIED@latin?5small?5letter?5n?5with?5tilde@ DB 'latin small '
	DB	'letter n with tilde, U+00F1 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JLCPPJHH@ntilde@
CONST	SEGMENT
??_C@_06JLCPPJHH@ntilde@ DB 'ntilde', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LGCMOCIP@latin?5small?5letter?5eth?0?5U?$CL00F0?5@
CONST	SEGMENT
??_C@_0CH@LGCMOCIP@latin?5small?5letter?5eth?0?5U?$CL00F0?5@ DB 'latin sm'
	DB	'all letter eth, U+00F0 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CMJPAGPB@eth@
CONST	SEGMENT
??_C@_03CMJPAGPB@eth@ DB 'eth', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@NBJOEHPN@latin?5small?5letter?5i?5with?5diaer@
CONST	SEGMENT
??_C@_0DE@NBJOEHPN@latin?5small?5letter?5i?5with?5diaer@ DB 'latin small '
	DB	'letter i with diaeresis, U+00EF ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIFJDBKI@iuml@
CONST	SEGMENT
??_C@_04HIFJDBKI@iuml@ DB 'iuml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@MIBIJHO@latin?5small?5letter?5i?5with?5circu@
CONST	SEGMENT
??_C@_0DF@MIBIJHO@latin?5small?5letter?5i?5with?5circu@ DB 'latin small l'
	DB	'etter i with circumflex, U+00EE ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OANPDBIA@icirc@
CONST	SEGMENT
??_C@_05OANPDBIA@icirc@ DB 'icirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@OCCGIBHC@latin?5small?5letter?5i?5with?5acute@
CONST	SEGMENT
??_C@_0DA@OCCGIBHC@latin?5small?5letter?5i?5with?5acute@ DB 'latin small '
	DB	'letter i with acute, U+00ED ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGBEPHBF@iacute@
CONST	SEGMENT
??_C@_06HGBEPHBF@iacute@ DB 'iacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HMKKBHHE@latin?5small?5letter?5i?5with?5grave@
CONST	SEGMENT
??_C@_0DA@HMKKBHHE@latin?5small?5letter?5i?5with?5grave@ DB 'latin small '
	DB	'letter i with grave, U+00EC ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBDCLOJM@igrave@
CONST	SEGMENT
??_C@_06CBDCLOJM@igrave@ DB 'igrave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GPFKCFJC@latin?5small?5letter?5e?5with?5diaer@
CONST	SEGMENT
??_C@_0DE@GPFKCFJC@latin?5small?5letter?5e?5with?5diaer@ DB 'latin small '
	DB	'letter e with diaeresis, U+00EB ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNKJNMKJ@euml@
CONST	SEGMENT
??_C@_04LNKJNMKJ@euml@ DB 'euml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GIAAOCCN@latin?5small?5letter?5e?5with?5circu@
CONST	SEGMENT
??_C@_0DF@GIAAOCCN@latin?5small?5letter?5e?5with?5circu@ DB 'latin small '
	DB	'letter e with circumflex, U+00EA ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JHBNPBPL@ecirc@
CONST	SEGMENT
??_C@_05JHBNPBPL@ecirc@ DB 'ecirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BICDCICJ@latin?5small?5letter?5e?5with?5acute@
CONST	SEGMENT
??_C@_0DA@BICDCICJ@latin?5small?5letter?5e?5with?5acute@ DB 'latin small '
	DB	'letter e with acute, U+00E9 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBLEJNGB@eacute@
CONST	SEGMENT
??_C@_06LBLEJNGB@eacute@ DB 'eacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@ILLBMOGI@latin?5small?5letter?5e?5with?5grave@
CONST	SEGMENT
??_C@_0DA@ILLBMOGI@latin?5small?5letter?5e?5with?5grave@ DB 'latin small '
	DB	'letter e with grave, U+00E8 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGJCNEOI@egrave@
CONST	SEGMENT
??_C@_06OGJCNEOI@egrave@ DB 'egrave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EILMCCNK@latin?5small?5letter?5c?5with?5cedil@
CONST	SEGMENT
??_C@_0DC@EILMCCNK@latin?5small?5letter?5c?5with?5cedil@ DB 'latin small '
	DB	'letter c with cedilla, U+00E7 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DNHFEHGA@ccedil@
CONST	SEGMENT
??_C@_06DNHFEHGA@ccedil@ DB 'ccedil', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@CAAHFPMH@latin?5small?5letter?5ae?5?$DN?5latin?5s@
CONST	SEGMENT
??_C@_0EA@CAAHFPMH@latin?5small?5letter?5ae?5?$DN?5latin?5s@ DB 'latin sm'
	DB	'all letter ae = latin small ligature ae, U+00E6 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAANDPOK@aelig@
CONST	SEGMENT
??_C@_05MAANDPOK@aelig@ DB 'aelig', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@ICHFIEOC@latin?5small?5letter?5a?5with?5ring?5@
CONST	SEGMENT
??_C@_0FB@ICHFIEOC@latin?5small?5letter?5a?5with?5ring?5@ DB 'latin small'
	DB	' letter a with ring above = latin small letter a ring, U+00E5'
	DB	' ISOlat1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05CAFMJCMP@aring@
CONST	SEGMENT
??_C@_05CAFMJCMP@aring@ DB 'aring', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@EPMHJDIB@latin?5small?5letter?5a?5with?5diaer@
CONST	SEGMENT
??_C@_0DE@EPMHJDIB@latin?5small?5letter?5a?5with?5diaer@ DB 'latin small '
	DB	'letter a with diaeresis, U+00E4 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04EICJHKGJ@auml@
CONST	SEGMENT
??_C@_04EICJHKGJ@auml@ DB 'auml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@HABPBCGA@latin?5small?5letter?5a?5with?5tilde@
CONST	SEGMENT
??_C@_0DA@HABPBCGA@latin?5small?5letter?5a?5with?5tilde@ DB 'latin small '
	DB	'letter a with tilde, U+00E3 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GNGHIJJO@atilde@
CONST	SEGMENT
??_C@_06GNGHIJJO@atilde@ DB 'atilde', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@OHHHJIGO@latin?5small?5letter?5a?5with?5circu@
CONST	SEGMENT
??_C@_0DF@OHHHJIGO@latin?5small?5letter?5a?5with?5circu@ DB 'latin small '
	DB	'letter a with circumflex, U+00E2 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIMLDON@acirc@
CONST	SEGMENT
??_C@_05MIMLDON@acirc@ DB 'acirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@FMJKAKAM@latin?5small?5letter?5a?5with?5acute@
CONST	SEGMENT
??_C@_0DA@FMJKAKAM@latin?5small?5letter?5a?5with?5acute@ DB 'latin small '
	DB	'letter a with acute, U+00E1 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EFPLLJHC@aacute@
CONST	SEGMENT
??_C@_06EFPLLJHC@aacute@ DB 'aacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@PDCHJIBF@latin?5small?5letter?5a?5with?5grave@
CONST	SEGMENT
??_C@_0EN@PDCHJIBF@latin?5small?5letter?5a?5with?5grave@ DB 'latin small '
	DB	'letter a with grave = latin small letter a grave, U+00E0 ISOl'
	DB	'at1', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCNNPAPL@agrave@
CONST	SEGMENT
??_C@_06BCNNPAPL@agrave@ DB 'agrave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GONKECDL@latin?5small?5letter?5sharp?5s?5?$DN?5es@
CONST	SEGMENT
??_C@_0DF@GONKECDL@latin?5small?5letter?5sharp?5s?5?$DN?5es@ DB 'latin sm'
	DB	'all letter sharp s = ess-zed, U+00DF ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GMKDJMCJ@szlig@
CONST	SEGMENT
??_C@_05GMKDJMCJ@szlig@ DB 'szlig', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CHGPFKBD@latin?5capital?5letter?5THORN?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CL@CHGPFKBD@latin?5capital?5letter?5THORN?0?5U?$CL0@ DB 'latin cap'
	DB	'ital letter THORN, U+00DE ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HDBENHAL@THORN@
CONST	SEGMENT
??_C@_05HDBENHAL@THORN@ DB 'THORN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@NGFCNODC@latin?5capital?5letter?5Y?5with?5acu@
CONST	SEGMENT
??_C@_0DC@NGFCNODC@latin?5capital?5letter?5Y?5with?5acu@ DB 'latin capita'
	DB	'l letter Y with acute, U+00DD ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOHHFCEH@Yacute@
CONST	SEGMENT
??_C@_06NOHHFCEH@Yacute@ DB 'Yacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@GOPODDHD@latin?5capital?5letter?5U?5with?5dia@
CONST	SEGMENT
??_C@_0DG@GOPODDHD@latin?5capital?5letter?5U?5with?5dia@ DB 'latin capita'
	DB	'l letter U with diaeresis, U+00DC ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMIIGECP@Uuml@
CONST	SEGMENT
??_C@_04BMIIGECP@Uuml@ DB 'Uuml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@MPJOGDLJ@latin?5capital?5letter?5U?5with?5cir@
CONST	SEGMENT
??_C@_0DH@MPJOGDLJ@latin?5capital?5letter?5U?5with?5cir@ DB 'latin capita'
	DB	'l letter U with circumflex, U+00DB ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JDGHPGFG@Ucirc@
CONST	SEGMENT
??_C@_05JDGHPGFG@Ucirc@ DB 'Ucirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@MJMJLCAF@latin?5capital?5letter?5U?5with?5acu@
CONST	SEGMENT
??_C@_0DC@MJMJLCAF@latin?5capital?5letter?5U?5with?5acu@ DB 'latin capita'
	DB	'l letter U with acute, U+00DA ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BJNHDIDD@Uacute@
CONST	SEGMENT
??_C@_06BJNHDIDD@Uacute@ DB 'Uacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@FAAHPKBG@latin?5capital?5letter?5U?5with?5gra@
CONST	SEGMENT
??_C@_0DC@FAAHPKBG@latin?5capital?5letter?5U?5with?5gra@ DB 'latin capita'
	DB	'l letter U with grave, U+00D9 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EOPBHBLK@Ugrave@
CONST	SEGMENT
??_C@_06EOPBHBLK@Ugrave@ DB 'Ugrave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@JOMDMBPL@latin?5capital?5letter?5O?5with?5str@
CONST	SEGMENT
??_C@_0FA@JOMDMBPL@latin?5capital?5letter?5O?5with?5str@ DB 'latin capita'
	DB	'l letter O with stroke latin capital letter O slash, U+00D8 I'
	DB	'SOlat1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJKNGHPC@Oslash@
CONST	SEGMENT
??_C@_06HJKNGHPC@Oslash@ DB 'Oslash', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DGCLGCAP@multiplication?5sign?0?5U?$CL00D7?5ISO@
CONST	SEGMENT
??_C@_0CD@DGCLGCAP@multiplication?5sign?0?5U?$CL00D7?5ISO@ DB 'multiplica'
	DB	'tion sign, U+00D7 ISOnum', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MJOOAIJH@times@
CONST	SEGMENT
??_C@_05MJOOAIJH@times@ DB 'times', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KGFFNOCC@latin?5capital?5letter?5O?5with?5dia@
CONST	SEGMENT
??_C@_0DG@KGFFNOCC@latin?5capital?5letter?5O?5with?5dia@ DB 'latin capita'
	DB	'l letter O with diaeresis, U+00D6 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGNIOLAM@Ouml@
CONST	SEGMENT
??_C@_04DGNIOLAM@Ouml@ DB 'Ouml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PAAAKFFJ@latin?5capital?5letter?5O?5with?5til@
CONST	SEGMENT
??_C@_0DC@PAAAKFFJ@latin?5capital?5letter?5O?5with?5til@ DB 'latin capita'
	DB	'l letter O with tilde, U+00D5 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCOFMLFP@Otilde@
CONST	SEGMENT
??_C@_06PCOFMLFP@Otilde@ DB 'Otilde', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@KHBIKCFI@latin?5capital?5letter?5O?5with?5cir@
CONST	SEGMENT
??_C@_0DH@KHBIKCFI@latin?5capital?5letter?5O?5with?5cir@ DB 'latin capita'
	DB	'l letter O with circumflex, U+00D4 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DBCKNHKL@Ocirc@
CONST	SEGMENT
??_C@_05DBCKNHKL@Ocirc@ DB 'Ocirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@NFGOBNEP@latin?5capital?5letter?5O?5with?5acu@
CONST	SEGMENT
??_C@_0DC@NFGOBNEP@latin?5capital?5letter?5O?5with?5acu@ DB 'latin capita'
	DB	'l letter O with acute, U+00D3 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NKHJPLLD@Oacute@
CONST	SEGMENT
??_C@_06NKHJPLLD@Oacute@ DB 'Oacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EGPMPLAO@latin?5capital?5letter?5O?5with?5gra@
CONST	SEGMENT
??_C@_0DC@EGPMPLAO@latin?5capital?5letter?5O?5with?5gra@ DB 'latin capita'
	DB	'l letter O with grave, U+00D2 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06INFPLCDK@Ograve@
CONST	SEGMENT
??_C@_06INFPLCDK@Ograve@ DB 'Ograve', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@JKOMNMAH@latin?5capital?5letter?5N?5with?5til@
CONST	SEGMENT
??_C@_0DC@JKOMNMAH@latin?5capital?5letter?5N?5with?5til@ DB 'latin capita'
	DB	'l letter N with tilde, U+00D1 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FEJCMAOL@Ntilde@
CONST	SEGMENT
??_C@_06FEJCMAOL@Ntilde@ DB 'Ntilde', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LDDCJAMI@latin?5capital?5letter?5ETH?0?5U?$CL00D@
CONST	SEGMENT
??_C@_0CJ@LDDCJAMI@latin?5capital?5letter?5ETH?0?5U?$CL00D@ DB 'latin cap'
	DB	'ital letter ETH, U+00D0 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBGEMLIN@ETH@
CONST	SEGMENT
??_C@_03CBGEMLIN@ETH@ DB 'ETH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@MPAICMBD@latin?5capital?5letter?5I?5with?5dia@
CONST	SEGMENT
??_C@_0DG@MPAICMBD@latin?5capital?5letter?5I?5with?5dia@ DB 'latin capita'
	DB	'l letter I with diaeresis, U+00CF ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LJJIBOKM@Iuml@
CONST	SEGMENT
??_C@_04LJJIBOKM@Iuml@ DB 'Iuml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@EMKFLPMJ@latin?5capital?5letter?5I?5with?5cir@
CONST	SEGMENT
??_C@_0DH@EMKFLPMJ@latin?5capital?5letter?5I?5with?5cir@ DB 'latin capita'
	DB	'l letter I with circumflex, U+00CE ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHHDDELG@Icirc@
CONST	SEGMENT
??_C@_05OHHDDELG@Icirc@ DB 'Icirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HJKBEGLE@latin?5capital?5letter?5I?5with?5acu@
CONST	SEGMENT
??_C@_0DC@HJKBEGLE@latin?5capital?5letter?5I?5with?5acu@ DB 'latin capita'
	DB	'l letter I with acute, U+00CD ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LJKJMOIJ@Iacute@
CONST	SEGMENT
??_C@_06LJKJMOIJ@Iacute@ DB 'Iacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OHCNNALC@latin?5capital?5letter?5I?5with?5gra@
CONST	SEGMENT
??_C@_0DC@OHCNNALC@latin?5capital?5letter?5I?5with?5gra@ DB 'latin capita'
	DB	'l letter I with grave, U+00CC ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06OOIPIHAA@Igrave@
CONST	SEGMENT
??_C@_06OOIPIHAA@Igrave@ DB 'Igrave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HBMMEOHM@latin?5capital?5letter?5E?5with?5dia@
CONST	SEGMENT
??_C@_0DG@HBMMEOHM@latin?5capital?5letter?5E?5with?5dia@ DB 'latin capita'
	DB	'l letter E with diaeresis, U+00CB ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMGIPDKN@Euml@
CONST	SEGMENT
??_C@_04HMGIPDKN@Euml@ DB 'Euml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CICENEJK@latin?5capital?5letter?5E?5with?5cir@
CONST	SEGMENT
??_C@_0DH@CICENEJK@latin?5capital?5letter?5E?5with?5cir@ DB 'latin capita'
	DB	'l letter E with circumflex, U+00CA ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JALBPEMN@Ecirc@
CONST	SEGMENT
??_C@_05JALBPEMN@Ecirc@ DB 'Ecirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IDKEOPOP@latin?5capital?5letter?5E?5with?5acu@
CONST	SEGMENT
??_C@_0DC@IDKEOPOP@latin?5capital?5letter?5E?5with?5acu@ DB 'latin capita'
	DB	'l letter E with acute, U+00C9 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HOAJKEPN@Eacute@
CONST	SEGMENT
??_C@_06HOAJKEPN@Eacute@ DB 'Eacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BADGAJKO@latin?5capital?5letter?5E?5with?5gra@
CONST	SEGMENT
??_C@_0DC@BADGAJKO@latin?5capital?5letter?5E?5with?5gra@ DB 'latin capita'
	DB	'l letter E with grave, U+00C8 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CJCPONHE@Egrave@
CONST	SEGMENT
??_C@_06CJCPONHE@Egrave@ DB 'Egrave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JIEMILBI@latin?5capital?5letter?5C?5with?5ced@
CONST	SEGMENT
??_C@_0DE@JIEMILBI@latin?5capital?5letter?5C?5with?5ced@ DB 'latin capita'
	DB	'l letter C with cedilla, U+00C7 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PCMIHOPM@Ccedil@
CONST	SEGMENT
??_C@_06PCMIHOPM@Ccedil@ DB 'Ccedil', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@MODCPHBF@latin?5capital?5letter?5AE?5?$DN?5latin@
CONST	SEGMENT
??_C@_0EE@MODCPHBF@latin?5capital?5letter?5AE?5?$DN?5latin@ DB 'latin cap'
	DB	'ital letter AE = latin capital ligature AE, U+00C6 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GGABFNI@AElig@
CONST	SEGMENT
??_C@_05GGABFNI@AElig@ DB 'AElig', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@OIKGDIMD@latin?5capital?5letter?5A?5with?5rin@
CONST	SEGMENT
??_C@_0FF@OIKGDIMD@latin?5capital?5letter?5A?5with?5rin@ DB 'latin capita'
	DB	'l letter A with ring above = latin capital letter A ring, U+0'
	DB	'0C5 ISOlat1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05CHPAJHPJ@Aring@
CONST	SEGMENT
??_C@_05CHPAJHPJ@Aring@ DB 'Aring', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@FBFBPIGP@latin?5capital?5letter?5A?5with?5dia@
CONST	SEGMENT
??_C@_0DG@FBFBPIGP@latin?5capital?5letter?5A?5with?5dia@ DB 'latin capita'
	DB	'l letter A with diaeresis, U+00C4 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IJOIFFGN@Auml@
CONST	SEGMENT
??_C@_04IJOIFFGN@Auml@ DB 'Auml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@OLJINFKG@latin?5capital?5letter?5A?5with?5til@
CONST	SEGMENT
??_C@_0DC@OLJINFKG@latin?5capital?5letter?5A?5with?5til@ DB 'latin capita'
	DB	'l letter A with tilde, U+00C3 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06KCNKLAAC@Atilde@
CONST	SEGMENT
??_C@_06KCNKLAAC@Atilde@ DB 'Atilde', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@KHFDKONJ@latin?5capital?5letter?5A?5with?5cir@
CONST	SEGMENT
??_C@_0DH@KHFDKONJ@latin?5capital?5letter?5A?5with?5cir@ DB 'latin capita'
	DB	'l letter A with circumflex, U+00C2 ISOlat1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCALGNL@Acirc@
CONST	SEGMENT
??_C@_05LCALGNL@Acirc@ DB 'Acirc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@MHBNMNMK@latin?5capital?5letter?5A?5with?5acu@
CONST	SEGMENT
??_C@_0DC@MHBNMNMK@latin?5capital?5letter?5A?5with?5acu@ DB 'latin capita'
	DB	'l letter A with acute, U+00C1 ISOlat1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKEGIAOO@Aacute@
CONST	SEGMENT
??_C@_06IKEGIAOO@Aacute@ DB 'Aacute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@KEPDLJAE@latin?5capital?5letter?5A?5with?5gra@
CONST	SEGMENT
??_C@_0FB@KEPDLJAE@latin?5capital?5letter?5A?5with?5gra@ DB 'latin capita'
	DB	'l letter A with grave = latin capital letter A grave, U+00C0 '
	DB	'ISOlat1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNGAMJGH@Agrave@
CONST	SEGMENT
??_C@_06NNGAMJGH@Agrave@ DB 'Agrave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@EEILHCCA@inverted?5question?5mark?5?$DN?5turned@
CONST	SEGMENT
??_C@_0DN@EEILHCCA@inverted?5question?5mark?5?$DN?5turned@ DB 'inverted q'
	DB	'uestion mark = turned question mark, U+00BF ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JMONPFKG@iquest@
CONST	SEGMENT
??_C@_06JMONPFKG@iquest@ DB 'iquest', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@KLKHBCM@vulgar?5fraction?5three?5quarters?5@
CONST	SEGMENT
??_C@_0EI@KLKHBCM@vulgar?5fraction?5three?5quarters?5@ DB 'vulgar fractio'
	DB	'n three quarters = fraction three quarters, U+00BE ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NMNJFLLK@frac34@
CONST	SEGMENT
??_C@_06NMNJFLLK@frac34@ DB 'frac34', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@DIGGMOPD@vulgar?5fraction?5one?5half?5?$DN?5frac@
CONST	SEGMENT
??_C@_0DM@DIGGMOPD@vulgar?5fraction?5one?5half?5?$DN?5frac@ DB 'vulgar fr'
	DB	'action one half = fraction one half, U+00BD ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IJAHCIFC@frac12@
CONST	SEGMENT
??_C@_06IJAHCIFC@frac12@ DB 'frac12', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@KBCMBOHG@vulgar?5fraction?5one?5quarter?5?$DN?5f@
CONST	SEGMENT
??_C@_0EC@KBCMBOHG@vulgar?5fraction?5one?5quarter?5?$DN?5f@ DB 'vulgar fr'
	DB	'action one quarter = fraction one quarter, U+00BC ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPFNIPNE@frac14@
CONST	SEGMENT
??_C@_06NPFNIPNE@frac14@ DB 'frac14', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@EGIHNJHG@right?9pointing?5double?5angle?5quo@
CONST	SEGMENT
??_C@_0FD@EGIHNJHG@right?9pointing?5double?5angle?5quo@ DB 'right-pointin'
	DB	'g double angle quotation mark right pointing guillemet, U+00B'
	DB	'B ISOnum', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPFJLGEB@raquo@
CONST	SEGMENT
??_C@_05MPFJLGEB@raquo@ DB 'raquo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FJKJODCC@masculine?5ordinal?5indicator?0?5U?$CL@
CONST	SEGMENT
??_C@_0CL@FJKJODCC@masculine?5ordinal?5indicator?0?5U?$CL@ DB 'masculine '
	DB	'ordinal indicator, U+00BA ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMAEPGHP@ordm@
CONST	SEGMENT
??_C@_04HMAEPGHP@ordm@ DB 'ordm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@CNBAIMGE@superscript?5one?5?$DN?5superscript?5d@
CONST	SEGMENT
??_C@_0DH@CNBAIMGE@superscript?5one?5?$DN?5superscript?5d@ DB 'superscrip'
	DB	't one = superscript digit one, U+00B9 ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJOCKNLB@sup1@
CONST	SEGMENT
??_C@_04EJOCKNLB@sup1@ DB 'sup1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@ILEJKNLC@cedilla?5?$DN?5spacing?5cedilla?0?5U?$CL00@
CONST	SEGMENT
??_C@_0CJ@ILEJKNLC@cedilla?5?$DN?5spacing?5cedilla?0?5U?$CL00@ DB 'cedill'
	DB	'a = spacing cedilla, U+00B8 ISOdia', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KLIFGPMF@cedil@
CONST	SEGMENT
??_C@_05KLIFGPMF@cedil@ DB 'cedil', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@HGAIAHA@middle?5dot?5?$DN?5Georgian?5comma?5Gre@
CONST	SEGMENT
??_C@_0DM@HGAIAHA@middle?5dot?5?$DN?5Georgian?5comma?5Gre@ DB 'middle dot'
	DB	' = Georgian comma Greek middle dot, U+00B7 ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHCHNCAA@middot@
CONST	SEGMENT
??_C@_06HHCHNCAA@middot@ DB 'middot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MOKENOBK@pilcrow?5sign?5?$DN?5paragraph?5sign?0?5@
CONST	SEGMENT
??_C@_0CN@MOKENOBK@pilcrow?5sign?5?$DN?5paragraph?5sign?0?5@ DB 'pilcrow '
	DB	'sign = paragraph sign, U+00B6 ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIAGJOJD@para@
CONST	SEGMENT
??_C@_04GIAGJOJD@para@ DB 'para', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KOECHADG@micro?5sign?0?5U?$CL00B5?5ISOnum@
CONST	SEGMENT
??_C@_0BK@KOECHADG@micro?5sign?0?5U?$CL00B5?5ISOnum@ DB 'micro sign, U+00'
	DB	'B5 ISOnum', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05PCPGMEFP@micro@
CONST	SEGMENT
??_C@_05PCPGMEFP@micro@ DB 'micro', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HPINDAMO@acute?5accent?5?$DN?5spacing?5acute?0?5U@
CONST	SEGMENT
??_C@_0CM@HPINDAMO@acute?5accent?5?$DN?5spacing?5acute?0?5U@ DB 'acute ac'
	DB	'cent = spacing acute, U+00B4 ISOdia', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EEJEIAPO@acute@
CONST	SEGMENT
??_C@_05EEJEIAPO@acute@ DB 'acute', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@GIKFIKLK@superscript?5three?5?$DN?5superscript@
CONST	SEGMENT
??_C@_0ED@GIKFIKLK@superscript?5three?5?$DN?5superscript@ DB 'superscript'
	DB	' three = superscript digit three = cubed, U+00B3 ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04HLNEMPDD@sup3@
CONST	SEGMENT
??_C@_04HLNEMPDD@sup3@ DB 'sup3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LEPBNIBM@superscript?5two?5?$DN?5superscript?5d@
CONST	SEGMENT
??_C@_0EB@LEPBNIBM@superscript?5two?5?$DN?5superscript?5d@ DB 'superscrip'
	DB	't two = superscript digit two = squared, U+00B2 ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GCMPPOHC@sup2@
CONST	SEGMENT
??_C@_04GCMPPOHC@sup2@ DB 'sup2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@CHKDBJJG@plus?9minus?5sign?5?$DN?5plus?9or?9minus@
CONST	SEGMENT
??_C@_0DE@CHKDBJJG@plus?9minus?5sign?5?$DN?5plus?9or?9minus@ DB 'plus-min'
	DB	'us sign = plus-or-minus sign, U+00B1 ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CAEEBBM@plusmn@
CONST	SEGMENT
??_C@_06CAEEBBM@plusmn@ DB 'plusmn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CCCHHGNH@degree?5sign?0?5U?$CL00B0?5ISOnum@
CONST	SEGMENT
??_C@_0BL@CCCHHGNH@degree?5sign?0?5U?$CL00B0?5ISOnum@ DB 'degree sign, U+'
	DB	'00B0 ISOnum', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFPLEBM@deg@
CONST	SEGMENT
??_C@_03OFPLEBM@deg@ DB 'deg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@HOMEIEDB@macron?5?$DN?5spacing?5macron?5?$DN?5overl@
CONST	SEGMENT
??_C@_0EA@HOMEIEDB@macron?5?$DN?5spacing?5macron?5?$DN?5overl@ DB 'macron'
	DB	' = spacing macron = overline = APL overbar, U+00AF ISOdia', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMHNEFHF@macr@
CONST	SEGMENT
??_C@_04IMHNEFHF@macr@ DB 'macr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@GCGJPANE@registered?5sign?5?$DN?5registered?5tr@
CONST	SEGMENT
??_C@_0DM@GCGJPANE@registered?5sign?5?$DN?5registered?5tr@ DB 'registered'
	DB	' sign = registered trade mark sign, U+00AE ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HLCNLMFP@reg@
CONST	SEGMENT
??_C@_03HLCNLMFP@reg@ DB 'reg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LBOPPEOL@soft?5hyphen?5?$DN?5discretionary?5hyp@
CONST	SEGMENT
??_C@_0DC@LBOPPEOL@soft?5hyphen?5?$DN?5discretionary?5hyp@ DB 'soft hyphe'
	DB	'n = discretionary hyphen, U+00AD ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BPAIHHLG@shy@
CONST	SEGMENT
??_C@_03BPAIHHLG@shy@ DB 'shy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BCMLJBGJ@not?5sign?0?5U?$CL00AC?5ISOnum@
CONST	SEGMENT
??_C@_0BI@BCMLJBGJ@not?5sign?0?5U?$CL00AC?5ISOnum@ DB 'not sign, U+00AC I'
	DB	'SOnum', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJKJADM@not@
CONST	SEGMENT
??_C@_03NJKJADM@not@ DB 'not', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@BNFCAIHO@left?9pointing?5double?5angle?5quot@
CONST	SEGMENT
??_C@_0FD@BNFCAIHO@left?9pointing?5double?5angle?5quot@ DB 'left-pointing'
	DB	' double angle quotation mark = left pointing guillemet, U+00A'
	DB	'B ISOnum', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05PGIFNFKK@laquo@
CONST	SEGMENT
??_C@_05PGIFNFKK@laquo@ DB 'laquo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@IDODFDJH@feminine?5ordinal?5indicator?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CK@IDODFDJH@feminine?5ordinal?5indicator?0?5U?$CL0@ DB 'feminine o'
	DB	'rdinal indicator, U+00AA ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JPPACPLE@ordf@
CONST	SEGMENT
??_C@_04JPPACPLE@ordf@ DB 'ordf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GKHKBHFO@copyright?5sign?0?5U?$CL00A9?5ISOnum@
CONST	SEGMENT
??_C@_0BO@GKHKBHFO@copyright?5sign?0?5U?$CL00A9?5ISOnum@ DB 'copyright si'
	DB	'gn, U+00A9 ISOnum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy@
CONST	SEGMENT
??_C@_04COAGEIMF@copy@ DB 'copy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DADBLGNL@diaeresis?5?$DN?5spacing?5diaeresis?0?5@
CONST	SEGMENT
??_C@_0CN@DADBLGNL@diaeresis?5?$DN?5spacing?5diaeresis?0?5@ DB 'diaeresis'
	DB	' = spacing diaeresis, U+00A8 ISOdia', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LBNAMJF@uml@
CONST	SEGMENT
??_C@_03LBNAMJF@uml@ DB 'uml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NBPOBBLJ@section?5sign?0?5U?$CL00A7?5ISOnum@
CONST	SEGMENT
??_C@_0BM@NBPOBBLJ@section?5sign?0?5U?$CL00A7?5ISOnum@ DB 'section sign, '
	DB	'U+00A7 ISOnum', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04IKJFFMEH@sect@
CONST	SEGMENT
??_C@_04IKJFFMEH@sect@ DB 'sect', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CCMOAPKD@broken?5bar?5?$DN?5broken?5vertical?5ba@
CONST	SEGMENT
??_C@_0DA@CCMOAPKD@broken?5bar?5?$DN?5broken?5vertical?5ba@ DB 'broken ba'
	DB	'r = broken vertical bar, U+00A6 ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILPBEBAD@brvbar@
CONST	SEGMENT
??_C@_06ILPBEBAD@brvbar@ DB 'brvbar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IIBMKILI@yen?5sign?5?$DN?5yuan?5sign?0?5U?$CL00A5?5IS@
CONST	SEGMENT
??_C@_0CE@IIBMKILI@yen?5sign?5?$DN?5yuan?5sign?0?5U?$CL00A5?5IS@ DB 'yen '
	DB	'sign = yuan sign, U+00A5 ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HNOOIABH@yen@
CONST	SEGMENT
??_C@_03HNOOIABH@yen@ DB 'yen', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KCBDNOJC@currency?5sign?0?5U?$CL00A4?5ISOnum@
CONST	SEGMENT
??_C@_0BN@KCBDNOJC@currency?5sign?0?5U?$CL00A4?5ISOnum@ DB 'currency sign'
	DB	', U+00A4 ISOnum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HEGEHONB@curren@
CONST	SEGMENT
??_C@_06HEGEHONB@curren@ DB 'curren', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CBLMFKEA@pound?5sign?0?5U?$CL00A3?5ISOnum@
CONST	SEGMENT
??_C@_0BK@CBLMFKEA@pound?5sign?0?5U?$CL00A3?5ISOnum@ DB 'pound sign, U+00'
	DB	'A3 ISOnum', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05EBEEKLCG@pound@
CONST	SEGMENT
??_C@_05EBEEKLCG@pound@ DB 'pound', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JAJDJOGE@cent?5sign?0?5U?$CL00A2?5ISOnum@
CONST	SEGMENT
??_C@_0BJ@JAJDJOGE@cent?5sign?0?5U?$CL00A2?5ISOnum@ DB 'cent sign, U+00A2'
	DB	' ISOnum', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCKNFIJG@cent@
CONST	SEGMENT
??_C@_04OCKNFIJG@cent@ DB 'cent', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LDCHJPND@inverted?5exclamation?5mark?0?5U?$CL00@
CONST	SEGMENT
??_C@_0CJ@LDCHJPND@inverted?5exclamation?5mark?0?5U?$CL00@ DB 'inverted e'
	DB	'xclamation mark, U+00A1 ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05BNEGCBFC@iexcl@
CONST	SEGMENT
??_C@_05BNEGCBFC@iexcl@ DB 'iexcl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@LJPHBFKA@no?9break?5space?5?$DN?5non?9breaking?5s@
CONST	SEGMENT
??_C@_0DD@LJPHBFKA@no?9break?5space?5?$DN?5non?9breaking?5s@ DB 'no-break'
	DB	' space = non-breaking space, U+00A0 ISOnum', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PHHIFBLJ@nbsp@
CONST	SEGMENT
??_C@_04PHHIFBLJ@nbsp@ DB 'nbsp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@INPPCIDE@greater?9than?5sign?0?5U?$CL003E?5ISOnu@
CONST	SEGMENT
??_C@_0CB@INPPCIDE@greater?9than?5sign?0?5U?$CL003E?5ISOnu@ DB 'greater-t'
	DB	'han sign, U+003E ISOnum', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GHFEHLK@gt@
CONST	SEGMENT
??_C@_02GHFEHLK@gt@ DB 'gt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IKPLCPFL@less?9than?5sign?0?5U?$CL003C?5ISOnum@
CONST	SEGMENT
??_C@_0BO@IKPLCPFL@less?9than?5sign?0?5U?$CL003C?5ISOnum@ DB 'less-than s'
	DB	'ign, U+003C ISOnum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KCAKIFL@lt@
CONST	SEGMENT
??_C@_02KCAKIFL@lt@ DB 'lt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EHENLBIK@single?5quote@
CONST	SEGMENT
??_C@_0N@EHENLBIK@single?5quote@ DB 'single quote', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBCJFAKL@apos@
CONST	SEGMENT
??_C@_04LBCJFAKL@apos@ DB 'apos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FIPLPGNA@ampersand?0?5U?$CL0026?5ISOnum@
CONST	SEGMENT
??_C@_0BJ@FIPLPGNA@ampersand?0?5U?$CL0026?5ISOnum@ DB 'ampersand, U+0026 '
	DB	'ISOnum', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03DCBBJBAA@amp@
CONST	SEGMENT
??_C@_03DCBBJBAA@amp@ DB 'amp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JDDAPBGE@quotation?5mark?5?$DN?5APL?5quote?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CK@JDDAPBGE@quotation?5mark?5?$DN?5APL?5quote?0?5U?$CL0@ DB 'quota'
	DB	'tion mark = APL quote, U+0022 ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJFGKBNM@quot@
CONST	SEGMENT
??_C@_04KJFGKBNM@quot@ DB 'quot', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BPAAIJBF@xmp@
CONST	SEGMENT
??_C@_03BPAAIJBF@xmp@ DB 'xmp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KMIIAGPH@listing@
CONST	SEGMENT
??_C@_07KMIIAGPH@listing@ DB 'listing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IOIBPELD@instance?5of?5a?5variable?5or?5progr@
CONST	SEGMENT
??_C@_0CL@IOIBPELD@instance?5of?5a?5variable?5or?5progr@ DB 'instance of '
	DB	'a variable or program argument', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DILGCPPM@unordered?5list?5@
CONST	SEGMENT
??_C@_0BA@DILGCPPM@unordered?5list?5@ DB 'unordered list ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NHDOOMEA@underlined?5text?5style@
CONST	SEGMENT
??_C@_0BG@NHDOOMEA@underlined?5text?5style@ DB 'underlined text style', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HPKPLEFL@teletype?5or?5monospaced?5text?5sty@
CONST	SEGMENT
??_C@_0CC@HPKPLEFL@teletype?5or?5monospaced?5text?5sty@ DB 'teletype or m'
	DB	'onospaced text style', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OLDIHEAD@table?5row?5@
CONST	SEGMENT
??_C@_0L@OLDIHEAD@table?5row?5@ DB 'table row ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CCGKIMBG@document?5title?5@
CONST	SEGMENT
??_C@_0BA@CCGKIMBG@document?5title?5@ DB 'document title ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JOOJEINB@table?5header?5@
CONST	SEGMENT
??_C@_0O@JOOJEINB@table?5header?5@ DB 'table header ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CCIFOICB@table?5header?5cell@
CONST	SEGMENT
??_C@_0BC@CCIFOICB@table?5header?5cell@ DB 'table header cell', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HFPJPDFP@table?5footer?5@
CONST	SEGMENT
??_C@_0O@HFPJPDFP@table?5footer?5@ DB 'table footer ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@ODGBEBOO@multi?9line?5text?5field?5@
CONST	SEGMENT
??_C@_0BH@ODGBEBOO@multi?9line?5text?5field?5@ DB 'multi-line text field '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OHMNJJHC@table?5data?5cell@
CONST	SEGMENT
??_C@_0BA@OHMNJJHC@table?5data?5cell@ DB 'table data cell', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@COHBKCLJ@table?5body?5@
CONST	SEGMENT
??_C@_0M@COHBKCLJ@table?5body?5@ DB 'table body ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LLOPBEAI@superscript?5@
CONST	SEGMENT
??_C@_0N@LLOPBEAI@superscript?5@ DB 'superscript ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KAIPOAII@subscript@
CONST	SEGMENT
??_C@_09KAIPOAII@subscript@ DB 'subscript', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LPADJHJK@style?5info?5@
CONST	SEGMENT
??_C@_0M@LPADJHJK@style?5info?5@ DB 'style info ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HHIAOMPI@strong?5emphasis@
CONST	SEGMENT
??_C@_0BA@HHIAOMPI@strong?5emphasis@ DB 'strong emphasis', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KLPAPDBO@strike?9through?5text@
CONST	SEGMENT
??_C@_0BE@KLPAPDBO@strike?9through?5text@ DB 'strike-through text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KPKCOJB@generic?5language?1style?5containe@
CONST	SEGMENT
??_C@_0CC@KPKCOJB@generic?5language?1style?5containe@ DB 'generic languag'
	DB	'e/style container ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PLNNDOJH@small?5text?5style@
CONST	SEGMENT
??_C@_0BB@PLNNDOJH@small?5text?5style@ DB 'small text style', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OKAAEBHI@option?5selector?5@
CONST	SEGMENT
??_C@_0BB@OKAAEBHI@option?5selector?5@ DB 'option selector ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EEALOKGK@script?5statements?5@
CONST	SEGMENT
??_C@_0BD@EEALOKGK@script?5statements?5@ DB 'script statements ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MKBFLFJI@sample?5program?5output?0?5scripts?0@
CONST	SEGMENT
??_C@_0CF@MKBFLFJI@sample?5program?5output?0?5scripts?0@ DB 'sample progr'
	DB	'am output, scripts, etc.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GECKKPAM@strike?9through?5text?5style@
CONST	SEGMENT
??_C@_0BK@GECKKPAM@strike?9through?5text?5style@ DB 'strike-through text '
	DB	'style', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IDGHJEGP@short?5inline?5quotation?5@
CONST	SEGMENT
??_C@_0BI@IDGHJEGP@short?5inline?5quotation?5@ DB 'short inline quotation'
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OKGNAEP@preformatted?5text?5@
CONST	SEGMENT
??_C@_0BD@OKGNAEP@preformatted?5text?5@ DB 'preformatted text ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OGBECHLM@named?5property?5value?5@
CONST	SEGMENT
??_C@_0BG@OGBECHLM@named?5property?5value?5@ DB 'named property value ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ICLNKGCC@paragraph?5@
CONST	SEGMENT
??_C@_0L@ICLNKGCC@paragraph?5@ DB 'paragraph ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HJHAAEHL@selectable?5choice?5@
CONST	SEGMENT
??_C@_0BD@HJHAAEHL@selectable?5choice?5@ DB 'selectable choice ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IBBKJGKJ@option?5group?5@
CONST	SEGMENT
??_C@_0O@IBBKJGKJ@option?5group?5@ DB 'option group ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PMECOPH@ordered?5list?5@
CONST	SEGMENT
??_C@_0O@PMECOPH@ordered?5list?5@ DB 'ordered list ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@CPJFPKPD@alternate?5content?5container?5for@
CONST	SEGMENT
??_C@_0DM@CPJFPKPD@alternate?5content?5container?5for@ DB 'alternate cont'
	DB	'ent container for non script-based rendering ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@IAGMJJEB@alternate?5content?5container?5for@
CONST	SEGMENT
??_C@_0DL@IAGMJJEB@alternate?5content?5container?5for@ DB 'alternate cont'
	DB	'ent container for non frame-based rendering ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OJDJPIOL@generic?5metainformation?5@
CONST	SEGMENT
??_C@_0BJ@OJDJPIOL@generic?5metainformation?5@ DB 'generic metainformatio'
	DB	'n ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NDLIJHAH@menu?5list?5@
CONST	SEGMENT
??_C@_0L@NDLIJHAH@menu?5list?5@ DB 'menu list ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LIKCJKCB@client?9side?5image?5map?5@
CONST	SEGMENT
??_C@_0BH@LIKCJKCB@client?9side?5image?5map?5@ DB 'client-side image map '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GCIIKCBE@a?5media?9independent?5link?5@
CONST	SEGMENT
??_C@_0BK@GCIIKCBE@a?5media?9independent?5link?5@ DB 'a media-independent'
	DB	' link ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHBHFPMN@list?5item?5@
CONST	SEGMENT
??_C@_0L@DHBHFPMN@list?5item?5@ DB 'list item ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LGOCAIB@fieldset?5legend?5@
CONST	SEGMENT
??_C@_0BB@LGOCAIB@fieldset?5legend?5@ DB 'fieldset legend ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@INJKJBGO@form?5field?5label?5text?5@
CONST	SEGMENT
??_C@_0BH@INJKJBGO@form?5field?5label?5text?5@ DB 'form field label text '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HBOCGMHA@text?5to?5be?5entered?5by?5the?5user@
CONST	SEGMENT
??_C@_0BP@HBOCGMHA@text?5to?5be?5entered?5by?5the?5user@ DB 'text to be e'
	DB	'ntered by the user', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NOGKIGME@single?5line?5prompt?5@
CONST	SEGMENT
??_C@_0BE@NOGKIGME@single?5line?5prompt?5@ DB 'single line prompt ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CEDLIJIG@inserted?5text@
CONST	SEGMENT
??_C@_0O@CEDLIJIG@inserted?5text@ DB 'inserted text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HMLFLPEN@form?5control?5@
CONST	SEGMENT
??_C@_0O@HMLFLPEN@form?5control?5@ DB 'form control ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OHBCJHIG@embedded?5image?5@
CONST	SEGMENT
??_C@_0BA@OHBCJHIG@embedded?5image?5@ DB 'embedded image ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BHNEGLHO@inline?5subwindow?5@
CONST	SEGMENT
??_C@_0BC@BHNEGLHO@inline?5subwindow?5@ DB 'inline subwindow ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JCIMLGAN@italic?5text?5style@
CONST	SEGMENT
??_C@_0BC@JCIMLGAN@italic?5text?5style@ DB 'italic text style', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MPDMFBKE@document?5root?5element?5@
CONST	SEGMENT
??_C@_0BH@MPDMFBKE@document?5root?5element?5@ DB 'document root element ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PNIFHPHN@html@
CONST	SEGMENT
??_C@_04PNIFHPHN@html@ DB 'html', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GBCDCJBE@horizontal?5rule?5@
CONST	SEGMENT
??_C@_0BB@GBCDCJBE@horizontal?5rule?5@ DB 'horizontal rule ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GMKONMK@document?5head?5@
CONST	SEGMENT
??_C@_0P@GMKONMK@document?5head?5@ DB 'document head ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EPCFAACE@heading?5@
CONST	SEGMENT
??_C@_08EPCFAACE@heading?5@ DB 'heading ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NKGGDHCH@window?5subdivision@
CONST	SEGMENT
??_C@_0BD@NKGGDHCH@window?5subdivision@ DB 'window subdivision', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NAMFAOCF@subwindow?5@
CONST	SEGMENT
??_C@_0L@NAMFAOCF@subwindow?5@ DB 'subwindow ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CONPLKGA@interactive?5form?5@
CONST	SEGMENT
??_C@_0BC@CONPLKGA@interactive?5form?5@ DB 'interactive form ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MPBFEMBF@local?5change?5to?5font?5@
CONST	SEGMENT
??_C@_0BG@MPBFEMBF@local?5change?5to?5font?5@ DB 'local change to font ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NIBLILIK@form?5control?5group?5@
CONST	SEGMENT
??_C@_0BE@NIBLILIK@form?5control?5group?5@ DB 'form control group ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EHDFJKJB@generic?5embedded?5object?5@
CONST	SEGMENT
??_C@_0BJ@EHDFJKJB@generic?5embedded?5object?5@ DB 'generic embedded obje'
	DB	'ct ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08NCOPEMNJ@emphasis@
CONST	SEGMENT
??_C@_08NCOPEMNJ@emphasis@ DB 'emphasis', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EJJHCHJK@definition?5term?5@
CONST	SEGMENT
??_C@_0BB@EJJHCHJK@definition?5term?5@ DB 'definition term ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MIKJLFPH@definition?5list?5@
CONST	SEGMENT
??_C@_0BB@MIKJLFPH@definition?5list?5@ DB 'definition list ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MBOOJGEG@generic?5language?1style?5containe@
CONST	SEGMENT
??_C@_0CB@MBOOJGEG@generic?5language?1style?5containe@ DB 'generic langua'
	DB	'ge/style container', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IKNDKLJF@directory?5list@
CONST	SEGMENT
??_C@_0P@IKNDKLJF@directory?5list@ DB 'directory list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BOOBDIMI@instance?5definition@
CONST	SEGMENT
??_C@_0BE@BOOBDIMI@instance?5definition@ DB 'instance definition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HPOOFJNH@deleted?5text?5@
CONST	SEGMENT
??_C@_0O@HPOOFJNH@deleted?5text?5@ DB 'deleted text ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HABKMEJP@definition?5description?5@
CONST	SEGMENT
??_C@_0BI@HABKMEJP@definition?5description?5@ DB 'definition description '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LOIFNDJE@table?5column?5group?5@
CONST	SEGMENT
??_C@_0BE@LOIFNDJE@table?5column?5group?5@ DB 'table column group ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FGGFNENO@table?5column?5@
CONST	SEGMENT
??_C@_0O@FGGFNENO@table?5column?5@ DB 'table column ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LEOBKMKN@computer?5code?5fragment@
CONST	SEGMENT
??_C@_0BH@LEOBKMKN@computer?5code?5fragment@ DB 'computer code fragment', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKLKPBNF@citation@
CONST	SEGMENT
??_C@_08JKLKPBNF@citation@ DB 'citation', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LHLKAMHN@shorthand?5for?5div?5align?$DNcenter?5@
CONST	SEGMENT
??_C@_0CA@LHLKAMHN@shorthand?5for?5div?5align?$DNcenter?5@ DB 'shorthand '
	DB	'for div align=center ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LNCJOIOH@table?5caption?5@
CONST	SEGMENT
??_C@_0P@LNCJOIOH@table?5caption?5@ DB 'table caption ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NFGALFIH@push?5button?5@
CONST	SEGMENT
??_C@_0N@NFGALFIH@push?5button?5@ DB 'push button ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EKEEJOJN@forced?5line?5break?5@
CONST	SEGMENT
??_C@_0BD@EKEEJOJN@forced?5line?5break?5@ DB 'forced line break ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MOMBBGBM@document?5body?5@
CONST	SEGMENT
??_C@_0P@MOMBBGBM@document?5body?5@ DB 'document body ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KOLCJLFL@long?5quotation?5@
CONST	SEGMENT
??_C@_0BA@KOLCJLFL@long?5quotation?5@ DB 'long quotation ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BAJOIDME@large?5text?5style@
CONST	SEGMENT
??_C@_0BB@BAJOIDME@large?5text?5style@ DB 'large text style', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EJIKDIMB@i18n?5bidi?5over?9ride?5@
CONST	SEGMENT
??_C@_0BF@EJIKDIMB@i18n?5bidi?5over?9ride?5@ DB 'i18n bidi over-ride ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OGIGFOOK@base?5font?5size?5@
CONST	SEGMENT
??_C@_0BA@OGIGFOOK@base?5font?5size?5@ DB 'base font size ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JABNPIOC@document?5base?5uri?5@
CONST	SEGMENT
??_C@_0BD@JABNPIOC@document?5base?5uri?5@ DB 'document base uri ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NADNLNKK@bold?5text?5style@
CONST	SEGMENT
??_C@_0BA@NADNLNKK@bold?5text?5style@ DB 'bold text style', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EIGPEHBO@client?9side?5image?5map?5area?5@
CONST	SEGMENT
??_C@_0BM@EIGPEHBO@client?9side?5image?5map?5area?5@ DB 'client-side imag'
	DB	'e map area ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LANOFEKD@java?5applet?5@
CONST	SEGMENT
??_C@_0N@LANOFEKD@java?5applet?5@ DB 'java applet ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PNOGHPJ@information?5on?5author?5@
CONST	SEGMENT
??_C@_0BH@PNOGHPJ@information?5on?5author?5@ DB 'information on author ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OPBMKOHB@abbreviated?5form@
CONST	SEGMENT
??_C@_0BB@OPBMKOHB@abbreviated?5form@ DB 'abbreviated form', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NLIDIJLK@anchor?5@
CONST	SEGMENT
??_C@_07NLIDIJLK@anchor?5@ DB 'anchor ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FCNHEIMC@td@
CONST	SEGMENT
??_C@_02FCNHEIMC@td@ DB 'td', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02POGCAHMO@th@
CONST	SEGMENT
??_C@_02POGCAHMO@th@ DB 'th', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBFHKJFO@colspan@
CONST	SEGMENT
??_C@_07KBFHKJFO@colspan@ DB 'colspan', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HIFHGKLD@rowspan@
CONST	SEGMENT
??_C@_07HIFHGKLD@rowspan@ DB 'rowspan', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DCCHDMEJ@scope@
CONST	SEGMENT
??_C@_05DCCHDMEJ@scope@ DB 'scope', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LANIGEJC@headers@
CONST	SEGMENT
??_C@_07LANIGEJC@headers@ DB 'headers', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HABAAEPG@axis@
CONST	SEGMENT
??_C@_04HABAAEPG@axis@ DB 'axis', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KMFGCGJP@nowrap@
CONST	SEGMENT
??_C@_06KMFGCGJP@nowrap@ DB 'nowrap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EOEPPNBF@tr@
CONST	SEGMENT
??_C@_02EOEPPNBF@tr@ DB 'tr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OPBKHDLA@tbody@
CONST	SEGMENT
??_C@_05OPBKHDLA@tbody@ DB 'tbody', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KDGBEENM@tfoot@
CONST	SEGMENT
??_C@_05KDGBEENM@tfoot@ DB 'tfoot', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DDLACFIC@thead@
CONST	SEGMENT
??_C@_05DDLACFIC@thead@ DB 'thead', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08LBGGHKOD@colgroup@
CONST	SEGMENT
??_C@_08LBGGHKOD@colgroup@ DB 'colgroup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BANDPJOM@caption@
CONST	SEGMENT
??_C@_07BANDPJOM@caption@ DB 'caption', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LOJCLIGN@datapagesize@
CONST	SEGMENT
??_C@_0N@LOJCLIGN@datapagesize@ DB 'datapagesize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NLHEMCJP@cellpadding@
CONST	SEGMENT
??_C@_0M@NLHEMCJP@cellpadding@ DB 'cellpadding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HGLPBPKF@cellspacing@
CONST	SEGMENT
??_C@_0M@HGLPBPKF@cellspacing@ DB 'cellspacing', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CBLPGGM@rules@
CONST	SEGMENT
??_C@_05CBLPGGM@rules@ DB 'rules', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJIIAIPG@summary@
CONST	SEGMENT
??_C@_07PJIIAIPG@summary@ DB 'summary', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CKJFGDBG@multiple@
CONST	SEGMENT
??_C@_08CKJFGDBG@multiple@ DB 'multiple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KGPIHINJ@optgroup@
CONST	SEGMENT
??_C@_08KGPIHINJ@optgroup@ DB 'optgroup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGCCIMAA@language@
CONST	SEGMENT
??_C@_08JGCCIMAA@language@ DB 'language', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFHEIIDD@event@
CONST	SEGMENT
??_C@_05GFHEIIDD@event@ DB 'event', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBNCFBEN@defer@
CONST	SEGMENT
??_C@_05MBNCFBEN@defer@ DB 'defer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09JLAJHNIL@valuetype@
CONST	SEGMENT
??_C@_09JLAJHNIL@valuetype@ DB 'valuetype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CJLOJPNI@selected@
CONST	SEGMENT
??_C@_08CJLOJPNI@selected@ DB 'selected', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGMGCFPO@option@
CONST	SEGMENT
??_C@_06OGMGCFPO@option@ DB 'option', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start@
CONST	SEGMENT
??_C@_05FAGFPHJG@start@ DB 'start', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EEGFOKKL@standby@
CONST	SEGMENT
??_C@_07EEGFOKKL@standby@ DB 'standby', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EANEMJD@codetype@
CONST	SEGMENT
??_C@_08EANEMJD@codetype@ DB 'codetype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJOLNDGD@data@
CONST	SEGMENT
??_C@_04PJOLNDGD@data@ DB 'data', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MKGILGMB@classid@
CONST	SEGMENT
??_C@_07MKGILGMB@classid@ DB 'classid', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JDFLJJH@declare@
CONST	SEGMENT
??_C@_07JDFLJJH@declare@ DB 'declare', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICAJMOAO@content@
CONST	SEGMENT
??_C@_07ICAJMOAO@content@ DB 'content', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MMEMGLOP@scheme@
CONST	SEGMENT
??_C@_06MMEMGLOP@scheme@ DB 'scheme', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NALBGOHO@http?9equiv@
CONST	SEGMENT
??_C@_0L@NALBGOHO@http?9equiv@ DB 'http-equiv', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02PFEMMEEH@li@
CONST	SEGMENT
??_C@_02PFEMMEEH@li@ DB 'li', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DDLLCOJG@action@
CONST	SEGMENT
??_C@_06DDLLCOJG@action@ DB 'action', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOEDGNCF@area@
CONST	SEGMENT
??_C@_04GOEDGNCF@area@ DB 'area', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CECBHAPI@media@
CONST	SEGMENT
??_C@_05CECBHAPI@media@ DB 'media', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JOHEBPFF@for@
CONST	SEGMENT
??_C@_03JOHEBPFF@for@ DB 'for', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJNEHIA@prompt@
CONST	SEGMENT
??_C@_06FJNEHIA@prompt@ DB 'prompt', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CLANFAGI@onchange@
CONST	SEGMENT
??_C@_08CLANFAGI@onchange@ DB 'onchange', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ILAMBHAE@onselect@
CONST	SEGMENT
??_C@_08ILAMBHAE@onselect@ DB 'onselect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GGMBJIEG@maxlength@
CONST	SEGMENT
??_C@_09GGMBJIEG@maxlength@ DB 'maxlength', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JOKHDEJH@readonly@
CONST	SEGMENT
??_C@_08JOKHDEJH@readonly@ DB 'readonly', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FJOBMBFC@checked@
CONST	SEGMENT
??_C@_07FJOBMBFC@checked@ DB 'checked', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCBEFJDC@units@
CONST	SEGMENT
??_C@_05CCBEFJDC@units@ DB 'units', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09DBOPNCLL@pluginurl@
CONST	SEGMENT
??_C@_09DBOPNCLL@pluginurl@ DB 'pluginurl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GDAEHHFP@pluginspace@
CONST	SEGMENT
??_C@_0M@GDAEHHFP@pluginspace@ DB 'pluginspace', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKIHKJOO@palette@
CONST	SEGMENT
??_C@_07JKIHKJOO@palette@ DB 'palette', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JIKFICKK@hidden@
CONST	SEGMENT
??_C@_06JIKFICKK@hidden@ DB 'hidden', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODFLABIG@border@
CONST	SEGMENT
??_C@_06ODFLABIG@border@ DB 'border', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HANCGNOO@ismap@
CONST	SEGMENT
??_C@_05HANCGNOO@ismap@ DB 'ismap', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPMBKPGA@usemap@
CONST	SEGMENT
??_C@_06KPMBKPGA@usemap@ DB 'usemap', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CPCPJPKL@version@
CONST	SEGMENT
??_C@_07CPCPJPKL@version@ DB 'version', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NCHIIBII@noshade@
CONST	SEGMENT
??_C@_07NCHIIBII@noshade@ DB 'noshade', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HLJJCGEF@meta@
CONST	SEGMENT
??_C@_04HLJJCGEF@meta@ DB 'meta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BHIIPFEC@base@
CONST	SEGMENT
??_C@_04BHIIPFEC@base@ DB 'base', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LNMDFKEJ@profile@
CONST	SEGMENT
??_C@_07LNMDFKEJ@profile@ DB 'profile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIJNFGED@frame@
CONST	SEGMENT
??_C@_05MIJNFGED@frame@ DB 'frame', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMEGJMDB@frameset@
CONST	SEGMENT
??_C@_08GMEGJMDB@frameset@ DB 'frameset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PKEBEIDM@scrolling@
CONST	SEGMENT
??_C@_09PKEBEIDM@scrolling@ DB 'scrolling', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BOOCAMGJ@noresize@
CONST	SEGMENT
??_C@_08BOOCAMGJ@noresize@ DB 'noresize', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFFDDCPA@marginheight@
CONST	SEGMENT
??_C@_0N@HFFDDCPA@marginheight@ DB 'marginheight', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LFIDEBFM@marginwidth@
CONST	SEGMENT
??_C@_0M@LFIDEBFM@marginwidth@ DB 'marginwidth', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GPMBJNCP@frameborder@
CONST	SEGMENT
??_C@_0M@GPMBJNCP@frameborder@ DB 'frameborder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BMDPBLHN@longdesc@
CONST	SEGMENT
??_C@_08BMDPBLHN@longdesc@ DB 'longdesc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IIOBAHEN@accept?9charset@
CONST	SEGMENT
??_C@_0P@IIOBAHEN@accept?9charset@ DB 'accept-charset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CDGCELIF@onreset@
CONST	SEGMENT
??_C@_07CDGCELIF@onreset@ DB 'onreset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPMJAGMH@onsubmit@
CONST	SEGMENT
??_C@_08PPMJAGMH@onsubmit@ DB 'onsubmit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPKMECK@accept@
CONST	SEGMENT
??_C@_06MPKMECK@accept@ DB 'accept', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BCBJKKO@enctype@
CONST	SEGMENT
??_C@_07BCBJKKO@enctype@ DB 'enctype', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GABBCIBA@method@
CONST	SEGMENT
??_C@_06GABBCIBA@method@ DB 'method', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCIOHMBM@legend@
CONST	SEGMENT
??_C@_06BCIOHMBM@legend@ DB 'legend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EOPBOLLC@dd@
CONST	SEGMENT
??_C@_02EOPBOLLC@dd@ DB 'dd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EDDPJOD@dt@
CONST	SEGMENT
??_C@_02EDDPJOD@dt@ DB 'dt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07HGKHBOGE@compact@
CONST	SEGMENT
??_C@_07HGKHBOGE@compact@ DB 'compact', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FGNPMIBK@datetime@
CONST	SEGMENT
??_C@_08FGNPMIBK@datetime@ DB 'datetime', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HNOLNALI@col@
CONST	SEGMENT
??_C@_03HNOLNALI@col@ DB 'col', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICIJKACG@valign@
CONST	SEGMENT
??_C@_06ICIJKACG@valign@ DB 'valign', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CAOCHGPK@charoff@
CONST	SEGMENT
??_C@_07CAOCHGPK@charoff@ DB 'charoff', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENMBGAPA@char@
CONST	SEGMENT
??_C@_04ENMBGAPA@char@ DB 'char', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BEHKFNNO@disabled@
CONST	SEGMENT
??_C@_08BEHKFNNO@disabled@ DB 'disabled', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MFEJDJP@value@
CONST	SEGMENT
??_C@_05MFEJDJP@value@ DB 'value', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FDDJPECA@alink@
CONST	SEGMENT
??_C@_05FDDJPECA@alink@ DB 'alink', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ENOKMGAD@vlink@
CONST	SEGMENT
??_C@_05ENOKMGAD@vlink@ DB 'vlink', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHHBHOGB@link@
CONST	SEGMENT
??_C@_04OHHBHOGB@link@ DB 'link', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CIMGMMMG@text@
CONST	SEGMENT
??_C@_04CIMGMMMG@text@ DB 'text', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PMHCLHIB@bgcolor@
CONST	SEGMENT
??_C@_07PMHCLHIB@bgcolor@ DB 'bgcolor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EGCKCJDC@background@
CONST	SEGMENT
??_C@_0L@EGCKCJDC@background@ DB 'background', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEOAPEKG@onunload@
CONST	SEGMENT
??_C@_08KEOAPEKG@onunload@ DB 'onunload', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKJAAAAK@onload@
CONST	SEGMENT
??_C@_06FKJAAAAK@onload@ DB 'onload', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ONKLGNNH@del@
CONST	SEGMENT
??_C@_03ONKLGNNH@del@ DB 'del', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NOMOFEHF@ins@
CONST	SEGMENT
??_C@_03NOMOFEHF@ins@ DB 'ins', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04POCOPAPC@face@
CONST	SEGMENT
??_C@_04POCOPAPC@face@ DB 'face', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEENBMOG@color@
CONST	SEGMENT
??_C@_05PEENBMOG@color@ DB 'color', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAGNFIBA@size@
CONST	SEGMENT
??_C@_04IAGNFIBA@size@ DB 'size', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFHHDLMH@nohref@
CONST	SEGMENT
??_C@_06FFHHDLMH@nohref@ DB 'nohref', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EIMOCAMN@vspace@
CONST	SEGMENT
??_C@_06EIMOCAMN@vspace@ DB 'vspace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HPCPMHFO@hspace@
CONST	SEGMENT
??_C@_06HPCPMHFO@hspace@ DB 'hspace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CBJPDLOK@align@
CONST	SEGMENT
??_C@_05CBJPDLOK@align@ DB 'align', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IGKADHGO@width@
CONST	SEGMENT
??_C@_05IGKADHGO@width@ DB 'width', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNLHEAAG@height@
CONST	SEGMENT
??_C@_06LNLHEAAG@height@ DB 'height', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07NEJBDDEA@archive@
CONST	SEGMENT
??_C@_07NEJBDDEA@archive@ DB 'archive', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HMEGOPJI@codebase@
CONST	SEGMENT
??_C@_08HMEGOPJI@codebase@ DB 'codebase', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LJDNNBIK@param@
CONST	SEGMENT
??_C@_05LJDNNBIK@param@ DB 'param', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MEHLAELG@clear@
CONST	SEGMENT
??_C@_05MEHLAELG@clear@ DB 'clear', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LOJEKLML@src@
CONST	SEGMENT
??_C@_03LOJEKLML@src@ DB 'src', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FHLPDODD@alt@
CONST	SEGMENT
??_C@_03FHLPDODD@alt@ DB 'alt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MBNFPKFL@cols@
CONST	SEGMENT
??_C@_04MBNFPKFL@cols@ DB 'cols', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMCGAIPI@rows@
CONST	SEGMENT
??_C@_04IMCGAIPI@rows@ DB 'rows', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJLAMBGK@target@
CONST	SEGMENT
??_C@_06JJLAMBGK@target@ DB 'target', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PAKCKPPO@onblur@
CONST	SEGMENT
??_C@_06PAKCKPPO@onblur@ DB 'onblur', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PCOLHBIB@onfocus@
CONST	SEGMENT
??_C@_07PCOLHBIB@onfocus@ DB 'onfocus', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KAJGIJLO@tabindex@
CONST	SEGMENT
??_C@_08KAJGIJLO@tabindex@ DB 'tabindex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LAPHAKDE@coords@
CONST	SEGMENT
??_C@_06LAPHAKDE@coords@ DB 'coords', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KFCIHKGL@shape@
CONST	SEGMENT
??_C@_05KFCIHKGL@shape@ DB 'shape', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPFGNPLK@accesskey@
CONST	SEGMENT
??_C@_09KPFGNPLK@accesskey@ DB 'accesskey', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIPEJPEP@rev@
CONST	SEGMENT
??_C@_03CIPEJPEP@rev@ DB 'rev', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JINJGFJE@rel@
CONST	SEGMENT
??_C@_03JINJGFJE@rel@ DB 'rel', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08KALGMAGF@hreflang@
CONST	SEGMENT
??_C@_08KALGMAGF@hreflang@ DB 'hreflang', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CMBCJJJD@href@
CONST	SEGMENT
??_C@_04CMBCJJJD@href@ DB 'href', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name@ DB 'name', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type@ DB 'type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EAJPFAFH@charset@
CONST	SEGMENT
??_C@_07EAJPFAFH@charset@ DB 'charset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BAEMJOMG@onkeyup@
CONST	SEGMENT
??_C@_07BAEMJOMG@onkeyup@ DB 'onkeyup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09HFCNBPMA@onkeydown@
CONST	SEGMENT
??_C@_09HFCNBPMA@onkeydown@ DB 'onkeydown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HBNKHJBD@onkeypress@
CONST	SEGMENT
??_C@_0L@HBNKHJBD@onkeypress@ DB 'onkeypress', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CEIFEFAI@onmouseout@
CONST	SEGMENT
??_C@_0L@CEIFEFAI@onmouseout@ DB 'onmouseout', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BMKHHAKK@onmouseover@
CONST	SEGMENT
??_C@_0M@BMKHHAKK@onmouseover@ DB 'onmouseover', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KEIMJDF@onmouseup@
CONST	SEGMENT
??_C@_09KEIMJDF@onmouseup@ DB 'onmouseup', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LPLDHDON@onmousedown@
CONST	SEGMENT
??_C@_0M@LPLDHDON@onmousedown@ DB 'onmousedown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BPDJNBPF@ondblclick@
CONST	SEGMENT
??_C@_0L@BPDJNBPF@ondblclick@ DB 'ondblclick', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BAILDNBN@onclick@
CONST	SEGMENT
??_C@_07BAILDNBN@onclick@ DB 'onclick', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IOHABJIC@lang@
CONST	SEGMENT
??_C@_04IOHABJIC@lang@ DB 'lang', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PHLGJONK@title@
CONST	SEGMENT
??_C@_05PHLGJONK@title@ DB 'title', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAKJCFIM@style@
CONST	SEGMENT
??_C@_05IAKJCFIM@style@ DB 'style', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ENKANFLO@class@
CONST	SEGMENT
??_C@_05ENKANFLO@class@ DB 'class', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id@
CONST	SEGMENT
??_C@_02EGCJHIOB@id@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFKPFKMP@button@
CONST	SEGMENT
??_C@_06HFKPFKMP@button@ DB 'button', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDCCNNGI@label@
CONST	SEGMENT
??_C@_05IDCCNNGI@label@ DB 'label', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DEBIGDAL@textarea@
CONST	SEGMENT
??_C@_08DEBIGDAL@textarea@ DB 'textarea', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGNCCACI@select@
CONST	SEGMENT
??_C@_06LGNCCACI@select@ DB 'select', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFJCHPDH@input@
CONST	SEGMENT
??_C@_05DFJCHPDH@input@ DB 'input', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06PKBNCBKI@iframe@
CONST	SEGMENT
??_C@_06PKBNCBKI@iframe@ DB 'iframe', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OCCPALPP@bdo@
CONST	SEGMENT
??_C@_03OCCPALPP@bdo@ DB 'bdo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FOPLNFFP@span@
CONST	SEGMENT
??_C@_04FOPLNFFP@span@ DB 'span', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NKDEPMNM@sup@
CONST	SEGMENT
??_C@_03NKDEPMNM@sup@ DB 'sup', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCMAIMAP@sub@
CONST	SEGMENT
??_C@_03KCMAIMAP@sub@ DB 'sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IIACKFLH@q@
CONST	SEGMENT
??_C@_01IIACKFLH@q@ DB 'q', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map@
CONST	SEGMENT
??_C@_03HBNNNHNM@map@ DB 'map', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLONEIEH@script@
CONST	SEGMENT
??_C@_06OLONEIEH@script@ DB 'script', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FGOECCNH@br@
CONST	SEGMENT
??_C@_02FGOECCNH@br@ DB 'br', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IOLGIJGJ@basefont@
CONST	SEGMENT
??_C@_08IOLGIJGJ@basefont@ DB 'basefont', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EFPADHIC@font@
CONST	SEGMENT
??_C@_04EFPADHIC@font@ DB 'font', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEOJBDIK@object@
CONST	SEGMENT
??_C@_06IEOJBDIK@object@ DB 'object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJAEOLKJ@embed@
CONST	SEGMENT
??_C@_05KJAEOLKJ@embed@ DB 'embed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MJBNHHFM@applet@
CONST	SEGMENT
??_C@_06MJBNHHFM@applet@ DB 'applet', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PCCGDNHJ@img@
CONST	SEGMENT
??_C@_03PCCGDNHJ@img@ DB 'img', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a@
CONST	SEGMENT
??_C@_01MCMALHOG@a@ DB 'a', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBMAFMJI@acronym@
CONST	SEGMENT
??_C@_07DBMAFMJI@acronym@ DB 'acronym', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FKPKGNKN@abbr@
CONST	SEGMENT
??_C@_04FKPKGNKN@abbr@ DB 'abbr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKBDOCJI@cite@
CONST	SEGMENT
??_C@_04OKBDOCJI@cite@ DB 'cite', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MEPDGFMA@var@
CONST	SEGMENT
??_C@_03MEPDGFMA@var@ DB 'var', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HIFOOBAM@kbd@
CONST	SEGMENT
??_C@_03HIFOOBAM@kbd@ DB 'kbd', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GLAFCDBO@samp@
CONST	SEGMENT
??_C@_04GLAFCDBO@samp@ DB 'samp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDFOBODE@code@
CONST	SEGMENT
??_C@_04NDFOBODE@code@ DB 'code', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NNNLLBAM@dfn@
CONST	SEGMENT
??_C@_03NNNLLBAM@dfn@ DB 'dfn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KHACOKFA@strong@
CONST	SEGMENT
??_C@_06KHACOKFA@strong@ DB 'strong', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JOPBDKMM@em@
CONST	SEGMENT
??_C@_02JOPBDKMM@em@ DB 'em', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJDGBEEG@small@
CONST	SEGMENT
??_C@_05KJDGBEEG@small@ DB 'small', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCCOBCKE@big@
CONST	SEGMENT
??_C@_03CCCOBCKE@big@ DB 'big', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGJEBFOF@strike@
CONST	SEGMENT
??_C@_06LGJEBFOF@strike@ DB 'strike', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s@
CONST	SEGMENT
??_C@_01LKDEMHDF@s@ DB 's', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01OMGOGALD@u@
CONST	SEGMENT
??_C@_01OMGOGALD@u@ DB 'u', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01OJONOECF@b@
CONST	SEGMENT
??_C@_01OJONOECF@b@ DB 'b', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02BIBFFKJD@tt@
CONST	SEGMENT
??_C@_02BIBFFKJD@tt@ DB 'tt', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LHEPONKL@address@
CONST	SEGMENT
??_C@_07LHEPONKL@address@ DB 'address', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EPOEGPEK@fieldset@
CONST	SEGMENT
??_C@_08EPOEGPEK@fieldset@ DB 'fieldset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCLENNFI@table@
CONST	SEGMENT
??_C@_05LCLENNFI@table@ DB 'table', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FLHDKHAB@hr@
CONST	SEGMENT
??_C@_02FLHDKHAB@hr@ DB 'hr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JMLOFMGP@isindex@
CONST	SEGMENT
??_C@_07JMLOFMGP@isindex@ DB 'isindex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLMMMEIO@form@
CONST	SEGMENT
??_C@_04MLMMMEIO@form@ DB 'form', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NKGPHNMG@blockquote@
CONST	SEGMENT
??_C@_0L@NKGPHNMG@blockquote@ DB 'blockquote', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NAAIELI@noframes@
CONST	SEGMENT
??_C@_08NAAIELI@noframes@ DB 'noframes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NOCGLLG@noscript@
CONST	SEGMENT
??_C@_08NOCGLLG@noscript@ DB 'noscript', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BBLOAEEI@center@
CONST	SEGMENT
??_C@_06BBLOAEEI@center@ DB 'center', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FEJMGOGI@div@
CONST	SEGMENT
??_C@_03FEJMGOGI@div@ DB 'div', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IGCIGBLK@dl@
CONST	SEGMENT
??_C@_02IGCIGBLK@dl@ DB 'dl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JBBJJEPG@p@
CONST	SEGMENT
??_C@_01JBBJJEPG@p@ DB 'p', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKHLKDKD@pre@
CONST	SEGMENT
??_C@_03PKHLKDKD@pre@ DB 'pre', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EEIGNHLG@menu@
CONST	SEGMENT
??_C@_04EEIGNHLG@menu@ DB 'menu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03DAPAKLGM@dir@
CONST	SEGMENT
??_C@_03DAPAKLGM@dir@ DB 'dir', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IKHNIOFL@ol@
CONST	SEGMENT
??_C@_02IKHNIOFL@ol@ DB 'ol', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02JLMMKIPN@ul@
CONST	SEGMENT
??_C@_02JLMMKIPN@ul@ DB 'ul', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MPGGCNAA@h6@
CONST	SEGMENT
??_C@_02MPGGCNAA@h6@ DB 'h6', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OEELHOMD@h5@
CONST	SEGMENT
??_C@_02OEELHOMD@h5@ DB 'h5', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02PNFAEPIC@h4@
CONST	SEGMENT
??_C@_02PNFAEPIC@h4@ DB 'h4', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LCBBNJEF@h3@
CONST	SEGMENT
??_C@_02LCBBNJEF@h3@ DB 'h3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KLAKOIAE@h2@
CONST	SEGMENT
??_C@_02KLAKOIAE@h2@ DB 'h2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IACHLLMH@h1@
CONST	SEGMENT
??_C@_02IACHLLMH@h1@ DB 'h1', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
_html_flow DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DD	FLAT:??_C@_06LGNCCACI@select@
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	00H
_html_inline DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DD	FLAT:??_C@_06LGNCCACI@select@
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	00H
_html_pcdata DD	00H
_core_i18n_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	00H
_html_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	00H
_core_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	00H
_i18n_attrs DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	00H
_a_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_07EAJPFAFH@charset@
	DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_04CMBCJJJD@href@
	DD	FLAT:??_C@_08KALGMAGF@hreflang@
	DD	FLAT:??_C@_03JINJGFJE@rel@
	DD	FLAT:??_C@_03CIPEJPEP@rev@
	DD	FLAT:??_C@_09KPFGNPLK@accesskey@
	DD	FLAT:??_C@_05KFCIHKGL@shape@
	DD	FLAT:??_C@_06LAPHAKDE@coords@
	DD	FLAT:??_C@_08KAJGIJLO@tabindex@
	DD	FLAT:??_C@_07PCOLHBIB@onfocus@
	DD	FLAT:??_C@_06PAKCKPPO@onblur@
	DD	00H
_target_attr DD	FLAT:??_C@_06JJLAMBGK@target@
	DD	00H
_rows_cols_attr DD FLAT:??_C@_04IMCGAIPI@rows@
	DD	FLAT:??_C@_04MBNFPKFL@cols@
	DD	00H
_alt_attr DD	FLAT:??_C@_03FHLPDODD@alt@
	DD	00H
_src_alt_attrs DD FLAT:??_C@_03LOJEKLML@src@
	DD	FLAT:??_C@_03FHLPDODD@alt@
	DD	00H
_href_attrs DD	FLAT:??_C@_04CMBCJJJD@href@
	DD	00H
_clear_attrs DD	FLAT:??_C@_05MEHLAELG@clear@
	DD	00H
_area_attrs DD	FLAT:??_C@_05KFCIHKGL@shape@
	DD	FLAT:??_C@_06LAPHAKDE@coords@
	DD	FLAT:??_C@_04CMBCJJJD@href@
	DD	FLAT:??_C@_06FFHHDLMH@nohref@
	DD	FLAT:??_C@_08KAJGIJLO@tabindex@
	DD	FLAT:??_C@_09KPFGNPLK@accesskey@
	DD	FLAT:??_C@_07PCOLHBIB@onfocus@
	DD	FLAT:??_C@_06PAKCKPPO@onblur@
	DD	00H
_inline_p DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DD	FLAT:??_C@_06LGNCCACI@select@
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
_basefont_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_04IAGNFIBA@size@
	DD	FLAT:??_C@_05PEENBMOG@color@
	DD	FLAT:??_C@_04POCOPAPC@face@
	DD	00H
_flow_param DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DD	FLAT:??_C@_06LGNCCACI@select@
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	FLAT:??_C@_05LJDNNBIK@param@
	DD	00H
_applet_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_08HMEGOPJI@codebase@
	DD	FLAT:??_C@_07NEJBDDEA@archive@
	DD	FLAT:??_C@_03FHLPDODD@alt@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_06LNLHEAAG@height@
	DD	FLAT:??_C@_05IGKADHGO@width@
	DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	FLAT:??_C@_06HPCPMHFO@hspace@
	DD	FLAT:??_C@_06EIMOCAMN@vspace@
	DD	00H
_body_depr DD	FLAT:??_C@_0L@EGCKCJDC@background@
	DD	FLAT:??_C@_07PMHCLHIB@bgcolor@
	DD	FLAT:??_C@_04CIMGMMMG@text@
	DD	FLAT:??_C@_04OHHBHOGB@link@
	DD	FLAT:??_C@_05ENOKMGAD@vlink@
	DD	FLAT:??_C@_05FDDJPECA@alink@
	DD	00H
_quote_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	00H
_dl_contents DD	FLAT:??_C@_02EDDPJOD@dt@
	DD	FLAT:??_C@_02EOPBOLLC@dd@
	DD	00H
_body_contents DD FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DD	FLAT:??_C@_06LGNCCACI@select@
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	FLAT:??_C@_03NOMOFEHF@ins@
	DD	FLAT:??_C@_03ONKLGNNH@del@
	DD	00H
_body_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_06FKJAAAAK@onload@
	DD	FLAT:??_C@_08KEOAPEKG@onunload@
	DD	00H
_button_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_05MFEJDJP@value@
	DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	FLAT:??_C@_08BEHKFNNO@disabled@
	DD	FLAT:??_C@_08KAJGIJLO@tabindex@
	DD	FLAT:??_C@_09KPFGNPLK@accesskey@
	DD	FLAT:??_C@_07PCOLHBIB@onfocus@
	DD	FLAT:??_C@_06PAKCKPPO@onblur@
	DD	00H
_col_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_05IGKADHGO@width@
	DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	FLAT:??_C@_04ENMBGAPA@char@
	DD	FLAT:??_C@_07CAOCHGPK@charoff@
	DD	FLAT:??_C@_06ICIJKACG@valign@
	DD	00H
_col_elt DD	FLAT:??_C@_03HNOLNALI@col@
	DD	00H
_edit_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_08FGNPMIBK@datetime@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	00H
_compact_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_07HGKHBOGE@compact@
	DD	00H
_compact_attr DD FLAT:??_C@_07HGKHBOGE@compact@
	DD	00H
_label_attr DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	00H
_frame_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_08BMDPBLHN@longdesc@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_03LOJEKLML@src@
	DD	FLAT:??_C@_0M@GPMBJNCP@frameborder@
	DD	FLAT:??_C@_0M@LFIDEBFM@marginwidth@
	DD	FLAT:??_C@_0N@HFFDDCPA@marginheight@
	DD	FLAT:??_C@_08BOOCAMGJ@noresize@
	DD	FLAT:??_C@_09PKEBEIDM@scrolling@
	DD	00H
_fieldset_contents DD FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DD	FLAT:??_C@_06LGNCCACI@select@
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	FLAT:??_C@_06BCIOHMBM@legend@
_font_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04IAGNFIBA@size@
	DD	FLAT:??_C@_05PEENBMOG@color@
	DD	FLAT:??_C@_04POCOPAPC@face@
	DD	00H
_form_contents DD FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DD	FLAT:??_C@_06LGNCCACI@select@
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	00H
_form_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_06GABBCIBA@method@
	DD	FLAT:??_C@_07BCBJKKO@enctype@
	DD	FLAT:??_C@_06MPKMECK@accept@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_08PPMJAGMH@onsubmit@
	DD	FLAT:??_C@_07CDGCELIF@onreset@
	DD	FLAT:??_C@_0P@IIOBAHEN@accept?9charset@
	DD	00H
_frameset_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IMCGAIPI@rows@
	DD	FLAT:??_C@_04MBNFPKFL@cols@
	DD	FLAT:??_C@_06FKJAAAAK@onload@
	DD	FLAT:??_C@_08KEOAPEKG@onunload@
	DD	00H
_frameset_contents DD FLAT:??_C@_08GMEGJMDB@frameset@
	DD	FLAT:??_C@_05MIJNFGED@frame@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	00H
_head_attrs DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07LNMDFKEJ@profile@
	DD	00H
_head_contents DD FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_04BHIIPFEC@base@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_04HLJJCGEF@meta@
	DD	FLAT:??_C@_04OHHBHOGB@link@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	00H
_hr_depr DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	FLAT:??_C@_07NCHIIBII@noshade@
	DD	FLAT:??_C@_04IAGNFIBA@size@
	DD	FLAT:??_C@_05IGKADHGO@width@
	DD	00H
_version_attr DD FLAT:??_C@_07CPCPJPKL@version@
	DD	00H
_html_content DD FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_04IEJGKNJ@body@
	DD	FLAT:??_C@_08GMEGJMDB@frameset@
	DD	00H
_iframe_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_08BMDPBLHN@longdesc@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_03LOJEKLML@src@
	DD	FLAT:??_C@_0M@GPMBJNCP@frameborder@
	DD	FLAT:??_C@_0M@LFIDEBFM@marginwidth@
	DD	FLAT:??_C@_0N@HFFDDCPA@marginheight@
	DD	FLAT:??_C@_09PKEBEIDM@scrolling@
	DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	FLAT:??_C@_06LNLHEAAG@height@
	DD	FLAT:??_C@_05IGKADHGO@width@
	DD	00H
_meta_attrs DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_0L@NALBGOHO@http?9equiv@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_06MMEMGLOP@scheme@
	DD	FLAT:??_C@_07EAJPFAFH@charset@
	DD	00H
_img_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_08BMDPBLHN@longdesc@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_06LNLHEAAG@height@
	DD	FLAT:??_C@_05IGKADHGO@width@
	DD	FLAT:??_C@_06KPMBKPGA@usemap@
	DD	FLAT:??_C@_05HANCGNOO@ismap@
	DD	00H
_embed_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	FLAT:??_C@_03FHLPDODD@alt@
	DD	FLAT:??_C@_06ODFLABIG@border@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_08HMEGOPJI@codebase@
	DD	FLAT:??_C@_0M@GPMBJNCP@frameborder@
	DD	FLAT:??_C@_06LNLHEAAG@height@
	DD	FLAT:??_C@_06JIKFICKK@hidden@
	DD	FLAT:??_C@_06HPCPMHFO@hspace@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_07JKIHKJOO@palette@
	DD	FLAT:??_C@_0M@GDAEHHFP@pluginspace@
	DD	FLAT:??_C@_09DBOPNCLL@pluginurl@
	DD	FLAT:??_C@_03LOJEKLML@src@
	DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	FLAT:??_C@_05CCBEFJDC@units@
	DD	FLAT:??_C@_06EIMOCAMN@vspace@
	DD	FLAT:??_C@_05IGKADHGO@width@
	DD	00H
_object_depr DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	FLAT:??_C@_06ODFLABIG@border@
	DD	FLAT:??_C@_06HPCPMHFO@hspace@
	DD	FLAT:??_C@_06EIMOCAMN@vspace@
	DD	00H
_input_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_05MFEJDJP@value@
	DD	FLAT:??_C@_07FJOBMBFC@checked@
	DD	FLAT:??_C@_08BEHKFNNO@disabled@
	DD	FLAT:??_C@_08JOKHDEJH@readonly@
	DD	FLAT:??_C@_04IAGNFIBA@size@
	DD	FLAT:??_C@_09GGMBJIEG@maxlength@
	DD	FLAT:??_C@_03LOJEKLML@src@
	DD	FLAT:??_C@_03FHLPDODD@alt@
	DD	FLAT:??_C@_06KPMBKPGA@usemap@
	DD	FLAT:??_C@_05HANCGNOO@ismap@
	DD	FLAT:??_C@_08KAJGIJLO@tabindex@
	DD	FLAT:??_C@_09KPFGNPLK@accesskey@
	DD	FLAT:??_C@_07PCOLHBIB@onfocus@
	DD	FLAT:??_C@_06PAKCKPPO@onblur@
	DD	FLAT:??_C@_08ILAMBHAE@onselect@
	DD	FLAT:??_C@_08CLANFAGI@onchange@
	DD	FLAT:??_C@_06MPKMECK@accept@
	DD	00H
_prompt_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_06FJNEHIA@prompt@
	DD	00H
_param_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05MFEJDJP@value@
	DD	FLAT:??_C@_09JLAJHNIL@valuetype@
	DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	00H
_label_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_03JOHEBPFF@for@
	DD	FLAT:??_C@_09KPFGNPLK@accesskey@
	DD	FLAT:??_C@_07PCOLHBIB@onfocus@
	DD	FLAT:??_C@_06PAKCKPPO@onblur@
	DD	00H
_legend_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_09KPFGNPLK@accesskey@
	DD	00H
_align_attr DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	00H
_select_content DD FLAT:??_C@_08KGPIHINJ@optgroup@
	DD	FLAT:??_C@_06OGMGCFPO@option@
	DD	00H
_link_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_07EAJPFAFH@charset@
	DD	FLAT:??_C@_04CMBCJJJD@href@
	DD	FLAT:??_C@_08KALGMAGF@hreflang@
	DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	FLAT:??_C@_03JINJGFJE@rel@
	DD	FLAT:??_C@_03CIPEJPEP@rev@
	DD	FLAT:??_C@_05CECBHAPI@media@
	DD	00H
_style_attrs DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_05CECBHAPI@media@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	00H
_map_contents DD FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_04GOEDGNCF@area@
	DD	00H
_name_attr DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	00H
_action_attr DD	FLAT:??_C@_06DDLLCOJG@action@
	DD	00H
_blockli_elt DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_02PFEMMEEH@li@
	DD	00H
_content_attr DD FLAT:??_C@_07ICAJMOAO@content@
	DD	00H
_type_attr DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	00H
_noframes_content DD FLAT:??_C@_04IEJGKNJ@body@
	DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DD	FLAT:??_C@_06LGNCCACI@select@
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	00H
_table_depr DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	FLAT:??_C@_07PMHCLHIB@bgcolor@
	DD	00H
_object_contents DD FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DD	FLAT:??_C@_06LGNCCACI@select@
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	FLAT:??_C@_05LJDNNBIK@param@
	DD	00H
_th_td_depr DD	FLAT:??_C@_06KMFGCGJP@nowrap@
	DD	FLAT:??_C@_07PMHCLHIB@bgcolor@
	DD	FLAT:??_C@_05IGKADHGO@width@
	DD	FLAT:??_C@_06LNLHEAAG@height@
	DD	00H
_object_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_07JDFLJJH@declare@
	DD	FLAT:??_C@_07MKGILGMB@classid@
	DD	FLAT:??_C@_08HMEGOPJI@codebase@
	DD	FLAT:??_C@_04PJOLNDGD@data@
	DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	FLAT:??_C@_08EANEMJD@codetype@
	DD	FLAT:??_C@_07NEJBDDEA@archive@
	DD	FLAT:??_C@_07EEGFOKKL@standby@
	DD	FLAT:??_C@_06LNLHEAAG@height@
	DD	FLAT:??_C@_05IGKADHGO@width@
	DD	FLAT:??_C@_06KPMBKPGA@usemap@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_08KAJGIJLO@tabindex@
	DD	00H
_ol_attrs DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	FLAT:??_C@_07HGKHBOGE@compact@
	DD	FLAT:??_C@_05FAGFPHJG@start@
	DD	00H
_option_elt DD	FLAT:??_C@_06OGMGCFPO@option@
	DD	00H
_tr_contents DD	FLAT:??_C@_02POGCAHMO@th@
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	00H
_optgroup_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_08BEHKFNNO@disabled@
	DD	00H
_ul_depr DD	FLAT:??_C@_04GPMDFGEJ@type@
	DD	FLAT:??_C@_07HGKHBOGE@compact@
	DD	00H
_option_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_08BEHKFNNO@disabled@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_08CJLOJPNI@selected@
	DD	FLAT:??_C@_05MFEJDJP@value@
	DD	00H
_width_attr DD	FLAT:??_C@_05IGKADHGO@width@
	DD	00H
_pre_content DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	00H
_script_attrs DD FLAT:??_C@_07EAJPFAFH@charset@
	DD	FLAT:??_C@_03LOJEKLML@src@
	DD	FLAT:??_C@_05MBNCFBEN@defer@
	DD	FLAT:??_C@_05GFHEIIDD@event@
	DD	FLAT:??_C@_03JOHEBPFF@for@
	DD	00H
_language_attr DD FLAT:??_C@_08JGCCIMAA@language@
	DD	00H
	ORG $+4
_select_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_04IAGNFIBA@size@
	DD	FLAT:??_C@_08CKJFGDBG@multiple@
	DD	FLAT:??_C@_08BEHKFNNO@disabled@
	DD	FLAT:??_C@_08KAJGIJLO@tabindex@
	DD	FLAT:??_C@_07PCOLHBIB@onfocus@
	DD	FLAT:??_C@_06PAKCKPPO@onblur@
	DD	FLAT:??_C@_08CLANFAGI@onchange@
	DD	00H
_table_attrs DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_07PJIIAIPG@summary@
	DD	FLAT:??_C@_05IGKADHGO@width@
	DD	FLAT:??_C@_06ODFLABIG@border@
	DD	FLAT:??_C@_05MIJNFGED@frame@
	DD	FLAT:??_C@_05CBLPGGM@rules@
	DD	FLAT:??_C@_0M@HGLPBPKF@cellspacing@
	DD	FLAT:??_C@_0M@NLHEMCJP@cellpadding@
	DD	FLAT:??_C@_0N@LOJCLIGN@datapagesize@
	DD	00H
_table_contents DD FLAT:??_C@_07BANDPJOM@caption@
	DD	FLAT:??_C@_03HNOLNALI@col@
	DD	FLAT:??_C@_08LBGGHKOD@colgroup@
	DD	FLAT:??_C@_05DDLACFIC@thead@
	DD	FLAT:??_C@_05KDGBEENM@tfoot@
	DD	FLAT:??_C@_05OPBKHDLA@tbody@
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	00H
_tr_elt	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	00H
_talign_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	FLAT:??_C@_04ENMBGAPA@char@
	DD	FLAT:??_C@_07CAOCHGPK@charoff@
	DD	FLAT:??_C@_06ICIJKACG@valign@
	DD	00H
_th_td_attr DD	FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_04HABAAEPG@axis@
	DD	FLAT:??_C@_07LANIGEJC@headers@
	DD	FLAT:??_C@_05DCCHDMEJ@scope@
	DD	FLAT:??_C@_07HIFHGKLD@rowspan@
	DD	FLAT:??_C@_07KBFHKJFO@colspan@
	DD	FLAT:??_C@_05CBJPDLOK@align@
	DD	FLAT:??_C@_04ENMBGAPA@char@
	DD	FLAT:??_C@_07CAOCHGPK@charoff@
	DD	FLAT:??_C@_06ICIJKACG@valign@
	DD	00H
_textarea_attrs DD FLAT:??_C@_02EGCJHIOB@id@
	DD	FLAT:??_C@_05ENKANFLO@class@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_04MEMAJGDJ@name@
	DD	FLAT:??_C@_08BEHKFNNO@disabled@
	DD	FLAT:??_C@_08JOKHDEJH@readonly@
	DD	FLAT:??_C@_08KAJGIJLO@tabindex@
	DD	FLAT:??_C@_09KPFGNPLK@accesskey@
	DD	FLAT:??_C@_07PCOLHBIB@onfocus@
	DD	FLAT:??_C@_06PAKCKPPO@onblur@
	DD	FLAT:??_C@_08ILAMBHAE@onselect@
	DD	FLAT:??_C@_08CLANFAGI@onchange@
	DD	00H
_bgcolor_attr DD FLAT:??_C@_07PMHCLHIB@bgcolor@
	DD	00H
_li_elt	DD	FLAT:??_C@_02PFEMMEEH@li@
	DD	00H
_dir_attr DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	00H
	ORG $+4
_html40ElementTable DD FLAT:??_C@_01MCMALHOG@a@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_07NLIDIJLK@anchor?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_a_attrs
	DD	FLAT:_target_attr
	DD	00H
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BB@OPBMKOHB@abbreviated?5form@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_07LHEPONKL@address@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BH@PNOGHPJ@information?5on?5author?5@
	DD	FLAT:_inline_p
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	ORG $+1
	DD	FLAT:??_C@_0N@LANOFEKD@java?5applet?5@
	DD	FLAT:_flow_param
	DD	00H
	DD	00H
	DD	FLAT:_applet_attrs
	DD	00H
	DD	FLAT:??_C@_04GOEDGNCF@area@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BM@EIGPEHBO@client?9side?5image?5map?5area?5@
	DD	00H
	DD	00H
	DD	FLAT:_area_attrs
	DD	FLAT:_target_attr
	DD	FLAT:_alt_attr
	DD	FLAT:??_C@_01OJONOECF@b@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BA@NADNLNKK@bold?5text?5style@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_04BHIIPFEC@base@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BD@JABNPIOC@document?5base?5uri?5@
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_target_attr
	DD	FLAT:_href_attrs
	DD	FLAT:??_C@_08IOLGIJGJ@basefont@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BA@OGIGFOOK@base?5font?5size?5@
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_basefont_attrs
	DD	00H
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BF@EJIKDIMB@i18n?5bidi?5over?9ride?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_core_i18n_attrs
	DD	00H
	DD	FLAT:_dir_attr
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BB@BAJOIDME@large?5text?5style@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BA@KOLCJLFL@long?5quotation?5@
	DD	FLAT:_html_flow
	DD	00H
	DD	FLAT:_quote_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_04IEJGKNJ@body@
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0P@MOMBBGBM@document?5body?5@
	DD	FLAT:_body_contents
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:_body_attrs
	DD	FLAT:_body_depr
	DD	00H
	DD	FLAT:??_C@_02FGOECCNH@br@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BD@EKEEJOJN@forced?5line?5break?5@
	DD	00H
	DD	00H
	DD	FLAT:_core_attrs
	DD	FLAT:_clear_attrs
	DD	00H
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	ORG $+1
	DD	FLAT:??_C@_0N@NFGALFIH@push?5button?5@
	DD	FLAT:_html_flow
	DD	00H
	DD	FLAT:_button_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_07BANDPJOM@caption@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0P@LNCJOIOH@table?5caption?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0CA@LHLKAMHN@shorthand?5for?5div?5align?$DNcenter?5@
	DD	FLAT:_html_flow
	DD	00H
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_08JKLKPBNF@citation@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_04NDFOBODE@code@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BH@LEOBKMKN@computer?5code?5fragment@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_03HNOLNALI@col@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0O@FGGFNENO@table?5column?5@
	DD	00H
	DD	00H
	DD	FLAT:_col_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08LBGGHKOD@colgroup@
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BE@LOIFNDJE@table?5column?5group?5@
	DD	FLAT:_col_elt
	DD	FLAT:??_C@_03HNOLNALI@col@
	DD	FLAT:_col_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_02EOPBOLLC@dd@
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BI@HABKMEJP@definition?5description?5@
	DD	FLAT:_html_flow
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_03ONKLGNNH@del@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	ORG $+1
	DD	FLAT:??_C@_0O@HPOOFJNH@deleted?5text?5@
	DD	FLAT:_html_flow
	DD	00H
	DD	FLAT:_edit_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BE@BOOBDIMI@instance?5definition@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0P@IKNDKLJF@directory?5list@
	DD	FLAT:_blockli_elt
	DD	FLAT:??_C@_02PFEMMEEH@li@
	DD	00H
	DD	FLAT:_compact_attrs
	DD	00H
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0CB@MBOOJGEG@generic?5language?1style?5containe@
	DD	FLAT:_html_flow
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BB@MIKJLFPH@definition?5list?5@
	DD	FLAT:_dl_contents
	DD	FLAT:??_C@_02EOPBOLLC@dd@
	DD	FLAT:_html_attrs
	DD	FLAT:_compact_attr
	DD	00H
	DD	FLAT:??_C@_02EDDPJOD@dt@
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BB@EJJHCHJK@definition?5term?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_08NCOPEMNJ@emphasis@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05KJAEOLKJ@embed@
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BJ@EHDFJKJB@generic?5embedded?5object?5@
	DD	00H
	DD	00H
	DD	FLAT:_embed_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BE@NIBLILIK@form?5control?5group?5@
	DD	FLAT:_fieldset_contents
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_04EFPADHIC@font@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BG@MPBFEMBF@local?5change?5to?5font?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	00H
	DD	FLAT:_font_attrs
	DD	00H
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BC@CONPLKGA@interactive?5form?5@
	DD	FLAT:_form_contents
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:_form_attrs
	DD	FLAT:_target_attr
	DD	FLAT:_action_attr
	DD	FLAT:??_C@_05MIJNFGED@frame@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	02H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0L@NAMFAOCF@subwindow?5@
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_frame_attrs
	DD	00H
	DD	FLAT:??_C@_08GMEGJMDB@frameset@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BD@NKGGDHCH@window?5subdivision@
	DD	FLAT:_frameset_contents
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	00H
	DD	FLAT:_frameset_attrs
	DD	00H
	DD	FLAT:??_C@_02IACHLLMH@h1@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_08EPCFAACE@heading?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_08EPCFAACE@heading?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_08EPCFAACE@heading?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_08EPCFAACE@heading?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_08EPCFAACE@heading?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_08EPCFAACE@heading?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_04NEODDMOL@head@
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0P@GMKONMK@document?5head?5@
	DD	FLAT:_head_contents
	DD	00H
	DD	FLAT:_head_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BB@GBCDCJBE@horizontal?5rule?5@
	DD	00H
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_hr_depr
	DD	00H
	DD	FLAT:??_C@_04PNIFHPHN@html@
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BH@MPDMFBKE@document?5root?5element?5@
	DD	FLAT:_html_content
	DD	00H
	DD	FLAT:_i18n_attrs
	DD	FLAT:_version_attr
	DD	00H
	DD	FLAT:??_C@_01KBJDNOO@i@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BC@JCIMLGAN@italic?5text?5style@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	02H
	ORG $+1
	DD	FLAT:??_C@_0BC@BHNEGLHO@inline?5subwindow?5@
	DD	FLAT:_html_flow
	DD	00H
	DD	00H
	DD	FLAT:_iframe_attrs
	DD	00H
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BA@OHBCJHIG@embedded?5image?5@
	DD	00H
	DD	00H
	DD	FLAT:_img_attrs
	DD	FLAT:_align_attr
	DD	FLAT:_src_alt_attrs
	DD	FLAT:??_C@_05DFJCHPDH@input@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0O@HMLFLPEN@form?5control?5@
	DD	00H
	DD	00H
	DD	FLAT:_input_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_03NOMOFEHF@ins@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	ORG $+1
	DD	FLAT:??_C@_0O@CEDLIJIG@inserted?5text@
	DD	FLAT:_html_flow
	DD	00H
	DD	FLAT:_edit_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_07JMLOFMGP@isindex@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BE@NOGKIGME@single?5line?5prompt?5@
	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:_prompt_attrs
	DD	00H
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BP@HBOCGMHA@text?5to?5be?5entered?5by?5the?5user@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BH@INJKJBGO@form?5field?5label?5text?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_label_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06BCIOHMBM@legend@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BB@LGOCAIB@fieldset?5legend?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_legend_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_02PFEMMEEH@li@
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0L@DHBHFPMN@list?5item?5@
	DD	FLAT:_html_flow
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_04OHHBHOGB@link@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BK@GCIIKCBE@a?5media?9independent?5link?5@
	DD	00H
	DD	00H
	DD	FLAT:_link_attrs
	DD	FLAT:_target_attr
	DD	00H
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	ORG $+1
	DD	FLAT:??_C@_0BH@LIKCJKCB@client?9side?5image?5map?5@
	DD	FLAT:_map_contents
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	FLAT:_name_attr
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0L@NDLIJHAH@menu?5list?5@
	DD	FLAT:_blockli_elt
	DD	00H
	DD	00H
	DD	FLAT:_compact_attrs
	DD	00H
	DD	FLAT:??_C@_04HLJJCGEF@meta@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BJ@OJDJPIOL@generic?5metainformation?5@
	DD	00H
	DD	00H
	DD	FLAT:_meta_attrs
	DD	00H
	DD	FLAT:_content_attr
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0DL@IAGMJJEB@alternate?5content?5container?5for@
	DD	FLAT:_noframes_content
	DD	FLAT:??_C@_04IEJGKNJ@body@
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0DM@CPJFPKPD@alternate?5content?5container?5for@
	DD	FLAT:_html_flow
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	ORG $+1
	DD	FLAT:??_C@_0BJ@EHDFJKJB@generic?5embedded?5object?5@
	DD	FLAT:_object_contents
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:_object_attrs
	DD	FLAT:_object_depr
	DD	00H
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0O@PMECOPH@ordered?5list?5@
	DD	FLAT:_li_elt
	DD	FLAT:??_C@_02PFEMMEEH@li@
	DD	FLAT:_html_attrs
	DD	FLAT:_ol_attrs
	DD	00H
	DD	FLAT:??_C@_08KGPIHINJ@optgroup@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0O@IBBKJGKJ@option?5group?5@
	DD	FLAT:_option_elt
	DD	FLAT:??_C@_06OGMGCFPO@option@
	DD	FLAT:_optgroup_attrs
	DD	00H
	DD	FLAT:_label_attr
	DD	FLAT:??_C@_06OGMGCFPO@option@
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BD@HJHAAEHL@selectable?5choice?5@
	DD	FLAT:_html_pcdata
	DD	00H
	DD	FLAT:_option_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0L@ICLNKGCC@paragraph?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_align_attr
	DD	00H
	DD	FLAT:??_C@_05LJDNNBIK@param@
	DB	00H
	DB	02H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BG@OGBECHLM@named?5property?5value?5@
	DD	00H
	DD	00H
	DD	FLAT:_param_attrs
	DD	00H
	DD	FLAT:_name_attr
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BD@OKGNAEP@preformatted?5text?5@
	DD	FLAT:_pre_content
	DD	00H
	DD	FLAT:_html_attrs
	DD	FLAT:_width_attr
	DD	00H
	DD	FLAT:??_C@_01IIACKFLH@q@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BI@IDGHJEGP@short?5inline?5quotation?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_quote_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BK@GECKKPAM@strike?9through?5text?5style@
	DD	FLAT:_html_inline
	DD	00H
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0CF@MKBFLFJI@sample?5program?5output?0?5scripts?0@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06OLONEIEH@script@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	ORG $+1
	DD	FLAT:??_C@_0BD@EEALOKGK@script?5statements?5@
	DD	FLAT:_html_pcdata
	DD	00H
	DD	FLAT:_script_attrs
	DD	FLAT:_language_attr
	DD	FLAT:_type_attr
	DD	FLAT:??_C@_06LGNCCACI@select@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BB@OKAAEBHI@option?5selector?5@
	DD	FLAT:_select_content
	DD	00H
	DD	FLAT:_select_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BB@PLNNDOJH@small?5text?5style@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0CC@KPKCOJB@generic?5language?1style?5containe@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BE@KLPAPDBO@strike?9through?5text@
	DD	FLAT:_html_inline
	DD	00H
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BA@HHIAOMPI@strong?5emphasis@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0M@LPADJHJK@style?5info?5@
	DD	FLAT:_html_pcdata
	DD	00H
	DD	FLAT:_style_attrs
	DD	00H
	DD	FLAT:_type_attr
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_09KAIPOAII@subscript@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0N@LLOPBEAI@superscript?5@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05LCLENNFI@table@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_00CNPNBAHC@@
	DD	FLAT:_table_contents
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	FLAT:_table_attrs
	DD	FLAT:_table_depr
	DD	00H
	DD	FLAT:??_C@_05OPBKHDLA@tbody@
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0M@COHBKCLJ@table?5body?5@
	DD	FLAT:_tr_elt
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	FLAT:_talign_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BA@OHMNJJHC@table?5data?5cell@
	DD	FLAT:_html_flow
	DD	00H
	DD	FLAT:_th_td_attr
	DD	FLAT:_th_td_depr
	DD	00H
	DD	FLAT:??_C@_08DEBIGDAL@textarea@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BH@ODGBEBOO@multi?9line?5text?5field?5@
	DD	FLAT:_html_pcdata
	DD	00H
	DD	FLAT:_textarea_attrs
	DD	00H
	DD	FLAT:_rows_cols_attr
	DD	FLAT:??_C@_05KDGBEENM@tfoot@
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0O@HFPJPDFP@table?5footer?5@
	DD	FLAT:_tr_elt
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	FLAT:_talign_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_02POGCAHMO@th@
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BC@CCIFOICB@table?5header?5cell@
	DD	FLAT:_html_flow
	DD	00H
	DD	FLAT:_th_td_attr
	DD	FLAT:_th_td_depr
	DD	00H
	DD	FLAT:??_C@_05DDLACFIC@thead@
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0O@JOOJEINB@table?5header?5@
	DD	FLAT:_tr_elt
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	FLAT:_talign_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_05PHLGJONK@title@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BA@CCGKIMBG@document?5title?5@
	DD	FLAT:_html_pcdata
	DD	00H
	DD	FLAT:_i18n_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0L@OLDIHEAD@table?5row?5@
	DD	FLAT:_tr_contents
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	FLAT:_talign_attrs
	DD	FLAT:_bgcolor_attr
	DD	00H
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0CC@HPKPLEFL@teletype?5or?5monospaced?5text?5sty@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
	DD	FLAT:??_C@_01OMGOGALD@u@
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0BG@NHDOOMEA@underlined?5text?5style@
	DD	FLAT:_html_inline
	DD	00H
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
	DD	FLAT:??_C@_0BA@DILGCPPM@unordered?5list?5@
	DD	FLAT:_li_elt
	DD	FLAT:??_C@_02PFEMMEEH@li@
	DD	FLAT:_html_attrs
	DD	FLAT:_ul_depr
	DD	00H
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+1
	DD	FLAT:??_C@_0CL@IOIBPELD@instance?5of?5a?5variable?5or?5progr@
	DD	FLAT:_html_inline
	DD	00H
	DD	FLAT:_html_attrs
	DD	00H
	DD	00H
_htmlStartClose DD FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_07KMIIAGPH@listing@
	DD	FLAT:??_C@_03BPAAIJBF@xmp@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_04IEJGKNJ@body@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_04OHHBHOGB@link@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_08GMEGJMDB@frameset@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_05IAKJCFIM@style@
	DD	FLAT:??_C@_04OHHBHOGB@link@
	DD	FLAT:??_C@_05PHLGJONK@title@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_02PFEMMEEH@li@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_07KMIIAGPH@listing@
	DD	FLAT:??_C@_03BPAAIJBF@xmp@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02PFEMMEEH@li@
	DD	00H
	DD	FLAT:??_C@_02FLHDKHAB@hr@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	00H
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	00H
	DD	FLAT:??_C@_07KMIIAGPH@listing@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03BPAAIJBF@xmp@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02IGCIGBLK@dl@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_02EDDPJOD@dt@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_07KMIIAGPH@listing@
	DD	FLAT:??_C@_03BPAAIJBF@xmp@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02EDDPJOD@dt@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_07KMIIAGPH@listing@
	DD	FLAT:??_C@_03BPAAIJBF@xmp@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02EOPBOLLC@dd@
	DD	00H
	DD	FLAT:??_C@_02EOPBOLLC@dd@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_07KMIIAGPH@listing@
	DD	FLAT:??_C@_03BPAAIJBF@xmp@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02EDDPJOD@dt@
	DD	00H
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_03DAPAKLGM@dir@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_07KMIIAGPH@listing@
	DD	FLAT:??_C@_03BPAAIJBF@xmp@
	DD	00H
	DD	FLAT:??_C@_02IKHNIOFL@ol@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	00H
	DD	FLAT:??_C@_04EEIGNHLG@menu@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02JLMMKIPN@ul@
	DD	00H
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	00H
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_06OLONEIEH@script@
	DD	00H
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_07BANDPJOM@caption@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_08LBGGHKOD@colgroup@
	DD	FLAT:??_C@_07BANDPJOM@caption@
	DD	FLAT:??_C@_08LBGGHKOD@colgroup@
	DD	FLAT:??_C@_03HNOLNALI@col@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_03HNOLNALI@col@
	DD	FLAT:??_C@_07BANDPJOM@caption@
	DD	FLAT:??_C@_03HNOLNALI@col@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_07KMIIAGPH@listing@
	DD	FLAT:??_C@_03BPAAIJBF@xmp@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	00H
	DD	FLAT:??_C@_02POGCAHMO@th@
	DD	FLAT:??_C@_02POGCAHMO@th@
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	00H
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	FLAT:??_C@_02POGCAHMO@th@
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	00H
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	FLAT:??_C@_02POGCAHMO@th@
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	FLAT:??_C@_07BANDPJOM@caption@
	DD	FLAT:??_C@_03HNOLNALI@col@
	DD	FLAT:??_C@_08LBGGHKOD@colgroup@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_05DDLACFIC@thead@
	DD	FLAT:??_C@_07BANDPJOM@caption@
	DD	FLAT:??_C@_03HNOLNALI@col@
	DD	FLAT:??_C@_08LBGGHKOD@colgroup@
	DD	00H
	DD	FLAT:??_C@_05KDGBEENM@tfoot@
	DD	FLAT:??_C@_02POGCAHMO@th@
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	FLAT:??_C@_07BANDPJOM@caption@
	DD	FLAT:??_C@_03HNOLNALI@col@
	DD	FLAT:??_C@_08LBGGHKOD@colgroup@
	DD	FLAT:??_C@_05DDLACFIC@thead@
	DD	FLAT:??_C@_05OPBKHDLA@tbody@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_05OPBKHDLA@tbody@
	DD	FLAT:??_C@_02POGCAHMO@th@
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	FLAT:??_C@_07BANDPJOM@caption@
	DD	FLAT:??_C@_03HNOLNALI@col@
	DD	FLAT:??_C@_08LBGGHKOD@colgroup@
	DD	FLAT:??_C@_05DDLACFIC@thead@
	DD	FLAT:??_C@_05KDGBEENM@tfoot@
	DD	FLAT:??_C@_05OPBKHDLA@tbody@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	00H
	DD	FLAT:??_C@_08KGPIHINJ@optgroup@
	DD	FLAT:??_C@_06OGMGCFPO@option@
	DD	00H
	DD	FLAT:??_C@_06OGMGCFPO@option@
	DD	FLAT:??_C@_06OGMGCFPO@option@
	DD	00H
	DD	FLAT:??_C@_08EPOEGPEK@fieldset@
	DD	FLAT:??_C@_06BCIOHMBM@legend@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_07KMIIAGPH@listing@
	DD	FLAT:??_C@_03BPAAIJBF@xmp@
	DD	FLAT:??_C@_01MCMALHOG@a@
	DD	00H
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03MEPDGFMA@var@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03PCCGDNHJ@img@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_02FGOECCNH@br@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03HBNNNHNM@map@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
	DD	00H
_htmlEndPriority DD FLAT:??_C@_03FEJMGOGI@div@
	DD	096H
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	0a0H
	DD	FLAT:??_C@_02POGCAHMO@th@
	DD	0a0H
	DD	FLAT:??_C@_02EOEPPNBF@tr@
	DD	0aaH
	DD	FLAT:??_C@_05DDLACFIC@thead@
	DD	0b4H
	DD	FLAT:??_C@_05OPBKHDLA@tbody@
	DD	0b4H
	DD	FLAT:??_C@_05KDGBEENM@tfoot@
	DD	0b4H
	DD	FLAT:??_C@_05LCLENNFI@table@
	DD	0beH
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	0c8H
	DD	FLAT:??_C@_04IEJGKNJ@body@
	DD	0c8H
	DD	FLAT:??_C@_04PNIFHPHN@html@
	DD	0dcH
	DD	00H
	DD	064H
_html40EntitiesTable DD 022H
	DD	FLAT:??_C@_04KJFGKBNM@quot@
	DD	FLAT:??_C@_0CK@JDDAPBGE@quotation?5mark?5?$DN?5APL?5quote?0?5U?$CL0@
	DD	026H
	DD	FLAT:??_C@_03DCBBJBAA@amp@
	DD	FLAT:??_C@_0BJ@FIPLPGNA@ampersand?0?5U?$CL0026?5ISOnum@
	DD	027H
	DD	FLAT:??_C@_04LBCJFAKL@apos@
	DD	FLAT:??_C@_0N@EHENLBIK@single?5quote@
	DD	03cH
	DD	FLAT:??_C@_02KCAKIFL@lt@
	DD	FLAT:??_C@_0BO@IKPLCPFL@less?9than?5sign?0?5U?$CL003C?5ISOnum@
	DD	03eH
	DD	FLAT:??_C@_02GHFEHLK@gt@
	DD	FLAT:??_C@_0CB@INPPCIDE@greater?9than?5sign?0?5U?$CL003E?5ISOnu@
	DD	0a0H
	DD	FLAT:??_C@_04PHHIFBLJ@nbsp@
	DD	FLAT:??_C@_0DD@LJPHBFKA@no?9break?5space?5?$DN?5non?9breaking?5s@
	DD	0a1H
	DD	FLAT:??_C@_05BNEGCBFC@iexcl@
	DD	FLAT:??_C@_0CJ@LDCHJPND@inverted?5exclamation?5mark?0?5U?$CL00@
	DD	0a2H
	DD	FLAT:??_C@_04OCKNFIJG@cent@
	DD	FLAT:??_C@_0BJ@JAJDJOGE@cent?5sign?0?5U?$CL00A2?5ISOnum@
	DD	0a3H
	DD	FLAT:??_C@_05EBEEKLCG@pound@
	DD	FLAT:??_C@_0BK@CBLMFKEA@pound?5sign?0?5U?$CL00A3?5ISOnum@
	DD	0a4H
	DD	FLAT:??_C@_06HEGEHONB@curren@
	DD	FLAT:??_C@_0BN@KCBDNOJC@currency?5sign?0?5U?$CL00A4?5ISOnum@
	DD	0a5H
	DD	FLAT:??_C@_03HNOOIABH@yen@
	DD	FLAT:??_C@_0CE@IIBMKILI@yen?5sign?5?$DN?5yuan?5sign?0?5U?$CL00A5?5IS@
	DD	0a6H
	DD	FLAT:??_C@_06ILPBEBAD@brvbar@
	DD	FLAT:??_C@_0DA@CCMOAPKD@broken?5bar?5?$DN?5broken?5vertical?5ba@
	DD	0a7H
	DD	FLAT:??_C@_04IKJFFMEH@sect@
	DD	FLAT:??_C@_0BM@NBPOBBLJ@section?5sign?0?5U?$CL00A7?5ISOnum@
	DD	0a8H
	DD	FLAT:??_C@_03LBNAMJF@uml@
	DD	FLAT:??_C@_0CN@DADBLGNL@diaeresis?5?$DN?5spacing?5diaeresis?0?5@
	DD	0a9H
	DD	FLAT:??_C@_04COAGEIMF@copy@
	DD	FLAT:??_C@_0BO@GKHKBHFO@copyright?5sign?0?5U?$CL00A9?5ISOnum@
	DD	0aaH
	DD	FLAT:??_C@_04JPPACPLE@ordf@
	DD	FLAT:??_C@_0CK@IDODFDJH@feminine?5ordinal?5indicator?0?5U?$CL0@
	DD	0abH
	DD	FLAT:??_C@_05PGIFNFKK@laquo@
	DD	FLAT:??_C@_0FD@BNFCAIHO@left?9pointing?5double?5angle?5quot@
	DD	0acH
	DD	FLAT:??_C@_03NJKJADM@not@
	DD	FLAT:??_C@_0BI@BCMLJBGJ@not?5sign?0?5U?$CL00AC?5ISOnum@
	DD	0adH
	DD	FLAT:??_C@_03BPAIHHLG@shy@
	DD	FLAT:??_C@_0DC@LBOPPEOL@soft?5hyphen?5?$DN?5discretionary?5hyp@
	DD	0aeH
	DD	FLAT:??_C@_03HLCNLMFP@reg@
	DD	FLAT:??_C@_0DM@GCGJPANE@registered?5sign?5?$DN?5registered?5tr@
	DD	0afH
	DD	FLAT:??_C@_04IMHNEFHF@macr@
	DD	FLAT:??_C@_0EA@HOMEIEDB@macron?5?$DN?5spacing?5macron?5?$DN?5overl@
	DD	0b0H
	DD	FLAT:??_C@_03OFPLEBM@deg@
	DD	FLAT:??_C@_0BL@CCCHHGNH@degree?5sign?0?5U?$CL00B0?5ISOnum@
	DD	0b1H
	DD	FLAT:??_C@_06CAEEBBM@plusmn@
	DD	FLAT:??_C@_0DE@CHKDBJJG@plus?9minus?5sign?5?$DN?5plus?9or?9minus@
	DD	0b2H
	DD	FLAT:??_C@_04GCMPPOHC@sup2@
	DD	FLAT:??_C@_0EB@LEPBNIBM@superscript?5two?5?$DN?5superscript?5d@
	DD	0b3H
	DD	FLAT:??_C@_04HLNEMPDD@sup3@
	DD	FLAT:??_C@_0ED@GIKFIKLK@superscript?5three?5?$DN?5superscript@
	DD	0b4H
	DD	FLAT:??_C@_05EEJEIAPO@acute@
	DD	FLAT:??_C@_0CM@HPINDAMO@acute?5accent?5?$DN?5spacing?5acute?0?5U@
	DD	0b5H
	DD	FLAT:??_C@_05PCPGMEFP@micro@
	DD	FLAT:??_C@_0BK@KOECHADG@micro?5sign?0?5U?$CL00B5?5ISOnum@
	DD	0b6H
	DD	FLAT:??_C@_04GIAGJOJD@para@
	DD	FLAT:??_C@_0CN@MOKENOBK@pilcrow?5sign?5?$DN?5paragraph?5sign?0?5@
	DD	0b7H
	DD	FLAT:??_C@_06HHCHNCAA@middot@
	DD	FLAT:??_C@_0DM@HGAIAHA@middle?5dot?5?$DN?5Georgian?5comma?5Gre@
	DD	0b8H
	DD	FLAT:??_C@_05KLIFGPMF@cedil@
	DD	FLAT:??_C@_0CJ@ILEJKNLC@cedilla?5?$DN?5spacing?5cedilla?0?5U?$CL00@
	DD	0b9H
	DD	FLAT:??_C@_04EJOCKNLB@sup1@
	DD	FLAT:??_C@_0DH@CNBAIMGE@superscript?5one?5?$DN?5superscript?5d@
	DD	0baH
	DD	FLAT:??_C@_04HMAEPGHP@ordm@
	DD	FLAT:??_C@_0CL@FJKJODCC@masculine?5ordinal?5indicator?0?5U?$CL@
	DD	0bbH
	DD	FLAT:??_C@_05MPFJLGEB@raquo@
	DD	FLAT:??_C@_0FD@EGIHNJHG@right?9pointing?5double?5angle?5quo@
	DD	0bcH
	DD	FLAT:??_C@_06NPFNIPNE@frac14@
	DD	FLAT:??_C@_0EC@KBCMBOHG@vulgar?5fraction?5one?5quarter?5?$DN?5f@
	DD	0bdH
	DD	FLAT:??_C@_06IJAHCIFC@frac12@
	DD	FLAT:??_C@_0DM@DIGGMOPD@vulgar?5fraction?5one?5half?5?$DN?5frac@
	DD	0beH
	DD	FLAT:??_C@_06NMNJFLLK@frac34@
	DD	FLAT:??_C@_0EI@KLKHBCM@vulgar?5fraction?5three?5quarters?5@
	DD	0bfH
	DD	FLAT:??_C@_06JMONPFKG@iquest@
	DD	FLAT:??_C@_0DN@EEILHCCA@inverted?5question?5mark?5?$DN?5turned@
	DD	0c0H
	DD	FLAT:??_C@_06NNGAMJGH@Agrave@
	DD	FLAT:??_C@_0FB@KEPDLJAE@latin?5capital?5letter?5A?5with?5gra@
	DD	0c1H
	DD	FLAT:??_C@_06IKEGIAOO@Aacute@
	DD	FLAT:??_C@_0DC@MHBNMNMK@latin?5capital?5letter?5A?5with?5acu@
	DD	0c2H
	DD	FLAT:??_C@_05LCALGNL@Acirc@
	DD	FLAT:??_C@_0DH@KHFDKONJ@latin?5capital?5letter?5A?5with?5cir@
	DD	0c3H
	DD	FLAT:??_C@_06KCNKLAAC@Atilde@
	DD	FLAT:??_C@_0DC@OLJINFKG@latin?5capital?5letter?5A?5with?5til@
	DD	0c4H
	DD	FLAT:??_C@_04IJOIFFGN@Auml@
	DD	FLAT:??_C@_0DG@FBFBPIGP@latin?5capital?5letter?5A?5with?5dia@
	DD	0c5H
	DD	FLAT:??_C@_05CHPAJHPJ@Aring@
	DD	FLAT:??_C@_0FF@OIKGDIMD@latin?5capital?5letter?5A?5with?5rin@
	DD	0c6H
	DD	FLAT:??_C@_05GGABFNI@AElig@
	DD	FLAT:??_C@_0EE@MODCPHBF@latin?5capital?5letter?5AE?5?$DN?5latin@
	DD	0c7H
	DD	FLAT:??_C@_06PCMIHOPM@Ccedil@
	DD	FLAT:??_C@_0DE@JIEMILBI@latin?5capital?5letter?5C?5with?5ced@
	DD	0c8H
	DD	FLAT:??_C@_06CJCPONHE@Egrave@
	DD	FLAT:??_C@_0DC@BADGAJKO@latin?5capital?5letter?5E?5with?5gra@
	DD	0c9H
	DD	FLAT:??_C@_06HOAJKEPN@Eacute@
	DD	FLAT:??_C@_0DC@IDKEOPOP@latin?5capital?5letter?5E?5with?5acu@
	DD	0caH
	DD	FLAT:??_C@_05JALBPEMN@Ecirc@
	DD	FLAT:??_C@_0DH@CICENEJK@latin?5capital?5letter?5E?5with?5cir@
	DD	0cbH
	DD	FLAT:??_C@_04HMGIPDKN@Euml@
	DD	FLAT:??_C@_0DG@HBMMEOHM@latin?5capital?5letter?5E?5with?5dia@
	DD	0ccH
	DD	FLAT:??_C@_06OOIPIHAA@Igrave@
	DD	FLAT:??_C@_0DC@OHCNNALC@latin?5capital?5letter?5I?5with?5gra@
	DD	0cdH
	DD	FLAT:??_C@_06LJKJMOIJ@Iacute@
	DD	FLAT:??_C@_0DC@HJKBEGLE@latin?5capital?5letter?5I?5with?5acu@
	DD	0ceH
	DD	FLAT:??_C@_05OHHDDELG@Icirc@
	DD	FLAT:??_C@_0DH@EMKFLPMJ@latin?5capital?5letter?5I?5with?5cir@
	DD	0cfH
	DD	FLAT:??_C@_04LJJIBOKM@Iuml@
	DD	FLAT:??_C@_0DG@MPAICMBD@latin?5capital?5letter?5I?5with?5dia@
	DD	0d0H
	DD	FLAT:??_C@_03CBGEMLIN@ETH@
	DD	FLAT:??_C@_0CJ@LDDCJAMI@latin?5capital?5letter?5ETH?0?5U?$CL00D@
	DD	0d1H
	DD	FLAT:??_C@_06FEJCMAOL@Ntilde@
	DD	FLAT:??_C@_0DC@JKOMNMAH@latin?5capital?5letter?5N?5with?5til@
	DD	0d2H
	DD	FLAT:??_C@_06INFPLCDK@Ograve@
	DD	FLAT:??_C@_0DC@EGPMPLAO@latin?5capital?5letter?5O?5with?5gra@
	DD	0d3H
	DD	FLAT:??_C@_06NKHJPLLD@Oacute@
	DD	FLAT:??_C@_0DC@NFGOBNEP@latin?5capital?5letter?5O?5with?5acu@
	DD	0d4H
	DD	FLAT:??_C@_05DBCKNHKL@Ocirc@
	DD	FLAT:??_C@_0DH@KHBIKCFI@latin?5capital?5letter?5O?5with?5cir@
	DD	0d5H
	DD	FLAT:??_C@_06PCOFMLFP@Otilde@
	DD	FLAT:??_C@_0DC@PAAAKFFJ@latin?5capital?5letter?5O?5with?5til@
	DD	0d6H
	DD	FLAT:??_C@_04DGNIOLAM@Ouml@
	DD	FLAT:??_C@_0DG@KGFFNOCC@latin?5capital?5letter?5O?5with?5dia@
	DD	0d7H
	DD	FLAT:??_C@_05MJOOAIJH@times@
	DD	FLAT:??_C@_0CD@DGCLGCAP@multiplication?5sign?0?5U?$CL00D7?5ISO@
	DD	0d8H
	DD	FLAT:??_C@_06HJKNGHPC@Oslash@
	DD	FLAT:??_C@_0FA@JOMDMBPL@latin?5capital?5letter?5O?5with?5str@
	DD	0d9H
	DD	FLAT:??_C@_06EOPBHBLK@Ugrave@
	DD	FLAT:??_C@_0DC@FAAHPKBG@latin?5capital?5letter?5U?5with?5gra@
	DD	0daH
	DD	FLAT:??_C@_06BJNHDIDD@Uacute@
	DD	FLAT:??_C@_0DC@MJMJLCAF@latin?5capital?5letter?5U?5with?5acu@
	DD	0dbH
	DD	FLAT:??_C@_05JDGHPGFG@Ucirc@
	DD	FLAT:??_C@_0DH@MPJOGDLJ@latin?5capital?5letter?5U?5with?5cir@
	DD	0dcH
	DD	FLAT:??_C@_04BMIIGECP@Uuml@
	DD	FLAT:??_C@_0DG@GOPODDHD@latin?5capital?5letter?5U?5with?5dia@
	DD	0ddH
	DD	FLAT:??_C@_06NOHHFCEH@Yacute@
	DD	FLAT:??_C@_0DC@NGFCNODC@latin?5capital?5letter?5Y?5with?5acu@
	DD	0deH
	DD	FLAT:??_C@_05HDBENHAL@THORN@
	DD	FLAT:??_C@_0CL@CHGPFKBD@latin?5capital?5letter?5THORN?0?5U?$CL0@
	DD	0dfH
	DD	FLAT:??_C@_05GMKDJMCJ@szlig@
	DD	FLAT:??_C@_0DF@GONKECDL@latin?5small?5letter?5sharp?5s?5?$DN?5es@
	DD	0e0H
	DD	FLAT:??_C@_06BCNNPAPL@agrave@
	DD	FLAT:??_C@_0EN@PDCHJIBF@latin?5small?5letter?5a?5with?5grave@
	DD	0e1H
	DD	FLAT:??_C@_06EFPLLJHC@aacute@
	DD	FLAT:??_C@_0DA@FMJKAKAM@latin?5small?5letter?5a?5with?5acute@
	DD	0e2H
	DD	FLAT:??_C@_05MIMLDON@acirc@
	DD	FLAT:??_C@_0DF@OHHHJIGO@latin?5small?5letter?5a?5with?5circu@
	DD	0e3H
	DD	FLAT:??_C@_06GNGHIJJO@atilde@
	DD	FLAT:??_C@_0DA@HABPBCGA@latin?5small?5letter?5a?5with?5tilde@
	DD	0e4H
	DD	FLAT:??_C@_04EICJHKGJ@auml@
	DD	FLAT:??_C@_0DE@EPMHJDIB@latin?5small?5letter?5a?5with?5diaer@
	DD	0e5H
	DD	FLAT:??_C@_05CAFMJCMP@aring@
	DD	FLAT:??_C@_0FB@ICHFIEOC@latin?5small?5letter?5a?5with?5ring?5@
	DD	0e6H
	DD	FLAT:??_C@_05MAANDPOK@aelig@
	DD	FLAT:??_C@_0EA@CAAHFPMH@latin?5small?5letter?5ae?5?$DN?5latin?5s@
	DD	0e7H
	DD	FLAT:??_C@_06DNHFEHGA@ccedil@
	DD	FLAT:??_C@_0DC@EILMCCNK@latin?5small?5letter?5c?5with?5cedil@
	DD	0e8H
	DD	FLAT:??_C@_06OGJCNEOI@egrave@
	DD	FLAT:??_C@_0DA@ILLBMOGI@latin?5small?5letter?5e?5with?5grave@
	DD	0e9H
	DD	FLAT:??_C@_06LBLEJNGB@eacute@
	DD	FLAT:??_C@_0DA@BICDCICJ@latin?5small?5letter?5e?5with?5acute@
	DD	0eaH
	DD	FLAT:??_C@_05JHBNPBPL@ecirc@
	DD	FLAT:??_C@_0DF@GIAAOCCN@latin?5small?5letter?5e?5with?5circu@
	DD	0ebH
	DD	FLAT:??_C@_04LNKJNMKJ@euml@
	DD	FLAT:??_C@_0DE@GPFKCFJC@latin?5small?5letter?5e?5with?5diaer@
	DD	0ecH
	DD	FLAT:??_C@_06CBDCLOJM@igrave@
	DD	FLAT:??_C@_0DA@HMKKBHHE@latin?5small?5letter?5i?5with?5grave@
	DD	0edH
	DD	FLAT:??_C@_06HGBEPHBF@iacute@
	DD	FLAT:??_C@_0DA@OCCGIBHC@latin?5small?5letter?5i?5with?5acute@
	DD	0eeH
	DD	FLAT:??_C@_05OANPDBIA@icirc@
	DD	FLAT:??_C@_0DF@MIBIJHO@latin?5small?5letter?5i?5with?5circu@
	DD	0efH
	DD	FLAT:??_C@_04HIFJDBKI@iuml@
	DD	FLAT:??_C@_0DE@NBJOEHPN@latin?5small?5letter?5i?5with?5diaer@
	DD	0f0H
	DD	FLAT:??_C@_03CMJPAGPB@eth@
	DD	FLAT:??_C@_0CH@LGCMOCIP@latin?5small?5letter?5eth?0?5U?$CL00F0?5@
	DD	0f1H
	DD	FLAT:??_C@_06JLCPPJHH@ntilde@
	DD	FLAT:??_C@_0DA@LBLCGIED@latin?5small?5letter?5n?5with?5tilde@
	DD	0f2H
	DD	FLAT:??_C@_06ECOCILKG@ograve@
	DD	FLAT:??_C@_0DA@GNKCEPEK@latin?5small?5letter?5o?5with?5grave@
	DD	0f3H
	DD	FLAT:??_C@_06BFMEMCCP@oacute@
	DD	FLAT:??_C@_0DA@PODAKJAL@latin?5small?5letter?5o?5with?5acute@
	DD	0f4H
	DD	FLAT:??_C@_05DGIGNCJN@ocirc@
	DD	FLAT:??_C@_0DF@FHOFOHGN@latin?5small?5letter?5o?5with?5circu@
	DD	0f5H
	DD	FLAT:??_C@_06DNFIPCMD@otilde@
	DD	FLAT:??_C@_0DA@NLFOBBBN@latin?5small?5letter?5o?5with?5tilde@
	DD	0f6H
	DD	FLAT:??_C@_04PHBJMEAI@ouml@
	DD	FLAT:??_C@_0DE@IBKMGEO@latin?5small?5letter?5o?5with?5diaer@
	DD	0f7H
	DD	FLAT:??_C@_06FFHJEHBN@divide@
	DD	FLAT:??_C@_0BN@DJHBCHKN@division?5sign?0?5U?$CL00F7?5ISOnum@
	DD	0f8H
	DD	FLAT:??_C@_06LGBAFOGO@oslash@
	DD	FLAT:??_C@_0EP@JDKOEFON@latin?5small?5letter?5o?5with?5strok@
	DD	0f9H
	DD	FLAT:??_C@_06IBEMEICG@ugrave@
	DD	FLAT:??_C@_0DA@HLFJEOFC@latin?5small?5letter?5u?5with?5grave@
	DD	0faH
	DD	FLAT:??_C@_06NGGKABKP@uacute@
	DD	FLAT:??_C@_0DA@OCJHAGEB@latin?5small?5letter?5u?5with?5acute@
	DD	0fbH
	DD	FLAT:??_C@_05JEMLPDGA@ucirc@
	DD	FLAT:??_C@_0DF@DPGDCGIM@latin?5small?5letter?5u?5with?5circu@
	DD	0fcH
	DD	FLAT:??_C@_04NNEJELCL@uuml@
	DD	FLAT:??_C@_0DE@MALBCLBP@latin?5small?5letter?5u?5with?5diaer@
	DD	0fdH
	DD	FLAT:??_C@_06BBMKGLNL@yacute@
	DD	FLAT:??_C@_0DA@PNAMGKHG@latin?5small?5letter?5y?5with?5acute@
	DD	0feH
	DD	FLAT:??_C@_05LIICDAEF@thorn@
	DD	FLAT:??_C@_0CO@PJIHMBHF@latin?5small?5letter?5thorn?5with?0?5@
	DD	0ffH
	DD	FLAT:??_C@_04BILJKGCK@yuml@
	DD	FLAT:??_C@_0DE@JBLHCCEO@latin?5small?5letter?5y?5with?5diaer@
	DD	0152H
	DD	FLAT:??_C@_05DMGKHEKI@OElig@
	DD	FLAT:??_C@_0CK@MKAIEJDG@latin?5capital?5ligature?5OE?0?5U?$CL01@
	DD	0153H
	DD	FLAT:??_C@_05PKAHFOJK@oelig@
	DD	FLAT:??_C@_0CI@PBDOLLDF@latin?5small?5ligature?5oe?0?5U?$CL0153@
	DD	0160H
	DD	FLAT:??_C@_06CDFPFCIB@Scaron@
	DD	FLAT:??_C@_0DC@DIFHMFIC@latin?5capital?5letter?5S?5with?5car@
	DD	0161H
	DD	FLAT:??_C@_06OMOCGLBN@scaron@
	DD	FLAT:??_C@_0DA@KEKHKDDJ@latin?5small?5letter?5s?5with?5caron@
	DD	0178H
	DD	FLAT:??_C@_04NJHIIJCO@Yuml@
	DD	FLAT:??_C@_0DG@DAKEFH@latin?5capital?5letter?5Y?5with?5dia@
	DD	0192H
	DD	FLAT:??_C@_04IEHKEKAD@fnof@
	DD	FLAT:??_C@_0DM@ONFHMKBH@latin?5small?5f?5with?5hook?5?$DN?5funct@
	DD	02c6H
	DD	FLAT:??_C@_04LIMEDJKM@circ@
	DD	FLAT:??_C@_0DB@JBEBEMPM@modifier?5letter?5circumflex?5acce@
	DD	02dcH
	DD	FLAT:??_C@_05GMAILABC@tilde@
	DD	FLAT:??_C@_0BL@KGODGBKN@small?5tilde?0?5U?$CL02DC?5ISOdia@
	DD	0391H
	DD	FLAT:??_C@_05IHOGHNDL@Alpha@
	DD	FLAT:??_C@_0CD@LPBPODOI@greek?5capital?5letter?5alpha?0?5U?$CL0@
	DD	0392H
	DD	FLAT:??_C@_04DIAIJOJA@Beta@
	DD	FLAT:??_C@_0CC@OOBPMHFM@greek?5capital?5letter?5beta?0?5U?$CL03@
	DD	0393H
	DD	FLAT:??_C@_05NJHBHDO@Gamma@
	DD	FLAT:??_C@_0CL@LGHPBLEE@greek?5capital?5letter?5gamma?0?5U?$CL0@
	DD	0394H
	DD	FLAT:??_C@_05NFMIDMMK@Delta@
	DD	FLAT:??_C@_0CL@NHEEDEFH@greek?5capital?5letter?5delta?0?5U?$CL0@
	DD	0395H
	DD	FLAT:??_C@_07MHFJNEOI@Epsilon@
	DD	FLAT:??_C@_0CF@JDHAIGGH@greek?5capital?5letter?5epsilon?0?5U@
	DD	0396H
	DD	FLAT:??_C@_04GIJIECND@Zeta@
	DD	FLAT:??_C@_0CC@GEHHHHOP@greek?5capital?5letter?5zeta?0?5U?$CL03@
	DD	0397H
	DD	FLAT:??_C@_03FNGPBCIG@Eta@
	DD	FLAT:??_C@_0CB@GCINFKKN@greek?5capital?5letter?5eta?0?5U?$CL039@
	DD	0398H
	DD	FLAT:??_C@_05FDIGLFGK@Theta@
	DD	FLAT:??_C@_0CL@DEOCPNDP@greek?5capital?5letter?5theta?0?5U?$CL0@
	DD	0399H
	DD	FLAT:??_C@_04CAGFEPOF@Iota@
	DD	FLAT:??_C@_0CC@BFEJFF@greek?5capital?5letter?5iota?0?5U?$CL03@
	DD	039aH
	DD	FLAT:??_C@_05MMNIGICE@Kappa@
	DD	FLAT:??_C@_0CD@BBAOAFHF@greek?5capital?5letter?5kappa?0?5U?$CL0@
	DD	039bH
	DD	FLAT:??_C@_06OBCFFGBN@Lambda@
	DD	FLAT:??_C@_0CM@NLEFHINL@greek?5capital?5letter?5lambda?0?5U?$CL@
	DD	039cH
	DD	FLAT:??_C@_02CKLELFMN@Mu@
	DD	FLAT:??_C@_0CA@JHDDCCNN@greek?5capital?5letter?5mu?0?5U?$CL039C@
	DD	039dH
	DD	FLAT:??_C@_02CIPCALJE@Nu@
	DD	FLAT:??_C@_0CA@EBJANCBL@greek?5capital?5letter?5nu?0?5U?$CL039D@
	DD	039eH
	DD	FLAT:??_C@_02NGCOIJAL@Xi@
	DD	FLAT:??_C@_0CI@DEKDLEND@greek?5capital?5letter?5xi?0?5U?$CL039E@
	DD	039fH
	DD	FLAT:??_C@_07IKLCMNO@Omicron@
	DD	FLAT:??_C@_0CF@LAEOEFAO@greek?5capital?5letter?5omicron?0?5U@
	DD	03a0H
	DD	FLAT:??_C@_02NIDNNILD@Pi@
	DD	FLAT:??_C@_0CI@GJIDFEDM@greek?5capital?5letter?5pi?0?5U?$CL03A0@
	DD	03a1H
	DD	FLAT:??_C@_03BLBOAKDK@Rho@
	DD	FLAT:??_C@_0CB@KMJAKGAP@greek?5capital?5letter?5rho?0?5U?$CL03A@
	DD	03a3H
	DD	FLAT:??_C@_05MKBNPMBG@Sigma@
	DD	FLAT:??_C@_0CL@HFCPNIPL@greek?5capital?5letter?5sigma?0?5U?$CL0@
	DD	03a4H
	DD	FLAT:??_C@_03IBIJJELC@Tau@
	DD	FLAT:??_C@_0CB@HFBLNIAO@greek?5capital?5letter?5tau?0?5U?$CL03A@
	DD	03a5H
	DD	FLAT:??_C@_07LLOCOFMD@Upsilon@
	DD	FLAT:??_C@_0CN@JFDLHIKN@greek?5capital?5letter?5upsilon?0?5U@
	DD	03a6H
	DD	FLAT:??_C@_03OHENGFDH@Phi@
	DD	FLAT:??_C@_0CJ@HBFJNDBB@greek?5capital?5letter?5phi?0?5U?$CL03A@
	DD	03a7H
	DD	FLAT:??_C@_03KFOBJNEG@Chi@
	DD	FLAT:??_C@_0CB@GAGJNAFN@greek?5capital?5letter?5chi?0?5U?$CL03A@
	DD	03a8H
	DD	FLAT:??_C@_03PHDOCJKG@Psi@
	DD	FLAT:??_C@_0CJ@NGCFEDIE@greek?5capital?5letter?5psi?0?5U?$CL03A@
	DD	03a9H
	DD	FLAT:??_C@_05OMBHNFGL@Omega@
	DD	FLAT:??_C@_0CL@ILDKNODA@greek?5capital?5letter?5omega?0?5U?$CL0@
	DD	03b1H
	DD	FLAT:??_C@_05IAEKHIAN@alpha@
	DD	FLAT:??_C@_0CJ@NGKKADHM@greek?5small?5letter?5alpha?0?5U?$CL03B@
	DD	03b2H
	DD	FLAT:??_C@_04PJMJLBJE@beta@
	DD	FLAT:??_C@_0CI@HELPLLEJ@greek?5small?5letter?5beta?0?5U?$CL03B2@
	DD	03b3H
	DD	FLAT:??_C@_05KDLBCAI@gamma@
	DD	FLAT:??_C@_0CJ@GAGCCHKA@greek?5small?5letter?5gamma?0?5U?$CL03B@
	DD	03b4H
	DD	FLAT:??_C@_05NCGEDJPM@delta@
	DD	FLAT:??_C@_0CJ@BFJAILD@greek?5small?5letter?5delta?0?5U?$CL03B@
	DD	03b5H
	DD	FLAT:??_C@_07DOCPLGLO@epsilon@
	DD	FLAT:??_C@_0CL@DLPCDOME@greek?5small?5letter?5epsilon?0?5U?$CL0@
	DD	03b6H
	DD	FLAT:??_C@_04KJFJGNNH@zeta@
	DD	FLAT:??_C@_0CI@BDECAAKJ@greek?5small?5letter?5zeta?0?5U?$CL03B6@
	DD	03b7H
	DD	FLAT:??_C@_03PNFNLNLI@eta@
	DD	FLAT:??_C@_0CH@KEKGFBMN@greek?5small?5letter?5eta?0?5U?$CL03B7?5@
	DD	03b8H
	DD	FLAT:??_C@_05FECKLAFM@theta@
	DD	FLAT:??_C@_0CJ@OCPPMBNL@greek?5small?5letter?5theta?0?5U?$CL03B@
	DD	03b9H
	DD	FLAT:??_C@_04OBKEGAOB@iota@
	DD	FLAT:??_C@_0CI@IFKGGLBF@greek?5small?5letter?5iota?0?5U?$CL03B9@
	DD	03baH
	DD	FLAT:??_C@_05MLHEGNBC@kappa@
	DD	FLAT:??_C@_0CJ@FMCMBLI@greek?5small?5letter?5kappa?0?5U?$CL03B@
	DD	03bbH
	DD	FLAT:??_C@_06COJIGPIB@lambda@
	DD	FLAT:??_C@_0CK@PECPLDML@greek?5small?5letter?5lambda?0?5U?$CL03@
	DD	03bcH
	DD	FLAT:??_C@_02BCPJPDCN@mu@
	DD	FLAT:??_C@_0CG@GBCBMJNP@greek?5small?5letter?5mu?0?5U?$CL03BC?5I@
	DD	03bdH
	DD	FLAT:??_C@_02BALPENHE@nu@
	DD	FLAT:??_C@_0CG@CAKLFEAP@greek?5small?5letter?5nu?0?5U?$CL03BD?5I@
	DD	03beH
	DD	FLAT:??_C@_02OOGDMPOL@xi@
	DD	FLAT:??_C@_0CG@HDKNCKDK@greek?5small?5letter?5xi?0?5U?$CL03BE?5I@
	DD	03bfH
	DD	FLAT:??_C@_07PBNNEOII@omicron@
	DD	FLAT:??_C@_0CH@GIJCJIME@greek?5small?5letter?5omicron?0?5U?$CL0@
	DD	03c0H
	DD	FLAT:??_C@_02OAHAJOFD@pi@
	DD	FLAT:??_C@_0CG@KLOCKGKD@greek?5small?5letter?5pi?0?5U?$CL03C0?5I@
	DD	03c1H
	DD	FLAT:??_C@_03LLCMKFAE@rho@
	DD	FLAT:??_C@_0CH@IDBCMKBI@greek?5small?5letter?5rho?0?5U?$CL03C1?5@
	DD	03c2H
	DD	FLAT:??_C@_06IAEFNBA@sigmaf@
	DD	FLAT:??_C@_0CP@IIMCBNML@greek?5small?5letter?5final?5sigma?0@
	DD	03c3H
	DD	FLAT:??_C@_05MNLBPJCA@sigma@
	DD	FLAT:??_C@_0CJ@CGFNIIGJ@greek?5small?5letter?5sigma?0?5U?$CL03C@
	DD	03c4H
	DD	FLAT:??_C@_03CBLLDLIM@tau@
	DD	FLAT:??_C@_0CH@DHNJIMD@greek?5small?5letter?5tau?0?5U?$CL03C4?5@
	DD	03c5H
	DD	FLAT:??_C@_07ECJEIHJF@upsilon@
	DD	FLAT:??_C@_0CL@IFBHJODJ@greek?5small?5letter?5upsilon?0?5U?$CL0@
	DD	03c6H
	DD	FLAT:??_C@_03EHHPMKAJ@phi@
	DD	FLAT:??_C@_0CH@KFHMBLGI@greek?5small?5letter?5phi?0?5U?$CL03C6?5@
	DD	03c7H
	DD	FLAT:??_C@_03FNDDCHI@chi@
	DD	FLAT:??_C@_0CH@FNBJGLJ@greek?5small?5letter?5chi?0?5U?$CL03C7?5@
	DD	03c8H
	DD	FLAT:??_C@_03FHAMIGJI@psi@
	DD	FLAT:??_C@_0CH@CAAILPN@greek?5small?5letter?5psi?0?5U?$CL03C8?5@
	DD	03c9H
	DD	FLAT:??_C@_05OLLLNAFN@omega@
	DD	FLAT:??_C@_0CJ@NIEIIOKC@greek?5small?5letter?5omega?0?5U?$CL03C@
	DD	03d1H
	DD	FLAT:??_C@_08KICBPJKJ@thetasym@
	DD	FLAT:??_C@_0CM@BLIOHCJH@greek?5small?5letter?5theta?5symbol@
	DD	03d2H
	DD	FLAT:??_C@_05HPKIDMJD@upsih@
	DD	FLAT:??_C@_0CL@EJFICJGP@greek?5upsilon?5with?5hook?5symbol?0@
	DD	03d6H
	DD	FLAT:??_C@_03ILOHKOKA@piv@
	DD	FLAT:??_C@_0CA@BEPNCOE@greek?5pi?5symbol?0?5U?$CL03D6?5ISOgrk3@
	DD	02002H
	DD	FLAT:??_C@_04MKHONPBA@ensp@
	DD	FLAT:??_C@_0BI@MFLEMBMM@en?5space?0?5U?$CL2002?5ISOpub@
	DD	02003H
	DD	FLAT:??_C@_04NIMLHAPO@emsp@
	DD	FLAT:??_C@_0BI@KECKOMLC@em?5space?0?5U?$CL2003?5ISOpub@
	DD	02009H
	DD	FLAT:??_C@_06KIEAGDHN@thinsp@
	DD	FLAT:??_C@_0BK@BMAGNFEE@thin?5space?0?5U?$CL2009?5ISOpub@
	DD	0200cH
	DD	FLAT:??_C@_04KBAMANKO@zwnj@
	DD	FLAT:??_C@_0CL@DLBANCKG@zero?5width?5non?9joiner?0?5U?$CL200C?5N@
	DD	0200dH
	DD	FLAT:??_C@_03BEJFJNOD@zwj@
	DD	FLAT:??_C@_0CH@HBJLDPCB@zero?5width?5joiner?0?5U?$CL200D?5NEW?5R@
	DD	0200eH
	DD	FLAT:??_C@_03CIGNMBIM@lrm@
	DD	FLAT:??_C@_0CI@JMDAIFJP@left?9to?9right?5mark?0?5U?$CL200E?5NEW?5@
	DD	0200fH
	DD	FLAT:??_C@_03IOBDGPFK@rlm@
	DD	FLAT:??_C@_0CI@CAGBGDGP@right?9to?9left?5mark?0?5U?$CL200F?5NEW?5@
	DD	02013H
	DD	FLAT:??_C@_05GIHIEGDL@ndash@
	DD	FLAT:??_C@_0BH@PNMIOILG@en?5dash?0?5U?$CL2013?5ISOpub@
	DD	02014H
	DD	FLAT:??_C@_05OOOMDEJF@mdash@
	DD	FLAT:??_C@_0BH@KANBCIDP@em?5dash?0?5U?$CL2014?5ISOpub@
	DD	02018H
	DD	FLAT:??_C@_05OMKFBBEI@lsquo@
	DD	FLAT:??_C@_0CK@GNEELPIK@left?5single?5quotation?5mark?0?5U?$CL2@
	DD	02019H
	DD	FLAT:??_C@_05NFHJHCKD@rsquo@
	DD	FLAT:??_C@_0CL@GEEKPFIM@right?5single?5quotation?5mark?0?5U?$CL@
	DD	0201aH
	DD	FLAT:??_C@_05EDKFBPDE@sbquo@
	DD	FLAT:??_C@_0CI@NPEPNHFF@single?5low?99?5quotation?5mark?0?5U?$CL@
	DD	0201cH
	DD	FLAT:??_C@_05DOGFFKNK@ldquo@
	DD	FLAT:??_C@_0CK@DIJLOOKF@left?5double?5quotation?5mark?0?5U?$CL2@
	DD	0201dH
	DD	FLAT:??_C@_05HLJDJDB@rdquo@
	DD	FLAT:??_C@_0CL@ECIPNNCJ@right?5double?5quotation?5mark?0?5U?$CL@
	DD	0201eH
	DD	FLAT:??_C@_05EGPDLKK@bdquo@
	DD	FLAT:??_C@_0CI@JHNLBCGB@double?5low?99?5quotation?5mark?0?5U?$CL@
	DD	02020H
	DD	FLAT:??_C@_06DEOCNA@dagger@
	DD	FLAT:??_C@_0BG@KCAEGFLE@dagger?0?5U?$CL2020?5ISOpub@
	DD	02021H
	DD	FLAT:??_C@_06MPIJNLEM@Dagger@
	DD	FLAT:??_C@_0BN@EMJEPPHC@double?5dagger?0?5U?$CL2021?5ISOpub@
	DD	02022H
	DD	FLAT:??_C@_04OELGKIO@bull@
	DD	FLAT:??_C@_0CL@DGNFAKNB@bullet?5?$DN?5black?5small?5circle?0?5U?$CL@
	DD	02026H
	DD	FLAT:??_C@_06MHPIOHEE@hellip@
	DD	FLAT:??_C@_0DG@IFMGDAHK@horizontal?5ellipsis?5?$DN?5three?5dot@
	DD	02030H
	DD	FLAT:??_C@_06BCNCCGDG@permil@
	DD	FLAT:??_C@_0BP@MOFLNGGL@per?5mille?5sign?0?5U?$CL2030?5ISOtech@
	DD	02032H
	DD	FLAT:??_C@_05NIKGJPCK@prime@
	DD	FLAT:??_C@_0CH@BOHNNDDJ@prime?5?$DN?5minutes?5?$DN?5feet?0?5U?$CL2032?5@
	DD	02033H
	DD	FLAT:??_C@_05NPAKJKBM@Prime@
	DD	FLAT:??_C@_0DA@NOHFAGMO@double?5prime?5?$DN?5seconds?5?$DN?5inches@
	DD	02039H
	DD	FLAT:??_C@_06GELNDNKI@lsaquo@
	DD	FLAT:??_C@_0DP@FIMACBKH@single?5left?9pointing?5angle?5quot@
	DD	0203aH
	DD	FLAT:??_C@_06FDFMNKDL@rsaquo@
	DD	FLAT:??_C@_0EA@GOMGFHEI@single?5right?9pointing?5angle?5quo@
	DD	0203eH
	DD	FLAT:??_C@_05PHLALINO@oline@
	DD	FLAT:??_C@_0CJ@PIHCOGHN@overline?5?$DN?5spacing?5overscore?0?5U@
	DD	02044H
	DD	FLAT:??_C@_05POHGDHA@frasl@
	DD	FLAT:??_C@_0BL@ECLANJNI@fraction?5slash?0?5U?$CL2044?5NEW@
	DD	020acH
	DD	FLAT:??_C@_04IBPOGLCH@euro@
	DD	FLAT:??_C@_0BG@JOOOHDJA@euro?5sign?0?5U?$CL20AC?5NEW@
	DD	02111H
	DD	FLAT:??_C@_05NGOMGBBD@image@
	DD	FLAT:??_C@_0DH@HDIEDNLH@blackletter?5capital?5I?5?$DN?5imagina@
	DD	02118H
	DD	FLAT:??_C@_06PDPFIHAI@weierp@
	DD	FLAT:??_C@_0DN@GALPCJE@script?5capital?5P?5?$DN?5power?5set?5?$DN?5@
	DD	0211cH
	DD	FLAT:??_C@_04DGGKDJMA@real@
	DD	FLAT:??_C@_0DJ@HIEIFFHC@blackletter?5capital?5R?5?$DN?5real?5pa@
	DD	02122H
	DD	FLAT:??_C@_05IJFCMOFM@trade@
	DD	FLAT:??_C@_0BP@FGOALMKH@trade?5mark?5sign?0?5U?$CL2122?5ISOnum@
	DD	02135H
	DD	FLAT:??_C@_07HGDIPDGB@alefsym@
	DD	FLAT:??_C@_0DF@FEFKAOCF@alef?5symbol?5?$DN?5first?5transfinite@
	DD	02190H
	DD	FLAT:??_C@_04KMPJKFIC@larr@
	DD	FLAT:??_C@_0BP@MANNKCID@leftwards?5arrow?0?5U?$CL2190?5ISOnum@
	DD	02191H
	DD	FLAT:??_C@_04MBAJFAHB@uarr@
	DD	FLAT:??_C@_0BN@OACCONEB@upwards?5arrow?0?5U?$CL2191?5ISOnum@
	DD	02192H
	DD	FLAT:??_C@_04HDCJIMGB@rarr@
	DD	FLAT:??_C@_0CA@IGGHOOCM@rightwards?5arrow?0?5U?$CL2192?5ISOnum@
	DD	02193H
	DD	FLAT:??_C@_04JMIJOOED@darr@
	DD	FLAT:??_C@_0BP@DOIMJHPM@downwards?5arrow?0?5U?$CL2193?5ISOnum@
	DD	02194H
	DD	FLAT:??_C@_04FJHJADEC@harr@
	DD	FLAT:??_C@_0CB@IHAAEEFA@left?5right?5arrow?0?5U?$CL2194?5ISOams@
	DD	021b5H
	DD	FLAT:??_C@_05IKKJKHCL@crarr@
	DD	FLAT:??_C@_0EE@KKIJJMBC@downwards?5arrow?5with?5corner?5lef@
	DD	021d0H
	DD	FLAT:??_C@_04MMLAKLM@lArr@
	DD	FLAT:??_C@_0CH@MGOLKEFA@leftwards?5double?5arrow?0?5U?$CL21D0?5@
	DD	021d1H
	DD	FLAT:??_C@_04GBDLPPEP@uArr@
	DD	FLAT:??_C@_0CF@KBBKONBL@upwards?5double?5arrow?0?5U?$CL21D1?5IS@
	DD	021d2H
	DD	FLAT:??_C@_04NDBLCDFP@rArr@
	DD	FLAT:??_C@_0CI@IKAGJDHN@rightwards?5double?5arrow?0?5U?$CL21D2@
	DD	021d3H
	DD	FLAT:??_C@_04DMLLEBHN@dArr@
	DD	FLAT:??_C@_0CH@GBOLFAFE@downwards?5double?5arrow?0?5U?$CL21D3?5@
	DD	021d4H
	DD	FLAT:??_C@_04PJELKMHM@hArr@
	DD	FLAT:??_C@_0CI@IFCBBNJJ@left?5right?5double?5arrow?0?5U?$CL21D4@
	DD	02200H
	DD	FLAT:??_C@_06PLFKNBPH@forall@
	DD	FLAT:??_C@_0BI@NOOLIOLI@for?5all?0?5U?$CL2200?5ISOtech@
	DD	02202H
	DD	FLAT:??_C@_04FPLDHIIH@part@
	DD	FLAT:??_C@_0CF@GGOIFMBL@partial?5differential?0?5U?$CL2202?5IS@
	DD	02203H
	DD	FLAT:??_C@_05IEGMLJMJ@exist@
	DD	FLAT:??_C@_0BN@EAFHKNPG@there?5exists?0?5U?$CL2203?5ISOtech@
	DD	02205H
	DD	FLAT:??_C@_05LBJMNBOG@empty@
	DD	FLAT:??_C@_0DA@LKCPIGBO@empty?5set?5?$DN?5null?5set?5?$DN?5diameter@
	DD	02207H
	DD	FLAT:??_C@_05HEJFDJKB@nabla@
	DD	FLAT:??_C@_0CM@GCEKGKCK@nabla?5?$DN?5backward?5difference?0?5U?$CL@
	DD	02208H
	DD	FLAT:??_C@_04GIANKECK@isin@
	DD	FLAT:??_C@_0BL@GDBOMBIM@element?5of?0?5U?$CL2208?5ISOtech@
	DD	02209H
	DD	FLAT:??_C@_05DPIEFBKH@notin@
	DD	FLAT:??_C@_0CC@DDLOCPFN@not?5an?5element?5of?0?5U?$CL2209?5ISOte@
	DD	0220bH
	DD	FLAT:??_C@_02PGMIBACJ@ni@
	DD	FLAT:??_C@_0CD@BGLAPDGA@contains?5as?5member?0?5U?$CL220B?5ISOt@
	DD	0220fH
	DD	FLAT:??_C@_04EDCDKCIE@prod@
	DD	FLAT:??_C@_0CN@JGMMGEDP@n?9ary?5product?5?$DN?5product?5sign?0?5U@
	DD	02211H
	DD	FLAT:??_C@_03CFFIJAMA@sum@
	DD	FLAT:??_C@_0CA@MLFCAEFK@n?9ary?5summation?0?5U?$CL2211?5ISOamsb@
	DD	02212H
	DD	FLAT:??_C@_05ODKEFHFK@minus@
	DD	FLAT:??_C@_0BL@FJCONNGD@minus?5sign?0?5U?$CL2212?5ISOtech@
	DD	02217H
	DD	FLAT:??_C@_06CKLHNNN@lowast@
	DD	FLAT:??_C@_0CC@CNKJAFM@asterisk?5operator?0?5U?$CL2217?5ISOte@
	DD	0221aH
	DD	FLAT:??_C@_05BBBHAEPE@radic@
	DD	FLAT:??_C@_0CL@ILNDCHNK@square?5root?5?$DN?5radical?5sign?0?5U?$CL2@
	DD	0221dH
	DD	FLAT:??_C@_04GNINHFNB@prop@
	DD	FLAT:??_C@_0CA@BMLNCKCC@proportional?5to?0?5U?$CL221D?5ISOtech@
	DD	0221eH
	DD	FLAT:??_C@_05OFPBNHLL@infin@
	DD	FLAT:??_C@_0BJ@MNMMNFFJ@infinity?0?5U?$CL221E?5ISOtech@
	DD	02220H
	DD	FLAT:??_C@_03DFNEKLMP@ang@
	DD	FLAT:??_C@_0BG@GBCFPCNE@angle?0?5U?$CL2220?5ISOamso@
	DD	02227H
	DD	FLAT:??_C@_03BOPJPIAM@and@
	DD	FLAT:??_C@_0CE@NKBACHGA@logical?5and?5?$DN?5wedge?0?5U?$CL2227?5ISO@
	DD	02228H
	DD	FLAT:??_C@_02FODMLBIE@or@
	DD	FLAT:??_C@_0CB@FLAIEBBA@logical?5or?5?$DN?5vee?0?5U?$CL2228?5ISOtec@
	DD	02229H
	DD	FLAT:??_C@_03JBACKAOP@cap@
	DD	FLAT:??_C@_0CD@JBIOOGBO@intersection?5?$DN?5cap?0?5U?$CL2229?5ISOt@
	DD	0222aH
	DD	FLAT:??_C@_03IKCNKLED@cup@
	DD	FLAT:??_C@_0BM@JDEPIPG@union?5?$DN?5cup?0?5U?$CL222A?5ISOtech@
	DD	0222bH
	DD	FLAT:??_C@_03JBIPMCLC@int@
	DD	FLAT:??_C@_0BJ@DAPJHJHO@integral?0?5U?$CL222B?5ISOtech@
	DD	02234H
	DD	FLAT:??_C@_06PLMBDDJI@there4@
	DD	FLAT:??_C@_0BK@MEMCAFFC@therefore?0?5U?$CL2234?5ISOtech@
	DD	0223cH
	DD	FLAT:??_C@_03DAGEMKNE@sim@
	DD	FLAT:??_C@_0DK@DFMGNFEL@tilde?5operator?5?$DN?5varies?5with?5?$DN?5@
	DD	02245H
	DD	FLAT:??_C@_04OMPPPJGA@cong@
	DD	FLAT:??_C@_0CH@JKKBMPFH@approximately?5equal?5to?0?5U?$CL2245?5@
	DD	02248H
	DD	FLAT:??_C@_05EKOANGCP@asymp@
	DD	FLAT:??_C@_0DA@ELDFLNNK@almost?5equal?5to?5?$DN?5asymptotic?5to@
	DD	02260H
	DD	FLAT:??_C@_02FKHNFPCF@ne@
	DD	FLAT:??_C@_0BN@PJGPJIIG@not?5equal?5to?0?5U?$CL2260?5ISOtech@
	DD	02261H
	DD	FLAT:??_C@_05LADEHHLL@equiv@
	DD	FLAT:??_C@_0BN@MJCNDCCF@identical?5to?0?5U?$CL2261?5ISOtech@
	DD	02264H
	DD	FLAT:??_C@_02FJPJILEL@le@
	DD	FLAT:??_C@_0CG@EDHLKJHI@less?9than?5or?5equal?5to?0?5U?$CL2264?5I@
	DD	02265H
	DD	FLAT:??_C@_02FFKMGEKK@ge@
	DD	FLAT:??_C@_0CJ@OOFAGHNB@greater?9than?5or?5equal?5to?0?5U?$CL226@
	DD	02282H
	DD	FLAT:??_C@_03KCMAIMAP@sub@
	DD	FLAT:??_C@_0BK@JKNHIPAJ@subset?5of?0?5U?$CL2282?5ISOtech@
	DD	02283H
	DD	FLAT:??_C@_03NKDEPMNM@sup@
	DD	FLAT:??_C@_0BM@ICBAIMLO@superset?5of?0?5U?$CL2283?5ISOtech@
	DD	02284H
	DD	FLAT:??_C@_04GDKEGNCC@nsub@
	DD	FLAT:??_C@_0CA@PMHNPAEI@not?5a?5subset?5of?0?5U?$CL2284?5ISOamsn@
	DD	02286H
	DD	FLAT:??_C@_04IIJHECPP@sube@
	DD	FLAT:??_C@_0CG@IBKNAAAC@subset?5of?5or?5equal?5to?0?5U?$CL2286?5I@
	DD	02287H
	DD	FLAT:??_C@_04JHDFDFOB@supe@
	DD	FLAT:??_C@_0CI@GNKICMCH@superset?5of?5or?5equal?5to?0?5U?$CL2287@
	DD	02295H
	DD	FLAT:??_C@_05GJJFMLCJ@oplus@
	DD	FLAT:??_C@_0CK@PJJPJOGF@circled?5plus?5?$DN?5direct?5sum?0?5U?$CL22@
	DD	02297H
	DD	FLAT:??_C@_06JILOEKEG@otimes@
	DD	FLAT:??_C@_0CP@BNGPDPFL@circled?5times?5?$DN?5vector?5product?0@
	DD	022a5H
	DD	FLAT:??_C@_04LELNCKNE@perp@
	DD	FLAT:??_C@_0DI@FJMFCLO@up?5tack?5?$DN?5orthogonal?5to?5?$DN?5perpe@
	DD	022c5H
	DD	FLAT:??_C@_04DLDDMCEG@sdot@
	DD	FLAT:??_C@_0BN@IIJHENBC@dot?5operator?0?5U?$CL22C5?5ISOamsb@
	DD	02308H
	DD	FLAT:??_C@_05GNCPEPNF@lceil@
	DD	FLAT:??_C@_0CL@JGNLAJJH@left?5ceiling?5?$DN?5apl?5upstile?0?5U?$CL2@
	DD	02309H
	DD	FLAT:??_C@_05FEPDCMDO@rceil@
	DD	FLAT:??_C@_0BO@BHDCDMKC@right?5ceiling?0?5U?$CL2309?5ISOamsc@
	DD	0230aH
	DD	FLAT:??_C@_06JBCNAACH@lfloor@
	DD	FLAT:??_C@_0CL@MFJOBEGJ@left?5floor?5?$DN?5apl?5downstile?0?5U?$CL2@
	DD	0230bH
	DD	FLAT:??_C@_06KGMMOHLE@rfloor@
	DD	FLAT:??_C@_0BM@CNFHBOON@right?5floor?0?5U?$CL230B?5ISOamsc@
	DD	02329H
	DD	FLAT:??_C@_04IOHABJIC@lang@
	DD	FLAT:??_C@_0DC@PHLLJIFD@left?9pointing?5angle?5bracket?5?$DN?5b@
	DD	0232aH
	DD	FLAT:??_C@_04FBKADAGB@rang@
	DD	FLAT:??_C@_0DD@OPBENGIH@right?9pointing?5angle?5bracket?5?$DN?5@
	DD	025caH
	DD	FLAT:??_C@_03DJBAHFDJ@loz@
	DD	FLAT:??_C@_0BH@EDOKOFKC@lozenge?0?5U?$CL25CA?5ISOpub@
	DD	02660H
	DD	FLAT:??_C@_06OOCJPKKB@spades@
	DD	FLAT:??_C@_0CA@PJGGGHFM@black?5spade?5suit?0?5U?$CL2660?5ISOpub@
	DD	02663H
	DD	FLAT:??_C@_05IPDPNMDB@clubs@
	DD	FLAT:??_C@_0CK@IOPKIONM@black?5club?5suit?5?$DN?5shamrock?0?5U?$CL2@
	DD	02665H
	DD	FLAT:??_C@_06LAHNGALJ@hearts@
	DD	FLAT:??_C@_0CM@FKGBKKJF@black?5heart?5suit?5?$DN?5valentine?0?5U@
	DD	02666H
	DD	FLAT:??_C@_05IOPNOEAM@diams@
	DD	FLAT:??_C@_0CC@EHCGNBJI@black?5diamond?5suit?0?5U?$CL2666?5ISOp@
CONST	ENDS
;	COMDAT ??_C@_04IEJGKNJ@body@
CONST	SEGMENT
??_C@_04IEJGKNJ@body@ DB 'body', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NEODDMOL@head@
CONST	SEGMENT
??_C@_04NEODDMOL@head@ DB 'head', 00H			; `string'
CONST	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__7B7A869E_ctype@h DB 01H
__A40A425D_stat@h DB 01H
__457DD326_basetsd@h DB 01H
__1887E595_winnt@h DB 01H
__9FC7C64B_processthreadsapi@h DB 01H
__FA470AEC_memoryapi@h DB 01H
__F37DAFF1_winerror@h DB 01H
__7A450CCC_winbase@h DB 01H
__B4B40122_winioctl@h DB 01H
__86261D59_stralign@h DB 01H
__111E219E_htmlparser@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0CC@EHCGNBJI@black?5diamond?5suit?0?5U?$CL2666?5ISOp@
CONST	SEGMENT
??_C@_0CC@EHCGNBJI@black?5diamond?5suit?0?5U?$CL2666?5ISOp@ DB 'black dia'
	DB	'mond suit, U+2666 ISOpub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOPNOEAM@diams@
CONST	SEGMENT
??_C@_05IOPNOEAM@diams@ DB 'diams', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@FKGBKKJF@black?5heart?5suit?5?$DN?5valentine?0?5U@
CONST	SEGMENT
??_C@_0CM@FKGBKKJF@black?5heart?5suit?5?$DN?5valentine?0?5U@ DB 'black he'
	DB	'art suit = valentine, U+2665 ISOpub', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LAHNGALJ@hearts@
CONST	SEGMENT
??_C@_06LAHNGALJ@hearts@ DB 'hearts', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@IOPKIONM@black?5club?5suit?5?$DN?5shamrock?0?5U?$CL2@
CONST	SEGMENT
??_C@_0CK@IOPKIONM@black?5club?5suit?5?$DN?5shamrock?0?5U?$CL2@ DB 'black'
	DB	' club suit = shamrock, U+2663 ISOpub', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPDPNMDB@clubs@
CONST	SEGMENT
??_C@_05IPDPNMDB@clubs@ DB 'clubs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PJGGGHFM@black?5spade?5suit?0?5U?$CL2660?5ISOpub@
CONST	SEGMENT
??_C@_0CA@PJGGGHFM@black?5spade?5suit?0?5U?$CL2660?5ISOpub@ DB 'black spa'
	DB	'de suit, U+2660 ISOpub', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OOCJPKKB@spades@
CONST	SEGMENT
??_C@_06OOCJPKKB@spades@ DB 'spades', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EDOKOFKC@lozenge?0?5U?$CL25CA?5ISOpub@
CONST	SEGMENT
??_C@_0BH@EDOKOFKC@lozenge?0?5U?$CL25CA?5ISOpub@ DB 'lozenge, U+25CA ISOp'
	DB	'ub', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03DJBAHFDJ@loz@
CONST	SEGMENT
??_C@_03DJBAHFDJ@loz@ DB 'loz', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OPBENGIH@right?9pointing?5angle?5bracket?5?$DN?5@
CONST	SEGMENT
??_C@_0DD@OPBENGIH@right?9pointing?5angle?5bracket?5?$DN?5@ DB 'right-poi'
	DB	'nting angle bracket = ket, U+232A ISOtech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FBKADAGB@rang@
CONST	SEGMENT
??_C@_04FBKADAGB@rang@ DB 'rang', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@PHLLJIFD@left?9pointing?5angle?5bracket?5?$DN?5b@
CONST	SEGMENT
??_C@_0DC@PHLLJIFD@left?9pointing?5angle?5bracket?5?$DN?5b@ DB 'left-poin'
	DB	'ting angle bracket = bra, U+2329 ISOtech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CNFHBOON@right?5floor?0?5U?$CL230B?5ISOamsc@
CONST	SEGMENT
??_C@_0BM@CNFHBOON@right?5floor?0?5U?$CL230B?5ISOamsc@ DB 'right floor, U'
	DB	'+230B ISOamsc', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06KGMMOHLE@rfloor@
CONST	SEGMENT
??_C@_06KGMMOHLE@rfloor@ DB 'rfloor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MFJOBEGJ@left?5floor?5?$DN?5apl?5downstile?0?5U?$CL2@
CONST	SEGMENT
??_C@_0CL@MFJOBEGJ@left?5floor?5?$DN?5apl?5downstile?0?5U?$CL2@ DB 'left '
	DB	'floor = apl downstile, U+230A ISOamsc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JBCNAACH@lfloor@
CONST	SEGMENT
??_C@_06JBCNAACH@lfloor@ DB 'lfloor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BHDCDMKC@right?5ceiling?0?5U?$CL2309?5ISOamsc@
CONST	SEGMENT
??_C@_0BO@BHDCDMKC@right?5ceiling?0?5U?$CL2309?5ISOamsc@ DB 'right ceilin'
	DB	'g, U+2309 ISOamsc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FEPDCMDO@rceil@
CONST	SEGMENT
??_C@_05FEPDCMDO@rceil@ DB 'rceil', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JGNLAJJH@left?5ceiling?5?$DN?5apl?5upstile?0?5U?$CL2@
CONST	SEGMENT
??_C@_0CL@JGNLAJJH@left?5ceiling?5?$DN?5apl?5upstile?0?5U?$CL2@ DB 'left '
	DB	'ceiling = apl upstile, U+2308 ISOamsc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GNCPEPNF@lceil@
CONST	SEGMENT
??_C@_05GNCPEPNF@lceil@ DB 'lceil', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IIJHENBC@dot?5operator?0?5U?$CL22C5?5ISOamsb@
CONST	SEGMENT
??_C@_0BN@IIJHENBC@dot?5operator?0?5U?$CL22C5?5ISOamsb@ DB 'dot operator,'
	DB	' U+22C5 ISOamsb', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DLDDMCEG@sdot@
CONST	SEGMENT
??_C@_04DLDDMCEG@sdot@ DB 'sdot', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@FJMFCLO@up?5tack?5?$DN?5orthogonal?5to?5?$DN?5perpe@
CONST	SEGMENT
??_C@_0DI@FJMFCLO@up?5tack?5?$DN?5orthogonal?5to?5?$DN?5perpe@ DB 'up tac'
	DB	'k = orthogonal to = perpendicular, U+22A5 ISOtech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04LELNCKNE@perp@
CONST	SEGMENT
??_C@_04LELNCKNE@perp@ DB 'perp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BNGPDPFL@circled?5times?5?$DN?5vector?5product?0@
CONST	SEGMENT
??_C@_0CP@BNGPDPFL@circled?5times?5?$DN?5vector?5product?0@ DB 'circled t'
	DB	'imes = vector product, U+2297 ISOamsb', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06JILOEKEG@otimes@
CONST	SEGMENT
??_C@_06JILOEKEG@otimes@ DB 'otimes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PJJPJOGF@circled?5plus?5?$DN?5direct?5sum?0?5U?$CL22@
CONST	SEGMENT
??_C@_0CK@PJJPJOGF@circled?5plus?5?$DN?5direct?5sum?0?5U?$CL22@ DB 'circl'
	DB	'ed plus = direct sum, U+2295 ISOamsb', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJJFMLCJ@oplus@
CONST	SEGMENT
??_C@_05GJJFMLCJ@oplus@ DB 'oplus', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@GNKICMCH@superset?5of?5or?5equal?5to?0?5U?$CL2287@
CONST	SEGMENT
??_C@_0CI@GNKICMCH@superset?5of?5or?5equal?5to?0?5U?$CL2287@ DB 'superset'
	DB	' of or equal to, U+2287 ISOtech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JHDFDFOB@supe@
CONST	SEGMENT
??_C@_04JHDFDFOB@supe@ DB 'supe', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@IBKNAAAC@subset?5of?5or?5equal?5to?0?5U?$CL2286?5I@
CONST	SEGMENT
??_C@_0CG@IBKNAAAC@subset?5of?5or?5equal?5to?0?5U?$CL2286?5I@ DB 'subset '
	DB	'of or equal to, U+2286 ISOtech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IIJHECPP@sube@
CONST	SEGMENT
??_C@_04IIJHECPP@sube@ DB 'sube', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PMHNPAEI@not?5a?5subset?5of?0?5U?$CL2284?5ISOamsn@
CONST	SEGMENT
??_C@_0CA@PMHNPAEI@not?5a?5subset?5of?0?5U?$CL2284?5ISOamsn@ DB 'not a su'
	DB	'bset of, U+2284 ISOamsn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDKEGNCC@nsub@
CONST	SEGMENT
??_C@_04GDKEGNCC@nsub@ DB 'nsub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@ICBAIMLO@superset?5of?0?5U?$CL2283?5ISOtech@
CONST	SEGMENT
??_C@_0BM@ICBAIMLO@superset?5of?0?5U?$CL2283?5ISOtech@ DB 'superset of, U'
	DB	'+2283 ISOtech', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JKNHIPAJ@subset?5of?0?5U?$CL2282?5ISOtech@
CONST	SEGMENT
??_C@_0BK@JKNHIPAJ@subset?5of?0?5U?$CL2282?5ISOtech@ DB 'subset of, U+228'
	DB	'2 ISOtech', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OOFAGHNB@greater?9than?5or?5equal?5to?0?5U?$CL226@
CONST	SEGMENT
??_C@_0CJ@OOFAGHNB@greater?9than?5or?5equal?5to?0?5U?$CL226@ DB 'greater-'
	DB	'than or equal to, U+2265 ISOtech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02FFKMGEKK@ge@
CONST	SEGMENT
??_C@_02FFKMGEKK@ge@ DB 'ge', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EDHLKJHI@less?9than?5or?5equal?5to?0?5U?$CL2264?5I@
CONST	SEGMENT
??_C@_0CG@EDHLKJHI@less?9than?5or?5equal?5to?0?5U?$CL2264?5I@ DB 'less-th'
	DB	'an or equal to, U+2264 ISOtech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02FJPJILEL@le@
CONST	SEGMENT
??_C@_02FJPJILEL@le@ DB 'le', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MJCNDCCF@identical?5to?0?5U?$CL2261?5ISOtech@
CONST	SEGMENT
??_C@_0BN@MJCNDCCF@identical?5to?0?5U?$CL2261?5ISOtech@ DB 'identical to,'
	DB	' U+2261 ISOtech', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LADEHHLL@equiv@
CONST	SEGMENT
??_C@_05LADEHHLL@equiv@ DB 'equiv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@PJGPJIIG@not?5equal?5to?0?5U?$CL2260?5ISOtech@
CONST	SEGMENT
??_C@_0BN@PJGPJIIG@not?5equal?5to?0?5U?$CL2260?5ISOtech@ DB 'not equal to'
	DB	', U+2260 ISOtech', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FKHNFPCF@ne@
CONST	SEGMENT
??_C@_02FKHNFPCF@ne@ DB 'ne', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@ELDFLNNK@almost?5equal?5to?5?$DN?5asymptotic?5to@
CONST	SEGMENT
??_C@_0DA@ELDFLNNK@almost?5equal?5to?5?$DN?5asymptotic?5to@ DB 'almost eq'
	DB	'ual to = asymptotic to, U+2248 ISOamsr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05EKOANGCP@asymp@
CONST	SEGMENT
??_C@_05EKOANGCP@asymp@ DB 'asymp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JKKBMPFH@approximately?5equal?5to?0?5U?$CL2245?5@
CONST	SEGMENT
??_C@_0CH@JKKBMPFH@approximately?5equal?5to?0?5U?$CL2245?5@ DB 'approxima'
	DB	'tely equal to, U+2245 ISOtech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OMPPPJGA@cong@
CONST	SEGMENT
??_C@_04OMPPPJGA@cong@ DB 'cong', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@DFMGNFEL@tilde?5operator?5?$DN?5varies?5with?5?$DN?5@
CONST	SEGMENT
??_C@_0DK@DFMGNFEL@tilde?5operator?5?$DN?5varies?5with?5?$DN?5@ DB 'tilde'
	DB	' operator = varies with = similar to, U+223C ISOtech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03DAGEMKNE@sim@
CONST	SEGMENT
??_C@_03DAGEMKNE@sim@ DB 'sim', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MEMCAFFC@therefore?0?5U?$CL2234?5ISOtech@
CONST	SEGMENT
??_C@_0BK@MEMCAFFC@therefore?0?5U?$CL2234?5ISOtech@ DB 'therefore, U+2234'
	DB	' ISOtech', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLMBDDJI@there4@
CONST	SEGMENT
??_C@_06PLMBDDJI@there4@ DB 'there4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DAPJHJHO@integral?0?5U?$CL222B?5ISOtech@
CONST	SEGMENT
??_C@_0BJ@DAPJHJHO@integral?0?5U?$CL222B?5ISOtech@ DB 'integral, U+222B I'
	DB	'SOtech', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int@
CONST	SEGMENT
??_C@_03JBIPMCLC@int@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JDEPIPG@union?5?$DN?5cup?0?5U?$CL222A?5ISOtech@
CONST	SEGMENT
??_C@_0BM@JDEPIPG@union?5?$DN?5cup?0?5U?$CL222A?5ISOtech@ DB 'union = cup'
	DB	', U+222A ISOtech', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKCNKLED@cup@
CONST	SEGMENT
??_C@_03IKCNKLED@cup@ DB 'cup', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JBIOOGBO@intersection?5?$DN?5cap?0?5U?$CL2229?5ISOt@
CONST	SEGMENT
??_C@_0CD@JBIOOGBO@intersection?5?$DN?5cap?0?5U?$CL2229?5ISOt@ DB 'inters'
	DB	'ection = cap, U+2229 ISOtech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBACKAOP@cap@
CONST	SEGMENT
??_C@_03JBACKAOP@cap@ DB 'cap', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@FLAIEBBA@logical?5or?5?$DN?5vee?0?5U?$CL2228?5ISOtec@
CONST	SEGMENT
??_C@_0CB@FLAIEBBA@logical?5or?5?$DN?5vee?0?5U?$CL2228?5ISOtec@ DB 'logic'
	DB	'al or = vee, U+2228 ISOtech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02FODMLBIE@or@
CONST	SEGMENT
??_C@_02FODMLBIE@or@ DB 'or', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@NKBACHGA@logical?5and?5?$DN?5wedge?0?5U?$CL2227?5ISO@
CONST	SEGMENT
??_C@_0CE@NKBACHGA@logical?5and?5?$DN?5wedge?0?5U?$CL2227?5ISO@ DB 'logic'
	DB	'al and = wedge, U+2227 ISOtech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03BOPJPIAM@and@
CONST	SEGMENT
??_C@_03BOPJPIAM@and@ DB 'and', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GBCFPCNE@angle?0?5U?$CL2220?5ISOamso@
CONST	SEGMENT
??_C@_0BG@GBCFPCNE@angle?0?5U?$CL2220?5ISOamso@ DB 'angle, U+2220 ISOamso'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03DFNEKLMP@ang@
CONST	SEGMENT
??_C@_03DFNEKLMP@ang@ DB 'ang', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MNMMNFFJ@infinity?0?5U?$CL221E?5ISOtech@
CONST	SEGMENT
??_C@_0BJ@MNMMNFFJ@infinity?0?5U?$CL221E?5ISOtech@ DB 'infinity, U+221E I'
	DB	'SOtech', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05OFPBNHLL@infin@
CONST	SEGMENT
??_C@_05OFPBNHLL@infin@ DB 'infin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BMLNCKCC@proportional?5to?0?5U?$CL221D?5ISOtech@
CONST	SEGMENT
??_C@_0CA@BMLNCKCC@proportional?5to?0?5U?$CL221D?5ISOtech@ DB 'proportion'
	DB	'al to, U+221D ISOtech', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GNINHFNB@prop@
CONST	SEGMENT
??_C@_04GNINHFNB@prop@ DB 'prop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@ILNDCHNK@square?5root?5?$DN?5radical?5sign?0?5U?$CL2@
CONST	SEGMENT
??_C@_0CL@ILNDCHNK@square?5root?5?$DN?5radical?5sign?0?5U?$CL2@ DB 'squar'
	DB	'e root = radical sign, U+221A ISOtech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05BBBHAEPE@radic@
CONST	SEGMENT
??_C@_05BBBHAEPE@radic@ DB 'radic', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CNKJAFM@asterisk?5operator?0?5U?$CL2217?5ISOte@
CONST	SEGMENT
??_C@_0CC@CNKJAFM@asterisk?5operator?0?5U?$CL2217?5ISOte@ DB 'asterisk op'
	DB	'erator, U+2217 ISOtech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CKLHNNN@lowast@
CONST	SEGMENT
??_C@_06CKLHNNN@lowast@ DB 'lowast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FJCONNGD@minus?5sign?0?5U?$CL2212?5ISOtech@
CONST	SEGMENT
??_C@_0BL@FJCONNGD@minus?5sign?0?5U?$CL2212?5ISOtech@ DB 'minus sign, U+2'
	DB	'212 ISOtech', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODKEFHFK@minus@
CONST	SEGMENT
??_C@_05ODKEFHFK@minus@ DB 'minus', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MLFCAEFK@n?9ary?5summation?0?5U?$CL2211?5ISOamsb@
CONST	SEGMENT
??_C@_0CA@MLFCAEFK@n?9ary?5summation?0?5U?$CL2211?5ISOamsb@ DB 'n-ary sum'
	DB	'mation, U+2211 ISOamsb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFFIJAMA@sum@
CONST	SEGMENT
??_C@_03CFFIJAMA@sum@ DB 'sum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@JGMMGEDP@n?9ary?5product?5?$DN?5product?5sign?0?5U@
CONST	SEGMENT
??_C@_0CN@JGMMGEDP@n?9ary?5product?5?$DN?5product?5sign?0?5U@ DB 'n-ary p'
	DB	'roduct = product sign, U+220F ISOamsb', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDCDKCIE@prod@
CONST	SEGMENT
??_C@_04EDCDKCIE@prod@ DB 'prod', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@BGLAPDGA@contains?5as?5member?0?5U?$CL220B?5ISOt@
CONST	SEGMENT
??_C@_0CD@BGLAPDGA@contains?5as?5member?0?5U?$CL220B?5ISOt@ DB 'contains '
	DB	'as member, U+220B ISOtech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PGMIBACJ@ni@
CONST	SEGMENT
??_C@_02PGMIBACJ@ni@ DB 'ni', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DDLOCPFN@not?5an?5element?5of?0?5U?$CL2209?5ISOte@
CONST	SEGMENT
??_C@_0CC@DDLOCPFN@not?5an?5element?5of?0?5U?$CL2209?5ISOte@ DB 'not an e'
	DB	'lement of, U+2209 ISOtech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DPIEFBKH@notin@
CONST	SEGMENT
??_C@_05DPIEFBKH@notin@ DB 'notin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GDBOMBIM@element?5of?0?5U?$CL2208?5ISOtech@
CONST	SEGMENT
??_C@_0BL@GDBOMBIM@element?5of?0?5U?$CL2208?5ISOtech@ DB 'element of, U+2'
	DB	'208 ISOtech', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIANKECK@isin@
CONST	SEGMENT
??_C@_04GIANKECK@isin@ DB 'isin', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GCEKGKCK@nabla?5?$DN?5backward?5difference?0?5U?$CL@
CONST	SEGMENT
??_C@_0CM@GCEKGKCK@nabla?5?$DN?5backward?5difference?0?5U?$CL@ DB 'nabla '
	DB	'= backward difference, U+2207 ISOtech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HEJFDJKB@nabla@
CONST	SEGMENT
??_C@_05HEJFDJKB@nabla@ DB 'nabla', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LKCPIGBO@empty?5set?5?$DN?5null?5set?5?$DN?5diameter@
CONST	SEGMENT
??_C@_0DA@LKCPIGBO@empty?5set?5?$DN?5null?5set?5?$DN?5diameter@ DB 'empty'
	DB	' set = null set = diameter, U+2205 ISOamso', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBJMNBOG@empty@
CONST	SEGMENT
??_C@_05LBJMNBOG@empty@ DB 'empty', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EAFHKNPG@there?5exists?0?5U?$CL2203?5ISOtech@
CONST	SEGMENT
??_C@_0BN@EAFHKNPG@there?5exists?0?5U?$CL2203?5ISOtech@ DB 'there exists,'
	DB	' U+2203 ISOtech', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IEGMLJMJ@exist@
CONST	SEGMENT
??_C@_05IEGMLJMJ@exist@ DB 'exist', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GGOIFMBL@partial?5differential?0?5U?$CL2202?5IS@
CONST	SEGMENT
??_C@_0CF@GGOIFMBL@partial?5differential?0?5U?$CL2202?5IS@ DB 'partial di'
	DB	'fferential, U+2202 ISOtech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FPLDHIIH@part@
CONST	SEGMENT
??_C@_04FPLDHIIH@part@ DB 'part', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NOOLIOLI@for?5all?0?5U?$CL2200?5ISOtech@
CONST	SEGMENT
??_C@_0BI@NOOLIOLI@for?5all?0?5U?$CL2200?5ISOtech@ DB 'for all, U+2200 IS'
	DB	'Otech', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06PLFKNBPH@forall@
CONST	SEGMENT
??_C@_06PLFKNBPH@forall@ DB 'forall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IFCBBNJJ@left?5right?5double?5arrow?0?5U?$CL21D4@
CONST	SEGMENT
??_C@_0CI@IFCBBNJJ@left?5right?5double?5arrow?0?5U?$CL21D4@ DB 'left righ'
	DB	't double arrow, U+21D4 ISOamsa', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJELKMHM@hArr@
CONST	SEGMENT
??_C@_04PJELKMHM@hArr@ DB 'hArr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GBOLFAFE@downwards?5double?5arrow?0?5U?$CL21D3?5@
CONST	SEGMENT
??_C@_0CH@GBOLFAFE@downwards?5double?5arrow?0?5U?$CL21D3?5@ DB 'downwards'
	DB	' double arrow, U+21D3 ISOamsa', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DMLLEBHN@dArr@
CONST	SEGMENT
??_C@_04DMLLEBHN@dArr@ DB 'dArr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IKAGJDHN@rightwards?5double?5arrow?0?5U?$CL21D2@
CONST	SEGMENT
??_C@_0CI@IKAGJDHN@rightwards?5double?5arrow?0?5U?$CL21D2@ DB 'rightwards'
	DB	' double arrow, U+21D2 ISOtech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NDBLCDFP@rArr@
CONST	SEGMENT
??_C@_04NDBLCDFP@rArr@ DB 'rArr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KBBKONBL@upwards?5double?5arrow?0?5U?$CL21D1?5IS@
CONST	SEGMENT
??_C@_0CF@KBBKONBL@upwards?5double?5arrow?0?5U?$CL21D1?5IS@ DB 'upwards d'
	DB	'ouble arrow, U+21D1 ISOamsa', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GBDLPPEP@uArr@
CONST	SEGMENT
??_C@_04GBDLPPEP@uArr@ DB 'uArr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MGOLKEFA@leftwards?5double?5arrow?0?5U?$CL21D0?5@
CONST	SEGMENT
??_C@_0CH@MGOLKEFA@leftwards?5double?5arrow?0?5U?$CL21D0?5@ DB 'leftwards'
	DB	' double arrow, U+21D0 ISOtech', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MMLAKLM@lArr@
CONST	SEGMENT
??_C@_04MMLAKLM@lArr@ DB 'lArr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@KKIJJMBC@downwards?5arrow?5with?5corner?5lef@
CONST	SEGMENT
??_C@_0EE@KKIJJMBC@downwards?5arrow?5with?5corner?5lef@ DB 'downwards arr'
	DB	'ow with corner leftwards = carriage return, U+21B5 NEW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05IKKJKHCL@crarr@
CONST	SEGMENT
??_C@_05IKKJKHCL@crarr@ DB 'crarr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IHAAEEFA@left?5right?5arrow?0?5U?$CL2194?5ISOams@
CONST	SEGMENT
??_C@_0CB@IHAAEEFA@left?5right?5arrow?0?5U?$CL2194?5ISOams@ DB 'left righ'
	DB	't arrow, U+2194 ISOamsa', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FJHJADEC@harr@
CONST	SEGMENT
??_C@_04FJHJADEC@harr@ DB 'harr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DOIMJHPM@downwards?5arrow?0?5U?$CL2193?5ISOnum@
CONST	SEGMENT
??_C@_0BP@DOIMJHPM@downwards?5arrow?0?5U?$CL2193?5ISOnum@ DB 'downwards a'
	DB	'rrow, U+2193 ISOnum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JMIJOOED@darr@
CONST	SEGMENT
??_C@_04JMIJOOED@darr@ DB 'darr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IGGHOOCM@rightwards?5arrow?0?5U?$CL2192?5ISOnum@
CONST	SEGMENT
??_C@_0CA@IGGHOOCM@rightwards?5arrow?0?5U?$CL2192?5ISOnum@ DB 'rightwards'
	DB	' arrow, U+2192 ISOnum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDCJIMGB@rarr@
CONST	SEGMENT
??_C@_04HDCJIMGB@rarr@ DB 'rarr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OACCONEB@upwards?5arrow?0?5U?$CL2191?5ISOnum@
CONST	SEGMENT
??_C@_0BN@OACCONEB@upwards?5arrow?0?5U?$CL2191?5ISOnum@ DB 'upwards arrow'
	DB	', U+2191 ISOnum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MBAJFAHB@uarr@
CONST	SEGMENT
??_C@_04MBAJFAHB@uarr@ DB 'uarr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MANNKCID@leftwards?5arrow?0?5U?$CL2190?5ISOnum@
CONST	SEGMENT
??_C@_0BP@MANNKCID@leftwards?5arrow?0?5U?$CL2190?5ISOnum@ DB 'leftwards a'
	DB	'rrow, U+2190 ISOnum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KMPJKFIC@larr@
CONST	SEGMENT
??_C@_04KMPJKFIC@larr@ DB 'larr', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FEFKAOCF@alef?5symbol?5?$DN?5first?5transfinite@
CONST	SEGMENT
??_C@_0DF@FEFKAOCF@alef?5symbol?5?$DN?5first?5transfinite@ DB 'alef symbo'
	DB	'l = first transfinite cardinal, U+2135 NEW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HGDIPDGB@alefsym@
CONST	SEGMENT
??_C@_07HGDIPDGB@alefsym@ DB 'alefsym', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FGOALMKH@trade?5mark?5sign?0?5U?$CL2122?5ISOnum@
CONST	SEGMENT
??_C@_0BP@FGOALMKH@trade?5mark?5sign?0?5U?$CL2122?5ISOnum@ DB 'trade mark'
	DB	' sign, U+2122 ISOnum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJFCMOFM@trade@
CONST	SEGMENT
??_C@_05IJFCMOFM@trade@ DB 'trade', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@HIEIFFHC@blackletter?5capital?5R?5?$DN?5real?5pa@
CONST	SEGMENT
??_C@_0DJ@HIEIFFHC@blackletter?5capital?5R?5?$DN?5real?5pa@ DB 'blacklett'
	DB	'er capital R = real part symbol, U+211C ISOamso', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DGGKDJMA@real@
CONST	SEGMENT
??_C@_04DGGKDJMA@real@ DB 'real', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@GALPCJE@script?5capital?5P?5?$DN?5power?5set?5?$DN?5@
CONST	SEGMENT
??_C@_0DN@GALPCJE@script?5capital?5P?5?$DN?5power?5set?5?$DN?5@ DB 'scrip'
	DB	't capital P = power set = Weierstrass p, U+2118 ISOamso', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDPFIHAI@weierp@
CONST	SEGMENT
??_C@_06PDPFIHAI@weierp@ DB 'weierp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@HDIEDNLH@blackletter?5capital?5I?5?$DN?5imagina@
CONST	SEGMENT
??_C@_0DH@HDIEDNLH@blackletter?5capital?5I?5?$DN?5imagina@ DB 'blacklette'
	DB	'r capital I = imaginary part, U+2111 ISOamso', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGOMGBBD@image@
CONST	SEGMENT
??_C@_05NGOMGBBD@image@ DB 'image', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JOOOHDJA@euro?5sign?0?5U?$CL20AC?5NEW@
CONST	SEGMENT
??_C@_0BG@JOOOHDJA@euro?5sign?0?5U?$CL20AC?5NEW@ DB 'euro sign, U+20AC NE'
	DB	'W', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04IBPOGLCH@euro@
CONST	SEGMENT
??_C@_04IBPOGLCH@euro@ DB 'euro', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ECLANJNI@fraction?5slash?0?5U?$CL2044?5NEW@
CONST	SEGMENT
??_C@_0BL@ECLANJNI@fraction?5slash?0?5U?$CL2044?5NEW@ DB 'fraction slash,'
	DB	' U+2044 NEW', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05POHGDHA@frasl@
CONST	SEGMENT
??_C@_05POHGDHA@frasl@ DB 'frasl', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PIHCOGHN@overline?5?$DN?5spacing?5overscore?0?5U@
CONST	SEGMENT
??_C@_0CJ@PIHCOGHN@overline?5?$DN?5spacing?5overscore?0?5U@ DB 'overline '
	DB	'= spacing overscore, U+203E NEW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05PHLALINO@oline@
CONST	SEGMENT
??_C@_05PHLALINO@oline@ DB 'oline', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@GOMGFHEI@single?5right?9pointing?5angle?5quo@
CONST	SEGMENT
??_C@_0EA@GOMGFHEI@single?5right?9pointing?5angle?5quo@ DB 'single right-'
	DB	'pointing angle quotation mark, U+203A ISO proposed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDFMNKDL@rsaquo@
CONST	SEGMENT
??_C@_06FDFMNKDL@rsaquo@ DB 'rsaquo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@FIMACBKH@single?5left?9pointing?5angle?5quot@
CONST	SEGMENT
??_C@_0DP@FIMACBKH@single?5left?9pointing?5angle?5quot@ DB 'single left-p'
	DB	'ointing angle quotation mark, U+2039 ISO proposed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GELNDNKI@lsaquo@
CONST	SEGMENT
??_C@_06GELNDNKI@lsaquo@ DB 'lsaquo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NOHFAGMO@double?5prime?5?$DN?5seconds?5?$DN?5inches@
CONST	SEGMENT
??_C@_0DA@NOHFAGMO@double?5prime?5?$DN?5seconds?5?$DN?5inches@ DB 'double'
	DB	' prime = seconds = inches, U+2033 ISOtech', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NPAKJKBM@Prime@
CONST	SEGMENT
??_C@_05NPAKJKBM@Prime@ DB 'Prime', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@BOHNNDDJ@prime?5?$DN?5minutes?5?$DN?5feet?0?5U?$CL2032?5@
CONST	SEGMENT
??_C@_0CH@BOHNNDDJ@prime?5?$DN?5minutes?5?$DN?5feet?0?5U?$CL2032?5@ DB 'p'
	DB	'rime = minutes = feet, U+2032 ISOtech', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NIKGJPCK@prime@
CONST	SEGMENT
??_C@_05NIKGJPCK@prime@ DB 'prime', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MOFLNGGL@per?5mille?5sign?0?5U?$CL2030?5ISOtech@
CONST	SEGMENT
??_C@_0BP@MOFLNGGL@per?5mille?5sign?0?5U?$CL2030?5ISOtech@ DB 'per mille '
	DB	'sign, U+2030 ISOtech', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BCNCCGDG@permil@
CONST	SEGMENT
??_C@_06BCNCCGDG@permil@ DB 'permil', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@IFMGDAHK@horizontal?5ellipsis?5?$DN?5three?5dot@
CONST	SEGMENT
??_C@_0DG@IFMGDAHK@horizontal?5ellipsis?5?$DN?5three?5dot@ DB 'horizontal'
	DB	' ellipsis = three dot leader, U+2026 ISOpub', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MHPIOHEE@hellip@
CONST	SEGMENT
??_C@_06MHPIOHEE@hellip@ DB 'hellip', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DGNFAKNB@bullet?5?$DN?5black?5small?5circle?0?5U?$CL@
CONST	SEGMENT
??_C@_0CL@DGNFAKNB@bullet?5?$DN?5black?5small?5circle?0?5U?$CL@ DB 'bulle'
	DB	't = black small circle, U+2022 ISOpub', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OELGKIO@bull@
CONST	SEGMENT
??_C@_04OELGKIO@bull@ DB 'bull', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EMJEPPHC@double?5dagger?0?5U?$CL2021?5ISOpub@
CONST	SEGMENT
??_C@_0BN@EMJEPPHC@double?5dagger?0?5U?$CL2021?5ISOpub@ DB 'double dagger'
	DB	', U+2021 ISOpub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPIJNLEM@Dagger@
CONST	SEGMENT
??_C@_06MPIJNLEM@Dagger@ DB 'Dagger', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KCAEGFLE@dagger?0?5U?$CL2020?5ISOpub@
CONST	SEGMENT
??_C@_0BG@KCAEGFLE@dagger?0?5U?$CL2020?5ISOpub@ DB 'dagger, U+2020 ISOpub'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06DEOCNA@dagger@
CONST	SEGMENT
??_C@_06DEOCNA@dagger@ DB 'dagger', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JHNLBCGB@double?5low?99?5quotation?5mark?0?5U?$CL@
CONST	SEGMENT
??_C@_0CI@JHNLBCGB@double?5low?99?5quotation?5mark?0?5U?$CL@ DB 'double l'
	DB	'ow-9 quotation mark, U+201E NEW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EGPDLKK@bdquo@
CONST	SEGMENT
??_C@_05EGPDLKK@bdquo@ DB 'bdquo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@ECIPNNCJ@right?5double?5quotation?5mark?0?5U?$CL@
CONST	SEGMENT
??_C@_0CL@ECIPNNCJ@right?5double?5quotation?5mark?0?5U?$CL@ DB 'right dou'
	DB	'ble quotation mark, U+201D ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HLJDJDB@rdquo@
CONST	SEGMENT
??_C@_05HLJDJDB@rdquo@ DB 'rdquo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@DIJLOOKF@left?5double?5quotation?5mark?0?5U?$CL2@
CONST	SEGMENT
??_C@_0CK@DIJLOOKF@left?5double?5quotation?5mark?0?5U?$CL2@ DB 'left doub'
	DB	'le quotation mark, U+201C ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DOGFFKNK@ldquo@
CONST	SEGMENT
??_C@_05DOGFFKNK@ldquo@ DB 'ldquo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NPEPNHFF@single?5low?99?5quotation?5mark?0?5U?$CL@
CONST	SEGMENT
??_C@_0CI@NPEPNHFF@single?5low?99?5quotation?5mark?0?5U?$CL@ DB 'single l'
	DB	'ow-9 quotation mark, U+201A NEW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EDKFBPDE@sbquo@
CONST	SEGMENT
??_C@_05EDKFBPDE@sbquo@ DB 'sbquo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GEEKPFIM@right?5single?5quotation?5mark?0?5U?$CL@
CONST	SEGMENT
??_C@_0CL@GEEKPFIM@right?5single?5quotation?5mark?0?5U?$CL@ DB 'right sin'
	DB	'gle quotation mark, U+2019 ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NFHJHCKD@rsquo@
CONST	SEGMENT
??_C@_05NFHJHCKD@rsquo@ DB 'rsquo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GNEELPIK@left?5single?5quotation?5mark?0?5U?$CL2@
CONST	SEGMENT
??_C@_0CK@GNEELPIK@left?5single?5quotation?5mark?0?5U?$CL2@ DB 'left sing'
	DB	'le quotation mark, U+2018 ISOnum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OMKFBBEI@lsquo@
CONST	SEGMENT
??_C@_05OMKFBBEI@lsquo@ DB 'lsquo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KANBCIDP@em?5dash?0?5U?$CL2014?5ISOpub@
CONST	SEGMENT
??_C@_0BH@KANBCIDP@em?5dash?0?5U?$CL2014?5ISOpub@ DB 'em dash, U+2014 ISO'
	DB	'pub', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05OOOMDEJF@mdash@
CONST	SEGMENT
??_C@_05OOOMDEJF@mdash@ DB 'mdash', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PNMIOILG@en?5dash?0?5U?$CL2013?5ISOpub@
CONST	SEGMENT
??_C@_0BH@PNMIOILG@en?5dash?0?5U?$CL2013?5ISOpub@ DB 'en dash, U+2013 ISO'
	DB	'pub', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIHIEGDL@ndash@
CONST	SEGMENT
??_C@_05GIHIEGDL@ndash@ DB 'ndash', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@CAGBGDGP@right?9to?9left?5mark?0?5U?$CL200F?5NEW?5@
CONST	SEGMENT
??_C@_0CI@CAGBGDGP@right?9to?9left?5mark?0?5U?$CL200F?5NEW?5@ DB 'right-t'
	DB	'o-left mark, U+200F NEW RFC 2070', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03IOBDGPFK@rlm@
CONST	SEGMENT
??_C@_03IOBDGPFK@rlm@ DB 'rlm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JMDAIFJP@left?9to?9right?5mark?0?5U?$CL200E?5NEW?5@
CONST	SEGMENT
??_C@_0CI@JMDAIFJP@left?9to?9right?5mark?0?5U?$CL200E?5NEW?5@ DB 'left-to'
	DB	'-right mark, U+200E NEW RFC 2070', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03CIGNMBIM@lrm@
CONST	SEGMENT
??_C@_03CIGNMBIM@lrm@ DB 'lrm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HBJLDPCB@zero?5width?5joiner?0?5U?$CL200D?5NEW?5R@
CONST	SEGMENT
??_C@_0CH@HBJLDPCB@zero?5width?5joiner?0?5U?$CL200D?5NEW?5R@ DB 'zero wid'
	DB	'th joiner, U+200D NEW RFC 2070', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03BEJFJNOD@zwj@
CONST	SEGMENT
??_C@_03BEJFJNOD@zwj@ DB 'zwj', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DLBANCKG@zero?5width?5non?9joiner?0?5U?$CL200C?5N@
CONST	SEGMENT
??_C@_0CL@DLBANCKG@zero?5width?5non?9joiner?0?5U?$CL200C?5N@ DB 'zero wid'
	DB	'th non-joiner, U+200C NEW RFC 2070', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBAMANKO@zwnj@
CONST	SEGMENT
??_C@_04KBAMANKO@zwnj@ DB 'zwnj', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BMAGNFEE@thin?5space?0?5U?$CL2009?5ISOpub@
CONST	SEGMENT
??_C@_0BK@BMAGNFEE@thin?5space?0?5U?$CL2009?5ISOpub@ DB 'thin space, U+20'
	DB	'09 ISOpub', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06KIEAGDHN@thinsp@
CONST	SEGMENT
??_C@_06KIEAGDHN@thinsp@ DB 'thinsp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KECKOMLC@em?5space?0?5U?$CL2003?5ISOpub@
CONST	SEGMENT
??_C@_0BI@KECKOMLC@em?5space?0?5U?$CL2003?5ISOpub@ DB 'em space, U+2003 I'
	DB	'SOpub', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04NIMLHAPO@emsp@
CONST	SEGMENT
??_C@_04NIMLHAPO@emsp@ DB 'emsp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MFLEMBMM@en?5space?0?5U?$CL2002?5ISOpub@
CONST	SEGMENT
??_C@_0BI@MFLEMBMM@en?5space?0?5U?$CL2002?5ISOpub@ DB 'en space, U+2002 I'
	DB	'SOpub', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04MKHONPBA@ensp@
CONST	SEGMENT
??_C@_04MKHONPBA@ensp@ DB 'ensp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BEPNCOE@greek?5pi?5symbol?0?5U?$CL03D6?5ISOgrk3@
CONST	SEGMENT
??_C@_0CA@BEPNCOE@greek?5pi?5symbol?0?5U?$CL03D6?5ISOgrk3@ DB 'greek pi s'
	DB	'ymbol, U+03D6 ISOgrk3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILOHKOKA@piv@
CONST	SEGMENT
??_C@_03ILOHKOKA@piv@ DB 'piv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EJFICJGP@greek?5upsilon?5with?5hook?5symbol?0@
CONST	SEGMENT
??_C@_0CL@EJFICJGP@greek?5upsilon?5with?5hook?5symbol?0@ DB 'greek upsilo'
	DB	'n with hook symbol, U+03D2 NEW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPKIDMJD@upsih@
CONST	SEGMENT
??_C@_05HPKIDMJD@upsih@ DB 'upsih', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BLIOHCJH@greek?5small?5letter?5theta?5symbol@
CONST	SEGMENT
??_C@_0CM@BLIOHCJH@greek?5small?5letter?5theta?5symbol@ DB 'greek small l'
	DB	'etter theta symbol, U+03D1 NEW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KICBPJKJ@thetasym@
CONST	SEGMENT
??_C@_08KICBPJKJ@thetasym@ DB 'thetasym', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NIEIIOKC@greek?5small?5letter?5omega?0?5U?$CL03C@
CONST	SEGMENT
??_C@_0CJ@NIEIIOKC@greek?5small?5letter?5omega?0?5U?$CL03C@ DB 'greek sma'
	DB	'll letter omega, U+03C9 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLLLNAFN@omega@
CONST	SEGMENT
??_C@_05OLLLNAFN@omega@ DB 'omega', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@CAAILPN@greek?5small?5letter?5psi?0?5U?$CL03C8?5@
CONST	SEGMENT
??_C@_0CH@CAAILPN@greek?5small?5letter?5psi?0?5U?$CL03C8?5@ DB 'greek sma'
	DB	'll letter psi, U+03C8 ISOgrk3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FHAMIGJI@psi@
CONST	SEGMENT
??_C@_03FHAMIGJI@psi@ DB 'psi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FNBJGLJ@greek?5small?5letter?5chi?0?5U?$CL03C7?5@
CONST	SEGMENT
??_C@_0CH@FNBJGLJ@greek?5small?5letter?5chi?0?5U?$CL03C7?5@ DB 'greek sma'
	DB	'll letter chi, U+03C7 ISOgrk3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FNDDCHI@chi@
CONST	SEGMENT
??_C@_03FNDDCHI@chi@ DB 'chi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KFHMBLGI@greek?5small?5letter?5phi?0?5U?$CL03C6?5@
CONST	SEGMENT
??_C@_0CH@KFHMBLGI@greek?5small?5letter?5phi?0?5U?$CL03C6?5@ DB 'greek sm'
	DB	'all letter phi, U+03C6 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03EHHPMKAJ@phi@
CONST	SEGMENT
??_C@_03EHHPMKAJ@phi@ DB 'phi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IFBHJODJ@greek?5small?5letter?5upsilon?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CL@IFBHJODJ@greek?5small?5letter?5upsilon?0?5U?$CL0@ DB 'greek sma'
	DB	'll letter upsilon, U+03C5 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ECJEIHJF@upsilon@
CONST	SEGMENT
??_C@_07ECJEIHJF@upsilon@ DB 'upsilon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DHNJIMD@greek?5small?5letter?5tau?0?5U?$CL03C4?5@
CONST	SEGMENT
??_C@_0CH@DHNJIMD@greek?5small?5letter?5tau?0?5U?$CL03C4?5@ DB 'greek sma'
	DB	'll letter tau, U+03C4 ISOgrk3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CBLLDLIM@tau@
CONST	SEGMENT
??_C@_03CBLLDLIM@tau@ DB 'tau', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@CGFNIIGJ@greek?5small?5letter?5sigma?0?5U?$CL03C@
CONST	SEGMENT
??_C@_0CJ@CGFNIIGJ@greek?5small?5letter?5sigma?0?5U?$CL03C@ DB 'greek sma'
	DB	'll letter sigma, U+03C3 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNLBPJCA@sigma@
CONST	SEGMENT
??_C@_05MNLBPJCA@sigma@ DB 'sigma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IIMCBNML@greek?5small?5letter?5final?5sigma?0@
CONST	SEGMENT
??_C@_0CP@IIMCBNML@greek?5small?5letter?5final?5sigma?0@ DB 'greek small '
	DB	'letter final sigma, U+03C2 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IAEFNBA@sigmaf@
CONST	SEGMENT
??_C@_06IAEFNBA@sigmaf@ DB 'sigmaf', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@IDBCMKBI@greek?5small?5letter?5rho?0?5U?$CL03C1?5@
CONST	SEGMENT
??_C@_0CH@IDBCMKBI@greek?5small?5letter?5rho?0?5U?$CL03C1?5@ DB 'greek sm'
	DB	'all letter rho, U+03C1 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03LLCMKFAE@rho@
CONST	SEGMENT
??_C@_03LLCMKFAE@rho@ DB 'rho', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KLOCKGKD@greek?5small?5letter?5pi?0?5U?$CL03C0?5I@
CONST	SEGMENT
??_C@_0CG@KLOCKGKD@greek?5small?5letter?5pi?0?5U?$CL03C0?5I@ DB 'greek sm'
	DB	'all letter pi, U+03C0 ISOgrk3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OAHAJOFD@pi@
CONST	SEGMENT
??_C@_02OAHAJOFD@pi@ DB 'pi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GIJCJIME@greek?5small?5letter?5omicron?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CH@GIJCJIME@greek?5small?5letter?5omicron?0?5U?$CL0@ DB 'greek sma'
	DB	'll letter omicron, U+03BF NEW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PBNNEOII@omicron@
CONST	SEGMENT
??_C@_07PBNNEOII@omicron@ DB 'omicron', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HDKNCKDK@greek?5small?5letter?5xi?0?5U?$CL03BE?5I@
CONST	SEGMENT
??_C@_0CG@HDKNCKDK@greek?5small?5letter?5xi?0?5U?$CL03BE?5I@ DB 'greek sm'
	DB	'all letter xi, U+03BE ISOgrk3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOGDMPOL@xi@
CONST	SEGMENT
??_C@_02OOGDMPOL@xi@ DB 'xi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CAKLFEAP@greek?5small?5letter?5nu?0?5U?$CL03BD?5I@
CONST	SEGMENT
??_C@_0CG@CAKLFEAP@greek?5small?5letter?5nu?0?5U?$CL03BD?5I@ DB 'greek sm'
	DB	'all letter nu, U+03BD ISOgrk3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02BALPENHE@nu@
CONST	SEGMENT
??_C@_02BALPENHE@nu@ DB 'nu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GBCBMJNP@greek?5small?5letter?5mu?0?5U?$CL03BC?5I@
CONST	SEGMENT
??_C@_0CG@GBCBMJNP@greek?5small?5letter?5mu?0?5U?$CL03BC?5I@ DB 'greek sm'
	DB	'all letter mu, U+03BC ISOgrk3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02BCPJPDCN@mu@
CONST	SEGMENT
??_C@_02BCPJPDCN@mu@ DB 'mu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@PECPLDML@greek?5small?5letter?5lambda?0?5U?$CL03@
CONST	SEGMENT
??_C@_0CK@PECPLDML@greek?5small?5letter?5lambda?0?5U?$CL03@ DB 'greek sma'
	DB	'll letter lambda, U+03BB ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06COJIGPIB@lambda@
CONST	SEGMENT
??_C@_06COJIGPIB@lambda@ DB 'lambda', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FMCMBLI@greek?5small?5letter?5kappa?0?5U?$CL03B@
CONST	SEGMENT
??_C@_0CJ@FMCMBLI@greek?5small?5letter?5kappa?0?5U?$CL03B@ DB 'greek smal'
	DB	'l letter kappa, U+03BA ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLHEGNBC@kappa@
CONST	SEGMENT
??_C@_05MLHEGNBC@kappa@ DB 'kappa', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@IFKGGLBF@greek?5small?5letter?5iota?0?5U?$CL03B9@
CONST	SEGMENT
??_C@_0CI@IFKGGLBF@greek?5small?5letter?5iota?0?5U?$CL03B9@ DB 'greek sma'
	DB	'll letter iota, U+03B9 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OBKEGAOB@iota@
CONST	SEGMENT
??_C@_04OBKEGAOB@iota@ DB 'iota', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OCPPMBNL@greek?5small?5letter?5theta?0?5U?$CL03B@
CONST	SEGMENT
??_C@_0CJ@OCPPMBNL@greek?5small?5letter?5theta?0?5U?$CL03B@ DB 'greek sma'
	DB	'll letter theta, U+03B8 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FECKLAFM@theta@
CONST	SEGMENT
??_C@_05FECKLAFM@theta@ DB 'theta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@KEKGFBMN@greek?5small?5letter?5eta?0?5U?$CL03B7?5@
CONST	SEGMENT
??_C@_0CH@KEKGFBMN@greek?5small?5letter?5eta?0?5U?$CL03B7?5@ DB 'greek sm'
	DB	'all letter eta, U+03B7 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PNFNLNLI@eta@
CONST	SEGMENT
??_C@_03PNFNLNLI@eta@ DB 'eta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BDECAAKJ@greek?5small?5letter?5zeta?0?5U?$CL03B6@
CONST	SEGMENT
??_C@_0CI@BDECAAKJ@greek?5small?5letter?5zeta?0?5U?$CL03B6@ DB 'greek sma'
	DB	'll letter zeta, U+03B6 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KJFJGNNH@zeta@
CONST	SEGMENT
??_C@_04KJFJGNNH@zeta@ DB 'zeta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DLPCDOME@greek?5small?5letter?5epsilon?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CL@DLPCDOME@greek?5small?5letter?5epsilon?0?5U?$CL0@ DB 'greek sma'
	DB	'll letter epsilon, U+03B5 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOCPLGLO@epsilon@
CONST	SEGMENT
??_C@_07DOCPLGLO@epsilon@ DB 'epsilon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BFJAILD@greek?5small?5letter?5delta?0?5U?$CL03B@
CONST	SEGMENT
??_C@_0CJ@BFJAILD@greek?5small?5letter?5delta?0?5U?$CL03B@ DB 'greek smal'
	DB	'l letter delta, U+03B4 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCGEDJPM@delta@
CONST	SEGMENT
??_C@_05NCGEDJPM@delta@ DB 'delta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GAGCCHKA@greek?5small?5letter?5gamma?0?5U?$CL03B@
CONST	SEGMENT
??_C@_0CJ@GAGCCHKA@greek?5small?5letter?5gamma?0?5U?$CL03B@ DB 'greek sma'
	DB	'll letter gamma, U+03B3 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KDLBCAI@gamma@
CONST	SEGMENT
??_C@_05KDLBCAI@gamma@ DB 'gamma', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HELPLLEJ@greek?5small?5letter?5beta?0?5U?$CL03B2@
CONST	SEGMENT
??_C@_0CI@HELPLLEJ@greek?5small?5letter?5beta?0?5U?$CL03B2@ DB 'greek sma'
	DB	'll letter beta, U+03B2 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJMJLBJE@beta@
CONST	SEGMENT
??_C@_04PJMJLBJE@beta@ DB 'beta', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@NGKKADHM@greek?5small?5letter?5alpha?0?5U?$CL03B@
CONST	SEGMENT
??_C@_0CJ@NGKKADHM@greek?5small?5letter?5alpha?0?5U?$CL03B@ DB 'greek sma'
	DB	'll letter alpha, U+03B1 ISOgrk3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAEKHIAN@alpha@
CONST	SEGMENT
??_C@_05IAEKHIAN@alpha@ DB 'alpha', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@ILDKNODA@greek?5capital?5letter?5omega?0?5U?$CL0@
CONST	SEGMENT
??_C@_0CL@ILDKNODA@greek?5capital?5letter?5omega?0?5U?$CL0@ DB 'greek cap'
	DB	'ital letter omega, U+03A9 ISOgrk3', 00H	; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_snprintf
PUBLIC	___htmlParseContent
PUBLIC	_htmlTagLookup
PUBLIC	_htmlEntityLookup
PUBLIC	_htmlEntityValueLookup
PUBLIC	_htmlIsAutoClosed
PUBLIC	_htmlAutoCloseTag
PUBLIC	_htmlParseEntityRef
PUBLIC	_htmlParseCharRef
PUBLIC	_htmlParseElement
PUBLIC	_htmlNewParserCtxt
PUBLIC	_htmlCreateMemoryParserCtxt
PUBLIC	_htmlParseDocument
PUBLIC	_htmlSAXParseDoc
PUBLIC	_htmlParseDoc
PUBLIC	_htmlSAXParseFile
PUBLIC	_htmlParseFile
PUBLIC	_UTF8ToHtml
PUBLIC	_htmlEncodeEntities
PUBLIC	_htmlIsScriptAttribute
PUBLIC	_htmlHandleOmittedElem
PUBLIC	_htmlCreatePushParserCtxt
PUBLIC	_htmlParseChunk
PUBLIC	_htmlFreeParserCtxt
PUBLIC	_htmlCtxtReset
PUBLIC	_htmlCtxtUseOptions
PUBLIC	_htmlReadDoc
PUBLIC	_htmlReadFile
PUBLIC	_htmlReadMemory
PUBLIC	_htmlReadFd
PUBLIC	_htmlReadIO
PUBLIC	_htmlCtxtReadDoc
PUBLIC	_htmlCtxtReadFile
PUBLIC	_htmlCtxtReadMemory
PUBLIC	_htmlCtxtReadFd
PUBLIC	_htmlCtxtReadIO
PUBLIC	_htmlAttrAllowed
PUBLIC	_htmlElementAllowedHere
PUBLIC	_htmlElementStatusHere
PUBLIC	_htmlNodeStatus
PUBLIC	_htmlInitAutoClose
PUBLIC	_htmlCreateFileParserCtxt
PUBLIC	_htmlNewDoc
PUBLIC	_htmlNewDocNoDtD
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@ ; `string'
PUBLIC	??_C@_0L@KJGBOFMC@HTTP?9EQUIV@			; `string'
PUBLIC	??_C@_07HPFEHCIK@CONTENT@			; `string'
PUBLIC	??_C@_08HFIPAJDM@CHARSET?$DN@			; `string'
PUBLIC	??_C@_0CA@EOJNGAKJ@Char?50x?$CFX?5out?5of?5allowed?5range?6@ ; `string'
PUBLIC	??_C@_0BI@PIALHHKN@Unsupported?5encoding?5?$CFs@ ; `string'
PUBLIC	??_C@_0CE@KHMCMEAC@Bytes?3?50x?$CF02X?50x?$CF02X?50x?$CF02X?50x?$CF@ ; `string'
PUBLIC	??_C@_0P@DAFMJFMB@Bytes?3?50x?$CF02X?6@		; `string'
PUBLIC	??_C@_0DA@ICAIJAPJ@Input?5is?5not?5proper?5UTF?98?0?5indi@ ; `string'
PUBLIC	??_C@_0M@FAJFKCGA@onmousemove@			; `string'
PUBLIC	??_C@_0CM@OHOANBCK@Opening?5and?5ending?5tag?5mismatch@ ; `string'
PUBLIC	??_C@_03PCCJIL@?$CD?$CFu@			; `string'
PUBLIC	??_C@_0CG@CPFGJCJF@couldn?8t?5allocate?5a?5new?5input?5s@ ; `string'
PUBLIC	??_C@_0BK@MJOJINPD@?9?1?1W3C?1?1DTD?5HTML?54?401?1?1EN@ ; `string'
PUBLIC	??_C@_0BH@HNGCOIEH@?9?1?1W3C?1?1DTD?5HTML?54?1?1EN@ ; `string'
PUBLIC	??_C@_0BP@NIBPLFNK@HTML?5document?5creation?5failed?6@ ; `string'
PUBLIC	??_C@_0CG@CIBPFINF@?9?1?1W3C?1?1DTD?5HTML?54?40?5Transition@ ; `string'
PUBLIC	??_C@_0CK@JLEAHDEJ@http?3?1?1www?4w3?4org?1TR?1REC?9html40@ ; `string'
PUBLIC	??_C@_0CC@JIBKNHBD@unexpected?5change?5of?5input?5buff@ ; `string'
PUBLIC	??_C@_0BK@LKGAKEEM@buffer?5allocation?5failed?6@ ; `string'
PUBLIC	??_C@_0BA@CHFIPIAO@growing?5buffer?6@		; `string'
PUBLIC	??_C@_0BN@FCLAMBFC@htmlParseEntityRef?3?5no?5name?6@ ; `string'
PUBLIC	??_C@_0CD@KJDDHCEO@htmlParseEntityRef?3?5expecting?5?8@ ; `string'
PUBLIC	??_C@_0BG@ECEGDLEC@AttValue?3?5?$CC?5expected?6@ ; `string'
PUBLIC	??_C@_0BG@NKOFEMFC@AttValue?3?5?8?5expected?6@	; `string'
PUBLIC	??_C@_0BK@IDNLEFDN@AttValue?3?5no?5value?5found?6@ ; `string'
PUBLIC	??_C@_0BK@PPFHJEEL@Unfinished?5SystemLiteral?6@	; `string'
PUBLIC	??_C@_0BA@HCBHCDID@?5or?5?8?5expected?6@	; `string'
PUBLIC	??_C@_0BJ@CGBDHPF@Unfinished?5PubidLiteral?6@	; `string'
PUBLIC	??_C@_0BO@CNBHKMED@PubidLiteral?5?$CC?5or?5?8?5expected?6@ ; `string'
PUBLIC	??_C@_0BN@HLEPILFB@Element?5?$CFs?5embeds?5close?5tag?6@ ; `string'
PUBLIC	??_C@_0BM@GCKCOLAE@Invalid?5char?5in?5CDATA?50x?$CFX?6@ ; `string'
PUBLIC	??_C@_0BP@CCMMHADN@Space?5required?5after?5?8SYSTEM?8?6@ ; `string'
PUBLIC	??_C@_0CF@LGGPLBBM@htmlParseExternalID?3?5SYSTEM?0?5no@ ; `string'
PUBLIC	??_C@_0BP@EHONNEAJ@Space?5required?5after?5?8PUBLIC?8?6@ ; `string'
PUBLIC	??_C@_0DD@OPLMODNC@htmlParseExternalID?3?5PUBLIC?0?5no@ ; `string'
PUBLIC	??_C@_0BP@KBNJPEOK@ParsePI?3?5PI?5?$CFs?5space?5expected?6@ ; `string'
PUBLIC	??_C@_0BO@OGPJFKEP@ParsePI?3?5PI?5?$CFs?5never?5end?5?4?4?4?6@ ; `string'
PUBLIC	??_C@_0BM@EHACIEGC@PI?5is?5not?5started?5correctly@ ; `string'
PUBLIC	??_C@_0BH@HKBCFNGN@growing?5buffer?5failed?6@	; `string'
PUBLIC	??_C@_0CD@MHPLKFMN@Comment?5not?5terminated?5?6?$DM?$CB?9?9?$CF?45@ ; `string'
PUBLIC	??_C@_0CB@DPLLMGHJ@htmlParseCharRef?3?5context?5error@ ; `string'
PUBLIC	??_C@_0CF@KKILEJJN@htmlParseCharRef?3?5missing?5semic@ ; `string'
PUBLIC	??_C@_0CB@IKIMPOOL@htmlParseCharRef?3?5invalid?5value@ ; `string'
PUBLIC	??_C@_0CM@IDADHLG@htmlParseCharRef?3?5invalid?5xmlCh@ ; `string'
PUBLIC	??_C@_0CK@ENAEKEOD@htmlParseDocTypeDecl?5?3?5no?5DOCTY@ ; `string'
PUBLIC	??_C@_0BP@EFDCAMCC@DOCTYPE?5improperly?5terminated?6@ ; `string'
PUBLIC	??_C@_0BO@BHLKDNI@error?5parsing?5attribute?5name?6@ ; `string'
PUBLIC	??_C@_0CI@JCPDEKHP@htmlCheckEncoding?3?5wrong?5encodi@ ; `string'
PUBLIC	??_C@_0CI@PNKHCAFG@htmlCheckEncoding?3?5unknown?5enco@ ; `string'
PUBLIC	??_C@_0CC@OECAOKB@htmlCheckEncoding?3?5encoder?5erro@ ; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN@				; `string'
PUBLIC	??_C@_0N@LAFFMKKA@Content?9Type@		; `string'
PUBLIC	??_C@_0CC@IMLMDHHB@htmlParseStartTag?3?5context?5erro@ ; `string'
PUBLIC	??_C@_0CJ@FBFDNGDH@htmlParseStartTag?3?5invalid?5elem@ ; `string'
PUBLIC	??_C@_0CJ@LOEJNMOA@htmlParseStartTag?3?5misplaced?5?$DMh@ ; `string'
PUBLIC	??_C@_0CJ@EDPENOJH@htmlParseStartTag?3?5misplaced?5?$DMh@ ; `string'
PUBLIC	??_C@_0CJ@BLFAHHGP@htmlParseStartTag?3?5misplaced?5?$DMb@ ; `string'
PUBLIC	??_C@_0BI@LJKBJNKP@Attribute?5?$CFs?5redefined?6@ ; `string'
PUBLIC	??_C@_0CP@BBOKDADJ@htmlParseStartTag?3?5problem?5pars@ ; `string'
PUBLIC	??_C@_0CB@NNENDCGP@htmlParseEndTag?3?5?8?$DM?1?8?5not?5found@ ; `string'
PUBLIC	??_C@_0BI@FHDFFDFP@End?5tag?5?3?5expected?5?8?$DO?8?6@ ; `string'
PUBLIC	??_C@_0BJ@LENKJKOI@Unexpected?5end?5tag?5?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_01HNPIGOCE@?$CG@				; `string'
PUBLIC	??_C@_07JGKBCNAA@DOCTYPE@			; `string'
PUBLIC	??_C@_0BP@FHNHCCJD@Misplaced?5DOCTYPE?5declaration?6@ ; `string'
PUBLIC	??_C@_0CG@FCFCBOFE@detected?5an?5error?5in?5element?5co@ ; `string'
PUBLIC	??_C@_0CB@EOHEMKHC@htmlParseElement?3?5context?5error@ ; `string'
PUBLIC	??_C@_0BA@NAOEEOLP@Tag?5?$CFs?5invalid?6@	; `string'
PUBLIC	??_C@_0CD@HIMAKCPA@Couldn?8t?5find?5end?5of?5Start?5Tag?5@ ; `string'
PUBLIC	??_C@_0CJ@HLPMKEOA@htmlParseElementInternal?3?5conte@ ; `string'
PUBLIC	??_C@_0CC@IOOHKEGN@htmlParseDocument?3?5context?5erro@ ; `string'
PUBLIC	??_C@_0BD@DKOGENJF@Document?5is?5empty?6@	; `string'
PUBLIC	??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@ ; `string'
PUBLIC	??_C@_0BO@MIDDFDBC@NewParserCtxt?3?5out?5of?5memory?6@ ; `string'
PUBLIC	??_C@_0BJ@FCHADMKI@Unsupported?5encoding?5?$CFs?6@ ; `string'
PUBLIC	??_C@_04HDPHNOLM@?$DL?5?$DO?1@			; `string'
PUBLIC	??_C@_02OOBBLJDN@?$DM?$CG@			; `string'
PUBLIC	??_C@_0CF@KKLECLJD@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5C@ ; `string'
PUBLIC	??_C@_0CD@KNMNDGMA@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5D@ ; `string'
PUBLIC	??_C@_0CH@DIGPKIBA@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5C@ ; `string'
PUBLIC	??_C@_0CC@OPBEPNBE@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5P@ ; `string'
PUBLIC	??_C@_0CL@MKEILABF@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5E@ ; `string'
PUBLIC	??_C@_0CM@CIKPMOBJ@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5E@ ; `string'
PUBLIC	??_C@_0CP@ICHFLFOK@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5A@ ; `string'
PUBLIC	??_C@_0DJ@DADALPJL@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@ ; `string'
PUBLIC	??_C@_0DB@JCLDPCBF@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@ ; `string'
PUBLIC	??_C@_0DC@FBPNGOCN@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@ ; `string'
PUBLIC	??_C@_0BP@LLMIGGGN@htmlParseChunk?3?5context?5error?6@ ; `string'
PUBLIC	??_C@_0P@NFGFPEHN@encoder?5error?6@		; `string'
PUBLIC	??_C@_08JPKHBDLJ@charset?$DN@			; `string'
PUBLIC	??_C@_0P@PCJPAHLM@out?5of?5memory?6@		; `string'
EXTRN	_xmlStrdup:PROC
EXTRN	_xmlStrndup:PROC
EXTRN	_xmlStrcasestr:PROC
EXTRN	_xmlStrcmp:PROC
EXTRN	_xmlStrcasecmp:PROC
EXTRN	_xmlStrncasecmp:PROC
EXTRN	_xmlStrEqual:PROC
EXTRN	_xmlStrlen:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__toupper:PROC
EXTRN	_xmlBufContent:PROC
EXTRN	_xmlBufUse:PROC
EXTRN	_xmlBufShrink:PROC
EXTRN	_xmlDictCreate:PROC
EXTRN	_xmlDictLookup:PROC
EXTRN	_xmlDictOwns:PROC
EXTRN	_xmlCreateIntSubset:PROC
EXTRN	_xmlGetIntSubset:PROC
EXTRN	_xmlFreeDoc:PROC
EXTRN	_xmlGetLastChild:PROC
EXTRN	_xmlNodeIsText:PROC
EXTRN	_xmlHashFree:PROC
EXTRN	_xmlHashDefaultDeallocator:PROC
EXTRN	_xmlParserValidityError:PROC
EXTRN	_xmlParserValidityWarning:PROC
EXTRN	___xmlRaiseError:PROC
EXTRN	_xmlFindCharEncodingHandler:PROC
EXTRN	_xmlParseCharEncoding:PROC
EXTRN	_xmlDetectCharEncoding:PROC
EXTRN	_xmlAllocParserInputBuffer:PROC
EXTRN	_xmlParserInputBufferCreateFd:PROC
EXTRN	_xmlParserInputBufferCreateMem:PROC
EXTRN	_xmlParserInputBufferCreateIO:PROC
EXTRN	_xmlParserInputBufferPush:PROC
EXTRN	_xmlFreeParserInputBuffer:PROC
EXTRN	_xmlParserGetDirectory:PROC
EXTRN	_xmlInitParser:PROC
EXTRN	_xmlParserInputGrow:PROC
EXTRN	_xmlNewParserCtxt:PROC
EXTRN	_xmlFreeParserCtxt:PROC
EXTRN	_xmlNewIOInputStream:PROC
EXTRN	_xmlInitNodeInfoSeq:PROC
EXTRN	_xmlParserAddNodeInfo:PROC
EXTRN	_xmlLoadExternalEntity:PROC
EXTRN	_xmlSAX2IgnorableWhitespace:PROC
EXTRN	_htmlDefaultSAXHandlerInit:PROC
EXTRN	___htmlDefaultSAXHandler:PROC
EXTRN	___xmlDefaultSAXHandler:PROC
EXTRN	___xmlDefaultSAXLocator:PROC
EXTRN	___xmlKeepBlanksDefaultValue:PROC
EXTRN	___xmlLineNumbersDefaultValue:PROC
EXTRN	_xmlCharInRange:PROC
EXTRN	_xmlCreateMemoryParserCtxt:PROC
EXTRN	_xmlSwitchEncoding:PROC
EXTRN	_xmlSwitchToEncoding:PROC
EXTRN	_xmlNewStringInputStream:PROC
EXTRN	_xmlPopInput:PROC
EXTRN	_xmlFreeInputStream:PROC
EXTRN	_xmlNewInputStream:PROC
EXTRN	_nodePop:PROC
EXTRN	_inputPush:PROC
EXTRN	_inputPop:PROC
EXTRN	_xmlCurrentChar:PROC
EXTRN	_xmlCopyChar:PROC
EXTRN	_xmlNextChar:PROC
EXTRN	_xmlParserInputShrink:PROC
EXTRN	_xmlCanonicPath:PROC
EXTRN	_xmlBufResetInput:PROC
EXTRN	_xmlBufGetInputBase:PROC
EXTRN	_xmlBufSetInputBaseCur:PROC
EXTRN	_xmlCharEncInput:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
_htmlStartCloseIndex DD 064H DUP (?)
_htmlStartCloseIndexinitialized DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0P@PCJPAHLM@out?5of?5memory?6@
CONST	SEGMENT
??_C@_0P@PCJPAHLM@out?5of?5memory?6@ DB 'out of memory', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPKHBDLJ@charset?$DN@
CONST	SEGMENT
??_C@_08JPKHBDLJ@charset?$DN@ DB 'charset=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NFGFPEHN@encoder?5error?6@
CONST	SEGMENT
??_C@_0P@NFGFPEHN@encoder?5error?6@ DB 'encoder error', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LLMIGGGN@htmlParseChunk?3?5context?5error?6@
CONST	SEGMENT
??_C@_0BP@LLMIGGGN@htmlParseChunk?3?5context?5error?6@ DB 'htmlParseChunk'
	DB	': context error', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@FBPNGOCN@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@
CONST	SEGMENT
??_C@_0DC@FBPNGOCN@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@ DB 'HPP:'
	DB	' internal error, state == XML_PARSER_LITERAL', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@JCLDPCBF@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@
CONST	SEGMENT
??_C@_0DB@JCLDPCBF@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@ DB 'HPP:'
	DB	' internal error, state == XML_PARSER_IGNORE', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DADALPJL@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@
CONST	SEGMENT
??_C@_0DJ@DADALPJL@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@ DB 'HPP:'
	DB	' internal error, state == XML_PARSER_SYSTEM_LITERAL', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@ICHFLFOK@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5A@
CONST	SEGMENT
??_C@_0CP@ICHFLFOK@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5A@ DB 'HPP:'
	DB	' internal error, state == ATTRIBUTE_VALUE', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CIKPMOBJ@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5E@
CONST	SEGMENT
??_C@_0CM@CIKPMOBJ@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5E@ DB 'HPP:'
	DB	' internal error, state == ENTITY_VALUE', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MKEILABF@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5E@
CONST	SEGMENT
??_C@_0CL@MKEILABF@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5E@ DB 'HPP:'
	DB	' internal error, state == ENTITY_DECL', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OPBEPNBE@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5P@
CONST	SEGMENT
??_C@_0CC@OPBEPNBE@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5P@ DB 'HPP:'
	DB	' internal error, state == PI', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@DIGPKIBA@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5C@
CONST	SEGMENT
??_C@_0CH@DIGPKIBA@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5C@ DB 'HPP:'
	DB	' internal error, state == COMMENT', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KNMNDGMA@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5D@
CONST	SEGMENT
??_C@_0CD@KNMNDGMA@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5D@ DB 'HPP:'
	DB	' internal error, state == DTD', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KKLECLJD@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5C@
CONST	SEGMENT
??_C@_0CF@KKLECLJD@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5C@ DB 'HPP:'
	DB	' internal error, state == CDATA', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOBBLJDN@?$DM?$CG@
CONST	SEGMENT
??_C@_02OOBBLJDN@?$DM?$CG@ DB '<&', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDPHNOLM@?$DL?5?$DO?1@
CONST	SEGMENT
??_C@_04HDPHNOLM@?$DL?5?$DO?1@ DB '; >/', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FCHADMKI@Unsupported?5encoding?5?$CFs?6@
CONST	SEGMENT
??_C@_0BJ@FCHADMKI@Unsupported?5encoding?5?$CFs?6@ DB 'Unsupported encodi'
	DB	'ng %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MIDDFDBC@NewParserCtxt?3?5out?5of?5memory?6@
CONST	SEGMENT
??_C@_0BO@MIDDFDBC@NewParserCtxt?3?5out?5of?5memory?6@ DB 'NewParserCtxt:'
	DB	' out of memory', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@
CONST	SEGMENT
??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@ DB 'htmlInitParse'
	DB	'rCtxt: out of memory', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DKOGENJF@Document?5is?5empty?6@
CONST	SEGMENT
??_C@_0BD@DKOGENJF@Document?5is?5empty?6@ DB 'Document is empty', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IOOHKEGN@htmlParseDocument?3?5context?5erro@
CONST	SEGMENT
??_C@_0CC@IOOHKEGN@htmlParseDocument?3?5context?5erro@ DB 'htmlParseDocum'
	DB	'ent: context error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@HLPMKEOA@htmlParseElementInternal?3?5conte@
CONST	SEGMENT
??_C@_0CJ@HLPMKEOA@htmlParseElementInternal?3?5conte@ DB 'htmlParseElemen'
	DB	'tInternal: context error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HIMAKCPA@Couldn?8t?5find?5end?5of?5Start?5Tag?5@
CONST	SEGMENT
??_C@_0CD@HIMAKCPA@Couldn?8t?5find?5end?5of?5Start?5Tag?5@ DB 'Couldn''t '
	DB	'find end of Start Tag %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NAOEEOLP@Tag?5?$CFs?5invalid?6@
CONST	SEGMENT
??_C@_0BA@NAOEEOLP@Tag?5?$CFs?5invalid?6@ DB 'Tag %s invalid', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EOHEMKHC@htmlParseElement?3?5context?5error@
CONST	SEGMENT
??_C@_0CB@EOHEMKHC@htmlParseElement?3?5context?5error@ DB 'htmlParseEleme'
	DB	'nt: context error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FCFCBOFE@detected?5an?5error?5in?5element?5co@
CONST	SEGMENT
??_C@_0CG@FCFCBOFE@detected?5an?5error?5in?5element?5co@ DB 'detected an '
	DB	'error in element content', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FHNHCCJD@Misplaced?5DOCTYPE?5declaration?6@
CONST	SEGMENT
??_C@_0BP@FHNHCCJD@Misplaced?5DOCTYPE?5declaration?6@ DB 'Misplaced DOCTY'
	DB	'PE declaration', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JGKBCNAA@DOCTYPE@
CONST	SEGMENT
??_C@_07JGKBCNAA@DOCTYPE@ DB 'DOCTYPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01HNPIGOCE@?$CG@
CONST	SEGMENT
??_C@_01HNPIGOCE@?$CG@ DB '&', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LENKJKOI@Unexpected?5end?5tag?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BJ@LENKJKOI@Unexpected?5end?5tag?5?3?5?$CFs?6@ DB 'Unexpected end '
	DB	'tag : %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FHDFFDFP@End?5tag?5?3?5expected?5?8?$DO?8?6@
CONST	SEGMENT
??_C@_0BI@FHDFFDFP@End?5tag?5?3?5expected?5?8?$DO?8?6@ DB 'End tag : expe'
	DB	'cted ''>''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NNENDCGP@htmlParseEndTag?3?5?8?$DM?1?8?5not?5found@
CONST	SEGMENT
??_C@_0CB@NNENDCGP@htmlParseEndTag?3?5?8?$DM?1?8?5not?5found@ DB 'htmlPar'
	DB	'seEndTag: ''</'' not found', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@BBOKDADJ@htmlParseStartTag?3?5problem?5pars@
CONST	SEGMENT
??_C@_0CP@BBOKDADJ@htmlParseStartTag?3?5problem?5pars@ DB 'htmlParseStart'
	DB	'Tag: problem parsing attributes', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LJKBJNKP@Attribute?5?$CFs?5redefined?6@
CONST	SEGMENT
??_C@_0BI@LJKBJNKP@Attribute?5?$CFs?5redefined?6@ DB 'Attribute %s redefi'
	DB	'ned', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BLFAHHGP@htmlParseStartTag?3?5misplaced?5?$DMb@
CONST	SEGMENT
??_C@_0CJ@BLFAHHGP@htmlParseStartTag?3?5misplaced?5?$DMb@ DB 'htmlParseSt'
	DB	'artTag: misplaced <body> tag', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EDPENOJH@htmlParseStartTag?3?5misplaced?5?$DMh@
CONST	SEGMENT
??_C@_0CJ@EDPENOJH@htmlParseStartTag?3?5misplaced?5?$DMh@ DB 'htmlParseSt'
	DB	'artTag: misplaced <head> tag', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@LOEJNMOA@htmlParseStartTag?3?5misplaced?5?$DMh@
CONST	SEGMENT
??_C@_0CJ@LOEJNMOA@htmlParseStartTag?3?5misplaced?5?$DMh@ DB 'htmlParseSt'
	DB	'artTag: misplaced <html> tag', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FBFDNGDH@htmlParseStartTag?3?5invalid?5elem@
CONST	SEGMENT
??_C@_0CJ@FBFDNGDH@htmlParseStartTag?3?5invalid?5elem@ DB 'htmlParseStart'
	DB	'Tag: invalid element name', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@IMLMDHHB@htmlParseStartTag?3?5context?5erro@
CONST	SEGMENT
??_C@_0CC@IMLMDHHB@htmlParseStartTag?3?5context?5erro@ DB 'htmlParseStart'
	DB	'Tag: context error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LAFFMKKA@Content?9Type@
CONST	SEGMENT
??_C@_0N@LAFFMKKA@Content?9Type@ DB 'Content-Type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@OECAOKB@htmlCheckEncoding?3?5encoder?5erro@
CONST	SEGMENT
??_C@_0CC@OECAOKB@htmlCheckEncoding?3?5encoder?5erro@ DB 'htmlCheckEncodi'
	DB	'ng: encoder error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PNKHCAFG@htmlCheckEncoding?3?5unknown?5enco@
CONST	SEGMENT
??_C@_0CI@PNKHCAFG@htmlCheckEncoding?3?5unknown?5enco@ DB 'htmlCheckEncod'
	DB	'ing: unknown encoding %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JCPDEKHP@htmlCheckEncoding?3?5wrong?5encodi@
CONST	SEGMENT
??_C@_0CI@JCPDEKHP@htmlCheckEncoding?3?5wrong?5encodi@ DB 'htmlCheckEncod'
	DB	'ing: wrong encoding meta', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BHLKDNI@error?5parsing?5attribute?5name?6@
CONST	SEGMENT
??_C@_0BO@BHLKDNI@error?5parsing?5attribute?5name?6@ DB 'error parsing at'
	DB	'tribute name', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EFDCAMCC@DOCTYPE?5improperly?5terminated?6@
CONST	SEGMENT
??_C@_0BP@EFDCAMCC@DOCTYPE?5improperly?5terminated?6@ DB 'DOCTYPE imprope'
	DB	'rly terminated', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@ENAEKEOD@htmlParseDocTypeDecl?5?3?5no?5DOCTY@
CONST	SEGMENT
??_C@_0CK@ENAEKEOD@htmlParseDocTypeDecl?5?3?5no?5DOCTY@ DB 'htmlParseDocT'
	DB	'ypeDecl : no DOCTYPE name !', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IDADHLG@htmlParseCharRef?3?5invalid?5xmlCh@
CONST	SEGMENT
??_C@_0CM@IDADHLG@htmlParseCharRef?3?5invalid?5xmlCh@ DB 'htmlParseCharRe'
	DB	'f: invalid xmlChar value %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@IKIMPOOL@htmlParseCharRef?3?5invalid?5value@
CONST	SEGMENT
??_C@_0CB@IKIMPOOL@htmlParseCharRef?3?5invalid?5value@ DB 'htmlParseCharR'
	DB	'ef: invalid value', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@KKILEJJN@htmlParseCharRef?3?5missing?5semic@
CONST	SEGMENT
??_C@_0CF@KKILEJJN@htmlParseCharRef?3?5missing?5semic@ DB 'htmlParseCharR'
	DB	'ef: missing semicolon', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@DPLLMGHJ@htmlParseCharRef?3?5context?5error@
CONST	SEGMENT
??_C@_0CB@DPLLMGHJ@htmlParseCharRef?3?5context?5error@ DB 'htmlParseCharR'
	DB	'ef: context error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@MHPLKFMN@Comment?5not?5terminated?5?6?$DM?$CB?9?9?$CF?45@
CONST	SEGMENT
??_C@_0CD@MHPLKFMN@Comment?5not?5terminated?5?6?$DM?$CB?9?9?$CF?45@ DB 'C'
	DB	'omment not terminated ', 0aH, '<!--%.50s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HKBCFNGN@growing?5buffer?5failed?6@
CONST	SEGMENT
??_C@_0BH@HKBCFNGN@growing?5buffer?5failed?6@ DB 'growing buffer failed', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EHACIEGC@PI?5is?5not?5started?5correctly@
CONST	SEGMENT
??_C@_0BM@EHACIEGC@PI?5is?5not?5started?5correctly@ DB 'PI is not started'
	DB	' correctly', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OGPJFKEP@ParsePI?3?5PI?5?$CFs?5never?5end?5?4?4?4?6@
CONST	SEGMENT
??_C@_0BO@OGPJFKEP@ParsePI?3?5PI?5?$CFs?5never?5end?5?4?4?4?6@ DB 'ParseP'
	DB	'I: PI %s never end ...', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KBNJPEOK@ParsePI?3?5PI?5?$CFs?5space?5expected?6@
CONST	SEGMENT
??_C@_0BP@KBNJPEOK@ParsePI?3?5PI?5?$CFs?5space?5expected?6@ DB 'ParsePI: '
	DB	'PI %s space expected', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@OPLMODNC@htmlParseExternalID?3?5PUBLIC?0?5no@
CONST	SEGMENT
??_C@_0DD@OPLMODNC@htmlParseExternalID?3?5PUBLIC?0?5no@ DB 'htmlParseExte'
	DB	'rnalID: PUBLIC, no Public Identifier', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EHONNEAJ@Space?5required?5after?5?8PUBLIC?8?6@
CONST	SEGMENT
??_C@_0BP@EHONNEAJ@Space?5required?5after?5?8PUBLIC?8?6@ DB 'Space requir'
	DB	'ed after ''PUBLIC''', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LGGPLBBM@htmlParseExternalID?3?5SYSTEM?0?5no@
CONST	SEGMENT
??_C@_0CF@LGGPLBBM@htmlParseExternalID?3?5SYSTEM?0?5no@ DB 'htmlParseExte'
	DB	'rnalID: SYSTEM, no URI', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CCMMHADN@Space?5required?5after?5?8SYSTEM?8?6@
CONST	SEGMENT
??_C@_0BP@CCMMHADN@Space?5required?5after?5?8SYSTEM?8?6@ DB 'Space requir'
	DB	'ed after ''SYSTEM''', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@GCKCOLAE@Invalid?5char?5in?5CDATA?50x?$CFX?6@
CONST	SEGMENT
??_C@_0BM@GCKCOLAE@Invalid?5char?5in?5CDATA?50x?$CFX?6@ DB 'Invalid char '
	DB	'in CDATA 0x%X', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HLEPILFB@Element?5?$CFs?5embeds?5close?5tag?6@
CONST	SEGMENT
??_C@_0BN@HLEPILFB@Element?5?$CFs?5embeds?5close?5tag?6@ DB 'Element %s e'
	DB	'mbeds close tag', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CNBHKMED@PubidLiteral?5?$CC?5or?5?8?5expected?6@
CONST	SEGMENT
??_C@_0BO@CNBHKMED@PubidLiteral?5?$CC?5or?5?8?5expected?6@ DB 'PubidLiter'
	DB	'al " or '' expected', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CGBDHPF@Unfinished?5PubidLiteral?6@
CONST	SEGMENT
??_C@_0BJ@CGBDHPF@Unfinished?5PubidLiteral?6@ DB 'Unfinished PubidLiteral'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HCBHCDID@?5or?5?8?5expected?6@
CONST	SEGMENT
??_C@_0BA@HCBHCDID@?5or?5?8?5expected?6@ DB ' or '' expected', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PPFHJEEL@Unfinished?5SystemLiteral?6@
CONST	SEGMENT
??_C@_0BK@PPFHJEEL@Unfinished?5SystemLiteral?6@ DB 'Unfinished SystemLite'
	DB	'ral', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IDNLEFDN@AttValue?3?5no?5value?5found?6@
CONST	SEGMENT
??_C@_0BK@IDNLEFDN@AttValue?3?5no?5value?5found?6@ DB 'AttValue: no value'
	DB	' found', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NKOFEMFC@AttValue?3?5?8?5expected?6@
CONST	SEGMENT
??_C@_0BG@NKOFEMFC@AttValue?3?5?8?5expected?6@ DB 'AttValue: '' expected', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ECEGDLEC@AttValue?3?5?$CC?5expected?6@
CONST	SEGMENT
??_C@_0BG@ECEGDLEC@AttValue?3?5?$CC?5expected?6@ DB 'AttValue: " expected'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KJDDHCEO@htmlParseEntityRef?3?5expecting?5?8@
CONST	SEGMENT
??_C@_0CD@KJDDHCEO@htmlParseEntityRef?3?5expecting?5?8@ DB 'htmlParseEnti'
	DB	'tyRef: expecting '';''', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FCLAMBFC@htmlParseEntityRef?3?5no?5name?6@
CONST	SEGMENT
??_C@_0BN@FCLAMBFC@htmlParseEntityRef?3?5no?5name?6@ DB 'htmlParseEntityR'
	DB	'ef: no name', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHFIPIAO@growing?5buffer?6@
CONST	SEGMENT
??_C@_0BA@CHFIPIAO@growing?5buffer?6@ DB 'growing buffer', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LKGAKEEM@buffer?5allocation?5failed?6@
CONST	SEGMENT
??_C@_0BK@LKGAKEEM@buffer?5allocation?5failed?6@ DB 'buffer allocation fa'
	DB	'iled', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JIBKNHBD@unexpected?5change?5of?5input?5buff@
CONST	SEGMENT
??_C@_0CC@JIBKNHBD@unexpected?5change?5of?5input?5buff@ DB 'unexpected ch'
	DB	'ange of input buffer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JLEAHDEJ@http?3?1?1www?4w3?4org?1TR?1REC?9html40@
CONST	SEGMENT
??_C@_0CK@JLEAHDEJ@http?3?1?1www?4w3?4org?1TR?1REC?9html40@ DB 'http://ww'
	DB	'w.w3.org/TR/REC-html40/loose.dtd', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CIBPFINF@?9?1?1W3C?1?1DTD?5HTML?54?40?5Transition@
CONST	SEGMENT
??_C@_0CG@CIBPFINF@?9?1?1W3C?1?1DTD?5HTML?54?40?5Transition@ DB '-//W3C//'
	DB	'DTD HTML 4.0 Transitional//EN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NIBPLFNK@HTML?5document?5creation?5failed?6@
CONST	SEGMENT
??_C@_0BP@NIBPLFNK@HTML?5document?5creation?5failed?6@ DB 'HTML document '
	DB	'creation failed', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HNGCOIEH@?9?1?1W3C?1?1DTD?5HTML?54?1?1EN@
CONST	SEGMENT
??_C@_0BH@HNGCOIEH@?9?1?1W3C?1?1DTD?5HTML?54?1?1EN@ DB '-//W3C//DTD HTML '
	DB	'4//EN', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MJOJINPD@?9?1?1W3C?1?1DTD?5HTML?54?401?1?1EN@
CONST	SEGMENT
??_C@_0BK@MJOJINPD@?9?1?1W3C?1?1DTD?5HTML?54?401?1?1EN@ DB '-//W3C//DTD H'
	DB	'TML 4.01//EN', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CPFGJCJF@couldn?8t?5allocate?5a?5new?5input?5s@
CONST	SEGMENT
??_C@_0CG@CPFGJCJF@couldn?8t?5allocate?5a?5new?5input?5s@ DB 'couldn''t a'
	DB	'llocate a new input stream', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03PCCJIL@?$CD?$CFu@
CONST	SEGMENT
??_C@_03PCCJIL@?$CD?$CFu@ DB '#%u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@OHOANBCK@Opening?5and?5ending?5tag?5mismatch@
CONST	SEGMENT
??_C@_0CM@OHOANBCK@Opening?5and?5ending?5tag?5mismatch@ DB 'Opening and e'
	DB	'nding tag mismatch: %s and %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FAJFKCGA@onmousemove@
CONST	SEGMENT
??_C@_0M@FAJFKCGA@onmousemove@ DB 'onmousemove', 00H	; `string'
CONST	ENDS
CONST	SEGMENT
_htmlNoContentElements DD FLAT:??_C@_04PNIFHPHN@html@
	DD	FLAT:??_C@_04NEODDMOL@head@
	DD	00H
_htmlScriptAttributes DD FLAT:??_C@_07BAILDNBN@onclick@
	DD	FLAT:??_C@_0L@BPDJNBPF@ondblclick@
	DD	FLAT:??_C@_0M@LPLDHDON@onmousedown@
	DD	FLAT:??_C@_09KEIMJDF@onmouseup@
	DD	FLAT:??_C@_0M@BMKHHAKK@onmouseover@
	DD	FLAT:??_C@_0M@FAJFKCGA@onmousemove@
	DD	FLAT:??_C@_0L@CEIFEFAI@onmouseout@
	DD	FLAT:??_C@_0L@HBNKHJBD@onkeypress@
	DD	FLAT:??_C@_09HFCNBPMA@onkeydown@
	DD	FLAT:??_C@_07BAEMJOMG@onkeyup@
	DD	FLAT:??_C@_06FKJAAAAK@onload@
	DD	FLAT:??_C@_08KEOAPEKG@onunload@
	DD	FLAT:??_C@_07PCOLHBIB@onfocus@
	DD	FLAT:??_C@_06PAKCKPPO@onblur@
	DD	FLAT:??_C@_08PPMJAGMH@onsubmit@
	DD	FLAT:??_C@_07CDGCELIF@onreset@
	DD	FLAT:??_C@_08CLANFAGI@onchange@
	DD	FLAT:??_C@_08ILAMBHAE@onselect@
CONST	ENDS
;	COMDAT ??_C@_0DA@ICAIJAPJ@Input?5is?5not?5proper?5UTF?98?0?5indi@
CONST	SEGMENT
??_C@_0DA@ICAIJAPJ@Input?5is?5not?5proper?5UTF?98?0?5indi@ DB 'Input is n'
	DB	'ot proper UTF-8, indicate encoding !', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DAFMJFMB@Bytes?3?50x?$CF02X?6@
CONST	SEGMENT
??_C@_0P@DAFMJFMB@Bytes?3?50x?$CF02X?6@ DB 'Bytes: 0x%02X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KHMCMEAC@Bytes?3?50x?$CF02X?50x?$CF02X?50x?$CF02X?50x?$CF@
CONST	SEGMENT
??_C@_0CE@KHMCMEAC@Bytes?3?50x?$CF02X?50x?$CF02X?50x?$CF02X?50x?$CF@ DB 'B'
	DB	'ytes: 0x%02X 0x%02X 0x%02X 0x%02X', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PIALHHKN@Unsupported?5encoding?5?$CFs@
CONST	SEGMENT
??_C@_0BI@PIALHHKN@Unsupported?5encoding?5?$CFs@ DB 'Unsupported encoding'
	DB	' %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EOJNGAKJ@Char?50x?$CFX?5out?5of?5allowed?5range?6@
CONST	SEGMENT
??_C@_0CA@EOJNGAKJ@Char?50x?$CFX?5out?5of?5allowed?5range?6@ DB 'Char 0x%'
	DB	'X out of allowed range', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFIPAJDM@CHARSET?$DN@
CONST	SEGMENT
??_C@_08HFIPAJDM@CHARSET?$DN@ DB 'CHARSET=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HPFEHCIK@CONTENT@
CONST	SEGMENT
??_C@_07HPFEHCIK@CONTENT@ DB 'CONTENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KJGBOFMC@HTTP?9EQUIV@
CONST	SEGMENT
??_C@_0L@KJGBOFMC@HTTP?9EQUIV@ DB 'HTTP-EQUIV', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@
CONST	SEGMENT
??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@ DB 'Memory allocation fa'
	DB	'iled', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ DB 'Memory al'
	DB	'location failed : %s', 0aH, 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_htmlOmittedDefaultValue DD 01H
	ORG $+4
_allowPCData DD	FLAT:??_C@_01MCMALHOG@a@
	DD	FLAT:??_C@_04FKPKGNKN@abbr@
	DD	FLAT:??_C@_07DBMAFMJI@acronym@
	DD	FLAT:??_C@_07LHEPONKL@address@
	DD	FLAT:??_C@_06MJBNHHFM@applet@
	DD	FLAT:??_C@_01OJONOECF@b@
	DD	FLAT:??_C@_03OCCPALPP@bdo@
	DD	FLAT:??_C@_03CCCOBCKE@big@
	DD	FLAT:??_C@_0L@NKGPHNMG@blockquote@
	DD	FLAT:??_C@_04IEJGKNJ@body@
	DD	FLAT:??_C@_06HFKPFKMP@button@
	DD	FLAT:??_C@_07BANDPJOM@caption@
	DD	FLAT:??_C@_06BBLOAEEI@center@
	DD	FLAT:??_C@_04OKBDOCJI@cite@
	DD	FLAT:??_C@_04NDFOBODE@code@
	DD	FLAT:??_C@_02EOPBOLLC@dd@
	DD	FLAT:??_C@_03ONKLGNNH@del@
	DD	FLAT:??_C@_03NNNLLBAM@dfn@
	DD	FLAT:??_C@_03FEJMGOGI@div@
	DD	FLAT:??_C@_02EDDPJOD@dt@
	DD	FLAT:??_C@_02JOPBDKMM@em@
	DD	FLAT:??_C@_04EFPADHIC@font@
	DD	FLAT:??_C@_04MLMMMEIO@form@
	DD	FLAT:??_C@_02IACHLLMH@h1@
	DD	FLAT:??_C@_02KLAKOIAE@h2@
	DD	FLAT:??_C@_02LCBBNJEF@h3@
	DD	FLAT:??_C@_02PNFAEPIC@h4@
	DD	FLAT:??_C@_02OEELHOMD@h5@
	DD	FLAT:??_C@_02MPGGCNAA@h6@
	DD	FLAT:??_C@_01KBJDNOO@i@
	DD	FLAT:??_C@_06PKBNCBKI@iframe@
	DD	FLAT:??_C@_03NOMOFEHF@ins@
	DD	FLAT:??_C@_03HIFOOBAM@kbd@
	DD	FLAT:??_C@_05IDCCNNGI@label@
	DD	FLAT:??_C@_06BCIOHMBM@legend@
	DD	FLAT:??_C@_02PFEMMEEH@li@
	DD	FLAT:??_C@_08NAAIELI@noframes@
	DD	FLAT:??_C@_08NOCGLLG@noscript@
	DD	FLAT:??_C@_06IEOJBDIK@object@
	DD	FLAT:??_C@_01JBBJJEPG@p@
	DD	FLAT:??_C@_03PKHLKDKD@pre@
	DD	FLAT:??_C@_01IIACKFLH@q@
	DD	FLAT:??_C@_01LKDEMHDF@s@
	DD	FLAT:??_C@_04GLAFCDBO@samp@
	DD	FLAT:??_C@_05KJDGBEEG@small@
	DD	FLAT:??_C@_04FOPLNFFP@span@
	DD	FLAT:??_C@_06LGJEBFOF@strike@
	DD	FLAT:??_C@_06KHACOKFA@strong@
	DD	FLAT:??_C@_02FCNHEIMC@td@
	DD	FLAT:??_C@_02POGCAHMO@th@
	DD	FLAT:??_C@_02BIBFFKJD@tt@
	DD	FLAT:??_C@_01OMGOGALD@u@
	DD	FLAT:??_C@_03MEPDGFMA@var@
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlDoRead
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_URL$ = 12						; size = 4
_encoding$ = 16						; size = 4
_options$ = 20						; size = 4
_reuse$ = 24						; size = 4
_htmlDoRead PROC					; COMDAT

; 6772 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _options$[ebp]
	mov	esi, DWORD PTR _ctxt$[ebp]
	push	esi
	call	_htmlCtxtUseOptions
	mov	edi, DWORD PTR _encoding$[ebp]
	add	esp, 8
	mov	DWORD PTR [esi+32], 1
	test	edi, edi
	je	SHORT $LN3@htmlDoRead

; 6773 :     htmlDocPtr ret;
; 6774 : 
; 6775 :     htmlCtxtUseOptions(ctxt, options);
; 6776 :     ctxt->html = 1;
; 6777 :     if (encoding != NULL) {
; 6778 :         xmlCharEncodingHandlerPtr hdlr;
; 6779 : 
; 6780 : 	hdlr = xmlFindCharEncodingHandler(encoding);

	push	edi
	call	_xmlFindCharEncodingHandler
	add	esp, 4

; 6781 : 	if (hdlr != NULL) {

	test	eax, eax
	je	SHORT $LN3@htmlDoRead

; 6782 : 	    xmlSwitchToEncoding(ctxt, hdlr);

	push	eax
	push	esi
	call	_xmlSwitchToEncoding

; 6783 : 	    if (ctxt->input->encoding != NULL)

	mov	eax, DWORD PTR [esi+36]
	add	esp, 8
	mov	eax, DWORD PTR [eax+44]
	test	eax, eax
	je	SHORT $LN4@htmlDoRead

; 6784 : 	      xmlFree((xmlChar *) ctxt->input->encoding);

	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN4@htmlDoRead:

; 6785 :             ctxt->input->encoding = xmlStrdup((xmlChar *)encoding);

	push	edi
	call	_xmlStrdup
	mov	ecx, DWORD PTR [esi+36]
	add	esp, 4
	mov	DWORD PTR [ecx+44], eax
$LN3@htmlDoRead:

; 6786 :         }
; 6787 :     }
; 6788 :     if ((URL != NULL) && (ctxt->input != NULL) &&

	mov	eax, DWORD PTR _URL$[ebp]
	test	eax, eax
	je	SHORT $LN5@htmlDoRead
	mov	ecx, DWORD PTR [esi+36]
	test	ecx, ecx
	je	SHORT $LN5@htmlDoRead
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN5@htmlDoRead

; 6789 :         (ctxt->input->filename == NULL))
; 6790 :         ctxt->input->filename = (char *) xmlStrdup((const xmlChar *) URL);

	push	eax
	call	_xmlStrdup
	mov	ecx, DWORD PTR [esi+36]
	add	esp, 4
	mov	DWORD PTR [ecx+4], eax
$LN5@htmlDoRead:

; 6791 :     htmlParseDocument(ctxt);

	push	esi
	call	_htmlParseDocument

; 6792 :     ret = ctxt->myDoc;

	mov	edi, DWORD PTR [esi+8]
	add	esp, 4

; 6793 :     ctxt->myDoc = NULL;
; 6794 :     if (!reuse) {

	cmp	DWORD PTR _reuse$[ebp], 0
	mov	DWORD PTR [esi+8], 0
	jne	SHORT $LN9@htmlDoRead

; 6795 :         if ((ctxt->dictNames) &&
; 6796 : 	    (ret != NULL) &&

	cmp	DWORD PTR [esi+364], 0
	je	SHORT $LN7@htmlDoRead
	test	edi, edi
	je	SHORT $LN7@htmlDoRead
	mov	ecx, DWORD PTR [edi+80]
	cmp	ecx, DWORD PTR [esi+296]
	jne	SHORT $LN7@htmlDoRead

; 6797 : 	    (ret->dict == ctxt->dict))
; 6798 : 	    ctxt->dict = NULL;

	mov	DWORD PTR [esi+296], 0
$LN7@htmlDoRead:

; 6799 : 	xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt
	add	esp, 4
$LN9@htmlDoRead:

; 6800 :     }
; 6801 :     return (ret);
; 6802 : }

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_htmlDoRead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseTryOrFinish
_TEXT	SEGMENT
_node_info$ = -36					; size = 20
_cons$1$ = -16						; size = 4
tv2621 = -16						; size = 4
tv2663 = -12						; size = 4
_chr$1 = -8						; size = 2
_next$4$ = -1						; size = 1
$T2 = 8							; size = 4
$T3 = 8							; size = 4
$T4 = 8							; size = 4
_info$1$ = 8						; size = 4
tv2626 = 8						; size = 4
_ctxt$ = 8						; size = 4
_cur$6$ = 11						; size = 1
_terminate$ = 12					; size = 4
_htmlParseTryOrFinish PROC				; COMDAT

; 5326 : htmlParseTryOrFinish(htmlParserCtxtPtr ctxt, int terminate) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	ecx, OFFSET __111E219E_htmlparser@c
	push	ebx
	push	esi
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	edi, DWORD PTR [esi+36]
	test	edi, edi
	je	$LN235@htmlParseT
	mov	eax, DWORD PTR __imp__toupper
	mov	DWORD PTR tv2663[ebp], eax
	npad	7
$LL2@htmlParseT:

; 5391 : 	if (in->buf == NULL)

	mov	ecx, DWORD PTR [edi]
	mov	eax, DWORD PTR [edi+12]
	mov	DWORD PTR tv2621[ebp], eax
	test	ecx, ecx
	jne	SHORT $LN7@htmlParseT

; 5392 : 	    avail = in->length - (in->cur - in->base);

	mov	ebx, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [edi+16]
	sub	ebx, ecx
	jmp	SHORT $LN236@htmlParseT
$LN7@htmlParseT:

; 5393 : 	else
; 5394 : 	    avail = xmlBufUse(in->buf->buffer) - (in->cur - in->base);

	mov	eax, DWORD PTR [edi+16]
	push	DWORD PTR [ecx+16]
	mov	DWORD PTR $T2[ebp], eax
	call	_xmlBufUse
	mov	ebx, DWORD PTR tv2621[ebp]
	add	esp, 4
	sub	ebx, DWORD PTR $T2[ebp]
	mov	ecx, DWORD PTR $T2[ebp]
$LN236@htmlParseT:

; 5395 : 	if ((avail == 0) && (terminate)) {

	add	ebx, eax
	test	ebx, ebx
	je	$LN224@htmlParseT

; 5404 : 	    }
; 5405 : 	}
; 5406 :         if (avail < 1)

	cmp	ebx, 1
	jl	$done$249

; 5407 : 	    goto done;
; 5408 : 	cur = in->cur[0];
; 5409 : 	if (cur == 0) {

	mov	dl, BYTE PTR [ecx]
	test	dl, dl
	jne	SHORT $LN13@htmlParseT

; 5410 : 	    SKIP(1);

	mov	eax, DWORD PTR [esi+36]
	inc	DWORD PTR [esi+200]
	inc	DWORD PTR [eax+16]
	mov	eax, DWORD PTR [esi+36]
	inc	DWORD PTR [eax+32]

; 5411 : 	    continue;

	jmp	$LN4@htmlParseT
$LN13@htmlParseT:

; 5412 : 	}
; 5413 : 
; 5414 :         switch (ctxt->instate) {

	mov	eax, DWORD PTR [esi+172]
	inc	eax
	cmp	eax, 17					; 00000011H
	ja	$LN4@htmlParseT
	jmp	DWORD PTR $LN248@htmlParseT[eax*4]
$LN15@htmlParseT:

; 5415 :             case XML_PARSER_EOF:
; 5416 : 	        /*
; 5417 : 		 * Document parsing is done !
; 5418 : 		 */
; 5419 : 	        goto done;
; 5420 :             case XML_PARSER_START:
; 5421 : 	        /*
; 5422 : 		 * Very first chars read from the document flow.
; 5423 : 		 */
; 5424 : 		cur = in->cur[0];
; 5425 : 		if (IS_BLANK_CH(cur)) {

	cmp	dl, 32					; 00000020H
	je	SHORT $LN17@htmlParseT
	cmp	dl, 9
	jb	SHORT $LN18@htmlParseT
	cmp	dl, 10					; 0000000aH
	jbe	SHORT $LN17@htmlParseT
$LN18@htmlParseT:
	cmp	dl, 13					; 0000000dH
	jne	SHORT $LN20@htmlParseT
$LN17@htmlParseT:

; 5426 : 		    SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 5427 : 		    if (in->buf == NULL)

	mov	eax, DWORD PTR [edi]
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN19@htmlParseT

; 5428 : 			avail = in->length - (in->cur - in->base);

	mov	ebx, DWORD PTR [edi+24]
	sub	ebx, DWORD PTR [edi+16]
	add	ebx, DWORD PTR [edi+12]
	jmp	SHORT $LN20@htmlParseT
$LN19@htmlParseT:

; 5429 : 		    else
; 5430 : 			avail = xmlBufUse(in->buf->buffer) - (in->cur - in->base);

	push	DWORD PTR [eax+16]
	call	_xmlBufUse
	mov	ebx, eax
	add	esp, 4
	mov	eax, DWORD PTR [edi+12]
	sub	eax, DWORD PTR [edi+16]
	add	ebx, eax
$LN20@htmlParseT:

; 5431 : 		}
; 5432 : 		if ((ctxt->sax) && (ctxt->sax->setDocumentLocator))

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN22@htmlParseT
	cmp	DWORD PTR [eax+44], 0
	lea	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR tv2626[ebp], ecx
	je	SHORT $LN21@htmlParseT

; 5433 : 		    ctxt->sax->setDocumentLocator(ctxt->userData,

	call	___xmlDefaultSAXLocator
	push	eax
	mov	eax, DWORD PTR tv2626[ebp]
	push	DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax]
	call	eax
	mov	eax, DWORD PTR [esi]
	add	esp, 8
$LN21@htmlParseT:

; 5434 : 						  &xmlDefaultSAXLocator);
; 5435 : 		if ((ctxt->sax) && (ctxt->sax->startDocument) &&

	test	eax, eax
	je	SHORT $LN22@htmlParseT
	mov	eax, DWORD PTR [eax+48]
	test	eax, eax
	je	SHORT $LN22@htmlParseT
	cmp	DWORD PTR [esi+212], 0
	jne	SHORT $LN22@htmlParseT

; 5436 : 	            (!ctxt->disableSAX))
; 5437 : 		    ctxt->sax->startDocument(ctxt->userData);

	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 4
$LN22@htmlParseT:

; 5438 : 
; 5439 : 		cur = in->cur[0];

	mov	eax, DWORD PTR [edi+16]

; 5440 : 		next = in->cur[1];
; 5441 : 		if ((cur == '<') && (next == '!') &&
; 5442 : 		    (UPP(2) == 'D') && (UPP(3) == 'O') &&
; 5443 : 		    (UPP(4) == 'C') && (UPP(5) == 'T') &&
; 5444 : 		    (UPP(6) == 'Y') && (UPP(7) == 'P') &&

	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	$LN23@htmlParseT
	cmp	BYTE PTR [eax+1], 33			; 00000021H
	jne	$LN23@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	edi, DWORD PTR tv2663[ebp]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+2]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 68					; 00000044H
	jne	$LN23@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+3]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 79					; 0000004fH
	jne	$LN23@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+4]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 67					; 00000043H
	jne	$LN23@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+5]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 84					; 00000054H
	jne	SHORT $LN23@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+6]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 89					; 00000059H
	jne	SHORT $LN23@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+7]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN23@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+8]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN23@htmlParseT

; 5445 : 		    (UPP(8) == 'E')) {
; 5446 : 		    if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN25@htmlParseT
	push	1
	push	0
	push	0
	push	0
	push	62					; 0000003eH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN25@htmlParseT:

; 5447 : 		        (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0))
; 5448 : 			goto done;
; 5449 : #ifdef DEBUG_PUSH
; 5450 : 		    xmlGenericError(xmlGenericErrorContext,
; 5451 : 			    "HPP: Parsing internal subset\n");
; 5452 : #endif
; 5453 : 		    htmlParseDocTypeDecl(ctxt);

	push	esi
	call	_htmlParseDocTypeDecl

; 5454 : 		    ctxt->instate = XML_PARSER_PROLOG;

	mov	eax, 4
	add	esp, 4

; 5461 : #ifdef DEBUG_PUSH
; 5462 : 		    xmlGenericError(xmlGenericErrorContext,
; 5463 : 			    "HPP: entering MISC\n");
; 5464 : #endif
; 5465 : 		}
; 5466 : 		break;

	mov	DWORD PTR [esi+172], eax
	jmp	$LN4@htmlParseT
$LN23@htmlParseT:

; 5455 : #ifdef DEBUG_PUSH
; 5456 : 		    xmlGenericError(xmlGenericErrorContext,
; 5457 : 			    "HPP: entering PROLOG\n");
; 5458 : #endif
; 5459 :                 } else {
; 5460 : 		    ctxt->instate = XML_PARSER_MISC;

	mov	eax, 1

; 5461 : #ifdef DEBUG_PUSH
; 5462 : 		    xmlGenericError(xmlGenericErrorContext,
; 5463 : 			    "HPP: entering MISC\n");
; 5464 : #endif
; 5465 : 		}
; 5466 : 		break;

	mov	DWORD PTR [esi+172], eax
	jmp	$LN4@htmlParseT
$LN26@htmlParseT:

; 5467 :             case XML_PARSER_MISC:
; 5468 : 		SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 5469 : 		if (in->buf == NULL)

	mov	ecx, DWORD PTR [edi]
	add	esp, 4
	test	ecx, ecx
	jne	SHORT $LN27@htmlParseT

; 5470 : 		    avail = in->length - (in->cur - in->base);

	mov	ebx, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [edi+16]
	sub	ebx, ecx
	add	ebx, DWORD PTR [edi+12]
	jmp	SHORT $LN28@htmlParseT
$LN27@htmlParseT:

; 5471 : 		else
; 5472 : 		    avail = xmlBufUse(in->buf->buffer) - (in->cur - in->base);

	mov	eax, DWORD PTR [edi+16]
	push	DWORD PTR [ecx+16]
	mov	DWORD PTR $T4[ebp], eax
	call	_xmlBufUse
	mov	ecx, DWORD PTR $T4[ebp]
	mov	ebx, eax
	mov	eax, DWORD PTR [edi+12]
	add	esp, 4
	sub	eax, ecx
	add	ebx, eax
$LN28@htmlParseT:

; 5473 : 		/*
; 5474 : 		 * no chars in buffer
; 5475 : 		 */
; 5476 : 		if (avail < 1)

	cmp	ebx, 1
	jl	$done$249

; 5477 : 		    goto done;
; 5478 : 		/*
; 5479 : 		 * not enouth chars in buffer
; 5480 : 		 */
; 5481 : 		if (avail < 2) {

	mov	edi, DWORD PTR _terminate$[ebp]
	cmp	ebx, 2
	jge	SHORT $LN30@htmlParseT

; 5482 : 		    if (!terminate)

	test	edi, edi
	je	$done$249

; 5483 : 			goto done;
; 5484 : 		    else
; 5485 : 			next = ' ';

	mov	dl, 32					; 00000020H

; 5486 : 		} else {

	jmp	SHORT $LN31@htmlParseT
$LN30@htmlParseT:

; 5487 : 		    next = in->cur[1];

	mov	dl, BYTE PTR [ecx+1]
$LN31@htmlParseT:

; 5488 : 		}
; 5489 : 		cur = in->cur[0];
; 5490 : 	        if ((cur == '<') && (next == '!') &&
; 5491 : 		    (in->cur[2] == '-') && (in->cur[3] == '-')) {

	cmp	BYTE PTR [ecx], 60			; 0000003cH
	jne	$LN43@htmlParseT
	cmp	dl, 33					; 00000021H
	jne	$LN206@htmlParseT
	cmp	BYTE PTR [ecx+2], 45			; 0000002dH
	jne	SHORT $LN208@htmlParseT
	cmp	BYTE PTR [ecx+3], 45			; 0000002dH
	jne	SHORT $LN208@htmlParseT

; 5492 : 		    if ((!terminate) &&

	test	edi, edi
	jne	SHORT $LN36@htmlParseT
	push	1
	push	1
	push	62					; 0000003eH
	push	45					; 0000002dH
	push	45					; 0000002dH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN36@htmlParseT:

; 5493 : 		        (htmlParseLookupSequence(ctxt, '-', '-', '>', 1, 1) < 0))
; 5494 : 			goto done;
; 5495 : #ifdef DEBUG_PUSH
; 5496 : 		    xmlGenericError(xmlGenericErrorContext,
; 5497 : 			    "HPP: Parsing Comment\n");
; 5498 : #endif
; 5499 : 		    htmlParseComment(ctxt);

	push	esi
	call	_htmlParseComment
	add	esp, 4

; 5500 : 		    ctxt->instate = XML_PARSER_MISC;

	mov	DWORD PTR [esi+172], 1
	jmp	$LN4@htmlParseT
$LN208@htmlParseT:

; 5512 : 		    (UPP(2) == 'D') && (UPP(3) == 'O') &&
; 5513 : 		    (UPP(4) == 'C') && (UPP(5) == 'T') &&
; 5514 : 		    (UPP(6) == 'Y') && (UPP(7) == 'P') &&

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+2]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 68					; 00000044H
	jne	$LN210@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+3]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 79					; 0000004fH
	jne	$LN210@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+4]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 67					; 00000043H
	jne	$LN210@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+5]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 84					; 00000054H
	jne	SHORT $LN210@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+6]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 89					; 00000059H
	jne	SHORT $LN210@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+7]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN210@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+8]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN210@htmlParseT

; 5515 : 		    (UPP(8) == 'E')) {
; 5516 : 		    if ((!terminate) &&

	test	edi, edi
	jne	SHORT $LN42@htmlParseT
	push	1
	push	edi
	push	edi
	push	edi
	push	62					; 0000003eH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN42@htmlParseT:

; 5517 : 		        (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0))
; 5518 : 			goto done;
; 5519 : #ifdef DEBUG_PUSH
; 5520 : 		    xmlGenericError(xmlGenericErrorContext,
; 5521 : 			    "HPP: Parsing internal subset\n");
; 5522 : #endif
; 5523 : 		    htmlParseDocTypeDecl(ctxt);

	push	esi
	call	_htmlParseDocTypeDecl
	add	esp, 4

; 5524 : 		    ctxt->instate = XML_PARSER_PROLOG;

	mov	DWORD PTR [esi+172], 4
	jmp	$LN4@htmlParseT
$LN210@htmlParseT:

; 5525 : #ifdef DEBUG_PUSH
; 5526 : 		    xmlGenericError(xmlGenericErrorContext,
; 5527 : 			    "HPP: entering PROLOG\n");
; 5528 : #endif
; 5529 : 		} else if ((cur == '<') && (next == '!') &&

	cmp	ebx, 9
$LN245@htmlParseT:

; 5327 :     int ret = 0;
; 5328 :     htmlParserInputPtr in;
; 5329 :     int avail = 0;
; 5330 :     xmlChar cur, next;
; 5331 : 
; 5332 :     htmlParserNodeInfo node_info;
; 5333 : 
; 5334 : #ifdef DEBUG_PUSH
; 5335 :     switch (ctxt->instate) {
; 5336 : 	case XML_PARSER_EOF:
; 5337 : 	    xmlGenericError(xmlGenericErrorContext,
; 5338 : 		    "HPP: try EOF\n"); break;
; 5339 : 	case XML_PARSER_START:
; 5340 : 	    xmlGenericError(xmlGenericErrorContext,
; 5341 : 		    "HPP: try START\n"); break;
; 5342 : 	case XML_PARSER_MISC:
; 5343 : 	    xmlGenericError(xmlGenericErrorContext,
; 5344 : 		    "HPP: try MISC\n");break;
; 5345 : 	case XML_PARSER_COMMENT:
; 5346 : 	    xmlGenericError(xmlGenericErrorContext,
; 5347 : 		    "HPP: try COMMENT\n");break;
; 5348 : 	case XML_PARSER_PROLOG:
; 5349 : 	    xmlGenericError(xmlGenericErrorContext,
; 5350 : 		    "HPP: try PROLOG\n");break;
; 5351 : 	case XML_PARSER_START_TAG:
; 5352 : 	    xmlGenericError(xmlGenericErrorContext,
; 5353 : 		    "HPP: try START_TAG\n");break;
; 5354 : 	case XML_PARSER_CONTENT:
; 5355 : 	    xmlGenericError(xmlGenericErrorContext,
; 5356 : 		    "HPP: try CONTENT\n");break;
; 5357 : 	case XML_PARSER_CDATA_SECTION:
; 5358 : 	    xmlGenericError(xmlGenericErrorContext,
; 5359 : 		    "HPP: try CDATA_SECTION\n");break;
; 5360 : 	case XML_PARSER_END_TAG:
; 5361 : 	    xmlGenericError(xmlGenericErrorContext,
; 5362 : 		    "HPP: try END_TAG\n");break;
; 5363 : 	case XML_PARSER_ENTITY_DECL:
; 5364 : 	    xmlGenericError(xmlGenericErrorContext,
; 5365 : 		    "HPP: try ENTITY_DECL\n");break;
; 5366 : 	case XML_PARSER_ENTITY_VALUE:
; 5367 : 	    xmlGenericError(xmlGenericErrorContext,
; 5368 : 		    "HPP: try ENTITY_VALUE\n");break;
; 5369 : 	case XML_PARSER_ATTRIBUTE_VALUE:
; 5370 : 	    xmlGenericError(xmlGenericErrorContext,
; 5371 : 		    "HPP: try ATTRIBUTE_VALUE\n");break;
; 5372 : 	case XML_PARSER_DTD:
; 5373 : 	    xmlGenericError(xmlGenericErrorContext,
; 5374 : 		    "HPP: try DTD\n");break;
; 5375 : 	case XML_PARSER_EPILOG:
; 5376 : 	    xmlGenericError(xmlGenericErrorContext,
; 5377 : 		    "HPP: try EPILOG\n");break;
; 5378 : 	case XML_PARSER_PI:
; 5379 : 	    xmlGenericError(xmlGenericErrorContext,
; 5380 : 		    "HPP: try PI\n");break;
; 5381 : 	case XML_PARSER_SYSTEM_LITERAL:
; 5382 : 	    xmlGenericError(xmlGenericErrorContext,
; 5383 : 		    "HPP: try SYSTEM_LITERAL\n");break;
; 5384 :     }
; 5385 : #endif
; 5386 : 
; 5387 :     while (1) {
; 5388 : 
; 5389 : 	in = ctxt->input;

	jl	$done$249
$LN43@htmlParseT:
	mov	DWORD PTR [esi+172], 6
	jmp	$LN4@htmlParseT
$LN206@htmlParseT:

; 5501 : 	        } else if ((cur == '<') && (next == '?')) {

	cmp	dl, 63					; 0000003fH
	jne	SHORT $LN43@htmlParseT

; 5502 : 		    if ((!terminate) &&

	test	edi, edi
	jne	SHORT $LN39@htmlParseT
	push	1
	push	edi
	push	edi
	push	edi
	push	62					; 0000003eH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN39@htmlParseT:

; 5503 : 		        (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0))
; 5504 : 			goto done;
; 5505 : #ifdef DEBUG_PUSH
; 5506 : 		    xmlGenericError(xmlGenericErrorContext,
; 5507 : 			    "HPP: Parsing PI\n");
; 5508 : #endif
; 5509 : 		    htmlParsePI(ctxt);

	push	esi
	call	_htmlParsePI
	add	esp, 4

; 5510 : 		    ctxt->instate = XML_PARSER_MISC;

	mov	DWORD PTR [esi+172], 1

; 5511 : 		} else if ((cur == '<') && (next == '!') &&

	jmp	$LN4@htmlParseT
$LN45@htmlParseT:

; 5530 : 		           (avail < 9)) {
; 5531 : 		    goto done;
; 5532 : 		} else {
; 5533 : 		    ctxt->instate = XML_PARSER_START_TAG;
; 5534 : #ifdef DEBUG_PUSH
; 5535 : 		    xmlGenericError(xmlGenericErrorContext,
; 5536 : 			    "HPP: entering START_TAG\n");
; 5537 : #endif
; 5538 : 		}
; 5539 : 		break;
; 5540 :             case XML_PARSER_PROLOG:
; 5541 : 		SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 5542 : 		if (in->buf == NULL)

	mov	ecx, DWORD PTR [edi]
	add	esp, 4
	test	ecx, ecx
	jne	SHORT $LN46@htmlParseT

; 5543 : 		    avail = in->length - (in->cur - in->base);

	mov	ebx, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR [edi+16]
	sub	ebx, ecx
	add	ebx, DWORD PTR [edi+12]
	jmp	SHORT $LN47@htmlParseT
$LN46@htmlParseT:

; 5544 : 		else
; 5545 : 		    avail = xmlBufUse(in->buf->buffer) - (in->cur - in->base);

	mov	eax, DWORD PTR [edi+16]
	push	DWORD PTR [ecx+16]
	mov	DWORD PTR $T3[ebp], eax
	call	_xmlBufUse
	mov	ecx, DWORD PTR $T3[ebp]
	mov	ebx, eax
	mov	eax, DWORD PTR [edi+12]
	add	esp, 4
	sub	eax, ecx
	add	ebx, eax
$LN47@htmlParseT:

; 5546 : 		if (avail < 2)

	cmp	ebx, 2
	jl	$done$249

; 5547 : 		    goto done;
; 5548 : 		cur = in->cur[0];
; 5549 : 		next = in->cur[1];
; 5550 : 		if ((cur == '<') && (next == '!') &&
; 5551 : 		    (in->cur[2] == '-') && (in->cur[3] == '-')) {

	cmp	BYTE PTR [ecx], 60			; 0000003cH
	mov	dl, BYTE PTR [ecx+1]
	jne	$LN43@htmlParseT
	cmp	dl, 33					; 00000021H
	jne	SHORT $LN211@htmlParseT
	cmp	BYTE PTR [ecx+2], 45			; 0000002dH
	jne	SHORT $LN213@htmlParseT
	cmp	BYTE PTR [ecx+3], 45			; 0000002dH
	jne	SHORT $LN213@htmlParseT

; 5552 : 		    if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN51@htmlParseT
	push	1
	push	1
	push	62					; 0000003eH
	push	45					; 0000002dH
	push	45					; 0000002dH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN51@htmlParseT:

; 5553 : 		        (htmlParseLookupSequence(ctxt, '-', '-', '>', 1, 1) < 0))
; 5554 : 			goto done;
; 5555 : #ifdef DEBUG_PUSH
; 5556 : 		    xmlGenericError(xmlGenericErrorContext,
; 5557 : 			    "HPP: Parsing Comment\n");
; 5558 : #endif
; 5559 : 		    htmlParseComment(ctxt);

	push	esi
	call	_htmlParseComment
	add	esp, 4

; 5560 : 		    ctxt->instate = XML_PARSER_PROLOG;

	mov	DWORD PTR [esi+172], 4
	jmp	$LN4@htmlParseT
$LN213@htmlParseT:

; 5571 : 		} else if ((cur == '<') && (next == '!') &&

	cmp	ebx, 4
	jmp	$LN245@htmlParseT
$LN211@htmlParseT:

; 5561 : 	        } else if ((cur == '<') && (next == '?')) {

	cmp	dl, 63					; 0000003fH
	jne	$LN43@htmlParseT

; 5562 : 		    if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN54@htmlParseT
	push	1
	push	0
	push	0
	push	0
	push	62					; 0000003eH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN54@htmlParseT:

; 5563 : 		        (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0))
; 5564 : 			goto done;
; 5565 : #ifdef DEBUG_PUSH
; 5566 : 		    xmlGenericError(xmlGenericErrorContext,
; 5567 : 			    "HPP: Parsing PI\n");
; 5568 : #endif
; 5569 : 		    htmlParsePI(ctxt);

	push	esi
	call	_htmlParsePI
	add	esp, 4

; 5570 : 		    ctxt->instate = XML_PARSER_PROLOG;

	mov	DWORD PTR [esi+172], 4
	jmp	$LN4@htmlParseT
$LN57@htmlParseT:

; 5572 : 		           (avail < 4)) {
; 5573 : 		    goto done;
; 5574 : 		} else {
; 5575 : 		    ctxt->instate = XML_PARSER_START_TAG;
; 5576 : #ifdef DEBUG_PUSH
; 5577 : 		    xmlGenericError(xmlGenericErrorContext,
; 5578 : 			    "HPP: entering START_TAG\n");
; 5579 : #endif
; 5580 : 		}
; 5581 : 		break;
; 5582 :             case XML_PARSER_EPILOG:
; 5583 : 		if (in->buf == NULL)

	mov	edx, DWORD PTR [edi]
	test	edx, edx
	jne	SHORT $LN58@htmlParseT

; 5584 : 		    avail = in->length - (in->cur - in->base);

	mov	ebx, DWORD PTR [edi+24]
	sub	ebx, ecx
	add	ebx, DWORD PTR tv2621[ebp]
	jmp	SHORT $LN59@htmlParseT
$LN58@htmlParseT:

; 5585 : 		else
; 5586 : 		    avail = xmlBufUse(in->buf->buffer) - (in->cur - in->base);

	mov	eax, DWORD PTR [edi+16]
	push	DWORD PTR [edx+16]
	mov	DWORD PTR $T2[ebp], eax
	call	_xmlBufUse
	mov	ecx, DWORD PTR $T2[ebp]
	mov	ebx, eax
	mov	eax, DWORD PTR [edi+12]
	add	esp, 4
	sub	eax, ecx
	add	ebx, eax
$LN59@htmlParseT:

; 5587 : 		if (avail < 1)

	cmp	ebx, 1
	jl	$done$249

; 5588 : 		    goto done;
; 5589 : 		cur = in->cur[0];

	mov	al, BYTE PTR [ecx]

; 5590 : 		if (IS_BLANK_CH(cur)) {

	cmp	al, 32					; 00000020H
	je	$LN62@htmlParseT
	cmp	al, 9
	jb	SHORT $LN63@htmlParseT
	cmp	al, 10					; 0000000aH
	jbe	$LN62@htmlParseT
$LN63@htmlParseT:
	cmp	al, 13					; 0000000dH
	je	$LN62@htmlParseT

; 5591 : 		    htmlParseCharData(ctxt);
; 5592 : 		    goto done;
; 5593 : 		}
; 5594 : 		if (avail < 2)

	cmp	ebx, 2
	jl	$done$249

; 5595 : 		    goto done;
; 5596 : 		next = in->cur[1];

	mov	dl, BYTE PTR [ecx+1]

; 5597 : 	        if ((cur == '<') && (next == '!') &&
; 5598 : 		    (in->cur[2] == '-') && (in->cur[3] == '-')) {

	cmp	al, 60					; 0000003cH
	jne	$LN71@htmlParseT
	cmp	dl, 33					; 00000021H
	jne	SHORT $LN214@htmlParseT
	cmp	BYTE PTR [ecx+2], 45			; 0000002dH
	jne	$LN216@htmlParseT
	cmp	BYTE PTR [ecx+3], 45			; 0000002dH
	jne	$LN216@htmlParseT

; 5599 : 		    if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN67@htmlParseT
	push	1
	push	1
	push	62					; 0000003eH
	push	45					; 0000002dH
	push	45					; 0000002dH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN67@htmlParseT:

; 5600 : 		        (htmlParseLookupSequence(ctxt, '-', '-', '>', 1, 1) < 0))
; 5601 : 			goto done;
; 5602 : #ifdef DEBUG_PUSH
; 5603 : 		    xmlGenericError(xmlGenericErrorContext,
; 5604 : 			    "HPP: Parsing Comment\n");
; 5605 : #endif
; 5606 : 		    htmlParseComment(ctxt);

	push	esi
	call	_htmlParseComment

; 5632 : 		}
; 5633 : 		break;

	add	esp, 4
	mov	DWORD PTR [esi+172], 14			; 0000000eH
	jmp	$LN4@htmlParseT
$LN214@htmlParseT:

; 5607 : 		    ctxt->instate = XML_PARSER_EPILOG;
; 5608 : 	        } else if ((cur == '<') && (next == '?')) {

	cmp	dl, 63					; 0000003fH
	jne	$LN215@htmlParseT

; 5609 : 		    if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN70@htmlParseT
	push	1
	push	0
	push	0
	push	0
	push	62					; 0000003eH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN70@htmlParseT:

; 5610 : 		        (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0))
; 5611 : 			goto done;
; 5612 : #ifdef DEBUG_PUSH
; 5613 : 		    xmlGenericError(xmlGenericErrorContext,
; 5614 : 			    "HPP: Parsing PI\n");
; 5615 : #endif
; 5616 : 		    htmlParsePI(ctxt);

	push	esi
	call	_htmlParsePI

; 5632 : 		}
; 5633 : 		break;

	add	esp, 4
	mov	DWORD PTR [esi+172], 14			; 0000000eH
	jmp	$LN4@htmlParseT
$LN74@htmlParseT:

; 5634 :             case XML_PARSER_START_TAG: {
; 5635 : 	        const xmlChar *name;
; 5636 : 		int failed;
; 5637 : 		const htmlElemDesc * info;
; 5638 : 
; 5639 : 		/*
; 5640 : 		 * no chars in buffer
; 5641 : 		 */
; 5642 : 		if (avail < 1)
; 5643 : 		    goto done;
; 5644 : 		/*
; 5645 : 		 * not enouth chars in buffer
; 5646 : 		 */
; 5647 : 		if (avail < 2) {

	mov	edi, DWORD PTR _terminate$[ebp]
	cmp	ebx, 2
	jge	SHORT $LN76@htmlParseT

; 5648 : 		    if (!terminate)

	test	edi, edi
	je	$done$249

; 5649 : 			goto done;
; 5650 : 		    else
; 5651 : 			next = ' ';

	mov	al, 32					; 00000020H

; 5652 : 		} else {

	jmp	SHORT $LN77@htmlParseT
$LN76@htmlParseT:

; 5653 : 		    next = in->cur[1];

	mov	al, BYTE PTR [ecx+1]
$LN77@htmlParseT:

; 5654 : 		}
; 5655 : 		cur = in->cur[0];
; 5656 : 	        if (cur != '<') {

	cmp	dl, 60					; 0000003cH
	jne	$LN239@htmlParseT

; 5657 : 		    ctxt->instate = XML_PARSER_CONTENT;
; 5658 : #ifdef DEBUG_PUSH
; 5659 : 		    xmlGenericError(xmlGenericErrorContext,
; 5660 : 			    "HPP: entering CONTENT\n");
; 5661 : #endif
; 5662 : 		    break;
; 5663 : 		}
; 5664 : 		if (next == '/') {

	cmp	al, 47					; 0000002fH
	jne	SHORT $LN81@htmlParseT

; 5665 : 		    ctxt->instate = XML_PARSER_END_TAG;

	mov	DWORD PTR [esi+172], 9

; 5666 : 		    ctxt->checkIndex = 0;

	mov	DWORD PTR [esi+204], 0

; 5667 : #ifdef DEBUG_PUSH
; 5668 : 		    xmlGenericError(xmlGenericErrorContext,
; 5669 : 			    "HPP: entering END_TAG\n");
; 5670 : #endif
; 5671 : 		    break;

	jmp	$LN4@htmlParseT
$LN81@htmlParseT:

; 5672 : 		}
; 5673 : 		if ((!terminate) &&

	test	edi, edi
	jne	SHORT $LN82@htmlParseT
	push	1
	push	edi
	push	edi
	push	edi
	push	62					; 0000003eH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN82@htmlParseT:

; 5674 : 		    (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0))
; 5675 : 		    goto done;
; 5676 : 
; 5677 :                 /* Capture start position */
; 5678 : 	        if (ctxt->record_info) {

	cmp	DWORD PTR [esi+68], 0
	je	SHORT $LN226@htmlParseT

; 5679 : 	             node_info.begin_pos = ctxt->input->consumed +

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+36]
	sub	eax, DWORD PTR [ecx+12]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _node_info$[ebp+4], eax

; 5680 : 	                                (CUR_PTR - ctxt->input->base);
; 5681 : 	             node_info.begin_line = ctxt->input->line;

	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _node_info$[ebp+8], eax
$LN226@htmlParseT:

; 5682 : 	        }
; 5683 : 
; 5684 : 
; 5685 : 		failed = htmlParseStartTag(ctxt);

	push	esi
	call	_htmlParseStartTag

; 5686 : 		name = ctxt->name;

	mov	edi, DWORD PTR [esi+184]
	add	esp, 4

; 5687 : 		if ((failed == -1) ||

	cmp	eax, -1
	je	$LN85@htmlParseT
	test	edi, edi
	je	$LN85@htmlParseT

; 5692 : 		}
; 5693 : 
; 5694 : 		/*
; 5695 : 		 * Lookup the info for that element.
; 5696 : 		 */
; 5697 : 		info = htmlTagLookup(name);

	push	edi
	call	_htmlTagLookup
	add	esp, 4
	mov	DWORD PTR _info$1$[ebp], eax

; 5698 : 		if (info == NULL) {

	test	eax, eax
	jne	SHORT $LN87@htmlParseT

; 5699 : 		    htmlParseErr(ctxt, XML_HTML_UNKNOWN_TAG,

	push	eax
	push	edi
	push	OFFSET ??_C@_0BA@NAOEEOLP@Tag?5?$CFs?5invalid?6@
	push	801					; 00000321H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN87@htmlParseT:

; 5700 : 		                 "Tag %s invalid\n", name, NULL);
; 5701 : 		}
; 5702 : 
; 5703 : 		/*
; 5704 : 		 * Check for an Empty Element labeled the XML/SGML way
; 5705 : 		 */
; 5706 : 		if ((CUR == '/') && (NXT(1) == '>')) {

	mov	eax, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [eax+16]
	mov	cl, BYTE PTR [edx]
	cmp	cl, 47					; 0000002fH
	jne	SHORT $LN88@htmlParseT
	cmp	BYTE PTR [edx+1], 62			; 0000003eH
	jne	SHORT $LN88@htmlParseT

; 5707 : 		    SKIP(2);

	add	DWORD PTR [esi+200], 2
	add	DWORD PTR [eax+16], 2
	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [eax+32], 2

; 5708 : 		    if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN89@htmlParseT
	mov	eax, DWORD PTR [eax+60]
	test	eax, eax
	je	SHORT $LN89@htmlParseT

; 5709 : 			ctxt->sax->endElement(ctxt->userData, name);

	push	edi
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 8
$LN89@htmlParseT:

; 5710 : 		    htmlnamePop(ctxt);

	push	esi
	call	_htmlnamePop
	add	esp, 4

; 5711 : 		    ctxt->instate = XML_PARSER_CONTENT;
; 5712 : #ifdef DEBUG_PUSH
; 5713 : 		    xmlGenericError(xmlGenericErrorContext,
; 5714 : 			    "HPP: entering CONTENT\n");
; 5715 : #endif
; 5716 : 		    break;

	jmp	$LN239@htmlParseT
$LN88@htmlParseT:

; 5717 : 		}
; 5718 : 
; 5719 : 		if (CUR == '>') {

	cmp	cl, 62					; 0000003eH
	jne	SHORT $LN90@htmlParseT

; 5720 : 		    NEXT;

	push	esi
	call	_xmlNextChar

; 5743 : 		}
; 5744 : 
; 5745 : 		/*
; 5746 : 		 * Check for an Empty Element from DTD definition
; 5747 : 		 */
; 5748 : 		if ((info != NULL) && (info->empty)) {

	mov	eax, DWORD PTR _info$1$[ebp]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN94@htmlParseT
	cmp	BYTE PTR [eax+7], 0
	je	SHORT $LN94@htmlParseT

; 5749 : 		    if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN95@htmlParseT
	mov	eax, DWORD PTR [eax+60]
	test	eax, eax
	je	SHORT $LN95@htmlParseT

; 5750 : 			ctxt->sax->endElement(ctxt->userData, name);

	push	edi
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 8
$LN95@htmlParseT:

; 5751 : 		    htmlnamePop(ctxt);

	push	esi
	call	_htmlnamePop
	add	esp, 4
$LN94@htmlParseT:

; 5752 : 		}
; 5753 : 
; 5754 :                 if (ctxt->record_info)

	cmp	DWORD PTR [esi+68], 0
	je	$LN239@htmlParseT

; 5755 : 	            htmlNodeInfoPush(ctxt, &node_info);

	lea	eax, DWORD PTR _node_info$[ebp]
	push	eax
	push	esi
	call	_htmlNodeInfoPush
	add	esp, 8

; 5756 : 
; 5757 : 		ctxt->instate = XML_PARSER_CONTENT;
; 5758 : #ifdef DEBUG_PUSH
; 5759 : 		xmlGenericError(xmlGenericErrorContext,
; 5760 : 			"HPP: entering CONTENT\n");
; 5761 : #endif
; 5762 :                 break;

	jmp	$LN239@htmlParseT
$LN90@htmlParseT:

; 5721 : 		} else {
; 5722 : 		    htmlParseErr(ctxt, XML_ERR_GT_REQUIRED,

	push	0
	push	edi
	push	OFFSET ??_C@_0CD@HIMAKCPA@Couldn?8t?5find?5end?5of?5Start?5Tag?5@
	push	73					; 00000049H
	push	esi
	call	_htmlParseErr

; 5723 : 		                 "Couldn't find end of Start Tag %s\n",
; 5724 : 				 name, NULL);
; 5725 : 
; 5726 : 		    /*
; 5727 : 		     * end of parsing of this node.
; 5728 : 		     */
; 5729 : 		    if (xmlStrEqual(name, ctxt->name)) {

	push	DWORD PTR [esi+184]
	push	edi
	call	_xmlStrEqual
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN92@htmlParseT

; 5730 : 			nodePop(ctxt);

	push	esi
	call	_nodePop

; 5731 : 			htmlnamePop(ctxt);

	push	esi
	call	_htmlnamePop
	add	esp, 8
$LN92@htmlParseT:

; 5732 : 		    }
; 5733 : 
; 5734 : 		    if (ctxt->record_info)

	cmp	DWORD PTR [esi+68], 0
	je	$LN239@htmlParseT

; 5735 : 		        htmlNodeInfoPush(ctxt, &node_info);

	lea	eax, DWORD PTR _node_info$[ebp]
	push	eax
	push	esi
	call	_htmlNodeInfoPush
	add	esp, 8

; 5736 : 
; 5737 : 		    ctxt->instate = XML_PARSER_CONTENT;
; 5738 : #ifdef DEBUG_PUSH
; 5739 : 		    xmlGenericError(xmlGenericErrorContext,
; 5740 : 			    "HPP: entering CONTENT\n");
; 5741 : #endif
; 5742 : 		    break;

	jmp	$LN239@htmlParseT
$LN85@htmlParseT:

; 5688 : 		    (name == NULL)) {
; 5689 : 		    if (CUR == '>')

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 62			; 0000003eH
	jne	$LN4@htmlParseT

; 5690 : 			NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4

; 5691 : 		    break;

	jmp	$LN4@htmlParseT
$LN97@htmlParseT:

; 5763 : 	    }
; 5764 :             case XML_PARSER_CONTENT: {
; 5765 : 		long cons;
; 5766 :                 /*
; 5767 : 		 * Handle preparsed entities and charRef
; 5768 : 		 */
; 5769 : 		if (ctxt->token != 0) {

	mov	eax, DWORD PTR [esi+176]
	test	eax, eax
	je	SHORT $LN98@htmlParseT

; 5770 : 		    xmlChar chr[2] = { 0 , 0 } ;
; 5771 : 
; 5772 : 		    chr[0] = (xmlChar) ctxt->token;
; 5773 : 		    htmlCheckParagraph(ctxt);

	push	esi
	mov	BYTE PTR _chr$1[ebp+1], 0
	mov	BYTE PTR _chr$1[ebp], al
	call	_htmlCheckParagraph

; 5774 : 		    if ((ctxt->sax != NULL) && (ctxt->sax->characters != NULL))

	mov	eax, DWORD PTR [esi]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN99@htmlParseT
	mov	eax, DWORD PTR [eax+68]
	test	eax, eax
	je	SHORT $LN99@htmlParseT

; 5775 : 			ctxt->sax->characters(ctxt->userData, chr, 1);

	push	1
	lea	ecx, DWORD PTR _chr$1[ebp]
	push	ecx
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 12					; 0000000cH
$LN99@htmlParseT:

; 5776 : 		    ctxt->token = 0;

	mov	DWORD PTR [esi+176], 0

; 5777 : 		    ctxt->checkIndex = 0;

	mov	DWORD PTR [esi+204], 0
$LN98@htmlParseT:

; 5778 : 		}
; 5779 : 		if ((avail == 1) && (terminate)) {

	cmp	ebx, 1
	jne	$LN101@htmlParseT
	cmp	DWORD PTR _terminate$[ebp], 0
	je	$LN233@htmlParseT

; 5780 : 		    cur = in->cur[0];

	mov	edx, DWORD PTR [edi+16]
	mov	al, BYTE PTR [edx]

; 5781 : 		    if ((cur != '<') && (cur != '&')) {

	cmp	al, 60					; 0000003cH
	je	$LN233@htmlParseT
	cmp	al, 38					; 00000026H
	je	$LN233@htmlParseT

; 5782 : 			if (ctxt->sax != NULL) {

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN110@htmlParseT

; 5783 : 			    if (IS_BLANK_CH(cur)) {

	cmp	al, 32					; 00000020H
	je	SHORT $LN105@htmlParseT
	cmp	al, 9
	jb	SHORT $LN106@htmlParseT
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN105@htmlParseT
$LN106@htmlParseT:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN105@htmlParseT

; 5790 : 					ctxt->sax->ignorableWhitespace(
; 5791 : 						ctxt->userData, &in->cur[0], 1);
; 5792 : 				}
; 5793 : 			    } else {
; 5794 : 				htmlCheckParagraph(ctxt);

	push	esi
	call	_htmlCheckParagraph

; 5795 : 				if (ctxt->sax->characters != NULL)

	mov	eax, DWORD PTR [esi]
	add	esp, 4
	mov	eax, DWORD PTR [eax+68]
	test	eax, eax
	je	SHORT $LN110@htmlParseT

; 5796 : 				    ctxt->sax->characters(

	push	1
	push	DWORD PTR [edi+16]
	jmp	SHORT $LN240@htmlParseT
$LN105@htmlParseT:

; 5784 : 				if (ctxt->keepBlanks) {

	cmp	DWORD PTR [esi+208], 0
	je	SHORT $LN107@htmlParseT

; 5785 : 				    if (ctxt->sax->characters != NULL)

	mov	eax, DWORD PTR [ecx+68]

; 5786 : 					ctxt->sax->characters(
; 5787 : 						ctxt->userData, &in->cur[0], 1);
; 5788 : 				} else {

	jmp	SHORT $LN242@htmlParseT
$LN107@htmlParseT:

; 5789 : 				    if (ctxt->sax->ignorableWhitespace != NULL)

	mov	eax, DWORD PTR [ecx+72]
$LN242@htmlParseT:

; 5797 : 					    ctxt->userData, &in->cur[0], 1);
; 5798 : 			    }
; 5799 : 			}
; 5800 : 			ctxt->token = 0;

	test	eax, eax
	je	SHORT $LN110@htmlParseT
	push	1
	push	edx
$LN240@htmlParseT:
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 12					; 0000000cH
$LN110@htmlParseT:
	mov	DWORD PTR [esi+176], 0

; 5801 : 			ctxt->checkIndex = 0;

	mov	DWORD PTR [esi+204], 0

; 5802 : 			in->cur++;

	inc	DWORD PTR [edi+16]

; 5803 : 			break;

	jmp	$LN4@htmlParseT
$LN101@htmlParseT:

; 5804 : 		    }
; 5805 : 		}
; 5806 : 		if (avail < 2)

	cmp	ebx, 2
	jl	$done$249

; 5807 : 		    goto done;
; 5808 : 		cur = in->cur[0];

	mov	eax, DWORD PTR [edi+16]

; 5809 : 		next = in->cur[1];
; 5810 : 		cons = ctxt->nbChars;
; 5811 : 		if ((xmlStrEqual(ctxt->name, BAD_CAST"script")) ||

	push	OFFSET ??_C@_06OLONEIEH@script@
	push	DWORD PTR [esi+184]
	mov	cl, BYTE PTR [eax]
	mov	al, BYTE PTR [eax+1]
	mov	BYTE PTR _next$4$[ebp], al
	mov	eax, DWORD PTR [esi+200]
	mov	BYTE PTR _cur$6$[ebp], cl
	mov	DWORD PTR _cons$1$[ebp], eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN115@htmlParseT
	push	OFFSET ??_C@_05IAKJCFIM@style@
	push	DWORD PTR [esi+184]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN115@htmlParseT

; 5836 : 		    }
; 5837 : 		} else {
; 5838 : 		    /*
; 5839 : 		     * Sometimes DOCTYPE arrives in the middle of the document
; 5840 : 		     */
; 5841 : 		    if ((cur == '<') && (next == '!') &&
; 5842 : 			(UPP(2) == 'D') && (UPP(3) == 'O') &&
; 5843 : 			(UPP(4) == 'C') && (UPP(5) == 'T') &&
; 5844 : 			(UPP(6) == 'Y') && (UPP(7) == 'P') &&

	mov	al, BYTE PTR _cur$6$[ebp]
	cmp	al, 60					; 0000003cH
	jne	$LN133@htmlParseT
	mov	al, BYTE PTR _next$4$[ebp]
	cmp	al, 33					; 00000021H
	jne	$LN218@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+2]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 68					; 00000044H
	jne	$LN219@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+3]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 79					; 0000004fH
	jne	$LN219@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+4]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 67					; 00000043H
	jne	$LN219@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+5]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 84					; 00000054H
	jne	$LN219@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+6]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 89					; 00000059H
	jne	SHORT $LN219@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+7]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN219@htmlParseT
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+8]
	push	eax
	call	DWORD PTR tv2663[ebp]
	add	esp, 4
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN219@htmlParseT

; 5845 : 			(UPP(8) == 'E')) {
; 5846 : 			if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN122@htmlParseT
	push	1
	push	0
	push	0
	push	0
	push	62					; 0000003eH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN122@htmlParseT:

; 5847 : 			    (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0))
; 5848 : 			    goto done;
; 5849 : 			htmlParseErr(ctxt, XML_HTML_STRUCURE_ERROR,

	push	0
	push	OFFSET ??_C@_07JGKBCNAA@DOCTYPE@
	push	OFFSET ??_C@_0BP@FHNHCCJD@Misplaced?5DOCTYPE?5declaration?6@
	push	800					; 00000320H
	push	esi
	call	_htmlParseErr

; 5850 : 			             "Misplaced DOCTYPE declaration\n",
; 5851 : 				     BAD_CAST "DOCTYPE" , NULL);
; 5852 : 			htmlParseDocTypeDecl(ctxt);

	push	esi
	call	_htmlParseDocTypeDecl
	add	esp, 24					; 00000018H

; 5853 : 		    } else if ((cur == '<') && (next == '!') &&

	jmp	SHORT $LN119@htmlParseT
$LN219@htmlParseT:

; 5854 : 			(in->cur[2] == '-') && (in->cur[3] == '-')) {

	mov	eax, DWORD PTR [edi+16]
	cmp	BYTE PTR [eax+2], 45			; 0000002dH
	jne	SHORT $LN221@htmlParseT
	cmp	BYTE PTR [eax+3], 45			; 0000002dH
	jne	SHORT $LN221@htmlParseT

; 5855 : 			if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN125@htmlParseT
	push	1
	push	1
	push	62					; 0000003eH
	push	45					; 0000002dH
	push	45					; 0000002dH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN125@htmlParseT:

; 5856 : 			    (htmlParseLookupSequence(
; 5857 : 				ctxt, '-', '-', '>', 1, 1) < 0))
; 5858 : 			    goto done;
; 5859 : #ifdef DEBUG_PUSH
; 5860 : 			xmlGenericError(xmlGenericErrorContext,
; 5861 : 				"HPP: Parsing Comment\n");
; 5862 : #endif
; 5863 : 			htmlParseComment(ctxt);

	push	esi
	call	_htmlParseComment
$LN243@htmlParseT:

; 5915 : #ifdef DEBUG_PUSH
; 5916 : 			xmlGenericError(xmlGenericErrorContext,
; 5917 : 				"HPP: Parsing char data\n");
; 5918 : #endif
; 5919 : 			htmlParseCharData(ctxt);
; 5920 : 		    }
; 5921 : 		}
; 5922 : 		if (cons == ctxt->nbChars) {

	mov	DWORD PTR [esi+172], 7
$LN246@htmlParseT:
	add	esp, 4
$LN119@htmlParseT:
	mov	eax, DWORD PTR _cons$1$[ebp]
	cmp	eax, DWORD PTR [esi+200]
	jne	$LN4@htmlParseT

; 5923 : 		    if (ctxt->node != NULL) {

	cmp	DWORD PTR [esi+52], 0
	je	SHORT $LN140@htmlParseT

; 5924 : 			htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CG@FCFCBOFE@detected?5an?5error?5in?5element?5co@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN140@htmlParseT:

; 5925 : 			             "detected an error in element content\n",
; 5926 : 				     NULL, NULL);
; 5927 : 		    }
; 5928 : 		    NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4

; 5929 : 		    break;

	jmp	$LN4@htmlParseT
$LN221@htmlParseT:

; 5875 : 		    } else if ((cur == '<') && (next == '!') && (avail < 4)) {

	cmp	ebx, 4
	jl	$done$249

; 5876 : 			goto done;
; 5877 : 		    } else if ((cur == '<') && (next == '/')) {

	jmp	$LN223@htmlParseT
$LN218@htmlParseT:

; 5864 : 			ctxt->instate = XML_PARSER_CONTENT;
; 5865 : 		    } else if ((cur == '<') && (next == '?')) {

	cmp	al, 63					; 0000003fH
	jne	SHORT $LN222@htmlParseT

; 5866 : 			if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN128@htmlParseT
	push	1
	push	0
	push	0
	push	0
	push	62					; 0000003eH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN128@htmlParseT:

; 5867 : 			    (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0))
; 5868 : 			    goto done;
; 5869 : #ifdef DEBUG_PUSH
; 5870 : 			xmlGenericError(xmlGenericErrorContext,
; 5871 : 				"HPP: Parsing PI\n");
; 5872 : #endif
; 5873 : 			htmlParsePI(ctxt);

	push	esi
	call	_htmlParsePI

; 5874 : 			ctxt->instate = XML_PARSER_CONTENT;

	jmp	SHORT $LN243@htmlParseT
$LN222@htmlParseT:

; 5876 : 			goto done;
; 5877 : 		    } else if ((cur == '<') && (next == '/')) {

	cmp	al, 47					; 0000002fH
	jne	$LN223@htmlParseT

; 5878 : 			ctxt->instate = XML_PARSER_END_TAG;

	mov	DWORD PTR [esi+172], 9

; 5879 : 			ctxt->checkIndex = 0;

	mov	DWORD PTR [esi+204], 0

; 5880 : #ifdef DEBUG_PUSH
; 5881 : 			xmlGenericError(xmlGenericErrorContext,
; 5882 : 				"HPP: entering END_TAG\n");
; 5883 : #endif
; 5884 : 			break;

	jmp	$LN4@htmlParseT
$LN133@htmlParseT:

; 5885 : 		    } else if (cur == '<') {
; 5886 : 			ctxt->instate = XML_PARSER_START_TAG;
; 5887 : 			ctxt->checkIndex = 0;
; 5888 : #ifdef DEBUG_PUSH
; 5889 : 			xmlGenericError(xmlGenericErrorContext,
; 5890 : 				"HPP: entering START_TAG\n");
; 5891 : #endif
; 5892 : 			break;
; 5893 : 		    } else if (cur == '&') {

	cmp	al, 38					; 00000026H
	jne	SHORT $LN135@htmlParseT

; 5894 : 			if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN137@htmlParseT
	push	4
	push	OFFSET ??_C@_04HDPHNOLM@?$DL?5?$DO?1@
	push	esi
	call	_htmlParseLookupChars
	add	esp, 12					; 0000000cH
	test	eax, eax
	js	$done$249
$LN137@htmlParseT:

; 5895 : 			    (htmlParseLookupChars(ctxt,
; 5896 :                                                   BAD_CAST "; >/", 4) < 0))
; 5897 : 			    goto done;
; 5898 : #ifdef DEBUG_PUSH
; 5899 : 			xmlGenericError(xmlGenericErrorContext,
; 5900 : 				"HPP: Parsing Reference\n");
; 5901 : #endif
; 5902 : 			/* TODO: check generation of subtrees if noent !!! */
; 5903 : 			htmlParseReference(ctxt);

	push	esi
	call	_htmlParseReference

; 5904 : 		    } else {

	jmp	$LN246@htmlParseT
$LN135@htmlParseT:

; 5905 : 		        /*
; 5906 : 			 * check that the text sequence is complete
; 5907 : 			 * before handing out the data to the parser
; 5908 : 			 * to avoid problems with erroneous end of
; 5909 : 			 * data detection.
; 5910 : 			 */
; 5911 : 			if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN138@htmlParseT
	push	2
	push	OFFSET ??_C@_02OOBBLJDN@?$DM?$CG@
	push	esi
	call	_htmlParseLookupChars
	add	esp, 12					; 0000000cH
	test	eax, eax
	js	$done$249
$LN138@htmlParseT:

; 3109 :     htmlParseCharDataInternal(ctxt, 0);

	push	0
	push	esi

; 5912 :                             (htmlParseLookupChars(ctxt, BAD_CAST "<&", 2) < 0))
; 5913 : 			    goto done;
; 5914 : 			ctxt->checkIndex = 0;

	mov	DWORD PTR [esi+204], 0

; 3109 :     htmlParseCharDataInternal(ctxt, 0);

	call	_htmlParseCharDataInternal
	add	esp, 8
	jmp	$LN119@htmlParseT
$LN115@htmlParseT:

; 5812 : 		    (xmlStrEqual(ctxt->name, BAD_CAST"style"))) {
; 5813 : 		    /*
; 5814 : 		     * Handle SCRIPT/STYLE separately
; 5815 : 		     */
; 5816 : 		    if (!terminate) {

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN118@htmlParseT

; 5817 : 		        int idx;
; 5818 : 			xmlChar val;
; 5819 : 
; 5820 : 			idx = htmlParseLookupSequence(ctxt, '<', '/', 0, 0, 0);

	push	0
	push	0
	push	0
	push	47					; 0000002fH
	push	60					; 0000003cH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H

; 5821 : 			if (idx < 0)

	test	eax, eax
	js	$done$249

; 5822 : 			    goto done;
; 5823 : 		        val = in->cur[idx + 2];
; 5824 : 			if (val == 0) /* bad cut of input */

	mov	ecx, DWORD PTR [edi+16]
	cmp	BYTE PTR [eax+ecx+2], 0
	je	$done$249
$LN118@htmlParseT:

; 5825 : 			    goto done;
; 5826 : 		    }
; 5827 : 		    htmlParseScript(ctxt);

	push	esi
	call	_htmlParseScript
	add	esp, 4

; 5828 : 		    if ((cur == '<') && (next == '/')) {

	cmp	BYTE PTR _cur$6$[ebp], 60		; 0000003cH
	jne	$LN119@htmlParseT
	cmp	BYTE PTR _next$4$[ebp], 47		; 0000002fH
	jne	$LN119@htmlParseT

; 5829 : 			ctxt->instate = XML_PARSER_END_TAG;

	mov	DWORD PTR [esi+172], 9

; 5830 : 			ctxt->checkIndex = 0;

	mov	DWORD PTR [esi+204], 0

; 5831 : #ifdef DEBUG_PUSH
; 5832 : 			xmlGenericError(xmlGenericErrorContext,
; 5833 : 				"HPP: entering END_TAG\n");
; 5834 : #endif
; 5835 : 			break;

	jmp	$LN4@htmlParseT
$LN141@htmlParseT:

; 5930 : 		}
; 5931 : 
; 5932 : 		break;
; 5933 : 	    }
; 5934 :             case XML_PARSER_END_TAG:
; 5935 : 		if (avail < 2)

	cmp	ebx, 2
	jl	$done$249

; 5936 : 		    goto done;
; 5937 : 		if ((!terminate) &&

	cmp	DWORD PTR _terminate$[ebp], 0
	jne	SHORT $LN143@htmlParseT
	push	1
	push	0
	push	0
	push	0
	push	62					; 0000003eH
	push	esi
	call	_htmlParseLookupSequence
	add	esp, 24					; 00000018H
	test	eax, eax
	js	$done$249
$LN143@htmlParseT:

; 5938 : 		    (htmlParseLookupSequence(ctxt, '>', 0, 0, 0, 1) < 0))
; 5939 : 		    goto done;
; 5940 : 		htmlParseEndTag(ctxt);

	push	esi
	call	_htmlParseEndTag
	add	esp, 4

; 5941 : 		if (ctxt->nameNr == 0) {
; 5942 : 		    ctxt->instate = XML_PARSER_EPILOG;
; 5943 : 		} else {
; 5944 : 		    ctxt->instate = XML_PARSER_CONTENT;
; 5945 : 		}
; 5946 : 		ctxt->checkIndex = 0;

	mov	eax, 14					; 0000000eH
	cmp	DWORD PTR [esi+188], 0
	mov	ecx, 7
	cmovne	eax, ecx
	mov	DWORD PTR [esi+172], eax
	mov	DWORD PTR [esi+204], 0

; 5947 : #ifdef DEBUG_PUSH
; 5948 : 		xmlGenericError(xmlGenericErrorContext,
; 5949 : 			"HPP: entering CONTENT\n");
; 5950 : #endif
; 5951 : 	        break;

	jmp	$LN4@htmlParseT
$LN146@htmlParseT:

; 5952 :             case XML_PARSER_CDATA_SECTION:
; 5953 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CF@KKLECLJD@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5C@

; 5954 : 			"HPP: internal error, state == CDATA\n",
; 5955 : 			     NULL, NULL);
; 5956 : 		ctxt->instate = XML_PARSER_CONTENT;
; 5957 : 		ctxt->checkIndex = 0;
; 5958 : #ifdef DEBUG_PUSH
; 5959 : 		xmlGenericError(xmlGenericErrorContext,
; 5960 : 			"HPP: entering CONTENT\n");
; 5961 : #endif
; 5962 : 		break;

	jmp	$LN244@htmlParseT
$LN147@htmlParseT:

; 5963 :             case XML_PARSER_DTD:
; 5964 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CD@KNMNDGMA@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5D@

; 5965 : 			"HPP: internal error, state == DTD\n",
; 5966 : 			     NULL, NULL);
; 5967 : 		ctxt->instate = XML_PARSER_CONTENT;
; 5968 : 		ctxt->checkIndex = 0;
; 5969 : #ifdef DEBUG_PUSH
; 5970 : 		xmlGenericError(xmlGenericErrorContext,
; 5971 : 			"HPP: entering CONTENT\n");
; 5972 : #endif
; 5973 : 		break;

	jmp	SHORT $LN244@htmlParseT
$LN148@htmlParseT:

; 5974 :             case XML_PARSER_COMMENT:
; 5975 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CH@DIGPKIBA@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5C@

; 5976 : 			"HPP: internal error, state == COMMENT\n",
; 5977 : 			     NULL, NULL);
; 5978 : 		ctxt->instate = XML_PARSER_CONTENT;
; 5979 : 		ctxt->checkIndex = 0;
; 5980 : #ifdef DEBUG_PUSH
; 5981 : 		xmlGenericError(xmlGenericErrorContext,
; 5982 : 			"HPP: entering CONTENT\n");
; 5983 : #endif
; 5984 : 		break;

	jmp	SHORT $LN244@htmlParseT
$LN149@htmlParseT:

; 5985 :             case XML_PARSER_PI:
; 5986 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CC@OPBEPNBE@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5P@

; 5987 : 			"HPP: internal error, state == PI\n",
; 5988 : 			     NULL, NULL);
; 5989 : 		ctxt->instate = XML_PARSER_CONTENT;
; 5990 : 		ctxt->checkIndex = 0;
; 5991 : #ifdef DEBUG_PUSH
; 5992 : 		xmlGenericError(xmlGenericErrorContext,
; 5993 : 			"HPP: entering CONTENT\n");
; 5994 : #endif
; 5995 : 		break;

	jmp	SHORT $LN244@htmlParseT
$LN150@htmlParseT:

; 5996 :             case XML_PARSER_ENTITY_DECL:
; 5997 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CL@MKEILABF@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5E@

; 5998 : 			"HPP: internal error, state == ENTITY_DECL\n",
; 5999 : 			     NULL, NULL);
; 6000 : 		ctxt->instate = XML_PARSER_CONTENT;
; 6001 : 		ctxt->checkIndex = 0;
; 6002 : #ifdef DEBUG_PUSH
; 6003 : 		xmlGenericError(xmlGenericErrorContext,
; 6004 : 			"HPP: entering CONTENT\n");
; 6005 : #endif
; 6006 : 		break;

	jmp	SHORT $LN244@htmlParseT
$LN151@htmlParseT:

; 6007 :             case XML_PARSER_ENTITY_VALUE:
; 6008 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CM@CIKPMOBJ@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5E@

; 6009 : 			"HPP: internal error, state == ENTITY_VALUE\n",
; 6010 : 			     NULL, NULL);
; 6011 : 		ctxt->instate = XML_PARSER_CONTENT;
; 6012 : 		ctxt->checkIndex = 0;
; 6013 : #ifdef DEBUG_PUSH
; 6014 : 		xmlGenericError(xmlGenericErrorContext,
; 6015 : 			"HPP: entering DTD\n");
; 6016 : #endif
; 6017 : 		break;

	jmp	SHORT $LN244@htmlParseT
$LN152@htmlParseT:

; 6018 :             case XML_PARSER_ATTRIBUTE_VALUE:
; 6019 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CP@ICHFLFOK@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5A@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN223@htmlParseT:

; 5327 :     int ret = 0;
; 5328 :     htmlParserInputPtr in;
; 5329 :     int avail = 0;
; 5330 :     xmlChar cur, next;
; 5331 : 
; 5332 :     htmlParserNodeInfo node_info;
; 5333 : 
; 5334 : #ifdef DEBUG_PUSH
; 5335 :     switch (ctxt->instate) {
; 5336 : 	case XML_PARSER_EOF:
; 5337 : 	    xmlGenericError(xmlGenericErrorContext,
; 5338 : 		    "HPP: try EOF\n"); break;
; 5339 : 	case XML_PARSER_START:
; 5340 : 	    xmlGenericError(xmlGenericErrorContext,
; 5341 : 		    "HPP: try START\n"); break;
; 5342 : 	case XML_PARSER_MISC:
; 5343 : 	    xmlGenericError(xmlGenericErrorContext,
; 5344 : 		    "HPP: try MISC\n");break;
; 5345 : 	case XML_PARSER_COMMENT:
; 5346 : 	    xmlGenericError(xmlGenericErrorContext,
; 5347 : 		    "HPP: try COMMENT\n");break;
; 5348 : 	case XML_PARSER_PROLOG:
; 5349 : 	    xmlGenericError(xmlGenericErrorContext,
; 5350 : 		    "HPP: try PROLOG\n");break;
; 5351 : 	case XML_PARSER_START_TAG:
; 5352 : 	    xmlGenericError(xmlGenericErrorContext,
; 5353 : 		    "HPP: try START_TAG\n");break;
; 5354 : 	case XML_PARSER_CONTENT:
; 5355 : 	    xmlGenericError(xmlGenericErrorContext,
; 5356 : 		    "HPP: try CONTENT\n");break;
; 5357 : 	case XML_PARSER_CDATA_SECTION:
; 5358 : 	    xmlGenericError(xmlGenericErrorContext,
; 5359 : 		    "HPP: try CDATA_SECTION\n");break;
; 5360 : 	case XML_PARSER_END_TAG:
; 5361 : 	    xmlGenericError(xmlGenericErrorContext,
; 5362 : 		    "HPP: try END_TAG\n");break;
; 5363 : 	case XML_PARSER_ENTITY_DECL:
; 5364 : 	    xmlGenericError(xmlGenericErrorContext,
; 5365 : 		    "HPP: try ENTITY_DECL\n");break;
; 5366 : 	case XML_PARSER_ENTITY_VALUE:
; 5367 : 	    xmlGenericError(xmlGenericErrorContext,
; 5368 : 		    "HPP: try ENTITY_VALUE\n");break;
; 5369 : 	case XML_PARSER_ATTRIBUTE_VALUE:
; 5370 : 	    xmlGenericError(xmlGenericErrorContext,
; 5371 : 		    "HPP: try ATTRIBUTE_VALUE\n");break;
; 5372 : 	case XML_PARSER_DTD:
; 5373 : 	    xmlGenericError(xmlGenericErrorContext,
; 5374 : 		    "HPP: try DTD\n");break;
; 5375 : 	case XML_PARSER_EPILOG:
; 5376 : 	    xmlGenericError(xmlGenericErrorContext,
; 5377 : 		    "HPP: try EPILOG\n");break;
; 5378 : 	case XML_PARSER_PI:
; 5379 : 	    xmlGenericError(xmlGenericErrorContext,
; 5380 : 		    "HPP: try PI\n");break;
; 5381 : 	case XML_PARSER_SYSTEM_LITERAL:
; 5382 : 	    xmlGenericError(xmlGenericErrorContext,
; 5383 : 		    "HPP: try SYSTEM_LITERAL\n");break;
; 5384 :     }
; 5385 : #endif
; 5386 : 
; 5387 :     while (1) {
; 5388 : 
; 5389 : 	in = ctxt->input;

	mov	DWORD PTR [esi+172], 6
	mov	DWORD PTR [esi+204], 0
	jmp	SHORT $LN4@htmlParseT
$LN153@htmlParseT:

; 6020 : 			"HPP: internal error, state == ATTRIBUTE_VALUE\n",
; 6021 : 			     NULL, NULL);
; 6022 : 		ctxt->instate = XML_PARSER_START_TAG;
; 6023 : 		ctxt->checkIndex = 0;
; 6024 : #ifdef DEBUG_PUSH
; 6025 : 		xmlGenericError(xmlGenericErrorContext,
; 6026 : 			"HPP: entering START_TAG\n");
; 6027 : #endif
; 6028 : 		break;
; 6029 : 	    case XML_PARSER_SYSTEM_LITERAL:
; 6030 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0DJ@DADALPJL@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@

; 6031 : 		    "HPP: internal error, state == XML_PARSER_SYSTEM_LITERAL\n",
; 6032 : 			     NULL, NULL);
; 6033 : 		ctxt->instate = XML_PARSER_CONTENT;
; 6034 : 		ctxt->checkIndex = 0;
; 6035 : #ifdef DEBUG_PUSH
; 6036 : 		xmlGenericError(xmlGenericErrorContext,
; 6037 : 			"HPP: entering CONTENT\n");
; 6038 : #endif
; 6039 : 		break;

	jmp	SHORT $LN244@htmlParseT
$LN154@htmlParseT:

; 6040 : 	    case XML_PARSER_IGNORE:
; 6041 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0DB@JCLDPCBF@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@

; 6042 : 			"HPP: internal error, state == XML_PARSER_IGNORE\n",
; 6043 : 			     NULL, NULL);
; 6044 : 		ctxt->instate = XML_PARSER_CONTENT;
; 6045 : 		ctxt->checkIndex = 0;
; 6046 : #ifdef DEBUG_PUSH
; 6047 : 		xmlGenericError(xmlGenericErrorContext,
; 6048 : 			"HPP: entering CONTENT\n");
; 6049 : #endif
; 6050 : 		break;

	jmp	SHORT $LN244@htmlParseT
$LN155@htmlParseT:

; 6051 : 	    case XML_PARSER_PUBLIC_LITERAL:
; 6052 : 		htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0DC@FBPNGOCN@HPP?3?5internal?5error?0?5state?5?$DN?$DN?5X@
$LN244@htmlParseT:

; 5327 :     int ret = 0;
; 5328 :     htmlParserInputPtr in;
; 5329 :     int avail = 0;
; 5330 :     xmlChar cur, next;
; 5331 : 
; 5332 :     htmlParserNodeInfo node_info;
; 5333 : 
; 5334 : #ifdef DEBUG_PUSH
; 5335 :     switch (ctxt->instate) {
; 5336 : 	case XML_PARSER_EOF:
; 5337 : 	    xmlGenericError(xmlGenericErrorContext,
; 5338 : 		    "HPP: try EOF\n"); break;
; 5339 : 	case XML_PARSER_START:
; 5340 : 	    xmlGenericError(xmlGenericErrorContext,
; 5341 : 		    "HPP: try START\n"); break;
; 5342 : 	case XML_PARSER_MISC:
; 5343 : 	    xmlGenericError(xmlGenericErrorContext,
; 5344 : 		    "HPP: try MISC\n");break;
; 5345 : 	case XML_PARSER_COMMENT:
; 5346 : 	    xmlGenericError(xmlGenericErrorContext,
; 5347 : 		    "HPP: try COMMENT\n");break;
; 5348 : 	case XML_PARSER_PROLOG:
; 5349 : 	    xmlGenericError(xmlGenericErrorContext,
; 5350 : 		    "HPP: try PROLOG\n");break;
; 5351 : 	case XML_PARSER_START_TAG:
; 5352 : 	    xmlGenericError(xmlGenericErrorContext,
; 5353 : 		    "HPP: try START_TAG\n");break;
; 5354 : 	case XML_PARSER_CONTENT:
; 5355 : 	    xmlGenericError(xmlGenericErrorContext,
; 5356 : 		    "HPP: try CONTENT\n");break;
; 5357 : 	case XML_PARSER_CDATA_SECTION:
; 5358 : 	    xmlGenericError(xmlGenericErrorContext,
; 5359 : 		    "HPP: try CDATA_SECTION\n");break;
; 5360 : 	case XML_PARSER_END_TAG:
; 5361 : 	    xmlGenericError(xmlGenericErrorContext,
; 5362 : 		    "HPP: try END_TAG\n");break;
; 5363 : 	case XML_PARSER_ENTITY_DECL:
; 5364 : 	    xmlGenericError(xmlGenericErrorContext,
; 5365 : 		    "HPP: try ENTITY_DECL\n");break;
; 5366 : 	case XML_PARSER_ENTITY_VALUE:
; 5367 : 	    xmlGenericError(xmlGenericErrorContext,
; 5368 : 		    "HPP: try ENTITY_VALUE\n");break;
; 5369 : 	case XML_PARSER_ATTRIBUTE_VALUE:
; 5370 : 	    xmlGenericError(xmlGenericErrorContext,
; 5371 : 		    "HPP: try ATTRIBUTE_VALUE\n");break;
; 5372 : 	case XML_PARSER_DTD:
; 5373 : 	    xmlGenericError(xmlGenericErrorContext,
; 5374 : 		    "HPP: try DTD\n");break;
; 5375 : 	case XML_PARSER_EPILOG:
; 5376 : 	    xmlGenericError(xmlGenericErrorContext,
; 5377 : 		    "HPP: try EPILOG\n");break;
; 5378 : 	case XML_PARSER_PI:
; 5379 : 	    xmlGenericError(xmlGenericErrorContext,
; 5380 : 		    "HPP: try PI\n");break;
; 5381 : 	case XML_PARSER_SYSTEM_LITERAL:
; 5382 : 	    xmlGenericError(xmlGenericErrorContext,
; 5383 : 		    "HPP: try SYSTEM_LITERAL\n");break;
; 5384 :     }
; 5385 : #endif
; 5386 : 
; 5387 :     while (1) {
; 5388 : 
; 5389 : 	in = ctxt->input;

	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	mov	DWORD PTR [esi+204], 0
$LN239@htmlParseT:
	mov	DWORD PTR [esi+172], 7
$LN4@htmlParseT:
	mov	edi, DWORD PTR [esi+36]

; 5390 : 	if (in == NULL) break;

	test	edi, edi
	jne	$LL2@htmlParseT
	jmp	SHORT $done$249
$LN215@htmlParseT:

; 5617 : 		    ctxt->instate = XML_PARSER_EPILOG;
; 5618 : 		} else if ((cur == '<') && (next == '!') &&

	cmp	dl, 33					; 00000021H
	jne	SHORT $LN71@htmlParseT
$LN216@htmlParseT:
	cmp	ebx, 4
	jl	SHORT $done$249
$LN71@htmlParseT:

; 5619 : 		           (avail < 4)) {
; 5620 : 		    goto done;
; 5621 : 		} else {
; 5622 : 		    ctxt->errNo = XML_ERR_DOCUMENT_END;
; 5623 : 		    ctxt->wellFormed = 0;
; 5624 : 		    ctxt->instate = XML_PARSER_EOF;
; 5625 : #ifdef DEBUG_PUSH
; 5626 : 		    xmlGenericError(xmlGenericErrorContext,
; 5627 : 			    "HPP: entering EOF\n");
; 5628 : #endif
; 5629 : 		    if ((ctxt->sax) && (ctxt->sax->endDocument != NULL))

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi+84], 5
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+172], -1
	test	eax, eax
	je	SHORT $done$249
	mov	eax, DWORD PTR [eax+52]
	test	eax, eax
	je	SHORT $done$249

; 5630 : 			ctxt->sax->endDocument(ctxt->userData);

	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 4

; 5631 : 		    goto done;

	jmp	SHORT $done$249
$LN62@htmlParseT:

; 3109 :     htmlParseCharDataInternal(ctxt, 0);

	push	0
	push	esi
	call	_htmlParseCharDataInternal
	add	esp, 8
$done$249:

; 6053 : 			"HPP: internal error, state == XML_PARSER_LITERAL\n",
; 6054 : 			     NULL, NULL);
; 6055 : 		ctxt->instate = XML_PARSER_CONTENT;
; 6056 : 		ctxt->checkIndex = 0;
; 6057 : #ifdef DEBUG_PUSH
; 6058 : 		xmlGenericError(xmlGenericErrorContext,
; 6059 : 			"HPP: entering CONTENT\n");
; 6060 : #endif
; 6061 : 		break;
; 6062 : 
; 6063 : 	}
; 6064 :     }
; 6065 : done:
; 6066 :     if ((avail == 0) && (terminate)) {

	mov	edi, DWORD PTR _terminate$[ebp]
	test	ebx, ebx
	jne	$LN158@htmlParseT
	jmp	SHORT $LN205@htmlParseT
$LN224@htmlParseT:

; 5395 : 	if ((avail == 0) && (terminate)) {

	mov	edi, DWORD PTR _terminate$[ebp]
	test	edi, edi
	je	$LN158@htmlParseT

; 5396 : 	    htmlAutoCloseOnEnd(ctxt);

	push	esi
	call	_htmlAutoCloseOnEnd
	add	esp, 4

; 5397 : 	    if ((ctxt->nameNr == 0) && (ctxt->instate != XML_PARSER_EOF)) {

	cmp	DWORD PTR [esi+188], 0
	jne	SHORT $LN205@htmlParseT
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN205@htmlParseT

; 5398 : 		/*
; 5399 : 		 * SAX: end of the document processing.
; 5400 : 		 */
; 5401 : 		ctxt->instate = XML_PARSER_EOF;
; 5402 : 		if ((ctxt->sax) && (ctxt->sax->endDocument != NULL))

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi+172], -1
	test	eax, eax
	je	SHORT $LN205@htmlParseT
	mov	eax, DWORD PTR [eax+52]
	test	eax, eax
	je	SHORT $LN205@htmlParseT

; 5403 : 		    ctxt->sax->endDocument(ctxt->userData);

	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 4
	jmp	SHORT $LN205@htmlParseT
$LN235@htmlParseT:

; 5390 : 	if (in == NULL) break;

	mov	edi, DWORD PTR _terminate$[ebp]
$LN205@htmlParseT:

; 6053 : 			"HPP: internal error, state == XML_PARSER_LITERAL\n",
; 6054 : 			     NULL, NULL);
; 6055 : 		ctxt->instate = XML_PARSER_CONTENT;
; 6056 : 		ctxt->checkIndex = 0;
; 6057 : #ifdef DEBUG_PUSH
; 6058 : 		xmlGenericError(xmlGenericErrorContext,
; 6059 : 			"HPP: entering CONTENT\n");
; 6060 : #endif
; 6061 : 		break;
; 6062 : 
; 6063 : 	}
; 6064 :     }
; 6065 : done:
; 6066 :     if ((avail == 0) && (terminate)) {

	test	edi, edi
	je	SHORT $LN158@htmlParseT

; 6067 : 	htmlAutoCloseOnEnd(ctxt);

	push	esi
	call	_htmlAutoCloseOnEnd
	add	esp, 4

; 6068 : 	if ((ctxt->nameNr == 0) && (ctxt->instate != XML_PARSER_EOF)) {

	cmp	DWORD PTR [esi+188], 0
	jne	SHORT $LN158@htmlParseT
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN158@htmlParseT

; 6069 : 	    /*
; 6070 : 	     * SAX: end of the document processing.
; 6071 : 	     */
; 6072 : 	    ctxt->instate = XML_PARSER_EOF;
; 6073 : 	    if ((ctxt->sax) && (ctxt->sax->endDocument != NULL))

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [esi+172], -1
	test	eax, eax
	je	SHORT $LN158@htmlParseT
	mov	eax, DWORD PTR [eax+52]
	test	eax, eax
	je	SHORT $LN158@htmlParseT

; 6074 : 		ctxt->sax->endDocument(ctxt->userData);

	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 4
	jmp	SHORT $LN158@htmlParseT
$LN233@htmlParseT:

; 6075 : 	}
; 6076 :     }
; 6077 :     if ((!(ctxt->options & HTML_PARSE_NODEFDTD)) && (ctxt->myDoc != NULL) &&

	mov	edi, DWORD PTR _terminate$[ebp]
$LN158@htmlParseT:
	test	BYTE PTR [esi+360], 4
	jne	SHORT $LN228@htmlParseT
	mov	ecx, DWORD PTR [esi+8]
	test	ecx, ecx
	je	SHORT $LN228@htmlParseT
	test	edi, edi
	jne	SHORT $LN160@htmlParseT
	mov	eax, DWORD PTR [esi+172]
	cmp	eax, -1
	je	SHORT $LN160@htmlParseT
	cmp	eax, 14					; 0000000eH
	jne	SHORT $LN228@htmlParseT
$LN160@htmlParseT:

; 6078 : 	((terminate) || (ctxt->instate == XML_PARSER_EOF) ||
; 6079 : 	 (ctxt->instate == XML_PARSER_EPILOG))) {
; 6080 : 	xmlDtdPtr dtd;
; 6081 : 	dtd = xmlGetIntSubset(ctxt->myDoc);

	push	ecx
	call	_xmlGetIntSubset
	add	esp, 4

; 6082 : 	if (dtd == NULL)

	test	eax, eax
	jne	SHORT $LN228@htmlParseT

; 6083 : 	    ctxt->myDoc->intSubset =

	push	OFFSET ??_C@_0CK@JLEAHDEJ@http?3?1?1www?4w3?4org?1TR?1REC?9html40@
	push	OFFSET ??_C@_0CG@CIBPFINF@?9?1?1W3C?1?1DTD?5HTML?54?40?5Transition@
	push	OFFSET ??_C@_04PNIFHPHN@html@
	push	DWORD PTR [esi+8]
	call	_xmlCreateIntSubset
	mov	ecx, DWORD PTR [esi+8]
	add	esp, 16					; 00000010H
	mov	DWORD PTR [ecx+44], eax
$LN228@htmlParseT:

; 6084 : 		xmlCreateIntSubset(ctxt->myDoc, BAD_CAST "html",
; 6085 : 		    BAD_CAST "-//W3C//DTD HTML 4.0 Transitional//EN",
; 6086 : 		    BAD_CAST "http://www.w3.org/TR/REC-html40/loose.dtd");
; 6087 :     }
; 6088 : #ifdef DEBUG_PUSH
; 6089 :     xmlGenericError(xmlGenericErrorContext, "HPP: done %d\n", ret);
; 6090 : #endif
; 6091 :     return(ret);
; 6092 : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN248@htmlParseT:
	DD	$done$249
	DD	$LN15@htmlParseT
	DD	$LN26@htmlParseT
	DD	$LN149@htmlParseT
	DD	$LN147@htmlParseT
	DD	$LN45@htmlParseT
	DD	$LN148@htmlParseT
	DD	$LN74@htmlParseT
	DD	$LN97@htmlParseT
	DD	$LN146@htmlParseT
	DD	$LN141@htmlParseT
	DD	$LN150@htmlParseT
	DD	$LN151@htmlParseT
	DD	$LN152@htmlParseT
	DD	$LN153@htmlParseT
	DD	$LN57@htmlParseT
	DD	$LN154@htmlParseT
	DD	$LN155@htmlParseT
_htmlParseTryOrFinish ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseLookupChars
_TEXT	SEGMENT
_in$1$ = -16						; size = 4
_len$1$ = -12						; size = 4
_buf$1$ = -8						; size = 4
_incomment$1$ = -4					; size = 4
_ctxt$ = 8						; size = 4
_stop$ = 12						; size = 4
_stopLen$ = 16						; size = 4
_htmlParseLookupChars PROC				; COMDAT

; 5260 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR _incomment$1$[ebp], 0
	mov	ebx, DWORD PTR [ecx+36]
	mov	DWORD PTR _in$1$[ebp], ebx
	test	ebx, ebx
	je	$LN23@htmlParseL

; 5261 :     int base, len;
; 5262 :     htmlParserInputPtr in;
; 5263 :     const xmlChar *buf;
; 5264 :     int incomment = 0;
; 5265 :     int i;
; 5266 : 
; 5267 :     in = ctxt->input;
; 5268 :     if (in == NULL)
; 5269 :         return (-1);
; 5270 : 
; 5271 :     base = in->cur - in->base;

	mov	edi, DWORD PTR [ebx+12]
	mov	eax, DWORD PTR [ebx+16]
	sub	eax, edi
	mov	DWORD PTR _buf$1$[ebp], edi

; 5272 :     if (base < 0)

	js	$LN23@htmlParseL

; 5273 :         return (-1);
; 5274 : 
; 5275 :     if (ctxt->checkIndex > base)

	mov	esi, DWORD PTR [ecx+204]

; 5276 :         base = ctxt->checkIndex;
; 5277 : 
; 5278 :     if (in->buf == NULL) {

	cmp	esi, eax
	cmovle	esi, eax
	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	jne	SHORT $LN11@htmlParseL

; 5279 :         buf = in->base;
; 5280 :         len = in->length;

	mov	ecx, DWORD PTR [ebx+24]
	mov	DWORD PTR _len$1$[ebp], ecx

; 5281 :     } else {

	jmp	SHORT $LN12@htmlParseL
$LN11@htmlParseL:

; 5282 :         buf = xmlBufContent(in->buf->buffer);

	push	DWORD PTR [eax+16]
	call	_xmlBufContent

; 5283 :         len = xmlBufUse(in->buf->buffer);

	mov	ecx, DWORD PTR [ebx]
	mov	edi, eax
	mov	DWORD PTR _buf$1$[ebp], eax
	push	DWORD PTR [ecx+16]
	call	_xmlBufUse
	add	esp, 8
	mov	DWORD PTR _len$1$[ebp], eax
	mov	ecx, eax
$LN12@htmlParseL:

; 5284 :     }
; 5285 : 
; 5286 :     for (; base < len; base++) {

	cmp	esi, ecx
	jge	$LN31@htmlParseL
	lea	edx, DWORD PTR [esi+3]
	xor	eax, eax
	lea	ebx, DWORD PTR [esi+4]
$LL4@htmlParseL:

; 5287 :         if (!incomment && (base + 4 < len)) {

	test	eax, eax
	jne	SHORT $LN30@htmlParseL
	cmp	ebx, ecx
	jge	SHORT $LN15@htmlParseL

; 5288 :             if ((buf[base] == '<') && (buf[base + 1] == '!') &&
; 5289 :                 (buf[base + 2] == '-') && (buf[base + 3] == '-')) {

	cmp	BYTE PTR [edi+esi], 60			; 0000003cH
	jne	SHORT $LN15@htmlParseL
	cmp	BYTE PTR [edi+esi+1], 33		; 00000021H
	jne	SHORT $LN15@htmlParseL
	cmp	BYTE PTR [edi+esi+2], 45		; 0000002dH
	jne	SHORT $LN15@htmlParseL
	cmp	BYTE PTR [edi+esi+3], 45		; 0000002dH
	jne	SHORT $LN15@htmlParseL

; 5290 :                 incomment = 1;

	mov	eax, 1

; 5291 :                 /* do not increment past <! - some people use <!--> */
; 5292 :                 base += 2;

	add	esi, 2
	add	ebx, 2
	mov	DWORD PTR _incomment$1$[ebp], eax
	add	edx, 2
$LN30@htmlParseL:

; 5293 :             }
; 5294 :         }
; 5295 :         if (incomment) {
; 5296 :             if (base + 3 > len)

	cmp	edx, ecx
	jg	SHORT $LN23@htmlParseL

; 5297 :                 return (-1);
; 5298 :             if ((buf[base] == '-') && (buf[base + 1] == '-') &&

	cmp	BYTE PTR [edi+esi], 45			; 0000002dH
	jne	SHORT $LN2@htmlParseL
	cmp	BYTE PTR [edi+esi+1], 45		; 0000002dH
	jne	SHORT $LN2@htmlParseL
	cmp	BYTE PTR [edi+esi+2], 62		; 0000003eH
	jne	SHORT $LN2@htmlParseL

; 5299 :                 (buf[base + 2] == '>')) {
; 5300 :                 incomment = 0;

	xor	eax, eax

; 5301 :                 base += 2;

	add	esi, 2
	add	ebx, 2
	mov	DWORD PTR _incomment$1$[ebp], eax
	add	edx, 2

; 5302 :             }
; 5303 :             continue;
; 5304 :         }
; 5305 :         for (i = 0; i < stopLen; ++i) {

	jmp	SHORT $LN2@htmlParseL
$LN15@htmlParseL:
	xor	eax, eax
	cmp	DWORD PTR _stopLen$[ebp], eax
	jle	SHORT $LN32@htmlParseL

; 5306 :             if (buf[base] == stop[i]) {

	mov	cl, BYTE PTR [edi+esi]
	npad	6
$LL7@htmlParseL:
	mov	edi, DWORD PTR _stop$[ebp]
	cmp	cl, BYTE PTR [eax+edi]
	mov	edi, DWORD PTR _buf$1$[ebp]
	je	SHORT $LN22@htmlParseL

; 5302 :             }
; 5303 :             continue;
; 5304 :         }
; 5305 :         for (i = 0; i < stopLen; ++i) {

	inc	eax
	cmp	eax, DWORD PTR _stopLen$[ebp]
	jl	SHORT $LL7@htmlParseL
	mov	ecx, DWORD PTR _len$1$[ebp]
$LN32@htmlParseL:

; 5284 :     }
; 5285 : 
; 5286 :     for (; base < len; base++) {

	mov	eax, DWORD PTR _incomment$1$[ebp]
$LN2@htmlParseL:
	inc	esi
	inc	ebx
	inc	edx
	cmp	esi, ecx
	jl	$LL4@htmlParseL
$LN31@htmlParseL:

; 5309 :             }
; 5310 :         }
; 5311 :     }
; 5312 :     ctxt->checkIndex = base;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+204], esi
$LN23@htmlParseL:

; 5313 :     return (-1);
; 5314 : }

	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@htmlParseL:

; 5307 :                 ctxt->checkIndex = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]

; 5308 :                 return (base - (in->cur - in->base));

	mov	ecx, DWORD PTR _in$1$[ebp]
	pop	edi
	mov	DWORD PTR [eax+204], 0
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [ecx+16]
	add	eax, esi

; 5313 :     return (-1);
; 5314 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseLookupChars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseLookupSequence
_TEXT	SEGMENT
_in$1$ = -20						; size = 4
_invalue$1$ = -16					; size = 4
_incomment$1$ = -12					; size = 4
_len$1$ = -8						; size = 4
_valdellim$1$ = -1					; size = 1
_ctxt$ = 8						; size = 4
_first$ = 12						; size = 1
_next$ = 16						; size = 1
_third$ = 20						; size = 1
_iscomment$ = 24					; size = 4
_ignoreattrval$ = 28					; size = 4
_htmlParseLookupSequence PROC				; COMDAT

; 5132 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edx, DWORD PTR _ctxt$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _incomment$1$[ebp], ecx
	mov	DWORD PTR _invalue$1$[ebp], ecx
	mov	BYTE PTR _valdellim$1$[ebp], cl
	mov	ebx, DWORD PTR [edx+36]
	mov	DWORD PTR _in$1$[ebp], ebx
	test	ebx, ebx
	je	$LN33@htmlParseL

; 5133 :     int base, len;
; 5134 :     htmlParserInputPtr in;
; 5135 :     const xmlChar *buf;
; 5136 :     int incomment = 0;
; 5137 :     int invalue = 0;
; 5138 :     char valdellim = 0x0;
; 5139 : 
; 5140 :     in = ctxt->input;
; 5141 :     if (in == NULL)
; 5142 :         return (-1);
; 5143 : 
; 5144 :     base = in->cur - in->base;

	mov	eax, DWORD PTR [ebx+16]
	mov	edi, DWORD PTR [ebx+12]
	sub	eax, edi

; 5145 :     if (base < 0)

	js	$LN33@htmlParseL

; 5146 :         return (-1);
; 5147 : 
; 5148 :     if (ctxt->checkIndex > base)

	mov	esi, DWORD PTR [edx+204]

; 5149 :         base = ctxt->checkIndex;
; 5150 : 
; 5151 :     if (in->buf == NULL) {

	cmp	esi, eax
	cmovle	esi, eax
	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	jne	SHORT $LN8@htmlParseL

; 5152 :         buf = in->base;
; 5153 :         len = in->length;

	mov	eax, DWORD PTR [ebx+24]

; 5154 :     } else {

	jmp	SHORT $LN45@htmlParseL
$LN8@htmlParseL:

; 5155 :         buf = xmlBufContent(in->buf->buffer);

	push	DWORD PTR [eax+16]
	call	_xmlBufContent

; 5156 :         len = xmlBufUse(in->buf->buffer);

	mov	ecx, DWORD PTR [ebx]
	mov	edi, eax
	push	DWORD PTR [ecx+16]
	call	_xmlBufUse
	add	esp, 8
	xor	ecx, ecx
$LN45@htmlParseL:

; 5157 :     }
; 5158 : 
; 5159 :     /* take into account the sequence length */
; 5160 :     if (third)

	cmp	BYTE PTR _third$[ebp], 0
	mov	DWORD PTR _len$1$[ebp], eax
	je	SHORT $LN10@htmlParseL

; 5161 :         len -= 2;

	sub	eax, 2
	jmp	SHORT $LN46@htmlParseL
$LN10@htmlParseL:

; 5162 :     else if (next)

	cmp	BYTE PTR _next$[ebp], 0
	je	SHORT $LN12@htmlParseL

; 5163 :         len--;

	dec	eax
$LN46@htmlParseL:

; 5164 :     for (; base < len; base++) {

	mov	DWORD PTR _len$1$[ebp], eax
$LN12@htmlParseL:
	cmp	esi, eax
	jge	$LN41@htmlParseL
	lea	edx, DWORD PTR [esi+3]
	lea	ebx, DWORD PTR [esi+4]
$LL4@htmlParseL:

; 5165 :         if ((!incomment) && (base + 4 < len) && (!iscomment)) {

	test	ecx, ecx
	jne	SHORT $LN14@htmlParseL
	cmp	ebx, eax
	jge	SHORT $LN14@htmlParseL
	cmp	DWORD PTR _iscomment$[ebp], ecx
	jne	SHORT $LN14@htmlParseL

; 5166 :             if ((buf[base] == '<') && (buf[base + 1] == '!') &&
; 5167 :                 (buf[base + 2] == '-') && (buf[base + 3] == '-')) {

	cmp	BYTE PTR [edi+esi], 60			; 0000003cH
	jne	SHORT $LN14@htmlParseL
	cmp	BYTE PTR [edi+esi+1], 33		; 00000021H
	jne	SHORT $LN14@htmlParseL
	cmp	BYTE PTR [edi+esi+2], 45		; 0000002dH
	jne	SHORT $LN14@htmlParseL
	cmp	BYTE PTR [edi+esi+3], 45		; 0000002dH
	jne	SHORT $LN14@htmlParseL

; 5168 :                 incomment = 1;

	mov	ecx, 1

; 5169 :                 /* do not increment past <! - some people use <!--> */
; 5170 :                 base += 2;

	add	esi, 2
	add	ebx, 2
	mov	DWORD PTR _incomment$1$[ebp], ecx
	add	edx, 2
$LN14@htmlParseL:

; 5171 :             }
; 5172 :         }
; 5173 :         if (ignoreattrval) {

	cmp	DWORD PTR _ignoreattrval$[ebp], 0
	je	SHORT $LN22@htmlParseL

; 5174 :             if (buf[base] == '"' || buf[base] == '\'') {

	mov	al, BYTE PTR [edi+esi]
	cmp	al, 34					; 00000022H
	je	SHORT $LN18@htmlParseL
	cmp	al, 39					; 00000027H
	je	SHORT $LN18@htmlParseL

; 5184 :                 }
; 5185 :             } else if (invalue) {

	cmp	DWORD PTR _invalue$1$[ebp], 0
	mov	eax, DWORD PTR _len$1$[ebp]
	jne	$LN2@htmlParseL
$LN22@htmlParseL:

; 5186 :                 continue;
; 5187 :             }
; 5188 :         }
; 5189 :         if (incomment) {

	test	ecx, ecx
	je	SHORT $LN23@htmlParseL

; 5190 :             if (base + 3 > len)

	cmp	edx, eax
	jg	$LN33@htmlParseL

; 5191 :                 return (-1);
; 5192 :             if ((buf[base] == '-') && (buf[base + 1] == '-') &&

	cmp	BYTE PTR [edi+esi], 45			; 0000002dH
	jne	$LN2@htmlParseL
	cmp	BYTE PTR [edi+esi+1], 45		; 0000002dH
	jne	$LN2@htmlParseL
	cmp	BYTE PTR [edi+esi+2], 62		; 0000003eH
	jne	SHORT $LN2@htmlParseL

; 5193 :                 (buf[base + 2] == '>')) {
; 5194 :                 incomment = 0;

	xor	ecx, ecx

; 5195 :                 base += 2;

	add	esi, 2
	add	ebx, 2
	mov	DWORD PTR _incomment$1$[ebp], ecx
	add	edx, 2

; 5196 :             }
; 5197 :             continue;

	jmp	SHORT $LN2@htmlParseL
$LN18@htmlParseL:

; 5175 :                 if (invalue) {

	cmp	DWORD PTR _invalue$1$[ebp], 0
	je	SHORT $LN19@htmlParseL

; 5176 :                     if (buf[base] == valdellim) {

	movzx	ecx, al
	movsx	eax, BYTE PTR _valdellim$1$[ebp]
	cmp	ecx, eax
	mov	eax, DWORD PTR _len$1$[ebp]
	mov	ecx, DWORD PTR _incomment$1$[ebp]
	jne	SHORT $LN22@htmlParseL

; 5177 :                         invalue = 0;

	mov	DWORD PTR _invalue$1$[ebp], 0

; 5178 :                         continue;

	jmp	SHORT $LN2@htmlParseL
$LN19@htmlParseL:

; 5179 :                     }
; 5180 :                 } else {
; 5181 :                     valdellim = buf[base];

	mov	BYTE PTR _valdellim$1$[ebp], al

; 5182 :                     invalue = 1;
; 5183 :                     continue;

	mov	eax, DWORD PTR _len$1$[ebp]
	mov	DWORD PTR _invalue$1$[ebp], 1
	jmp	SHORT $LN2@htmlParseL
$LN23@htmlParseL:

; 5198 :         }
; 5199 :         if (buf[base] == first) {

	mov	al, BYTE PTR _first$[ebp]
	cmp	BYTE PTR [edi+esi], al
	mov	eax, DWORD PTR _len$1$[ebp]
	jne	SHORT $LN2@htmlParseL

; 5200 :             if (third != 0) {

	cmp	BYTE PTR _third$[ebp], 0
	je	SHORT $LN27@htmlParseL

; 5201 :                 if ((buf[base + 1] != next) || (buf[base + 2] != third))

	mov	al, BYTE PTR _next$[ebp]
	cmp	BYTE PTR [edi+esi+1], al
	mov	eax, DWORD PTR _len$1$[ebp]
	jne	SHORT $LN2@htmlParseL
	mov	cl, BYTE PTR _third$[ebp]
	cmp	BYTE PTR [edi+esi+2], cl
	mov	ecx, DWORD PTR _incomment$1$[ebp]

; 5202 :                     continue;

	jmp	SHORT $LN47@htmlParseL
$LN27@htmlParseL:

; 5203 :             } else if (next != 0) {

	cmp	BYTE PTR _next$[ebp], 0
	mov	ecx, DWORD PTR _incomment$1$[ebp]
	je	SHORT $LN29@htmlParseL

; 5204 :                 if (buf[base + 1] != next)

	mov	al, BYTE PTR _next$[ebp]
	cmp	BYTE PTR [edi+esi+1], al
	mov	eax, DWORD PTR _len$1$[ebp]
$LN47@htmlParseL:

; 5164 :     for (; base < len; base++) {

	je	SHORT $LN29@htmlParseL
$LN2@htmlParseL:
	inc	esi
	inc	ebx
	inc	edx
	cmp	esi, eax
	jl	$LL4@htmlParseL

; 5223 :         }
; 5224 :     }
; 5225 :     if ((!incomment) && (!invalue))

	test	ecx, ecx
	jne	SHORT $LN33@htmlParseL
	cmp	DWORD PTR _invalue$1$[ebp], ecx
	jne	SHORT $LN33@htmlParseL
$LN41@htmlParseL:

; 5226 :         ctxt->checkIndex = base;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+204], esi
$LN33@htmlParseL:

; 5227 : #ifdef DEBUG_PUSH
; 5228 :     if (next == 0)
; 5229 :         xmlGenericError(xmlGenericErrorContext,
; 5230 :                         "HPP: lookup '%c' failed\n", first);
; 5231 :     else if (third == 0)
; 5232 :         xmlGenericError(xmlGenericErrorContext,
; 5233 :                         "HPP: lookup '%c%c' failed\n", first, next);
; 5234 :     else
; 5235 :         xmlGenericError(xmlGenericErrorContext,
; 5236 :                         "HPP: lookup '%c%c%c' failed\n", first, next,
; 5237 :                         third);
; 5238 : #endif
; 5239 :     return (-1);
; 5240 : }

	pop	edi
	pop	esi
	or	eax, -1
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN29@htmlParseL:

; 5205 :                     continue;
; 5206 :             }
; 5207 :             ctxt->checkIndex = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]

; 5208 : #ifdef DEBUG_PUSH
; 5209 :             if (next == 0)
; 5210 :                 xmlGenericError(xmlGenericErrorContext,
; 5211 :                                 "HPP: lookup '%c' found at %d\n",
; 5212 :                                 first, base);
; 5213 :             else if (third == 0)
; 5214 :                 xmlGenericError(xmlGenericErrorContext,
; 5215 :                                 "HPP: lookup '%c%c' found at %d\n",
; 5216 :                                 first, next, base);
; 5217 :             else
; 5218 :                 xmlGenericError(xmlGenericErrorContext,
; 5219 :                                 "HPP: lookup '%c%c%c' found at %d\n",
; 5220 :                                 first, next, third, base);
; 5221 : #endif
; 5222 :             return (base - (in->cur - in->base));

	mov	ecx, DWORD PTR _in$1$[ebp]
	pop	edi
	mov	DWORD PTR [eax+204], 0
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [ecx+16]
	add	eax, esi

; 5227 : #ifdef DEBUG_PUSH
; 5228 :     if (next == 0)
; 5229 :         xmlGenericError(xmlGenericErrorContext,
; 5230 :                         "HPP: lookup '%c' failed\n", first);
; 5231 :     else if (third == 0)
; 5232 :         xmlGenericError(xmlGenericErrorContext,
; 5233 :                         "HPP: lookup '%c%c' failed\n", first, next);
; 5234 :     else
; 5235 :         xmlGenericError(xmlGenericErrorContext,
; 5236 :                         "HPP: lookup '%c%c%c' failed\n", first, next,
; 5237 :                         third);
; 5238 : #endif
; 5239 :     return (-1);
; 5240 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseLookupSequence ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCreateDocParserCtxt
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_encoding$ = 12						; size = 4
_htmlCreateDocParserCtxt PROC				; COMDAT

; 5056 : htmlCreateDocParserCtxt(const xmlChar *cur, const char *encoding) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _cur$[ebp]
	test	esi, esi
	je	$LN12@htmlCreate

; 5057 :     int len;
; 5058 :     htmlParserCtxtPtr ctxt;
; 5059 : 
; 5060 :     if (cur == NULL)
; 5061 : 	return(NULL);
; 5062 :     len = xmlStrlen(cur);

	push	esi
	call	_xmlStrlen

; 5063 :     ctxt = htmlCreateMemoryParserCtxt((char *)cur, len);

	push	eax
	push	esi
	call	_htmlCreateMemoryParserCtxt
	mov	esi, eax
	add	esp, 12					; 0000000cH

; 5064 :     if (ctxt == NULL)

	test	esi, esi
	je	SHORT $LN12@htmlCreate

; 5066 : 
; 5067 :     if (encoding != NULL) {

	push	edi
	mov	edi, DWORD PTR _encoding$[ebp]
	test	edi, edi
	je	SHORT $LN10@htmlCreate

; 5068 : 	xmlCharEncoding enc;
; 5069 : 	xmlCharEncodingHandlerPtr handler;
; 5070 : 
; 5071 : 	if (ctxt->input->encoding != NULL)

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+44]
	test	eax, eax
	je	SHORT $LN5@htmlCreate

; 5072 : 	    xmlFree((xmlChar *) ctxt->input->encoding);

	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN5@htmlCreate:

; 5073 : 	ctxt->input->encoding = xmlStrdup((const xmlChar *) encoding);

	push	edi
	call	_xmlStrdup
	mov	ecx, DWORD PTR [esi+36]

; 5074 : 
; 5075 : 	enc = xmlParseCharEncoding(encoding);

	push	edi
	mov	DWORD PTR [ecx+44], eax
	call	_xmlParseCharEncoding
	add	esp, 8

; 5076 : 	/*
; 5077 : 	 * registered set of known encodings
; 5078 : 	 */
; 5079 : 	if (enc != XML_CHAR_ENCODING_ERROR) {

	cmp	eax, -1
	je	SHORT $LN6@htmlCreate

; 5080 : 	    xmlSwitchEncoding(ctxt, enc);

	push	eax
	push	esi
	call	_xmlSwitchEncoding
	add	esp, 8

; 5081 : 	    if (ctxt->errNo == XML_ERR_UNSUPPORTED_ENCODING) {

	cmp	DWORD PTR [esi+84], 32			; 00000020H
	jne	SHORT $LN10@htmlCreate
$LN9@htmlCreate:

; 5093 : 	    } else {
; 5094 : 		htmlParseErr(ctxt, XML_ERR_UNSUPPORTED_ENCODING,
; 5095 : 		             "Unsupported encoding %s\n",
; 5096 : 			     (const xmlChar *) encoding, NULL);
; 5097 : 	    }
; 5098 : 	}
; 5099 :     }
; 5100 :     return(ctxt);

	push	0
	push	edi
	push	OFFSET ??_C@_0BJ@FCHADMKI@Unsupported?5encoding?5?$CFs?6@
	push	32					; 00000020H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN10@htmlCreate:
	pop	edi
	mov	eax, esi
	pop	esi

; 5101 : }

	pop	ebp
	ret	0
$LN6@htmlCreate:

; 5082 : 		htmlParseErr(ctxt, XML_ERR_UNSUPPORTED_ENCODING,
; 5083 : 		             "Unsupported encoding %s\n",
; 5084 : 			     (const xmlChar *) encoding, NULL);
; 5085 : 	    }
; 5086 : 	} else {
; 5087 : 	    /*
; 5088 : 	     * fallback for unknown encodings
; 5089 : 	     */
; 5090 : 	    handler = xmlFindCharEncodingHandler((const char *) encoding);

	push	edi
	call	_xmlFindCharEncodingHandler
	add	esp, 4

; 5091 : 	    if (handler != NULL) {

	test	eax, eax
	je	SHORT $LN9@htmlCreate

; 5092 : 		xmlSwitchToEncoding(ctxt, handler);

	push	eax
	push	esi
	call	_xmlSwitchToEncoding
	add	esp, 8

; 5093 : 	    } else {
; 5094 : 		htmlParseErr(ctxt, XML_ERR_UNSUPPORTED_ENCODING,
; 5095 : 		             "Unsupported encoding %s\n",
; 5096 : 			     (const xmlChar *) encoding, NULL);
; 5097 : 	    }
; 5098 : 	}
; 5099 :     }
; 5100 :     return(ctxt);

	mov	eax, esi
	pop	edi
	pop	esi

; 5101 : }

	pop	ebp
	ret	0
$LN12@htmlCreate:

; 5065 : 	return(NULL);

	xor	eax, eax
	pop	esi

; 5101 : }

	pop	ebp
	ret	0
_htmlCreateDocParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlInitParserCtxt
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlInitParserCtxt PROC				; COMDAT

; 4862 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _ctxt$[ebp]
	test	ebx, ebx
	jne	SHORT $LN2@htmlInitPa

; 4863 :     htmlSAXHandler *sax;
; 4864 : 
; 4865 :     if (ctxt == NULL) return(-1);

	or	eax, -1
	pop	ebx

; 4961 : }

	pop	ebp
	ret	0
$LN2@htmlInitPa:
	push	edi

; 4866 :     memset(ctxt, 0, sizeof(htmlParserCtxt));

	push	472					; 000001d8H
	push	0
	push	ebx
	call	_memset
	add	esp, 12					; 0000000cH

; 4867 : 
; 4868 :     ctxt->dict = xmlDictCreate();

	call	_xmlDictCreate
	mov	DWORD PTR [ebx+296], eax

; 4869 :     if (ctxt->dict == NULL) {

	test	eax, eax
	je	$LN42@htmlInitPa

; 4870 :         htmlErrMemory(NULL, "htmlInitParserCtxt: out of memory\n");
; 4871 : 	return(-1);
; 4872 :     }
; 4873 :     sax = (htmlSAXHandler *) xmlMalloc(sizeof(htmlSAXHandler));

	push	128					; 00000080H
	call	DWORD PTR _xmlMalloc
	mov	edi, eax
	add	esp, 4

; 4874 :     if (sax == NULL) {

	test	edi, edi
	je	$LN42@htmlInitPa

; 4877 :     }
; 4878 :     else
; 4879 :         memset(sax, 0, sizeof(htmlSAXHandler));

	push	128					; 00000080H
	push	0
	push	edi
	call	_memset

; 4880 : 
; 4881 :     /* Allocate the Input stack */
; 4882 :     ctxt->inputTab = (htmlParserInputPtr *)

	push	20					; 00000014H
	call	DWORD PTR _xmlMalloc
	add	esp, 16					; 00000010H
	mov	DWORD PTR [ebx+48], eax

; 4883 :                       xmlMalloc(5 * sizeof(htmlParserInputPtr));
; 4884 :     if (ctxt->inputTab == NULL) {

	test	eax, eax
	jne	SHORT $LN6@htmlInitPa

; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	eax
	push	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@
	push	eax
	push	eax
	push	3
	push	2
	push	1
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
$LN45@htmlInitPa:
	add	esp, 68					; 00000044H
	mov	DWORD PTR [ebx+40], 0
	mov	DWORD PTR [ebx+44], 0

; 4875 :         htmlErrMemory(NULL, "htmlInitParserCtxt: out of memory\n");
; 4876 : 	return(-1);

	or	eax, -1

; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	mov	DWORD PTR [ebx+36], 0
	pop	edi
	pop	ebx

; 4961 : }

	pop	ebp
	ret	0
$LN6@htmlInitPa:

; 4885 :         htmlErrMemory(NULL, "htmlInitParserCtxt: out of memory\n");
; 4886 : 	ctxt->inputNr = 0;
; 4887 : 	ctxt->inputMax = 0;
; 4888 : 	ctxt->input = NULL;
; 4889 : 	return(-1);
; 4890 :     }
; 4891 :     ctxt->inputNr = 0;
; 4892 :     ctxt->inputMax = 5;
; 4893 :     ctxt->input = NULL;
; 4894 :     ctxt->version = NULL;
; 4895 :     ctxt->encoding = NULL;
; 4896 :     ctxt->standalone = -1;
; 4897 :     ctxt->instate = XML_PARSER_START;
; 4898 : 
; 4899 :     /* Allocate the Node stack */
; 4900 :     ctxt->nodeTab = (htmlNodePtr *) xmlMalloc(10 * sizeof(htmlNodePtr));

	push	40					; 00000028H
	mov	DWORD PTR [ebx+40], 0
	mov	DWORD PTR [ebx+44], 5
	mov	DWORD PTR [ebx+36], 0
	mov	DWORD PTR [ebx+20], 0
	mov	DWORD PTR [ebx+24], 0
	mov	DWORD PTR [ebx+28], -1
	mov	DWORD PTR [ebx+172], 0
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	mov	DWORD PTR [ebx+64], eax

; 4901 :     if (ctxt->nodeTab == NULL) {

	test	eax, eax
	jne	SHORT $LN7@htmlInitPa

; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	eax
	push	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@
	push	eax
	push	eax
	push	3
	push	2
	push	1
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
$LN46@htmlInitPa:
	mov	DWORD PTR [ebx+56], 0
	mov	DWORD PTR [ebx+60], 0
	mov	DWORD PTR [ebx+52], 0
	jmp	$LN45@htmlInitPa
$LN7@htmlInitPa:

; 4902 :         htmlErrMemory(NULL, "htmlInitParserCtxt: out of memory\n");
; 4903 : 	ctxt->nodeNr = 0;
; 4904 : 	ctxt->nodeMax = 0;
; 4905 : 	ctxt->node = NULL;
; 4906 : 	ctxt->inputNr = 0;
; 4907 : 	ctxt->inputMax = 0;
; 4908 : 	ctxt->input = NULL;
; 4909 : 	return(-1);
; 4910 :     }
; 4911 :     ctxt->nodeNr = 0;
; 4912 :     ctxt->nodeMax = 10;
; 4913 :     ctxt->node = NULL;
; 4914 : 
; 4915 :     /* Allocate the Name stack */
; 4916 :     ctxt->nameTab = (const xmlChar **) xmlMalloc(10 * sizeof(xmlChar *));

	push	40					; 00000028H
	mov	DWORD PTR [ebx+56], 0
	mov	DWORD PTR [ebx+60], 10			; 0000000aH
	mov	DWORD PTR [ebx+52], 0
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	mov	DWORD PTR [ebx+196], eax

; 4917 :     if (ctxt->nameTab == NULL) {

	test	eax, eax
	jne	SHORT $LN8@htmlInitPa

; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	eax
	push	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@
	push	eax
	push	eax
	push	3
	push	2
	push	1
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError

; 4918 :         htmlErrMemory(NULL, "htmlInitParserCtxt: out of memory\n");
; 4919 : 	ctxt->nameNr = 0;

	mov	DWORD PTR [ebx+188], 0

; 4920 : 	ctxt->nameMax = 0;

	mov	DWORD PTR [ebx+192], 0

; 4921 : 	ctxt->name = NULL;

	mov	DWORD PTR [ebx+184], 0

; 4922 : 	ctxt->nodeNr = 0;
; 4923 : 	ctxt->nodeMax = 0;
; 4924 : 	ctxt->node = NULL;
; 4925 : 	ctxt->inputNr = 0;
; 4926 : 	ctxt->inputMax = 0;
; 4927 : 	ctxt->input = NULL;
; 4928 : 	return(-1);

	jmp	$LN46@htmlInitPa
$LN8@htmlInitPa:
	push	esi

; 4929 :     }
; 4930 :     ctxt->nameNr = 0;

	mov	DWORD PTR [ebx+188], 0

; 4931 :     ctxt->nameMax = 10;

	mov	DWORD PTR [ebx+192], 10			; 0000000aH

; 4932 :     ctxt->name = NULL;

	mov	DWORD PTR [ebx+184], 0

; 4933 : 
; 4934 :     ctxt->nodeInfoTab = NULL;

	mov	DWORD PTR [ebx+460], 0

; 4935 :     ctxt->nodeInfoNr  = 0;

	mov	DWORD PTR [ebx+452], 0

; 4936 :     ctxt->nodeInfoMax = 0;

	mov	DWORD PTR [ebx+456], 0

; 4937 : 
; 4938 :     if (sax == NULL) ctxt->sax = (xmlSAXHandlerPtr) &htmlDefaultSAXHandler;
; 4939 :     else {
; 4940 :         ctxt->sax = sax;

	mov	DWORD PTR [ebx], edi

; 4941 : 	memcpy(sax, &htmlDefaultSAXHandler, sizeof(xmlSAXHandlerV1));

	call	___htmlDefaultSAXHandler
	mov	esi, eax
	mov	ecx, 28					; 0000001cH
	rep movsd

; 4942 :     }
; 4943 :     ctxt->userData = ctxt;

	mov	DWORD PTR [ebx+4], ebx

; 4944 :     ctxt->myDoc = NULL;

	mov	DWORD PTR [ebx+8], 0

; 4945 :     ctxt->wellFormed = 1;

	mov	DWORD PTR [ebx+12], 1

; 4946 :     ctxt->replaceEntities = 0;

	mov	DWORD PTR [ebx+16], 0

; 4947 :     ctxt->linenumbers = xmlLineNumbersDefaultValue;

	call	___xmlLineNumbersDefaultValue
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+280], eax

; 4948 :     ctxt->keepBlanks = xmlKeepBlanksDefaultValue;

	call	___xmlKeepBlanksDefaultValue
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ebx+208], eax

; 4949 :     ctxt->html = 1;
; 4950 :     ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_0;
; 4951 :     ctxt->vctxt.userData = ctxt;
; 4952 :     ctxt->vctxt.error = xmlParserValidityError;
; 4953 :     ctxt->vctxt.warning = xmlParserValidityWarning;
; 4954 :     ctxt->record_info = 0;
; 4955 :     ctxt->validate = 0;
; 4956 :     ctxt->nbChars = 0;
; 4957 :     ctxt->checkIndex = 0;
; 4958 :     ctxt->catalogs = NULL;
; 4959 :     xmlInitNodeInfoSeq(&ctxt->node_seq);

	lea	eax, DWORD PTR [ebx+72]
	push	eax
	mov	DWORD PTR [ebx+32], 1
	mov	DWORD PTR [ebx+136], -1412623820	; abcd1234H
	mov	DWORD PTR [ebx+108], ebx
	mov	DWORD PTR [ebx+112], OFFSET _xmlParserValidityError
	mov	DWORD PTR [ebx+116], OFFSET _xmlParserValidityWarning
	mov	DWORD PTR [ebx+68], 0
	mov	DWORD PTR [ebx+104], 0
	mov	DWORD PTR [ebx+200], 0
	mov	DWORD PTR [ebx+204], 0
	mov	DWORD PTR [ebx+284], 0
	call	_xmlInitNodeInfoSeq
	add	esp, 4

; 4960 :     return(0);

	xor	eax, eax
	pop	esi
	pop	edi
	pop	ebx

; 4961 : }

	pop	ebp
	ret	0
$LN42@htmlInitPa:

; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0CD@JDCEFLJF@htmlInitParserCtxt?3?5out?5of?5memo@
	push	0
	push	0
	push	3
	push	2
	push	1
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 4875 :         htmlErrMemory(NULL, "htmlInitParserCtxt: out of memory\n");
; 4876 : 	return(-1);

	or	eax, -1
	pop	edi
	pop	ebx

; 4961 : }

	pop	ebp
	ret	0
_htmlInitParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseContentInternal
_TEXT	SEGMENT
_cons$1$ = -4						; size = 4
_depth$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseContentInternal PROC				; COMDAT

; 4541 : htmlParseContentInternal(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
$LN24@htmlParseC:

; 4542 :     xmlChar *currentNode;
; 4543 :     int depth;
; 4544 :     const xmlChar *name;
; 4545 : 
; 4546 :     currentNode = xmlStrdup(ctxt->name);
; 4547 :     depth = ctxt->nameNr;
; 4548 :     while (1) {
; 4549 : 	long cons = ctxt->nbChars;

	push	DWORD PTR [esi+184]
	call	_xmlStrdup
	mov	ebx, DWORD PTR [esi+188]
	mov	edi, eax
	mov	DWORD PTR _depth$1$[ebp], ebx
	add	esp, 4
	npad	3
$LL2@htmlParseC:

; 4550 : 
; 4551 :         GROW;

	cmp	DWORD PTR [esi+292], 0
	mov	eax, DWORD PTR [esi+200]
	mov	DWORD PTR _cons$1$[ebp], eax
	jne	SHORT $LN6@htmlParseC
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN6@htmlParseC
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN6@htmlParseC:

; 4552 : 
; 4553 :         if (ctxt->instate == XML_PARSER_EOF)

	cmp	DWORD PTR [esi+172], -1
	je	$LN41@htmlParseC

; 4554 :             break;
; 4555 : 
; 4556 : 	/*
; 4557 : 	 * Our tag or one of it's parent or children is ending.
; 4558 : 	 */
; 4559 :         if ((CUR == '<') && (NXT(1) == '/')) {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	$LN22@htmlParseC
	mov	al, BYTE PTR [eax+1]
	cmp	al, 47					; 0000002fH
	jne	SHORT $LN67@htmlParseC

; 4560 : 	    if (htmlParseEndTag(ctxt) &&

	push	esi
	call	_htmlParseEndTag
	add	esp, 4
	test	eax, eax
	je	SHORT $LL2@htmlParseC
	test	edi, edi
	jne	$LN71@htmlParseC
	cmp	DWORD PTR [esi+188], edi
	jne	SHORT $LL2@htmlParseC

; 4561 : 		((currentNode != NULL) || (ctxt->nameNr == 0))) {
; 4562 : 		if (currentNode != NULL)

	jmp	$LN24@htmlParseC
$LN67@htmlParseC:

; 4563 : 		    xmlFree(currentNode);
; 4564 : 
; 4565 : 	        currentNode = xmlStrdup(ctxt->name);
; 4566 : 	        depth = ctxt->nameNr;
; 4567 : 	    }
; 4568 : 	    continue; /* while */
; 4569 :         }
; 4570 : 
; 4571 : 	else if ((CUR == '<') &&

	cmp	al, 65					; 00000041H
	jb	SHORT $LN15@htmlParseC
	cmp	al, 90					; 0000005aH
	jbe	SHORT $LN14@htmlParseC
$LN15@htmlParseC:
	cmp	al, 97					; 00000061H
	jb	SHORT $LN16@htmlParseC
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LN14@htmlParseC
$LN16@htmlParseC:
	cmp	al, 95					; 0000005fH
	je	SHORT $LN14@htmlParseC
	cmp	al, 58					; 0000003aH
	jne	$LN22@htmlParseC
$LN14@htmlParseC:

; 4572 : 	         ((IS_ASCII_LETTER(NXT(1))) ||
; 4573 : 		  (NXT(1) == '_') || (NXT(1) == ':'))) {
; 4574 : 	    name = htmlParseHTMLName_nonInvasive(ctxt);

	push	esi
	call	_htmlParseHTMLName_nonInvasive
	mov	ebx, eax
	add	esp, 4

; 4575 : 	    if (name == NULL) {

	test	ebx, ebx
	jne	SHORT $LN17@htmlParseC

; 112  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR [esi+212], eax
	je	SHORT $LN46@htmlParseC
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LL4@htmlParseC
$LN46@htmlParseC:

; 113  :         (ctxt->instate == XML_PARSER_EOF))
; 114  : 	return;
; 115  :     if (ctxt != NULL)
; 116  : 	ctxt->errNo = error;
; 117  :     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_HTML, error,

	push	0
	push	0
	push	OFFSET ??_C@_0CJ@FBFDNGDH@htmlParseStartTag?3?5invalid?5elem@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	2
	push	68					; 00000044H
	push	5
	push	0
	push	esi
	push	0
	push	0
	push	0
	mov	DWORD PTR [esi+84], 68			; 00000044H
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 118  :                     XML_ERR_ERROR, NULL, 0,
; 119  : 		    (const char *) str1, (const char *) str2,
; 120  : 		    NULL, 0, 0,
; 121  : 		    msg, str1, str2);
; 122  :     if (ctxt != NULL)
; 123  : 	ctxt->wellFormed = 0;

	mov	DWORD PTR [esi+12], 0
	npad	3
$LL4@htmlParseC:

; 4576 : 	        htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED,
; 4577 : 			 "htmlParseStartTag: invalid element name\n",
; 4578 : 			 NULL, NULL);
; 4579 : 	        /* Dump the bogus tag like browsers do */
; 4580 : 	        while ((IS_CHAR_CH(CUR)) && (CUR != '>'))

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 9
	jb	SHORT $LN19@htmlParseC
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN18@htmlParseC
$LN19@htmlParseC:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN18@htmlParseC
	cmp	al, 32					; 00000020H
	jb	SHORT $LN5@htmlParseC
$LN18@htmlParseC:
	cmp	al, 62					; 0000003eH
	je	SHORT $LN5@htmlParseC

; 4581 : 	            NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4
	jmp	SHORT $LL4@htmlParseC
$LN17@htmlParseC:

; 4582 : 
; 4583 : 	        htmlParserFinishElementParsing(ctxt);
; 4584 : 	        if (currentNode != NULL)
; 4585 : 	            xmlFree(currentNode);
; 4586 : 
; 4587 : 	        currentNode = xmlStrdup(ctxt->name);
; 4588 : 	        depth = ctxt->nameNr;
; 4589 : 	        continue;
; 4590 : 	    }
; 4591 : 
; 4592 : 	    if (ctxt->name != NULL) {

	mov	eax, DWORD PTR [esi+184]
	test	eax, eax
	je	SHORT $LN82@htmlParseC

; 4593 : 	        if (htmlCheckAutoClose(name, ctxt->name) == 1) {

	push	eax
	push	ebx
	call	_htmlCheckAutoClose
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN82@htmlParseC

; 4594 : 	            htmlAutoClose(ctxt, name);

	push	ebx
	push	esi
	call	_htmlAutoClose

; 4595 : 	            continue;

	mov	ebx, DWORD PTR _depth$1$[ebp]
	add	esp, 8
	jmp	$LL2@htmlParseC
$LN82@htmlParseC:

; 4596 : 	        }
; 4597 : 	    }
; 4598 : 	}
; 4599 : 
; 4600 : 	/*
; 4601 : 	 * Has this node been popped out during parsing of
; 4602 : 	 * the next element
; 4603 : 	 */
; 4604 :         if ((ctxt->nameNr > 0) && (depth >= ctxt->nameNr) &&

	mov	ebx, DWORD PTR _depth$1$[ebp]
$LN22@htmlParseC:
	mov	eax, DWORD PTR [esi+188]
	test	eax, eax
	jle	SHORT $LN23@htmlParseC
	cmp	ebx, eax
	jl	SHORT $LN23@htmlParseC
	push	DWORD PTR [esi+184]
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@htmlParseC
$LN5@htmlParseC:

; 4542 :     xmlChar *currentNode;
; 4543 :     int depth;
; 4544 :     const xmlChar *name;
; 4545 : 
; 4546 :     currentNode = xmlStrdup(ctxt->name);
; 4547 :     depth = ctxt->nameNr;
; 4548 :     while (1) {
; 4549 : 	long cons = ctxt->nbChars;

	push	esi
	call	_htmlParserFinishElementParsing
	add	esp, 4
	test	edi, edi
	je	$LN24@htmlParseC
$LN71@htmlParseC:
	push	edi
	call	DWORD PTR _xmlFree
	add	esp, 4
	jmp	$LN24@htmlParseC
$LN23@htmlParseC:

; 4605 : 	    (!xmlStrEqual(currentNode, ctxt->name)))
; 4606 : 	     {
; 4607 : 	    htmlParserFinishElementParsing(ctxt);
; 4608 : 	    if (currentNode != NULL) xmlFree(currentNode);
; 4609 : 
; 4610 : 	    currentNode = xmlStrdup(ctxt->name);
; 4611 : 	    depth = ctxt->nameNr;
; 4612 : 	    continue;
; 4613 : 	}
; 4614 : 
; 4615 : 	if ((CUR != 0) && ((xmlStrEqual(currentNode, BAD_CAST"script")) ||

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN75@htmlParseC
	push	OFFSET ??_C@_06OLONEIEH@script@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@htmlParseC
	push	OFFSET ??_C@_05IAKJCFIM@style@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN75@htmlParseC
$LN27@htmlParseC:

; 4616 : 	    (xmlStrEqual(currentNode, BAD_CAST"style")))) {
; 4617 : 	    /*
; 4618 : 	     * Handle SCRIPT/STYLE separately
; 4619 : 	     */
; 4620 : 	    htmlParseScript(ctxt);

	push	esi
	call	_htmlParseScript
	add	esp, 4

; 4621 : 	} else {

	jmp	$LN40@htmlParseC
$LN75@htmlParseC:

; 4622 : 	    /*
; 4623 : 	     * Sometimes DOCTYPE arrives in the middle of the document
; 4624 : 	     */
; 4625 : 	    if ((CUR == '<') && (NXT(1) == '!') &&
; 4626 : 		(UPP(2) == 'D') && (UPP(3) == 'O') &&
; 4627 : 		(UPP(4) == 'C') && (UPP(5) == 'T') &&
; 4628 : 		(UPP(6) == 'Y') && (UPP(7) == 'P') &&

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	$LN28@htmlParseC
	cmp	BYTE PTR [eax+1], 33			; 00000021H
	jne	$LN28@htmlParseC
	movzx	eax, BYTE PTR [eax+2]
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	eax, 68					; 00000044H
	jne	$LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+3]
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	eax, 79					; 0000004fH
	jne	$LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+4]
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	eax, 67					; 00000043H
	jne	$LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+5]
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	eax, 84					; 00000054H
	jne	SHORT $LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+6]
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	eax, 89					; 00000059H
	jne	SHORT $LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+7]
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+8]
	push	eax
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN28@htmlParseC

; 4629 : 		(UPP(8) == 'E')) {
; 4630 : 		htmlParseErr(ctxt, XML_HTML_STRUCURE_ERROR,

	push	0
	push	OFFSET ??_C@_07JGKBCNAA@DOCTYPE@
	push	OFFSET ??_C@_0BP@FHNHCCJD@Misplaced?5DOCTYPE?5declaration?6@
	push	800					; 00000320H
	push	esi
	call	_htmlParseErr

; 4631 : 		             "Misplaced DOCTYPE declaration\n",
; 4632 : 			     BAD_CAST "DOCTYPE" , NULL);
; 4633 : 		htmlParseDocTypeDecl(ctxt);

	push	esi
	call	_htmlParseDocTypeDecl
	add	esp, 24					; 00000018H
$LN28@htmlParseC:

; 4634 : 	    }
; 4635 : 
; 4636 : 	    /*
; 4637 : 	     * First case :  a comment
; 4638 : 	     */
; 4639 : 	    if ((CUR == '<') && (NXT(1) == '!') &&
; 4640 : 		(NXT(2) == '-') && (NXT(3) == '-')) {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	cl, BYTE PTR [eax]
	cmp	cl, 60					; 0000003cH
	jne	SHORT $LN33@htmlParseC
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, 33					; 00000021H
	jne	SHORT $LN29@htmlParseC
	cmp	BYTE PTR [eax+2], 45			; 0000002dH
	jne	SHORT $LN29@htmlParseC
	cmp	BYTE PTR [eax+3], 45			; 0000002dH
	jne	SHORT $LN29@htmlParseC

; 4641 : 		htmlParseComment(ctxt);

	push	esi
	call	_htmlParseComment
	add	esp, 4

; 4642 : 	    }

	jmp	SHORT $LN50@htmlParseC
$LN29@htmlParseC:

; 4643 : 
; 4644 : 	    /*
; 4645 : 	     * Second case : a Processing Instruction.
; 4646 : 	     */
; 4647 : 	    else if ((CUR == '<') && (NXT(1) == '?')) {

	push	esi
	cmp	cl, 63					; 0000003fH
	jne	SHORT $LN31@htmlParseC

; 4648 : 		htmlParsePI(ctxt);

	call	_htmlParsePI
	add	esp, 4

; 4649 : 	    }

	jmp	SHORT $LN50@htmlParseC
$LN31@htmlParseC:

; 4650 : 
; 4651 : 	    /*
; 4652 : 	     * Third case :  a sub-element.
; 4653 : 	     */
; 4654 : 	    else if (CUR == '<') {
; 4655 : 		htmlParseElementInternal(ctxt);

	call	_htmlParseElementInternal
	add	esp, 4

; 4656 : 		if (currentNode != NULL) xmlFree(currentNode);

	test	edi, edi
	je	SHORT $LN35@htmlParseC
	push	edi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN35@htmlParseC:

; 4657 : 
; 4658 : 		currentNode = xmlStrdup(ctxt->name);

	push	DWORD PTR [esi+184]
	call	_xmlStrdup

; 4659 : 		depth = ctxt->nameNr;

	mov	ebx, DWORD PTR [esi+188]
	add	esp, 4
	mov	edi, eax
	mov	DWORD PTR _depth$1$[ebp], ebx

; 4660 : 	    }

	jmp	SHORT $LN50@htmlParseC
$LN33@htmlParseC:

; 4661 : 
; 4662 : 	    /*
; 4663 : 	     * Fourth case : a reference. If if has not been resolved,
; 4664 : 	     *    parsing returns it's Name, create the node
; 4665 : 	     */
; 4666 : 	    else if (CUR == '&') {

	cmp	cl, 38					; 00000026H
	jne	SHORT $LN36@htmlParseC

; 4667 : 		htmlParseReference(ctxt);

	push	esi
	call	_htmlParseReference
	add	esp, 4

; 4668 : 	    }

	jmp	SHORT $LN50@htmlParseC
$LN36@htmlParseC:

; 4669 : 
; 4670 : 	    /*
; 4671 : 	     * Fifth case : end of the resource
; 4672 : 	     */
; 4673 : 	    else if (CUR == 0) {

	test	cl, cl
	je	SHORT $LN60@htmlParseC

; 3109 :     htmlParseCharDataInternal(ctxt, 0);

	push	0
	push	esi
	call	_htmlParseCharDataInternal
	add	esp, 8
$LN50@htmlParseC:

; 4675 : 		break;
; 4676 : 	    }
; 4677 : 
; 4678 : 	    /*
; 4679 : 	     * Last case, text. Note that References are handled directly.
; 4680 : 	     */
; 4681 : 	    else {
; 4682 : 		htmlParseCharData(ctxt);
; 4683 : 	    }
; 4684 : 
; 4685 : 	    if (cons == ctxt->nbChars) {

	mov	eax, DWORD PTR _cons$1$[ebp]
	cmp	eax, DWORD PTR [esi+200]
	je	SHORT $LN61@htmlParseC
$LN40@htmlParseC:

; 4688 : 		                 "detected an error in element content\n",
; 4689 : 				 NULL, NULL);
; 4690 : 		}
; 4691 : 		break;
; 4692 : 	    }
; 4693 : 	}
; 4694 :         GROW;

	cmp	DWORD PTR [esi+292], 0
	jne	$LL2@htmlParseC
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	$LL2@htmlParseC
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8

; 4695 :     }

	jmp	$LL2@htmlParseC
$LN61@htmlParseC:

; 4686 : 		if (ctxt->node != NULL) {

	cmp	DWORD PTR [esi+52], 0
	je	SHORT $LN41@htmlParseC

; 4687 : 		    htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CG@FCFCBOFE@detected?5an?5error?5in?5element?5co@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	jmp	SHORT $LN41@htmlParseC
$LN60@htmlParseC:

; 4674 : 		htmlAutoCloseOnEnd(ctxt);

	push	esi
	call	_htmlAutoCloseOnEnd
	add	esp, 4
$LN41@htmlParseC:

; 4696 :     if (currentNode != NULL) xmlFree(currentNode);

	test	edi, edi
	je	SHORT $LN43@htmlParseC
	push	edi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN43@htmlParseC:

; 4697 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseContentInternal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseElementInternal
_TEXT	SEGMENT
_node_info$ = -20					; size = 20
_ctxt$ = 8						; size = 4
_htmlParseElementInternal PROC				; COMDAT

; 4448 : htmlParseElementInternal(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR _node_info$[ebp], 0
	mov	DWORD PTR _node_info$[ebp+4], 0
	mov	DWORD PTR _node_info$[ebp+8], 0
	mov	DWORD PTR _node_info$[ebp+12], 0
	mov	DWORD PTR _node_info$[ebp+16], 0
	test	esi, esi
	je	$LN3@htmlParseE

; 4449 :     const xmlChar *name;
; 4450 :     const htmlElemDesc * info;
; 4451 :     htmlParserNodeInfo node_info = { NULL, 0, 0, 0, 0 };
; 4452 :     int failed;
; 4453 : 
; 4454 :     if ((ctxt == NULL) || (ctxt->input == NULL)) {

	mov	ecx, DWORD PTR [esi+36]
	test	ecx, ecx
	je	$LN3@htmlParseE

; 4456 : 		     "htmlParseElementInternal: context error\n", NULL, NULL);
; 4457 : 	return;
; 4458 :     }
; 4459 : 
; 4460 :     if (ctxt->instate == XML_PARSER_EOF)

	cmp	DWORD PTR [esi+172], -1
	je	$LN18@htmlParseE

; 4461 :         return;
; 4462 : 
; 4463 :     /* Capture start position */
; 4464 :     if (ctxt->record_info) {

	cmp	DWORD PTR [esi+68], 0
	je	SHORT $LN5@htmlParseE

; 4465 :         node_info.begin_pos = ctxt->input->consumed +

	mov	eax, DWORD PTR [ecx+36]
	sub	eax, DWORD PTR [ecx+12]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _node_info$[ebp+4], eax

; 4466 :                           (CUR_PTR - ctxt->input->base);
; 4467 : 	node_info.begin_line = ctxt->input->line;

	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _node_info$[ebp+8], eax
$LN5@htmlParseE:

; 4468 :     }
; 4469 : 
; 4470 :     failed = htmlParseStartTag(ctxt);

	push	edi
	push	esi
	call	_htmlParseStartTag

; 4471 :     name = ctxt->name;

	mov	edi, DWORD PTR [esi+184]
	add	esp, 4

; 4472 :     if ((failed == -1) || (name == NULL)) {

	cmp	eax, -1
	je	$LN7@htmlParseE
	test	edi, edi
	je	$LN7@htmlParseE

; 4475 :         return;
; 4476 :     }
; 4477 : 
; 4478 :     /*
; 4479 :      * Lookup the info for that element.
; 4480 :      */
; 4481 :     info = htmlTagLookup(name);

	push	ebx
	push	edi
	call	_htmlTagLookup
	mov	ebx, eax
	add	esp, 4

; 4482 :     if (info == NULL) {

	test	ebx, ebx
	jne	SHORT $LN9@htmlParseE

; 4483 : 	htmlParseErr(ctxt, XML_HTML_UNKNOWN_TAG,

	push	eax
	push	edi
	push	OFFSET ??_C@_0BA@NAOEEOLP@Tag?5?$CFs?5invalid?6@
	push	801					; 00000321H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN9@htmlParseE:

; 4484 : 	             "Tag %s invalid\n", name, NULL);
; 4485 :     }
; 4486 : 
; 4487 :     /*
; 4488 :      * Check for an Empty Element labeled the XML/SGML way
; 4489 :      */
; 4490 :     if ((CUR == '/') && (NXT(1) == '>')) {

	mov	eax, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [eax+16]
	mov	cl, BYTE PTR [edx]
	cmp	cl, 47					; 0000002fH
	jne	SHORT $LN10@htmlParseE
	cmp	BYTE PTR [edx+1], 62			; 0000003eH
	jne	SHORT $LN10@htmlParseE

; 4491 :         SKIP(2);

	add	DWORD PTR [esi+200], 2
	add	DWORD PTR [eax+16], 2
	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [eax+32], 2
	jmp	SHORT $LN35@htmlParseE
$LN10@htmlParseE:

; 4492 : 	if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))
; 4493 : 	    ctxt->sax->endElement(ctxt->userData, name);
; 4494 : 	htmlnamePop(ctxt);
; 4495 : 	return;
; 4496 :     }
; 4497 : 
; 4498 :     if (CUR == '>') {

	cmp	cl, 62					; 0000003eH
	jne	SHORT $LN12@htmlParseE

; 4499 :         NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4

; 4515 : 	return;
; 4516 :     }
; 4517 : 
; 4518 :     /*
; 4519 :      * Check for an Empty Element from DTD definition
; 4520 :      */
; 4521 :     if ((info != NULL) && (info->empty)) {

	test	ebx, ebx
	je	SHORT $LN16@htmlParseE
	cmp	BYTE PTR [ebx+7], 0
	je	SHORT $LN16@htmlParseE
$LN35@htmlParseE:

; 4522 : 	if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))
; 4523 : 	    ctxt->sax->endElement(ctxt->userData, name);
; 4524 : 	htmlnamePop(ctxt);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN17@htmlParseE
	mov	eax, DWORD PTR [eax+60]
	test	eax, eax
	je	SHORT $LN17@htmlParseE
	push	edi
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 8
$LN17@htmlParseE:
	push	esi
	call	_htmlnamePop
	add	esp, 4
$LN32@htmlParseE:
	pop	ebx
$LN31@htmlParseE:
	pop	edi
$LN18@htmlParseE:
	pop	esi

; 4530 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@htmlParseE:

; 4525 : 	return;
; 4526 :     }
; 4527 : 
; 4528 :     if (ctxt->record_info)

	cmp	DWORD PTR [esi+68], 0
	je	SHORT $LN32@htmlParseE

; 4529 :         htmlNodeInfoPush(ctxt, &node_info);

	lea	eax, DWORD PTR _node_info$[ebp]
	push	eax
	push	esi
	call	_htmlNodeInfoPush
	add	esp, 8
	pop	ebx
	pop	edi
	pop	esi

; 4530 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@htmlParseE:

; 4500 :     } else {
; 4501 : 	htmlParseErr(ctxt, XML_ERR_GT_REQUIRED,

	push	0
	push	edi
	push	OFFSET ??_C@_0CD@HIMAKCPA@Couldn?8t?5find?5end?5of?5Start?5Tag?5@
	push	73					; 00000049H
	push	esi
	call	_htmlParseErr

; 4502 : 	             "Couldn't find end of Start Tag %s\n", name, NULL);
; 4503 : 
; 4504 : 	/*
; 4505 : 	 * end of parsing of this node.
; 4506 : 	 */
; 4507 : 	if (xmlStrEqual(name, ctxt->name)) {

	push	DWORD PTR [esi+184]
	push	edi
	call	_xmlStrEqual
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN14@htmlParseE

; 4508 : 	    nodePop(ctxt);

	push	esi
	call	_nodePop

; 4509 : 	    htmlnamePop(ctxt);

	push	esi
	call	_htmlnamePop
	add	esp, 8
$LN14@htmlParseE:

; 4510 : 	}
; 4511 : 
; 4512 :         if (ctxt->record_info)

	cmp	DWORD PTR [esi+68], 0
	je	SHORT $LN15@htmlParseE

; 4513 :             htmlNodeInfoPush(ctxt, &node_info);

	lea	eax, DWORD PTR _node_info$[ebp]
	push	eax
	push	esi
	call	_htmlNodeInfoPush
	add	esp, 8
$LN15@htmlParseE:

; 4514 :         htmlParserFinishElementParsing(ctxt);

	push	esi
	call	_htmlParserFinishElementParsing

; 4522 : 	if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))
; 4523 : 	    ctxt->sax->endElement(ctxt->userData, name);
; 4524 : 	htmlnamePop(ctxt);

	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi

; 4530 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@htmlParseE:

; 4473 : 	if (CUR == '>')

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 62			; 0000003eH
	jne	SHORT $LN31@htmlParseE

; 4474 : 	    NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4
	pop	edi
	pop	esi

; 4530 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@htmlParseE:

; 4455 : 	htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CJ@HLPMKEOA@htmlParseElementInternal?3?5conte@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	pop	esi

; 4530 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseElementInternal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParserFinishElementParsing
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlParserFinishElementParsing PROC			; COMDAT

; 4419 : htmlParserFinishElementParsing(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [esi+52], 0
	je	SHORT $LN2@htmlParser

; 4420 :     /*
; 4421 :      * Capture end position and add node
; 4422 :      */
; 4423 :     if ( ctxt->node != NULL && ctxt->record_info ) {

	cmp	DWORD PTR [esi+68], 0
	je	SHORT $LN2@htmlParser

; 4424 :        ctxt->nodeInfo->end_pos = ctxt->input->consumed +

	mov	eax, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [eax+36]
	sub	ecx, DWORD PTR [eax+12]
	add	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [esi+448]
	mov	DWORD PTR [eax+12], ecx

; 4425 :                                 (CUR_PTR - ctxt->input->base);
; 4426 :        ctxt->nodeInfo->end_line = ctxt->input->line;

	mov	eax, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [esi+448]
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+16], eax

; 4427 :        ctxt->nodeInfo->node = ctxt->node;

	mov	ecx, DWORD PTR [esi+448]
	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR [ecx], eax

; 4428 :        xmlParserAddNodeInfo(ctxt, ctxt->nodeInfo);

	push	DWORD PTR [esi+448]
	push	esi
	call	_xmlParserAddNodeInfo

; 4429 :        htmlNodeInfoPop(ctxt);

	push	esi
	call	_htmlNodeInfoPop
	add	esp, 12					; 0000000cH
$LN2@htmlParser:

; 4430 :     }
; 4431 :     if (!IS_CHAR_CH(CUR)) {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 9
	jb	SHORT $LN4@htmlParser
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN3@htmlParser
$LN4@htmlParser:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN3@htmlParser
	cmp	al, 32					; 00000020H
	jae	SHORT $LN3@htmlParser

; 4432 :        htmlAutoCloseOnEnd(ctxt);

	push	esi
	call	_htmlAutoCloseOnEnd
	add	esp, 4
$LN3@htmlParser:
	pop	esi

; 4433 :     }
; 4434 : }

	pop	ebp
	ret	0
_htmlParserFinishElementParsing ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseContent
_TEXT	SEGMENT
_cons$1$ = -4						; size = 4
_depth$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseContent PROC					; COMDAT

; 4141 : htmlParseContent(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	push	DWORD PTR [esi+184]
	call	_xmlStrdup
	mov	ebx, eax
	add	esp, 4
	mov	eax, DWORD PTR [esi+188]
	mov	DWORD PTR _depth$1$[ebp], eax
$LN66@htmlParseC:

; 4142 :     xmlChar *currentNode;
; 4143 :     int depth;
; 4144 :     const xmlChar *name;
; 4145 : 
; 4146 :     currentNode = xmlStrdup(ctxt->name);
; 4147 :     depth = ctxt->nameNr;
; 4148 :     while (1) {
; 4149 : 	long cons = ctxt->nbChars;

	mov	edi, DWORD PTR __imp__toupper
	npad	13
$LL2@htmlParseC:

; 4150 : 
; 4151 :         GROW;

	cmp	DWORD PTR [esi+292], 0
	mov	eax, DWORD PTR [esi+200]
	mov	DWORD PTR _cons$1$[ebp], eax
	jne	SHORT $LN6@htmlParseC
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN6@htmlParseC
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN6@htmlParseC:

; 4152 : 
; 4153 :         if (ctxt->instate == XML_PARSER_EOF)

	cmp	DWORD PTR [esi+172], -1
	je	$LN40@htmlParseC

; 4154 :             break;
; 4155 : 
; 4156 : 	/*
; 4157 : 	 * Our tag or one of it's parent or children is ending.
; 4158 : 	 */
; 4159 :         if ((CUR == '<') && (NXT(1) == '/')) {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	$LN22@htmlParseC
	mov	al, BYTE PTR [eax+1]
	cmp	al, 47					; 0000002fH
	jne	SHORT $LN58@htmlParseC

; 4160 : 	    if (htmlParseEndTag(ctxt) &&

	push	esi
	call	_htmlParseEndTag
	add	esp, 4
	test	eax, eax
	je	SHORT $LL2@htmlParseC
	test	ebx, ebx
	jne	$LN62@htmlParseC
	cmp	DWORD PTR [esi+188], ebx
	jne	SHORT $LL2@htmlParseC

; 4282 :     if (currentNode != NULL) xmlFree(currentNode);
; 4283 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN58@htmlParseC:

; 4161 : 		((currentNode != NULL) || (ctxt->nameNr == 0))) {
; 4162 : 		if (currentNode != NULL)
; 4163 : 		    xmlFree(currentNode);
; 4164 : 		return;
; 4165 : 	    }
; 4166 : 	    continue; /* while */
; 4167 :         }
; 4168 : 
; 4169 : 	else if ((CUR == '<') &&

	cmp	al, 65					; 00000041H
	jb	SHORT $LN15@htmlParseC
	cmp	al, 90					; 0000005aH
	jbe	SHORT $LN14@htmlParseC
$LN15@htmlParseC:
	cmp	al, 97					; 00000061H
	jb	SHORT $LN16@htmlParseC
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LN14@htmlParseC
$LN16@htmlParseC:
	cmp	al, 95					; 0000005fH
	je	SHORT $LN14@htmlParseC
	cmp	al, 58					; 0000003aH
	jne	SHORT $LN22@htmlParseC
$LN14@htmlParseC:

; 4170 : 	         ((IS_ASCII_LETTER(NXT(1))) ||
; 4171 : 		  (NXT(1) == '_') || (NXT(1) == ':'))) {
; 4172 : 	    name = htmlParseHTMLName_nonInvasive(ctxt);

	push	esi
	call	_htmlParseHTMLName_nonInvasive
	mov	edi, eax
	add	esp, 4

; 4173 : 	    if (name == NULL) {

	test	edi, edi
	je	$LN52@htmlParseC

; 4180 : 
; 4181 : 	        if (currentNode != NULL)
; 4182 : 	            xmlFree(currentNode);
; 4183 : 	        return;
; 4184 : 	    }
; 4185 : 
; 4186 : 	    if (ctxt->name != NULL) {

	mov	eax, DWORD PTR [esi+184]
	test	eax, eax
	je	SHORT $LN65@htmlParseC

; 4187 : 	        if (htmlCheckAutoClose(name, ctxt->name) == 1) {

	push	eax
	push	edi
	call	_htmlCheckAutoClose
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN65@htmlParseC

; 4188 : 	            htmlAutoClose(ctxt, name);

	push	edi
	push	esi
	call	_htmlAutoClose
	add	esp, 8

; 4189 : 	            continue;

	jmp	$LN66@htmlParseC
$LN65@htmlParseC:

; 4190 : 	        }
; 4191 : 	    }
; 4192 : 	}
; 4193 : 
; 4194 : 	/*
; 4195 : 	 * Has this node been popped out during parsing of
; 4196 : 	 * the next element
; 4197 : 	 */
; 4198 :         if ((ctxt->nameNr > 0) && (depth >= ctxt->nameNr) &&

	mov	edi, DWORD PTR __imp__toupper
$LN22@htmlParseC:
	mov	eax, DWORD PTR [esi+188]
	test	eax, eax
	jle	SHORT $LN23@htmlParseC
	cmp	DWORD PTR _depth$1$[ebp], eax
	jl	SHORT $LN23@htmlParseC
	push	DWORD PTR [esi+184]
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN40@htmlParseC
$LN23@htmlParseC:

; 4199 : 	    (!xmlStrEqual(currentNode, ctxt->name)))
; 4200 : 	     {
; 4201 : 	    if (currentNode != NULL) xmlFree(currentNode);
; 4202 : 	    return;
; 4203 : 	}
; 4204 : 
; 4205 : 	if ((CUR != 0) && ((xmlStrEqual(currentNode, BAD_CAST"script")) ||

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN63@htmlParseC
	push	OFFSET ??_C@_06OLONEIEH@script@
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@htmlParseC
	push	OFFSET ??_C@_05IAKJCFIM@style@
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN63@htmlParseC
$LN27@htmlParseC:

; 4206 : 	    (xmlStrEqual(currentNode, BAD_CAST"style")))) {
; 4207 : 	    /*
; 4208 : 	     * Handle SCRIPT/STYLE separately
; 4209 : 	     */
; 4210 : 	    htmlParseScript(ctxt);

	push	esi
	call	_htmlParseScript
	add	esp, 4

; 4211 : 	} else {

	jmp	$LN39@htmlParseC
$LN63@htmlParseC:

; 4212 : 	    /*
; 4213 : 	     * Sometimes DOCTYPE arrives in the middle of the document
; 4214 : 	     */
; 4215 : 	    if ((CUR == '<') && (NXT(1) == '!') &&
; 4216 : 		(UPP(2) == 'D') && (UPP(3) == 'O') &&
; 4217 : 		(UPP(4) == 'C') && (UPP(5) == 'T') &&
; 4218 : 		(UPP(6) == 'Y') && (UPP(7) == 'P') &&

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	$LN28@htmlParseC
	cmp	BYTE PTR [eax+1], 33			; 00000021H
	jne	$LN28@htmlParseC
	movzx	eax, BYTE PTR [eax+2]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 68					; 00000044H
	jne	$LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+3]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 79					; 0000004fH
	jne	$LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+4]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 67					; 00000043H
	jne	SHORT $LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+5]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 84					; 00000054H
	jne	SHORT $LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+6]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 89					; 00000059H
	jne	SHORT $LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+7]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN28@htmlParseC
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+8]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN28@htmlParseC

; 4219 : 		(UPP(8) == 'E')) {
; 4220 : 		htmlParseErr(ctxt, XML_HTML_STRUCURE_ERROR,

	push	0
	push	OFFSET ??_C@_07JGKBCNAA@DOCTYPE@
	push	OFFSET ??_C@_0BP@FHNHCCJD@Misplaced?5DOCTYPE?5declaration?6@
	push	800					; 00000320H
	push	esi
	call	_htmlParseErr

; 4221 : 		             "Misplaced DOCTYPE declaration\n",
; 4222 : 			     BAD_CAST "DOCTYPE" , NULL);
; 4223 : 		htmlParseDocTypeDecl(ctxt);

	push	esi
	call	_htmlParseDocTypeDecl
	add	esp, 24					; 00000018H
$LN28@htmlParseC:

; 4224 : 	    }
; 4225 : 
; 4226 : 	    /*
; 4227 : 	     * First case :  a comment
; 4228 : 	     */
; 4229 : 	    if ((CUR == '<') && (NXT(1) == '!') &&
; 4230 : 		(NXT(2) == '-') && (NXT(3) == '-')) {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	cl, BYTE PTR [eax]
	cmp	cl, 60					; 0000003cH
	jne	SHORT $LN33@htmlParseC
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, 33					; 00000021H
	jne	SHORT $LN29@htmlParseC
	cmp	BYTE PTR [eax+2], 45			; 0000002dH
	jne	SHORT $LN29@htmlParseC
	cmp	BYTE PTR [eax+3], 45			; 0000002dH
	jne	SHORT $LN29@htmlParseC

; 4231 : 		htmlParseComment(ctxt);

	push	esi
	call	_htmlParseComment
	add	esp, 4

; 4232 : 	    }

	jmp	SHORT $LN44@htmlParseC
$LN29@htmlParseC:

; 4233 : 
; 4234 : 	    /*
; 4235 : 	     * Second case : a Processing Instruction.
; 4236 : 	     */
; 4237 : 	    else if ((CUR == '<') && (NXT(1) == '?')) {

	push	esi
	cmp	cl, 63					; 0000003fH
	jne	SHORT $LN31@htmlParseC

; 4238 : 		htmlParsePI(ctxt);

	call	_htmlParsePI
	add	esp, 4

; 4239 : 	    }

	jmp	SHORT $LN44@htmlParseC
$LN31@htmlParseC:

; 4240 : 
; 4241 : 	    /*
; 4242 : 	     * Third case :  a sub-element.
; 4243 : 	     */
; 4244 : 	    else if (CUR == '<') {
; 4245 : 		htmlParseElement(ctxt);

	call	_htmlParseElement
	add	esp, 4

; 4246 : 	    }

	jmp	SHORT $LN44@htmlParseC
$LN33@htmlParseC:

; 4247 : 
; 4248 : 	    /*
; 4249 : 	     * Fourth case : a reference. If if has not been resolved,
; 4250 : 	     *    parsing returns it's Name, create the node
; 4251 : 	     */
; 4252 : 	    else if (CUR == '&') {

	cmp	cl, 38					; 00000026H
	jne	SHORT $LN35@htmlParseC

; 4253 : 		htmlParseReference(ctxt);

	push	esi
	call	_htmlParseReference
	add	esp, 4

; 4254 : 	    }

	jmp	SHORT $LN44@htmlParseC
$LN35@htmlParseC:

; 4255 : 
; 4256 : 	    /*
; 4257 : 	     * Fifth case : end of the resource
; 4258 : 	     */
; 4259 : 	    else if (CUR == 0) {

	test	cl, cl
	je	$LN54@htmlParseC

; 3109 :     htmlParseCharDataInternal(ctxt, 0);

	push	0
	push	esi
	call	_htmlParseCharDataInternal
	add	esp, 8
$LN44@htmlParseC:

; 4261 : 		break;
; 4262 : 	    }
; 4263 : 
; 4264 : 	    /*
; 4265 : 	     * Last case, text. Note that References are handled directly.
; 4266 : 	     */
; 4267 : 	    else {
; 4268 : 		htmlParseCharData(ctxt);
; 4269 : 	    }
; 4270 : 
; 4271 : 	    if (cons == ctxt->nbChars) {

	mov	eax, DWORD PTR _cons$1$[ebp]
	cmp	eax, DWORD PTR [esi+200]
	je	SHORT $LN55@htmlParseC
$LN39@htmlParseC:

; 4274 : 		                 "detected an error in element content\n",
; 4275 : 				 NULL, NULL);
; 4276 : 		}
; 4277 : 		break;
; 4278 : 	    }
; 4279 : 	}
; 4280 :         GROW;

	cmp	DWORD PTR [esi+292], 0
	jne	$LL2@htmlParseC
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	$LL2@htmlParseC
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8

; 4281 :     }

	jmp	$LL2@htmlParseC
$LN52@htmlParseC:

; 4174 : 	        htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED,

	push	0
	push	0
	push	OFFSET ??_C@_0CJ@FBFDNGDH@htmlParseStartTag?3?5invalid?5elem@
	push	68					; 00000044H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	npad	3
$LL4@htmlParseC:

; 4175 : 			 "htmlParseStartTag: invalid element name\n",
; 4176 : 			 NULL, NULL);
; 4177 : 	        /* Dump the bogus tag like browsers do */
; 4178 :         while ((IS_CHAR_CH(CUR)) && (CUR != '>'))

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 9
	jb	SHORT $LN19@htmlParseC
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN18@htmlParseC
$LN19@htmlParseC:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN18@htmlParseC
	cmp	al, 32					; 00000020H
	jb	SHORT $LN40@htmlParseC
$LN18@htmlParseC:
	cmp	al, 62					; 0000003eH
	je	SHORT $LN40@htmlParseC

; 4179 : 	            NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4
	jmp	SHORT $LL4@htmlParseC
$LN55@htmlParseC:

; 4272 : 		if (ctxt->node != NULL) {

	cmp	DWORD PTR [esi+52], 0
	je	SHORT $LN40@htmlParseC

; 4273 : 		    htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CG@FCFCBOFE@detected?5an?5error?5in?5element?5co@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	jmp	SHORT $LN40@htmlParseC
$LN54@htmlParseC:

; 4260 : 		htmlAutoCloseOnEnd(ctxt);

	push	esi
	call	_htmlAutoCloseOnEnd
	add	esp, 4
$LN40@htmlParseC:

; 4282 :     if (currentNode != NULL) xmlFree(currentNode);
; 4283 : }

	test	ebx, ebx
	je	SHORT $LN42@htmlParseC
$LN62@htmlParseC:
	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN42@htmlParseC:
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseContent ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseReference
_TEXT	SEGMENT
_out$ = -8						; size = 6
_name$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseReference PROC				; COMDAT

; 4064 : htmlParseReference(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	ecx, OFFSET __111E219E_htmlparser@c
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 38			; 00000026H
	jne	$LN24@htmlParseR

; 4065 :     const htmlEntityDesc * ent;
; 4066 :     xmlChar out[6];
; 4067 :     const xmlChar *name;
; 4068 :     if (CUR != '&') return;
; 4069 : 
; 4070 :     if (NXT(1) == '#') {

	cmp	BYTE PTR [eax+1], 35			; 00000023H
	push	esi
	jne	$LN9@htmlParseR

; 4071 : 	unsigned int c;
; 4072 : 	int bits, i = 0;
; 4073 : 
; 4074 : 	c = htmlParseCharRef(ctxt);

	push	edi
	call	_htmlParseCharRef
	mov	edx, eax
	add	esp, 4

; 4075 : 	if (c == 0)

	test	edx, edx
	je	$LN43@htmlParseR

; 4076 : 	    return;
; 4077 : 
; 4078 :         if      (c <    0x80) { out[i++]= c;                bits= -6; }

	cmp	edx, 128				; 00000080H
	jae	SHORT $LN12@htmlParseR
	mov	BYTE PTR _out$[ebp], dl

; 4082 : 
; 4083 :         for ( ; bits >= 0; bits-= 6) {

	mov	esi, 1
	jmp	SHORT $LN3@htmlParseR
$LN12@htmlParseR:

; 4079 :         else if (c <   0x800) { out[i++]=((c >>  6) & 0x1F) | 0xC0;  bits=  0; }

	cmp	edx, 2048				; 00000800H
	jae	SHORT $LN14@htmlParseR
	shr	eax, 6
	and	al, 31					; 0000001fH
	or	al, 192					; 000000c0H
	xor	ecx, ecx
	jmp	SHORT $LN45@htmlParseR
$LN14@htmlParseR:

; 4080 :         else if (c < 0x10000) { out[i++]=((c >> 12) & 0x0F) | 0xE0;  bits=  6; }

	cmp	edx, 65536				; 00010000H
	jae	SHORT $LN16@htmlParseR
	shr	eax, 12					; 0000000cH
	mov	ecx, 6
	and	al, 15					; 0000000fH
	or	al, 224					; 000000e0H
	jmp	SHORT $LN45@htmlParseR
$LN16@htmlParseR:

; 4081 :         else                  { out[i++]=((c >> 18) & 0x07) | 0xF0;  bits= 12; }

	shr	eax, 18					; 00000012H
	mov	ecx, 12					; 0000000cH
	and	al, 7
	or	al, 240					; 000000f0H
$LN45@htmlParseR:
	mov	BYTE PTR _out$[ebp], al
	mov	esi, 1
$LL4@htmlParseR:

; 4084 :             out[i++]= ((c >> bits) & 0x3F) | 0x80;

	mov	eax, edx
	shr	eax, cl
	and	al, 63					; 0000003fH
	or	al, 128					; 00000080H
	mov	BYTE PTR _out$[ebp+esi], al
	inc	esi
	sub	ecx, 6
	jns	SHORT $LL4@htmlParseR
$LN3@htmlParseR:

; 4085 :         }
; 4086 : 	out[i] = 0;
; 4087 : 
; 4088 : 	htmlCheckParagraph(ctxt);

	push	edi
	mov	BYTE PTR _out$[ebp+esi], 0
	call	_htmlCheckParagraph

; 4089 : 	if ((ctxt->sax != NULL) && (ctxt->sax->characters != NULL))

	mov	eax, DWORD PTR [edi]
	add	esp, 4
	test	eax, eax
	je	$LN43@htmlParseR
	mov	eax, DWORD PTR [eax+68]
	test	eax, eax
	je	$LN43@htmlParseR

; 4090 : 	    ctxt->sax->characters(ctxt->userData, out, i);

	push	esi
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	push	DWORD PTR [edi+4]
	call	eax
	add	esp, 12					; 0000000cH
	pop	esi
	pop	edi

; 4128 : 	}
; 4129 :     }
; 4130 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@htmlParseR:
	push	ebx

; 4091 :     } else {
; 4092 : 	ent = htmlParseEntityRef(ctxt, &name);

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	push	edi
	call	_htmlParseEntityRef

; 4093 : 	if (name == NULL) {

	mov	ebx, DWORD PTR _name$[ebp]
	add	esp, 8
	test	ebx, ebx
	jne	SHORT $LN19@htmlParseR

; 4094 : 	    htmlCheckParagraph(ctxt);

	push	edi
	call	_htmlCheckParagraph

; 4095 : 	    if ((ctxt->sax != NULL) && (ctxt->sax->characters != NULL))

	mov	eax, DWORD PTR [edi]
	add	esp, 4
	test	eax, eax
	je	$LN44@htmlParseR
	mov	eax, DWORD PTR [eax+68]
	test	eax, eax
	je	$LN44@htmlParseR

; 4096 : 	        ctxt->sax->characters(ctxt->userData, BAD_CAST "&", 1);

	push	1
	push	OFFSET ??_C@_01HNPIGOCE@?$CG@
	push	DWORD PTR [edi+4]
	call	eax
	add	esp, 12					; 0000000cH
	pop	ebx
	pop	esi
	pop	edi

; 4128 : 	}
; 4129 :     }
; 4130 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@htmlParseR:

; 4097 : 	    return;
; 4098 : 	}
; 4099 : 	if ((ent == NULL) || !(ent->value > 0)) {

	test	eax, eax
	je	$LN23@htmlParseR
	mov	edx, DWORD PTR [eax]
	test	edx, edx
	je	$LN23@htmlParseR

; 4104 : 		/* ctxt->sax->characters(ctxt->userData, BAD_CAST ";", 1); */
; 4105 : 	    }
; 4106 : 	} else {
; 4107 : 	    unsigned int c;
; 4108 : 	    int bits, i = 0;
; 4109 : 
; 4110 : 	    c = ent->value;
; 4111 : 	    if      (c <    0x80)

	cmp	edx, 128				; 00000080H
	jae	SHORT $LN25@htmlParseR

; 4112 : 	            { out[i++]= c;                bits= -6; }

	mov	BYTE PTR _out$[ebp], dl

; 4119 : 
; 4120 : 	    for ( ; bits >= 0; bits-= 6) {

	mov	esi, 1
	jmp	SHORT $LN6@htmlParseR
$LN25@htmlParseR:

; 4113 : 	    else if (c <   0x800)

	mov	eax, edx
	cmp	edx, 2048				; 00000800H
	jae	SHORT $LN27@htmlParseR

; 4114 : 	            { out[i++]=((c >>  6) & 0x1F) | 0xC0;  bits=  0; }

	shr	eax, 6
	and	al, 31					; 0000001fH
	or	al, 192					; 000000c0H
	xor	ecx, ecx
	jmp	SHORT $LN46@htmlParseR
$LN27@htmlParseR:

; 4115 : 	    else if (c < 0x10000)

	cmp	edx, 65536				; 00010000H
	jae	SHORT $LN29@htmlParseR

; 4116 : 	            { out[i++]=((c >> 12) & 0x0F) | 0xE0;  bits=  6; }

	shr	eax, 12					; 0000000cH
	mov	ecx, 6
	and	al, 15					; 0000000fH
	or	al, 224					; 000000e0H
	jmp	SHORT $LN46@htmlParseR
$LN29@htmlParseR:

; 4117 : 	    else
; 4118 : 	            { out[i++]=((c >> 18) & 0x07) | 0xF0;  bits= 12; }

	shr	eax, 18					; 00000012H
	mov	ecx, 12					; 0000000cH
	and	al, 7
	or	al, 240					; 000000f0H
$LN46@htmlParseR:
	mov	BYTE PTR _out$[ebp], al
	mov	esi, 1
$LL7@htmlParseR:

; 4121 : 		out[i++]= ((c >> bits) & 0x3F) | 0x80;

	mov	eax, edx
	shr	eax, cl
	and	al, 63					; 0000003fH
	or	al, 128					; 00000080H
	mov	BYTE PTR _out$[ebp+esi], al
	inc	esi
	sub	ecx, 6
	jns	SHORT $LL7@htmlParseR
$LN6@htmlParseR:

; 4122 : 	    }
; 4123 : 	    out[i] = 0;
; 4124 : 
; 4125 : 	    htmlCheckParagraph(ctxt);

	push	edi
	mov	BYTE PTR _out$[ebp+esi], 0
	call	_htmlCheckParagraph

; 4126 : 	    if ((ctxt->sax != NULL) && (ctxt->sax->characters != NULL))

	mov	eax, DWORD PTR [edi]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN44@htmlParseR
	mov	eax, DWORD PTR [eax+68]
	test	eax, eax
	je	SHORT $LN44@htmlParseR

; 4127 : 		ctxt->sax->characters(ctxt->userData, out, i);

	push	esi
	lea	ecx, DWORD PTR _out$[ebp]
	push	ecx
	push	DWORD PTR [edi+4]
	call	eax
	add	esp, 12					; 0000000cH
	pop	ebx
	pop	esi
	pop	edi

; 4128 : 	}
; 4129 :     }
; 4130 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@htmlParseR:

; 4100 : 	    htmlCheckParagraph(ctxt);

	push	edi
	call	_htmlCheckParagraph

; 4101 : 	    if ((ctxt->sax != NULL) && (ctxt->sax->characters != NULL)) {

	mov	eax, DWORD PTR [edi]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN44@htmlParseR
	mov	eax, DWORD PTR [eax+68]
	test	eax, eax
	je	SHORT $LN44@htmlParseR

; 4102 : 		ctxt->sax->characters(ctxt->userData, BAD_CAST "&", 1);

	push	1
	push	OFFSET ??_C@_01HNPIGOCE@?$CG@
	push	DWORD PTR [edi+4]
	call	eax

; 4103 : 		ctxt->sax->characters(ctxt->userData, name, xmlStrlen(name));

	mov	esi, DWORD PTR [edi]
	push	ebx
	call	_xmlStrlen
	push	eax
	mov	eax, DWORD PTR [esi+68]
	push	ebx
	push	DWORD PTR [edi+4]
	call	eax
	add	esp, 28					; 0000001cH
$LN44@htmlParseR:
	pop	ebx
$LN43@htmlParseR:
	pop	esi
$LN24@htmlParseR:
	pop	edi

; 4128 : 	}
; 4129 :     }
; 4130 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseReference ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseEndTag
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlParseEndTag PROC					; COMDAT

; 3957 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	$LN8@htmlParseE

; 3958 :     const xmlChar *name;
; 3959 :     const xmlChar *oldname;
; 3960 :     int i, ret;
; 3961 : 
; 3962 :     if ((CUR != '<') || (NXT(1) != '/')) {

	cmp	BYTE PTR [eax+1], 47			; 0000002fH
	jne	$LN8@htmlParseE

; 3966 :     }
; 3967 :     SKIP(2);

	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [esi+200], 2
	push	ebx

; 3968 : 
; 3969 :     name = htmlParseHTMLName(ctxt);

	push	esi
	add	DWORD PTR [eax+16], 2
	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [eax+32], 2
	call	_htmlParseHTMLName
	mov	ebx, eax
	add	esp, 4

; 3970 :     if (name == NULL)

	test	ebx, ebx
	je	$LN39@htmlParseE

; 3971 :         return (0);
; 3972 :     /*
; 3973 :      * We should definitely be at the ending "S? '>'" part
; 3974 :      */
; 3975 :     SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 3976 :     if ((!IS_CHAR_CH(CUR)) || (CUR != '>')) {

	mov	eax, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 9
	jb	SHORT $LN14@htmlParseE
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN13@htmlParseE
$LN14@htmlParseE:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN13@htmlParseE
	cmp	al, 32					; 00000020H
	jb	SHORT $LN12@htmlParseE
$LN13@htmlParseE:
	cmp	al, 62					; 0000003eH
	je	SHORT $LN10@htmlParseE
$LN12@htmlParseE:

; 3977 :         htmlParseErr(ctxt, XML_ERR_GT_REQUIRED,

	push	0
	push	0
	push	OFFSET ??_C@_0BI@FHDFFDFP@End?5tag?5?3?5expected?5?8?$DO?8?6@
	push	73					; 00000049H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3978 : 	             "End tag : expected '>'\n", NULL, NULL);
; 3979 : 	if (ctxt->recovery) {

	cmp	DWORD PTR [esi+288], 0
	je	SHORT $LN11@htmlParseE

; 3980 : 	    /*
; 3981 : 	     * We're not at the ending > !!
; 3982 : 	     * Error, unless in recover mode where we search forwards
; 3983 : 	     * until we find a >
; 3984 : 	     */
; 3985 : 	    while (CUR != '\0' && CUR != '>') NEXT;

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 0
	je	SHORT $LN10@htmlParseE
$LL2@htmlParseE:
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 62			; 0000003eH
	je	SHORT $LN10@htmlParseE
	push	esi
	call	_xmlNextChar
	mov	ecx, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LL2@htmlParseE
$LN10@htmlParseE:

; 3986 : 	    NEXT;
; 3987 : 	}
; 3988 :     } else
; 3989 :         NEXT;
; 3990 : 
; 3991 :     /*
; 3992 :      * if we ignored misplaced tags in htmlParseStartTag don't pop them
; 3993 :      * out now.
; 3994 :      */
; 3995 :     if ((ctxt->depth > 0) &&

	push	esi
	call	_xmlNextChar
	add	esp, 4
$LN11@htmlParseE:
	cmp	DWORD PTR [esi+248], 0
	jle	SHORT $LN16@htmlParseE
	push	OFFSET ??_C@_04PNIFHPHN@html@
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@htmlParseE
	push	OFFSET ??_C@_04IEJGKNJ@body@
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@htmlParseE
	push	OFFSET ??_C@_04NEODDMOL@head@
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@htmlParseE
$LN17@htmlParseE:

; 3996 :         (xmlStrEqual(name, BAD_CAST "html") ||
; 3997 :          xmlStrEqual(name, BAD_CAST "body") ||
; 3998 : 	 xmlStrEqual(name, BAD_CAST "head"))) {
; 3999 : 	ctxt->depth--;

	dec	DWORD PTR [esi+248]
$LN39@htmlParseE:
	pop	ebx

; 4000 : 	return (0);

	xor	eax, eax
	pop	esi

; 4047 :     } else {
; 4048 :         ret = 0;
; 4049 :     }
; 4050 : 
; 4051 :     return (ret);
; 4052 : }

	pop	ebp
	ret	0
$LN16@htmlParseE:
	push	edi

; 4001 :     }
; 4002 : 
; 4003 :     /*
; 4004 :      * If the name read is not one of the element in the parsing stack
; 4005 :      * then return, it's just an error.
; 4006 :      */
; 4007 :     for (i = (ctxt->nameNr - 1); i >= 0; i--) {

	mov	edi, DWORD PTR [esi+188]
	sub	edi, 1
	js	SHORT $LN35@htmlParseE
	npad	4
$LL6@htmlParseE:

; 4008 :         if (xmlStrEqual(name, ctxt->nameTab[i]))

	mov	eax, DWORD PTR [esi+196]
	push	DWORD PTR [eax+edi*4]
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN28@htmlParseE

; 4001 :     }
; 4002 : 
; 4003 :     /*
; 4004 :      * If the name read is not one of the element in the parsing stack
; 4005 :      * then return, it's just an error.
; 4006 :      */
; 4007 :     for (i = (ctxt->nameNr - 1); i >= 0; i--) {

	sub	edi, 1
	jns	SHORT $LL6@htmlParseE
$LN35@htmlParseE:

; 4012 :         htmlParseErr(ctxt, XML_ERR_TAG_NAME_MISMATCH,

	push	0
	push	ebx
	push	OFFSET ??_C@_0BJ@LENKJKOI@Unexpected?5end?5tag?5?3?5?$CFs?6@
	push	76					; 0000004cH
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN22@htmlParseE:

; 4013 : 	             "Unexpected end tag : %s\n", name, NULL);
; 4014 :         return (0);

	pop	edi
	pop	ebx
	xor	eax, eax
	pop	esi

; 4047 :     } else {
; 4048 :         ret = 0;
; 4049 :     }
; 4050 : 
; 4051 :     return (ret);
; 4052 : }

	pop	ebp
	ret	0
$LN28@htmlParseE:

; 4009 :             break;
; 4010 :     }
; 4011 :     if (i < 0) {

	test	edi, edi
	js	SHORT $LN35@htmlParseE

; 4015 :     }
; 4016 : 
; 4017 : 
; 4018 :     /*
; 4019 :      * Check for auto-closure of HTML elements.
; 4020 :      */
; 4021 : 
; 4022 :     htmlAutoCloseOnClose(ctxt, name);

	push	ebx
	push	esi
	call	_htmlAutoCloseOnClose

; 4023 : 
; 4024 :     /*
; 4025 :      * Well formedness constraints, opening and closing must match.
; 4026 :      * With the exception that the autoclose may have popped stuff out
; 4027 :      * of the stack.
; 4028 :      */
; 4029 :     if (!xmlStrEqual(name, ctxt->name)) {

	push	DWORD PTR [esi+184]
	push	ebx
	call	_xmlStrEqual
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN21@htmlParseE

; 4030 :         if ((ctxt->name != NULL) && (!xmlStrEqual(ctxt->name, name))) {

	mov	eax, DWORD PTR [esi+184]
	test	eax, eax
	je	SHORT $LN21@htmlParseE
	push	ebx
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@htmlParseE

; 4031 :             htmlParseErr(ctxt, XML_ERR_TAG_NAME_MISMATCH,

	push	DWORD PTR [esi+184]
	push	ebx
	push	OFFSET ??_C@_0CM@OHOANBCK@Opening?5and?5ending?5tag?5mismatch@
	push	76					; 0000004cH
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN21@htmlParseE:

; 4032 : 	                 "Opening and ending tag mismatch: %s and %s\n",
; 4033 : 			 name, ctxt->name);
; 4034 :         }
; 4035 :     }
; 4036 : 
; 4037 :     /*
; 4038 :      * SAX: End of Tag
; 4039 :      */
; 4040 :     oldname = ctxt->name;

	mov	eax, DWORD PTR [esi+184]

; 4041 :     if ((oldname != NULL) && (xmlStrEqual(oldname, name))) {

	test	eax, eax
	je	SHORT $LN22@htmlParseE
	push	ebx
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@htmlParseE

; 4042 :         if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN24@htmlParseE
	mov	eax, DWORD PTR [eax+60]
	test	eax, eax
	je	SHORT $LN24@htmlParseE

; 4043 :             ctxt->sax->endElement(ctxt->userData, name);

	push	ebx
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 8
$LN24@htmlParseE:

; 4044 : 	htmlNodeInfoPop(ctxt);

	push	esi
	call	_htmlNodeInfoPop

; 4045 :         htmlnamePop(ctxt);

	push	esi
	call	_htmlnamePop
	add	esp, 8

; 4046 :         ret = 1;

	mov	eax, 1
	pop	edi
	pop	ebx
	pop	esi

; 4047 :     } else {
; 4048 :         ret = 0;
; 4049 :     }
; 4050 : 
; 4051 :     return (ret);
; 4052 : }

	pop	ebp
	ret	0
$LN8@htmlParseE:

; 3963 :         htmlParseErr(ctxt, XML_ERR_LTSLASH_REQUIRED,

	push	0
	push	0
	push	OFFSET ??_C@_0CB@NNENDCGP@htmlParseEndTag?3?5?8?$DM?1?8?5not?5found@
	push	74					; 0000004aH
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3964 : 	             "htmlParseEndTag: '</' not found\n", NULL, NULL);
; 3965 :         return (0);

	xor	eax, eax
	pop	esi

; 4047 :     } else {
; 4048 :         ret = 0;
; 4049 :     }
; 4050 : 
; 4051 :     return (ret);
; 4052 : }

	pop	ebp
	ret	0
_htmlParseEndTag ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseStartTag
_TEXT	SEGMENT
_name$1$ = -28						; size = 4
_meta$2$ = -24						; size = 4
tv1478 = -20						; size = 4
_cons$1$ = -20						; size = 4
_http$1$ = -16						; size = 4
_name$1$ = -16						; size = 4
_content$1$ = -12					; size = 4
_maxatts$1$ = -12					; size = 4
_discardtag$1$ = -8					; size = 4
_nbatts$1$ = -4						; size = 4
_atts$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseStartTag PROC					; COMDAT

; 3737 : htmlParseStartTag(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR _nbatts$1$[ebp], 0
	mov	DWORD PTR _discardtag$1$[ebp], 0
	test	esi, esi
	je	$LN18@htmlParseS

; 3738 :     const xmlChar *name;
; 3739 :     const xmlChar *attname;
; 3740 :     xmlChar *attvalue;
; 3741 :     const xmlChar **atts;
; 3742 :     int nbatts = 0;
; 3743 :     int maxatts;
; 3744 :     int meta = 0;
; 3745 :     int i;
; 3746 :     int discardtag = 0;
; 3747 : 
; 3748 :     if ((ctxt == NULL) || (ctxt->input == NULL)) {

	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	$LN18@htmlParseS

; 3752 :     }
; 3753 :     if (ctxt->instate == XML_PARSER_EOF)

	cmp	DWORD PTR [esi+172], -1
	push	ebx
	push	edi
	je	$LN3@htmlParseS

; 3754 :         return(-1);
; 3755 :     if (CUR != '<') return -1;

	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	$LN3@htmlParseS

; 3756 :     NEXT;

	push	esi
	call	_xmlNextChar

; 3757 : 
; 3758 :     atts = ctxt->atts;

	mov	edi, DWORD PTR [esi+300]
	add	esp, 4

; 3759 :     maxatts = ctxt->maxatts;
; 3760 : 
; 3761 :     GROW;

	cmp	DWORD PTR [esi+292], 0
	mov	eax, DWORD PTR [esi+304]
	mov	DWORD PTR _atts$1$[ebp], edi
	mov	DWORD PTR _maxatts$1$[ebp], eax
	jne	SHORT $LN21@htmlParseS
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN21@htmlParseS
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN21@htmlParseS:

; 3762 :     name = htmlParseHTMLName(ctxt);

	push	esi
	call	_htmlParseHTMLName
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR _name$1$[ebp], ebx

; 3763 :     if (name == NULL) {

	test	ebx, ebx
	jne	$LN22@htmlParseS

; 3764 : 	htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED,

	push	eax
	push	eax
	push	OFFSET ??_C@_0CJ@FBFDNGDH@htmlParseStartTag?3?5invalid?5elem@
	push	68					; 00000044H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3765 : 	             "htmlParseStartTag: invalid element name\n",
; 3766 : 		     NULL, NULL);
; 3767 : 	/* if recover preserve text on classic misconstructs */
; 3768 : 	if ((ctxt->recovery) && ((IS_BLANK_CH(CUR)) || (CUR == '<') ||

	cmp	DWORD PTR [esi+288], ebx
	je	SHORT $LL2@htmlParseS
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 32					; 00000020H
	je	SHORT $LN24@htmlParseS
	cmp	al, 9
	jb	SHORT $LN25@htmlParseS
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN24@htmlParseS
$LN25@htmlParseS:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN24@htmlParseS
	cmp	al, 60					; 0000003cH
	je	SHORT $LN24@htmlParseS
	cmp	al, 61					; 0000003dH
	je	SHORT $LN24@htmlParseS
	cmp	al, 62					; 0000003eH
	je	SHORT $LN24@htmlParseS
	cmp	al, 48					; 00000030H
	jb	SHORT $LL2@htmlParseS
	cmp	al, 57					; 00000039H
	ja	SHORT $LL2@htmlParseS
$LN24@htmlParseS:

; 3769 : 	    (CUR == '=') || (CUR == '>') || (((CUR >= '0') && (CUR <= '9'))))) {
; 3770 : 	    htmlParseCharDataInternal(ctxt, '<');

	push	60					; 0000003cH
	push	esi
	call	_htmlParseCharDataInternal
	add	esp, 8
$LN3@htmlParseS:

; 3771 : 	    return(-1);

	pop	edi
	pop	ebx
	or	eax, -1
	pop	esi

; 3938 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LL2@htmlParseS:

; 3772 : 	}
; 3773 : 
; 3774 : 
; 3775 : 	/* Dump the bogus tag like browsers do */
; 3776 : 	while ((IS_CHAR_CH(CUR)) && (CUR != '>') &&

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 9
	jb	SHORT $LN27@htmlParseS
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN26@htmlParseS
$LN27@htmlParseS:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN26@htmlParseS
	cmp	al, 32					; 00000020H
	jb	SHORT $LN3@htmlParseS
$LN26@htmlParseS:
	cmp	al, 62					; 0000003eH
	je	SHORT $LN3@htmlParseS
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN3@htmlParseS

; 3777 :                (ctxt->instate != XML_PARSER_EOF))
; 3778 : 	    NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4
	jmp	SHORT $LL2@htmlParseS
$LN22@htmlParseS:

; 3779 :         return -1;
; 3780 :     }
; 3781 :     if (xmlStrEqual(name, BAD_CAST"meta"))

	push	OFFSET ??_C@_04HLJJCGEF@meta@
	push	ebx
	call	_xmlStrEqual
	test	eax, eax
	mov	ecx, 1
	mov	eax, 0
	cmovne	eax, ecx

; 3782 : 	meta = 1;
; 3783 : 
; 3784 :     /*
; 3785 :      * Check for auto-closure of HTML elements.
; 3786 :      */
; 3787 :     htmlAutoClose(ctxt, name);

	push	ebx
	push	esi
	mov	DWORD PTR _meta$2$[ebp], eax
	call	_htmlAutoClose

; 3788 : 
; 3789 :     /*
; 3790 :      * Check for implied HTML elements.
; 3791 :      */
; 3792 :     htmlCheckImplied(ctxt, name);

	push	ebx
	push	esi
	call	_htmlCheckImplied
	add	esp, 24					; 00000018H

; 3793 : 
; 3794 :     /*
; 3795 :      * Avoid html at any level > 0, head at any level != 1
; 3796 :      * or any attempt to recurse body
; 3797 :      */
; 3798 :     if ((ctxt->nameNr > 0) && (xmlStrEqual(name, BAD_CAST"html"))) {

	cmp	DWORD PTR [esi+188], 0
	jle	SHORT $LN29@htmlParseS
	push	OFFSET ??_C@_04PNIFHPHN@html@
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN29@htmlParseS

; 3799 : 	htmlParseErr(ctxt, XML_HTML_STRUCURE_ERROR,

	push	0
	push	ebx
	push	OFFSET ??_C@_0CJ@LOEJNMOA@htmlParseStartTag?3?5misplaced?5?$DMh@
	push	800					; 00000320H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3800 : 	             "htmlParseStartTag: misplaced <html> tag\n",
; 3801 : 		     name, NULL);
; 3802 : 	discardtag = 1;

	mov	DWORD PTR _discardtag$1$[ebp], 1

; 3803 : 	ctxt->depth++;

	inc	DWORD PTR [esi+248]
$LN29@htmlParseS:

; 3804 :     }
; 3805 :     if ((ctxt->nameNr != 1) &&

	cmp	DWORD PTR [esi+188], 1
	je	SHORT $LN30@htmlParseS
	push	OFFSET ??_C@_04NEODDMOL@head@
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN30@htmlParseS

; 3806 : 	(xmlStrEqual(name, BAD_CAST"head"))) {
; 3807 : 	htmlParseErr(ctxt, XML_HTML_STRUCURE_ERROR,

	push	0
	push	ebx
	push	OFFSET ??_C@_0CJ@EDPENOJH@htmlParseStartTag?3?5misplaced?5?$DMh@
	push	800					; 00000320H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3808 : 	             "htmlParseStartTag: misplaced <head> tag\n",
; 3809 : 		     name, NULL);
; 3810 : 	discardtag = 1;

	mov	DWORD PTR _discardtag$1$[ebp], 1

; 3811 : 	ctxt->depth++;

	inc	DWORD PTR [esi+248]
$LN30@htmlParseS:

; 3812 :     }
; 3813 :     if (xmlStrEqual(name, BAD_CAST"body")) {

	push	OFFSET ??_C@_04IEJGKNJ@body@
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@htmlParseS

; 3814 : 	int indx;
; 3815 : 	for (indx = 0;indx < ctxt->nameNr;indx++) {

	xor	edi, edi
	cmp	DWORD PTR [esi+188], edi
	jle	SHORT $LN188@htmlParseS
	npad	7
$LL6@htmlParseS:

; 3816 : 	    if (xmlStrEqual(ctxt->nameTab[indx], BAD_CAST"body")) {

	mov	eax, DWORD PTR [esi+196]
	push	OFFSET ??_C@_04IEJGKNJ@body@
	push	DWORD PTR [eax+edi*4]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@htmlParseS

; 3817 : 		htmlParseErr(ctxt, XML_HTML_STRUCURE_ERROR,

	push	0
	push	ebx
	push	OFFSET ??_C@_0CJ@BLFAHHGP@htmlParseStartTag?3?5misplaced?5?$DMb@
	push	800					; 00000320H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3818 : 		             "htmlParseStartTag: misplaced <body> tag\n",
; 3819 : 			     name, NULL);
; 3820 : 		discardtag = 1;

	mov	DWORD PTR _discardtag$1$[ebp], 1

; 3821 : 		ctxt->depth++;

	inc	DWORD PTR [esi+248]
$LN4@htmlParseS:

; 3814 : 	int indx;
; 3815 : 	for (indx = 0;indx < ctxt->nameNr;indx++) {

	inc	edi
	cmp	edi, DWORD PTR [esi+188]
	jl	SHORT $LL6@htmlParseS
$LN188@htmlParseS:

; 3822 : 	    }
; 3823 : 	}
; 3824 :     }
; 3825 : 
; 3826 :     /*
; 3827 :      * Now parse the attributes, it ends up with the ending
; 3828 :      *
; 3829 :      * (S Attribute)* S?
; 3830 :      */
; 3831 :     SKIP_BLANKS;

	mov	edi, DWORD PTR _atts$1$[ebp]
$LN5@htmlParseS:
	push	esi
	call	_htmlSkipBlankChars
	add	esp, 4
$LL7@htmlParseS:

; 3832 :     while ((IS_CHAR_CH(CUR)) &&
; 3833 :            (CUR != '>') &&

	mov	edx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [edx+16]
	mov	al, BYTE PTR [ecx]
	cmp	al, 9
	jb	SHORT $LN34@htmlParseS
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN33@htmlParseS
$LN34@htmlParseS:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN33@htmlParseS
	cmp	al, 32					; 00000020H
	jb	$LN8@htmlParseS
$LN33@htmlParseS:
	cmp	al, 62					; 0000003eH
	je	$LN8@htmlParseS
	cmp	al, 47					; 0000002fH
	jne	SHORT $LN35@htmlParseS
	cmp	BYTE PTR [ecx+1], 62			; 0000003eH
	je	$LN8@htmlParseS
$LN35@htmlParseS:

; 3834 : 	   ((CUR != '/') || (NXT(1) != '>'))) {
; 3835 : 	long cons = ctxt->nbChars;
; 3836 : 
; 3837 : 	GROW;

	cmp	DWORD PTR [esi+292], 0
	mov	eax, DWORD PTR [esi+200]
	mov	DWORD PTR _cons$1$[ebp], eax
	jne	SHORT $LN36@htmlParseS
	mov	eax, DWORD PTR [edx+20]
	sub	eax, ecx
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN36@htmlParseS
	push	250					; 000000faH
	push	edx
	call	_xmlParserInputGrow
	add	esp, 8
$LN36@htmlParseS:

; 3541 :     name = htmlParseHTMLName(ctxt);

	push	esi
	xor	ebx, ebx
	call	_htmlParseHTMLName
	add	esp, 4
	mov	DWORD PTR _name$1$[ebp], eax

; 3542 :     if (name == NULL) {

	test	eax, eax
	jne	SHORT $LN63@htmlParseS

; 3543 : 	htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED,

	push	eax
	push	eax
	push	OFFSET ??_C@_0BO@BHLKDNI@error?5parsing?5attribute?5name?6@
	push	68					; 00000044H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LL12@htmlParseS:

; 3889 : 	}
; 3890 : 	else {
; 3891 : 	    if (attvalue != NULL)
; 3892 : 	        xmlFree(attvalue);
; 3893 : 	    /* Dump the bogus attribute string up to the next blank or
; 3894 : 	     * the end of the tag. */
; 3895 : 	    while ((IS_CHAR_CH(CUR)) &&
; 3896 : 	           !(IS_BLANK_CH(CUR)) && (CUR != '>') &&

	mov	eax, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [eax+16]
	mov	al, BYTE PTR [ecx]
	cmp	al, 9
	jb	SHORT $LN50@htmlParseS
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN49@htmlParseS
$LN50@htmlParseS:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN49@htmlParseS
	cmp	al, 32					; 00000020H
	jb	$failed$207
$LN49@htmlParseS:
	cmp	al, 32					; 00000020H
	je	$failed$207
	cmp	al, 9
	jb	SHORT $LN51@htmlParseS
	cmp	al, 10					; 0000000aH
	jbe	$failed$207
$LN51@htmlParseS:
	cmp	al, 13					; 0000000dH
	je	$failed$207
	cmp	al, 62					; 0000003eH
	je	$failed$207
	cmp	al, 47					; 0000002fH
	jne	SHORT $LN52@htmlParseS
	cmp	BYTE PTR [ecx+1], 62			; 0000003eH
	je	$failed$207
$LN52@htmlParseS:

; 3897 : 		   ((CUR != '/') || (NXT(1) != '>')))
; 3898 : 		NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4
	jmp	SHORT $LL12@htmlParseS
$LN63@htmlParseS:

; 3551 :     SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 3552 :     if (CUR == '=') {

	mov	eax, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 61			; 0000003dH
	jne	$LN75@htmlParseS

; 3553 :         NEXT;

	push	esi
	call	_xmlNextChar

; 3554 : 	SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 2747 :     if (CUR == '"') {

	mov	eax, DWORD PTR [esi+36]

; 3554 : 	SKIP_BLANKS;

	add	esp, 8

; 2747 :     if (CUR == '"') {

	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 34					; 00000022H
	jne	SHORT $LN67@htmlParseS

; 2748 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2749 : 	ret = htmlParseHTMLAttribute(ctxt, '"');

	push	34					; 00000022H
	push	esi
	call	_htmlParseHTMLAttribute
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 2750 :         if (CUR != '"') {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 34			; 00000022H
	je	SHORT $LN73@htmlParseS

; 2751 : 	    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,

	push	0
	push	0
	push	OFFSET ??_C@_0BG@ECEGDLEC@AttValue?3?5?$CC?5expected?6@
	push	40					; 00000028H

; 2752 : 	                 "AttValue: \" expected\n", NULL, NULL);
; 2753 : 	} else

	jmp	SHORT $LN203@htmlParseS
$LN67@htmlParseS:

; 2754 : 	    NEXT;
; 2755 :     } else if (CUR == '\'') {

	cmp	al, 39					; 00000027H
	jne	SHORT $LN71@htmlParseS

; 2756 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2757 : 	ret = htmlParseHTMLAttribute(ctxt, '\'');

	push	39					; 00000027H
	push	esi
	call	_htmlParseHTMLAttribute
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 2758 :         if (CUR != '\'') {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 39			; 00000027H
	je	SHORT $LN73@htmlParseS

; 2759 : 	    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,

	push	0
	push	0
	push	OFFSET ??_C@_0BG@NKOFEMFC@AttValue?3?5?8?5expected?6@
	push	40					; 00000028H

; 2760 : 	                 "AttValue: ' expected\n", NULL, NULL);
; 2761 : 	} else

	jmp	SHORT $LN203@htmlParseS
$LN73@htmlParseS:

; 3838 : 	attname = htmlParseAttribute(ctxt, &attvalue);
; 3839 :         if (attname != NULL) {
; 3840 : 
; 3841 : 	    /*
; 3842 : 	     * Well formedness requires at most one declaration of an attribute
; 3843 : 	     */
; 3844 : 	    for (i = 0; i < nbatts;i += 2) {

	push	esi
	call	_xmlNextChar
	add	esp, 4
	jmp	SHORT $LN75@htmlParseS
$LN71@htmlParseS:

; 2767 : 	ret = htmlParseHTMLAttribute(ctxt, 0);

	push	0
	push	esi
	call	_htmlParseHTMLAttribute
	mov	ebx, eax
	add	esp, 8

; 2768 : 	if (ret == NULL) {

	test	ebx, ebx
	jne	SHORT $LN75@htmlParseS

; 2769 : 	    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_WITHOUT_VALUE,

	push	eax
	push	eax
	push	OFFSET ??_C@_0BK@IDNLEFDN@AttValue?3?5no?5value?5found?6@
	push	41					; 00000029H
$LN203@htmlParseS:

; 3838 : 	attname = htmlParseAttribute(ctxt, &attvalue);
; 3839 :         if (attname != NULL) {
; 3840 : 
; 3841 : 	    /*
; 3842 : 	     * Well formedness requires at most one declaration of an attribute
; 3843 : 	     */
; 3844 : 	    for (i = 0; i < nbatts;i += 2) {

	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN75@htmlParseS:
	mov	ecx, DWORD PTR _nbatts$1$[ebp]
	xor	edi, edi
	test	ecx, ecx
	jle	SHORT $LN10@htmlParseS
$LL11@htmlParseS:

; 3845 : 	        if (xmlStrEqual(atts[i], attname)) {

	mov	eax, DWORD PTR _atts$1$[ebp]
	push	DWORD PTR _name$1$[ebp]
	push	DWORD PTR [eax+edi*4]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN96@htmlParseS

; 3838 : 	attname = htmlParseAttribute(ctxt, &attvalue);
; 3839 :         if (attname != NULL) {
; 3840 : 
; 3841 : 	    /*
; 3842 : 	     * Well formedness requires at most one declaration of an attribute
; 3843 : 	     */
; 3844 : 	    for (i = 0; i < nbatts;i += 2) {

	mov	ecx, DWORD PTR _nbatts$1$[ebp]
	add	edi, 2
	cmp	edi, ecx
	jl	SHORT $LL11@htmlParseS
$LN10@htmlParseS:

; 3850 : 		    goto failed;
; 3851 : 		}
; 3852 : 	    }
; 3853 : 
; 3854 : 	    /*
; 3855 : 	     * Add the pair to atts
; 3856 : 	     */
; 3857 : 	    if (atts == NULL) {

	mov	edi, DWORD PTR _atts$1$[ebp]
	test	edi, edi
	jne	$LN41@htmlParseS

; 3858 : 	        maxatts = 22; /* allow for 10 attrs by default */
; 3859 : 	        atts = (const xmlChar **)

	push	88					; 00000058H
	mov	DWORD PTR _maxatts$1$[ebp], 22		; 00000016H
	call	DWORD PTR _xmlMalloc
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR _atts$1$[ebp], edi

; 3860 : 		       xmlMalloc(maxatts * sizeof(xmlChar *));
; 3861 : 		if (atts == NULL) {

	test	edi, edi
	jne	$LN43@htmlParseS

; 3862 : 		    htmlErrMemory(ctxt, NULL);

	push	eax
	push	esi
	call	_htmlErrMemory
	add	esp, 8

; 3863 : 		    if (attvalue != NULL)

	test	ebx, ebx
	je	SHORT $failed$207

; 3864 : 			xmlFree(attvalue);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 4

; 3865 : 		    goto failed;

	jmp	SHORT $failed$207
$LN96@htmlParseS:

; 3846 : 		    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_REDEFINED,

	push	0
	push	DWORD PTR _name$1$[ebp]
	push	OFFSET ??_C@_0BI@LJKBJNKP@Attribute?5?$CFs?5redefined?6@
	push	42					; 0000002aH
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3847 : 		                 "Attribute %s redefined\n", attname, NULL);
; 3848 : 		    if (attvalue != NULL)

	test	ebx, ebx
	je	SHORT $LN187@htmlParseS

; 3849 : 			xmlFree(attvalue);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN187@htmlParseS:

; 3899 : 	}
; 3900 : 
; 3901 : failed:
; 3902 : 	SKIP_BLANKS;

	mov	edi, DWORD PTR _atts$1$[ebp]
$failed$207:
	push	esi
	call	_htmlSkipBlankChars

; 3903 :         if (cons == ctxt->nbChars) {

	mov	eax, DWORD PTR _cons$1$[ebp]
	add	esp, 4
	cmp	eax, DWORD PTR [esi+200]
	jne	$LL7@htmlParseS

; 3904 : 	    htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CP@BBOKDADJ@htmlParseStartTag?3?5problem?5pars@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN8@htmlParseS:

; 3905 : 	                 "htmlParseStartTag: problem parsing attributes\n",
; 3906 : 			 NULL, NULL);
; 3907 : 	    break;
; 3908 : 	}
; 3909 :     }
; 3910 : 
; 3911 :     /*
; 3912 :      * Handle specific association to the META tag
; 3913 :      */
; 3914 :     if (meta && (nbatts != 0))

	cmp	DWORD PTR _meta$2$[ebp], 0
	mov	ebx, DWORD PTR _nbatts$1$[ebp]
	je	$LN81@htmlParseS
	test	ebx, ebx
	je	$LN81@htmlParseS

; 3693 :     const xmlChar *content = NULL;

	xor	ecx, ecx
	mov	DWORD PTR _http$1$[ebp], 0
	mov	DWORD PTR _content$1$[ebp], ecx

; 3694 : 
; 3695 :     if ((ctxt == NULL) || (atts == NULL))

	test	edi, edi
	je	$LN81@htmlParseS

; 3696 : 	return;
; 3697 : 
; 3698 :     i = 0;
; 3699 :     att = atts[i++];

	mov	edi, DWORD PTR [edi]

; 3700 :     while (att != NULL) {

	test	edi, edi
	je	$LN81@htmlParseS

; 3696 : 	return;
; 3697 : 
; 3698 :     i = 0;
; 3699 :     att = atts[i++];

	mov	ebx, DWORD PTR _atts$1$[ebp]
	add	ebx, 4
	mov	DWORD PTR tv1478[ebp], ebx
$LL78@htmlParseS:

; 3701 : 	value = atts[i++];

	mov	ebx, DWORD PTR [ebx]

; 3702 : 	if ((value != NULL) && (!xmlStrcasecmp(att, BAD_CAST"http-equiv"))
; 3703 : 	 && (!xmlStrcasecmp(value, BAD_CAST"Content-Type")))

	test	ebx, ebx
	je	$LN186@htmlParseS
	push	OFFSET ??_C@_0L@NALBGOHO@http?9equiv@
	push	edi
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	jne	$LN82@htmlParseS
	push	OFFSET ??_C@_0N@LAFFMKKA@Content?9Type@
	push	ebx
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	jne	$LN82@htmlParseS

; 3704 : 	    http = 1;

	mov	ecx, DWORD PTR _content$1$[ebp]
	mov	eax, 1
	mov	DWORD PTR _http$1$[ebp], eax
	jmp	$LN86@htmlParseS
$LN43@htmlParseS:

; 3866 : 		}
; 3867 : 		ctxt->atts = atts;

	mov	DWORD PTR [esi+300], edi

; 3868 : 		ctxt->maxatts = maxatts;

	mov	DWORD PTR [esi+304], 22			; 00000016H
	jmp	SHORT $LN204@htmlParseS
$LN41@htmlParseS:

; 3869 : 	    } else if (nbatts + 4 > maxatts) {

	mov	edx, DWORD PTR _maxatts$1$[ebp]
	lea	eax, DWORD PTR [ecx+4]
	cmp	eax, edx
	jle	SHORT $LN45@htmlParseS

; 3870 : 	        const xmlChar **n;
; 3871 : 
; 3872 : 	        maxatts *= 2;

	add	edx, edx
	mov	DWORD PTR _maxatts$1$[ebp], edx

; 3873 : 	        n = (const xmlChar **) xmlRealloc((void *) atts,

	lea	eax, DWORD PTR [edx*4]
	push	eax
	push	edi
	call	DWORD PTR _xmlRealloc
	add	esp, 8

; 3874 : 					     maxatts * sizeof(const xmlChar *));
; 3875 : 		if (n == NULL) {

	test	eax, eax
	jne	SHORT $LN46@htmlParseS

; 3876 : 		    htmlErrMemory(ctxt, NULL);

	push	eax
	push	esi
	call	_htmlErrMemory
	add	esp, 8

; 3877 : 		    if (attvalue != NULL)

	test	ebx, ebx
	je	$failed$207

; 3878 : 			xmlFree(attvalue);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 4

; 3879 : 		    goto failed;

	jmp	$failed$207
$LN46@htmlParseS:

; 3880 : 		}
; 3881 : 		atts = n;

	mov	edi, eax

; 3882 : 		ctxt->atts = atts;

	mov	DWORD PTR [esi+300], eax

; 3883 : 		ctxt->maxatts = maxatts;

	mov	eax, DWORD PTR _maxatts$1$[ebp]
	mov	DWORD PTR _atts$1$[ebp], edi
	mov	DWORD PTR [esi+304], eax
$LN204@htmlParseS:

; 3884 : 	    }
; 3885 : 	    atts[nbatts++] = attname;

	mov	ecx, DWORD PTR _nbatts$1$[ebp]
$LN45@htmlParseS:
	mov	eax, DWORD PTR _name$1$[ebp]
	mov	DWORD PTR [edi+ecx*4], eax

; 3886 : 	    atts[nbatts++] = attvalue;

	mov	DWORD PTR [edi+ecx*4+4], ebx

; 3887 : 	    atts[nbatts] = NULL;

	mov	DWORD PTR [edi+ecx*4+8], 0

; 3888 : 	    atts[nbatts + 1] = NULL;

	mov	DWORD PTR [edi+ecx*4+12], 0
	add	ecx, 2
	mov	DWORD PTR _nbatts$1$[ebp], ecx
	jmp	$failed$207
$LN82@htmlParseS:

; 3705 : 	else if ((value != NULL) && (!xmlStrcasecmp(att, BAD_CAST"charset")))

	push	OFFSET ??_C@_07EAJPFAFH@charset@
	push	edi
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN84@htmlParseS

; 3706 : 	    htmlCheckEncodingDirect(ctxt, value);

	push	ebx
	push	esi
	call	_htmlCheckEncodingDirect
	mov	ecx, DWORD PTR _content$1$[ebp]
	add	esp, 8
	jmp	SHORT $LN186@htmlParseS
$LN84@htmlParseS:

; 3707 : 	else if ((value != NULL) && (!xmlStrcasecmp(att, BAD_CAST"content")))

	push	OFFSET ??_C@_07ICAJMOAO@content@
	push	edi
	call	_xmlStrcasecmp
	mov	ecx, DWORD PTR _content$1$[ebp]
	add	esp, 8
	test	eax, eax
	cmove	ecx, ebx
	mov	DWORD PTR _content$1$[ebp], ecx
$LN186@htmlParseS:

; 3708 : 	    content = value;
; 3709 : 	att = atts[i++];

	mov	eax, DWORD PTR _http$1$[ebp]
$LN86@htmlParseS:
	mov	ebx, DWORD PTR tv1478[ebp]
	mov	edi, DWORD PTR [ebx+4]
	add	ebx, 8
	mov	DWORD PTR tv1478[ebp], ebx
	test	edi, edi
	jne	$LL78@htmlParseS

; 3710 :     }
; 3711 :     if ((http) && (content != NULL))

	test	eax, eax
	je	SHORT $LN191@htmlParseS
	test	ecx, ecx
	je	SHORT $LN191@htmlParseS

; 3712 : 	htmlCheckEncoding(ctxt, content);

	push	ecx
	push	esi
	call	_htmlCheckEncoding
	add	esp, 8
$LN191@htmlParseS:

; 3915 : 	htmlCheckMeta(ctxt, atts);
; 3916 : 
; 3917 :     /*
; 3918 :      * SAX: Start of Element !
; 3919 :      */
; 3920 :     if (!discardtag) {

	mov	ebx, DWORD PTR _nbatts$1$[ebp]
$LN81@htmlParseS:
	mov	edi, DWORD PTR _discardtag$1$[ebp]
	test	edi, edi
	jne	SHORT $LN58@htmlParseS

; 3921 : 	htmlnamePush(ctxt, name);

	mov	edi, DWORD PTR _name$1$[ebp]
	push	edi
	push	esi
	call	_htmlnamePush

; 3922 : 	if ((ctxt->sax != NULL) && (ctxt->sax->startElement != NULL)) {

	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN193@htmlParseS
	mov	eax, DWORD PTR [eax+56]
	test	eax, eax
	je	SHORT $LN193@htmlParseS

; 3923 : 	    if (nbatts != 0)

	mov	ecx, DWORD PTR [esi+4]
	test	ebx, ebx
	je	SHORT $LN57@htmlParseS

; 3924 : 		ctxt->sax->startElement(ctxt->userData, name, atts);

	push	DWORD PTR _atts$1$[ebp]
	jmp	SHORT $LN205@htmlParseS
$LN57@htmlParseS:

; 3925 : 	    else
; 3926 : 		ctxt->sax->startElement(ctxt->userData, name, NULL);

	push	0
$LN205@htmlParseS:

; 3927 : 	}
; 3928 :     }
; 3929 : 
; 3930 :     if (atts != NULL) {

	push	edi
	push	ecx
	call	eax
	add	esp, 12					; 0000000cH
$LN193@htmlParseS:
	mov	edi, DWORD PTR _discardtag$1$[ebp]
$LN58@htmlParseS:
	mov	eax, DWORD PTR _atts$1$[ebp]
	test	eax, eax
	je	SHORT $LN15@htmlParseS

; 3931 :         for (i = 1;i < nbatts;i += 2) {

	mov	esi, 1
	cmp	ebx, esi
	jle	SHORT $LN15@htmlParseS
	npad	5
$LL16@htmlParseS:

; 3932 : 	    if (atts[i] != NULL)

	mov	eax, DWORD PTR [eax+esi*4]
	test	eax, eax
	je	SHORT $LN14@htmlParseS

; 3933 : 		xmlFree((xmlChar *) atts[i]);

	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN14@htmlParseS:

; 3931 :         for (i = 1;i < nbatts;i += 2) {

	mov	eax, DWORD PTR _atts$1$[ebp]
	add	esi, 2
	cmp	esi, ebx
	jl	SHORT $LL16@htmlParseS
$LN15@htmlParseS:

; 3934 : 	}
; 3935 :     }
; 3936 : 
; 3937 :     return(discardtag);

	mov	eax, edi
	pop	edi
	pop	ebx
	pop	esi

; 3938 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@htmlParseS:

; 3749 : 	htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CC@IMLMDHHB@htmlParseStartTag?3?5context?5erro@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3750 : 		     "htmlParseStartTag: context error\n", NULL, NULL);
; 3751 : 	return -1;

	or	eax, -1
	pop	esi

; 3938 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseStartTag ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCheckMeta
_TEXT	SEGMENT
_http$1$ = -8						; size = 4
_content$1$ = -4					; size = 4
_ctxt$ = 8						; size = 4
_atts$ = 12						; size = 4
_htmlCheckMeta PROC					; COMDAT

; 3689 : htmlCheckMeta(htmlParserCtxtPtr ctxt, const xmlChar **atts) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	xor	ecx, ecx
	mov	DWORD PTR _http$1$[ebp], 0
	mov	DWORD PTR _content$1$[ebp], ecx
	cmp	DWORD PTR _ctxt$[ebp], ecx
	je	$LN5@htmlCheckM

; 3690 :     int i;
; 3691 :     const xmlChar *att, *value;
; 3692 :     int http = 0;
; 3693 :     const xmlChar *content = NULL;
; 3694 : 
; 3695 :     if ((ctxt == NULL) || (atts == NULL))

	push	ebx
	mov	ebx, DWORD PTR _atts$[ebp]
	test	ebx, ebx
	je	$LN18@htmlCheckM

; 3696 : 	return;
; 3697 : 
; 3698 :     i = 0;
; 3699 :     att = atts[i++];

	push	esi
	mov	esi, DWORD PTR [ebx]

; 3700 :     while (att != NULL) {

	test	esi, esi
	je	$LN19@htmlCheckM

; 3696 : 	return;
; 3697 : 
; 3698 :     i = 0;
; 3699 :     att = atts[i++];

	add	ebx, 4
	push	edi
$LL2@htmlCheckM:

; 3701 : 	value = atts[i++];

	mov	edi, DWORD PTR [ebx]

; 3702 : 	if ((value != NULL) && (!xmlStrcasecmp(att, BAD_CAST"http-equiv"))
; 3703 : 	 && (!xmlStrcasecmp(value, BAD_CAST"Content-Type")))

	test	edi, edi
	je	SHORT $LN17@htmlCheckM
	push	OFFSET ??_C@_0L@NALBGOHO@http?9equiv@
	push	esi
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@htmlCheckM
	push	OFFSET ??_C@_0N@LAFFMKKA@Content?9Type@
	push	edi
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@htmlCheckM

; 3704 : 	    http = 1;

	mov	ecx, DWORD PTR _content$1$[ebp]
	mov	eax, 1
	mov	DWORD PTR _http$1$[ebp], eax
	jmp	SHORT $LN21@htmlCheckM
$LN6@htmlCheckM:

; 3705 : 	else if ((value != NULL) && (!xmlStrcasecmp(att, BAD_CAST"charset")))

	push	OFFSET ??_C@_07EAJPFAFH@charset@
	push	esi
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@htmlCheckM

; 3706 : 	    htmlCheckEncodingDirect(ctxt, value);

	push	edi
	mov	edi, DWORD PTR _ctxt$[ebp]
	push	edi
	call	_htmlCheckEncodingDirect
	mov	ecx, DWORD PTR _content$1$[ebp]
	add	esp, 8
	mov	eax, DWORD PTR _http$1$[ebp]
	jmp	SHORT $LN10@htmlCheckM
$LN8@htmlCheckM:

; 3707 : 	else if ((value != NULL) && (!xmlStrcasecmp(att, BAD_CAST"content")))

	push	OFFSET ??_C@_07ICAJMOAO@content@
	push	esi
	call	_xmlStrcasecmp
	mov	ecx, DWORD PTR _content$1$[ebp]
	add	esp, 8
	test	eax, eax
	cmove	ecx, edi
	mov	DWORD PTR _content$1$[ebp], ecx
$LN17@htmlCheckM:

; 3708 : 	    content = value;
; 3709 : 	att = atts[i++];

	mov	eax, DWORD PTR _http$1$[ebp]
$LN21@htmlCheckM:
	mov	edi, DWORD PTR _ctxt$[ebp]
$LN10@htmlCheckM:
	mov	esi, DWORD PTR [ebx+4]
	add	ebx, 8
	test	esi, esi
	jne	$LL2@htmlCheckM

; 3710 :     }
; 3711 :     if ((http) && (content != NULL))

	test	eax, eax
	je	SHORT $LN20@htmlCheckM
	test	ecx, ecx
	je	SHORT $LN20@htmlCheckM

; 3712 : 	htmlCheckEncoding(ctxt, content);

	push	ecx
	push	edi
	call	_htmlCheckEncoding
	add	esp, 8
$LN20@htmlCheckM:
	pop	edi
$LN19@htmlCheckM:
	pop	esi
$LN18@htmlCheckM:
	pop	ebx
$LN5@htmlCheckM:

; 3713 : 
; 3714 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlCheckMeta ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCheckEncoding
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_attvalue$ = 12						; size = 4
_htmlCheckEncoding PROC					; COMDAT

; 3660 : htmlCheckEncoding(htmlParserCtxtPtr ctxt, const xmlChar *attvalue) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _attvalue$[ebp]
	test	esi, esi
	je	SHORT $LN7@htmlCheckE

; 3661 :     const xmlChar *encoding;
; 3662 : 
; 3663 :     if (!attvalue)
; 3664 : 	return;
; 3665 : 
; 3666 :     encoding = xmlStrcasestr(attvalue, BAD_CAST"charset");

	push	OFFSET ??_C@_07EAJPFAFH@charset@
	push	esi
	call	_xmlStrcasestr
	add	esp, 8

; 3667 :     if (encoding != NULL) {

	test	eax, eax
	je	SHORT $LN7@htmlCheckE

; 3668 : 	encoding += 7;

	add	eax, 7

; 3669 :     }
; 3670 :     /*
; 3671 :      * skip blank
; 3672 :      */
; 3673 :     if (encoding && IS_BLANK_CH(*encoding))

	je	SHORT $LN7@htmlCheckE
	mov	cl, BYTE PTR [eax]
	cmp	cl, 32					; 00000020H
	je	SHORT $LN5@htmlCheckE
	cmp	cl, 9
	jb	SHORT $LN6@htmlCheckE
	cmp	cl, 10					; 0000000aH
	jbe	SHORT $LN5@htmlCheckE
$LN6@htmlCheckE:
	cmp	cl, 13					; 0000000dH
	jne	SHORT $LN4@htmlCheckE
$LN5@htmlCheckE:

; 3674 : 	encoding = xmlStrcasestr(attvalue, BAD_CAST"=");

	push	OFFSET ??_C@_01NEMOKFLO@?$DN@
	push	esi
	call	_xmlStrcasestr
	add	esp, 8
$LN4@htmlCheckE:

; 3675 :     if (encoding && *encoding == '=') {

	test	eax, eax
	je	SHORT $LN7@htmlCheckE
	cmp	BYTE PTR [eax], 61			; 0000003dH
	jne	SHORT $LN7@htmlCheckE

; 3676 : 	encoding ++;

	inc	eax
	pop	esi

; 3677 : 	htmlCheckEncodingDirect(ctxt, encoding);

	mov	DWORD PTR _attvalue$[ebp], eax

; 3678 :     }
; 3679 : }

	pop	ebp

; 3677 : 	htmlCheckEncodingDirect(ctxt, encoding);

	jmp	_htmlCheckEncodingDirect
$LN7@htmlCheckE:
	pop	esi

; 3678 :     }
; 3679 : }

	pop	ebp
	ret	0
_htmlCheckEncoding ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCheckEncodingDirect
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_encoding$ = 12						; size = 4
_htmlCheckEncodingDirect PROC				; COMDAT

; 3573 : htmlCheckEncodingDirect(htmlParserCtxtPtr ctxt, const xmlChar *encoding) {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _ctxt$[ebp]
	test	edi, edi
	je	$LN5@htmlCheckE

; 3574 : 
; 3575 :     if ((ctxt == NULL) || (encoding == NULL) ||

	push	esi
	mov	esi, DWORD PTR _encoding$[ebp]
	test	esi, esi
	je	$LN24@htmlCheckE
	test	DWORD PTR [edi+360], 2097152		; 00200000H
	jne	$LN24@htmlCheckE

; 3576 :         (ctxt->options & HTML_PARSE_IGNORE_ENC))
; 3577 : 	return;
; 3578 : 
; 3579 :     /* do not change encoding */
; 3580 :     if (ctxt->input->encoding != NULL)

	mov	eax, DWORD PTR [edi+36]
	cmp	DWORD PTR [eax+44], 0
	jne	$LN24@htmlCheckE
$LL2@htmlCheckE:

; 3581 :         return;
; 3582 : 
; 3583 :     if (encoding != NULL) {
; 3584 : 	xmlCharEncoding enc;
; 3585 : 	xmlCharEncodingHandlerPtr handler;
; 3586 : 
; 3587 : 	while ((*encoding == ' ') || (*encoding == '\t')) encoding++;

	mov	al, BYTE PTR [esi]
	cmp	al, 32					; 00000020H
	je	SHORT $LN22@htmlCheckE
	cmp	al, 9
	jne	SHORT $LN9@htmlCheckE
$LN22@htmlCheckE:
	inc	esi
	jmp	SHORT $LL2@htmlCheckE
$LN9@htmlCheckE:

; 3588 : 
; 3589 : 	if (ctxt->input->encoding != NULL)
; 3590 : 	    xmlFree((xmlChar *) ctxt->input->encoding);
; 3591 : 	ctxt->input->encoding = xmlStrdup(encoding);

	push	esi
	call	_xmlStrdup
	mov	ecx, DWORD PTR [edi+36]

; 3592 : 
; 3593 : 	enc = xmlParseCharEncoding((const char *) encoding);

	push	esi
	mov	DWORD PTR [ecx+44], eax
	call	_xmlParseCharEncoding
	mov	ecx, eax
	add	esp, 8

; 3594 : 	/*
; 3595 : 	 * registered set of known encodings
; 3596 : 	 */
; 3597 : 	if (enc != XML_CHAR_ENCODING_ERROR) {

	cmp	ecx, -1
	je	SHORT $LN10@htmlCheckE

; 3598 : 	    if (((enc == XML_CHAR_ENCODING_UTF16LE) ||
; 3599 : 	         (enc == XML_CHAR_ENCODING_UTF16BE) ||
; 3600 : 		 (enc == XML_CHAR_ENCODING_UCS4LE) ||
; 3601 : 		 (enc == XML_CHAR_ENCODING_UCS4BE)) &&
; 3602 : 		(ctxt->input->buf != NULL) &&

	cmp	ecx, 2
	je	SHORT $LN14@htmlCheckE
	cmp	ecx, 3
	je	SHORT $LN14@htmlCheckE
	cmp	ecx, 4
	je	SHORT $LN14@htmlCheckE
	cmp	ecx, 5
	jne	SHORT $LN12@htmlCheckE
$LN14@htmlCheckE:
	mov	eax, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN12@htmlCheckE
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN12@htmlCheckE

; 3603 : 		(ctxt->input->buf->encoder == NULL)) {
; 3604 : 		htmlParseErr(ctxt, XML_ERR_INVALID_ENCODING,

	push	0
	push	0
	push	OFFSET ??_C@_0CI@JCPDEKHP@htmlCheckEncoding?3?5wrong?5encodi@
	push	81					; 00000051H
	push	edi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3609 : 	    }
; 3610 : 	    ctxt->charset = XML_CHAR_ENCODING_UTF8;

	mov	DWORD PTR [edi+256], 1

; 3611 : 	} else {

	jmp	SHORT $LN16@htmlCheckE
$LN12@htmlCheckE:

; 3605 : 		             "htmlCheckEncoding: wrong encoding meta\n",
; 3606 : 			     NULL, NULL);
; 3607 : 	    } else {
; 3608 : 		xmlSwitchEncoding(ctxt, enc);

	push	ecx
	push	edi
	call	_xmlSwitchEncoding
	add	esp, 8

; 3609 : 	    }
; 3610 : 	    ctxt->charset = XML_CHAR_ENCODING_UTF8;

	mov	DWORD PTR [edi+256], 1

; 3611 : 	} else {

	jmp	SHORT $LN16@htmlCheckE
$LN10@htmlCheckE:

; 3612 : 	    /*
; 3613 : 	     * fallback for unknown encodings
; 3614 : 	     */
; 3615 : 	    handler = xmlFindCharEncodingHandler((const char *) encoding);

	push	esi
	call	_xmlFindCharEncodingHandler
	add	esp, 4

; 3616 : 	    if (handler != NULL) {

	test	eax, eax
	je	SHORT $LN15@htmlCheckE

; 3617 : 		xmlSwitchToEncoding(ctxt, handler);

	push	eax
	push	edi
	call	_xmlSwitchToEncoding
	add	esp, 8

; 3618 : 		ctxt->charset = XML_CHAR_ENCODING_UTF8;

	mov	DWORD PTR [edi+256], 1

; 3619 : 	    } else {

	jmp	SHORT $LN16@htmlCheckE
$LN15@htmlCheckE:

; 3620 : 		htmlParseErr(ctxt, XML_ERR_UNSUPPORTED_ENCODING,

	push	0
	push	esi
	push	OFFSET ??_C@_0CI@PNKHCAFG@htmlCheckEncoding?3?5unknown?5enco@
	push	32					; 00000020H
	push	edi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN16@htmlCheckE:

; 3621 : 		             "htmlCheckEncoding: unknown encoding %s\n",
; 3622 : 			     encoding, NULL);
; 3623 : 	    }
; 3624 : 	}
; 3625 : 
; 3626 : 	if ((ctxt->input->buf != NULL) &&
; 3627 : 	    (ctxt->input->buf->encoder != NULL) &&
; 3628 : 	    (ctxt->input->buf->raw != NULL) &&

	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN24@htmlCheckE
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN24@htmlCheckE
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN24@htmlCheckE
	mov	edx, DWORD PTR [eax+16]
	test	edx, edx
	je	SHORT $LN24@htmlCheckE

; 3629 : 	    (ctxt->input->buf->buffer != NULL)) {
; 3630 : 	    int nbchars;
; 3631 : 	    int processed;
; 3632 : 
; 3633 : 	    /*
; 3634 : 	     * convert as much as possible to the parser reading buffer.
; 3635 : 	     */
; 3636 : 	    processed = ctxt->input->cur - ctxt->input->base;

	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [ecx+12]

; 3637 : 	    xmlBufShrink(ctxt->input->buf->buffer, processed);

	push	eax
	push	edx
	call	_xmlBufShrink

; 3638 : 	    nbchars = xmlCharEncInput(ctxt->input->buf, 1);

	mov	eax, DWORD PTR [edi+36]
	push	1
	push	DWORD PTR [eax]
	call	_xmlCharEncInput

; 3639 :             xmlBufResetInput(ctxt->input->buf->buffer, ctxt->input);

	mov	ecx, DWORD PTR [edi+36]
	mov	esi, eax
	push	ecx
	mov	ecx, DWORD PTR [ecx]
	push	DWORD PTR [ecx+16]
	call	_xmlBufResetInput
	add	esp, 24					; 00000018H

; 3640 : 	    if (nbchars < 0) {

	test	esi, esi
	jns	SHORT $LN24@htmlCheckE

; 3641 : 		htmlParseErr(ctxt, XML_ERR_INVALID_ENCODING,

	push	0
	push	0
	push	OFFSET ??_C@_0CC@OECAOKB@htmlCheckEncoding?3?5encoder?5erro@
	push	81					; 00000051H
	push	edi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN24@htmlCheckE:
	pop	esi
$LN5@htmlCheckE:
	pop	edi

; 3642 : 		             "htmlCheckEncoding: encoder error\n",
; 3643 : 			     NULL, NULL);
; 3644 : 	    }
; 3645 : 	}
; 3646 :     }
; 3647 : }

	pop	ebp
	ret	0
_htmlCheckEncodingDirect ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseAttribute
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_name$1$ = 12						; size = 4
_value$ = 12						; size = 4
_htmlParseAttribute PROC				; COMDAT

; 3536 : htmlParseAttribute(htmlParserCtxtPtr ctxt, xmlChar **value) {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _value$[ebp]
	xor	edi, edi
	mov	esi, DWORD PTR _ctxt$[ebp]
	push	esi
	mov	DWORD PTR [ebx], edi
	call	_htmlParseHTMLName
	add	esp, 4
	mov	DWORD PTR _name$1$[ebp], eax
	test	eax, eax
	jne	SHORT $LN2@htmlParseA

; 3537 :     const xmlChar *name;
; 3538 :     xmlChar *val = NULL;
; 3539 : 
; 3540 :     *value = NULL;
; 3541 :     name = htmlParseHTMLName(ctxt);
; 3542 :     if (name == NULL) {
; 3543 : 	htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED,

	push	eax
	push	eax
	push	OFFSET ??_C@_0BO@BHLKDNI@error?5parsing?5attribute?5name?6@
	push	68					; 00000044H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3544 : 	             "error parsing attribute name\n", NULL, NULL);
; 3545 :         return(NULL);

	xor	eax, eax
	pop	edi

; 3560 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN2@htmlParseA:

; 3546 :     }
; 3547 : 
; 3548 :     /*
; 3549 :      * read the value
; 3550 :      */
; 3551 :     SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 3552 :     if (CUR == '=') {

	mov	eax, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 61			; 0000003dH
	jne	$LN14@htmlParseA

; 3553 :         NEXT;

	push	esi
	call	_xmlNextChar

; 3554 : 	SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 2747 :     if (CUR == '"') {

	mov	eax, DWORD PTR [esi+36]

; 3554 : 	SKIP_BLANKS;

	add	esp, 8

; 2747 :     if (CUR == '"') {

	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 34					; 00000022H
	jne	SHORT $LN6@htmlParseA

; 2748 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2749 : 	ret = htmlParseHTMLAttribute(ctxt, '"');

	push	34					; 00000022H
	push	esi
	call	_htmlParseHTMLAttribute

; 2750 :         if (CUR != '"') {

	mov	ecx, DWORD PTR [esi+36]
	add	esp, 12					; 0000000cH
	mov	edi, eax
	mov	ecx, DWORD PTR [ecx+16]
	cmp	BYTE PTR [ecx], 34			; 00000022H
	je	SHORT $LN12@htmlParseA

; 2751 : 	    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,

	push	0
	push	0
	push	OFFSET ??_C@_0BG@ECEGDLEC@AttValue?3?5?$CC?5expected?6@
	push	40					; 00000028H

; 3555 : 	val = htmlParseAttValue(ctxt);
; 3556 :     }
; 3557 : 
; 3558 :     *value = val;

	push	esi
	call	_htmlParseErr

; 3559 :     return(name);

	mov	eax, DWORD PTR _name$1$[ebp]
	add	esp, 20					; 00000014H
	mov	DWORD PTR [ebx], edi
	pop	edi

; 3560 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN6@htmlParseA:

; 2755 :     } else if (CUR == '\'') {

	cmp	al, 39					; 00000027H
	jne	SHORT $LN10@htmlParseA

; 2756 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2757 : 	ret = htmlParseHTMLAttribute(ctxt, '\'');

	push	39					; 00000027H
	push	esi
	call	_htmlParseHTMLAttribute
	mov	edi, eax
	add	esp, 12					; 0000000cH

; 2758 :         if (CUR != '\'') {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 39			; 00000027H
	je	SHORT $LN12@htmlParseA

; 2759 : 	    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,

	push	0
	push	0
	push	OFFSET ??_C@_0BG@NKOFEMFC@AttValue?3?5?8?5expected?6@
	push	40					; 00000028H

; 3555 : 	val = htmlParseAttValue(ctxt);
; 3556 :     }
; 3557 : 
; 3558 :     *value = val;

	push	esi
	call	_htmlParseErr

; 3559 :     return(name);

	mov	eax, DWORD PTR _name$1$[ebp]
	add	esp, 20					; 00000014H
	mov	DWORD PTR [ebx], edi
	pop	edi

; 3560 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN12@htmlParseA:

; 3555 : 	val = htmlParseAttValue(ctxt);
; 3556 :     }
; 3557 : 
; 3558 :     *value = val;

	push	esi
	call	_xmlNextChar

; 3559 :     return(name);

	mov	eax, DWORD PTR _name$1$[ebp]
	add	esp, 4
	mov	DWORD PTR [ebx], edi
	pop	edi

; 3560 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN10@htmlParseA:

; 2767 : 	ret = htmlParseHTMLAttribute(ctxt, 0);

	push	0
	push	esi
	call	_htmlParseHTMLAttribute
	mov	edi, eax
	add	esp, 8

; 2768 : 	if (ret == NULL) {

	test	edi, edi
	jne	SHORT $LN14@htmlParseA

; 2769 : 	    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_WITHOUT_VALUE,

	push	eax
	push	eax
	push	OFFSET ??_C@_0BK@IDNLEFDN@AttValue?3?5no?5value?5found?6@
	push	41					; 00000029H

; 3555 : 	val = htmlParseAttValue(ctxt);
; 3556 :     }
; 3557 : 
; 3558 :     *value = val;

	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN14@htmlParseA:

; 3559 :     return(name);

	mov	eax, DWORD PTR _name$1$[ebp]
	mov	DWORD PTR [ebx], edi
	pop	edi

; 3560 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_htmlParseAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseDocTypeDecl
_TEXT	SEGMENT
_ExternalID$ = -4					; size = 4
_name$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseDocTypeDecl PROC				; COMDAT

; 3457 : htmlParseDocTypeDecl(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	push	esi
	mov	DWORD PTR _ExternalID$[ebp], 0
	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [esi+200], 9
	add	DWORD PTR [eax+16], 9
	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [eax+32], 9
	call	_htmlSkipBlankChars
	push	esi
	call	_htmlParseName
	add	esp, 8
	mov	DWORD PTR _name$1$[ebp], eax
	test	eax, eax
	jne	SHORT $LN2@htmlParseD

; 3458 :     const xmlChar *name;
; 3459 :     xmlChar *ExternalID = NULL;
; 3460 :     xmlChar *URI = NULL;
; 3461 : 
; 3462 :     /*
; 3463 :      * We know that '<!DOCTYPE' has been detected.
; 3464 :      */
; 3465 :     SKIP(9);
; 3466 : 
; 3467 :     SKIP_BLANKS;
; 3468 : 
; 3469 :     /*
; 3470 :      * Parse the DOCTYPE name.
; 3471 :      */
; 3472 :     name = htmlParseName(ctxt);
; 3473 :     if (name == NULL) {
; 3474 : 	htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED,

	push	eax
	push	eax
	push	OFFSET ??_C@_0CK@ENAEKEOD@htmlParseDocTypeDecl?5?3?5no?5DOCTY@
	push	68					; 00000044H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN2@htmlParseD:

; 3475 : 	             "htmlParseDocTypeDecl : no DOCTYPE name !\n",
; 3476 : 		     NULL, NULL);
; 3477 :     }
; 3478 :     /*
; 3479 :      * Check that upper(name) == "HTML" !!!!!!!!!!!!!
; 3480 :      */
; 3481 : 
; 3482 :     SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 3483 : 
; 3484 :     /*
; 3485 :      * Check for SystemID and ExternalID
; 3486 :      */
; 3487 :     URI = htmlParseExternalID(ctxt, &ExternalID);

	lea	eax, DWORD PTR _ExternalID$[ebp]
	push	eax
	push	esi
	call	_htmlParseExternalID

; 3488 :     SKIP_BLANKS;

	push	esi
	mov	ebx, eax
	call	_htmlSkipBlankChars

; 3489 : 
; 3490 :     /*
; 3491 :      * We should be at the end of the DOCTYPE declaration.
; 3492 :      */
; 3493 :     if (CUR != '>') {

	mov	ecx, DWORD PTR [esi+36]
	add	esp, 16					; 00000010H
	mov	ecx, DWORD PTR [ecx+16]
	cmp	BYTE PTR [ecx], 62			; 0000003eH
	je	SHORT $LN3@htmlParseD

; 3494 : 	htmlParseErr(ctxt, XML_ERR_DOCTYPE_NOT_FINISHED,

	push	0
	push	0
	push	OFFSET ??_C@_0BP@EFDCAMCC@DOCTYPE?5improperly?5terminated?6@
	push	61					; 0000003dH
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN3@htmlParseD:

; 3495 : 	             "DOCTYPE improperly terminated\n", NULL, NULL);
; 3496 :         /* We shouldn't try to resynchronize ... */
; 3497 :     }
; 3498 :     NEXT;

	push	esi
	call	_xmlNextChar

; 3499 : 
; 3500 :     /*
; 3501 :      * Create or update the document accordingly to the DOCTYPE
; 3502 :      */
; 3503 :     if ((ctxt->sax != NULL) && (ctxt->sax->internalSubset != NULL) &&

	mov	eax, DWORD PTR [esi]
	add	esp, 4
	mov	edi, DWORD PTR _ExternalID$[ebp]
	test	eax, eax
	je	SHORT $LN4@htmlParseD
	mov	eax, DWORD PTR [eax]
	test	eax, eax
	je	SHORT $LN4@htmlParseD
	cmp	DWORD PTR [esi+212], 0
	jne	SHORT $LN4@htmlParseD

; 3504 : 	(!ctxt->disableSAX))
; 3505 : 	ctxt->sax->internalSubset(ctxt->userData, name, ExternalID, URI);

	push	ebx
	push	edi
	push	DWORD PTR _name$1$[ebp]
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 16					; 00000010H
$LN4@htmlParseD:

; 3506 : 
; 3507 :     /*
; 3508 :      * Cleanup, since we don't use all those identifiers
; 3509 :      */
; 3510 :     if (URI != NULL) xmlFree(URI);

	test	ebx, ebx
	je	SHORT $LN5@htmlParseD
	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN5@htmlParseD:

; 3511 :     if (ExternalID != NULL) xmlFree(ExternalID);

	test	edi, edi
	je	SHORT $LN6@htmlParseD
	push	edi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN6@htmlParseD:

; 3512 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseDocTypeDecl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParsePI
_TEXT	SEGMENT
_target$1$ = -20					; size = 4
_size$1$ = -16						; size = 4
_state$1$ = -12						; size = 4
_count$1$ = -8						; size = 4
_l$ = -4						; size = 4
_buf$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParsePI PROC					; COMDAT

; 3179 : htmlParsePI(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	xor	eax, eax
	xor	edi, edi
	mov	DWORD PTR _size$1$[ebp], 100		; 00000064H
	mov	DWORD PTR _count$1$[ebp], eax
	cmp	DWORD PTR [esi+176], eax
	jne	$LN7@htmlParseP

; 3180 :     xmlChar *buf = NULL;
; 3181 :     int len = 0;
; 3182 :     int size = HTML_PARSER_BUFFER_SIZE;
; 3183 :     int cur, l;
; 3184 :     const xmlChar *target;
; 3185 :     xmlParserInputState state;
; 3186 :     int count = 0;
; 3187 : 
; 3188 :     if ((RAW == '<') && (NXT(1) == '?')) {

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	$LN7@htmlParseP
	cmp	BYTE PTR [eax+1], 63			; 0000003fH
	jne	$LN7@htmlParseP

; 3189 : 	state = ctxt->instate;

	mov	eax, DWORD PTR [esi+172]

; 3190 :         ctxt->instate = XML_PARSER_PI;
; 3191 : 	/*
; 3192 : 	 * this is a Processing Instruction.
; 3193 : 	 */
; 3194 : 	SKIP(2);

	add	DWORD PTR [esi+200], 2
	mov	DWORD PTR [esi+172], 2
	add	DWORD PTR [ecx+16], 2
	mov	DWORD PTR _state$1$[ebp], eax
	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [eax+32], 2

; 3195 : 	SHRINK;

	mov	ecx, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, edx
	sub	eax, DWORD PTR [ecx+12]
	cmp	eax, 500				; 000001f4H
	jle	SHORT $LN8@htmlParseP
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, edx
	cmp	eax, 500				; 000001f4H
	jge	SHORT $LN8@htmlParseP
	push	ecx
	call	_xmlParserInputShrink
	add	esp, 4
$LN8@htmlParseP:

; 3196 : 
; 3197 : 	/*
; 3198 : 	 * Parse the target name and check for special support like
; 3199 : 	 * namespace.
; 3200 : 	 */
; 3201 :         target = htmlParseName(ctxt);

	push	ebx
	push	esi
	call	_htmlParseName
	mov	ebx, eax
	add	esp, 4
	mov	DWORD PTR _target$1$[ebp], ebx

; 3202 : 	if (target != NULL) {

	test	ebx, ebx
	je	$LN9@htmlParseP

; 3203 : 	    if (RAW == '>') {

	cmp	DWORD PTR [esi+176], edi
	jne	SHORT $LN11@htmlParseP
	mov	edx, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [edx+16]
	cmp	BYTE PTR [ecx], 62			; 0000003eH
	jne	SHORT $LN11@htmlParseP

; 3204 : 		SKIP(1);

	inc	DWORD PTR [esi+200]
	inc	DWORD PTR [edx+16]
	mov	eax, DWORD PTR [esi+36]
	inc	DWORD PTR [eax+32]

; 3205 : 
; 3206 : 		/*
; 3207 : 		 * SAX: PI detected.
; 3208 : 		 */
; 3209 : 		if ((ctxt->sax) && (!ctxt->disableSAX) &&

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	$LN10@htmlParseP
	cmp	DWORD PTR [esi+212], edi
	jne	$LN10@htmlParseP
	mov	eax, DWORD PTR [eax+76]
	test	eax, eax
	je	$LN10@htmlParseP

; 3210 : 		    (ctxt->sax->processingInstruction != NULL))
; 3211 : 		    ctxt->sax->processingInstruction(ctxt->userData,

	push	0
	push	ebx
	push	DWORD PTR [esi+4]
	call	eax

; 3275 :                          "PI is not started correctly", NULL, NULL);
; 3276 : 	}
; 3277 : 	ctxt->instate = state;

	mov	eax, DWORD PTR _state$1$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+172], eax
	pop	ebx
	pop	edi

; 3278 :     }
; 3279 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@htmlParseP:

; 3212 : 		                                     target, NULL);
; 3213 : 		ctxt->instate = state;
; 3214 : 		return;
; 3215 : 	    }
; 3216 : 	    buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));

	push	100					; 00000064H
	call	DWORD PTR _xmlMallocAtomic
	add	esp, 4
	mov	DWORD PTR _buf$1$[ebp], eax

; 3217 : 	    if (buf == NULL) {

	test	eax, eax
	jne	SHORT $LN13@htmlParseP

; 3218 : 		htmlErrMemory(ctxt, NULL);

	push	eax
	push	esi
	call	_htmlErrMemory

; 3275 :                          "PI is not started correctly", NULL, NULL);
; 3276 : 	}
; 3277 : 	ctxt->instate = state;

	mov	eax, DWORD PTR _state$1$[ebp]
	add	esp, 8
	mov	DWORD PTR [esi+172], eax
	pop	ebx
	pop	edi

; 3278 :     }
; 3279 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@htmlParseP:

; 3219 : 		ctxt->instate = state;
; 3220 : 		return;
; 3221 : 	    }
; 3222 : 	    cur = CUR;

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]

; 3223 : 	    if (!IS_BLANK(cur)) {

	cmp	al, 32					; 00000020H
	je	SHORT $LN14@htmlParseP
	cmp	al, 9
	jb	SHORT $LN34@htmlParseP
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN14@htmlParseP
$LN34@htmlParseP:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN14@htmlParseP

; 3224 : 		htmlParseErr(ctxt, XML_ERR_SPACE_REQUIRED,

	push	0
	push	ebx
	push	OFFSET ??_C@_0BP@KBNJPEOK@ParsePI?3?5PI?5?$CFs?5space?5expected?6@
	push	65					; 00000041H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN14@htmlParseP:

; 3225 : 			  "ParsePI: PI %s space expected\n", target, NULL);
; 3226 : 	    }
; 3227 :             SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 3228 : 	    cur = CUR_CHAR(l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	push	esi
	call	_htmlCurrentChar
	add	esp, 12					; 0000000cH
$LN58@htmlParseP:

; 3229 : 	    while (IS_CHAR(cur) && (cur != '>')) {

	mov	ebx, eax
$LL2@htmlParseP:
	cmp	ebx, 256				; 00000100H
	jge	SHORT $LN54@htmlParseP
	cmp	ebx, 9
	jl	SHORT $LN39@htmlParseP
	cmp	ebx, 10					; 0000000aH
	jle	SHORT $LN43@htmlParseP
$LN39@htmlParseP:
	cmp	ebx, 13					; 0000000dH
	je	SHORT $LN43@htmlParseP
	cmp	ebx, 32					; 00000020H
	jge	SHORT $LN43@htmlParseP
$LN3@htmlParseP:

; 3257 : 	    buf[len] = 0;

	mov	ecx, DWORD PTR _buf$1$[ebp]
	mov	BYTE PTR [edi+ecx], 0

; 3258 : 	    if (cur != '>') {

	cmp	ebx, 62					; 0000003eH
	je	$LN26@htmlParseP

; 3259 : 		htmlParseErr(ctxt, XML_ERR_PI_NOT_FINISHED,

	push	0
	push	DWORD PTR _target$1$[ebp]
	push	OFFSET ??_C@_0BO@OGPJFKEP@ParsePI?3?5PI?5?$CFs?5never?5end?5?4?4?4?6@
	push	47					; 0000002fH
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3270 : 		                                     target, buf);
; 3271 : 	    }
; 3272 : 	    xmlFree(buf);

	push	DWORD PTR _buf$1$[ebp]
	call	DWORD PTR _xmlFree

; 3275 :                          "PI is not started correctly", NULL, NULL);
; 3276 : 	}
; 3277 : 	ctxt->instate = state;

	mov	eax, DWORD PTR _state$1$[ebp]
	add	esp, 4
	mov	DWORD PTR [esi+172], eax
	pop	ebx
	pop	edi

; 3278 :     }
; 3279 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN54@htmlParseP:

; 3229 : 	    while (IS_CHAR(cur) && (cur != '>')) {

	cmp	ebx, 55295				; 0000d7ffH
	jle	SHORT $LN43@htmlParseP
	cmp	ebx, 57344				; 0000e000H
	jl	SHORT $LN42@htmlParseP
	cmp	ebx, 65533				; 0000fffdH
	jle	SHORT $LN43@htmlParseP
$LN42@htmlParseP:
	lea	eax, DWORD PTR [ebx-65536]
	cmp	eax, 1048575				; 000fffffH
	ja	SHORT $LN3@htmlParseP
$LN43@htmlParseP:
	cmp	ebx, 62					; 0000003eH
	je	SHORT $LN3@htmlParseP

; 3230 : 		if (len + 5 >= size) {

	mov	ecx, DWORD PTR _size$1$[ebp]
	lea	eax, DWORD PTR [edi+5]
	cmp	eax, ecx
	jl	SHORT $LN15@htmlParseP

; 3231 : 		    xmlChar *tmp;
; 3232 : 
; 3233 : 		    size *= 2;

	add	ecx, ecx

; 3234 : 		    tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));

	push	ecx
	push	DWORD PTR _buf$1$[ebp]
	mov	DWORD PTR _size$1$[ebp], ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8

; 3235 : 		    if (tmp == NULL) {

	test	eax, eax
	je	$LN50@htmlParseP

; 3238 : 			ctxt->instate = state;
; 3239 : 			return;
; 3240 : 		    }
; 3241 : 		    buf = tmp;

	mov	DWORD PTR _buf$1$[ebp], eax
$LN15@htmlParseP:

; 3242 : 		}
; 3243 : 		count++;

	mov	edx, DWORD PTR _count$1$[ebp]
	inc	edx
	mov	DWORD PTR _count$1$[ebp], edx

; 3244 : 		if (count > 50) {

	cmp	edx, 50					; 00000032H
	jle	SHORT $LN17@htmlParseP

; 3245 : 		    GROW;

	cmp	DWORD PTR [esi+292], 0
	jne	SHORT $LN18@htmlParseP
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN18@htmlParseP
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN18@htmlParseP:

; 3246 : 		    count = 0;

	xor	eax, eax
	mov	DWORD PTR _count$1$[ebp], eax
$LN17@htmlParseP:

; 3247 : 		}
; 3248 : 		COPY_BUF(l,buf,len,cur);

	mov	eax, DWORD PTR _buf$1$[ebp]
	mov	ecx, DWORD PTR _l$[ebp]
	add	eax, edi
	cmp	ecx, 1
	jne	SHORT $LN19@htmlParseP
	mov	BYTE PTR [eax], bl
	inc	edi
	jmp	SHORT $LN6@htmlParseP
$LN19@htmlParseP:
	push	ebx
	push	eax
	push	ecx
	call	_xmlCopyChar
	add	esp, 12					; 0000000cH
	add	edi, eax
$LN6@htmlParseP:

; 3249 : 		NEXTL(l);

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $LN21@htmlParseP
	inc	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [eax+32], 1
	jmp	SHORT $LN22@htmlParseP
$LN21@htmlParseP:
	inc	DWORD PTR [ecx+32]
$LN22@htmlParseP:
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR [esi+176], 0
	add	DWORD PTR [ecx+16], eax

; 3250 : 		cur = CUR_CHAR(l);

	lea	eax, DWORD PTR _l$[ebp]
	inc	DWORD PTR [esi+200]
	push	eax
	push	esi
	call	_htmlCurrentChar
	mov	ebx, eax
	add	esp, 8

; 3251 : 		if (cur == 0) {

	test	ebx, ebx
	jne	$LL2@htmlParseP

; 3252 : 		    SHRINK;

	mov	ecx, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, edx
	sub	eax, DWORD PTR [ecx+12]
	cmp	eax, 500				; 000001f4H
	jle	SHORT $LN24@htmlParseP
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, edx
	cmp	eax, 500				; 000001f4H
	jge	SHORT $LN24@htmlParseP
	push	ecx
	call	_xmlParserInputShrink
	add	esp, 4
$LN24@htmlParseP:

; 3253 : 		    GROW;

	cmp	DWORD PTR [esi+292], 0
	jne	SHORT $LN25@htmlParseP
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN25@htmlParseP
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN25@htmlParseP:

; 3254 : 		    cur = CUR_CHAR(l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	push	esi
	call	_htmlCurrentChar
	add	esp, 8

; 3255 : 		}
; 3256 : 	    }

	jmp	$LN58@htmlParseP
$LN50@htmlParseP:

; 3236 : 			htmlErrMemory(ctxt, NULL);

	push	0
	push	esi
	call	_htmlErrMemory

; 3237 : 			xmlFree(buf);

	push	DWORD PTR _buf$1$[ebp]
	call	DWORD PTR _xmlFree

; 3275 :                          "PI is not started correctly", NULL, NULL);
; 3276 : 	}
; 3277 : 	ctxt->instate = state;

	mov	eax, DWORD PTR _state$1$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [esi+172], eax
	pop	ebx
	pop	edi

; 3278 :     }
; 3279 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@htmlParseP:

; 3260 : 		      "ParsePI: PI %s never end ...\n", target, NULL);
; 3261 : 	    } else {
; 3262 : 		SKIP(1);

	mov	eax, DWORD PTR [esi+36]
	inc	DWORD PTR [esi+200]
	inc	DWORD PTR [eax+16]
	mov	eax, DWORD PTR [esi+36]
	inc	DWORD PTR [eax+32]

; 3263 : 
; 3264 : 		/*
; 3265 : 		 * SAX: PI detected.
; 3266 : 		 */
; 3267 : 		if ((ctxt->sax) && (!ctxt->disableSAX) &&

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN28@htmlParseP
	cmp	DWORD PTR [esi+212], 0
	jne	SHORT $LN28@htmlParseP
	mov	eax, DWORD PTR [eax+76]
	test	eax, eax
	je	SHORT $LN28@htmlParseP

; 3268 : 		    (ctxt->sax->processingInstruction != NULL))
; 3269 : 		    ctxt->sax->processingInstruction(ctxt->userData,

	push	ecx
	push	DWORD PTR _target$1$[ebp]
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 12					; 0000000cH
$LN28@htmlParseP:

; 3270 : 		                                     target, buf);
; 3271 : 	    }
; 3272 : 	    xmlFree(buf);

	push	DWORD PTR _buf$1$[ebp]
	call	DWORD PTR _xmlFree

; 3275 :                          "PI is not started correctly", NULL, NULL);
; 3276 : 	}
; 3277 : 	ctxt->instate = state;

	mov	eax, DWORD PTR _state$1$[ebp]
	add	esp, 4
	mov	DWORD PTR [esi+172], eax
	pop	ebx
	pop	edi

; 3278 :     }
; 3279 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@htmlParseP:

; 3273 : 	} else {
; 3274 : 	    htmlParseErr(ctxt, XML_ERR_PI_NOT_STARTED,

	push	0
	push	0
	push	OFFSET ??_C@_0BM@EHACIEGC@PI?5is?5not?5started?5correctly@
	push	46					; 0000002eH
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN10@htmlParseP:

; 3275 :                          "PI is not started correctly", NULL, NULL);
; 3276 : 	}
; 3277 : 	ctxt->instate = state;

	mov	eax, DWORD PTR _state$1$[ebp]
	mov	DWORD PTR [esi+172], eax
	pop	ebx
$LN7@htmlParseP:

; 3278 :     }
; 3279 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParsePI ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseExternalID
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_publicID$ = 12						; size = 4
_htmlParseExternalID PROC				; COMDAT

; 3130 : htmlParseExternalID(htmlParserCtxtPtr ctxt, xmlChar **publicID) {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	xor	ebx, ebx
	mov	edi, DWORD PTR __imp__toupper
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 83					; 00000053H
	jne	$LN2@htmlParseE

; 3131 :     xmlChar *URI = NULL;
; 3132 : 
; 3133 :     if ((UPPER == 'S') && (UPP(1) == 'Y') &&
; 3134 :          (UPP(2) == 'S') && (UPP(3) == 'T') &&
; 3135 : 	 (UPP(4) == 'E') && (UPP(5) == 'M')) {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+1]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 89					; 00000059H
	jne	$LN2@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+2]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 83					; 00000053H
	jne	$LN2@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+3]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 84					; 00000054H
	jne	$LN2@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+4]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 69					; 00000045H
	jne	$LN2@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+5]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 77					; 0000004dH
	jne	SHORT $LN2@htmlParseE

; 3136 :         SKIP(6);

	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [esi+200], 6
	add	DWORD PTR [eax+16], 6
	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [eax+32], 6

; 3137 : 	if (!IS_BLANK_CH(CUR)) {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 32					; 00000020H
	je	SHORT $LN4@htmlParseE
	cmp	al, 9
	jb	SHORT $LN5@htmlParseE
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN4@htmlParseE
$LN5@htmlParseE:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN4@htmlParseE

; 3138 : 	    htmlParseErr(ctxt, XML_ERR_SPACE_REQUIRED,

	push	0
	push	0
	push	OFFSET ??_C@_0BP@CCMMHADN@Space?5required?5after?5?8SYSTEM?8?6@
	push	65					; 00000041H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN4@htmlParseE:

; 3139 : 	                 "Space required after 'SYSTEM'\n", NULL, NULL);
; 3140 : 	}
; 3141 :         SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 3142 : 	URI = htmlParseSystemLiteral(ctxt);

	push	esi
	call	_htmlParseSystemLiteral
	mov	ebx, eax
	add	esp, 8

; 3143 : 	if (URI == NULL) {

	test	ebx, ebx
	jne	$LN11@htmlParseE

; 3144 : 	    htmlParseErr(ctxt, XML_ERR_URI_REQUIRED,

	push	eax
	push	eax
	push	OFFSET ??_C@_0CF@LGGPLBBM@htmlParseExternalID?3?5SYSTEM?0?5no@
	push	70					; 00000046H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3165 : 	}
; 3166 :     }
; 3167 :     return(URI);

	mov	eax, ebx
	pop	edi
	pop	esi
	pop	ebx

; 3168 : }

	pop	ebp
	ret	0
$LN2@htmlParseE:

; 3145 : 	                 "htmlParseExternalID: SYSTEM, no URI\n", NULL, NULL);
; 3146 :         }
; 3147 :     } else if ((UPPER == 'P') && (UPP(1) == 'U') &&
; 3148 : 	       (UPP(2) == 'B') && (UPP(3) == 'L') &&
; 3149 : 	       (UPP(4) == 'I') && (UPP(5) == 'C')) {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 80					; 00000050H
	jne	$LN11@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+1]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 85					; 00000055H
	jne	$LN11@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+2]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 66					; 00000042H
	jne	$LN11@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+3]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 76					; 0000004cH
	jne	$LN11@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+4]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 73					; 00000049H
	jne	$LN11@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+5]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 67					; 00000043H
	jne	$LN11@htmlParseE

; 3150 :         SKIP(6);

	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [esi+200], 6
	add	DWORD PTR [eax+16], 6
	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [eax+32], 6

; 3151 : 	if (!IS_BLANK_CH(CUR)) {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 32					; 00000020H
	je	SHORT $LN8@htmlParseE
	cmp	al, 9
	jb	SHORT $LN9@htmlParseE
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN8@htmlParseE
$LN9@htmlParseE:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN8@htmlParseE

; 3152 : 	    htmlParseErr(ctxt, XML_ERR_SPACE_REQUIRED,

	push	0
	push	0
	push	OFFSET ??_C@_0BP@EHONNEAJ@Space?5required?5after?5?8PUBLIC?8?6@
	push	65					; 00000041H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN8@htmlParseE:

; 3153 : 	                 "Space required after 'PUBLIC'\n", NULL, NULL);
; 3154 : 	}
; 3155 :         SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 3156 : 	*publicID = htmlParsePubidLiteral(ctxt);

	push	esi
	call	_htmlParsePubidLiteral
	mov	ecx, DWORD PTR _publicID$[ebp]
	add	esp, 8
	mov	DWORD PTR [ecx], eax

; 3157 : 	if (*publicID == NULL) {

	test	eax, eax
	jne	SHORT $LN10@htmlParseE

; 3158 : 	    htmlParseErr(ctxt, XML_ERR_PUBID_REQUIRED,

	push	eax
	push	eax
	push	OFFSET ??_C@_0DD@OPLMODNC@htmlParseExternalID?3?5PUBLIC?0?5no@
	push	71					; 00000047H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN10@htmlParseE:

; 3159 : 	                 "htmlParseExternalID: PUBLIC, no Public Identifier\n",
; 3160 : 			 NULL, NULL);
; 3161 : 	}
; 3162 :         SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 3163 :         if ((CUR == '"') || (CUR == '\'')) {

	mov	eax, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 34					; 00000022H
	je	SHORT $LN12@htmlParseE
	cmp	al, 39					; 00000027H
	jne	SHORT $LN11@htmlParseE
$LN12@htmlParseE:

; 3164 : 	    URI = htmlParseSystemLiteral(ctxt);

	push	esi
	call	_htmlParseSystemLiteral
	add	esp, 4
	mov	ebx, eax
$LN11@htmlParseE:

; 3165 : 	}
; 3166 :     }
; 3167 :     return(URI);

	pop	edi
	pop	esi
	mov	eax, ebx
	pop	ebx

; 3168 : }

	pop	ebp
	ret	0
_htmlParseExternalID ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseCharData
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlParseCharData PROC					; COMDAT

; 3108 : htmlParseCharData(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	push	0
	push	DWORD PTR _ctxt$[ebp]
	call	_htmlParseCharDataInternal
	add	esp, 8

; 3109 :     htmlParseCharDataInternal(ctxt, 0);
; 3110 : }

	pop	ebp
	ret	0
_htmlParseCharData ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseCharDataInternal
_TEXT	SEGMENT
_buf$ = -1012						; size = 1006
_l$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_readahead$ = 12					; size = 4
_htmlParseCharDataInternal PROC				; COMDAT

; 3010 : htmlParseCharDataInternal(htmlParserCtxtPtr ctxt, int readahead) {

	push	ebp
	mov	ebp, esp
	sub	esp, 1012				; 000003f4H
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edx, DWORD PTR _readahead$[ebp]
	xor	edi, edi
	movzx	ecx, BYTE PTR _buf$[ebp]
	test	edx, edx
	mov	esi, DWORD PTR _ctxt$[ebp]
	movzx	eax, dl
	cmovne	ecx, eax
	xor	ebx, ebx
	mov	BYTE PTR _buf$[ebp], cl
	test	edx, edx
	mov	ecx, DWORD PTR [esi+36]
	setne	bl
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, edx
	sub	eax, DWORD PTR [ecx+12]
	cmp	eax, 500				; 000001f4H
	jle	SHORT $LN8@htmlParseC

; 3011 :     xmlChar buf[HTML_PARSER_BIG_BUFFER_SIZE + 6];
; 3012 :     int nbchar = 0;
; 3013 :     int cur, l;
; 3014 :     int chunk = 0;
; 3015 : 
; 3016 :     if (readahead)
; 3017 :         buf[nbchar++] = readahead;
; 3018 : 
; 3019 :     SHRINK;

	mov	eax, DWORD PTR [ecx+20]
	sub	eax, edx
	cmp	eax, 500				; 000001f4H
	jge	SHORT $LN8@htmlParseC
	push	ecx
	call	_xmlParserInputShrink
	add	esp, 4
$LN8@htmlParseC:

; 3020 :     cur = CUR_CHAR(l);
; 3021 :     while (((cur != '<') || (ctxt->token == '<')) &&
; 3022 :            ((cur != '&') || (ctxt->token == '&')) &&

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	push	esi
	call	_htmlCurrentChar
	mov	ecx, eax
	add	esp, 8
$LL2@htmlParseC:
	cmp	ecx, 60					; 0000003cH
	jne	SHORT $LN61@htmlParseC
	cmp	DWORD PTR [esi+176], ecx
$LN69@htmlParseC:

; 3028 : 	    COPY_BUF(l,buf,nbchar,cur);

	jne	$LN3@htmlParseC
$LN11@htmlParseC:
	mov	edx, DWORD PTR _l$[ebp]
	lea	eax, DWORD PTR _buf$[ebp]
	add	eax, ebx
	cmp	edx, 1
	jne	$LN13@htmlParseC
	mov	BYTE PTR [eax], cl
	inc	ebx
	jmp	$LN14@htmlParseC
$LN61@htmlParseC:

; 3020 :     cur = CUR_CHAR(l);
; 3021 :     while (((cur != '<') || (ctxt->token == '<')) &&
; 3022 :            ((cur != '&') || (ctxt->token == '&')) &&

	cmp	ecx, 38					; 00000026H
	jne	SHORT $LN10@htmlParseC
	cmp	DWORD PTR [esi+176], ecx
	jmp	SHORT $LN69@htmlParseC
$LN10@htmlParseC:
	test	ecx, ecx
	je	$LN3@htmlParseC

; 3023 : 	   (cur != 0)) {
; 3024 : 	if (!(IS_CHAR(cur))) {

	cmp	ecx, 256				; 00000100H
	jge	SHORT $LN67@htmlParseC
	cmp	ecx, 9
	jl	SHORT $LN44@htmlParseC
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN11@htmlParseC
$LN44@htmlParseC:
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN11@htmlParseC
	cmp	ecx, 32					; 00000020H
	jge	SHORT $LN11@htmlParseC
	jmp	SHORT $LN49@htmlParseC
$LN67@htmlParseC:
	cmp	ecx, 55295				; 0000d7ffH
	jle	SHORT $LN11@htmlParseC
	cmp	ecx, 57344				; 0000e000H
	jl	SHORT $LN47@htmlParseC
	cmp	ecx, 65533				; 0000fffdH
	jle	SHORT $LN11@htmlParseC
$LN47@htmlParseC:
	lea	eax, DWORD PTR [ecx-65536]
	cmp	eax, 1048575				; 000fffffH
	jbe	SHORT $LN11@htmlParseC
$LN49@htmlParseC:

; 139  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR [esi+212], 0
	je	SHORT $LN55@htmlParseC
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN14@htmlParseC
$LN55@htmlParseC:

; 140  :         (ctxt->instate == XML_PARSER_EOF))
; 141  : 	return;
; 142  :     if (ctxt != NULL)
; 143  : 	ctxt->errNo = error;
; 144  :     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_HTML, error,

	push	ecx
	push	OFFSET ??_C@_0BM@GCKCOLAE@Invalid?5char?5in?5CDATA?50x?$CFX?6@
	push	0
	push	ecx
	push	0
	push	0
	push	0
	push	0
	push	0
	push	2
	push	9
	push	5
	push	0
	push	esi
	push	0
	push	0
	push	0
	mov	DWORD PTR [esi+84], 9
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 145  :                     XML_ERR_ERROR, NULL, 0, NULL, NULL,
; 146  : 		    NULL, val, 0, msg, val);
; 147  :     if (ctxt != NULL)
; 148  : 	ctxt->wellFormed = 0;

	mov	DWORD PTR [esi+12], 0

; 3025 : 	    htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,
; 3026 : 	                "Invalid char in CDATA 0x%X\n", cur);
; 3027 : 	} else {

	jmp	SHORT $LN14@htmlParseC
$LN13@htmlParseC:

; 3028 : 	    COPY_BUF(l,buf,nbchar,cur);

	push	ecx
	push	eax
	push	edx
	call	_xmlCopyChar
	add	esp, 12					; 0000000cH
	add	ebx, eax
$LN14@htmlParseC:

; 3029 : 	}
; 3030 : 	if (nbchar >= HTML_PARSER_BIG_BUFFER_SIZE) {

	cmp	ebx, 1000				; 000003e8H
	jl	SHORT $LN6@htmlParseC

; 3031 : 	    /*
; 3032 : 	     * Ok the segment is to be consumed as chars.
; 3033 : 	     */
; 3034 : 	    if ((ctxt->sax != NULL) && (!ctxt->disableSAX)) {

	cmp	DWORD PTR [esi], 0
	je	SHORT $LN23@htmlParseC
	cmp	DWORD PTR [esi+212], 0
	jne	SHORT $LN23@htmlParseC

; 3035 : 		if (areBlanks(ctxt, buf, nbchar)) {

	push	ebx
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	esi
	call	_areBlanks
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN17@htmlParseC

; 3036 : 		    if (ctxt->keepBlanks) {

	cmp	DWORD PTR [esi+208], 0
	mov	eax, DWORD PTR [esi]
	jne	SHORT $LN71@htmlParseC

; 3037 : 			if (ctxt->sax->characters != NULL)
; 3038 : 			    ctxt->sax->characters(ctxt->userData, buf, nbchar);
; 3039 : 		    } else {
; 3040 : 			if (ctxt->sax->ignorableWhitespace != NULL)

	mov	eax, DWORD PTR [eax+72]

; 3041 : 			    ctxt->sax->ignorableWhitespace(ctxt->userData,
; 3042 : 			                                   buf, nbchar);
; 3043 : 		    }
; 3044 : 		} else {

	jmp	SHORT $LN72@htmlParseC
$LN17@htmlParseC:

; 3045 : 		    htmlCheckParagraph(ctxt);

	push	esi
	call	_htmlCheckParagraph

; 3046 : 		    if (ctxt->sax->characters != NULL)

	mov	eax, DWORD PTR [esi]
	add	esp, 4
$LN71@htmlParseC:

; 3047 : 			ctxt->sax->characters(ctxt->userData, buf, nbchar);
; 3048 : 		}
; 3049 : 	    }
; 3050 : 	    nbchar = 0;

	mov	eax, DWORD PTR [eax+68]
$LN72@htmlParseC:
	test	eax, eax
	je	SHORT $LN23@htmlParseC
	push	ebx
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 12					; 0000000cH
$LN23@htmlParseC:
	xor	ebx, ebx
$LN6@htmlParseC:

; 3051 : 	}
; 3052 : 	NEXTL(l);

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $LN24@htmlParseC
	inc	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [eax+32], 1
	jmp	SHORT $LN25@htmlParseC
$LN24@htmlParseC:
	inc	DWORD PTR [ecx+32]
$LN25@htmlParseC:
	mov	ecx, DWORD PTR [esi+36]

; 3053 :         chunk++;

	inc	edi
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR [esi+176], 0
	add	DWORD PTR [ecx+16], eax
	inc	DWORD PTR [esi+200]

; 3054 :         if (chunk > HTML_PARSER_BUFFER_SIZE) {

	cmp	edi, 100				; 00000064H
	jle	SHORT $LN28@htmlParseC

; 3055 :             chunk = 0;
; 3056 :             SHRINK;

	mov	ecx, DWORD PTR [esi+36]
	xor	edi, edi
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, edx
	sub	eax, DWORD PTR [ecx+12]
	cmp	eax, 500				; 000001f4H
	jle	SHORT $LN27@htmlParseC
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, edx
	cmp	eax, 500				; 000001f4H
	jge	SHORT $LN27@htmlParseC
	push	ecx
	call	_xmlParserInputShrink
	add	esp, 4
$LN27@htmlParseC:

; 3057 :             GROW;

	cmp	DWORD PTR [esi+292], edi
	jne	SHORT $LN28@htmlParseC
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN28@htmlParseC
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN28@htmlParseC:

; 3058 :         }
; 3059 : 	cur = CUR_CHAR(l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	push	esi
	call	_htmlCurrentChar
	mov	ecx, eax
	add	esp, 8

; 3060 : 	if (cur == 0) {

	test	ecx, ecx
	jne	$LL2@htmlParseC

; 3061 : 	    SHRINK;

	mov	ecx, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, edx
	sub	eax, DWORD PTR [ecx+12]
	cmp	eax, 500				; 000001f4H
	jle	SHORT $LN30@htmlParseC
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, edx
	cmp	eax, 500				; 000001f4H
	jge	SHORT $LN30@htmlParseC
	push	ecx
	call	_xmlParserInputShrink
	add	esp, 4
$LN30@htmlParseC:

; 3062 : 	    GROW;

	cmp	DWORD PTR [esi+292], 0
	jne	$LN8@htmlParseC
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	$LN8@htmlParseC
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8

; 3063 : 	    cur = CUR_CHAR(l);
; 3064 : 	}
; 3065 :     }

	jmp	$LN8@htmlParseC
$LN3@htmlParseC:

; 3066 :     if (nbchar != 0) {

	test	ebx, ebx
	je	SHORT $LN32@htmlParseC

; 3067 :         buf[nbchar] = 0;
; 3068 : 
; 3069 : 	/*
; 3070 : 	 * Ok the segment is to be consumed as chars.
; 3071 : 	 */
; 3072 : 	if ((ctxt->sax != NULL) && (!ctxt->disableSAX)) {

	cmp	DWORD PTR [esi], 0
	mov	BYTE PTR _buf$[ebp+ebx], 0
	je	SHORT $LN42@htmlParseC
	cmp	DWORD PTR [esi+212], 0
	jne	SHORT $LN42@htmlParseC

; 3073 : 	    if (areBlanks(ctxt, buf, nbchar)) {

	push	ebx
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	esi
	call	_areBlanks
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN35@htmlParseC

; 3074 : 		if (ctxt->keepBlanks) {

	cmp	DWORD PTR [esi+208], 0
	mov	eax, DWORD PTR [esi]
	jne	SHORT $LN73@htmlParseC

; 3075 : 		    if (ctxt->sax->characters != NULL)
; 3076 : 			ctxt->sax->characters(ctxt->userData, buf, nbchar);
; 3077 : 		} else {
; 3078 : 		    if (ctxt->sax->ignorableWhitespace != NULL)

	mov	eax, DWORD PTR [eax+72]

; 3079 : 			ctxt->sax->ignorableWhitespace(ctxt->userData,
; 3080 : 			                               buf, nbchar);
; 3081 : 		}
; 3082 : 	    } else {

	jmp	SHORT $LN74@htmlParseC
$LN35@htmlParseC:

; 3083 : 		htmlCheckParagraph(ctxt);

	push	esi
	call	_htmlCheckParagraph

; 3084 : 		if (ctxt->sax->characters != NULL)

	mov	eax, DWORD PTR [esi]
	add	esp, 4
$LN73@htmlParseC:

; 3094 :     }
; 3095 : }

	mov	eax, DWORD PTR [eax+68]
$LN74@htmlParseC:
	test	eax, eax
	je	SHORT $LN42@htmlParseC
	push	ebx
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@htmlParseC:

; 3085 : 		    ctxt->sax->characters(ctxt->userData, buf, nbchar);
; 3086 : 	    }
; 3087 : 	}
; 3088 :     } else {
; 3089 : 	/*
; 3090 : 	 * Loop detection
; 3091 : 	 */
; 3092 : 	if (cur == 0)

	test	ecx, ecx
	jne	SHORT $LN42@htmlParseC

; 3093 : 	    ctxt->instate = XML_PARSER_EOF;

	mov	DWORD PTR [esi+172], -1
$LN42@htmlParseC:
	pop	edi

; 3094 :     }
; 3095 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseCharDataInternal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseScript
_TEXT	SEGMENT
_buf$ = -1012						; size = 1005
_l$ = -4						; size = 4
tv782 = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseScript PROC					; COMDAT

; 2922 : htmlParseScript(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 1012				; 000003f4H
	mov	ecx, OFFSET __111E219E_htmlparser@c
	push	esi
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	xor	edi, edi
	mov	ecx, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, edx
	sub	eax, DWORD PTR [ecx+12]
	cmp	eax, 500				; 000001f4H
	jle	SHORT $LN7@htmlParseS

; 2923 :     xmlChar buf[HTML_PARSER_BIG_BUFFER_SIZE + 5];
; 2924 :     int nbchar = 0;
; 2925 :     int cur,l;
; 2926 : 
; 2927 :     SHRINK;

	mov	eax, DWORD PTR [ecx+20]
	sub	eax, edx
	cmp	eax, 500				; 000001f4H
	jge	SHORT $LN7@htmlParseS
	push	ecx
	call	_xmlParserInputShrink
	add	esp, 4
$LN7@htmlParseS:
	push	ebx
$LN46@htmlParseS:

; 2928 :     cur = CUR_CHAR(l);
; 2929 :     while (IS_CHAR_CH(cur)) {

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	push	esi
	call	_htmlCurrentChar
	mov	ebx, eax
	add	esp, 8
	cmp	ebx, 9
	jl	SHORT $LN9@htmlParseS
	cmp	ebx, 10					; 0000000aH
	jle	SHORT $LN8@htmlParseS
$LN9@htmlParseS:
	cmp	ebx, 13					; 0000000dH
	je	SHORT $LN8@htmlParseS
	cmp	ebx, 32					; 00000020H
	jl	$LN38@htmlParseS
$LN8@htmlParseS:

; 2930 : 	if ((cur == '<') && (NXT(1) == '/')) {

	cmp	ebx, 60					; 0000003cH
	jne	SHORT $LN15@htmlParseS
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR tv782[ebp], eax
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax+1], 47			; 0000002fH
	jne	SHORT $LN15@htmlParseS

; 2931 :             /*
; 2932 :              * One should break here, the specification is clear:
; 2933 :              * Authors should therefore escape "</" within the content.
; 2934 :              * Escape mechanisms are specific to each scripting or
; 2935 :              * style sheet language.
; 2936 :              *
; 2937 :              * In recovery mode, only break if end tag match the
; 2938 :              * current tag, effectively ignoring all tags inside the
; 2939 :              * script/style block and treating the entire block as
; 2940 :              * CDATA.
; 2941 :              */
; 2942 :             if (ctxt->recovery) {

	cmp	DWORD PTR [esi+288], 0
	je	SHORT $LN11@htmlParseS

; 2943 :                 if (xmlStrncasecmp(ctxt->name, ctxt->input->cur+2,
; 2944 : 				   xmlStrlen(ctxt->name)) == 0)

	push	DWORD PTR [esi+184]
	call	_xmlStrlen
	push	eax
	mov	eax, DWORD PTR tv782[ebp]
	mov	eax, DWORD PTR [eax+16]
	add	eax, 2
	push	eax
	push	DWORD PTR [esi+184]
	call	_xmlStrncasecmp
	add	esp, 16					; 00000010H
	test	eax, eax
	je	$LN30@htmlParseS

; 2945 :                 {
; 2946 :                     break; /* while */
; 2947 :                 } else {
; 2948 : 		    htmlParseErr(ctxt, XML_ERR_TAG_NAME_MISMATCH,

	push	0
	push	DWORD PTR [esi+184]
	push	OFFSET ??_C@_0BN@HLEPILFB@Element?5?$CFs?5embeds?5close?5tag?6@
	push	76					; 0000004cH
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 2949 : 				 "Element %s embeds close tag\n",
; 2950 : 		                 ctxt->name, NULL);
; 2951 : 		}
; 2952 :             } else {

	jmp	SHORT $LN15@htmlParseS
$LN11@htmlParseS:

; 2953 :                 if (((NXT(2) >= 'A') && (NXT(2) <= 'Z')) ||

	mov	al, BYTE PTR [eax+2]
	cmp	al, 65					; 00000041H
	jb	SHORT $LN17@htmlParseS
	cmp	al, 90					; 0000005aH
	jbe	$LN30@htmlParseS
$LN17@htmlParseS:
	cmp	al, 97					; 00000061H
	jb	SHORT $LN15@htmlParseS
	cmp	al, 122					; 0000007aH
	jbe	$LN30@htmlParseS
$LN15@htmlParseS:

; 2954 :                     ((NXT(2) >= 'a') && (NXT(2) <= 'z')))
; 2955 :                 {
; 2956 :                     break; /* while */
; 2957 :                 }
; 2958 :             }
; 2959 : 	}
; 2960 : 	COPY_BUF(l,buf,nbchar,cur);

	mov	ecx, DWORD PTR _l$[ebp]
	lea	eax, DWORD PTR _buf$[ebp]
	add	eax, edi
	cmp	ecx, 1
	jne	SHORT $LN18@htmlParseS
	mov	BYTE PTR [eax], bl
	inc	edi
	jmp	SHORT $LN19@htmlParseS
$LN18@htmlParseS:
	push	ebx
	push	eax
	push	ecx
	call	_xmlCopyChar
	add	esp, 12					; 0000000cH
	add	edi, eax
$LN19@htmlParseS:

; 2961 : 	if (nbchar >= HTML_PARSER_BIG_BUFFER_SIZE) {

	cmp	edi, 1000				; 000003e8H
	jl	SHORT $LN20@htmlParseS

; 2962 : 	    if (ctxt->sax->cdataBlock!= NULL) {

	mov	eax, DWORD PTR [esi]
	mov	ecx, DWORD PTR [eax+100]
	test	ecx, ecx
	je	SHORT $LN21@htmlParseS

; 2963 : 		/*
; 2964 : 		 * Insert as CDATA, which is the same as HTML_PRESERVE_NODE
; 2965 : 		 */
; 2966 : 		ctxt->sax->cdataBlock(ctxt->userData, buf, nbchar);

	push	edi
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	DWORD PTR [esi+4]
	call	ecx
	jmp	SHORT $LN45@htmlParseS
$LN21@htmlParseS:

; 2967 : 	    } else if (ctxt->sax->characters != NULL) {

	mov	eax, DWORD PTR [eax+68]
	test	eax, eax
	je	SHORT $LN23@htmlParseS

; 2968 : 		ctxt->sax->characters(ctxt->userData, buf, nbchar);

	push	edi
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	DWORD PTR [esi+4]
	call	eax
$LN45@htmlParseS:

; 2969 : 	    }
; 2970 : 	    nbchar = 0;

	add	esp, 12					; 0000000cH
$LN23@htmlParseS:
	xor	edi, edi
$LN20@htmlParseS:

; 2971 : 	}
; 2972 : 	GROW;

	cmp	DWORD PTR [esi+292], 0
	jne	SHORT $LN6@htmlParseS
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN6@htmlParseS
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN6@htmlParseS:

; 2973 : 	NEXTL(l);

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $LN25@htmlParseS
	inc	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [eax+32], 1
	jmp	SHORT $LN26@htmlParseS
$LN25@htmlParseS:
	inc	DWORD PTR [ecx+32]
$LN26@htmlParseS:
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR [esi+176], 0
	add	DWORD PTR [ecx+16], eax
	inc	DWORD PTR [esi+200]

; 2974 : 	cur = CUR_CHAR(l);
; 2975 :     }

	jmp	$LN46@htmlParseS
$LN38@htmlParseS:

; 2976 : 
; 2977 :     if ((!(IS_CHAR_CH(cur))) && (!((cur == 0) && (ctxt->progressive)))) {

	cmp	ebx, 9
	jl	SHORT $LN28@htmlParseS
	cmp	ebx, 10					; 0000000aH
	jle	SHORT $LN30@htmlParseS
$LN28@htmlParseS:
	cmp	ebx, 13					; 0000000dH
	je	SHORT $LN30@htmlParseS
	cmp	ebx, 32					; 00000020H
	jge	SHORT $LN30@htmlParseS
	test	ebx, ebx
	jne	SHORT $LN29@htmlParseS
	cmp	DWORD PTR [esi+292], ebx
	jne	SHORT $LN30@htmlParseS
$LN29@htmlParseS:

; 2978 :         htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,

	push	ebx
	push	OFFSET ??_C@_0BM@GCKCOLAE@Invalid?5char?5in?5CDATA?50x?$CFX?6@
	push	9
	push	esi
	call	_htmlParseErrInt

; 2979 :                     "Invalid char in CDATA 0x%X\n", cur);
; 2980 :         if (ctxt->input->cur < ctxt->input->end) {

	mov	ecx, DWORD PTR [esi+36]
	add	esp, 16					; 00000010H
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [ecx+20]
	jae	SHORT $LN30@htmlParseS

; 2981 :             NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4
$LN30@htmlParseS:

; 2982 :         }
; 2983 :     }
; 2984 : 
; 2985 :     if ((nbchar != 0) && (ctxt->sax != NULL) && (!ctxt->disableSAX)) {

	pop	ebx
	test	edi, edi
	je	SHORT $LN34@htmlParseS
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN34@htmlParseS
	cmp	DWORD PTR [esi+212], 0
	jne	SHORT $LN34@htmlParseS

; 2986 : 	if (ctxt->sax->cdataBlock!= NULL) {

	mov	ecx, DWORD PTR [eax+100]
	test	ecx, ecx
	je	SHORT $LN32@htmlParseS

; 2987 : 	    /*
; 2988 : 	     * Insert as CDATA, which is the same as HTML_PRESERVE_NODE
; 2989 : 	     */
; 2990 : 	    ctxt->sax->cdataBlock(ctxt->userData, buf, nbchar);

	push	edi
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	DWORD PTR [esi+4]
	call	ecx

; 2993 : 	}
; 2994 :     }
; 2995 : }

	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@htmlParseS:

; 2991 : 	} else if (ctxt->sax->characters != NULL) {

	mov	eax, DWORD PTR [eax+68]
	test	eax, eax
	je	SHORT $LN34@htmlParseS

; 2992 : 	    ctxt->sax->characters(ctxt->userData, buf, nbchar);

	push	edi
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	push	DWORD PTR [esi+4]
	call	eax

; 2993 : 	}
; 2994 :     }
; 2995 : }

	add	esp, 12					; 0000000cH
$LN34@htmlParseS:
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseScript ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParsePubidLiteral
_TEXT	SEGMENT
_ret$1$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_htmlParsePubidLiteral PROC				; COMDAT

; 2848 : htmlParsePubidLiteral(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	xor	edi, edi
	mov	DWORD PTR _ret$1$[ebp], edi
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 34					; 00000022H
	jne	SHORT $LN6@htmlParseP

; 2849 :     size_t len = 0, startPosition = 0;
; 2850 :     xmlChar *ret = NULL;
; 2851 :     /*
; 2852 :      * Name ::= (Letter | '_') (NameChar)*
; 2853 :      */
; 2854 :     if (CUR == '"') {
; 2855 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2856 : 
; 2857 :         if (CUR_PTR < BASE_PTR)

	mov	ecx, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+12]
	cmp	eax, edx
	jb	SHORT $LN25@htmlParseP

; 2858 :             return(ret);
; 2859 :         startPosition = CUR_PTR - BASE_PTR;

	mov	ebx, eax

; 2860 : 
; 2861 :         while (IS_PUBIDCHAR_CH(CUR)) {

	movzx	eax, BYTE PTR [eax]
	sub	ebx, edx
	cmp	BYTE PTR _xmlIsPubidChar_tab[eax], 0
	je	SHORT $LN3@htmlParseP
	npad	5
$LL2@htmlParseP:

; 2862 :             len++;
; 2863 :             NEXT;

	push	esi
	inc	edi
	call	_xmlNextChar
	mov	ecx, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [ecx+16]
	movzx	eax, BYTE PTR [eax]
	cmp	BYTE PTR _xmlIsPubidChar_tab[eax], 0
	jne	SHORT $LL2@htmlParseP
$LN3@htmlParseP:

; 2864 :         }
; 2865 : 
; 2866 : 	if (CUR != '"') {

	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 34			; 00000022H
	je	$LN14@htmlParseP
$LN28@htmlParseP:

; 2894 : 	             "PubidLiteral \" or ' expected\n", NULL, NULL);
; 2895 :     }
; 2896 : 
; 2897 :     return(ret);

	push	0
	push	0
	push	OFFSET ??_C@_0BJ@CGBDHPF@Unfinished?5PubidLiteral?6@
	push	44					; 0000002cH
	push	esi
	call	_htmlParseErr
	mov	eax, DWORD PTR _ret$1$[ebp]
	add	esp, 20					; 00000014H
	pop	edi

; 2898 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@htmlParseP:

; 2867 : 	    htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_FINISHED,
; 2868 : 	                 "Unfinished PubidLiteral\n", NULL, NULL);
; 2869 : 	} else {
; 2870 : 	    ret = xmlStrndup((BASE_PTR + startPosition), len);
; 2871 : 	    NEXT;
; 2872 : 	}
; 2873 :     } else if (CUR == '\'') {

	cmp	al, 39					; 00000027H
	jne	$LN11@htmlParseP

; 2874 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2875 : 
; 2876 :         if (CUR_PTR < BASE_PTR)

	mov	ecx, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+12]
	cmp	eax, edx
	jae	SHORT $LN13@htmlParseP
$LN25@htmlParseP:
	pop	edi

; 2898 : }

	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN13@htmlParseP:

; 2877 :             return(ret);
; 2878 :         startPosition = CUR_PTR - BASE_PTR;

	mov	ebx, eax

; 2879 : 
; 2880 :         while ((IS_PUBIDCHAR_CH(CUR)) && (CUR != '\'')){

	movzx	eax, BYTE PTR [eax]
	sub	ebx, edx
	cmp	BYTE PTR _xmlIsPubidChar_tab[eax], 0
	je	SHORT $LN26@htmlParseP
	mov	edx, ecx
	npad	1
$LL4@htmlParseP:
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, edx
	cmp	BYTE PTR [eax], 39			; 00000027H
	je	SHORT $LN26@htmlParseP

; 2881 :             len++;
; 2882 :             NEXT;

	push	esi
	inc	edi
	call	_xmlNextChar
	mov	ecx, DWORD PTR [esi+36]
	add	esp, 4
	mov	edx, ecx
	mov	eax, DWORD PTR [ecx+16]
	movzx	eax, BYTE PTR [eax]
	cmp	BYTE PTR _xmlIsPubidChar_tab[eax], 0
	jne	SHORT $LL4@htmlParseP
$LN26@htmlParseP:

; 2883 :         }
; 2884 : 
; 2885 : 	if (CUR != '\'') {

	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 39			; 00000027H
	jne	$LN28@htmlParseP
$LN14@htmlParseP:

; 2894 : 	             "PubidLiteral \" or ' expected\n", NULL, NULL);
; 2895 :     }
; 2896 : 
; 2897 :     return(ret);

	mov	eax, DWORD PTR [ecx+12]
	add	eax, ebx
	push	edi
	push	eax
	call	_xmlStrndup
	push	esi
	mov	DWORD PTR _ret$1$[ebp], eax
	call	_xmlNextChar
	mov	eax, DWORD PTR _ret$1$[ebp]
	add	esp, 12					; 0000000cH
	pop	edi

; 2898 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@htmlParseP:

; 2886 : 	    htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_FINISHED,
; 2887 : 	                 "Unfinished PubidLiteral\n", NULL, NULL);
; 2888 : 	} else {
; 2889 : 	    ret = xmlStrndup((BASE_PTR + startPosition), len);
; 2890 : 	    NEXT;
; 2891 : 	}
; 2892 :     } else {
; 2893 : 	htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_STARTED,

	push	0
	push	0
	push	OFFSET ??_C@_0BO@CNBHKMED@PubidLiteral?5?$CC?5or?5?8?5expected?6@
	push	43					; 0000002bH

; 2894 : 	             "PubidLiteral \" or ' expected\n", NULL, NULL);
; 2895 :     }
; 2896 : 
; 2897 :     return(ret);

	push	esi
	call	_htmlParseErr
	mov	eax, DWORD PTR _ret$1$[ebp]
	add	esp, 20					; 00000014H
	pop	edi

; 2898 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParsePubidLiteral ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseSystemLiteral
_TEXT	SEGMENT
_ret$1$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseSystemLiteral PROC				; COMDAT

; 2788 : htmlParseSystemLiteral(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	xor	edi, edi
	mov	DWORD PTR _ret$1$[ebp], edi
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 34					; 00000022H
	jne	SHORT $LN6@htmlParseS

; 2789 :     size_t len = 0, startPosition = 0;
; 2790 :     xmlChar *ret = NULL;
; 2791 : 
; 2792 :     if (CUR == '"') {
; 2793 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2794 : 
; 2795 :         if (CUR_PTR < BASE_PTR)

	mov	eax, DWORD PTR [esi+36]
	add	esp, 4
	mov	ebx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [eax+12]
	cmp	ebx, eax
	jb	$LN29@htmlParseS

; 2796 :             return(ret);
; 2797 :         startPosition = CUR_PTR - BASE_PTR;

	sub	ebx, eax
$LL2@htmlParseS:

; 2798 : 
; 2799 : 	while ((IS_CHAR_CH(CUR)) && (CUR != '"')) {

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 9
	jb	SHORT $LN10@htmlParseS
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN9@htmlParseS
$LN10@htmlParseS:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN9@htmlParseS
	cmp	al, 32					; 00000020H
	jb	SHORT $LN3@htmlParseS
$LN9@htmlParseS:
	cmp	al, 34					; 00000022H
	je	SHORT $LN3@htmlParseS

; 2800 : 	    NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4

; 2801 : 	    len++;

	inc	edi

; 2802 : 	}

	jmp	SHORT $LL2@htmlParseS
$LN3@htmlParseS:

; 2803 : 	if (!IS_CHAR_CH(CUR)) {

	cmp	al, 9
	jb	SHORT $LN13@htmlParseS
	cmp	al, 10					; 0000000aH
	jbe	$LN19@htmlParseS
$LN13@htmlParseS:
	cmp	al, 13					; 0000000dH
	je	$LN19@htmlParseS
	cmp	al, 32					; 00000020H
	jae	$LN19@htmlParseS
$LN31@htmlParseS:

; 2830 : 	             " or ' expected\n", NULL, NULL);
; 2831 :     }
; 2832 : 
; 2833 :     return(ret);

	push	0
	push	0
	push	OFFSET ??_C@_0BK@PPFHJEEL@Unfinished?5SystemLiteral?6@
	push	44					; 0000002cH
	push	esi
	call	_htmlParseErr
	mov	eax, DWORD PTR _ret$1$[ebp]
	add	esp, 20					; 00000014H
	pop	edi

; 2834 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@htmlParseS:

; 2804 : 	    htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_FINISHED,
; 2805 : 			 "Unfinished SystemLiteral\n", NULL, NULL);
; 2806 : 	} else {
; 2807 : 	    ret = xmlStrndup((BASE_PTR+startPosition), len);
; 2808 : 	    NEXT;
; 2809 :         }
; 2810 :     } else if (CUR == '\'') {

	cmp	al, 39					; 00000027H
	jne	$LN14@htmlParseS

; 2811 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2812 : 
; 2813 :         if (CUR_PTR < BASE_PTR)

	mov	eax, DWORD PTR [esi+36]
	add	esp, 4
	mov	ebx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [eax+12]
	cmp	ebx, eax
	jae	SHORT $LN16@htmlParseS
$LN29@htmlParseS:
	pop	edi

; 2834 : }

	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@htmlParseS:

; 2814 :             return(ret);
; 2815 :         startPosition = CUR_PTR - BASE_PTR;

	sub	ebx, eax
	npad	4
$LL4@htmlParseS:

; 2816 : 
; 2817 : 	while ((IS_CHAR_CH(CUR)) && (CUR != '\'')) {

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 9
	jb	SHORT $LN18@htmlParseS
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN17@htmlParseS
$LN18@htmlParseS:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN17@htmlParseS
	cmp	al, 32					; 00000020H
	jb	SHORT $LN5@htmlParseS
$LN17@htmlParseS:
	cmp	al, 39					; 00000027H
	je	SHORT $LN5@htmlParseS

; 2818 : 	    NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4

; 2819 : 	    len++;

	inc	edi

; 2820 : 	}

	jmp	SHORT $LL4@htmlParseS
$LN5@htmlParseS:

; 2821 : 	if (!IS_CHAR_CH(CUR)) {

	cmp	al, 9
	jb	SHORT $LN21@htmlParseS
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN19@htmlParseS
$LN21@htmlParseS:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN19@htmlParseS
	cmp	al, 32					; 00000020H
	jb	$LN31@htmlParseS
$LN19@htmlParseS:

; 2830 : 	             " or ' expected\n", NULL, NULL);
; 2831 :     }
; 2832 : 
; 2833 :     return(ret);

	mov	eax, DWORD PTR [ecx+12]
	add	eax, ebx
	push	edi
	push	eax
	call	_xmlStrndup
	push	esi
	mov	DWORD PTR _ret$1$[ebp], eax
	call	_xmlNextChar
	mov	eax, DWORD PTR _ret$1$[ebp]
	add	esp, 12					; 0000000cH
	pop	edi

; 2834 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@htmlParseS:

; 2822 : 	    htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_FINISHED,
; 2823 : 			 "Unfinished SystemLiteral\n", NULL, NULL);
; 2824 : 	} else {
; 2825 : 	    ret = xmlStrndup((BASE_PTR+startPosition), len);
; 2826 : 	    NEXT;
; 2827 :         }
; 2828 :     } else {
; 2829 : 	htmlParseErr(ctxt, XML_ERR_LITERAL_NOT_STARTED,

	push	0
	push	0
	push	OFFSET ??_C@_0BA@HCBHCDID@?5or?5?8?5expected?6@
	push	43					; 0000002bH

; 2830 : 	             " or ' expected\n", NULL, NULL);
; 2831 :     }
; 2832 : 
; 2833 :     return(ret);

	push	esi
	call	_htmlParseErr
	mov	eax, DWORD PTR _ret$1$[ebp]
	add	esp, 20					; 00000014H
	pop	edi

; 2834 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseSystemLiteral ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseAttValue
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlParseAttValue PROC					; COMDAT

; 2744 : htmlParseAttValue(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 34					; 00000022H
	jne	SHORT $LN2@htmlParseA

; 2745 :     xmlChar *ret = NULL;
; 2746 : 
; 2747 :     if (CUR == '"') {
; 2748 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2749 : 	ret = htmlParseHTMLAttribute(ctxt, '"');

	push	34					; 00000022H
	push	esi
	call	_htmlParseHTMLAttribute

; 2750 :         if (CUR != '"') {

	mov	ecx, DWORD PTR [esi+36]
	add	esp, 12					; 0000000cH
	mov	edi, eax
	mov	ecx, DWORD PTR [ecx+16]
	cmp	BYTE PTR [ecx], 34			; 00000022H
	je	SHORT $LN8@htmlParseA

; 2751 : 	    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,

	push	0
	push	0
	push	OFFSET ??_C@_0BG@ECEGDLEC@AttValue?3?5?$CC?5expected?6@
	push	40					; 00000028H

; 2770 : 	                 "AttValue: no value found\n", NULL, NULL);
; 2771 : 	}
; 2772 :     }
; 2773 :     return(ret);
; 2774 : }

	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN2@htmlParseA:

; 2752 : 	                 "AttValue: \" expected\n", NULL, NULL);
; 2753 : 	} else
; 2754 : 	    NEXT;
; 2755 :     } else if (CUR == '\'') {

	cmp	al, 39					; 00000027H
	jne	SHORT $LN6@htmlParseA

; 2756 :         NEXT;

	push	esi
	call	_xmlNextChar

; 2757 : 	ret = htmlParseHTMLAttribute(ctxt, '\'');

	push	39					; 00000027H
	push	esi
	call	_htmlParseHTMLAttribute

; 2758 :         if (CUR != '\'') {

	mov	ecx, DWORD PTR [esi+36]
	add	esp, 12					; 0000000cH
	mov	edi, eax
	mov	ecx, DWORD PTR [ecx+16]
	cmp	BYTE PTR [ecx], 39			; 00000027H
	je	SHORT $LN8@htmlParseA

; 2759 : 	    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_NOT_FINISHED,

	push	0
	push	0
	push	OFFSET ??_C@_0BG@NKOFEMFC@AttValue?3?5?8?5expected?6@
	push	40					; 00000028H

; 2770 : 	                 "AttValue: no value found\n", NULL, NULL);
; 2771 : 	}
; 2772 :     }
; 2773 :     return(ret);
; 2774 : }

	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN8@htmlParseA:
	push	esi
	call	_xmlNextChar
	add	esp, 4
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN6@htmlParseA:

; 2760 : 	                 "AttValue: ' expected\n", NULL, NULL);
; 2761 : 	} else
; 2762 : 	    NEXT;
; 2763 :     } else {
; 2764 :         /*
; 2765 : 	 * That's an HTMLism, the attribute value may not be quoted
; 2766 : 	 */
; 2767 : 	ret = htmlParseHTMLAttribute(ctxt, 0);

	push	0
	push	esi
	call	_htmlParseHTMLAttribute
	mov	edi, eax
	add	esp, 8

; 2768 : 	if (ret == NULL) {

	test	edi, edi
	jne	SHORT $LN10@htmlParseA

; 2769 : 	    htmlParseErr(ctxt, XML_ERR_ATTRIBUTE_WITHOUT_VALUE,

	push	eax
	push	eax
	push	OFFSET ??_C@_0BK@IDNLEFDN@AttValue?3?5no?5value?5found?6@
	push	41					; 00000029H

; 2770 : 	                 "AttValue: no value found\n", NULL, NULL);
; 2771 : 	}
; 2772 :     }
; 2773 :     return(ret);
; 2774 : }

	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	mov	eax, edi
$LN10@htmlParseA:
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_htmlParseAttValue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseHTMLAttribute
_TEXT	SEGMENT
_l$1 = -20						; size = 4
_ent$1$ = -16						; size = 4
_name$ = -12						; size = 4
_buffer$1$ = -8						; size = 4
_buffer_size$1$ = -4					; size = 4
_ctxt$ = 8						; size = 4
_stop$ = 12						; size = 1
_htmlParseHTMLAttribute PROC				; COMDAT

; 2554 : htmlParseHTMLAttribute(htmlParserCtxtPtr ctxt, const xmlChar stop) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, 100				; 00000064H
	mov	DWORD PTR _name$[ebp], 0
	push	ebx
	mov	DWORD PTR _buffer_size$1$[ebp], ebx
	call	DWORD PTR _xmlMallocAtomic
	mov	edx, eax
	add	esp, 4
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR _buffer$1$[ebp], edx
	test	edx, edx
	jne	SHORT $LN15@htmlParseH

; 79   :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	test	eax, eax
	je	SHORT $LN59@htmlParseH
	cmp	DWORD PTR [eax+212], edx
	je	SHORT $LN58@htmlParseH
	cmp	DWORD PTR [eax+172], -1
	je	SHORT $LN61@htmlParseH
$LN58@htmlParseH:

; 80   :         (ctxt->instate == XML_PARSER_EOF))
; 81   : 	return;
; 82   :     if (ctxt != NULL) {
; 83   :         ctxt->errNo = XML_ERR_NO_MEMORY;

	mov	DWORD PTR [eax+84], 2

; 84   :         ctxt->instate = XML_PARSER_EOF;

	mov	DWORD PTR [eax+172], -1

; 85   :         ctxt->disableSAX = 1;

	mov	DWORD PTR [eax+212], 1
$LN59@htmlParseH:

; 86   :     }
; 87   :     if (extra)
; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0BK@LKGAKEEM@buffer?5allocation?5failed?6@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0BK@LKGAKEEM@buffer?5allocation?5failed?6@
	push	0
	push	0
	push	3
	push	2
	push	1
	push	0
	push	eax
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
$LN61@htmlParseH:

; 2555 :     xmlChar *buffer = NULL;
; 2556 :     int buffer_size = 0;
; 2557 :     xmlChar *out = NULL;
; 2558 :     const xmlChar *name = NULL;
; 2559 :     const xmlChar *cur = NULL;
; 2560 :     const htmlEntityDesc * ent;
; 2561 : 
; 2562 :     /*
; 2563 :      * allocate a translation buffer.
; 2564 :      */
; 2565 :     buffer_size = HTML_PARSER_BUFFER_SIZE;
; 2566 :     buffer = (xmlChar *) xmlMallocAtomic(buffer_size * sizeof(xmlChar));
; 2567 :     if (buffer == NULL) {
; 2568 : 	htmlErrMemory(ctxt, "buffer allocation failed\n");
; 2569 : 	return(NULL);

	xor	eax, eax
	pop	ebx

; 2679 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN15@htmlParseH:
	push	esi
	push	edi

; 2570 :     }
; 2571 :     out = buffer;

	mov	esi, edx
$LN102@htmlParseH:

; 2572 : 
; 2573 :     /*
; 2574 :      * Ok loop until we reach one of the ending chars
; 2575 :      */
; 2576 :     while ((CUR != 0) && (CUR != stop)) {

	mov	ecx, DWORD PTR [eax+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 0
	je	$LN91@htmlParseH
	mov	ecx, DWORD PTR [ecx+16]
	mov	ah, BYTE PTR _stop$[ebp]
	mov	al, BYTE PTR [ecx]
	cmp	al, ah
	je	$LN91@htmlParseH

; 2577 : 	if ((stop == 0) && (CUR == '>')) break;

	test	ah, ah
	jne	SHORT $LN17@htmlParseH
	cmp	al, 62					; 0000003eH
	je	$LN91@htmlParseH

; 2578 : 	if ((stop == 0) && (IS_BLANK_CH(CUR))) break;

	cmp	al, 32					; 00000020H
	je	$LN91@htmlParseH
	cmp	al, 9
	jb	SHORT $LN19@htmlParseH
	cmp	al, 10					; 0000000aH
	jbe	$LN91@htmlParseH
$LN19@htmlParseH:
	cmp	al, 13					; 0000000dH
	je	$LN91@htmlParseH
$LN17@htmlParseH:

; 2579 :         if (CUR == '&') {

	cmp	al, 38					; 00000026H
	jne	$LN20@htmlParseH

; 2580 : 	    if (NXT(1) == '#') {

	cmp	BYTE PTR [ecx+1], 35			; 00000023H
	jne	SHORT $LN22@htmlParseH

; 2581 : 		unsigned int c;
; 2582 : 		int bits;
; 2583 : 
; 2584 : 		c = htmlParseCharRef(ctxt);

	push	DWORD PTR _ctxt$[ebp]
	call	_htmlParseCharRef
	mov	edx, eax
	lea	edi, DWORD PTR [esi+1]
	add	esp, 4

; 2585 : 		if      (c <    0x80)

	cmp	edx, 128				; 00000080H
	jae	SHORT $LN24@htmlParseH

; 2586 : 		        { *out++  = c;                bits= -6; }

	mov	ecx, -6					; fffffffaH
	mov	al, dl
	jmp	SHORT $LN29@htmlParseH
$LN24@htmlParseH:

; 2587 : 		else if (c <   0x800)

	mov	eax, edx
	cmp	edx, 2048				; 00000800H
	jae	SHORT $LN26@htmlParseH

; 2588 : 		        { *out++  =((c >>  6) & 0x1F) | 0xC0;  bits=  0; }

	shr	eax, 6
	xor	ecx, ecx
	and	al, 31					; 0000001fH
	or	al, 192					; 000000c0H
	jmp	SHORT $LN29@htmlParseH
$LN26@htmlParseH:

; 2589 : 		else if (c < 0x10000)

	cmp	edx, 65536				; 00010000H
	jae	SHORT $LN28@htmlParseH

; 2590 : 		        { *out++  =((c >> 12) & 0x0F) | 0xE0;  bits=  6; }

	shr	eax, 12					; 0000000cH
	mov	ecx, 6
	and	al, 15					; 0000000fH
	or	al, 224					; 000000e0H
	jmp	SHORT $LN29@htmlParseH
$LN28@htmlParseH:

; 2591 : 		else
; 2592 : 		        { *out++  =((c >> 18) & 0x07) | 0xF0;  bits= 12; }

	shr	eax, 18					; 00000012H
	mov	ecx, 12					; 0000000cH
	and	al, 7
	or	al, 240					; 000000f0H
$LN29@htmlParseH:

; 2593 : 
; 2594 : 		for ( ; bits >= 0; bits-= 6) {

	mov	BYTE PTR [esi], al
	mov	esi, edi
	test	ecx, ecx
	js	SHORT $LN5@htmlParseH
$LL6@htmlParseH:

; 2595 : 		    *out++  = ((c >> bits) & 0x3F) | 0x80;

	mov	eax, edx
	shr	eax, cl
	and	al, 63					; 0000003fH
	or	al, 128					; 00000080H
	mov	BYTE PTR [esi], al
	inc	esi
	sub	ecx, 6
	jns	SHORT $LL6@htmlParseH

; 2596 : 		}
; 2597 : 
; 2598 : 		if (out - buffer > buffer_size - 100) {
; 2599 : 			int indx = out - buffer;
; 2600 : 
; 2601 : 			growBuffer(buffer);
; 2602 : 			out = &buffer[indx];
; 2603 : 		}
; 2604 : 	    } else {

	jmp	SHORT $LN5@htmlParseH
$LN22@htmlParseH:

; 2605 : 		ent = htmlParseEntityRef(ctxt, &name);

	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	push	DWORD PTR _ctxt$[ebp]
	call	_htmlParseEntityRef

; 2606 : 		if (name == NULL) {

	mov	edi, DWORD PTR _name$[ebp]
	add	esp, 8
	mov	DWORD PTR _ent$1$[ebp], eax
	test	edi, edi
	jne	SHORT $LN32@htmlParseH

; 2607 : 		    *out++ = '&';

	mov	BYTE PTR [esi], 38			; 00000026H
	inc	esi
$LN5@htmlParseH:

; 2572 : 
; 2573 :     /*
; 2574 :      * Ok loop until we reach one of the ending chars
; 2575 :      */
; 2576 :     while ((CUR != 0) && (CUR != stop)) {

	mov	ecx, DWORD PTR _buffer_size$1$[ebp]
	mov	edi, esi
	mov	edx, DWORD PTR _buffer$1$[ebp]
	sub	edi, edx
	lea	eax, DWORD PTR [ecx-100]
	cmp	edi, eax
	jle	SHORT $LN96@htmlParseH
	add	ecx, ecx
	push	ecx
	push	edx
	mov	DWORD PTR _buffer_size$1$[ebp], ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	test	eax, eax
	je	$LN73@htmlParseH
	mov	edx, eax
	lea	esi, DWORD PTR [edi+eax]
	mov	DWORD PTR _buffer$1$[ebp], edx
$LN96@htmlParseH:
	mov	ebx, DWORD PTR _buffer_size$1$[ebp]
$LN21@htmlParseH:
	mov	eax, DWORD PTR _ctxt$[ebp]
	jmp	$LN102@htmlParseH
$LN32@htmlParseH:

; 2608 : 		    if (out - buffer > buffer_size - 100) {
; 2609 : 			int indx = out - buffer;
; 2610 : 
; 2611 : 			growBuffer(buffer);
; 2612 : 			out = &buffer[indx];
; 2613 : 		    }
; 2614 : 		} else if (ent == NULL) {

	mov	edx, DWORD PTR _buffer$1$[ebp]
	test	eax, eax
	jne	SHORT $LN36@htmlParseH

; 2615 : 		    *out++ = '&';

	mov	BYTE PTR [esi], 38			; 00000026H
	inc	esi

; 2616 : 		    cur = name;
; 2617 : 		    while (*cur != 0) {

	cmp	BYTE PTR [edi], al
	je	SHORT $LN21@htmlParseH
	mov	ecx, DWORD PTR _buffer_size$1$[ebp]
$LL7@htmlParseH:

; 2618 : 			if (out - buffer > buffer_size - 100) {

	mov	ebx, esi
	lea	eax, DWORD PTR [ecx-100]
	sub	ebx, edx
	cmp	ebx, eax
	jle	SHORT $LN83@htmlParseH

; 2619 : 			    int indx = out - buffer;
; 2620 : 
; 2621 : 			    growBuffer(buffer);

	add	ecx, ecx
	push	ecx
	push	edx
	mov	DWORD PTR _buffer_size$1$[ebp], ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	test	eax, eax
	je	$LN73@htmlParseH

; 2622 : 			    out = &buffer[indx];

	mov	ecx, DWORD PTR _buffer_size$1$[ebp]
	lea	esi, DWORD PTR [ebx+eax]
	mov	edx, eax
	mov	DWORD PTR _buffer$1$[ebp], edx
$LN83@htmlParseH:

; 2623 : 			}
; 2624 : 			*out++ = *cur++;

	mov	al, BYTE PTR [edi]
	inc	edi
	mov	BYTE PTR [esi], al
	inc	esi
	cmp	BYTE PTR [edi], 0
	jne	SHORT $LL7@htmlParseH

; 2572 : 
; 2573 :     /*
; 2574 :      * Ok loop until we reach one of the ending chars
; 2575 :      */
; 2576 :     while ((CUR != 0) && (CUR != stop)) {

	mov	ebx, DWORD PTR _buffer_size$1$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	jmp	$LN102@htmlParseH
$LN36@htmlParseH:

; 2625 : 		    }
; 2626 : 		} else {
; 2627 : 		    unsigned int c;
; 2628 : 		    int bits;
; 2629 : 
; 2630 : 		    if (out - buffer > buffer_size - 100) {

	mov	ecx, DWORD PTR _buffer_size$1$[ebp]
	mov	edi, esi
	sub	edi, edx
	lea	eax, DWORD PTR [ecx-100]
	cmp	edi, eax
	jle	SHORT $LN40@htmlParseH

; 2631 : 			int indx = out - buffer;
; 2632 : 
; 2633 : 			growBuffer(buffer);

	add	ecx, ecx
	push	ecx
	push	edx
	mov	DWORD PTR _buffer_size$1$[ebp], ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	test	eax, eax
	je	$LN73@htmlParseH
	mov	edx, eax

; 2634 : 			out = &buffer[indx];

	lea	esi, DWORD PTR [edi+eax]
	mov	DWORD PTR _buffer$1$[ebp], edx
$LN40@htmlParseH:

; 2635 : 		    }
; 2636 : 		    c = ent->value;

	mov	ebx, DWORD PTR _ent$1$[ebp]
	lea	edi, DWORD PTR [esi+1]
	mov	ebx, DWORD PTR [ebx]

; 2637 : 		    if      (c <    0x80)

	cmp	ebx, 128				; 00000080H
	jae	SHORT $LN42@htmlParseH

; 2638 : 			{ *out++  = c;                bits= -6; }

	mov	ecx, -6					; fffffffaH
	mov	al, bl
	jmp	SHORT $LN47@htmlParseH
$LN42@htmlParseH:

; 2639 : 		    else if (c <   0x800)

	mov	eax, ebx
	cmp	ebx, 2048				; 00000800H
	jae	SHORT $LN44@htmlParseH

; 2640 : 			{ *out++  =((c >>  6) & 0x1F) | 0xC0;  bits=  0; }

	shr	eax, 6
	xor	ecx, ecx
	and	al, 31					; 0000001fH
	or	al, 192					; 000000c0H
	jmp	SHORT $LN47@htmlParseH
$LN44@htmlParseH:

; 2641 : 		    else if (c < 0x10000)

	cmp	ebx, 65536				; 00010000H
	jae	SHORT $LN46@htmlParseH

; 2642 : 			{ *out++  =((c >> 12) & 0x0F) | 0xE0;  bits=  6; }

	shr	eax, 12					; 0000000cH
	mov	ecx, 6
	and	al, 15					; 0000000fH
	or	al, 224					; 000000e0H
	jmp	SHORT $LN47@htmlParseH
$LN46@htmlParseH:

; 2643 : 		    else
; 2644 : 			{ *out++  =((c >> 18) & 0x07) | 0xF0;  bits= 12; }

	shr	eax, 18					; 00000012H
	mov	ecx, 12					; 0000000cH
	and	al, 7
	or	al, 240					; 000000f0H
$LN47@htmlParseH:

; 2645 : 
; 2646 : 		    for ( ; bits >= 0; bits-= 6) {

	mov	BYTE PTR [esi], al
	mov	esi, edi
	test	ecx, ecx
	js	$LN96@htmlParseH
$LL11@htmlParseH:

; 2647 : 			*out++  = ((c >> bits) & 0x3F) | 0x80;

	mov	eax, ebx
	shr	eax, cl
	and	al, 63					; 0000003fH
	or	al, 128					; 00000080H
	mov	BYTE PTR [esi], al
	inc	esi
	sub	ecx, 6
	jns	SHORT $LL11@htmlParseH

; 2572 : 
; 2573 :     /*
; 2574 :      * Ok loop until we reach one of the ending chars
; 2575 :      */
; 2576 :     while ((CUR != 0) && (CUR != stop)) {

	mov	ebx, DWORD PTR _buffer_size$1$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	jmp	$LN102@htmlParseH
$LN20@htmlParseH:

; 2648 : 		    }
; 2649 : 		}
; 2650 : 	    }
; 2651 : 	} else {
; 2652 : 	    unsigned int c;
; 2653 : 	    int bits, l;
; 2654 : 
; 2655 : 	    if (out - buffer > buffer_size - 100) {

	mov	edi, esi
	lea	eax, DWORD PTR [ebx-100]
	sub	edi, edx
	cmp	edi, eax
	jle	SHORT $LN48@htmlParseH

; 2656 : 		int indx = out - buffer;
; 2657 : 
; 2658 : 		growBuffer(buffer);

	add	ebx, ebx
	push	ebx
	push	edx
	mov	DWORD PTR _buffer_size$1$[ebp], ebx
	call	DWORD PTR _xmlRealloc
	mov	ecx, eax
	add	esp, 8
	test	ecx, ecx
	je	$LN73@htmlParseH
	mov	DWORD PTR _buffer$1$[ebp], ecx

; 2659 : 		out = &buffer[indx];

	lea	esi, DWORD PTR [edi+ecx]
$LN48@htmlParseH:

; 2660 : 	    }
; 2661 : 	    c = CUR_CHAR(l);

	lea	eax, DWORD PTR _l$1[ebp]
	push	eax
	push	DWORD PTR _ctxt$[ebp]
	call	_htmlCurrentChar
	mov	edx, eax
	lea	edi, DWORD PTR [esi+1]
	add	esp, 8

; 2662 : 	    if      (c <    0x80)

	cmp	edx, 128				; 00000080H
	jae	SHORT $LN50@htmlParseH

; 2663 : 		    { *out++  = c;                bits= -6; }

	mov	ecx, -6					; fffffffaH
	mov	al, dl
	jmp	SHORT $LN55@htmlParseH
$LN50@htmlParseH:

; 2664 : 	    else if (c <   0x800)

	mov	eax, edx
	cmp	edx, 2048				; 00000800H
	jae	SHORT $LN52@htmlParseH

; 2665 : 		    { *out++  =((c >>  6) & 0x1F) | 0xC0;  bits=  0; }

	shr	eax, 6
	xor	ecx, ecx
	and	al, 31					; 0000001fH
	or	al, 192					; 000000c0H
	jmp	SHORT $LN55@htmlParseH
$LN52@htmlParseH:

; 2666 : 	    else if (c < 0x10000)

	cmp	edx, 65536				; 00010000H
	jae	SHORT $LN54@htmlParseH

; 2667 : 		    { *out++  =((c >> 12) & 0x0F) | 0xE0;  bits=  6; }

	shr	eax, 12					; 0000000cH
	mov	ecx, 6
	and	al, 15					; 0000000fH
	or	al, 224					; 000000e0H
	jmp	SHORT $LN55@htmlParseH
$LN54@htmlParseH:

; 2668 : 	    else
; 2669 : 		    { *out++  =((c >> 18) & 0x07) | 0xF0;  bits= 12; }

	shr	eax, 18					; 00000012H
	mov	ecx, 12					; 0000000cH
	and	al, 7
	or	al, 240					; 000000f0H
$LN55@htmlParseH:

; 2670 : 
; 2671 : 	    for ( ; bits >= 0; bits-= 6) {

	mov	BYTE PTR [esi], al
	mov	esi, edi
	test	ecx, ecx
	js	SHORT $LN13@htmlParseH
	npad	3
$LL14@htmlParseH:

; 2672 : 		*out++  = ((c >> bits) & 0x3F) | 0x80;

	mov	eax, edx
	shr	eax, cl
	and	al, 63					; 0000003fH
	or	al, 128					; 00000080H
	mov	BYTE PTR [esi], al
	inc	esi
	sub	ecx, 6
	jns	SHORT $LL14@htmlParseH
$LN13@htmlParseH:

; 2673 : 	    }
; 2674 : 	    NEXT;

	push	DWORD PTR _ctxt$[ebp]
	call	_xmlNextChar
	mov	edx, DWORD PTR _buffer$1$[ebp]
	add	esp, 4
	mov	eax, DWORD PTR _ctxt$[ebp]
	jmp	$LN102@htmlParseH
$LN73@htmlParseH:

; 2656 : 		int indx = out - buffer;
; 2657 : 
; 2658 : 		growBuffer(buffer);

	push	OFFSET ??_C@_0BA@CHFIPIAO@growing?5buffer?6@
	push	DWORD PTR _ctxt$[ebp]
	call	_htmlErrMemory
	mov	eax, DWORD PTR _buffer$1$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 12					; 0000000cH
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx

; 2679 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN91@htmlParseH:
	pop	edi

; 2675 : 	}
; 2676 :     }
; 2677 :     *out = 0;

	mov	BYTE PTR [esi], 0

; 2678 :     return(buffer);

	mov	eax, edx
	pop	esi
	pop	ebx

; 2679 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseHTMLAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseName
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlParseName PROC					; COMDAT

; 2454 : htmlParseName(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ebx+292], 0
	jne	SHORT $LN4@htmlParseN

; 2455 :     const xmlChar *in;
; 2456 :     const xmlChar *ret;
; 2457 :     int count = 0;
; 2458 : 
; 2459 :     GROW;

	mov	ecx, DWORD PTR [ebx+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN4@htmlParseN
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN4@htmlParseN:

; 2460 : 
; 2461 :     /*
; 2462 :      * Accelerator for simple ASCII names
; 2463 :      */
; 2464 :     in = ctxt->input->cur;

	mov	ecx, DWORD PTR [ebx+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	edi, edx

; 2465 :     if (((*in >= 0x61) && (*in <= 0x7A)) ||
; 2466 : 	((*in >= 0x41) && (*in <= 0x5A)) ||
; 2467 : 	(*in == '_') || (*in == ':')) {

	mov	al, BYTE PTR [edi]
	cmp	al, 97					; 00000061H
	jb	SHORT $LN7@htmlParseN
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LN6@htmlParseN
$LN7@htmlParseN:
	cmp	al, 65					; 00000041H
	jb	SHORT $LN8@htmlParseN
	cmp	al, 90					; 0000005aH
	jbe	SHORT $LN6@htmlParseN
$LN8@htmlParseN:
	cmp	al, 95					; 0000005fH
	je	SHORT $LN6@htmlParseN
	cmp	al, 58					; 0000003aH
	jne	SHORT $LN14@htmlParseN
$LN6@htmlParseN:

; 2468 : 	in++;
; 2469 : 	while (((*in >= 0x61) && (*in <= 0x7A)) ||
; 2470 : 	       ((*in >= 0x41) && (*in <= 0x5A)) ||
; 2471 : 	       ((*in >= 0x30) && (*in <= 0x39)) ||
; 2472 : 	       (*in == '_') || (*in == '-') ||
; 2473 : 	       (*in == ':') || (*in == '.'))

	mov	al, BYTE PTR [edi+1]
	inc	edi
	cmp	al, 97					; 00000061H
	jb	SHORT $LN10@htmlParseN
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LN6@htmlParseN
$LN10@htmlParseN:
	cmp	al, 65					; 00000041H
	jb	SHORT $LN11@htmlParseN
	cmp	al, 90					; 0000005aH
	jbe	SHORT $LN6@htmlParseN
$LN11@htmlParseN:
	cmp	al, 48					; 00000030H
	jb	SHORT $LN12@htmlParseN
	cmp	al, 57					; 00000039H
	jbe	SHORT $LN6@htmlParseN
$LN12@htmlParseN:
	cmp	al, 95					; 0000005fH
	je	SHORT $LN6@htmlParseN
	cmp	al, 45					; 0000002dH
	je	SHORT $LN6@htmlParseN
	cmp	al, 58					; 0000003aH
	je	SHORT $LN6@htmlParseN
	cmp	al, 46					; 0000002eH
	je	SHORT $LN6@htmlParseN

; 2474 : 	    in++;
; 2475 : 
; 2476 : 	if (in == ctxt->input->end)

	cmp	edi, DWORD PTR [ecx+20]
	jne	SHORT $LN13@htmlParseN

; 2477 : 	    return(NULL);

	pop	edi
	xor	eax, eax

; 2489 : }

	pop	ebx
	pop	ebp
	ret	0
$LN13@htmlParseN:

; 2478 : 
; 2479 : 	if ((*in > 0) && (*in < 0x80)) {

	dec	al
	cmp	al, 126					; 0000007eH
	ja	SHORT $LN14@htmlParseN

; 2480 : 	    count = in - ctxt->input->cur;

	push	esi
	mov	esi, edi
	sub	esi, edx

; 2481 : 	    ret = xmlDictLookup(ctxt->dict, ctxt->input->cur, count);

	push	esi
	push	edx
	push	DWORD PTR [ebx+296]
	call	_xmlDictLookup

; 2482 : 	    ctxt->input->cur = in;

	mov	ecx, DWORD PTR [ebx+36]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [ecx+16], edi

; 2483 : 	    ctxt->nbChars += count;
; 2484 : 	    ctxt->input->col += count;

	mov	ecx, DWORD PTR [ebx+36]
	add	DWORD PTR [ebx+200], esi
	add	DWORD PTR [ecx+32], esi

; 2485 : 	    return(ret);

	pop	esi
	pop	edi

; 2489 : }

	pop	ebx
	pop	ebp
	ret	0
$LN14@htmlParseN:

; 2486 : 	}
; 2487 :     }
; 2488 :     return(htmlParseNameComplex(ctxt));

	push	ebx
	call	_htmlParseNameComplex
	add	esp, 4
	pop	edi

; 2489 : }

	pop	ebx
	pop	ebp
	ret	0
_htmlParseName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseHTMLName_nonInvasive
_TEXT	SEGMENT
_loc$ = -100						; size = 100
_ctxt$ = 8						; size = 4
_htmlParseHTMLName_nonInvasive PROC			; COMDAT

; 2425 : htmlParseHTMLName_nonInvasive(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	ecx, OFFSET __111E219E_htmlparser@c
	push	ebx
	push	esi
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _ctxt$[ebp]
	xor	esi, esi
	mov	edi, DWORD PTR [ebx+36]
	mov	eax, DWORD PTR [edi+16]
	mov	al, BYTE PTR [eax+1]
	cmp	al, 65					; 00000041H
	jb	SHORT $LN5@htmlParseH

; 2426 :     int i = 0;
; 2427 :     xmlChar loc[HTML_PARSER_BUFFER_SIZE];
; 2428 : 
; 2429 :     if (!IS_ASCII_LETTER(NXT(1)) && (NXT(1) != '_') &&

	cmp	al, 90					; 0000005aH
	jbe	SHORT $LL2@htmlParseH
$LN5@htmlParseH:
	cmp	al, 97					; 00000061H
	jb	SHORT $LN6@htmlParseH
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LL2@htmlParseH
$LN6@htmlParseH:
	cmp	al, 95					; 0000005fH
	je	SHORT $LL2@htmlParseH
	cmp	al, 58					; 0000003aH
	je	SHORT $LL2@htmlParseH

; 2441 : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LL2@htmlParseH:

; 2430 :         (NXT(1) != ':')) return(NULL);
; 2431 : 
; 2432 :     while ((i < HTML_PARSER_BUFFER_SIZE) &&

	mov	eax, DWORD PTR [edi+16]
	mov	al, BYTE PTR [esi+eax+1]
	cmp	al, 65					; 00000041H
	jb	SHORT $LN8@htmlParseH
	cmp	al, 90					; 0000005aH
	jbe	SHORT $LN7@htmlParseH
$LN8@htmlParseH:
	cmp	al, 97					; 00000061H
	jb	SHORT $LN9@htmlParseH
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LN7@htmlParseH
$LN9@htmlParseH:
	cmp	al, 48					; 00000030H
	jb	SHORT $LN10@htmlParseH
	cmp	al, 57					; 00000039H
	jbe	SHORT $LN7@htmlParseH
$LN10@htmlParseH:
	cmp	al, 58					; 0000003aH
	je	SHORT $LN7@htmlParseH
	cmp	al, 45					; 0000002dH
	je	SHORT $LN7@htmlParseH
	cmp	al, 95					; 0000005fH
	jne	SHORT $LN3@htmlParseH
$LN7@htmlParseH:

; 2433 :            ((IS_ASCII_LETTER(NXT(1+i))) || (IS_ASCII_DIGIT(NXT(1+i))) ||
; 2434 : 	   (NXT(1+i) == ':') || (NXT(1+i) == '-') || (NXT(1+i) == '_'))) {
; 2435 : 	if ((NXT(1+i) >= 'A') && (NXT(1+i) <= 'Z')) loc[i] = NXT(1+i) + 0x20;

	lea	edx, DWORD PTR [eax-65]

; 2436 :         else loc[i] = NXT(1+i);
; 2437 : 	i++;

	lea	ecx, DWORD PTR [eax+32]
	cmp	dl, 25					; 00000019H
	movzx	ecx, cl
	movzx	eax, al
	cmova	ecx, eax
	mov	BYTE PTR _loc$[ebp+esi], cl
	inc	esi
	cmp	esi, 100				; 00000064H
	jl	SHORT $LL2@htmlParseH
$LN3@htmlParseH:

; 2438 :     }
; 2439 : 
; 2440 :     return(xmlDictLookup(ctxt->dict, loc, i));

	push	esi
	lea	eax, DWORD PTR _loc$[ebp]
	push	eax
	push	DWORD PTR [ebx+296]
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	pop	edi

; 2441 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseHTMLName_nonInvasive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseHTMLName
_TEXT	SEGMENT
_loc$ = -100						; size = 100
_ctxt$ = 8						; size = 4
_htmlParseHTMLName PROC					; COMDAT

; 2391 : htmlParseHTMLName(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	ecx, OFFSET __111E219E_htmlparser@c
	push	esi
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _ctxt$[ebp]
	xor	esi, esi
	mov	eax, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 65					; 00000041H
	jb	SHORT $LN5@htmlParseH

; 2392 :     int i = 0;
; 2393 :     xmlChar loc[HTML_PARSER_BUFFER_SIZE];
; 2394 : 
; 2395 :     if (!IS_ASCII_LETTER(CUR) && (CUR != '_') &&
; 2396 :         (CUR != ':') && (CUR != '.')) return(NULL);

	cmp	al, 90					; 0000005aH
	jbe	SHORT $LL2@htmlParseH
$LN5@htmlParseH:
	cmp	al, 97					; 00000061H
	jb	SHORT $LN6@htmlParseH
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LL2@htmlParseH
$LN6@htmlParseH:
	cmp	al, 95					; 0000005fH
	je	SHORT $LL2@htmlParseH
	cmp	al, 58					; 0000003aH
	je	SHORT $LL2@htmlParseH
	cmp	al, 46					; 0000002eH
	je	SHORT $LL2@htmlParseH
	pop	edi
	xor	eax, eax

; 2410 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LL2@htmlParseH:

; 2397 : 
; 2398 :     while ((i < HTML_PARSER_BUFFER_SIZE) &&

	mov	eax, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 65					; 00000041H
	jb	SHORT $LN8@htmlParseH
	cmp	al, 90					; 0000005aH
	jbe	SHORT $LN7@htmlParseH
$LN8@htmlParseH:
	cmp	al, 97					; 00000061H
	jb	SHORT $LN9@htmlParseH
	cmp	al, 122					; 0000007aH
	jbe	SHORT $LN7@htmlParseH
$LN9@htmlParseH:
	cmp	al, 48					; 00000030H
	jb	SHORT $LN10@htmlParseH
	cmp	al, 57					; 00000039H
	jbe	SHORT $LN7@htmlParseH
$LN10@htmlParseH:
	cmp	al, 58					; 0000003aH
	je	SHORT $LN7@htmlParseH
	cmp	al, 45					; 0000002dH
	je	SHORT $LN7@htmlParseH
	cmp	al, 95					; 0000005fH
	je	SHORT $LN7@htmlParseH
	cmp	al, 46					; 0000002eH
	jne	SHORT $LN3@htmlParseH
$LN7@htmlParseH:

; 2399 :            ((IS_ASCII_LETTER(CUR)) || (IS_ASCII_DIGIT(CUR)) ||
; 2400 : 	   (CUR == ':') || (CUR == '-') || (CUR == '_') ||
; 2401 :            (CUR == '.'))) {
; 2402 : 	if ((CUR >= 'A') && (CUR <= 'Z')) loc[i] = CUR + 0x20;

	cmp	al, 65					; 00000041H
	jb	SHORT $LN11@htmlParseH
	cmp	al, 90					; 0000005aH
	ja	SHORT $LN11@htmlParseH
	add	al, 32					; 00000020H
$LN11@htmlParseH:

; 2403 :         else loc[i] = CUR;
; 2404 : 	i++;

	mov	BYTE PTR _loc$[ebp+esi], al
	inc	esi

; 2405 : 
; 2406 : 	NEXT;

	push	edi
	call	_xmlNextChar
	add	esp, 4
	cmp	esi, 100				; 00000064H
	jl	SHORT $LL2@htmlParseH
$LN3@htmlParseH:

; 2407 :     }
; 2408 : 
; 2409 :     return(xmlDictLookup(ctxt->dict, loc, i));

	push	esi
	lea	eax, DWORD PTR _loc$[ebp]
	push	eax
	push	DWORD PTR [edi+296]
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	pop	edi

; 2410 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseHTMLName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseNameComplex
_TEXT	SEGMENT
_len$1$ = -8						; size = 4
_l$ = -4						; size = 4
_base$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseNameComplex PROC				; COMDAT

; 2492 : htmlParseNameComplex(xmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _ctxt$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _len$1$[ebp], ecx
	xor	ebx, ebx
	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _base$1$[ebp], eax
	cmp	DWORD PTR [edi+292], ebx
	jne	SHORT $LN7@htmlParseN

; 2493 :     int len = 0, l;
; 2494 :     int c;
; 2495 :     int count = 0;
; 2496 :     const xmlChar *base = ctxt->input->base;
; 2497 : 
; 2498 :     /*
; 2499 :      * Handler for more complex cases
; 2500 :      */
; 2501 :     GROW;

	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN7@htmlParseN
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN7@htmlParseN:

; 2502 :     c = CUR_CHAR(l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	push	edi
	call	_htmlCurrentChar
	mov	esi, eax
	add	esp, 8

; 2503 :     if ((c == ' ') || (c == '>') || (c == '/') || /* accelerators */

	cmp	esi, 32					; 00000020H
	je	$LN9@htmlParseN
	cmp	esi, 62					; 0000003eH
	je	$LN9@htmlParseN
	cmp	esi, 47					; 0000002fH
	je	$LN9@htmlParseN
	cmp	esi, 256				; 00000100H
	jge	SHORT $LN24@htmlParseN
	cmp	esi, 65					; 00000041H
	jl	SHORT $LN18@htmlParseN
	cmp	esi, 90					; 0000005aH
	jle	$LL2@htmlParseN
$LN18@htmlParseN:
	cmp	esi, 97					; 00000061H
	jl	SHORT $LN19@htmlParseN
	cmp	esi, 122				; 0000007aH
	jle	SHORT $LL2@htmlParseN
$LN19@htmlParseN:
	cmp	esi, 192				; 000000c0H
	jl	SHORT $LN21@htmlParseN
	cmp	esi, 214				; 000000d6H
	jle	SHORT $LL2@htmlParseN
$LN21@htmlParseN:
	cmp	esi, 216				; 000000d8H
	jl	SHORT $LN22@htmlParseN
	cmp	esi, 246				; 000000f6H
	jle	SHORT $LL2@htmlParseN
$LN22@htmlParseN:
	cmp	esi, 248				; 000000f8H
	jge	SHORT $LL2@htmlParseN
	jmp	SHORT $LN58@htmlParseN
$LN24@htmlParseN:
	push	OFFSET _xmlIsBaseCharGroup
	push	esi
	call	_xmlCharInRange
	add	esp, 8
	test	eax, eax
	jne	SHORT $LL2@htmlParseN
$LN58@htmlParseN:
	cmp	esi, 256				; 00000100H
	jl	SHORT $LN63@htmlParseN
	cmp	esi, 19968				; 00004e00H
	jl	SHORT $LN26@htmlParseN
	cmp	esi, 40869				; 00009fa5H
	jle	SHORT $LL2@htmlParseN
$LN26@htmlParseN:
	cmp	esi, 12295				; 00003007H
	je	SHORT $LL2@htmlParseN
	cmp	esi, 12321				; 00003021H
	jl	SHORT $LN63@htmlParseN
	cmp	esi, 12329				; 00003029H
	jle	SHORT $LL2@htmlParseN
$LN63@htmlParseN:
	cmp	esi, 95					; 0000005fH
	je	SHORT $LL2@htmlParseN
	cmp	esi, 58					; 0000003aH
	jne	$LN9@htmlParseN
	npad	3
$LL2@htmlParseN:

; 2504 : 	(!IS_LETTER(c) && (c != '_') &&
; 2505 :          (c != ':'))) {
; 2506 : 	return(NULL);
; 2507 :     }
; 2508 : 
; 2509 :     while ((c != ' ') && (c != '>') && (c != '/') && /* test bigname.xml */

	cmp	esi, 62					; 0000003eH
	je	$LN3@htmlParseN
	cmp	esi, 47					; 0000002fH
	je	$LN3@htmlParseN
	cmp	esi, 256				; 00000100H
	jge	SHORT $LN38@htmlParseN
	cmp	esi, 65					; 00000041H
	jl	SHORT $LN32@htmlParseN
	cmp	esi, 90					; 0000005aH
	jle	$LN10@htmlParseN
$LN32@htmlParseN:
	cmp	esi, 97					; 00000061H
	jl	SHORT $LN33@htmlParseN
	cmp	esi, 122				; 0000007aH
	jle	$LN10@htmlParseN
$LN33@htmlParseN:
	cmp	esi, 192				; 000000c0H
	jl	SHORT $LN35@htmlParseN
	cmp	esi, 214				; 000000d6H
	jle	$LN10@htmlParseN
$LN35@htmlParseN:
	cmp	esi, 216				; 000000d8H
	jl	SHORT $LN36@htmlParseN
	cmp	esi, 246				; 000000f6H
	jle	$LN10@htmlParseN
$LN36@htmlParseN:
	cmp	esi, 248				; 000000f8H
	jge	$LN10@htmlParseN
	jmp	SHORT $LN59@htmlParseN
$LN38@htmlParseN:
	push	OFFSET _xmlIsBaseCharGroup
	push	esi
	call	_xmlCharInRange
	add	esp, 8
	test	eax, eax
	jne	$LN10@htmlParseN
$LN59@htmlParseN:
	cmp	esi, 256				; 00000100H
	jl	SHORT $LN74@htmlParseN
	cmp	esi, 19968				; 00004e00H
	jl	SHORT $LN40@htmlParseN
	cmp	esi, 40869				; 00009fa5H
	jle	$LN10@htmlParseN
$LN40@htmlParseN:
	cmp	esi, 12295				; 00003007H
	je	$LN10@htmlParseN
	cmp	esi, 12321				; 00003021H
	jl	SHORT $LN64@htmlParseN
	cmp	esi, 12329				; 00003029H
	jle	SHORT $LN10@htmlParseN
$LN64@htmlParseN:
	cmp	esi, 256				; 00000100H
	jge	SHORT $LN48@htmlParseN
$LN74@htmlParseN:
	lea	eax, DWORD PTR [esi-48]
	cmp	eax, 9
	ja	SHORT $LN60@htmlParseN
	jmp	SHORT $LN10@htmlParseN
$LN48@htmlParseN:
	push	OFFSET _xmlIsDigitGroup
	push	esi
	call	_xmlCharInRange
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@htmlParseN
$LN60@htmlParseN:
	cmp	esi, 46					; 0000002eH
	je	SHORT $LN10@htmlParseN
	cmp	esi, 45					; 0000002dH
	je	SHORT $LN10@htmlParseN
	cmp	esi, 95					; 0000005fH
	je	SHORT $LN10@htmlParseN
	cmp	esi, 58					; 0000003aH
	je	SHORT $LN10@htmlParseN
	cmp	esi, 256				; 00000100H
	jl	SHORT $LN65@htmlParseN
	push	OFFSET _xmlIsCombiningGroup
	push	esi
	call	_xmlCharInRange
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@htmlParseN
	push	OFFSET _xmlIsExtenderGroup
	push	esi
	call	_xmlCharInRange
	add	esp, 8
	jmp	SHORT $LN53@htmlParseN
$LN65@htmlParseN:
	xor	eax, eax
	cmp	esi, 183				; 000000b7H
	sete	al
$LN53@htmlParseN:
	test	eax, eax
	je	$LN3@htmlParseN
$LN10@htmlParseN:

; 2510 : 	   ((IS_LETTER(c)) || (IS_DIGIT(c)) ||
; 2511 :             (c == '.') || (c == '-') ||
; 2512 : 	    (c == '_') || (c == ':') ||
; 2513 : 	    (IS_COMBINING(c)) ||
; 2514 : 	    (IS_EXTENDER(c)))) {
; 2515 : 	if (count++ > 100) {

	mov	eax, ebx
	inc	ebx
	cmp	eax, 100				; 00000064H
	jle	SHORT $LN12@htmlParseN

; 2516 : 	    count = 0;

	xor	ebx, ebx

; 2517 : 	    GROW;

	cmp	DWORD PTR [edi+292], ebx
	jne	SHORT $LN12@htmlParseN
	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN12@htmlParseN
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN12@htmlParseN:

; 2518 : 	}
; 2519 : 	len += l;

	mov	eax, DWORD PTR _len$1$[ebp]
	add	eax, DWORD PTR _l$[ebp]

; 2520 : 	NEXTL(l);

	mov	ecx, DWORD PTR [edi+36]
	mov	DWORD PTR _len$1$[ebp], eax
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $LN13@htmlParseN
	inc	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [eax+32], 1
	jmp	SHORT $LN14@htmlParseN
$LN13@htmlParseN:
	inc	DWORD PTR [ecx+32]
$LN14@htmlParseN:
	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR [edi+176], 0
	add	DWORD PTR [ecx+16], eax

; 2521 : 	c = CUR_CHAR(l);

	lea	eax, DWORD PTR _l$[ebp]
	inc	DWORD PTR [edi+200]
	push	eax
	push	edi
	call	_htmlCurrentChar

; 2522 : 	if (ctxt->input->base != base) {

	mov	ecx, DWORD PTR _base$1$[ebp]
	mov	esi, eax
	mov	eax, DWORD PTR [edi+36]
	add	esp, 8
	cmp	DWORD PTR [eax+12], ecx
	jne	SHORT $LN55@htmlParseN

; 2504 : 	(!IS_LETTER(c) && (c != '_') &&
; 2505 :          (c != ':'))) {
; 2506 : 	return(NULL);
; 2507 :     }
; 2508 : 
; 2509 :     while ((c != ' ') && (c != '>') && (c != '/') && /* test bigname.xml */

	cmp	esi, 32					; 00000020H
	jne	$LL2@htmlParseN
$LN3@htmlParseN:

; 2528 : 	}
; 2529 :     }
; 2530 : 
; 2531 :     if (ctxt->input->cur - ctxt->input->base < len) {

	mov	ecx, DWORD PTR [edi+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, edx
	sub	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _len$1$[ebp]
	cmp	eax, ecx
	jge	SHORT $LN16@htmlParseN

; 2532 :         /* Sanity check */
; 2533 : 	htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CC@JIBKNHBD@unexpected?5change?5of?5input?5buff@
	push	1
	push	edi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN9@htmlParseN:

; 2539 : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN55@htmlParseN:

; 2523 : 	    /*
; 2524 : 	     * We changed encoding from an unknown encoding
; 2525 : 	     * Input buffer changed location, so we better start again
; 2526 : 	     */
; 2527 : 	    return(htmlParseNameComplex(ctxt));

	push	edi
	call	_htmlParseNameComplex
	add	esp, 4
	pop	edi

; 2539 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@htmlParseN:

; 2534 :                      "unexpected change of input buffer", NULL, NULL);
; 2535 :         return (NULL);
; 2536 :     }
; 2537 : 
; 2538 :     return(xmlDictLookup(ctxt->dict, ctxt->input->cur - len, len));

	push	ecx
	sub	edx, ecx
	push	edx
	push	DWORD PTR [edi+296]
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	pop	edi

; 2539 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseNameComplex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _areBlanks
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_areBlanks PROC						; COMDAT

; 2243 : static int areBlanks(htmlParserCtxtPtr ctxt, const xmlChar *str, int len) {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edx, DWORD PTR _len$[ebp]
	xor	ecx, ecx
	test	edx, edx
	jle	SHORT $LN3@areBlanks
	mov	esi, DWORD PTR _str$[ebp]
	npad	5
$LL4@areBlanks:

; 2250 :         if (!(IS_BLANK_CH(str[j]))) return(0);

	mov	al, BYTE PTR [ecx+esi]
	cmp	al, 32					; 00000020H
	je	SHORT $LN2@areBlanks
	cmp	al, 9
	jb	SHORT $LN14@areBlanks
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN2@areBlanks
$LN14@areBlanks:
	cmp	al, 13					; 0000000dH
	jne	$LN39@areBlanks
$LN2@areBlanks:

; 2244 :     unsigned int i;
; 2245 :     int j;
; 2246 :     xmlNodePtr lastChild;
; 2247 :     xmlDtdPtr dtd;
; 2248 : 
; 2249 :     for (j = 0;j < len;j++)

	inc	ecx
	cmp	ecx, edx
	jl	SHORT $LL4@areBlanks
$LN3@areBlanks:

; 2251 : 
; 2252 :     if (CUR == 0) return(1);

	mov	edi, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	test	al, al
	je	$LN11@areBlanks

; 2253 :     if (CUR != '<') return(0);

	cmp	al, 60					; 0000003cH
	jne	$LN39@areBlanks

; 2254 :     if (ctxt->name == NULL)

	mov	eax, DWORD PTR [edi+184]
	test	eax, eax
	je	$LN11@areBlanks

; 2255 : 	return(1);
; 2256 :     if (xmlStrEqual(ctxt->name, BAD_CAST"html"))

	push	OFFSET ??_C@_04PNIFHPHN@html@
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN11@areBlanks

; 2257 : 	return(1);
; 2258 :     if (xmlStrEqual(ctxt->name, BAD_CAST"head"))

	push	OFFSET ??_C@_04NEODDMOL@head@
	push	DWORD PTR [edi+184]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN11@areBlanks

; 2259 : 	return(1);
; 2260 : 
; 2261 :     /* Only strip CDATA children of the body tag for strict HTML DTDs */
; 2262 :     if (xmlStrEqual(ctxt->name, BAD_CAST "body") && ctxt->myDoc != NULL) {

	push	OFFSET ??_C@_04IEJGKNJ@body@
	push	DWORD PTR [edi+184]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@areBlanks
	mov	eax, DWORD PTR [edi+8]
	test	eax, eax
	je	SHORT $LN22@areBlanks

; 2263 :         dtd = xmlGetIntSubset(ctxt->myDoc);

	push	eax
	call	_xmlGetIntSubset
	mov	esi, eax
	add	esp, 4

; 2264 :         if (dtd != NULL && dtd->ExternalID != NULL) {

	test	esi, esi
	je	SHORT $LN22@areBlanks
	mov	eax, DWORD PTR [esi+52]
	test	eax, eax
	je	SHORT $LN22@areBlanks

; 2265 :             if (!xmlStrcasecmp(dtd->ExternalID, BAD_CAST "-//W3C//DTD HTML 4.01//EN") ||

	push	OFFSET ??_C@_0BK@MJOJINPD@?9?1?1W3C?1?1DTD?5HTML?54?401?1?1EN@
	push	eax
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@areBlanks
	push	OFFSET ??_C@_0BH@HNGCOIEH@?9?1?1W3C?1?1DTD?5HTML?54?1?1EN@
	push	DWORD PTR [esi+52]
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@areBlanks
$LN22@areBlanks:

; 2266 :                     !xmlStrcasecmp(dtd->ExternalID, BAD_CAST "-//W3C//DTD HTML 4//EN"))
; 2267 :                 return(1);
; 2268 :         }
; 2269 :     }
; 2270 : 
; 2271 :     if (ctxt->node == NULL) return(0);

	mov	eax, DWORD PTR [edi+52]
	test	eax, eax
	je	$LN39@areBlanks

; 2272 :     lastChild = xmlGetLastChild(ctxt->node);

	push	eax
	call	_xmlGetLastChild
	mov	esi, eax
	add	esp, 4

; 2273 :     while ((lastChild) && (lastChild->type == XML_COMMENT_NODE))

	test	esi, esi
	je	SHORT $LN52@areBlanks
	npad	6
$LL5@areBlanks:
	cmp	DWORD PTR [esi+4], 8
	jne	SHORT $LN25@areBlanks

; 2274 : 	lastChild = lastChild->prev;

	mov	esi, DWORD PTR [esi+28]
	test	esi, esi
	jne	SHORT $LL5@areBlanks
$LN52@areBlanks:

; 2275 :     if (lastChild == NULL) {
; 2276 :         if ((ctxt->node->type != XML_ELEMENT_NODE) &&

	mov	eax, DWORD PTR [edi+52]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN27@areBlanks
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN39@areBlanks
$LN27@areBlanks:

; 2277 :             (ctxt->node->content != NULL)) return(0);
; 2278 : 	/* keep ws in constructs like ...<b> </b>...
; 2279 : 	   for all tags "b" allowing PCDATA */
; 2280 : 	for ( i = 0; i < sizeof(allowPCData)/sizeof(allowPCData[0]); i++ ) {

	xor	esi, esi
	npad	2
$LL9@areBlanks:

; 2281 : 	    if ( xmlStrEqual(ctxt->name, BAD_CAST allowPCData[i]) ) {

	push	DWORD PTR _allowPCData[esi]
	push	DWORD PTR [edi+184]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@areBlanks

; 2277 :             (ctxt->node->content != NULL)) return(0);
; 2278 : 	/* keep ws in constructs like ...<b> </b>...
; 2279 : 	   for all tags "b" allowing PCDATA */
; 2280 : 	for ( i = 0; i < sizeof(allowPCData)/sizeof(allowPCData[0]); i++ ) {

	add	esi, 4
	cmp	esi, 212				; 000000d4H
	jb	SHORT $LL9@areBlanks
$LN11@areBlanks:
	pop	edi

; 2293 : 	    }
; 2294 : 	}
; 2295 :     }
; 2296 :     return(1);

	mov	eax, 1

; 2297 : }

	pop	esi
	pop	ebp
	ret	0
$LN25@areBlanks:

; 2282 : 		return(0);
; 2283 : 	    }
; 2284 : 	}
; 2285 :     } else if (xmlNodeIsText(lastChild)) {

	push	esi
	call	_xmlNodeIsText
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN39@areBlanks

; 2286 :         return(0);
; 2287 :     } else {
; 2288 : 	/* keep ws in constructs like <p><b>xy</b> <i>z</i><p>
; 2289 : 	   for all tags "p" allowing PCDATA */
; 2290 : 	for ( i = 0; i < sizeof(allowPCData)/sizeof(allowPCData[0]); i++ ) {

	xor	edi, edi
	npad	5
$LL12@areBlanks:

; 2291 : 	    if ( xmlStrEqual(lastChild->name, BAD_CAST allowPCData[i]) ) {

	push	DWORD PTR _allowPCData[edi]
	push	DWORD PTR [esi+8]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@areBlanks

; 2286 :         return(0);
; 2287 :     } else {
; 2288 : 	/* keep ws in constructs like <p><b>xy</b> <i>z</i><p>
; 2289 : 	   for all tags "p" allowing PCDATA */
; 2290 : 	for ( i = 0; i < sizeof(allowPCData)/sizeof(allowPCData[0]); i++ ) {

	add	edi, 4
	cmp	edi, 212				; 000000d4H
	jb	SHORT $LL12@areBlanks

; 2293 : 	    }
; 2294 : 	}
; 2295 :     }
; 2296 :     return(1);

	pop	edi
	mov	eax, 1

; 2297 : }

	pop	esi
	pop	ebp
	ret	0
$LN39@areBlanks:
	pop	edi

; 2292 : 		return(0);

	xor	eax, eax

; 2297 : }

	pop	esi
	pop	ebp
	ret	0
_areBlanks ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlNewInputStream
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlNewInputStream PROC				; COMDAT

; 2187 : htmlNewInputStream(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	push	60					; 0000003cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@htmlNewInp

; 79   :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	test	eax, eax
	je	SHORT $LN6@htmlNewInp
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN5@htmlNewInp
	cmp	DWORD PTR [eax+172], -1
	je	SHORT $LN8@htmlNewInp
$LN5@htmlNewInp:

; 80   :         (ctxt->instate == XML_PARSER_EOF))
; 81   : 	return;
; 82   :     if (ctxt != NULL) {
; 83   :         ctxt->errNo = XML_ERR_NO_MEMORY;

	mov	DWORD PTR [eax+84], 2

; 84   :         ctxt->instate = XML_PARSER_EOF;

	mov	DWORD PTR [eax+172], -1

; 85   :         ctxt->disableSAX = 1;

	mov	DWORD PTR [eax+212], 1
$LN6@htmlNewInp:

; 86   :     }
; 87   :     if (extra)
; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0CG@CPFGJCJF@couldn?8t?5allocate?5a?5new?5input?5s@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0CG@CPFGJCJF@couldn?8t?5allocate?5a?5new?5input?5s@
	push	0
	push	0
	push	3
	push	2
	push	1
	push	0
	push	eax
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
$LN8@htmlNewInp:

; 2188 :     htmlParserInputPtr input;
; 2189 : 
; 2190 :     input = (xmlParserInputPtr) xmlMalloc(sizeof(htmlParserInput));
; 2191 :     if (input == NULL) {
; 2192 :         htmlErrMemory(ctxt, "couldn't allocate a new input stream\n");
; 2193 : 	return(NULL);

	xor	eax, eax

; 2208 :     return(input);
; 2209 : }

	pop	ebp
	ret	0
$LN2@htmlNewInp:

; 2194 :     }
; 2195 :     memset(input, 0, sizeof(htmlParserInput));

	mov	DWORD PTR [eax+20], 0
	mov	DWORD PTR [eax+44], 0
	mov	DWORD PTR [eax+52], 0
	mov	DWORD PTR [eax+56], 0

; 2196 :     input->filename = NULL;

	mov	DWORD PTR [eax+4], 0

; 2197 :     input->directory = NULL;

	mov	DWORD PTR [eax+8], 0

; 2198 :     input->base = NULL;

	mov	DWORD PTR [eax+12], 0

; 2199 :     input->cur = NULL;

	mov	DWORD PTR [eax+16], 0

; 2200 :     input->buf = NULL;
; 2201 :     input->line = 1;

	mov	DWORD PTR [eax+28], 1

; 2202 :     input->col = 1;

	mov	DWORD PTR [eax+32], 1

; 2203 :     input->buf = NULL;

	mov	DWORD PTR [eax], 0

; 2204 :     input->free = NULL;

	mov	DWORD PTR [eax+40], 0

; 2205 :     input->version = NULL;

	mov	DWORD PTR [eax+48], 0

; 2206 :     input->consumed = 0;

	mov	DWORD PTR [eax+36], 0

; 2207 :     input->length = 0;

	mov	DWORD PTR [eax+24], 0

; 2208 :     return(input);
; 2209 : }

	pop	ebp
	ret	0
_htmlNewInputStream ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCheckParagraph
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlCheckParagraph PROC				; COMDAT

; 1554 : htmlCheckParagraph(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	jne	SHORT $LN5@htmlCheckP

; 1555 :     const xmlChar *tag;
; 1556 :     int i;
; 1557 : 
; 1558 :     if (ctxt == NULL)
; 1559 : 	return(-1);

	or	eax, -1
	pop	esi

; 1582 : }

	pop	ebp
	ret	0
$LN5@htmlCheckP:
	push	ebx

; 1560 :     tag = ctxt->name;

	mov	ebx, DWORD PTR [esi+184]
	push	edi

; 1561 :     if (tag == NULL) {

	test	ebx, ebx
	je	SHORT $LN13@htmlCheckP

; 1562 : 	htmlAutoClose(ctxt, BAD_CAST"p");
; 1563 : 	htmlCheckImplied(ctxt, BAD_CAST"p");
; 1564 : 	htmlnamePush(ctxt, BAD_CAST"p");
; 1565 : 	if ((ctxt->sax != NULL) && (ctxt->sax->startElement != NULL))
; 1566 : 	    ctxt->sax->startElement(ctxt->userData, BAD_CAST"p", NULL);
; 1567 : 	return(1);
; 1568 :     }
; 1569 :     if (!htmlOmittedDefaultValue)

	cmp	DWORD PTR _htmlOmittedDefaultValue, 0
	je	SHORT $LN3@htmlCheckP

; 1570 : 	return(0);
; 1571 :     for (i = 0; htmlNoContentElements[i] != NULL; i++) {

	mov	eax, DWORD PTR _htmlNoContentElements
	xor	edi, edi
	test	eax, eax
	je	SHORT $LN3@htmlCheckP
	npad	5
$LL4@htmlCheckP:

; 1572 : 	if (xmlStrEqual(tag, BAD_CAST htmlNoContentElements[i])) {

	push	eax
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@htmlCheckP

; 1570 : 	return(0);
; 1571 :     for (i = 0; htmlNoContentElements[i] != NULL; i++) {

	mov	eax, DWORD PTR _htmlNoContentElements[edi*4+4]
	inc	edi
	test	eax, eax
	jne	SHORT $LL4@htmlCheckP
$LN3@htmlCheckP:
	pop	edi
	pop	ebx

; 1579 : 	}
; 1580 :     }
; 1581 :     return(0);

	xor	eax, eax
	pop	esi

; 1582 : }

	pop	ebp
	ret	0
$LN13@htmlCheckP:

; 1573 : 	    htmlAutoClose(ctxt, BAD_CAST"p");
; 1574 : 	    htmlCheckImplied(ctxt, BAD_CAST"p");
; 1575 : 	    htmlnamePush(ctxt, BAD_CAST"p");
; 1576 : 	    if ((ctxt->sax != NULL) && (ctxt->sax->startElement != NULL))
; 1577 : 		ctxt->sax->startElement(ctxt->userData, BAD_CAST"p", NULL);
; 1578 : 	    return(1);

	push	OFFSET ??_C@_01JBBJJEPG@p@
	push	esi
	call	_htmlAutoClose
	push	OFFSET ??_C@_01JBBJJEPG@p@
	push	esi
	call	_htmlCheckImplied
	push	OFFSET ??_C@_01JBBJJEPG@p@
	push	esi
	call	_htmlnamePush
	mov	eax, DWORD PTR [esi]
	add	esp, 24					; 00000018H
	test	eax, eax
	je	SHORT $LN10@htmlCheckP
	mov	eax, DWORD PTR [eax+56]
	test	eax, eax
	je	SHORT $LN10@htmlCheckP
	push	0
	push	OFFSET ??_C@_01JBBJJEPG@p@
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 12					; 0000000cH
$LN10@htmlCheckP:
	pop	edi
	pop	ebx
	mov	eax, 1
	pop	esi

; 1582 : }

	pop	ebp
	ret	0
_htmlCheckParagraph ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCheckImplied
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_newtag$ = 12						; size = 4
_htmlCheckImplied PROC					; COMDAT

; 1486 : htmlCheckImplied(htmlParserCtxtPtr ctxt, const xmlChar *newtag) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	test	DWORD PTR [esi+360], 8192		; 00002000H
	jne	$LN11@htmlCheckI

; 1487 :     int i;
; 1488 : 
; 1489 :     if (ctxt->options & HTML_PARSE_NOIMPLIED)
; 1490 :         return;
; 1491 :     if (!htmlOmittedDefaultValue)

	cmp	DWORD PTR _htmlOmittedDefaultValue, 0
	je	$LN11@htmlCheckI

; 1492 : 	return;
; 1493 :     if (xmlStrEqual(newtag, BAD_CAST"html"))

	push	edi
	mov	edi, DWORD PTR _newtag$[ebp]
	push	OFFSET ??_C@_04PNIFHPHN@html@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN31@htmlCheckI

; 1494 : 	return;
; 1495 :     if (ctxt->nameNr <= 0) {

	cmp	DWORD PTR [esi+188], eax
	jg	SHORT $LN9@htmlCheckI

; 1496 : 	htmlnamePush(ctxt, BAD_CAST"html");

	push	OFFSET ??_C@_04PNIFHPHN@html@
	push	esi
	call	_htmlnamePush

; 1497 : 	if ((ctxt->sax != NULL) && (ctxt->sax->startElement != NULL))

	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@htmlCheckI
	mov	eax, DWORD PTR [eax+56]
	test	eax, eax
	je	SHORT $LN9@htmlCheckI

; 1498 : 	    ctxt->sax->startElement(ctxt->userData, BAD_CAST"html", NULL);

	push	0
	push	OFFSET ??_C@_04PNIFHPHN@html@
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 12					; 0000000cH
$LN9@htmlCheckI:

; 1499 :     }
; 1500 :     if ((xmlStrEqual(newtag, BAD_CAST"body")) || (xmlStrEqual(newtag, BAD_CAST"head")))

	push	OFFSET ??_C@_04IEJGKNJ@body@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN31@htmlCheckI
	push	OFFSET ??_C@_04NEODDMOL@head@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN31@htmlCheckI

; 1501 :         return;
; 1502 :     if ((ctxt->nameNr <= 1) &&

	cmp	DWORD PTR [esi+188], 1
	jg	$LN30@htmlCheckI
	push	OFFSET ??_C@_06OLONEIEH@script@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@htmlCheckI
	push	OFFSET ??_C@_05IAKJCFIM@style@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@htmlCheckI
	push	OFFSET ??_C@_04HLJJCGEF@meta@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@htmlCheckI
	push	OFFSET ??_C@_04OHHBHOGB@link@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@htmlCheckI
	push	OFFSET ??_C@_05PHLGJONK@title@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@htmlCheckI
	push	OFFSET ??_C@_04BHIIPFEC@base@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN30@htmlCheckI
$LN14@htmlCheckI:

; 1503 :         ((xmlStrEqual(newtag, BAD_CAST"script")) ||
; 1504 : 	 (xmlStrEqual(newtag, BAD_CAST"style")) ||
; 1505 : 	 (xmlStrEqual(newtag, BAD_CAST"meta")) ||
; 1506 : 	 (xmlStrEqual(newtag, BAD_CAST"link")) ||
; 1507 : 	 (xmlStrEqual(newtag, BAD_CAST"title")) ||
; 1508 : 	 (xmlStrEqual(newtag, BAD_CAST"base")))) {
; 1509 :         if (ctxt->html >= 3) {

	cmp	DWORD PTR [esi+32], 3
	jge	$LN31@htmlCheckI

; 1510 :             /* we already saw or generated an <head> before */
; 1511 :             return;
; 1512 :         }
; 1513 :         /*
; 1514 :          * dropped OBJECT ... i you put it first BODY will be
; 1515 :          * assumed !
; 1516 :          */
; 1517 :         htmlnamePush(ctxt, BAD_CAST"head");

	push	OFFSET ??_C@_04NEODDMOL@head@
	push	esi
	call	_htmlnamePush

; 1518 :         if ((ctxt->sax != NULL) && (ctxt->sax->startElement != NULL))

	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	je	$LN31@htmlCheckI
	mov	eax, DWORD PTR [eax+56]
	test	eax, eax
	je	$LN31@htmlCheckI

; 1519 :             ctxt->sax->startElement(ctxt->userData, BAD_CAST"head", NULL);

	push	0
	push	OFFSET ??_C@_04NEODDMOL@head@

; 1538 : 	    ctxt->sax->startElement(ctxt->userData, BAD_CAST"body", NULL);

	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi

; 1539 :     }
; 1540 : }

	pop	ebp
	ret	0
$LN30@htmlCheckI:

; 1520 :     } else if ((!xmlStrEqual(newtag, BAD_CAST"noframes")) &&
; 1521 : 	       (!xmlStrEqual(newtag, BAD_CAST"frame")) &&

	push	OFFSET ??_C@_08NAAIELI@noframes@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN31@htmlCheckI
	push	OFFSET ??_C@_05MIJNFGED@frame@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN31@htmlCheckI
	push	OFFSET ??_C@_08GMEGJMDB@frameset@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@htmlCheckI

; 1522 : 	       (!xmlStrEqual(newtag, BAD_CAST"frameset"))) {
; 1523 :         if (ctxt->html >= 10) {

	cmp	DWORD PTR [esi+32], 10			; 0000000aH
	jge	SHORT $LN31@htmlCheckI

; 1524 :             /* we already saw or generated a <body> before */
; 1525 :             return;
; 1526 :         }
; 1527 : 	for (i = 0;i < ctxt->nameNr;i++) {

	xor	edi, edi
	cmp	DWORD PTR [esi+188], edi
	jle	SHORT $LN3@htmlCheckI
	npad	3
$LL4@htmlCheckI:

; 1528 : 	    if (xmlStrEqual(ctxt->nameTab[i], BAD_CAST"body")) {

	mov	eax, DWORD PTR [esi+196]
	push	OFFSET ??_C@_04IEJGKNJ@body@
	push	DWORD PTR [eax+edi*4]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@htmlCheckI

; 1529 : 		return;
; 1530 : 	    }
; 1531 : 	    if (xmlStrEqual(ctxt->nameTab[i], BAD_CAST"head")) {

	mov	eax, DWORD PTR [esi+196]
	push	OFFSET ??_C@_04NEODDMOL@head@
	push	DWORD PTR [eax+edi*4]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@htmlCheckI

; 1524 :             /* we already saw or generated a <body> before */
; 1525 :             return;
; 1526 :         }
; 1527 : 	for (i = 0;i < ctxt->nameNr;i++) {

	inc	edi
	cmp	edi, DWORD PTR [esi+188]
	jl	SHORT $LL4@htmlCheckI
$LN3@htmlCheckI:

; 1532 : 		return;
; 1533 : 	    }
; 1534 : 	}
; 1535 : 
; 1536 : 	htmlnamePush(ctxt, BAD_CAST"body");

	push	OFFSET ??_C@_04IEJGKNJ@body@
	push	esi
	call	_htmlnamePush

; 1537 : 	if ((ctxt->sax != NULL) && (ctxt->sax->startElement != NULL))

	mov	eax, DWORD PTR [esi]
	add	esp, 8
	test	eax, eax
	je	SHORT $LN31@htmlCheckI
	mov	eax, DWORD PTR [eax+56]
	test	eax, eax
	je	SHORT $LN31@htmlCheckI

; 1538 : 	    ctxt->sax->startElement(ctxt->userData, BAD_CAST"body", NULL);

	push	0
	push	OFFSET ??_C@_04IEJGKNJ@body@
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 12					; 0000000cH
$LN31@htmlCheckI:
	pop	edi
$LN11@htmlCheckI:
	pop	esi

; 1539 :     }
; 1540 : }

	pop	ebp
	ret	0
_htmlCheckImplied ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlAutoClose
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_newtag$ = 12						; size = 4
_htmlAutoClose PROC					; COMDAT

; 1403 : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _newtag$[ebp]
	test	edi, edi
	je	SHORT $LN29@htmlAutoCl
	push	esi
	mov	esi, DWORD PTR _ctxt$[ebp]
	npad	7
$LL2@htmlAutoCl:

; 1404 :     while ((newtag != NULL) && (ctxt->name != NULL) &&

	mov	eax, DWORD PTR [esi+184]
	test	eax, eax
	je	SHORT $LN30@htmlAutoCl
	push	eax
	push	edi
	call	_htmlCheckAutoClose
	add	esp, 8
	test	eax, eax
	je	SHORT $LN30@htmlAutoCl

; 1405 :            (htmlCheckAutoClose(newtag, ctxt->name))) {
; 1406 :         if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@htmlAutoCl
	mov	eax, DWORD PTR [eax+60]
	test	eax, eax
	je	SHORT $LN6@htmlAutoCl

; 1407 :             ctxt->sax->endElement(ctxt->userData, ctxt->name);

	push	DWORD PTR [esi+184]
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 8
$LN6@htmlAutoCl:

; 201  :     if (ctxt->nameNr <= 0)

	mov	ecx, DWORD PTR [esi+188]
	test	ecx, ecx
	jle	SHORT $LL2@htmlAutoCl

; 202  :         return (NULL);
; 203  :     ctxt->nameNr--;

	add	ecx, -1
	mov	DWORD PTR [esi+188], ecx

; 204  :     if (ctxt->nameNr < 0)

	js	SHORT $LL2@htmlAutoCl

; 205  :         return (NULL);
; 206  :     if (ctxt->nameNr > 0)

	test	ecx, ecx
	jle	SHORT $LN14@htmlAutoCl

; 207  :         ctxt->name = ctxt->nameTab[ctxt->nameNr - 1];

	mov	eax, DWORD PTR [esi+196]
	mov	eax, DWORD PTR [eax+ecx*4-4]
	jmp	SHORT $LN15@htmlAutoCl
$LN14@htmlAutoCl:

; 208  :     else
; 209  :         ctxt->name = NULL;

	xor	eax, eax
$LN15@htmlAutoCl:

; 210  :     ret = ctxt->nameTab[ctxt->nameNr];
; 211  :     ctxt->nameTab[ctxt->nameNr] = NULL;

	mov	DWORD PTR [esi+184], eax
	mov	eax, DWORD PTR [esi+196]
	mov	DWORD PTR [eax+ecx*4], 0

; 1404 :     while ((newtag != NULL) && (ctxt->name != NULL) &&

	jmp	SHORT $LL2@htmlAutoCl
$LN29@htmlAutoCl:

; 1408 : 	htmlnamePop(ctxt);
; 1409 :     }
; 1410 :     if (newtag == NULL) {
; 1411 :         htmlAutoCloseOnEnd(ctxt);

	push	DWORD PTR _ctxt$[ebp]
	call	_htmlAutoCloseOnEnd
	add	esp, 4
	pop	edi

; 1412 :         return;
; 1413 :     }
; 1414 :     while ((newtag == NULL) && (ctxt->name != NULL) &&
; 1415 :            ((xmlStrEqual(ctxt->name, BAD_CAST "head")) ||
; 1416 :             (xmlStrEqual(ctxt->name, BAD_CAST "body")) ||
; 1417 :             (xmlStrEqual(ctxt->name, BAD_CAST "html")))) {
; 1418 :         if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))
; 1419 :             ctxt->sax->endElement(ctxt->userData, ctxt->name);
; 1420 : 	htmlnamePop(ctxt);
; 1421 :     }
; 1422 : }

	pop	ebp
	ret	0
$LN30@htmlAutoCl:
	pop	esi
	pop	edi
	pop	ebp
	ret	0
_htmlAutoClose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlAutoCloseOnEnd
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlAutoCloseOnEnd PROC				; COMDAT

; 1377 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	edi, DWORD PTR [esi+188]
	test	edi, edi
	je	SHORT $LN3@htmlAutoCl

; 1378 :     int i;
; 1379 : 
; 1380 :     if (ctxt->nameNr == 0)
; 1381 :         return;
; 1382 :     for (i = (ctxt->nameNr - 1); i >= 0; i--) {

	add	edi, -1
	js	SHORT $LN3@htmlAutoCl
$LL4@htmlAutoCl:

; 1383 :         if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@htmlAutoCl
	mov	eax, DWORD PTR [eax+60]
	test	eax, eax
	je	SHORT $LN6@htmlAutoCl

; 1384 :             ctxt->sax->endElement(ctxt->userData, ctxt->name);

	push	DWORD PTR [esi+184]
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 8
$LN6@htmlAutoCl:

; 201  :     if (ctxt->nameNr <= 0)

	mov	ecx, DWORD PTR [esi+188]
	test	ecx, ecx
	jle	SHORT $LN2@htmlAutoCl

; 202  :         return (NULL);
; 203  :     ctxt->nameNr--;

	add	ecx, -1
	mov	DWORD PTR [esi+188], ecx

; 204  :     if (ctxt->nameNr < 0)

	js	SHORT $LN2@htmlAutoCl

; 205  :         return (NULL);
; 206  :     if (ctxt->nameNr > 0)

	test	ecx, ecx
	jle	SHORT $LN11@htmlAutoCl

; 207  :         ctxt->name = ctxt->nameTab[ctxt->nameNr - 1];

	mov	eax, DWORD PTR [esi+196]
	mov	eax, DWORD PTR [eax+ecx*4-4]
	jmp	SHORT $LN12@htmlAutoCl
$LN11@htmlAutoCl:

; 208  :     else
; 209  :         ctxt->name = NULL;

	xor	eax, eax
$LN12@htmlAutoCl:

; 210  :     ret = ctxt->nameTab[ctxt->nameNr];
; 211  :     ctxt->nameTab[ctxt->nameNr] = NULL;

	mov	DWORD PTR [esi+184], eax
	mov	eax, DWORD PTR [esi+196]
	mov	DWORD PTR [eax+ecx*4], 0
$LN2@htmlAutoCl:

; 1378 :     int i;
; 1379 : 
; 1380 :     if (ctxt->nameNr == 0)
; 1381 :         return;
; 1382 :     for (i = (ctxt->nameNr - 1); i >= 0; i--) {

	sub	edi, 1
	jns	SHORT $LL4@htmlAutoCl
$LN3@htmlAutoCl:
	pop	edi

; 1385 : 	htmlnamePop(ctxt);
; 1386 :     }
; 1387 : }

	pop	esi
	pop	ebp
	ret	0
_htmlAutoCloseOnEnd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlAutoCloseOnClose
_TEXT	SEGMENT
_priority$1$ = -4					; size = 4
_tag$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_newtag$ = 12						; size = 4
_htmlAutoCloseOnClose PROC				; COMDAT

; 1334 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _newtag$[ebp]
	push	ebx
	call	_htmlGetEndPriority
	mov	esi, DWORD PTR _ctxt$[ebp]
	add	esp, 4
	mov	DWORD PTR _priority$1$[ebp], eax
	mov	edi, DWORD PTR [esi+188]
	sub	edi, 1
	js	$LN6@htmlAutoCl
$LL4@htmlAutoCl:

; 1341 : 
; 1342 :         if (xmlStrEqual(newtag, ctxt->nameTab[i]))

	mov	eax, DWORD PTR [esi+196]
	push	DWORD PTR [eax+edi*4]
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@htmlAutoCl

; 1343 :             break;
; 1344 :         /*
; 1345 :          * A missplaced endtag can only close elements with lower
; 1346 :          * or equal priority, so if we find an element with higher
; 1347 :          * priority before we find an element with
; 1348 :          * matching name, we just ignore this endtag
; 1349 :          */
; 1350 :         if (htmlGetEndPriority(ctxt->nameTab[i]) > priority)

	mov	eax, DWORD PTR [esi+196]
	push	DWORD PTR [eax+edi*4]
	call	_htmlGetEndPriority
	add	esp, 4
	cmp	eax, DWORD PTR _priority$1$[ebp]
	jg	$LN6@htmlAutoCl

; 1335 :     const htmlElemDesc *info;
; 1336 :     int i, priority;
; 1337 : 
; 1338 :     priority = htmlGetEndPriority(newtag);
; 1339 : 
; 1340 :     for (i = (ctxt->nameNr - 1); i >= 0; i--) {

	sub	edi, 1
	jns	SHORT $LL4@htmlAutoCl

; 1365 : 	htmlnamePop(ctxt);
; 1366 :     }
; 1367 : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@htmlAutoCl:

; 1351 :             return;
; 1352 :     }
; 1353 :     if (i < 0)

	test	edi, edi
	js	$LN6@htmlAutoCl

; 1354 :         return;
; 1355 : 
; 1356 :     while (!xmlStrEqual(newtag, ctxt->name)) {

	push	DWORD PTR [esi+184]
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$LN6@htmlAutoCl
	npad	3
$LL5@htmlAutoCl:

; 1357 :         info = htmlTagLookup(ctxt->name);

	mov	eax, DWORD PTR [esi+184]

; 1258 :     for (i = 0; i < (sizeof(html40ElementTable) /

	xor	ebx, ebx

; 1357 :         info = htmlTagLookup(ctxt->name);

	mov	DWORD PTR _tag$1$[ebp], eax
	xor	edi, edi
	npad	3
$LL16@htmlAutoCl:

; 1260 :         if (!xmlStrcasecmp(tag, BAD_CAST html40ElementTable[i].name))

	push	DWORD PTR _html40ElementTable[edi]
	push	eax
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN35@htmlAutoCl

; 1259 :                      sizeof(html40ElementTable[0]));i++) {

	mov	eax, DWORD PTR _tag$1$[ebp]
	add	edi, 36					; 00000024H
	inc	ebx
	cmp	edi, 3312				; 00000cf0H
	jb	SHORT $LL16@htmlAutoCl
$LN46@htmlAutoCl:

; 1360 : 	                 "Opening and ending tag mismatch: %s and %s\n",
; 1361 : 			 newtag, ctxt->name);
; 1362 :         }
; 1363 :         if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))

	mov	ebx, DWORD PTR _newtag$[ebp]
$LN22@htmlAutoCl:
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN11@htmlAutoCl
	mov	eax, DWORD PTR [eax+60]
	test	eax, eax
	je	SHORT $LN11@htmlAutoCl

; 1364 :             ctxt->sax->endElement(ctxt->userData, ctxt->name);

	push	DWORD PTR [esi+184]
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 8
$LN11@htmlAutoCl:

; 201  :     if (ctxt->nameNr <= 0)

	mov	ecx, DWORD PTR [esi+188]
	test	ecx, ecx
	jle	$LN24@htmlAutoCl

; 202  :         return (NULL);
; 203  :     ctxt->nameNr--;

	add	ecx, -1
	mov	DWORD PTR [esi+188], ecx

; 204  :     if (ctxt->nameNr < 0)

	js	$LN24@htmlAutoCl

; 205  :         return (NULL);
; 206  :     if (ctxt->nameNr > 0)

	test	ecx, ecx
	jle	SHORT $LN27@htmlAutoCl

; 207  :         ctxt->name = ctxt->nameTab[ctxt->nameNr - 1];

	mov	eax, DWORD PTR [esi+196]
	mov	eax, DWORD PTR [eax+ecx*4-4]
	jmp	SHORT $LN28@htmlAutoCl
$LN35@htmlAutoCl:

; 1261 : 	    return((htmlElemDescPtr) &html40ElementTable[i]);

	lea	eax, DWORD PTR [ebx+ebx*8]
	lea	eax, DWORD PTR _html40ElementTable[eax*4]

; 1358 :         if ((info != NULL) && (info->endTag == 3)) {

	test	eax, eax
	je	SHORT $LN46@htmlAutoCl
	cmp	BYTE PTR [eax+5], 3
	jne	SHORT $LN46@htmlAutoCl

; 112  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR [esi+212], 0

; 1359 :             htmlParseErr(ctxt, XML_ERR_TAG_NAME_MISMATCH,

	mov	eax, DWORD PTR [esi+184]

; 112  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	je	SHORT $LN20@htmlAutoCl
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN46@htmlAutoCl
$LN20@htmlAutoCl:

; 113  :         (ctxt->instate == XML_PARSER_EOF))
; 114  : 	return;
; 115  :     if (ctxt != NULL)
; 116  : 	ctxt->errNo = error;
; 117  :     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_HTML, error,

	mov	ebx, DWORD PTR _newtag$[ebp]
	push	eax
	push	ebx
	push	OFFSET ??_C@_0CM@OHOANBCK@Opening?5and?5ending?5tag?5mismatch@
	push	0
	push	0
	push	0
	push	eax
	push	ebx
	push	0
	push	0
	push	2
	push	76					; 0000004cH
	push	5
	push	0
	push	esi
	push	0
	push	0
	push	0
	mov	DWORD PTR [esi+84], 76			; 0000004cH
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 118  :                     XML_ERR_ERROR, NULL, 0,
; 119  : 		    (const char *) str1, (const char *) str2,
; 120  : 		    NULL, 0, 0,
; 121  : 		    msg, str1, str2);
; 122  :     if (ctxt != NULL)
; 123  : 	ctxt->wellFormed = 0;

	mov	DWORD PTR [esi+12], 0
	jmp	$LN22@htmlAutoCl
$LN27@htmlAutoCl:

; 209  :         ctxt->name = NULL;

	xor	eax, eax
$LN28@htmlAutoCl:

; 210  :     ret = ctxt->nameTab[ctxt->nameNr];
; 211  :     ctxt->nameTab[ctxt->nameNr] = NULL;

	mov	DWORD PTR [esi+184], eax
	mov	eax, DWORD PTR [esi+196]
	mov	DWORD PTR [eax+ecx*4], 0
$LN24@htmlAutoCl:

; 1354 :         return;
; 1355 : 
; 1356 :     while (!xmlStrEqual(newtag, ctxt->name)) {

	push	DWORD PTR [esi+184]
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LL5@htmlAutoCl
$LN6@htmlAutoCl:
	pop	edi

; 1365 : 	htmlnamePop(ctxt);
; 1366 :     }
; 1367 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlAutoCloseOnClose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCheckAutoClose
_TEXT	SEGMENT
_newtag$ = 8						; size = 4
_oldtag$ = 12						; size = 4
_htmlCheckAutoClose PROC				; COMDAT

; 1297 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	cmp	DWORD PTR _htmlStartCloseIndexinitialized, 0
	jne	SHORT $LN7@htmlCheckA

; 1298 :     int i, indx;
; 1299 :     const char **closed = NULL;
; 1300 : 
; 1301 :     if (htmlStartCloseIndexinitialized == 0)
; 1302 :         htmlInitAutoClose();

	call	_htmlInitAutoClose
$LN7@htmlCheckA:
	push	ebx

; 1303 : 
; 1304 :     /* inefficient, but not a big deal */
; 1305 :     for (indx = 0; indx < 100; indx++) {

	mov	ebx, DWORD PTR _newtag$[ebp]
	push	esi
	push	edi
	mov	edi, OFFSET _htmlStartCloseIndex
$LL4@htmlCheckA:

; 1306 :         closed = htmlStartCloseIndex[indx];

	mov	esi, DWORD PTR [edi]

; 1307 :         if (closed == NULL)

	test	esi, esi
	je	SHORT $LN6@htmlCheckA

; 1308 :             return (0);
; 1309 :         if (xmlStrEqual(BAD_CAST * closed, newtag))

	push	ebx
	push	DWORD PTR [esi]
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@htmlCheckA

; 1303 : 
; 1304 :     /* inefficient, but not a big deal */
; 1305 :     for (indx = 0; indx < 100; indx++) {

	add	edi, 4
	cmp	edi, OFFSET _htmlStartCloseIndex+400
	jl	SHORT $LL4@htmlCheckA
$LN15@htmlCheckA:

; 1310 :             break;
; 1311 :     }
; 1312 : 
; 1313 :     i = closed - htmlStartClose;

	sub	esi, OFFSET _htmlStartClose
	sar	esi, 2

; 1314 :     i++;

	inc	esi

; 1315 :     while (htmlStartClose[i] != NULL) {

	mov	eax, DWORD PTR _htmlStartClose[esi*4]
	test	eax, eax
	je	SHORT $LN6@htmlCheckA
	mov	edi, DWORD PTR _oldtag$[ebp]
	npad	2
$LL5@htmlCheckA:

; 1316 :         if (xmlStrEqual(BAD_CAST htmlStartClose[i], oldtag)) {

	push	edi
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@htmlCheckA

; 1317 :             return (1);
; 1318 :         }
; 1319 :         i++;

	mov	eax, DWORD PTR _htmlStartClose[esi*4+4]
	inc	esi
	test	eax, eax
	jne	SHORT $LL5@htmlCheckA
$LN6@htmlCheckA:
	pop	edi

; 1320 :     }
; 1321 :     return (0);
; 1322 : }

	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
$LN16@htmlCheckA:
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
	pop	ebp
	ret	0
_htmlCheckAutoClose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlGetEndPriority
_TEXT	SEGMENT
_name$ = 8						; size = 4
_htmlGetEndPriority PROC				; COMDAT

; 1273 : htmlGetEndPriority (const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _htmlEndPriority
	xor	esi, esi
	test	eax, eax
	je	SHORT $LN9@htmlGetEnd
	push	edi
	mov	edi, DWORD PTR _name$[ebp]
	npad	3
$LL2@htmlGetEnd:

; 1274 :     int i = 0;
; 1275 : 
; 1276 :     while ((htmlEndPriority[i].name != NULL) &&

	push	edi
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@htmlGetEnd
	mov	eax, DWORD PTR _htmlEndPriority[esi*8+8]

; 1277 : 	   (!xmlStrEqual((const xmlChar *)htmlEndPriority[i].name, name)))
; 1278 : 	i++;

	inc	esi
	test	eax, eax
	jne	SHORT $LL2@htmlGetEnd
$LN10@htmlGetEnd:

; 1279 : 
; 1280 :     return(htmlEndPriority[i].priority);

	mov	eax, DWORD PTR _htmlEndPriority[esi*8+4]
	pop	edi
	pop	esi

; 1281 : }

	pop	ebp
	ret	0
$LN9@htmlGetEnd:

; 1279 : 
; 1280 :     return(htmlEndPriority[i].priority);

	mov	eax, DWORD PTR _htmlEndPriority[esi*8+4]
	pop	esi

; 1281 : }

	pop	ebp
	ret	0
_htmlGetEndPriority ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlSkipBlankChars
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlSkipBlankChars PROC				; COMDAT

; 575  : htmlSkipBlankChars(xmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	xor	edi, edi
$LL2@htmlSkipBl:

; 576  :     int res = 0;
; 577  : 
; 578  :     while (IS_BLANK_CH(*(ctxt->input->cur))) {

	mov	eax, DWORD PTR [esi+36]
	mov	ecx, DWORD PTR [eax+16]
	mov	cl, BYTE PTR [ecx]
	cmp	cl, 32					; 00000020H
	je	SHORT $LN4@htmlSkipBl
	cmp	cl, 9
	jb	SHORT $LN5@htmlSkipBl
	cmp	cl, 10					; 0000000aH
	jbe	SHORT $LN4@htmlSkipBl
$LN5@htmlSkipBl:
	cmp	cl, 13					; 0000000dH
	jne	SHORT $LN20@htmlSkipBl
$LN4@htmlSkipBl:

; 579  : 	if ((*ctxt->input->cur == 0) &&

	test	cl, cl
	jne	SHORT $LN15@htmlSkipBl
	push	250					; 000000faH
	push	eax
	call	_xmlParserInputGrow
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN17@htmlSkipBl

; 580  : 	    (xmlParserInputGrow(ctxt->input, INPUT_CHUNK) <= 0)) {
; 581  : 		xmlPopInput(ctxt);

	push	esi
	call	_xmlPopInput
	add	esp, 4

; 590  : 	}
; 591  : 	res++;

	inc	edi

; 592  :     }

	jmp	SHORT $LL2@htmlSkipBl
$LN17@htmlSkipBl:
	mov	eax, DWORD PTR [esi+36]
$LN15@htmlSkipBl:

; 582  : 	} else {
; 583  : 	    if (*(ctxt->input->cur) == '\n') {

	mov	ecx, DWORD PTR [eax+16]
	cmp	BYTE PTR [ecx], 10			; 0000000aH
	jne	SHORT $LN8@htmlSkipBl

; 584  : 		ctxt->input->line++; ctxt->input->col = 1;

	inc	DWORD PTR [eax+28]
	mov	eax, DWORD PTR [esi+36]
	mov	DWORD PTR [eax+32], 1
	jmp	SHORT $LN9@htmlSkipBl
$LN8@htmlSkipBl:

; 585  : 	    } else ctxt->input->col++;

	inc	DWORD PTR [eax+32]
$LN9@htmlSkipBl:

; 586  : 	    ctxt->input->cur++;

	mov	eax, DWORD PTR [esi+36]
	inc	DWORD PTR [eax+16]

; 587  : 	    ctxt->nbChars++;
; 588  : 	    if (*ctxt->input->cur == 0)

	mov	ecx, DWORD PTR [esi+36]
	inc	DWORD PTR [esi+200]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN10@htmlSkipBl

; 589  : 		xmlParserInputGrow(ctxt->input, INPUT_CHUNK);

	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN10@htmlSkipBl:

; 590  : 	}
; 591  : 	res++;

	inc	edi

; 592  :     }

	jmp	$LL2@htmlSkipBl
$LN20@htmlSkipBl:

; 593  :     return(res);

	mov	eax, edi
	pop	edi
	pop	esi

; 594  : }

	pop	ebp
	ret	0
_htmlSkipBlankChars ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCurrentChar
_TEXT	SEGMENT
_buffer$1 = -152					; size = 150
_ctxt$ = 8						; size = 4
_len$ = 12						; size = 4
_htmlCurrentChar PROC					; COMDAT

; 416  : htmlCurrentChar(xmlParserCtxtPtr ctxt, int *len) {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	mov	ecx, OFFSET __111E219E_htmlparser@c
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edi+172], -1
	jne	SHORT $LN2@htmlCurren

; 417  :     if (ctxt->instate == XML_PARSER_EOF)
; 418  : 	return(0);

	xor	eax, eax
	pop	edi

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@htmlCurren:

; 419  : 
; 420  :     if (ctxt->token != 0) {

	cmp	DWORD PTR [edi+176], 0
	je	SHORT $LN3@htmlCurren

; 421  : 	*len = 0;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 0

; 422  : 	return(ctxt->token);

	mov	eax, DWORD PTR [edi+176]
	pop	edi

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@htmlCurren:

; 423  :     }
; 424  :     if (ctxt->charset == XML_CHAR_ENCODING_UTF8) {

	cmp	DWORD PTR [edi+256], 1
	push	ebx
	push	esi
	jne	$LN6@htmlCurren

; 425  : 	/*
; 426  : 	 * We are supposed to handle UTF8, check it's valid
; 427  : 	 * From rfc2044: encoding of the Unicode values on UTF-8:
; 428  : 	 *
; 429  : 	 * UCS-4 range (hex.)           UTF-8 octet sequence (binary)
; 430  : 	 * 0000 0000-0000 007F   0xxxxxxx
; 431  : 	 * 0000 0080-0000 07FF   110xxxxx 10xxxxxx
; 432  : 	 * 0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx
; 433  : 	 *
; 434  : 	 * Check for the 0x110000 limit too
; 435  : 	 */
; 436  : 	const unsigned char *cur = ctxt->input->cur;

	mov	edx, DWORD PTR [edi+36]
	mov	ecx, DWORD PTR [edx+16]

; 437  : 	unsigned char c;
; 438  : 	unsigned int val;
; 439  : 
; 440  : 	c = *cur;

	mov	bl, BYTE PTR [ecx]

; 441  : 	if (c & 0x80) {

	test	bl, bl
	jns	$LN63@htmlCurren

; 442  : 	    if (cur[1] == 0) {

	cmp	BYTE PTR [ecx+1], 0
	jne	SHORT $LN7@htmlCurren

; 443  : 		xmlParserInputGrow(ctxt->input, INPUT_CHUNK);

	push	250					; 000000faH
	push	edx
	call	_xmlParserInputGrow

; 444  :                 cur = ctxt->input->cur;

	mov	edx, DWORD PTR [edi+36]
	add	esp, 8
	mov	ecx, DWORD PTR [edx+16]
$LN7@htmlCurren:

; 445  :             }
; 446  : 	    if ((cur[1] & 0xc0) != 0x80)

	mov	al, BYTE PTR [ecx+1]
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	$encoding_error$67

; 447  : 		goto encoding_error;
; 448  : 	    if ((c & 0xe0) == 0xe0) {

	mov	al, bl
	and	al, 224					; 000000e0H
	cmp	al, 224					; 000000e0H
	jne	$LN9@htmlCurren

; 449  : 
; 450  : 		if (cur[2] == 0) {

	cmp	BYTE PTR [ecx+2], 0
	mov	esi, edx
	jne	SHORT $LN11@htmlCurren

; 451  : 		    xmlParserInputGrow(ctxt->input, INPUT_CHUNK);

	push	250					; 000000faH
	push	edx
	call	_xmlParserInputGrow

; 452  :                     cur = ctxt->input->cur;

	mov	esi, DWORD PTR [edi+36]
	add	esp, 8
	mov	ecx, DWORD PTR [esi+16]
$LN11@htmlCurren:

; 453  :                 }
; 454  : 		if ((cur[2] & 0xc0) != 0x80)

	mov	al, BYTE PTR [ecx+2]
	mov	edx, esi
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	$encoding_error$67

; 455  : 		    goto encoding_error;
; 456  : 		if ((c & 0xf0) == 0xf0) {

	mov	al, bl
	and	al, 240					; 000000f0H
	cmp	al, 240					; 000000f0H
	jne	SHORT $LN13@htmlCurren

; 457  : 		    if (cur[3] == 0) {

	cmp	BYTE PTR [ecx+3], 0
	jne	SHORT $LN15@htmlCurren

; 458  : 			xmlParserInputGrow(ctxt->input, INPUT_CHUNK);

	push	250					; 000000faH
	push	esi
	call	_xmlParserInputGrow

; 459  :                         cur = ctxt->input->cur;

	mov	edx, DWORD PTR [edi+36]
	add	esp, 8
	mov	ecx, DWORD PTR [edx+16]
$LN15@htmlCurren:

; 460  :                     }
; 461  : 		    if (((c & 0xf8) != 0xf0) ||

	and	bl, 248					; 000000f8H
	cmp	bl, 240					; 000000f0H
	jne	$encoding_error$67
	mov	al, BYTE PTR [ecx+3]
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	$encoding_error$67

; 462  : 			((cur[3] & 0xc0) != 0x80))
; 463  : 			goto encoding_error;
; 464  : 		    /* 4-byte code */
; 465  : 		    *len = 4;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 4

; 466  : 		    val = (cur[0] & 0x7) << 18;
; 467  : 		    val |= (cur[1] & 0x3f) << 12;
; 468  : 		    val |= (cur[2] & 0x3f) << 6;
; 469  : 		    val |= cur[3] & 0x3f;

	movzx	esi, BYTE PTR [ecx]
	movzx	eax, BYTE PTR [ecx+1]
	and	esi, 7
	and	eax, 63					; 0000003fH
	shl	esi, 6
	or	esi, eax
	movzx	eax, BYTE PTR [ecx+2]
	and	eax, 63					; 0000003fH
	shl	esi, 6
	or	esi, eax
	movzx	eax, BYTE PTR [ecx+3]

; 470  : 		} else {

	jmp	SHORT $LN64@htmlCurren
$LN13@htmlCurren:

; 471  : 		  /* 3-byte code */
; 472  : 		    *len = 3;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 3

; 473  : 		    val = (cur[0] & 0xf) << 12;
; 474  : 		    val |= (cur[1] & 0x3f) << 6;
; 475  : 		    val |= cur[2] & 0x3f;

	movzx	esi, BYTE PTR [ecx]
	movzx	eax, BYTE PTR [ecx+1]
	and	esi, 15					; 0000000fH
	and	eax, 63					; 0000003fH
	shl	esi, 6
	or	esi, eax
	movzx	eax, BYTE PTR [ecx+2]

; 476  : 		}
; 477  : 	    } else {

	jmp	SHORT $LN64@htmlCurren
$LN9@htmlCurren:

; 478  : 	      /* 2-byte code */
; 479  : 		*len = 2;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 2

; 480  : 		val = (cur[0] & 0x1f) << 6;
; 481  : 		val |= cur[1] & 0x3f;

	movzx	esi, BYTE PTR [ecx]
	movzx	eax, BYTE PTR [ecx+1]
	and	esi, 31					; 0000001fH
$LN64@htmlCurren:

; 482  : 	    }
; 483  : 	    if (!IS_CHAR(val)) {

	and	eax, 63					; 0000003fH
	shl	esi, 6
	or	esi, eax
	cmp	esi, 256				; 00000100H
	jae	SHORT $LN37@htmlCurren
	cmp	esi, 9
	jb	SHORT $LN29@htmlCurren
	cmp	esi, 10					; 0000000aH
	jbe	SHORT $LN18@htmlCurren
$LN29@htmlCurren:
	cmp	esi, 13					; 0000000dH
	je	SHORT $LN18@htmlCurren
	cmp	esi, 32					; 00000020H
	jae	SHORT $LN18@htmlCurren
	jmp	SHORT $LN34@htmlCurren
$LN37@htmlCurren:
	cmp	esi, 55295				; 0000d7ffH
	jbe	SHORT $LN18@htmlCurren
	cmp	esi, 57344				; 0000e000H
	jb	SHORT $LN32@htmlCurren
	cmp	esi, 65533				; 0000fffdH
	jbe	SHORT $LN18@htmlCurren
$LN32@htmlCurren:
	lea	eax, DWORD PTR [esi-65536]
	cmp	eax, 1048575				; 000fffffH
	jbe	SHORT $LN18@htmlCurren
$LN34@htmlCurren:

; 484  : 	        htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,

	push	esi
	push	OFFSET ??_C@_0CA@EOJNGAKJ@Char?50x?$CFX?5out?5of?5allowed?5range?6@
	push	9
	push	edi
	call	_htmlParseErrInt
	add	esp, 16					; 00000010H
$LN18@htmlCurren:

; 485  : 				"Char 0x%X out of allowed range\n", val);
; 486  : 	    }
; 487  : 	    return(val);

	mov	eax, esi
	pop	esi
	pop	ebx
	pop	edi

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$encoding_error$67:

; 536  : 
; 537  : encoding_error:
; 538  :     /*
; 539  :      * If we detect an UTF8 error that probably mean that the
; 540  :      * input encoding didn't get properly advertized in the
; 541  :      * declaration header. Report the error and switch the encoding
; 542  :      * to ISO-Latin-1 (if you don't like this policy, just declare the
; 543  :      * encoding !)
; 544  :      */
; 545  :     {
; 546  :         char buffer[150];
; 547  : 
; 548  : 	if (ctxt->input->end - ctxt->input->cur >= 4) {

	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [edx+16]
	sub	eax, ecx
	cmp	eax, 4
	jl	SHORT $LN26@htmlCurren

; 549  : 	    snprintf(buffer, 149, "Bytes: 0x%02X 0x%02X 0x%02X 0x%02X\n",

	movzx	eax, BYTE PTR [ecx+3]
	push	eax
	movzx	eax, BYTE PTR [ecx+2]
	push	eax
	movzx	eax, BYTE PTR [ecx+1]
	push	eax
	movzx	eax, BYTE PTR [ecx]
	push	eax
	push	OFFSET ??_C@_0CE@KHMCMEAC@Bytes?3?50x?$CF02X?50x?$CF02X?50x?$CF02X?50x?$CF@
	lea	eax, DWORD PTR _buffer$1[ebp]
	push	149					; 00000095H
	push	eax
	call	_snprintf
	add	esp, 28					; 0000001cH

; 550  : 			    ctxt->input->cur[0], ctxt->input->cur[1],
; 551  : 			    ctxt->input->cur[2], ctxt->input->cur[3]);
; 552  : 	} else {

	jmp	SHORT $LN27@htmlCurren
$LN26@htmlCurren:

; 553  : 	    snprintf(buffer, 149, "Bytes: 0x%02X\n", ctxt->input->cur[0]);

	movzx	eax, BYTE PTR [ecx]
	push	eax
	push	OFFSET ??_C@_0P@DAFMJFMB@Bytes?3?50x?$CF02X?6@
	lea	eax, DWORD PTR _buffer$1[ebp]
	push	149					; 00000095H
	push	eax
	call	_snprintf
	add	esp, 16					; 00000010H
$LN27@htmlCurren:

; 554  : 	}
; 555  : 	htmlParseErr(ctxt, XML_ERR_INVALID_ENCODING,

	push	0
	lea	eax, DWORD PTR _buffer$1[ebp]
	push	eax
	push	OFFSET ??_C@_0DA@ICAIJAPJ@Input?5is?5not?5proper?5UTF?98?0?5indi@
	push	81					; 00000051H
	push	edi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 556  : 		     "Input is not proper UTF-8, indicate encoding !\n",
; 557  : 		     BAD_CAST buffer, NULL);
; 558  :     }
; 559  : 
; 560  :     ctxt->charset = XML_CHAR_ENCODING_8859_1;

	mov	DWORD PTR [edi+256], 10			; 0000000aH
$LN19@htmlCurren:

; 561  :     *len = 1;

	mov	eax, DWORD PTR _len$[ebp]
	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], 1

; 562  :     return((int) *ctxt->input->cur);

	mov	eax, DWORD PTR [edi+36]
	pop	edi
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax]

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN63@htmlCurren:

; 488  : 	} else {
; 489  :             if ((*ctxt->input->cur == 0) &&

	jne	SHORT $LN19@htmlCurren
	cmp	ecx, DWORD PTR [edx+20]
	jae	SHORT $LN19@htmlCurren

; 490  :                 (ctxt->input->cur < ctxt->input->end)) {
; 491  :                     htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,

	push	0
	push	OFFSET ??_C@_0CA@EOJNGAKJ@Char?50x?$CFX?5out?5of?5allowed?5range?6@
	push	9
	push	edi
	call	_htmlParseErrInt

; 492  : 				"Char 0x%X out of allowed range\n", 0);
; 493  :                 *len = 1;

	mov	eax, DWORD PTR _len$[ebp]
	add	esp, 16					; 00000010H
	pop	esi
	pop	ebx
	mov	DWORD PTR [eax], 1

; 494  :                 return(' ');

	mov	eax, 32					; 00000020H
	pop	edi

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@htmlCurren:

; 495  :             }
; 496  : 	    /* 1-byte code */
; 497  : 	    *len = 1;
; 498  : 	    return((int) *ctxt->input->cur);
; 499  : 	}
; 500  :     }
; 501  :     /*
; 502  :      * Assume it's a fixed length encoding (1) with
; 503  :      * a compatible encoding for the ASCII set, since
; 504  :      * XML constructs only use < 128 chars
; 505  :      */
; 506  :     *len = 1;

	mov	ebx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ebx], 1

; 507  :     if ((int) *ctxt->input->cur < 0x80)

	mov	eax, DWORD PTR [edi+36]
	mov	edx, DWORD PTR [eax+16]
	mov	cl, BYTE PTR [edx]
	cmp	cl, 128					; 00000080H
	jae	SHORT $LN20@htmlCurren

; 508  : 	return((int) *ctxt->input->cur);

	pop	esi
	pop	ebx
	movzx	eax, cl
	pop	edi

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@htmlCurren:

; 368  :         (ctxt->input->encoding != NULL) || (ctxt->input->buf == NULL) ||

	test	eax, eax
	je	$LN59@htmlCurren
	cmp	DWORD PTR [eax+44], 0
	jne	$LN59@htmlCurren
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	$LN59@htmlCurren
	cmp	DWORD PTR [ecx+12], 0
	jne	$LN59@htmlCurren

; 369  :         (ctxt->input->buf->encoder != NULL))
; 370  :         return(NULL);
; 371  :     if ((ctxt->input->cur == NULL) || (ctxt->input->end == NULL))

	test	edx, edx
	je	$LN59@htmlCurren
	mov	eax, DWORD PTR [eax+20]
	test	eax, eax
	je	$LN59@htmlCurren

; 372  :         return(NULL);
; 373  : 
; 374  :     start = ctxt->input->cur;
; 375  :     end = ctxt->input->end;
; 376  :     /* we also expect the input buffer to be zero terminated */
; 377  :     if (*end != 0)

	cmp	BYTE PTR [eax], 0
	jne	$LN59@htmlCurren

; 378  :         return(NULL);
; 379  : 
; 380  :     cur = xmlStrcasestr(start, BAD_CAST "HTTP-EQUIV");

	push	OFFSET ??_C@_0L@KJGBOFMC@HTTP?9EQUIV@
	push	edx
	call	_xmlStrcasestr
	add	esp, 8

; 381  :     if (cur == NULL)

	test	eax, eax
	je	$LN59@htmlCurren

; 382  :         return(NULL);
; 383  :     cur = xmlStrcasestr(cur, BAD_CAST  "CONTENT");

	push	OFFSET ??_C@_07HPFEHCIK@CONTENT@
	push	eax
	call	_xmlStrcasestr
	add	esp, 8

; 384  :     if (cur == NULL)

	test	eax, eax
	je	$LN59@htmlCurren

; 385  :         return(NULL);
; 386  :     cur = xmlStrcasestr(cur, BAD_CAST  "CHARSET=");

	push	OFFSET ??_C@_08HFIPAJDM@CHARSET?$DN@
	push	eax
	call	_xmlStrcasestr
	add	esp, 8

; 387  :     if (cur == NULL)

	test	eax, eax
	je	$LN59@htmlCurren

; 388  :         return(NULL);
; 389  :     cur += 8;

	add	eax, 8

; 390  :     start = cur;

	mov	edx, eax
	npad	3
$LL40@htmlCurren:

; 391  :     while (((*cur >= 'A') && (*cur <= 'Z')) ||
; 392  :            ((*cur >= 'a') && (*cur <= 'z')) ||
; 393  :            ((*cur >= '0') && (*cur <= '9')) ||
; 394  :            (*cur == '-') || (*cur == '_') || (*cur == ':') || (*cur == '/'))

	mov	cl, BYTE PTR [eax]
	cmp	cl, 65					; 00000041H
	jb	SHORT $LN51@htmlCurren
	cmp	cl, 90					; 0000005aH
	jbe	SHORT $LN50@htmlCurren
$LN51@htmlCurren:
	cmp	cl, 97					; 00000061H
	jb	SHORT $LN52@htmlCurren
	cmp	cl, 122					; 0000007aH
	jbe	SHORT $LN50@htmlCurren
$LN52@htmlCurren:
	cmp	cl, 48					; 00000030H
	jb	SHORT $LN53@htmlCurren
	cmp	cl, 57					; 00000039H
	jbe	SHORT $LN50@htmlCurren
$LN53@htmlCurren:
	cmp	cl, 45					; 0000002dH
	je	SHORT $LN50@htmlCurren
	cmp	cl, 95					; 0000005fH
	je	SHORT $LN50@htmlCurren
	cmp	cl, 58					; 0000003aH
	je	SHORT $LN50@htmlCurren
	cmp	cl, 47					; 0000002fH
	jne	SHORT $LN41@htmlCurren
$LN50@htmlCurren:

; 395  :            cur++;

	inc	eax
	jmp	SHORT $LL40@htmlCurren
$LN41@htmlCurren:

; 396  :     if (cur == start)

	cmp	eax, edx
	je	SHORT $LN59@htmlCurren

; 397  :         return(NULL);
; 398  :     return(xmlStrndup(start, cur - start));

	sub	eax, edx
	push	eax
	push	edx
	call	_xmlStrndup
	mov	esi, eax
	add	esp, 8

; 509  : 
; 510  :     /*
; 511  :      * Humm this is bad, do an automatic flow conversion
; 512  :      */
; 513  :     {
; 514  :         xmlChar * guess;
; 515  :         xmlCharEncodingHandlerPtr handler;
; 516  : 
; 517  :         guess = htmlFindEncoding(ctxt);
; 518  :         if (guess == NULL) {

	test	esi, esi
	je	SHORT $LN59@htmlCurren

; 520  :         } else {
; 521  :             if (ctxt->input->encoding != NULL)

	mov	eax, DWORD PTR [edi+36]
	mov	ecx, DWORD PTR [eax+44]
	test	ecx, ecx
	je	SHORT $LN23@htmlCurren

; 522  :                 xmlFree((xmlChar *) ctxt->input->encoding);

	push	ecx
	call	DWORD PTR _xmlFree
	mov	eax, DWORD PTR [edi+36]
	add	esp, 4
$LN23@htmlCurren:

; 523  :             ctxt->input->encoding = guess;
; 524  :             handler = xmlFindCharEncodingHandler((const char *) guess);

	push	esi
	mov	DWORD PTR [eax+44], esi
	call	_xmlFindCharEncodingHandler
	add	esp, 4

; 525  :             if (handler != NULL) {

	test	eax, eax
	je	SHORT $LN24@htmlCurren

; 526  :                 xmlSwitchToEncoding(ctxt, handler);

	push	eax
	push	edi
	call	_xmlSwitchToEncoding

; 527  :             } else {

	jmp	SHORT $LN65@htmlCurren
$LN24@htmlCurren:

; 528  :                 htmlParseErr(ctxt, XML_ERR_INVALID_ENCODING,

	push	0
	push	esi
	push	OFFSET ??_C@_0BI@PIALHHKN@Unsupported?5encoding?5?$CFs@
	push	81					; 00000051H
	push	edi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	jmp	SHORT $LN25@htmlCurren
$LN59@htmlCurren:

; 519  :             xmlSwitchEncoding(ctxt, XML_CHAR_ENCODING_8859_1);

	push	10					; 0000000aH
	push	edi
	call	_xmlSwitchEncoding
$LN65@htmlCurren:

; 529  :                              "Unsupported encoding %s", guess, NULL);
; 530  :             }
; 531  :         }
; 532  :         ctxt->charset = XML_CHAR_ENCODING_UTF8;

	add	esp, 8
$LN25@htmlCurren:

; 533  :     }
; 534  : 
; 535  :     return(xmlCurrentChar(ctxt, len));

	push	ebx
	push	edi
	mov	DWORD PTR [edi+256], 1
	call	_xmlCurrentChar
	add	esp, 8
	pop	esi
	pop	ebx
	pop	edi

; 563  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlCurrentChar ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlFindEncoding
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlFindEncoding PROC					; COMDAT

; 364  : htmlFindEncoding(xmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _ctxt$[ebp]
	test	eax, eax
	je	$LN5@htmlFindEn

; 365  :     const xmlChar *start, *cur, *end;
; 366  : 
; 367  :     if ((ctxt == NULL) || (ctxt->input == NULL) ||
; 368  :         (ctxt->input->encoding != NULL) || (ctxt->input->buf == NULL) ||

	mov	eax, DWORD PTR [eax+36]
	test	eax, eax
	je	$LN5@htmlFindEn
	cmp	DWORD PTR [eax+44], 0
	jne	$LN5@htmlFindEn
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	$LN5@htmlFindEn
	cmp	DWORD PTR [ecx+12], 0
	jne	$LN5@htmlFindEn

; 371  :     if ((ctxt->input->cur == NULL) || (ctxt->input->end == NULL))

	mov	ecx, DWORD PTR [eax+16]
	test	ecx, ecx
	je	$LN5@htmlFindEn
	mov	eax, DWORD PTR [eax+20]
	test	eax, eax
	je	$LN5@htmlFindEn

; 372  :         return(NULL);
; 373  : 
; 374  :     start = ctxt->input->cur;
; 375  :     end = ctxt->input->end;
; 376  :     /* we also expect the input buffer to be zero terminated */
; 377  :     if (*end != 0)

	cmp	BYTE PTR [eax], 0
	jne	$LN5@htmlFindEn

; 378  :         return(NULL);
; 379  : 
; 380  :     cur = xmlStrcasestr(start, BAD_CAST "HTTP-EQUIV");

	push	OFFSET ??_C@_0L@KJGBOFMC@HTTP?9EQUIV@
	push	ecx
	call	_xmlStrcasestr
	add	esp, 8

; 381  :     if (cur == NULL)

	test	eax, eax
	je	SHORT $LN5@htmlFindEn

; 382  :         return(NULL);
; 383  :     cur = xmlStrcasestr(cur, BAD_CAST  "CONTENT");

	push	OFFSET ??_C@_07HPFEHCIK@CONTENT@
	push	eax
	call	_xmlStrcasestr
	add	esp, 8

; 384  :     if (cur == NULL)

	test	eax, eax
	je	SHORT $LN5@htmlFindEn

; 385  :         return(NULL);
; 386  :     cur = xmlStrcasestr(cur, BAD_CAST  "CHARSET=");

	push	OFFSET ??_C@_08HFIPAJDM@CHARSET?$DN@
	push	eax
	call	_xmlStrcasestr
	add	esp, 8

; 387  :     if (cur == NULL)

	test	eax, eax
	je	SHORT $LN5@htmlFindEn

; 388  :         return(NULL);
; 389  :     cur += 8;

	add	eax, 8

; 390  :     start = cur;

	mov	edx, eax
	npad	5
$LL2@htmlFindEn:

; 391  :     while (((*cur >= 'A') && (*cur <= 'Z')) ||
; 392  :            ((*cur >= 'a') && (*cur <= 'z')) ||
; 393  :            ((*cur >= '0') && (*cur <= '9')) ||
; 394  :            (*cur == '-') || (*cur == '_') || (*cur == ':') || (*cur == '/'))

	mov	cl, BYTE PTR [eax]
	cmp	cl, 65					; 00000041H
	jb	SHORT $LN13@htmlFindEn
	cmp	cl, 90					; 0000005aH
	jbe	SHORT $LN12@htmlFindEn
$LN13@htmlFindEn:
	cmp	cl, 97					; 00000061H
	jb	SHORT $LN14@htmlFindEn
	cmp	cl, 122					; 0000007aH
	jbe	SHORT $LN12@htmlFindEn
$LN14@htmlFindEn:
	cmp	cl, 48					; 00000030H
	jb	SHORT $LN15@htmlFindEn
	cmp	cl, 57					; 00000039H
	jbe	SHORT $LN12@htmlFindEn
$LN15@htmlFindEn:
	cmp	cl, 45					; 0000002dH
	je	SHORT $LN12@htmlFindEn
	cmp	cl, 95					; 0000005fH
	je	SHORT $LN12@htmlFindEn
	cmp	cl, 58					; 0000003aH
	je	SHORT $LN12@htmlFindEn
	cmp	cl, 47					; 0000002fH
	jne	SHORT $LN3@htmlFindEn
$LN12@htmlFindEn:

; 395  :            cur++;

	inc	eax
	jmp	SHORT $LL2@htmlFindEn
$LN3@htmlFindEn:

; 396  :     if (cur == start)

	cmp	eax, edx
	je	SHORT $LN5@htmlFindEn

; 397  :         return(NULL);
; 398  :     return(xmlStrndup(start, cur - start));

	sub	eax, edx
	push	eax
	push	edx
	call	_xmlStrndup
	add	esp, 8

; 399  : }

	pop	ebp
	ret	0
$LN5@htmlFindEn:

; 369  :         (ctxt->input->buf->encoder != NULL))
; 370  :         return(NULL);

	xor	eax, eax

; 399  : }

	pop	ebp
	ret	0
_htmlFindEncoding ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlNodeInfoPop
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlNodeInfoPop PROC					; COMDAT

; 255  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+452]
	test	eax, eax
	jle	SHORT $LN7@htmlNodeIn

; 256  :     if (ctxt->nodeInfoNr <= 0)
; 257  :         return (NULL);
; 258  :     ctxt->nodeInfoNr--;

	add	eax, -1
	mov	DWORD PTR [edx+452], eax

; 259  :     if (ctxt->nodeInfoNr < 0)

	js	SHORT $LN7@htmlNodeIn

; 261  :     if (ctxt->nodeInfoNr > 0)

	test	eax, eax
	jle	SHORT $LN4@htmlNodeIn

; 262  :         ctxt->nodeInfo = &ctxt->nodeInfoTab[ctxt->nodeInfoNr - 1];

	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edx+460]
	lea	eax, DWORD PTR [eax+ecx*4]
	add	eax, -20				; ffffffecH
	jmp	SHORT $LN5@htmlNodeIn
$LN4@htmlNodeIn:

; 263  :     else
; 264  :         ctxt->nodeInfo = NULL;

	xor	eax, eax
$LN5@htmlNodeIn:

; 265  :     return &ctxt->nodeInfoTab[ctxt->nodeInfoNr];

	mov	DWORD PTR [edx+448], eax
	mov	eax, DWORD PTR [edx+452]
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [edx+460]
	lea	eax, DWORD PTR [eax+ecx*4]

; 266  : }

	pop	ebp
	ret	0
$LN7@htmlNodeIn:

; 260  :         return (NULL);

	xor	eax, eax

; 266  : }

	pop	ebp
	ret	0
_htmlNodeInfoPop ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlNodeInfoPush
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_value$ = 12						; size = 4
_htmlNodeInfoPush PROC					; COMDAT

; 226  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [esi+456]
	cmp	DWORD PTR [esi+452], eax
	jl	$LN14@htmlNodeIn

; 227  :     if (ctxt->nodeInfoNr >= ctxt->nodeInfoMax) {
; 228  :         if (ctxt->nodeInfoMax == 0)

	test	eax, eax
	mov	ecx, 5
	cmove	eax, ecx

; 229  :                 ctxt->nodeInfoMax = 5;
; 230  :         ctxt->nodeInfoMax *= 2;

	add	eax, eax
	mov	DWORD PTR [esi+456], eax

; 231  :         ctxt->nodeInfoTab = (htmlParserNodeInfo *)

	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 2
	push	eax
	push	DWORD PTR [esi+460]
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	mov	DWORD PTR [esi+460], eax

; 232  :                          xmlRealloc((htmlParserNodeInfo *)ctxt->nodeInfoTab,
; 233  :                                     ctxt->nodeInfoMax *
; 234  :                                     sizeof(ctxt->nodeInfoTab[0]));
; 235  :         if (ctxt->nodeInfoTab == NULL) {

	test	eax, eax
	jne	SHORT $LN14@htmlNodeIn

; 79   :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR [esi+212], eax
	je	SHORT $LN7@htmlNodeIn
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN10@htmlNodeIn
$LN7@htmlNodeIn:

; 80   :         (ctxt->instate == XML_PARSER_EOF))
; 81   : 	return;
; 82   :     if (ctxt != NULL) {
; 83   :         ctxt->errNo = XML_ERR_NO_MEMORY;
; 84   :         ctxt->instate = XML_PARSER_EOF;
; 85   :         ctxt->disableSAX = 1;
; 86   :     }
; 87   :     if (extra)
; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,
; 89   :                         XML_ERR_NO_MEMORY, XML_ERR_FATAL, NULL, 0, extra,
; 90   :                         NULL, NULL, 0, 0,
; 91   :                         "Memory allocation failed : %s\n", extra);
; 92   :     else
; 93   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	2
	push	1
	push	0
	push	esi
	push	0
	push	0
	push	0
	mov	DWORD PTR [esi+84], 2
	mov	DWORD PTR [esi+172], -1
	mov	DWORD PTR [esi+212], 1
	call	___xmlRaiseError
	add	esp, 64					; 00000040H
$LN10@htmlNodeIn:

; 236  :             htmlErrMemory(ctxt, NULL);
; 237  :             return (0);

	xor	eax, eax
	pop	esi

; 243  : }

	pop	ebp
	ret	0
$LN14@htmlNodeIn:

; 238  :         }
; 239  :     }
; 240  :     ctxt->nodeInfoTab[ctxt->nodeInfoNr] = *value;

	mov	eax, DWORD PTR [esi+452]
	lea	ecx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [esi+460]
	lea	ecx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _value$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax

; 241  :     ctxt->nodeInfo = &ctxt->nodeInfoTab[ctxt->nodeInfoNr];

	mov	eax, DWORD PTR [esi+452]
	mov	ecx, DWORD PTR [esi+460]
	lea	edx, DWORD PTR [eax+eax*4]
	lea	ecx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR [esi+448], ecx

; 242  :     return (ctxt->nodeInfoNr++);

	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+452], ecx
	pop	esi

; 243  : }

	pop	ebp
	ret	0
_htmlNodeInfoPush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlnamePop
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlnamePop PROC					; COMDAT

; 198  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [edx+188]
	test	ecx, ecx
	jle	SHORT $LN7@htmlnamePo

; 199  :     const xmlChar *ret;
; 200  : 
; 201  :     if (ctxt->nameNr <= 0)
; 202  :         return (NULL);
; 203  :     ctxt->nameNr--;

	add	ecx, -1
	mov	DWORD PTR [edx+188], ecx

; 204  :     if (ctxt->nameNr < 0)

	js	SHORT $LN7@htmlnamePo

; 206  :     if (ctxt->nameNr > 0)

	test	ecx, ecx
	jle	SHORT $LN4@htmlnamePo

; 207  :         ctxt->name = ctxt->nameTab[ctxt->nameNr - 1];

	mov	eax, DWORD PTR [edx+196]
	mov	eax, DWORD PTR [eax+ecx*4-4]
	jmp	SHORT $LN5@htmlnamePo
$LN4@htmlnamePo:

; 208  :     else
; 209  :         ctxt->name = NULL;

	xor	eax, eax
$LN5@htmlnamePo:

; 210  :     ret = ctxt->nameTab[ctxt->nameNr];

	mov	DWORD PTR [edx+184], eax
	mov	eax, DWORD PTR [edx+196]
	mov	edx, DWORD PTR [eax+ecx*4]

; 211  :     ctxt->nameTab[ctxt->nameNr] = NULL;

	mov	DWORD PTR [eax+ecx*4], 0

; 212  :     return (ret);

	mov	eax, edx

; 213  : }

	pop	ebp
	ret	0
$LN7@htmlnamePo:

; 205  :         return (NULL);

	xor	eax, eax

; 213  : }

	pop	ebp
	ret	0
_htmlnamePop ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlnamePush
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_value$ = 12						; size = 4
_htmlnamePush PROC					; COMDAT

; 168  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	edi, DWORD PTR _value$[ebp]
	cmp	DWORD PTR [esi+32], 3
	jge	SHORT $LN2@htmlnamePu

; 169  :     if ((ctxt->html < 3) && (xmlStrEqual(value, BAD_CAST "head")))

	push	OFFSET ??_C@_04NEODDMOL@head@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@htmlnamePu

; 170  :         ctxt->html = 3;

	mov	DWORD PTR [esi+32], 3
$LN2@htmlnamePu:

; 171  :     if ((ctxt->html < 10) && (xmlStrEqual(value, BAD_CAST "body")))

	cmp	DWORD PTR [esi+32], 10			; 0000000aH
	jge	SHORT $LN3@htmlnamePu
	push	OFFSET ??_C@_04IEJGKNJ@body@
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@htmlnamePu

; 172  :         ctxt->html = 10;

	mov	DWORD PTR [esi+32], 10			; 0000000aH
$LN3@htmlnamePu:

; 173  :     if (ctxt->nameNr >= ctxt->nameMax) {

	mov	eax, DWORD PTR [esi+192]
	cmp	DWORD PTR [esi+188], eax
	jl	$LN15@htmlnamePu

; 174  :         ctxt->nameMax *= 2;

	add	eax, eax
	mov	DWORD PTR [esi+192], eax

; 175  :         ctxt->nameTab = (const xmlChar * *)

	shl	eax, 2
	push	eax
	push	DWORD PTR [esi+196]
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	mov	DWORD PTR [esi+196], eax

; 176  :                          xmlRealloc((xmlChar * *)ctxt->nameTab,
; 177  :                                     ctxt->nameMax *
; 178  :                                     sizeof(ctxt->nameTab[0]));
; 179  :         if (ctxt->nameTab == NULL) {

	test	eax, eax
	jne	SHORT $LN15@htmlnamePu

; 79   :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR [esi+212], eax
	je	SHORT $LN8@htmlnamePu
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN11@htmlnamePu
$LN8@htmlnamePu:

; 80   :         (ctxt->instate == XML_PARSER_EOF))
; 81   : 	return;
; 82   :     if (ctxt != NULL) {
; 83   :         ctxt->errNo = XML_ERR_NO_MEMORY;
; 84   :         ctxt->instate = XML_PARSER_EOF;
; 85   :         ctxt->disableSAX = 1;
; 86   :     }
; 87   :     if (extra)
; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,
; 89   :                         XML_ERR_NO_MEMORY, XML_ERR_FATAL, NULL, 0, extra,
; 90   :                         NULL, NULL, 0, 0,
; 91   :                         "Memory allocation failed : %s\n", extra);
; 92   :     else
; 93   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	2
	push	1
	push	0
	push	esi
	push	0
	push	0
	push	0
	mov	DWORD PTR [esi+84], 2
	mov	DWORD PTR [esi+172], -1
	mov	DWORD PTR [esi+212], 1
	call	___xmlRaiseError
	add	esp, 64					; 00000040H
$LN11@htmlnamePu:
	pop	edi

; 180  :             htmlErrMemory(ctxt, NULL);
; 181  :             return (0);

	xor	eax, eax

; 187  : }

	pop	esi
	pop	ebp
	ret	0
$LN15@htmlnamePu:

; 182  :         }
; 183  :     }
; 184  :     ctxt->nameTab[ctxt->nameNr] = value;

	mov	ecx, DWORD PTR [esi+188]
	mov	eax, DWORD PTR [esi+196]
	mov	DWORD PTR [eax+ecx*4], edi

; 185  :     ctxt->name = value;
; 186  :     return (ctxt->nameNr++);

	mov	eax, DWORD PTR [esi+188]
	mov	DWORD PTR [esi+184], edi
	pop	edi
	lea	ecx, DWORD PTR [eax+1]
	mov	DWORD PTR [esi+188], ecx

; 187  : }

	pop	esi
	pop	ebp
	ret	0
_htmlnamePush ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseErrInt
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_val$ = 20						; size = 4
_htmlParseErrInt PROC					; COMDAT

; 138  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	test	esi, esi
	je	SHORT $LN3@htmlParseE

; 139  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR [esi+212], 0
	je	SHORT $LN2@htmlParseE
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN4@htmlParseE
$LN2@htmlParseE:

; 140  :         (ctxt->instate == XML_PARSER_EOF))
; 141  : 	return;
; 142  :     if (ctxt != NULL)
; 143  : 	ctxt->errNo = error;

	mov	DWORD PTR [esi+84], ecx
$LN3@htmlParseE:

; 144  :     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_HTML, error,

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	push	DWORD PTR _msg$[ebp]
	push	0
	push	eax
	push	0
	push	0
	push	0
	push	0
	push	0
	push	2
	push	ecx
	push	5
	push	0
	push	esi
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 145  :                     XML_ERR_ERROR, NULL, 0, NULL, NULL,
; 146  : 		    NULL, val, 0, msg, val);
; 147  :     if (ctxt != NULL)

	test	esi, esi
	je	SHORT $LN4@htmlParseE

; 148  : 	ctxt->wellFormed = 0;

	mov	DWORD PTR [esi+12], 0
$LN4@htmlParseE:
	pop	esi

; 149  : }

	pop	ebp
	ret	0
_htmlParseErrInt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseErr
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_str1$ = 20						; size = 4
_str2$ = 24						; size = 4
_htmlParseErr PROC					; COMDAT

; 111  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _error$[ebp]
	test	esi, esi
	je	SHORT $LN3@htmlParseE

; 112  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR [esi+212], 0
	je	SHORT $LN2@htmlParseE
	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN4@htmlParseE
$LN2@htmlParseE:

; 113  :         (ctxt->instate == XML_PARSER_EOF))
; 114  : 	return;
; 115  :     if (ctxt != NULL)
; 116  : 	ctxt->errNo = error;

	mov	DWORD PTR [esi+84], edx
$LN3@htmlParseE:

; 117  :     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_HTML, error,

	mov	ecx, DWORD PTR _str2$[ebp]
	mov	eax, DWORD PTR _str1$[ebp]
	push	ecx
	push	eax
	push	DWORD PTR _msg$[ebp]
	push	0
	push	0
	push	0
	push	ecx
	push	eax
	push	0
	push	0
	push	2
	push	edx
	push	5
	push	0
	push	esi
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 118  :                     XML_ERR_ERROR, NULL, 0,
; 119  : 		    (const char *) str1, (const char *) str2,
; 120  : 		    NULL, 0, 0,
; 121  : 		    msg, str1, str2);
; 122  :     if (ctxt != NULL)

	test	esi, esi
	je	SHORT $LN4@htmlParseE

; 123  : 	ctxt->wellFormed = 0;

	mov	DWORD PTR [esi+12], 0
$LN4@htmlParseE:
	pop	esi

; 124  : }

	pop	ebp
	ret	0
_htmlParseErr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlErrMemory
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_extra$ = 12						; size = 4
_htmlErrMemory PROC					; COMDAT

; 78   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _ctxt$[ebp]
	test	eax, eax
	je	SHORT $LN3@htmlErrMem

; 79   :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN2@htmlErrMem
	cmp	DWORD PTR [eax+172], -1
	je	SHORT $LN5@htmlErrMem
$LN2@htmlErrMem:

; 80   :         (ctxt->instate == XML_PARSER_EOF))
; 81   : 	return;
; 82   :     if (ctxt != NULL) {
; 83   :         ctxt->errNo = XML_ERR_NO_MEMORY;

	mov	DWORD PTR [eax+84], 2

; 84   :         ctxt->instate = XML_PARSER_EOF;

	mov	DWORD PTR [eax+172], -1

; 85   :         ctxt->disableSAX = 1;

	mov	DWORD PTR [eax+212], 1
$LN3@htmlErrMem:

; 86   :     }
; 87   :     if (extra)

	mov	ecx, DWORD PTR _extra$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@htmlErrMem

; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	ecx
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	push	ecx
	push	0
	push	0
	push	3
	push	2
	push	1
	push	0
	push	eax
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 94   :                         XML_ERR_NO_MEMORY, XML_ERR_FATAL, NULL, 0, NULL,
; 95   :                         NULL, NULL, 0, 0, "Memory allocation failed\n");
; 96   : }

	pop	ebp
	ret	0
$LN4@htmlErrMem:

; 89   :                         XML_ERR_NO_MEMORY, XML_ERR_FATAL, NULL, 0, extra,
; 90   :                         NULL, NULL, 0, 0,
; 91   :                         "Memory allocation failed : %s\n", extra);
; 92   :     else
; 93   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	2
	push	1
	push	0
	push	eax
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 64					; 00000040H
$LN5@htmlErrMem:

; 94   :                         XML_ERR_NO_MEMORY, XML_ERR_FATAL, NULL, 0, NULL,
; 95   :                         NULL, NULL, 0, 0, "Memory allocation failed\n");
; 96   : }

	pop	ebp
	ret	0
_htmlErrMemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseComment
_TEXT	SEGMENT
_state$1$ = -28						; size = 4
_size$1$ = -24						; size = 4
_rl$ = -20						; size = 4
_r$1$ = -16						; size = 4
_ql$ = -12						; size = 4
_l$ = -8						; size = 4
_buf$1$ = -4						; size = 4
_len$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseComment PROC					; COMDAT

; 3290 : htmlParseComment(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR _size$1$[ebp], 100		; 00000064H
	cmp	DWORD PTR [edi+176], 0
	jne	$LN14@htmlParseC

; 3291 :     xmlChar *buf = NULL;
; 3292 :     int len;
; 3293 :     int size = HTML_PARSER_BUFFER_SIZE;
; 3294 :     int q, ql;
; 3295 :     int r, rl;
; 3296 :     int cur, l;
; 3297 :     xmlParserInputState state;
; 3298 : 
; 3299 :     /*
; 3300 :      * Check that there is a comment right here.
; 3301 :      */
; 3302 :     if ((RAW != '<') || (NXT(1) != '!') ||
; 3303 :         (NXT(2) != '-') || (NXT(3) != '-')) return;

	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	$LN14@htmlParseC
	cmp	BYTE PTR [eax+1], 33			; 00000021H
	jne	$LN14@htmlParseC
	cmp	BYTE PTR [eax+2], 45			; 0000002dH
	jne	$LN14@htmlParseC
	cmp	BYTE PTR [eax+3], 45			; 0000002dH
	jne	$LN14@htmlParseC

; 3304 : 
; 3305 :     state = ctxt->instate;

	push	ebx
	mov	ebx, DWORD PTR [edi+172]

; 3306 :     ctxt->instate = XML_PARSER_COMMENT;
; 3307 :     SHRINK;

	mov	edx, ecx
	mov	DWORD PTR [edi+172], 5
	push	esi
	mov	esi, DWORD PTR [ecx+16]
	mov	eax, esi
	sub	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _state$1$[ebp], ebx
	cmp	eax, 500				; 000001f4H
	jle	SHORT $LN15@htmlParseC
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, esi
	cmp	eax, 500				; 000001f4H
	jge	SHORT $LN15@htmlParseC
	push	ecx
	call	_xmlParserInputShrink
	mov	edx, DWORD PTR [edi+36]
	add	esp, 4
$LN15@htmlParseC:

; 3308 :     SKIP(4);

	add	DWORD PTR [edi+200], 4
	add	DWORD PTR [edx+16], 4
	mov	eax, DWORD PTR [edi+36]

; 3309 :     buf = (xmlChar *) xmlMallocAtomic(size * sizeof(xmlChar));

	push	100					; 00000064H
	add	DWORD PTR [eax+32], 4
	call	DWORD PTR _xmlMallocAtomic
	mov	ecx, eax
	add	esp, 4
	mov	DWORD PTR _buf$1$[ebp], ecx

; 3310 :     if (buf == NULL) {

	test	ecx, ecx
	jne	SHORT $LN16@htmlParseC

; 3311 :         htmlErrMemory(ctxt, "buffer allocation failed\n");

	push	OFFSET ??_C@_0BK@LKGAKEEM@buffer?5allocation?5failed?6@
	push	edi
	call	_htmlErrMemory
	add	esp, 8

; 3312 : 	ctxt->instate = state;

	mov	DWORD PTR [edi+172], ebx
	pop	esi
	pop	ebx
	pop	edi

; 3370 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@htmlParseC:

; 3313 : 	return;
; 3314 :     }
; 3315 :     len = 0;

	xor	eax, eax
	mov	DWORD PTR _len$1$[ebp], eax

; 3316 :     buf[len] = 0;

	mov	BYTE PTR [ecx], al

; 3317 :     q = CUR_CHAR(ql);

	lea	eax, DWORD PTR _ql$[ebp]
	push	eax
	push	edi
	call	_htmlCurrentChar
	mov	ebx, eax
	add	esp, 8

; 3318 :     if (!IS_CHAR(q))

	cmp	ebx, 256				; 00000100H
	jge	SHORT $LN82@htmlParseC
	cmp	ebx, 9
	jl	SHORT $LN38@htmlParseC
	cmp	ebx, 10					; 0000000aH
	jle	SHORT $LN83@htmlParseC
$LN38@htmlParseC:
	cmp	ebx, 13					; 0000000dH
	je	SHORT $LN83@htmlParseC
	cmp	ebx, 32					; 00000020H
	jge	SHORT $LN83@htmlParseC
	jmp	$unfinished$93
$LN82@htmlParseC:
	cmp	ebx, 55295				; 0000d7ffH
	jle	SHORT $LN83@htmlParseC
	cmp	ebx, 57344				; 0000e000H
	jl	SHORT $LN41@htmlParseC
	cmp	ebx, 65533				; 0000fffdH
	jle	SHORT $LN83@htmlParseC
$LN41@htmlParseC:
	cmp	ebx, 65536				; 00010000H
	jl	$unfinished$93
	cmp	ebx, 1114111				; 0010ffffH
	jg	$unfinished$93
$LN83@htmlParseC:

; 3319 :         goto unfinished;
; 3320 :     NEXTL(ql);

	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $LN18@htmlParseC
	inc	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [eax+32], 1
	jmp	SHORT $LN19@htmlParseC
$LN18@htmlParseC:
	inc	DWORD PTR [ecx+32]
$LN19@htmlParseC:
	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR _ql$[ebp]
	mov	DWORD PTR [edi+176], 0
	add	DWORD PTR [ecx+16], eax

; 3321 :     r = CUR_CHAR(rl);

	lea	eax, DWORD PTR _rl$[ebp]
	inc	DWORD PTR [edi+200]
	push	eax
	push	edi
	call	_htmlCurrentChar
	add	esp, 8
	mov	DWORD PTR _r$1$[ebp], eax

; 3322 :     if (!IS_CHAR(r))

	cmp	eax, 256				; 00000100H
	jge	SHORT $LN56@htmlParseC
	cmp	eax, 9
	jl	SHORT $LN48@htmlParseC
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN84@htmlParseC
$LN48@htmlParseC:
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN84@htmlParseC
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN84@htmlParseC
	jmp	$unfinished$93
$LN56@htmlParseC:
	cmp	eax, 55295				; 0000d7ffH
	jle	SHORT $LN84@htmlParseC
	cmp	eax, 57344				; 0000e000H
	jl	SHORT $LN51@htmlParseC
	cmp	eax, 65533				; 0000fffdH
	jle	SHORT $LN84@htmlParseC
$LN51@htmlParseC:
	add	eax, -65536				; ffff0000H
	cmp	eax, 1048575				; 000fffffH
	ja	$unfinished$93
$LN84@htmlParseC:

; 3323 :         goto unfinished;
; 3324 :     NEXTL(rl);

	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $LN21@htmlParseC
	inc	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [eax+32], 1
	jmp	SHORT $LN22@htmlParseC
$LN21@htmlParseC:
	inc	DWORD PTR [ecx+32]
$LN22@htmlParseC:
	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR _rl$[ebp]
	mov	DWORD PTR [edi+176], 0
	add	DWORD PTR [ecx+16], eax
	inc	DWORD PTR [edi+200]
$LN32@htmlParseC:

; 3325 :     cur = CUR_CHAR(l);
; 3326 :     while (IS_CHAR(cur) &&

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	push	edi
	call	_htmlCurrentChar
	mov	esi, eax
	add	esp, 8
	npad	5
$LL8@htmlParseC:
	cmp	esi, 256				; 00000100H
	jge	$LN66@htmlParseC
	cmp	esi, 9
	jl	SHORT $LN58@htmlParseC
	cmp	esi, 10					; 0000000aH
	jle	$LN62@htmlParseC
$LN58@htmlParseC:
	cmp	esi, 13					; 0000000dH
	je	$LN62@htmlParseC
	cmp	esi, 32					; 00000020H
	jge	$LN62@htmlParseC
$LN9@htmlParseC:

; 3355 :     buf[len] = 0;

	mov	eax, DWORD PTR _len$1$[ebp]
	mov	ebx, DWORD PTR _buf$1$[ebp]
	mov	BYTE PTR [eax+ebx], 0

; 3356 :     if (IS_CHAR(cur)) {

	cmp	esi, 256				; 00000100H
	jge	$LN76@htmlParseC
	cmp	esi, 9
	jl	SHORT $LN68@htmlParseC
	cmp	esi, 10					; 0000000aH
	jle	SHORT $LN86@htmlParseC
$LN68@htmlParseC:
	cmp	esi, 13					; 0000000dH
	je	SHORT $LN86@htmlParseC
	cmp	esi, 32					; 00000020H
	jl	$unfinished$93
$LN86@htmlParseC:

; 3357 :         NEXT;

	push	edi
	call	_xmlNextChar

; 3358 : 	if ((ctxt->sax != NULL) && (ctxt->sax->comment != NULL) &&

	mov	eax, DWORD PTR [edi]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN34@htmlParseC
	mov	eax, DWORD PTR [eax+80]
	test	eax, eax
	je	SHORT $LN34@htmlParseC
	cmp	DWORD PTR [edi+212], 0
	jne	SHORT $LN34@htmlParseC

; 3359 : 	    (!ctxt->disableSAX))
; 3360 : 	    ctxt->sax->comment(ctxt->userData, buf);

	push	ebx
	push	DWORD PTR [edi+4]
	call	eax
	add	esp, 8
$LN34@htmlParseC:

; 3361 : 	xmlFree(buf);

	push	ebx
	call	DWORD PTR _xmlFree
	mov	eax, DWORD PTR _state$1$[ebp]
	add	esp, 4
	mov	DWORD PTR [edi+172], eax
	pop	esi
	pop	ebx
	pop	edi

; 3370 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN66@htmlParseC:

; 3325 :     cur = CUR_CHAR(l);
; 3326 :     while (IS_CHAR(cur) &&

	cmp	esi, 55295				; 0000d7ffH
	jle	SHORT $LN62@htmlParseC
	cmp	esi, 57344				; 0000e000H
	jl	SHORT $LN61@htmlParseC
	cmp	esi, 65533				; 0000fffdH
	jle	SHORT $LN62@htmlParseC
$LN61@htmlParseC:
	lea	eax, DWORD PTR [esi-65536]
	cmp	eax, 1048575				; 000fffffH
	ja	$LN9@htmlParseC
$LN62@htmlParseC:
	cmp	esi, 62					; 0000003eH
	jne	SHORT $LN23@htmlParseC
	cmp	DWORD PTR _r$1$[ebp], 45		; 0000002dH
	jne	SHORT $LN23@htmlParseC
	cmp	ebx, 45					; 0000002dH
	je	$LN9@htmlParseC
$LN23@htmlParseC:

; 3327 :            ((cur != '>') ||
; 3328 : 	    (r != '-') || (q != '-'))) {
; 3329 : 	if (len + 5 >= size) {

	mov	edx, DWORD PTR _len$1$[ebp]
	mov	ecx, DWORD PTR _size$1$[ebp]
	lea	eax, DWORD PTR [edx+5]
	cmp	eax, ecx
	jl	SHORT $LN88@htmlParseC

; 3330 : 	    xmlChar *tmp;
; 3331 : 
; 3332 : 	    size *= 2;

	add	ecx, ecx

; 3333 : 	    tmp = (xmlChar *) xmlRealloc(buf, size * sizeof(xmlChar));

	push	ecx
	push	DWORD PTR _buf$1$[ebp]
	mov	DWORD PTR _size$1$[ebp], ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8

; 3334 : 	    if (tmp == NULL) {

	test	eax, eax
	je	$LN79@htmlParseC

; 3338 : 		return;
; 3339 : 	    }
; 3340 : 	    buf = tmp;

	mov	edx, DWORD PTR _len$1$[ebp]
	mov	DWORD PTR _buf$1$[ebp], eax
	jmp	SHORT $LN24@htmlParseC
$LN88@htmlParseC:

; 3327 :            ((cur != '>') ||
; 3328 : 	    (r != '-') || (q != '-'))) {
; 3329 : 	if (len + 5 >= size) {

	mov	eax, DWORD PTR _buf$1$[ebp]
$LN24@htmlParseC:

; 3341 : 	}
; 3342 : 	COPY_BUF(ql,buf,len,q);

	mov	ecx, DWORD PTR _ql$[ebp]
	add	eax, edx
	cmp	ecx, 1
	jne	SHORT $LN26@htmlParseC
	inc	edx
	mov	BYTE PTR [eax], bl
	mov	DWORD PTR _len$1$[ebp], edx
	jmp	SHORT $LN27@htmlParseC
$LN26@htmlParseC:
	push	ebx
	push	eax
	push	ecx
	call	_xmlCopyChar
	add	esp, 12					; 0000000cH
	add	DWORD PTR _len$1$[ebp], eax
$LN27@htmlParseC:

; 3343 : 	q = r;
; 3344 : 	ql = rl;

	mov	eax, DWORD PTR _rl$[ebp]

; 3345 : 	r = cur;
; 3346 : 	rl = l;
; 3347 : 	NEXTL(l);

	mov	ecx, DWORD PTR [edi+36]
	mov	ebx, DWORD PTR _r$1$[ebp]
	mov	DWORD PTR _ql$[ebp], eax
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR _rl$[ebp], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _r$1$[ebp], esi
	cmp	BYTE PTR [eax], 10			; 0000000aH
	jne	SHORT $LN28@htmlParseC
	inc	DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edi+36]
	mov	DWORD PTR [eax+32], 1
	jmp	SHORT $LN29@htmlParseC
$LN28@htmlParseC:
	inc	DWORD PTR [ecx+32]
$LN29@htmlParseC:
	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR [edi+176], 0
	add	DWORD PTR [ecx+16], eax

; 3348 : 	cur = CUR_CHAR(l);

	lea	eax, DWORD PTR _l$[ebp]
	inc	DWORD PTR [edi+200]
	push	eax
	push	edi
	call	_htmlCurrentChar
	mov	esi, eax
	add	esp, 8

; 3349 : 	if (cur == 0) {

	test	esi, esi
	jne	$LL8@htmlParseC

; 3350 : 	    SHRINK;

	mov	ecx, DWORD PTR [edi+36]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, edx
	sub	eax, DWORD PTR [ecx+12]
	cmp	eax, 500				; 000001f4H
	jle	SHORT $LN31@htmlParseC
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, edx
	cmp	eax, 500				; 000001f4H
	jge	SHORT $LN31@htmlParseC
	push	ecx
	call	_xmlParserInputShrink
	add	esp, 4
$LN31@htmlParseC:

; 3351 : 	    GROW;

	cmp	DWORD PTR [edi+292], 0
	jne	$LN32@htmlParseC
	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	$LN32@htmlParseC
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8

; 3352 : 	    cur = CUR_CHAR(l);
; 3353 : 	}
; 3354 :     }

	jmp	$LN32@htmlParseC
$LN76@htmlParseC:

; 3356 :     if (IS_CHAR(cur)) {

	cmp	esi, 55295				; 0000d7ffH
	jle	$LN86@htmlParseC
	cmp	esi, 57344				; 0000e000H
	jl	SHORT $LN71@htmlParseC
	cmp	esi, 65533				; 0000fffdH
	jle	$LN86@htmlParseC
$LN71@htmlParseC:
	lea	eax, DWORD PTR [esi-65536]
	cmp	eax, 1048575				; 000fffffH
	jbe	$LN86@htmlParseC
$unfinished$93:

; 3362 : 	ctxt->instate = state;
; 3363 : 	return;
; 3364 :     }
; 3365 : 
; 3366 : unfinished:
; 3367 :     htmlParseErr(ctxt, XML_ERR_COMMENT_NOT_FINISHED,

	mov	esi, DWORD PTR _buf$1$[ebp]
	push	0
	push	esi
	push	OFFSET ??_C@_0CD@MHPLKFMN@Comment?5not?5terminated?5?6?$DM?$CB?9?9?$CF?45@
	push	45					; 0000002dH
	push	edi
	call	_htmlParseErr

; 3368 : 		 "Comment not terminated \n<!--%.50s\n", buf, NULL);
; 3369 :     xmlFree(buf);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 24					; 00000018H
	pop	esi
	pop	ebx
	pop	edi

; 3370 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN79@htmlParseC:

; 3335 : 	        xmlFree(buf);

	push	DWORD PTR _buf$1$[ebp]
	call	DWORD PTR _xmlFree

; 3336 : 	        htmlErrMemory(ctxt, "growing buffer failed\n");

	push	OFFSET ??_C@_0BH@HKBCFNGN@growing?5buffer?5failed?6@
	push	edi
	call	_htmlErrMemory

; 3337 : 		ctxt->instate = state;

	mov	eax, DWORD PTR _state$1$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR [edi+172], eax
	pop	esi
	pop	ebx
$LN14@htmlParseC:
	pop	edi

; 3370 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseComment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlNewDocNoDtD
_TEXT	SEGMENT
_URI$ = 8						; size = 4
_ExternalID$ = 12					; size = 4
_htmlNewDocNoDtD PROC					; COMDAT

; 2310 : htmlNewDocNoDtD(const xmlChar *URI, const xmlChar *ExternalID) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	push	96					; 00000060H
	call	DWORD PTR _xmlMalloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN2@htmlNewDoc

; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0BP@NIBPLFNK@HTML?5document?5creation?5failed?6@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	eax
	push	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_0BP@NIBPLFNK@HTML?5document?5creation?5failed?6@
	push	eax
	push	eax
	push	3
	push	2
	push	1
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 2311 :     xmlDocPtr cur;
; 2312 : 
; 2313 :     /*
; 2314 :      * Allocate a new document and fill the fields.
; 2315 :      */
; 2316 :     cur = (xmlDocPtr) xmlMalloc(sizeof(xmlDoc));
; 2317 :     if (cur == NULL) {
; 2318 : 	htmlErrMemory(NULL, "HTML document creation failed\n");
; 2319 : 	return(NULL);

	xor	eax, eax
	pop	esi

; 2343 : }

	pop	ebp
	ret	0
$LN2@htmlNewDoc:

; 2320 :     }
; 2321 :     memset(cur, 0, sizeof(xmlDoc));
; 2322 : 
; 2323 :     cur->type = XML_HTML_DOCUMENT_NODE;
; 2324 :     cur->version = NULL;
; 2325 :     cur->intSubset = NULL;
; 2326 :     cur->doc = cur;
; 2327 :     cur->name = NULL;
; 2328 :     cur->children = NULL;
; 2329 :     cur->extSubset = NULL;
; 2330 :     cur->oldNs = NULL;
; 2331 :     cur->encoding = NULL;
; 2332 :     cur->standalone = 1;
; 2333 :     cur->compression = 0;
; 2334 :     cur->ids = NULL;
; 2335 :     cur->refs = NULL;
; 2336 :     cur->_private = NULL;
; 2337 :     cur->charset = XML_CHAR_ENCODING_UTF8;
; 2338 :     cur->properties = XML_DOC_HTML | XML_DOC_USERBUILT;
; 2339 :     if ((ExternalID != NULL) ||

	mov	ecx, DWORD PTR _ExternalID$[ebp]
	xorps	xmm0, xmm0
	mov	eax, DWORD PTR _URI$[ebp]
	movups	XMMWORD PTR [esi+16], xmm0
	mov	DWORD PTR [esi+72], 0
	movq	QWORD PTR [esi+80], xmm0
	mov	DWORD PTR [esi+88], 0
	mov	DWORD PTR [esi+4], 13			; 0000000dH
	mov	DWORD PTR [esi+56], 0
	mov	DWORD PTR [esi+44], 0
	mov	DWORD PTR [esi+32], esi
	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi+48], 0
	mov	DWORD PTR [esi+52], 0
	mov	DWORD PTR [esi+60], 0
	mov	DWORD PTR [esi+40], 1
	mov	DWORD PTR [esi+36], 0
	mov	DWORD PTR [esi+64], 0
	mov	DWORD PTR [esi+68], 0
	mov	DWORD PTR [esi], 0
	mov	DWORD PTR [esi+76], 1
	mov	DWORD PTR [esi+92], 160			; 000000a0H
	test	ecx, ecx
	jne	SHORT $LN4@htmlNewDoc
	test	eax, eax
	je	SHORT $LN3@htmlNewDoc
$LN4@htmlNewDoc:

; 2340 : 	(URI != NULL))
; 2341 : 	xmlCreateIntSubset(cur, BAD_CAST "html", ExternalID, URI);

	push	eax
	push	ecx
	push	OFFSET ??_C@_04PNIFHPHN@html@
	push	esi
	call	_xmlCreateIntSubset
	add	esp, 16					; 00000010H
$LN3@htmlNewDoc:

; 2342 :     return(cur);

	mov	eax, esi
	pop	esi

; 2343 : }

	pop	ebp
	ret	0
_htmlNewDocNoDtD ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlNewDoc
_TEXT	SEGMENT
_URI$ = 8						; size = 4
_ExternalID$ = 12					; size = 4
_htmlNewDoc PROC					; COMDAT

; 2355 : htmlNewDoc(const xmlChar *URI, const xmlChar *ExternalID) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _URI$[ebp]
	mov	eax, DWORD PTR _ExternalID$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@htmlNewDoc

; 2356 :     if ((URI == NULL) && (ExternalID == NULL))

	test	eax, eax
	jne	SHORT $LN2@htmlNewDoc

; 2357 : 	return(htmlNewDocNoDtD(

	mov	DWORD PTR _ExternalID$[ebp], OFFSET ??_C@_0CG@CIBPFINF@?9?1?1W3C?1?1DTD?5HTML?54?40?5Transition@
	mov	DWORD PTR _URI$[ebp], OFFSET ??_C@_0CK@JLEAHDEJ@http?3?1?1www?4w3?4org?1TR?1REC?9html40@

; 2362 : }

	pop	ebp

; 2357 : 	return(htmlNewDocNoDtD(

	jmp	_htmlNewDocNoDtD
$LN2@htmlNewDoc:

; 2358 : 		    BAD_CAST "http://www.w3.org/TR/REC-html40/loose.dtd",
; 2359 : 		    BAD_CAST "-//W3C//DTD HTML 4.0 Transitional//EN"));
; 2360 : 
; 2361 :     return(htmlNewDocNoDtD(URI, ExternalID));

	mov	DWORD PTR _ExternalID$[ebp], eax
	mov	DWORD PTR _URI$[ebp], ecx

; 2362 : }

	pop	ebp

; 2358 : 		    BAD_CAST "http://www.w3.org/TR/REC-html40/loose.dtd",
; 2359 : 		    BAD_CAST "-//W3C//DTD HTML 4.0 Transitional//EN"));
; 2360 : 
; 2361 :     return(htmlNewDocNoDtD(URI, ExternalID));

	jmp	_htmlNewDocNoDtD
_htmlNewDoc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCreateFileParserCtxt
_TEXT	SEGMENT
_content$1$ = -4					; size = 4
_ctxt$1$ = 8						; size = 4
_filename$ = 8						; size = 4
_encoding$ = 12						; size = 4
_htmlCreateFileParserCtxt PROC				; COMDAT

; 6339 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _filename$[ebp]
	test	esi, esi
	je	$LN16@htmlCreate

; 6340 :     htmlParserCtxtPtr ctxt;
; 6341 :     htmlParserInputPtr inputStream;
; 6342 :     char *canonicFilename;
; 6343 :     /* htmlCharEncoding enc; */
; 6344 :     xmlChar *content, *content_line = (xmlChar *) "charset=";
; 6345 : 
; 6346 :     if (filename == NULL)
; 6347 :         return(NULL);
; 6348 : 
; 6349 :     ctxt = htmlNewParserCtxt();

	call	_htmlNewParserCtxt
	mov	ebx, eax
	mov	DWORD PTR _ctxt$1$[ebp], ebx

; 6350 :     if (ctxt == NULL) {

	test	ebx, ebx
	je	$LN16@htmlCreate

; 6352 :     }
; 6353 :     canonicFilename = (char *) xmlCanonicPath((const xmlChar *) filename);

	push	edi
	push	esi
	call	_xmlCanonicPath
	mov	esi, eax
	add	esp, 4

; 6354 :     if (canonicFilename == NULL) {

	test	esi, esi
	jne	SHORT $LN4@htmlCreate

; 6355 : #ifdef LIBXML_SAX1_ENABLED
; 6356 : 	if (xmlDefaultSAXHandler.error != NULL) {

	call	___xmlDefaultSAXHandler
	cmp	DWORD PTR [eax+88], esi
	je	SHORT $LN15@htmlCreate

; 6357 : 	    xmlDefaultSAXHandler.error(NULL, "out of memory\n");

	call	___xmlDefaultSAXHandler
	push	OFFSET ??_C@_0P@PCJPAHLM@out?5of?5memory?6@
	push	esi
	mov	eax, DWORD PTR [eax+88]
	call	eax
	add	esp, 8

; 6367 : 	xmlFreeParserCtxt(ctxt);

	push	ebx
	call	_xmlFreeParserCtxt
	add	esp, 4

; 6368 : 	return(NULL);

	xor	eax, eax
	pop	edi
	pop	esi

; 6389 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@htmlCreate:

; 6358 : 	}
; 6359 : #endif
; 6360 : 	xmlFreeParserCtxt(ctxt);
; 6361 : 	return(NULL);
; 6362 :     }
; 6363 : 
; 6364 :     inputStream = xmlLoadExternalEntity(canonicFilename, NULL, ctxt);

	push	ebx
	push	0
	push	esi
	call	_xmlLoadExternalEntity

; 6365 :     xmlFree(canonicFilename);

	push	esi
	mov	edi, eax
	call	DWORD PTR _xmlFree
	add	esp, 16					; 00000010H

; 6366 :     if (inputStream == NULL) {

	test	edi, edi
	jne	SHORT $LN6@htmlCreate
$LN15@htmlCreate:

; 6367 : 	xmlFreeParserCtxt(ctxt);

	push	ebx
	call	_xmlFreeParserCtxt
	add	esp, 4

; 6368 : 	return(NULL);

	xor	eax, eax
	pop	edi
	pop	esi

; 6389 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@htmlCreate:

; 6369 :     }
; 6370 : 
; 6371 :     inputPush(ctxt, inputStream);

	push	edi
	push	ebx
	call	_inputPush

; 6372 : 
; 6373 :     /* set encoding */
; 6374 :     if (encoding) {

	mov	ebx, DWORD PTR _encoding$[ebp]
	add	esp, 8
	test	ebx, ebx
	je	$LN22@htmlCreate

; 6375 :         size_t l = strlen(encoding);

	mov	esi, ebx
	lea	ecx, DWORD PTR [esi+1]
$LL17@htmlCreate:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL17@htmlCreate
	sub	esi, ecx

; 6376 : 
; 6377 : 	if (l < 1000) {

	cmp	esi, 1000				; 000003e8H
	jae	$LN22@htmlCreate

; 6378 : 	    content = xmlMallocAtomic (xmlStrlen(content_line) + l + 1);

	push	OFFSET ??_C@_08JPKHBDLJ@charset?$DN@
	call	_xmlStrlen
	inc	eax
	add	eax, esi
	push	eax
	call	DWORD PTR _xmlMallocAtomic
	mov	esi, eax
	add	esp, 8
	mov	DWORD PTR _content$1$[ebp], esi

; 6379 : 	    if (content) {

	test	esi, esi
	je	SHORT $LN22@htmlCreate

; 6380 : 		strcpy ((char *)content, (char *)content_line);

	mov	ecx, OFFSET ??_C@_08JPKHBDLJ@charset?$DN@
	mov	edx, esi
	sub	edx, ecx
	npad	1
$LL11@htmlCreate:
	mov	al, BYTE PTR [ecx]
	lea	ecx, DWORD PTR [ecx+1]
	mov	BYTE PTR [edx+ecx-1], al
	test	al, al
	jne	SHORT $LL11@htmlCreate

; 6381 : 		strcat ((char *)content, (char *)encoding);

	mov	edx, ebx
	npad	1
$LL18@htmlCreate:
	mov	al, BYTE PTR [ebx]
	inc	ebx
	test	al, al
	jne	SHORT $LL18@htmlCreate
	sub	ebx, edx
	lea	edi, DWORD PTR [esi-1]
	npad	4
$LL19@htmlCreate:
	mov	al, BYTE PTR [edi+1]
	inc	edi
	test	al, al
	jne	SHORT $LL19@htmlCreate
	mov	ecx, ebx
	mov	esi, edx
	shr	ecx, 2
	rep movsd
	mov	ecx, ebx
	and	ecx, 3
	rep movsb

; 6382 : 		htmlCheckEncoding (ctxt, content);

	mov	edi, DWORD PTR _content$1$[ebp]
	mov	esi, DWORD PTR _ctxt$1$[ebp]
	push	edi
	push	esi
	call	_htmlCheckEncoding

; 6383 : 		xmlFree (content);

	push	edi
	call	DWORD PTR _xmlFree
	add	esp, 12					; 0000000cH

; 6384 : 	    }
; 6385 : 	}
; 6386 :     }
; 6387 : 
; 6388 :     return(ctxt);

	mov	eax, esi
	pop	edi
	pop	esi

; 6389 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@htmlCreate:

; 6384 : 	    }
; 6385 : 	}
; 6386 :     }
; 6387 : 
; 6388 :     return(ctxt);

	mov	esi, DWORD PTR _ctxt$1$[ebp]
	mov	eax, esi
	pop	edi
	pop	esi

; 6389 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@htmlCreate:
	pop	esi

; 6351 : 	return(NULL);

	xor	eax, eax

; 6389 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlCreateFileParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlInitAutoClose
_TEXT	SEGMENT
_htmlInitAutoClose PROC					; COMDAT
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	xor	edx, edx
	cmp	DWORD PTR _htmlStartCloseIndexinitialized, edx
	jne	SHORT $LN1@htmlInitAu

; 1232 :     int indx, i = 0;
; 1233 : 
; 1234 :     if (htmlStartCloseIndexinitialized) return;
; 1235 : 
; 1236 :     for (indx = 0;indx < 100;indx ++) htmlStartCloseIndex[indx] = NULL;

	push	edi
	xor	eax, eax
	mov	ecx, 100				; 00000064H
	mov	edi, OFFSET _htmlStartCloseIndex
	rep stosd
	pop	edi

; 1237 :     indx = 0;
; 1238 :     while ((htmlStartClose[i] != NULL) && (indx < 100 - 1)) {

	cmp	DWORD PTR _htmlStartClose, eax
	je	SHORT $LN23@htmlInitAu

; 1232 :     int indx, i = 0;
; 1233 : 
; 1234 :     if (htmlStartCloseIndexinitialized) return;
; 1235 : 
; 1236 :     for (indx = 0;indx < 100;indx ++) htmlStartCloseIndex[indx] = NULL;

	mov	ecx, OFFSET _htmlStartCloseIndex
$LL5@htmlInitAu:

; 1237 :     indx = 0;
; 1238 :     while ((htmlStartClose[i] != NULL) && (indx < 100 - 1)) {

	cmp	ecx, OFFSET _htmlStartCloseIndex+396
	jge	SHORT $LN23@htmlInitAu

; 1239 :         htmlStartCloseIndex[indx++] = (const char**) &htmlStartClose[i];

	lea	eax, DWORD PTR _htmlStartClose[edx*4]
	mov	DWORD PTR [ecx], eax
	add	ecx, 4

; 1240 : 	while (htmlStartClose[i] != NULL) i++;

	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@htmlInitAu
	npad	6
$LL7@htmlInitAu:
	inc	edx
	cmp	DWORD PTR _htmlStartClose[edx*4], 0
	jne	SHORT $LL7@htmlInitAu
$LN8@htmlInitAu:

; 1241 : 	i++;

	inc	edx
	cmp	DWORD PTR _htmlStartClose[edx*4], 0
	jne	SHORT $LL5@htmlInitAu
$LN23@htmlInitAu:

; 1242 :     }
; 1243 :     htmlStartCloseIndexinitialized = 1;

	mov	DWORD PTR _htmlStartCloseIndexinitialized, 1
$LN1@htmlInitAu:

; 1244 : }

	ret	0
_htmlInitAutoClose ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlNodeStatus
_TEXT	SEGMENT
_node$ = 8						; size = 4
_legacy$ = 12						; size = 4
_htmlNodeStatus PROC					; COMDAT

; 6561 : htmlNodeStatus(const htmlNodePtr node, int legacy) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _node$[ebp]
	test	esi, esi
	jne	SHORT $LN4@htmlNodeSt

; 6562 :   if ( ! node )
; 6563 :     return HTML_INVALID ;

	lea	eax, DWORD PTR [esi+1]
	pop	esi

; 6579 :   }
; 6580 : }

	pop	ebp
	ret	0
$LN4@htmlNodeSt:

; 6564 : 
; 6565 :   switch ( node->type ) {

	mov	eax, DWORD PTR [esi+4]
	sub	eax, 1
	je	SHORT $LN5@htmlNodeSt
	sub	eax, 1
	je	SHORT $LN6@htmlNodeSt

; 6577 : 	htmlTagLookup(node->parent->name) , node->name, legacy) ;
; 6578 :     default: return HTML_NA ;

	xor	eax, eax
	pop	esi

; 6579 :   }
; 6580 : }

	pop	ebp
	ret	0
$LN6@htmlNodeSt:

; 6568 : 	? ( htmlElementAllowedHere (
; 6569 : 		htmlTagLookup(node->parent->name) , node->name
; 6570 : 		) ? HTML_VALID : HTML_INVALID )
; 6571 : 	: htmlElementStatusHere(
; 6572 : 		htmlTagLookup(node->parent->name) ,
; 6573 : 		htmlTagLookup(node->name) )
; 6574 : 	;
; 6575 :     case XML_ATTRIBUTE_NODE:
; 6576 :       return htmlAttrAllowed(

	push	DWORD PTR _legacy$[ebp]
	mov	eax, DWORD PTR [esi+20]
	push	DWORD PTR [esi+8]
	push	DWORD PTR [eax+8]
	call	_htmlTagLookup
	add	esp, 4
	push	eax
	call	_htmlAttrAllowed
	add	esp, 12					; 0000000cH
	pop	esi

; 6579 :   }
; 6580 : }

	pop	ebp
	ret	0
$LN5@htmlNodeSt:

; 6566 :     case XML_ELEMENT_NODE:
; 6567 :       return legacy

	cmp	DWORD PTR _legacy$[ebp], 0
	mov	eax, DWORD PTR [esi+8]
	push	eax
	je	SHORT $LN9@htmlNodeSt
	mov	eax, DWORD PTR [esi+20]
	push	DWORD PTR [eax+8]
	call	_htmlTagLookup
	add	esp, 4
	push	eax
	call	_htmlElementAllowedHere
	add	esp, 8
	neg	eax
	sbb	eax, eax
	and	eax, 3
	inc	eax
	pop	esi

; 6579 :   }
; 6580 : }

	pop	ebp
	ret	0
$LN9@htmlNodeSt:

; 6566 :     case XML_ELEMENT_NODE:
; 6567 :       return legacy

	call	_htmlTagLookup
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR [esi+20]
	push	DWORD PTR [eax+8]
	call	_htmlTagLookup
	add	esp, 4
	push	eax
	call	_htmlElementStatusHere
	add	esp, 8
	pop	esi

; 6579 :   }
; 6580 : }

	pop	ebp
	ret	0
_htmlNodeStatus ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlElementStatusHere
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_elt$ = 12						; size = 4
_htmlElementStatusHere PROC				; COMDAT

; 6503 : htmlElementStatusHere(const htmlElemDesc* parent, const htmlElemDesc* elt) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _parent$[ebp]
	test	eax, eax
	je	SHORT $LN3@htmlElemen

; 6504 :   if ( ! parent || ! elt )

	mov	esi, DWORD PTR _elt$[ebp]
	test	esi, esi
	je	SHORT $LN3@htmlElemen

; 6506 :   if ( ! htmlElementAllowedHere(parent, (const xmlChar*) elt->name ) )

	push	DWORD PTR [esi]
	push	eax
	call	_htmlElementAllowedHere
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@htmlElemen

; 6507 :     return HTML_INVALID ;
; 6508 : 
; 6509 :   return ( elt->dtd == 0 ) ? HTML_VALID : HTML_DEPRECATED ;

	xor	eax, eax
	cmp	BYTE PTR [esi+9], al
	pop	esi
	sete	al
	lea	eax, DWORD PTR [eax*2+2]

; 6510 : }

	pop	ebp
	ret	0
$LN3@htmlElemen:

; 6505 :     return HTML_INVALID ;

	mov	eax, 1
	pop	esi

; 6510 : }

	pop	ebp
	ret	0
_htmlElementStatusHere ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlElementAllowedHere
_TEXT	SEGMENT
_parent$ = 8						; size = 4
_elt$ = 12						; size = 4
_htmlElementAllowedHere PROC				; COMDAT

; 6480 : htmlElementAllowedHere(const htmlElemDesc* parent, const xmlChar* elt) {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _elt$[ebp]
	test	edi, edi
	je	SHORT $LN6@htmlElemen

; 6481 :   const char** p ;
; 6482 : 
; 6483 :   if ( ! elt || ! parent || ! parent->subelts )

	mov	esi, DWORD PTR _parent$[ebp]
	test	esi, esi
	je	SHORT $LN6@htmlElemen
	mov	esi, DWORD PTR [esi+16]
	test	esi, esi
	je	SHORT $LN6@htmlElemen

; 6485 : 
; 6486 :   for ( p = parent->subelts; *p; ++p )

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@htmlElemen
	npad	6
$LL4@htmlElemen:

; 6487 :     if ( !xmlStrcmp((const xmlChar *)*p, elt) )

	push	edi
	push	eax
	call	_xmlStrcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@htmlElemen

; 6485 : 
; 6486 :   for ( p = parent->subelts; *p; ++p )

	mov	eax, DWORD PTR [esi+4]
	add	esi, 4
	test	eax, eax
	jne	SHORT $LL4@htmlElemen
$LN6@htmlElemen:
	pop	edi

; 6484 : 	return 0 ;

	xor	eax, eax

; 6489 : 
; 6490 :   return 0 ;
; 6491 : }

	pop	esi
	pop	ebp
	ret	0
$LN10@htmlElemen:
	pop	edi

; 6488 :       return 1 ;

	mov	eax, 1

; 6489 : 
; 6490 :   return 0 ;
; 6491 : }

	pop	esi
	pop	ebp
	ret	0
_htmlElementAllowedHere ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlAttrAllowed
_TEXT	SEGMENT
_elt$ = 8						; size = 4
_attr$ = 12						; size = 4
_legacy$ = 16						; size = 4
_htmlAttrAllowed PROC					; COMDAT

; 6523 : htmlAttrAllowed(const htmlElemDesc* elt, const xmlChar* attr, int legacy) {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _elt$[ebp]
	test	ebx, ebx
	je	$LN12@htmlAttrAl

; 6524 :   const char** p ;
; 6525 : 
; 6526 :   if ( !elt || ! attr )

	mov	edi, DWORD PTR _attr$[ebp]
	test	edi, edi
	je	SHORT $LN12@htmlAttrAl

; 6527 : 	return HTML_INVALID ;
; 6528 : 
; 6529 :   if ( elt->attrs_req )

	mov	esi, DWORD PTR [ebx+32]
	test	esi, esi
	je	SHORT $LN3@htmlAttrAl

; 6530 :     for ( p = elt->attrs_req; *p; ++p)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@htmlAttrAl
	npad	1
$LL4@htmlAttrAl:

; 6531 :       if ( !xmlStrcmp((const xmlChar*)*p, attr) )

	push	edi
	push	eax
	call	_xmlStrcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@htmlAttrAl

; 6530 :     for ( p = elt->attrs_req; *p; ++p)

	mov	eax, DWORD PTR [esi+4]
	add	esi, 4
	test	eax, eax
	jne	SHORT $LL4@htmlAttrAl
$LN3@htmlAttrAl:

; 6532 :         return HTML_REQUIRED ;
; 6533 : 
; 6534 :   if ( elt->attrs_opt )

	mov	esi, DWORD PTR [ebx+24]
	test	esi, esi
	je	SHORT $LN6@htmlAttrAl

; 6535 :     for ( p = elt->attrs_opt; *p; ++p)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN6@htmlAttrAl
$LL7@htmlAttrAl:

; 6536 :       if ( !xmlStrcmp((const xmlChar*)*p, attr) )

	push	edi
	push	eax
	call	_xmlStrcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN24@htmlAttrAl

; 6535 :     for ( p = elt->attrs_opt; *p; ++p)

	mov	eax, DWORD PTR [esi+4]
	add	esi, 4
	test	eax, eax
	jne	SHORT $LL7@htmlAttrAl
$LN6@htmlAttrAl:

; 6537 :         return HTML_VALID ;
; 6538 : 
; 6539 :   if ( legacy && elt->attrs_depr )

	cmp	DWORD PTR _legacy$[ebp], 0
	je	SHORT $LN12@htmlAttrAl
	mov	esi, DWORD PTR [ebx+28]
	test	esi, esi
	je	SHORT $LN12@htmlAttrAl

; 6540 :     for ( p = elt->attrs_depr; *p; ++p)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN12@htmlAttrAl
$LL10@htmlAttrAl:

; 6541 :       if ( !xmlStrcmp((const xmlChar*)*p, attr) )

	push	edi
	push	eax
	call	_xmlStrcmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN25@htmlAttrAl

; 6540 :     for ( p = elt->attrs_depr; *p; ++p)

	mov	eax, DWORD PTR [esi+4]
	add	esi, 4
	test	eax, eax
	jne	SHORT $LL10@htmlAttrAl
$LN12@htmlAttrAl:
	pop	edi

; 6542 :         return HTML_DEPRECATED ;
; 6543 : 
; 6544 :   return HTML_INVALID ;
; 6545 : }

	pop	esi
	mov	eax, 1
	pop	ebx
	pop	ebp
	ret	0
$LN23@htmlAttrAl:
	pop	edi
	pop	esi
	mov	eax, 12					; 0000000cH
	pop	ebx
	pop	ebp
	ret	0
$LN24@htmlAttrAl:
	pop	edi
	pop	esi
	mov	eax, 4
	pop	ebx
	pop	ebp
	ret	0
$LN25@htmlAttrAl:
	pop	edi
	pop	esi
	mov	eax, 2
	pop	ebx
	pop	ebp
	ret	0
_htmlAttrAllowed ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCtxtReadIO
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_ioread$ = 12						; size = 4
_ioclose$ = 16						; size = 4
_ioctx$ = 20						; size = 4
_URL$ = 24						; size = 4
_encoding$ = 28						; size = 4
_options$ = 32						; size = 4
_htmlCtxtReadIO PROC					; COMDAT

; 7141 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _ioread$[ebp]
	test	ebx, ebx
	je	SHORT $LN5@htmlCtxtRe

; 7142 :     xmlParserInputBufferPtr input;
; 7143 :     xmlParserInputPtr stream;
; 7144 : 
; 7145 :     if (ioread == NULL)
; 7146 :         return (NULL);
; 7147 :     if (ctxt == NULL)

	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	SHORT $LN5@htmlCtxtRe

; 7148 :         return (NULL);
; 7149 :     xmlInitParser();

	call	_xmlInitParser

; 7150 : 
; 7151 :     htmlCtxtReset(ctxt);

	push	esi
	call	_htmlCtxtReset

; 7152 : 
; 7153 :     input = xmlParserInputBufferCreateIO(ioread, ioclose, ioctx,

	mov	edi, DWORD PTR _ioclose$[ebp]
	push	0
	push	DWORD PTR _ioctx$[ebp]
	push	edi
	push	ebx
	call	_xmlParserInputBufferCreateIO
	mov	ebx, eax
	add	esp, 20					; 00000014H

; 7154 :                                          XML_CHAR_ENCODING_NONE);
; 7155 :     if (input == NULL) {

	test	ebx, ebx
	jne	SHORT $LN4@htmlCtxtRe

; 7156 :         if (ioclose != NULL)

	test	edi, edi
	je	SHORT $LN5@htmlCtxtRe

; 7157 :             ioclose(ioctx);

	push	DWORD PTR _ioctx$[ebp]
	call	edi

; 7167 : }

	add	esp, 4
$LN5@htmlCtxtRe:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
$LN4@htmlCtxtRe:

; 7158 :         return (NULL);
; 7159 :     }
; 7160 :     stream = xmlNewIOInputStream(ctxt, input, XML_CHAR_ENCODING_NONE);

	push	0
	push	ebx
	push	esi
	call	_xmlNewIOInputStream
	add	esp, 12					; 0000000cH

; 7161 :     if (stream == NULL) {

	test	eax, eax
	jne	SHORT $LN6@htmlCtxtRe

; 7162 :         xmlFreeParserInputBuffer(input);

	push	ebx
	call	_xmlFreeParserInputBuffer

; 7167 : }

	add	esp, 4
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN6@htmlCtxtRe:

; 7163 :         return (NULL);
; 7164 :     }
; 7165 :     inputPush(ctxt, stream);

	push	eax
	push	esi
	call	_inputPush

; 7166 :     return (htmlDoRead(ctxt, URL, encoding, options, 1));

	push	1
	push	DWORD PTR _options$[ebp]
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _URL$[ebp]
	push	esi
	call	_htmlDoRead
	add	esp, 28					; 0000001cH
	pop	edi

; 7167 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_htmlCtxtReadIO ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCtxtReadFd
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_fd$ = 12						; size = 4
_URL$ = 16						; size = 4
_encoding$ = 20						; size = 4
_options$ = 24						; size = 4
_htmlCtxtReadFd PROC					; COMDAT

; 7096 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _fd$[ebp]
	test	edi, edi
	js	SHORT $LN7@htmlCtxtRe

; 7097 :     xmlParserInputBufferPtr input;
; 7098 :     xmlParserInputPtr stream;
; 7099 : 
; 7100 :     if (fd < 0)
; 7101 :         return (NULL);
; 7102 :     if (ctxt == NULL)

	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	SHORT $LN7@htmlCtxtRe

; 7103 :         return (NULL);
; 7104 :     xmlInitParser();

	call	_xmlInitParser

; 7105 : 
; 7106 :     htmlCtxtReset(ctxt);

	push	esi
	call	_htmlCtxtReset

; 7107 : 
; 7108 : 
; 7109 :     input = xmlParserInputBufferCreateFd(fd, XML_CHAR_ENCODING_NONE);

	push	0
	push	edi
	call	_xmlParserInputBufferCreateFd
	mov	edi, eax
	add	esp, 12					; 0000000cH

; 7110 :     if (input == NULL)

	test	edi, edi
	je	SHORT $LN7@htmlCtxtRe

; 7111 :         return (NULL);
; 7112 :     stream = xmlNewIOInputStream(ctxt, input, XML_CHAR_ENCODING_NONE);

	push	0
	push	edi
	push	esi
	call	_xmlNewIOInputStream
	add	esp, 12					; 0000000cH

; 7113 :     if (stream == NULL) {

	test	eax, eax
	jne	SHORT $LN5@htmlCtxtRe

; 7114 :         xmlFreeParserInputBuffer(input);

	push	edi
	call	_xmlFreeParserInputBuffer
	add	esp, 4
$LN7@htmlCtxtRe:

; 7119 : }

	pop	edi
	xor	eax, eax
	pop	esi
	pop	ebp
	ret	0
$LN5@htmlCtxtRe:

; 7115 :         return (NULL);
; 7116 :     }
; 7117 :     inputPush(ctxt, stream);

	push	eax
	push	esi
	call	_inputPush

; 7118 :     return (htmlDoRead(ctxt, URL, encoding, options, 1));

	push	1
	push	DWORD PTR _options$[ebp]
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _URL$[ebp]
	push	esi
	call	_htmlDoRead
	add	esp, 28					; 0000001cH
	pop	edi

; 7119 : }

	pop	esi
	pop	ebp
	ret	0
_htmlCtxtReadFd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCtxtReadMemory
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_URL$ = 20						; size = 4
_encoding$ = 24						; size = 4
_options$ = 28						; size = 4
_htmlCtxtReadMemory PROC				; COMDAT

; 7053 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	SHORT $LN7@htmlCtxtRe

; 7054 :     xmlParserInputBufferPtr input;
; 7055 :     xmlParserInputPtr stream;
; 7056 : 
; 7057 :     if (ctxt == NULL)
; 7058 :         return (NULL);
; 7059 :     if (buffer == NULL)

	mov	edi, DWORD PTR _buffer$[ebp]
	test	edi, edi
	je	SHORT $LN7@htmlCtxtRe

; 7060 :         return (NULL);
; 7061 :     xmlInitParser();

	call	_xmlInitParser

; 7062 : 
; 7063 :     htmlCtxtReset(ctxt);

	push	esi
	call	_htmlCtxtReset

; 7064 : 
; 7065 :     input = xmlParserInputBufferCreateMem(buffer, size, XML_CHAR_ENCODING_NONE);

	push	0
	push	DWORD PTR _size$[ebp]
	push	edi
	call	_xmlParserInputBufferCreateMem
	mov	edi, eax
	add	esp, 16					; 00000010H

; 7066 :     if (input == NULL) {

	test	edi, edi
	je	SHORT $LN7@htmlCtxtRe

; 7067 : 	return(NULL);
; 7068 :     }
; 7069 : 
; 7070 :     stream = xmlNewIOInputStream(ctxt, input, XML_CHAR_ENCODING_NONE);

	push	0
	push	edi
	push	esi
	call	_xmlNewIOInputStream
	add	esp, 12					; 0000000cH

; 7071 :     if (stream == NULL) {

	test	eax, eax
	jne	SHORT $LN5@htmlCtxtRe

; 7072 : 	xmlFreeParserInputBuffer(input);

	push	edi
	call	_xmlFreeParserInputBuffer
	add	esp, 4
$LN7@htmlCtxtRe:

; 7078 : }

	pop	edi
	xor	eax, eax
	pop	esi
	pop	ebp
	ret	0
$LN5@htmlCtxtRe:

; 7073 : 	return(NULL);
; 7074 :     }
; 7075 : 
; 7076 :     inputPush(ctxt, stream);

	push	eax
	push	esi
	call	_inputPush

; 7077 :     return (htmlDoRead(ctxt, URL, encoding, options, 1));

	push	1
	push	DWORD PTR _options$[ebp]
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _URL$[ebp]
	push	esi
	call	_htmlDoRead
	add	esp, 28					; 0000001cH
	pop	edi

; 7078 : }

	pop	esi
	pop	ebp
	ret	0
_htmlCtxtReadMemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCtxtReadFile
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_filename$ = 12						; size = 4
_encoding$ = 16						; size = 4
_options$ = 20						; size = 4
_htmlCtxtReadFile PROC					; COMDAT

; 7017 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	cmp	DWORD PTR _filename$[ebp], 0
	je	SHORT $LN6@htmlCtxtRe

; 7018 :     xmlParserInputPtr stream;
; 7019 : 
; 7020 :     if (filename == NULL)
; 7021 :         return (NULL);
; 7022 :     if (ctxt == NULL)

	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	SHORT $LN6@htmlCtxtRe

; 7023 :         return (NULL);
; 7024 :     xmlInitParser();

	call	_xmlInitParser

; 7025 : 
; 7026 :     htmlCtxtReset(ctxt);

	push	esi
	call	_htmlCtxtReset

; 7027 : 
; 7028 :     stream = xmlLoadExternalEntity(filename, NULL, ctxt);

	push	esi
	push	0
	push	DWORD PTR _filename$[ebp]
	call	_xmlLoadExternalEntity
	add	esp, 16					; 00000010H

; 7029 :     if (stream == NULL) {

	test	eax, eax
	je	SHORT $LN6@htmlCtxtRe

; 7031 :     }
; 7032 :     inputPush(ctxt, stream);

	push	eax
	push	esi
	call	_inputPush

; 7033 :     return (htmlDoRead(ctxt, NULL, encoding, options, 1));

	push	1
	push	DWORD PTR _options$[ebp]
	push	DWORD PTR _encoding$[ebp]
	push	0
	push	esi
	call	_htmlDoRead
	add	esp, 28					; 0000001cH
	pop	esi

; 7034 : }

	pop	ebp
	ret	0
$LN6@htmlCtxtRe:

; 7030 :         return (NULL);

	xor	eax, eax
	pop	esi

; 7034 : }

	pop	ebp
	ret	0
_htmlCtxtReadFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCtxtReadDoc
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_URL$ = 16						; size = 4
_encoding$ = 20						; size = 4
_options$ = 24						; size = 4
_htmlCtxtReadDoc PROC					; COMDAT

; 6983 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@htmlCtxtRe

; 6984 :     xmlParserInputPtr stream;
; 6985 : 
; 6986 :     if (cur == NULL)
; 6987 :         return (NULL);
; 6988 :     if (ctxt == NULL)

	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	SHORT $LN6@htmlCtxtRe

; 6989 :         return (NULL);
; 6990 :     xmlInitParser();

	call	_xmlInitParser

; 6991 : 
; 6992 :     htmlCtxtReset(ctxt);

	push	esi
	call	_htmlCtxtReset

; 6993 : 
; 6994 :     stream = xmlNewStringInputStream(ctxt, cur);

	push	DWORD PTR _cur$[ebp]
	push	esi
	call	_xmlNewStringInputStream
	add	esp, 12					; 0000000cH

; 6995 :     if (stream == NULL) {

	test	eax, eax
	je	SHORT $LN6@htmlCtxtRe

; 6997 :     }
; 6998 :     inputPush(ctxt, stream);

	push	eax
	push	esi
	call	_inputPush

; 6999 :     return (htmlDoRead(ctxt, URL, encoding, options, 1));

	push	1
	push	DWORD PTR _options$[ebp]
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _URL$[ebp]
	push	esi
	call	_htmlDoRead
	add	esp, 28					; 0000001cH
	pop	esi

; 7000 : }

	pop	ebp
	ret	0
$LN6@htmlCtxtRe:

; 6996 :         return (NULL);

	xor	eax, eax
	pop	esi

; 7000 : }

	pop	ebp
	ret	0
_htmlCtxtReadDoc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlReadIO
_TEXT	SEGMENT
_ioread$ = 8						; size = 4
_ioclose$ = 12						; size = 4
_ioctx$ = 16						; size = 4
_URL$ = 20						; size = 4
_encoding$ = 24						; size = 4
_options$ = 28						; size = 4
_htmlReadIO PROC					; COMDAT

; 6936 : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _ioread$[ebp]
	test	edi, edi
	je	SHORT $LN4@htmlReadIO

; 6937 :     htmlParserCtxtPtr ctxt;
; 6938 :     xmlParserInputBufferPtr input;
; 6939 :     xmlParserInputPtr stream;
; 6940 : 
; 6941 :     if (ioread == NULL)
; 6942 :         return (NULL);
; 6943 :     xmlInitParser();
; 6944 : 
; 6945 :     input = xmlParserInputBufferCreateIO(ioread, ioclose, ioctx,

	call	_xmlInitParser
	mov	esi, DWORD PTR _ioclose$[ebp]
	push	0
	push	DWORD PTR _ioctx$[ebp]
	push	esi
	push	edi
	call	_xmlParserInputBufferCreateIO
	mov	edi, eax
	add	esp, 16					; 00000010H

; 6946 :                                          XML_CHAR_ENCODING_NONE);
; 6947 :     if (input == NULL) {

	test	edi, edi
	jne	SHORT $LN3@htmlReadIO

; 6948 :         if (ioclose != NULL)

	test	esi, esi
	je	SHORT $LN4@htmlReadIO

; 6949 :             ioclose(ioctx);

	push	DWORD PTR _ioctx$[ebp]
	call	esi

; 6965 : }

	add	esp, 4
$LN4@htmlReadIO:
	pop	edi
	xor	eax, eax
	pop	esi
	pop	ebp
	ret	0
$LN3@htmlReadIO:

; 6950 :         return (NULL);
; 6951 :     }
; 6952 :     ctxt = htmlNewParserCtxt();

	call	_htmlNewParserCtxt
	mov	esi, eax

; 6953 :     if (ctxt == NULL) {

	test	esi, esi
	jne	SHORT $LN5@htmlReadIO

; 6954 :         xmlFreeParserInputBuffer(input);

	push	edi
	call	_xmlFreeParserInputBuffer

; 6965 : }

	add	esp, 4
	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN5@htmlReadIO:

; 6955 :         return (NULL);
; 6956 :     }
; 6957 :     stream = xmlNewIOInputStream(ctxt, input, XML_CHAR_ENCODING_NONE);

	push	0
	push	edi
	push	esi
	call	_xmlNewIOInputStream
	add	esp, 12					; 0000000cH

; 6958 :     if (stream == NULL) {

	test	eax, eax
	jne	SHORT $LN6@htmlReadIO

; 6959 :         xmlFreeParserInputBuffer(input);

	push	edi
	call	_xmlFreeParserInputBuffer

; 6960 : 	xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt
	add	esp, 8

; 6965 : }

	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN6@htmlReadIO:

; 6961 :         return (NULL);
; 6962 :     }
; 6963 :     inputPush(ctxt, stream);

	push	eax
	push	esi
	call	_inputPush

; 6964 :     return (htmlDoRead(ctxt, URL, encoding, options, 0));

	push	0
	push	DWORD PTR _options$[ebp]
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _URL$[ebp]
	push	esi
	call	_htmlDoRead
	add	esp, 28					; 0000001cH
	pop	edi

; 6965 : }

	pop	esi
	pop	ebp
	ret	0
_htmlReadIO ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlReadFd
_TEXT	SEGMENT
_fd$ = 8						; size = 4
_URL$ = 12						; size = 4
_encoding$ = 16						; size = 4
_options$ = 20						; size = 4
_htmlReadFd PROC					; COMDAT

; 6892 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _fd$[ebp]
	test	esi, esi
	js	SHORT $LN7@htmlReadFd

; 6893 :     htmlParserCtxtPtr ctxt;
; 6894 :     xmlParserInputBufferPtr input;
; 6895 :     xmlParserInputPtr stream;
; 6896 : 
; 6897 :     if (fd < 0)
; 6898 :         return (NULL);
; 6899 :     xmlInitParser();
; 6900 : 
; 6901 :     xmlInitParser();

	call	_xmlInitParser
	call	_xmlInitParser

; 6902 :     input = xmlParserInputBufferCreateFd(fd, XML_CHAR_ENCODING_NONE);

	push	0
	push	esi
	call	_xmlParserInputBufferCreateFd
	mov	esi, eax
	add	esp, 8

; 6903 :     if (input == NULL)

	test	esi, esi
	je	SHORT $LN7@htmlReadFd

; 6905 :     ctxt = xmlNewParserCtxt();

	push	edi
	call	_xmlNewParserCtxt
	mov	edi, eax

; 6906 :     if (ctxt == NULL) {

	test	edi, edi
	jne	SHORT $LN4@htmlReadFd

; 6907 :         xmlFreeParserInputBuffer(input);

	push	esi
	call	_xmlFreeParserInputBuffer
	add	esp, 4

; 6908 :         return (NULL);

	xor	eax, eax
	pop	edi
	pop	esi

; 6918 : }

	pop	ebp
	ret	0
$LN4@htmlReadFd:

; 6909 :     }
; 6910 :     stream = xmlNewIOInputStream(ctxt, input, XML_CHAR_ENCODING_NONE);

	push	0
	push	esi
	push	edi
	call	_xmlNewIOInputStream
	add	esp, 12					; 0000000cH

; 6911 :     if (stream == NULL) {

	test	eax, eax
	jne	SHORT $LN5@htmlReadFd

; 6912 :         xmlFreeParserInputBuffer(input);

	push	esi
	call	_xmlFreeParserInputBuffer

; 6913 : 	xmlFreeParserCtxt(ctxt);

	push	edi
	call	_xmlFreeParserCtxt
	add	esp, 8
	xor	eax, eax
	pop	edi
	pop	esi

; 6918 : }

	pop	ebp
	ret	0
$LN5@htmlReadFd:

; 6914 :         return (NULL);
; 6915 :     }
; 6916 :     inputPush(ctxt, stream);

	push	eax
	push	edi
	call	_inputPush

; 6917 :     return (htmlDoRead(ctxt, URL, encoding, options, 0));

	push	0
	push	DWORD PTR _options$[ebp]
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _URL$[ebp]
	push	edi
	call	_htmlDoRead
	add	esp, 28					; 0000001cH
	pop	edi
	pop	esi

; 6918 : }

	pop	ebp
	ret	0
$LN7@htmlReadFd:

; 6904 :         return (NULL);

	xor	eax, eax
	pop	esi

; 6918 : }

	pop	ebp
	ret	0
_htmlReadFd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlReadMemory
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_URL$ = 16						; size = 4
_encoding$ = 20						; size = 4
_options$ = 24						; size = 4
_htmlReadMemory PROC					; COMDAT

; 6866 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	call	_xmlInitParser
	push	DWORD PTR _size$[ebp]
	push	DWORD PTR _buffer$[ebp]
	call	_xmlCreateMemoryParserCtxt
	mov	ebx, eax
	add	esp, 8
	test	ebx, ebx
	jne	SHORT $LN2@htmlReadMe
	pop	ebx

; 6877 : }

	pop	ebp
	ret	0
$LN2@htmlReadMe:

; 6867 :     htmlParserCtxtPtr ctxt;
; 6868 : 
; 6869 :     xmlInitParser();
; 6870 :     ctxt = xmlCreateMemoryParserCtxt(buffer, size);
; 6871 :     if (ctxt == NULL)
; 6872 :         return (NULL);
; 6873 :     htmlDefaultSAXHandlerInit();

	call	_htmlDefaultSAXHandlerInit

; 6874 :     if (ctxt->sax != NULL)

	cmp	DWORD PTR [ebx], 0
	je	SHORT $LN3@htmlReadMe

; 6875 :         memcpy(ctxt->sax, &htmlDefaultSAXHandler, sizeof(xmlSAXHandlerV1));

	push	esi
	push	edi
	call	___htmlDefaultSAXHandler
	mov	edi, DWORD PTR [ebx]
	mov	ecx, 28					; 0000001cH
	mov	esi, eax
	rep movsd
	pop	edi
	pop	esi
$LN3@htmlReadMe:

; 6876 :     return (htmlDoRead(ctxt, URL, encoding, options, 0));

	push	0
	push	DWORD PTR _options$[ebp]
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _URL$[ebp]
	push	ebx
	call	_htmlDoRead
	add	esp, 20					; 00000014H
	pop	ebx

; 6877 : }

	pop	ebp
	ret	0
_htmlReadMemory ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlReadFile
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_encoding$ = 12						; size = 4
_options$ = 16						; size = 4
_htmlReadFile PROC					; COMDAT

; 6842 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	call	_xmlInitParser
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _filename$[ebp]
	call	_htmlCreateFileParserCtxt
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	jne	SHORT $LN2@htmlReadFi
	pop	esi

; 6850 : }

	pop	ebp
	ret	0
$LN2@htmlReadFi:
	push	edi

; 6775 :     htmlCtxtUseOptions(ctxt, options);

	push	DWORD PTR _options$[ebp]
	push	esi
	call	_htmlCtxtUseOptions

; 6776 :     ctxt->html = 1;
; 6777 :     if (encoding != NULL) {
; 6778 :         xmlCharEncodingHandlerPtr hdlr;
; 6779 : 
; 6780 : 	hdlr = xmlFindCharEncodingHandler(encoding);
; 6781 : 	if (hdlr != NULL) {
; 6782 : 	    xmlSwitchToEncoding(ctxt, hdlr);
; 6783 : 	    if (ctxt->input->encoding != NULL)
; 6784 : 	      xmlFree((xmlChar *) ctxt->input->encoding);
; 6785 :             ctxt->input->encoding = xmlStrdup((xmlChar *)encoding);
; 6786 :         }
; 6787 :     }
; 6788 :     if ((URL != NULL) && (ctxt->input != NULL) &&
; 6789 :         (ctxt->input->filename == NULL))
; 6790 :         ctxt->input->filename = (char *) xmlStrdup((const xmlChar *) URL);
; 6791 :     htmlParseDocument(ctxt);

	push	esi
	mov	DWORD PTR [esi+32], 1
	call	_htmlParseDocument

; 6792 :     ret = ctxt->myDoc;

	mov	edi, DWORD PTR [esi+8]
	add	esp, 12					; 0000000cH

; 6793 :     ctxt->myDoc = NULL;
; 6794 :     if (!reuse) {
; 6795 :         if ((ctxt->dictNames) &&
; 6796 : 	    (ret != NULL) &&

	cmp	DWORD PTR [esi+364], 0
	mov	DWORD PTR [esi+8], 0
	je	SHORT $LN10@htmlReadFi
	test	edi, edi
	je	SHORT $LN10@htmlReadFi
	mov	ecx, DWORD PTR [edi+80]
	cmp	ecx, DWORD PTR [esi+296]
	jne	SHORT $LN10@htmlReadFi

; 6797 : 	    (ret->dict == ctxt->dict))
; 6798 : 	    ctxt->dict = NULL;

	mov	DWORD PTR [esi+296], 0
$LN10@htmlReadFi:

; 6799 : 	xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt
	add	esp, 4

; 6843 :     htmlParserCtxtPtr ctxt;
; 6844 : 
; 6845 :     xmlInitParser();
; 6846 :     ctxt = htmlCreateFileParserCtxt(filename, encoding);
; 6847 :     if (ctxt == NULL)
; 6848 :         return (NULL);
; 6849 :     return (htmlDoRead(ctxt, NULL, NULL, options, 0));

	mov	eax, edi
	pop	edi
	pop	esi

; 6850 : }

	pop	ebp
	ret	0
_htmlReadFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlReadDoc
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_URL$ = 12						; size = 4
_encoding$ = 16						; size = 4
_options$ = 20						; size = 4
_htmlReadDoc PROC					; COMDAT

; 6817 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _cur$[ebp]
	test	esi, esi
	je	SHORT $LN16@htmlReadDo

; 6818 :     htmlParserCtxtPtr ctxt;
; 6819 : 
; 6820 :     if (cur == NULL)
; 6821 :         return (NULL);
; 6822 : 
; 6823 :     xmlInitParser();

	call	_xmlInitParser

; 5062 :     len = xmlStrlen(cur);

	push	esi
	call	_xmlStrlen

; 5063 :     ctxt = htmlCreateMemoryParserCtxt((char *)cur, len);

	push	eax
	push	esi
	call	_htmlCreateMemoryParserCtxt
	add	esp, 12					; 0000000cH

; 5064 :     if (ctxt == NULL)

	test	eax, eax
	je	SHORT $LN16@htmlReadDo

; 6827 :     return (htmlDoRead(ctxt, URL, encoding, options, 0));

	push	0
	push	DWORD PTR _options$[ebp]
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _URL$[ebp]
	push	eax
	call	_htmlDoRead
	add	esp, 20					; 00000014H
	pop	esi

; 6828 : }

	pop	ebp
	ret	0
$LN16@htmlReadDo:

; 6824 :     ctxt = htmlCreateDocParserCtxt(cur, NULL);
; 6825 :     if (ctxt == NULL)
; 6826 :         return (NULL);

	xor	eax, eax
	pop	esi

; 6828 : }

	pop	ebp
	ret	0
_htmlReadDoc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCtxtUseOptions
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_options$ = 12						; size = 4
_htmlCtxtUseOptions PROC				; COMDAT

; 6698 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@htmlCtxtUs

; 6699 :     if (ctxt == NULL)
; 6700 :         return(-1);

	or	eax, -1

; 6755 : }

	pop	ebp
	ret	0
$LN2@htmlCtxtUs:
	push	ebx

; 6701 : 
; 6702 :     if (options & HTML_PARSE_NOWARNING) {

	mov	ebx, DWORD PTR _options$[ebp]
	test	bl, 64					; 00000040H
	je	SHORT $LN23@htmlCtxtUs

; 6703 :         ctxt->sax->warning = NULL;

	mov	eax, DWORD PTR [ecx]

; 6704 :         ctxt->vctxt.warning = NULL;
; 6705 :         options -= XML_PARSE_NOWARNING;

	sub	ebx, 64					; 00000040H
	mov	DWORD PTR [eax+84], 0

; 6706 : 	ctxt->options |= XML_PARSE_NOWARNING;

	or	DWORD PTR [ecx+360], 64			; 00000040H
	mov	DWORD PTR [ecx+116], 0
$LN23@htmlCtxtUs:

; 6707 :     }
; 6708 :     if (options & HTML_PARSE_NOERROR) {

	test	bl, 32					; 00000020H
	je	SHORT $LN24@htmlCtxtUs

; 6709 :         ctxt->sax->error = NULL;

	mov	eax, DWORD PTR [ecx]

; 6710 :         ctxt->vctxt.error = NULL;
; 6711 :         ctxt->sax->fatalError = NULL;
; 6712 :         options -= XML_PARSE_NOERROR;

	sub	ebx, 32					; 00000020H
	mov	DWORD PTR [eax+88], 0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [ecx+112], 0
	mov	DWORD PTR [eax+92], 0

; 6713 : 	ctxt->options |= XML_PARSE_NOERROR;

	or	DWORD PTR [ecx+360], 32			; 00000020H
$LN24@htmlCtxtUs:

; 6714 :     }
; 6715 :     if (options & HTML_PARSE_PEDANTIC) {

	test	bl, bl
	jns	SHORT $LN5@htmlCtxtUs

; 6716 :         ctxt->pedantic = 1;
; 6717 :         options -= XML_PARSE_PEDANTIC;

	add	ebx, -128				; ffffff80H

; 6718 : 	ctxt->options |= XML_PARSE_PEDANTIC;

	mov	eax, 1
	or	DWORD PTR [ecx+360], 128		; 00000080H

; 6719 :     } else

	jmp	SHORT $LN6@htmlCtxtUs
$LN5@htmlCtxtUs:

; 6720 :         ctxt->pedantic = 0;

	xor	eax, eax
$LN6@htmlCtxtUs:

; 6721 :     if (options & XML_PARSE_NOBLANKS) {

	mov	DWORD PTR [ecx+268], eax
	test	ebx, 256				; 00000100H
	je	SHORT $LN7@htmlCtxtUs

; 6722 :         ctxt->keepBlanks = 0;
; 6723 :         ctxt->sax->ignorableWhitespace = xmlSAX2IgnorableWhitespace;

	mov	eax, DWORD PTR [ecx]

; 6724 :         options -= XML_PARSE_NOBLANKS;

	sub	ebx, 256				; 00000100H
	mov	DWORD PTR [ecx+208], 0
	mov	DWORD PTR [eax+72], OFFSET _xmlSAX2IgnorableWhitespace

; 6725 : 	ctxt->options |= XML_PARSE_NOBLANKS;

	or	DWORD PTR [ecx+360], 256		; 00000100H

; 6726 :     } else

	jmp	SHORT $LN8@htmlCtxtUs
$LN7@htmlCtxtUs:

; 6727 :         ctxt->keepBlanks = 1;

	mov	DWORD PTR [ecx+208], 1
$LN8@htmlCtxtUs:

; 6728 :     if (options & HTML_PARSE_RECOVER) {

	mov	eax, ebx

; 6729 :         ctxt->recovery = 1;
; 6730 : 	options -= HTML_PARSE_RECOVER;
; 6731 :     } else
; 6732 :         ctxt->recovery = 0;
; 6733 :     if (options & HTML_PARSE_COMPACT) {

	lea	edx, DWORD PTR [ebx-1]
	and	eax, 1
	mov	DWORD PTR [ecx+288], eax
	cmove	edx, ebx
	pop	ebx
	test	edx, 65536				; 00010000H
	je	SHORT $LN19@htmlCtxtUs

; 6734 : 	ctxt->options |= HTML_PARSE_COMPACT;

	or	DWORD PTR [ecx+360], 65536		; 00010000H

; 6735 :         options -= HTML_PARSE_COMPACT;

	add	edx, -65536				; ffff0000H
$LN19@htmlCtxtUs:

; 6736 :     }
; 6737 :     if (options & XML_PARSE_HUGE) {

	test	edx, 524288				; 00080000H
	je	SHORT $LN25@htmlCtxtUs

; 6738 : 	ctxt->options |= XML_PARSE_HUGE;

	or	DWORD PTR [ecx+360], 524288		; 00080000H

; 6739 :         options -= XML_PARSE_HUGE;

	sub	edx, 524288				; 00080000H
$LN25@htmlCtxtUs:

; 6740 :     }
; 6741 :     if (options & HTML_PARSE_NODEFDTD) {

	test	dl, 4
	je	SHORT $LN26@htmlCtxtUs

; 6742 : 	ctxt->options |= HTML_PARSE_NODEFDTD;

	or	DWORD PTR [ecx+360], 4

; 6743 :         options -= HTML_PARSE_NODEFDTD;

	sub	edx, 4
$LN26@htmlCtxtUs:

; 6744 :     }
; 6745 :     if (options & HTML_PARSE_IGNORE_ENC) {

	test	edx, 2097152				; 00200000H
	je	SHORT $LN27@htmlCtxtUs

; 6746 : 	ctxt->options |= HTML_PARSE_IGNORE_ENC;

	or	DWORD PTR [ecx+360], 2097152		; 00200000H

; 6747 :         options -= HTML_PARSE_IGNORE_ENC;

	sub	edx, 2097152				; 00200000H
$LN27@htmlCtxtUs:

; 6748 :     }
; 6749 :     if (options & HTML_PARSE_NOIMPLIED) {

	test	edx, 8192				; 00002000H
	je	SHORT $LN15@htmlCtxtUs

; 6750 :         ctxt->options |= HTML_PARSE_NOIMPLIED;

	or	DWORD PTR [ecx+360], 8192		; 00002000H

; 6751 :         options -= HTML_PARSE_NOIMPLIED;

	sub	edx, 8192				; 00002000H
$LN15@htmlCtxtUs:

; 6752 :     }
; 6753 :     ctxt->dictNames = 0;

	mov	DWORD PTR [ecx+364], 0

; 6754 :     return (options);

	mov	eax, edx

; 6755 : }

	pop	ebp
	ret	0
_htmlCtxtUseOptions ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCtxtReset
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlCtxtReset PROC					; COMDAT

; 6606 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	$LN19@htmlCtxtRe

; 6607 :     xmlParserInputPtr input;
; 6608 :     xmlDictPtr dict;
; 6609 : 
; 6610 :     if (ctxt == NULL)
; 6611 :         return;
; 6612 : 
; 6613 :     xmlInitParser();

	push	edi
	call	_xmlInitParser

; 6614 :     dict = ctxt->dict;

	mov	edi, DWORD PTR [esi+296]

; 6615 : 
; 6616 :     while ((input = inputPop(ctxt)) != NULL) { /* Non consuming */

	push	esi
	call	_inputPop
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@htmlCtxtRe
$LL2@htmlCtxtRe:

; 6617 :         xmlFreeInputStream(input);

	push	eax
	call	_xmlFreeInputStream
	push	esi
	call	_inputPop
	add	esp, 8
	test	eax, eax
	jne	SHORT $LL2@htmlCtxtRe
$LN3@htmlCtxtRe:

; 6618 :     }
; 6619 :     ctxt->inputNr = 0;
; 6620 :     ctxt->input = NULL;
; 6621 : 
; 6622 :     ctxt->spaceNr = 0;
; 6623 :     if (ctxt->spaceTab != NULL) {

	mov	eax, DWORD PTR [esi+244]
	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [esi+36], 0
	mov	DWORD PTR [esi+236], 0
	test	eax, eax
	je	SHORT $LN5@htmlCtxtRe

; 6624 : 	ctxt->spaceTab[0] = -1;

	mov	DWORD PTR [eax], -1

; 6625 : 	ctxt->space = &ctxt->spaceTab[0];

	mov	eax, DWORD PTR [esi+244]

; 6626 :     } else {

	jmp	SHORT $LN6@htmlCtxtRe
$LN5@htmlCtxtRe:

; 6627 : 	ctxt->space = NULL;

	xor	eax, eax
$LN6@htmlCtxtRe:

; 6628 :     }
; 6629 : 
; 6630 : 
; 6631 :     ctxt->nodeNr = 0;

	mov	DWORD PTR [esi+232], eax

; 6632 :     ctxt->node = NULL;
; 6633 : 
; 6634 :     ctxt->nameNr = 0;
; 6635 :     ctxt->name = NULL;
; 6636 : 
; 6637 :     DICT_FREE(ctxt->version);

	mov	eax, DWORD PTR [esi+20]
	mov	DWORD PTR [esi+56], 0
	mov	DWORD PTR [esi+52], 0
	mov	DWORD PTR [esi+188], 0
	mov	DWORD PTR [esi+184], 0
	test	eax, eax
	je	SHORT $LN7@htmlCtxtRe
	test	edi, edi
	je	SHORT $LN8@htmlCtxtRe
	push	eax
	push	edi
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@htmlCtxtRe
$LN8@htmlCtxtRe:
	push	DWORD PTR [esi+20]
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN7@htmlCtxtRe:

; 6638 :     ctxt->version = NULL;
; 6639 :     DICT_FREE(ctxt->encoding);

	mov	eax, DWORD PTR [esi+24]
	mov	DWORD PTR [esi+20], 0
	test	eax, eax
	je	SHORT $LN9@htmlCtxtRe
	test	edi, edi
	je	SHORT $LN10@htmlCtxtRe
	push	eax
	push	edi
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@htmlCtxtRe
$LN10@htmlCtxtRe:
	push	DWORD PTR [esi+24]
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN9@htmlCtxtRe:

; 6640 :     ctxt->encoding = NULL;
; 6641 :     DICT_FREE(ctxt->directory);

	mov	eax, DWORD PTR [esi+180]
	mov	DWORD PTR [esi+24], 0
	test	eax, eax
	je	SHORT $LN11@htmlCtxtRe
	test	edi, edi
	je	SHORT $LN12@htmlCtxtRe
	push	eax
	push	edi
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@htmlCtxtRe
$LN12@htmlCtxtRe:
	push	DWORD PTR [esi+180]
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN11@htmlCtxtRe:

; 6642 :     ctxt->directory = NULL;
; 6643 :     DICT_FREE(ctxt->extSubURI);

	mov	eax, DWORD PTR [esi+224]
	mov	DWORD PTR [esi+180], 0
	test	eax, eax
	je	SHORT $LN13@htmlCtxtRe
	test	edi, edi
	je	SHORT $LN14@htmlCtxtRe
	push	eax
	push	edi
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@htmlCtxtRe
$LN14@htmlCtxtRe:
	push	DWORD PTR [esi+224]
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN13@htmlCtxtRe:

; 6644 :     ctxt->extSubURI = NULL;
; 6645 :     DICT_FREE(ctxt->extSubSystem);

	mov	eax, DWORD PTR [esi+228]
	mov	DWORD PTR [esi+224], 0
	test	eax, eax
	je	SHORT $LN15@htmlCtxtRe
	test	edi, edi
	je	SHORT $LN16@htmlCtxtRe
	push	eax
	push	edi
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@htmlCtxtRe
$LN16@htmlCtxtRe:
	push	DWORD PTR [esi+228]
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN15@htmlCtxtRe:

; 6646 :     ctxt->extSubSystem = NULL;
; 6647 :     if (ctxt->myDoc != NULL)

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [esi+228], 0
	pop	edi
	test	eax, eax
	je	SHORT $LN17@htmlCtxtRe

; 6648 :         xmlFreeDoc(ctxt->myDoc);

	push	eax
	call	_xmlFreeDoc
	add	esp, 4
$LN17@htmlCtxtRe:

; 6649 :     ctxt->myDoc = NULL;
; 6650 : 
; 6651 :     ctxt->standalone = -1;
; 6652 :     ctxt->hasExternalSubset = 0;
; 6653 :     ctxt->hasPErefs = 0;
; 6654 :     ctxt->html = 1;
; 6655 :     ctxt->external = 0;
; 6656 :     ctxt->instate = XML_PARSER_START;
; 6657 :     ctxt->token = 0;
; 6658 : 
; 6659 :     ctxt->wellFormed = 1;
; 6660 :     ctxt->nsWellFormed = 1;
; 6661 :     ctxt->disableSAX = 0;
; 6662 :     ctxt->valid = 1;
; 6663 :     ctxt->vctxt.userData = ctxt;
; 6664 :     ctxt->vctxt.error = xmlParserValidityError;
; 6665 :     ctxt->vctxt.warning = xmlParserValidityWarning;
; 6666 :     ctxt->record_info = 0;
; 6667 :     ctxt->nbChars = 0;
; 6668 :     ctxt->checkIndex = 0;
; 6669 :     ctxt->inSubset = 0;
; 6670 :     ctxt->errNo = XML_ERR_OK;
; 6671 :     ctxt->depth = 0;
; 6672 :     ctxt->charset = XML_CHAR_ENCODING_NONE;
; 6673 :     ctxt->catalogs = NULL;
; 6674 :     xmlInitNodeInfoSeq(&ctxt->node_seq);

	lea	eax, DWORD PTR [esi+72]
	mov	DWORD PTR [esi+8], 0
	push	eax
	mov	DWORD PTR [esi+28], -1
	mov	DWORD PTR [esi+88], 0
	mov	DWORD PTR [esi+92], 0
	mov	DWORD PTR [esi+32], 1
	mov	DWORD PTR [esi+96], 0
	mov	DWORD PTR [esi+172], 0
	mov	DWORD PTR [esi+176], 0
	mov	DWORD PTR [esi+12], 1
	mov	DWORD PTR [esi+356], 1
	mov	DWORD PTR [esi+212], 0
	mov	DWORD PTR [esi+100], 1
	mov	DWORD PTR [esi+108], esi
	mov	DWORD PTR [esi+112], OFFSET _xmlParserValidityError
	mov	DWORD PTR [esi+116], OFFSET _xmlParserValidityWarning
	mov	DWORD PTR [esi+68], 0
	mov	DWORD PTR [esi+200], 0
	mov	DWORD PTR [esi+204], 0
	mov	DWORD PTR [esi+216], 0
	mov	DWORD PTR [esi+84], 0
	mov	DWORD PTR [esi+248], 0
	mov	DWORD PTR [esi+256], 0
	mov	DWORD PTR [esi+284], 0
	call	_xmlInitNodeInfoSeq

; 6675 : 
; 6676 :     if (ctxt->attsDefault != NULL) {

	mov	eax, DWORD PTR [esi+348]
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@htmlCtxtRe

; 6677 :         xmlHashFree(ctxt->attsDefault, xmlHashDefaultDeallocator);

	push	OFFSET _xmlHashDefaultDeallocator
	push	eax
	call	_xmlHashFree
	add	esp, 8

; 6678 :         ctxt->attsDefault = NULL;

	mov	DWORD PTR [esi+348], 0
$LN18@htmlCtxtRe:

; 6679 :     }
; 6680 :     if (ctxt->attsSpecial != NULL) {

	mov	eax, DWORD PTR [esi+352]
	test	eax, eax
	je	SHORT $LN19@htmlCtxtRe

; 6681 :         xmlHashFree(ctxt->attsSpecial, NULL);

	push	0
	push	eax
	call	_xmlHashFree
	add	esp, 8

; 6682 :         ctxt->attsSpecial = NULL;

	mov	DWORD PTR [esi+352], 0
$LN19@htmlCtxtRe:
	pop	esi

; 6683 :     }
; 6684 : }

	pop	ebp
	ret	0
_htmlCtxtReset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlFreeParserCtxt
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlFreeParserCtxt PROC				; COMDAT

; 4973 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4

; 4975 : }

	pop	ebp

; 4974 :     xmlFreeParserCtxt(ctxt);

	jmp	_xmlFreeParserCtxt
_htmlFreeParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseChunk
_TEXT	SEGMENT
_base$1$ = -4						; size = 4
_base$1$ = -4						; size = 4
_current$1$ = 8						; size = 4
_cur$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_chunk$ = 12						; size = 4
_size$ = 16						; size = 4
_terminate$ = 20					; size = 4
_htmlParseChunk PROC					; COMDAT

; 6107 :               int terminate) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	$LN3@htmlParseC

; 6108 :     if ((ctxt == NULL) || (ctxt->input == NULL)) {

	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	$LN3@htmlParseC

; 6112 :     }
; 6113 :     if ((size > 0) && (chunk != NULL) && (ctxt->input != NULL) &&
; 6114 :         (ctxt->input->buf != NULL) && (ctxt->instate != XML_PARSER_EOF))  {

	push	ebx
	mov	ebx, DWORD PTR _terminate$[ebp]
	push	edi
	mov	edi, DWORD PTR _size$[ebp]
	test	edi, edi
	jle	SHORT $LN4@htmlParseC
	cmp	DWORD PTR _chunk$[ebp], 0
	je	SHORT $LN4@htmlParseC
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN4@htmlParseC
	cmp	DWORD PTR [esi+172], -1
	je	$LN9@htmlParseC

; 6115 : 	size_t base = xmlBufGetInputBase(ctxt->input->buf->buffer, ctxt->input);

	push	eax
	push	DWORD PTR [ecx+16]
	call	_xmlBufGetInputBase

; 6116 : 	size_t cur = ctxt->input->cur - ctxt->input->base;
; 6117 : 	int res;
; 6118 : 
; 6119 : 	res = xmlParserInputBufferPush(ctxt->input->buf, size, chunk);

	push	DWORD PTR _chunk$[ebp]
	mov	DWORD PTR _base$1$[ebp], eax
	mov	eax, DWORD PTR [esi+36]
	push	edi
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR [eax+12]
	push	DWORD PTR [eax]
	mov	DWORD PTR _cur$1$[ebp], ecx
	call	_xmlParserInputBufferPush
	add	esp, 20					; 00000014H

; 6120 : 	if (res < 0) {

	test	eax, eax
	jns	SHORT $LN6@htmlParseC

; 6121 : 	    ctxt->errNo = XML_PARSER_EOF;

	pop	edi
	pop	ebx
	mov	DWORD PTR [esi+84], -1

; 6122 : 	    ctxt->disableSAX = 1;
; 6123 : 	    return (XML_PARSER_EOF);

	or	eax, -1
	mov	DWORD PTR [esi+212], 1
	pop	esi

; 6168 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@htmlParseC:

; 6124 : 	}
; 6125 :         xmlBufSetInputBaseCur(ctxt->input->buf->buffer, ctxt->input, base, cur);

	push	DWORD PTR _cur$1$[ebp]
	mov	eax, DWORD PTR [esi+36]
	push	DWORD PTR _base$1$[ebp]
	push	eax
	mov	eax, DWORD PTR [eax]
	push	DWORD PTR [eax+16]
	jmp	SHORT $LN19@htmlParseC
$LN4@htmlParseC:

; 6126 : #ifdef DEBUG_PUSH
; 6127 : 	xmlGenericError(xmlGenericErrorContext, "HPP: pushed %d\n", size);
; 6128 : #endif
; 6129 : 
; 6130 : #if 0
; 6131 : 	if ((terminate) || (ctxt->input->buf->buffer->use > 80))
; 6132 : 	    htmlParseTryOrFinish(ctxt, terminate);
; 6133 : #endif
; 6134 :     } else if (ctxt->instate != XML_PARSER_EOF) {

	cmp	DWORD PTR [esi+172], -1
	je	SHORT $LN9@htmlParseC

; 6135 : 	if ((ctxt->input != NULL) && ctxt->input->buf != NULL) {

	mov	edi, DWORD PTR [eax]
	test	edi, edi
	je	SHORT $LN9@htmlParseC

; 6136 : 	    xmlParserInputBufferPtr in = ctxt->input->buf;
; 6137 : 	    if ((in->encoder != NULL) && (in->buffer != NULL) &&

	cmp	DWORD PTR [edi+12], 0
	je	SHORT $LN9@htmlParseC
	mov	ecx, DWORD PTR [edi+16]
	test	ecx, ecx
	je	SHORT $LN9@htmlParseC
	cmp	DWORD PTR [edi+20], 0
	je	SHORT $LN9@htmlParseC

; 6138 : 		    (in->raw != NULL)) {
; 6139 : 		int nbchars;
; 6140 : 		size_t base = xmlBufGetInputBase(in->buffer, ctxt->input);

	push	eax
	push	ecx
	call	_xmlBufGetInputBase
	mov	DWORD PTR _base$1$[ebp], eax

; 6141 : 		size_t current = ctxt->input->cur - ctxt->input->base;

	mov	eax, DWORD PTR [esi+36]

; 6142 : 
; 6143 : 		nbchars = xmlCharEncInput(in, terminate);

	push	ebx
	push	edi
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _current$1$[ebp], ecx
	call	_xmlCharEncInput
	add	esp, 16					; 00000010H

; 6144 : 		if (nbchars < 0) {

	test	eax, eax
	jns	SHORT $LN10@htmlParseC

; 6145 : 		    htmlParseErr(ctxt, XML_ERR_INVALID_ENCODING,

	push	0
	push	0
	push	OFFSET ??_C@_0P@NFGFPEHN@encoder?5error?6@
	push	81					; 00000051H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 6146 : 			         "encoder error\n", NULL, NULL);
; 6147 : 		    return(XML_ERR_INVALID_ENCODING);

	mov	eax, 81					; 00000051H
	pop	edi
	pop	ebx
	pop	esi

; 6168 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@htmlParseC:

; 6148 : 		}
; 6149 : 		xmlBufSetInputBaseCur(in->buffer, ctxt->input, base, current);

	push	DWORD PTR _current$1$[ebp]
	push	DWORD PTR _base$1$[ebp]
	push	DWORD PTR [esi+36]
	push	DWORD PTR [edi+16]
$LN19@htmlParseC:

; 6150 : 	    }
; 6151 : 	}
; 6152 :     }
; 6153 :     htmlParseTryOrFinish(ctxt, terminate);

	call	_xmlBufSetInputBaseCur
	add	esp, 16					; 00000010H
$LN9@htmlParseC:
	push	ebx
	push	esi
	call	_htmlParseTryOrFinish
	add	esp, 8

; 6154 :     if (terminate) {

	test	ebx, ebx
	je	SHORT $LN11@htmlParseC

; 6155 : 	if ((ctxt->instate != XML_PARSER_EOF) &&
; 6156 : 	    (ctxt->instate != XML_PARSER_EPILOG) &&

	mov	eax, DWORD PTR [esi+172]
	cmp	eax, -1
	je	SHORT $LN14@htmlParseC
	cmp	eax, 14					; 0000000eH
	je	SHORT $LN12@htmlParseC
	cmp	eax, 1
	je	SHORT $LN12@htmlParseC

; 6157 : 	    (ctxt->instate != XML_PARSER_MISC)) {
; 6158 : 	    ctxt->errNo = XML_ERR_DOCUMENT_END;

	mov	DWORD PTR [esi+84], 5

; 6159 : 	    ctxt->wellFormed = 0;

	mov	DWORD PTR [esi+12], 0
$LN12@htmlParseC:

; 6160 : 	}
; 6161 : 	if (ctxt->instate != XML_PARSER_EOF) {
; 6162 : 	    if ((ctxt->sax) && (ctxt->sax->endDocument != NULL))

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN14@htmlParseC
	mov	ecx, DWORD PTR [eax+52]
	test	ecx, ecx
	je	SHORT $LN14@htmlParseC

; 6163 : 		ctxt->sax->endDocument(ctxt->userData);

	push	DWORD PTR [esi+4]
	call	ecx
	add	esp, 4
$LN14@htmlParseC:

; 6164 : 	}
; 6165 : 	ctxt->instate = XML_PARSER_EOF;

	mov	DWORD PTR [esi+172], -1
$LN11@htmlParseC:

; 6166 :     }
; 6167 :     return((xmlParserErrors) ctxt->errNo);

	mov	eax, DWORD PTR [esi+84]
	pop	edi
	pop	ebx
	pop	esi

; 6168 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@htmlParseC:

; 6109 : 	htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0BP@LLMIGGGN@htmlParseChunk?3?5context?5error?6@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 6110 : 		     "htmlParseChunk: context error\n", NULL, NULL);
; 6111 : 	return(XML_ERR_INTERNAL_ERROR);

	mov	eax, 1
	pop	esi

; 6168 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseChunk ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCreatePushParserCtxt
_TEXT	SEGMENT
_buf$1$ = -4						; size = 4
_sax$ = 8						; size = 4
_user_data$ = 12					; size = 4
_chunk$ = 16						; size = 4
_size$ = 20						; size = 4
_filename$ = 24						; size = 4
_enc$ = 28						; size = 4
_htmlCreatePushParserCtxt PROC				; COMDAT

; 6194 : 			 xmlCharEncoding enc) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	call	_xmlInitParser
	mov	esi, DWORD PTR _enc$[ebp]
	push	esi
	call	_xmlAllocParserInputBuffer
	mov	edi, eax
	add	esp, 4
	mov	DWORD PTR _buf$1$[ebp], edi
	test	edi, edi
	jne	SHORT $LN2@htmlCreate

; 6262 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@htmlCreate:
	push	ebx

; 6195 :     htmlParserCtxtPtr ctxt;
; 6196 :     htmlParserInputPtr inputStream;
; 6197 :     xmlParserInputBufferPtr buf;
; 6198 : 
; 6199 :     xmlInitParser();
; 6200 : 
; 6201 :     buf = xmlAllocParserInputBuffer(enc);
; 6202 :     if (buf == NULL) return(NULL);
; 6203 : 
; 6204 :     ctxt = htmlNewParserCtxt();

	call	_htmlNewParserCtxt
	mov	ebx, eax

; 6205 :     if (ctxt == NULL) {

	test	ebx, ebx
	jne	SHORT $LN3@htmlCreate

; 6206 : 	xmlFreeParserInputBuffer(buf);

	push	edi
	call	_xmlFreeParserInputBuffer
	add	esp, 4

; 6207 : 	return(NULL);

	xor	eax, eax
	pop	ebx
	pop	edi

; 6262 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@htmlCreate:

; 6208 :     }
; 6209 :     if(enc==XML_CHAR_ENCODING_UTF8 || buf->encoder)

	cmp	esi, 1
	je	SHORT $LN5@htmlCreate
	cmp	DWORD PTR [edi+12], 0
	je	SHORT $LN4@htmlCreate
$LN5@htmlCreate:

; 6210 : 	ctxt->charset=XML_CHAR_ENCODING_UTF8;

	mov	DWORD PTR [ebx+256], 1
$LN4@htmlCreate:

; 6211 :     if (sax != NULL) {

	cmp	DWORD PTR _sax$[ebp], 0
	je	SHORT $LN9@htmlCreate

; 6212 : 	if (ctxt->sax != (xmlSAXHandlerPtr) &htmlDefaultSAXHandler)

	mov	esi, DWORD PTR [ebx]
	call	___htmlDefaultSAXHandler
	cmp	esi, eax
	je	SHORT $LN7@htmlCreate

; 6213 : 	    xmlFree(ctxt->sax);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN7@htmlCreate:

; 6214 : 	ctxt->sax = (htmlSAXHandlerPtr) xmlMalloc(sizeof(htmlSAXHandler));

	push	128					; 00000080H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	mov	DWORD PTR [ebx], eax

; 6215 : 	if (ctxt->sax == NULL) {

	test	eax, eax
	jne	SHORT $LN8@htmlCreate

; 6216 : 	    xmlFree(buf);

	push	edi
	call	DWORD PTR _xmlFree

; 6217 : 	    xmlFree(ctxt);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 8

; 6218 : 	    return(NULL);

	xor	eax, eax
	pop	ebx
	pop	edi

; 6262 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@htmlCreate:

; 6219 : 	}
; 6220 : 	memcpy(ctxt->sax, sax, sizeof(htmlSAXHandler));

	mov	esi, DWORD PTR _sax$[ebp]
	mov	edi, eax

; 6221 : 	if (user_data != NULL)

	mov	eax, DWORD PTR _user_data$[ebp]
	mov	ecx, 32					; 00000020H
	rep movsd
	mov	edi, DWORD PTR _buf$1$[ebp]
	test	eax, eax
	je	SHORT $LN9@htmlCreate

; 6222 : 	    ctxt->userData = user_data;

	mov	DWORD PTR [ebx+4], eax
$LN9@htmlCreate:

; 6223 :     }
; 6224 :     if (filename == NULL) {

	mov	eax, DWORD PTR _filename$[ebp]
	test	eax, eax
	je	SHORT $LN11@htmlCreate
$LN10@htmlCreate:

; 6225 : 	ctxt->directory = NULL;
; 6226 :     } else {
; 6227 :         ctxt->directory = xmlParserGetDirectory(filename);

	push	eax
	call	_xmlParserGetDirectory
	add	esp, 4
$LN11@htmlCreate:

; 2190 :     input = (xmlParserInputPtr) xmlMalloc(sizeof(htmlParserInput));

	push	60					; 0000003cH
	mov	DWORD PTR [ebx+180], eax
	call	DWORD PTR _xmlMalloc
	mov	esi, eax
	add	esp, 4

; 2191 :     if (input == NULL) {

	test	esi, esi
	jne	SHORT $LN18@htmlCreate

; 79   :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR [ebx+212], eax
	je	SHORT $LN21@htmlCreate
	cmp	DWORD PTR [ebx+172], -1
	je	SHORT $LN26@htmlCreate
$LN21@htmlCreate:

; 80   :         (ctxt->instate == XML_PARSER_EOF))
; 81   : 	return;
; 82   :     if (ctxt != NULL) {
; 83   :         ctxt->errNo = XML_ERR_NO_MEMORY;
; 84   :         ctxt->instate = XML_PARSER_EOF;
; 85   :         ctxt->disableSAX = 1;
; 86   :     }
; 87   :     if (extra)
; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0CG@CPFGJCJF@couldn?8t?5allocate?5a?5new?5input?5s@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0CG@CPFGJCJF@couldn?8t?5allocate?5a?5new?5input?5s@
	push	0
	push	0
	push	3
	push	2
	push	1
	push	0
	push	ebx
	push	0
	push	0
	push	0
	mov	DWORD PTR [ebx+84], 2
	mov	DWORD PTR [ebx+172], -1
	mov	DWORD PTR [ebx+212], 1
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
$LN26@htmlCreate:

; 6228 :     }
; 6229 : 
; 6230 :     inputStream = htmlNewInputStream(ctxt);
; 6231 :     if (inputStream == NULL) {
; 6232 : 	xmlFreeParserCtxt(ctxt);

	push	ebx
	call	_xmlFreeParserCtxt

; 6233 : 	xmlFree(buf);

	push	edi
	call	DWORD PTR _xmlFree
	add	esp, 8

; 6234 : 	return(NULL);

	xor	eax, eax
	pop	ebx
	pop	edi

; 6262 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@htmlCreate:

; 6235 :     }
; 6236 : 
; 6237 :     if (filename == NULL)

	mov	eax, DWORD PTR _filename$[ebp]

; 2195 :     memset(input, 0, sizeof(htmlParserInput));

	mov	DWORD PTR [esi+20], 0
	mov	DWORD PTR [esi+44], 0
	mov	DWORD PTR [esi+52], 0
	mov	DWORD PTR [esi+56], 0

; 2196 :     input->filename = NULL;

	mov	DWORD PTR [esi+4], 0

; 2197 :     input->directory = NULL;

	mov	DWORD PTR [esi+8], 0

; 2198 :     input->base = NULL;

	mov	DWORD PTR [esi+12], 0

; 2199 :     input->cur = NULL;

	mov	DWORD PTR [esi+16], 0

; 2200 :     input->buf = NULL;
; 2201 :     input->line = 1;

	mov	DWORD PTR [esi+28], 1

; 2202 :     input->col = 1;

	mov	DWORD PTR [esi+32], 1

; 2203 :     input->buf = NULL;

	mov	DWORD PTR [esi], 0

; 2204 :     input->free = NULL;

	mov	DWORD PTR [esi+40], 0

; 2205 :     input->version = NULL;

	mov	DWORD PTR [esi+48], 0

; 2206 :     input->consumed = 0;

	mov	DWORD PTR [esi+36], 0

; 2207 :     input->length = 0;

	mov	DWORD PTR [esi+24], 0

; 6235 :     }
; 6236 : 
; 6237 :     if (filename == NULL)

	test	eax, eax
	je	SHORT $LN14@htmlCreate
$LN13@htmlCreate:

; 6238 : 	inputStream->filename = NULL;
; 6239 :     else
; 6240 : 	inputStream->filename = (char *)

	push	eax
	call	_xmlCanonicPath
	add	esp, 4
$LN14@htmlCreate:

; 6241 : 	    xmlCanonicPath((const xmlChar *) filename);
; 6242 :     inputStream->buf = buf;

	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi], edi

; 6243 :     xmlBufResetInput(buf->buffer, inputStream);

	push	esi
	push	DWORD PTR [edi+16]
	call	_xmlBufResetInput

; 6244 : 
; 6245 :     inputPush(ctxt, inputStream);

	push	esi
	push	ebx
	call	_inputPush
	add	esp, 16					; 00000010H

; 6246 : 
; 6247 :     if ((size > 0) && (chunk != NULL) && (ctxt->input != NULL) &&

	cmp	DWORD PTR _size$[ebp], 0
	jle	SHORT $LN15@htmlCreate
	cmp	DWORD PTR _chunk$[ebp], 0
	je	SHORT $LN15@htmlCreate
	mov	eax, DWORD PTR [ebx+36]
	test	eax, eax
	je	SHORT $LN15@htmlCreate
	mov	ecx, DWORD PTR [eax]
	test	ecx, ecx
	je	SHORT $LN15@htmlCreate

; 6248 :         (ctxt->input->buf != NULL))  {
; 6249 : 	size_t base = xmlBufGetInputBase(ctxt->input->buf->buffer, ctxt->input);

	push	eax
	push	DWORD PTR [ecx+16]
	call	_xmlBufGetInputBase

; 6250 : 	size_t cur = ctxt->input->cur - ctxt->input->base;

	mov	ecx, DWORD PTR [ebx+36]
	mov	edi, eax

; 6251 : 
; 6252 : 	xmlParserInputBufferPush(ctxt->input->buf, size, chunk);

	push	DWORD PTR _chunk$[ebp]
	push	DWORD PTR _size$[ebp]
	mov	esi, DWORD PTR [ecx+16]
	push	DWORD PTR [ecx]
	sub	esi, DWORD PTR [ecx+12]
	call	_xmlParserInputBufferPush

; 6253 : 
; 6254 :         xmlBufSetInputBaseCur(ctxt->input->buf->buffer, ctxt->input, base, cur);

	mov	eax, DWORD PTR [ebx+36]
	push	esi
	push	edi
	push	eax
	mov	eax, DWORD PTR [eax]
	push	DWORD PTR [eax+16]
	call	_xmlBufSetInputBaseCur
	add	esp, 36					; 00000024H
$LN15@htmlCreate:

; 6255 : #ifdef DEBUG_PUSH
; 6256 : 	xmlGenericError(xmlGenericErrorContext, "HPP: pushed %d\n", size);
; 6257 : #endif
; 6258 :     }
; 6259 :     ctxt->progressive = 1;

	mov	DWORD PTR [ebx+292], 1

; 6260 : 
; 6261 :     return(ctxt);

	mov	eax, ebx
	pop	ebx
	pop	edi

; 6262 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlCreatePushParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlHandleOmittedElem
_TEXT	SEGMENT
_val$ = 8						; size = 4
_htmlHandleOmittedElem PROC				; COMDAT

; 6462 : htmlHandleOmittedElem(int val) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _htmlOmittedDefaultValue
	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _htmlOmittedDefaultValue, ecx

; 6463 :     int old = htmlOmittedDefaultValue;
; 6464 : 
; 6465 :     htmlOmittedDefaultValue = val;
; 6466 :     return(old);
; 6467 : }

	pop	ebp
	ret	0
_htmlHandleOmittedElem ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlIsScriptAttribute
_TEXT	SEGMENT
_name$ = 8						; size = 4
_htmlIsScriptAttribute PROC				; COMDAT

; 1593 : htmlIsScriptAttribute(const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _name$[ebp]
	test	edi, edi
	je	SHORT $LN7@htmlIsScri

; 1594 :     unsigned int i;
; 1595 : 
; 1596 :     if (name == NULL)
; 1597 :       return(0);
; 1598 :     /*
; 1599 :      * all script attributes start with 'on'
; 1600 :      */
; 1601 :     if ((name[0] != 'o') || (name[1] != 'n'))

	cmp	BYTE PTR [edi], 111			; 0000006fH
	jne	SHORT $LN7@htmlIsScri
	cmp	BYTE PTR [edi+1], 110			; 0000006eH
	jne	SHORT $LN7@htmlIsScri

; 1603 :     for (i = 0;

	xor	esi, esi
$LL4@htmlIsScri:

; 1605 : 	 i++) {
; 1606 : 	if (xmlStrEqual(name, (const xmlChar *) htmlScriptAttributes[i]))

	push	DWORD PTR _htmlScriptAttributes[esi]
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@htmlIsScri

; 1604 : 	 i < sizeof(htmlScriptAttributes)/sizeof(htmlScriptAttributes[0]);

	add	esi, 4
	cmp	esi, 72					; 00000048H
	jb	SHORT $LL4@htmlIsScri
$LN7@htmlIsScri:
	pop	edi

; 1602 :       return(0);

	xor	eax, eax

; 1608 :     }
; 1609 :     return(0);
; 1610 : }

	pop	esi
	pop	ebp
	ret	0
$LN11@htmlIsScri:
	pop	edi

; 1607 : 	    return(1);

	mov	eax, 1

; 1608 :     }
; 1609 :     return(0);
; 1610 : }

	pop	esi
	pop	ebp
	ret	0
_htmlIsScriptAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlEncodeEntities
_TEXT	SEGMENT
_nbuf$1 = -32						; size = 16
_inend$1$ = -16						; size = 4
_instart$1$ = -12					; size = 4
_outstart$1$ = -8					; size = 4
_processed$1$ = -4					; size = 4
_outend$1$ = 8						; size = 4
_out$ = 8						; size = 4
_outlen$ = 12						; size = 4
_in$ = 16						; size = 4
_inlen$ = 20						; size = 4
_quoteChar$ = 24					; size = 4
_htmlEncodeEntities PROC				; COMDAT

; 2092 : 		   const unsigned char* in, int *inlen, int quoteChar) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _in$[ebp]
	mov	ecx, esi
	mov	edi, DWORD PTR _out$[ebp]
	mov	DWORD PTR _processed$1$[ebp], ecx
	mov	DWORD PTR _outstart$1$[ebp], edi
	mov	DWORD PTR _instart$1$[ebp], esi
	test	edi, edi
	je	$LN7@htmlEncode

; 2093 :     const unsigned char* processed = in;
; 2094 :     const unsigned char* outend;
; 2095 :     const unsigned char* outstart = out;
; 2096 :     const unsigned char* instart = in;
; 2097 :     const unsigned char* inend;
; 2098 :     unsigned int c, d;
; 2099 :     int trailing;
; 2100 : 
; 2101 :     if ((out == NULL) || (outlen == NULL) || (inlen == NULL) || (in == NULL))

	mov	eax, DWORD PTR _outlen$[ebp]
	test	eax, eax
	je	$LN7@htmlEncode
	cmp	DWORD PTR _inlen$[ebp], 0
	je	$LN7@htmlEncode
	test	esi, esi
	je	$LN7@htmlEncode

; 2103 :     outend = out + (*outlen);

	mov	eax, DWORD PTR [eax]
	add	eax, edi
	mov	DWORD PTR _outend$1$[ebp], eax

; 2104 :     inend = in + (*inlen);

	mov	eax, DWORD PTR _inlen$[ebp]
	push	ebx
	mov	eax, DWORD PTR [eax]
	add	eax, esi
	mov	DWORD PTR _inend$1$[ebp], eax

; 2105 :     while (in < inend) {

	cmp	esi, eax
	jae	$LN3@htmlEncode
$LL2@htmlEncode:

; 2106 : 	d = *in++;

	movzx	ebx, BYTE PTR [esi]
	inc	esi
	mov	DWORD PTR _in$[ebp], esi

; 2107 : 	if      (d < 0x80)  { c= d; trailing= 0; }

	cmp	ebx, 128				; 00000080H
	jae	SHORT $LN8@htmlEncode
	xor	edx, edx
	jmp	SHORT $LN17@htmlEncode
$LN8@htmlEncode:

; 2108 : 	else if (d < 0xC0) {

	cmp	ebx, 192				; 000000c0H
	jb	$LN16@htmlEncode

; 2109 : 	    /* trailing byte in leading position */
; 2110 : 	    *outlen = out - outstart;
; 2111 : 	    *inlen = processed - instart;
; 2112 : 	    return(-2);
; 2113 :         } else if (d < 0xE0)  { c= d & 0x1F; trailing= 1; }

	cmp	ebx, 224				; 000000e0H
	jae	SHORT $LN12@htmlEncode
	and	ebx, 31					; 0000001fH
	mov	edx, 1
	jmp	SHORT $LN17@htmlEncode
$LN12@htmlEncode:

; 2114 :         else if (d < 0xF0)  { c= d & 0x0F; trailing= 2; }

	cmp	ebx, 240				; 000000f0H
	jae	SHORT $LN14@htmlEncode
	and	ebx, 15					; 0000000fH
	mov	edx, 2
	jmp	SHORT $LN17@htmlEncode
$LN14@htmlEncode:

; 2115 :         else if (d < 0xF8)  { c= d & 0x07; trailing= 3; }

	cmp	ebx, 248				; 000000f8H
	jae	$LN16@htmlEncode
	and	ebx, 7
	mov	edx, 3
$LN17@htmlEncode:

; 2120 : 	    return(-2);
; 2121 : 	}
; 2122 : 
; 2123 : 	if (inend - in < trailing)

	sub	eax, esi
	cmp	eax, edx
	jl	$LN3@htmlEncode

; 2124 : 	    break;
; 2125 : 
; 2126 : 	while (trailing--) {

	test	edx, edx
	je	SHORT $LN34@htmlEncode
$LL4@htmlEncode:

; 2127 : 	    if (((d= *in++) & 0xC0) != 0x80) {

	movzx	ecx, BYTE PTR [esi]
	dec	edx
	mov	eax, ecx
	inc	esi
	and	al, 192					; 000000c0H
	mov	DWORD PTR _in$[ebp], esi
	cmp	al, 128					; 00000080H
	jne	$LN42@htmlEncode

; 2128 : 		*outlen = out - outstart;
; 2129 : 		*inlen = processed - instart;
; 2130 : 		return(-2);
; 2131 : 	    }
; 2132 : 	    c <<= 6;
; 2133 : 	    c |= d & 0x3F;

	and	ecx, 63					; 0000003fH
	shl	ebx, 6
	or	ebx, ecx
	test	edx, edx
	jne	SHORT $LL4@htmlEncode
$LN34@htmlEncode:

; 2134 : 	}
; 2135 : 
; 2136 : 	/* assertion: c is a single UTF-4 value */
; 2137 : 	if ((c < 0x80) && (c != (unsigned int) quoteChar) &&
; 2138 : 	    (c != '&') && (c != '<') && (c != '>')) {

	cmp	ebx, 128				; 00000080H
	jae	SHORT $LN20@htmlEncode
	cmp	ebx, DWORD PTR _quoteChar$[ebp]
	je	SHORT $LN20@htmlEncode
	cmp	ebx, 38					; 00000026H
	je	SHORT $LN20@htmlEncode
	cmp	ebx, 60					; 0000003cH
	je	SHORT $LN20@htmlEncode
	cmp	ebx, 62					; 0000003eH
	je	SHORT $LN20@htmlEncode

; 2139 : 	    if (out >= outend)

	cmp	edi, DWORD PTR _outend$1$[ebp]
	jae	SHORT $LN3@htmlEncode

; 2140 : 		break;
; 2141 : 	    *out++ = c;

	mov	BYTE PTR [edi], bl

; 2142 : 	} else {

	jmp	SHORT $LN21@htmlEncode
$LN20@htmlEncode:

; 2143 : 	    const htmlEntityDesc * ent;
; 2144 : 	    const char *cp;
; 2145 : 	    char nbuf[16];
; 2146 : 	    int len;
; 2147 : 
; 2148 : 	    /*
; 2149 : 	     * Try to lookup a predefined HTML entity for it
; 2150 : 	     */
; 2151 : 	    ent = htmlEntityValueLookup(c);

	push	ebx
	call	_htmlEntityValueLookup
	add	esp, 4

; 2152 : 	    if (ent == NULL) {

	test	eax, eax
	jne	SHORT $LN23@htmlEncode

; 2153 : 		snprintf(nbuf, sizeof(nbuf), "#%u", c);

	push	ebx
	push	OFFSET ??_C@_03PCCJIL@?$CD?$CFu@
	lea	eax, DWORD PTR _nbuf$1[ebp]
	push	16					; 00000010H
	push	eax
	call	_snprintf
	add	esp, 16					; 00000010H

; 2154 : 		cp = nbuf;

	lea	ecx, DWORD PTR _nbuf$1[ebp]

; 2155 : 	    }

	jmp	SHORT $LN24@htmlEncode
$LN23@htmlEncode:

; 2156 : 	    else
; 2157 : 		cp = ent->name;

	mov	ecx, DWORD PTR [eax+4]
$LN24@htmlEncode:

; 2158 : 	    len = strlen(cp);

	mov	esi, ecx
	lea	edx, DWORD PTR [esi+1]
	npad	6
$LL41@htmlEncode:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL41@htmlEncode
	sub	esi, edx

; 2159 : 	    if (out + 2 + len > outend)

	lea	eax, DWORD PTR [edi+2]
	add	eax, esi
	cmp	eax, DWORD PTR _outend$1$[ebp]
	ja	SHORT $LN3@htmlEncode

; 2160 : 		break;
; 2161 : 	    *out++ = '&';
; 2162 : 	    memcpy(out, cp, len);

	push	esi
	mov	BYTE PTR [edi], 38			; 00000026H
	inc	edi
	push	ecx
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2163 : 	    out += len;
; 2164 : 	    *out++ = ';';

	mov	BYTE PTR [edi+esi], 59			; 0000003bH
	add	edi, esi
	mov	esi, DWORD PTR _in$[ebp]
$LN21@htmlEncode:

; 2165 : 	}
; 2166 : 	processed = in;

	mov	eax, DWORD PTR _inend$1$[ebp]
	inc	edi
	mov	ecx, esi
	mov	DWORD PTR _processed$1$[ebp], ecx
	cmp	esi, eax
	jb	$LL2@htmlEncode
$LN3@htmlEncode:

; 2167 :     }
; 2168 :     *outlen = out - outstart;

	mov	eax, DWORD PTR _outlen$[ebp]
	sub	edi, DWORD PTR _outstart$1$[ebp]

; 2169 :     *inlen = processed - instart;

	mov	edx, DWORD PTR _inlen$[ebp]
	pop	ebx
	mov	DWORD PTR [eax], edi
	mov	eax, DWORD PTR _processed$1$[ebp]
	sub	eax, DWORD PTR _instart$1$[ebp]
	pop	edi
	mov	DWORD PTR [edx], eax

; 2170 :     return(0);

	xor	eax, eax

; 2171 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN42@htmlEncode:

; 2127 : 	    if (((d= *in++) & 0xC0) != 0x80) {

	mov	ecx, DWORD PTR _processed$1$[ebp]
$LN16@htmlEncode:

; 2116 : 	else {
; 2117 : 	    /* no chance for this in Ascii */
; 2118 : 	    *outlen = out - outstart;

	mov	eax, DWORD PTR _outlen$[ebp]
	sub	edi, DWORD PTR _outstart$1$[ebp]

; 2119 : 	    *inlen = processed - instart;

	sub	ecx, DWORD PTR _instart$1$[ebp]
	pop	ebx
	mov	DWORD PTR [eax], edi
	mov	eax, DWORD PTR _inlen$[ebp]
	pop	edi

; 2171 : }

	pop	esi
	mov	DWORD PTR [eax], ecx
	mov	eax, -2					; fffffffeH
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@htmlEncode:
	pop	edi

; 2102 :         return(-1);

	or	eax, -1

; 2171 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlEncodeEntities ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _UTF8ToHtml
_TEXT	SEGMENT
_nbuf$1 = -32						; size = 16
_inend$1$ = -16						; size = 4
_instart$1$ = -12					; size = 4
_outstart$1$ = -8					; size = 4
_outend$1$ = -4						; size = 4
_out$ = 8						; size = 4
_outlen$ = 12						; size = 4
_processed$1$ = 16					; size = 4
_in$ = 16						; size = 4
_inlen$ = 20						; size = 4
_UTF8ToHtml PROC					; COMDAT

; 1988 :               const unsigned char* in, int *inlen) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _in$[ebp]
	mov	edx, esi
	mov	ecx, DWORD PTR _out$[ebp]
	mov	DWORD PTR _processed$1$[ebp], edx
	mov	DWORD PTR _outstart$1$[ebp], ecx
	mov	DWORD PTR _instart$1$[ebp], esi
	test	ecx, ecx
	je	$LN8@UTF8ToHtml

; 1989 :     const unsigned char* processed = in;
; 1990 :     const unsigned char* outend;
; 1991 :     const unsigned char* outstart = out;
; 1992 :     const unsigned char* instart = in;
; 1993 :     const unsigned char* inend;
; 1994 :     unsigned int c, d;
; 1995 :     int trailing;
; 1996 : 
; 1997 :     if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);

	mov	eax, DWORD PTR _outlen$[ebp]
	test	eax, eax
	je	$LN8@UTF8ToHtml
	mov	edi, DWORD PTR _inlen$[ebp]
	test	edi, edi
	je	$LN8@UTF8ToHtml

; 1998 :     if (in == NULL) {

	test	esi, esi
	jne	SHORT $LN9@UTF8ToHtml

; 1999 :         /*
; 2000 : 	 * initialization nothing to do
; 2001 : 	 */
; 2002 : 	*outlen = 0;

	mov	DWORD PTR [eax], esi

; 2003 : 	*inlen = 0;
; 2004 : 	return(0);

	xor	eax, eax
	mov	DWORD PTR [edi], esi
	pop	edi

; 2071 :     return(0);
; 2072 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@UTF8ToHtml:

; 2005 :     }
; 2006 :     inend = in + (*inlen);

	mov	edi, DWORD PTR [edi]

; 2007 :     outend = out + (*outlen);

	mov	eax, DWORD PTR [eax]
	add	edi, esi
	add	eax, ecx
	mov	DWORD PTR _inend$1$[ebp], edi
	mov	DWORD PTR _outend$1$[ebp], eax
	push	ebx

; 2008 :     while (in < inend) {

	cmp	esi, edi
	jae	$LN3@UTF8ToHtml
	npad	8
$LL2@UTF8ToHtml:

; 2009 : 	d = *in++;

	movzx	ebx, BYTE PTR [esi]
	inc	esi

; 2010 : 	if      (d < 0x80)  { c= d; trailing= 0; }

	cmp	ebx, 128				; 00000080H
	jae	SHORT $LN10@UTF8ToHtml
	xor	edx, edx
	jmp	SHORT $LN19@UTF8ToHtml
$LN10@UTF8ToHtml:

; 2011 : 	else if (d < 0xC0) {

	cmp	ebx, 192				; 000000c0H
	jb	$LN18@UTF8ToHtml

; 2012 : 	    /* trailing byte in leading position */
; 2013 : 	    *outlen = out - outstart;
; 2014 : 	    *inlen = processed - instart;
; 2015 : 	    return(-2);
; 2016 :         } else if (d < 0xE0)  { c= d & 0x1F; trailing= 1; }

	cmp	ebx, 224				; 000000e0H
	jae	SHORT $LN14@UTF8ToHtml
	and	ebx, 31					; 0000001fH
	mov	edx, 1
	jmp	SHORT $LN19@UTF8ToHtml
$LN14@UTF8ToHtml:

; 2017 :         else if (d < 0xF0)  { c= d & 0x0F; trailing= 2; }

	cmp	ebx, 240				; 000000f0H
	jae	SHORT $LN16@UTF8ToHtml
	and	ebx, 15					; 0000000fH
	mov	edx, 2
	jmp	SHORT $LN19@UTF8ToHtml
$LN16@UTF8ToHtml:

; 2018 :         else if (d < 0xF8)  { c= d & 0x07; trailing= 3; }

	cmp	ebx, 248				; 000000f8H
	jae	$LN18@UTF8ToHtml
	and	ebx, 7
	mov	edx, 3
$LN19@UTF8ToHtml:

; 2023 : 	    return(-2);
; 2024 : 	}
; 2025 : 
; 2026 : 	if (inend - in < trailing) {

	mov	eax, edi
	sub	eax, esi
	cmp	eax, edx
	jl	$LN47@UTF8ToHtml

; 2027 : 	    break;
; 2028 : 	}
; 2029 : 
; 2030 : 	for ( ; trailing; trailing--) {

	test	edx, edx
	je	SHORT $LN32@UTF8ToHtml
$LL6@UTF8ToHtml:

; 2031 : 	    if ((in >= inend) || (((d= *in++) & 0xC0) != 0x80))

	cmp	esi, edi
	jae	SHORT $LN44@UTF8ToHtml
	movzx	ecx, BYTE PTR [esi]
	inc	esi
	mov	eax, ecx
	and	al, 192					; 000000c0H
	cmp	al, 128					; 00000080H
	jne	SHORT $LN44@UTF8ToHtml

; 2032 : 		break;
; 2033 : 	    c <<= 6;
; 2034 : 	    c |= d & 0x3F;

	and	ecx, 63					; 0000003fH
	shl	ebx, 6
	or	ebx, ecx
	sub	edx, 1
	jne	SHORT $LL6@UTF8ToHtml
$LN44@UTF8ToHtml:
	mov	ecx, DWORD PTR _out$[ebp]
$LN32@UTF8ToHtml:

; 2035 : 	}
; 2036 : 
; 2037 : 	/* assertion: c is a single UTF-4 value */
; 2038 : 	if (c < 0x80) {

	cmp	ebx, 128				; 00000080H
	jae	SHORT $LN23@UTF8ToHtml

; 2039 : 	    if (out + 1 >= outend)

	lea	eax, DWORD PTR [ecx+1]
	cmp	eax, DWORD PTR _outend$1$[ebp]
	jae	$LN47@UTF8ToHtml

; 2040 : 		break;
; 2041 : 	    *out++ = c;

	mov	BYTE PTR [ecx], bl

; 2042 : 	} else {

	jmp	SHORT $LN24@UTF8ToHtml
$LN23@UTF8ToHtml:

; 2043 : 	    int len;
; 2044 : 	    const htmlEntityDesc * ent;
; 2045 : 	    const char *cp;
; 2046 : 	    char nbuf[16];
; 2047 : 
; 2048 : 	    /*
; 2049 : 	     * Try to lookup a predefined HTML entity for it
; 2050 : 	     */
; 2051 : 
; 2052 : 	    ent = htmlEntityValueLookup(c);

	push	ebx
	call	_htmlEntityValueLookup
	add	esp, 4

; 2053 : 	    if (ent == NULL) {

	test	eax, eax
	jne	SHORT $LN26@UTF8ToHtml

; 2054 : 	      snprintf(nbuf, sizeof(nbuf), "#%u", c);

	push	ebx
	push	OFFSET ??_C@_03PCCJIL@?$CD?$CFu@
	lea	eax, DWORD PTR _nbuf$1[ebp]
	push	16					; 00000010H
	push	eax
	call	_snprintf
	add	esp, 16					; 00000010H

; 2055 : 	      cp = nbuf;

	lea	edx, DWORD PTR _nbuf$1[ebp]

; 2056 : 	    }

	jmp	SHORT $LN27@UTF8ToHtml
$LN26@UTF8ToHtml:

; 2057 : 	    else
; 2058 : 	      cp = ent->name;

	mov	edx, DWORD PTR [eax+4]
$LN27@UTF8ToHtml:

; 2059 : 	    len = strlen(cp);

	mov	edi, edx
	lea	ecx, DWORD PTR [edi+1]
	npad	6
$LL43@UTF8ToHtml:
	mov	al, BYTE PTR [edi]
	inc	edi
	test	al, al
	jne	SHORT $LL43@UTF8ToHtml
	sub	edi, ecx

; 2060 : 	    if (out + 2 + len >= outend)

	mov	ecx, DWORD PTR _out$[ebp]
	lea	eax, DWORD PTR [ecx+2]
	add	eax, edi
	cmp	eax, DWORD PTR _outend$1$[ebp]
	jae	SHORT $LN47@UTF8ToHtml

; 2061 : 		break;
; 2062 : 	    *out++ = '&';
; 2063 : 	    memcpy(out, cp, len);

	push	edi
	mov	BYTE PTR [ecx], 38			; 00000026H
	inc	ecx
	push	edx
	push	ecx
	mov	DWORD PTR _out$[ebp], ecx
	call	_memcpy

; 2064 : 	    out += len;

	mov	ecx, DWORD PTR _out$[ebp]
	add	esp, 12					; 0000000cH
	add	ecx, edi
	mov	edi, DWORD PTR _inend$1$[ebp]

; 2065 : 	    *out++ = ';';

	mov	BYTE PTR [ecx], 59			; 0000003bH
$LN24@UTF8ToHtml:

; 2066 : 	}
; 2067 : 	processed = in;

	inc	ecx
	mov	edx, esi
	mov	DWORD PTR _out$[ebp], ecx
	mov	DWORD PTR _processed$1$[ebp], edx
	cmp	esi, edi
	jb	$LL2@UTF8ToHtml

; 2060 : 	    if (out + 2 + len >= outend)

	jmp	SHORT $LN3@UTF8ToHtml
$LN18@UTF8ToHtml:

; 2019 : 	else {
; 2020 : 	    /* no chance for this in Ascii */
; 2021 : 	    *outlen = out - outstart;

	mov	eax, DWORD PTR _outlen$[ebp]
	sub	ecx, DWORD PTR _outstart$1$[ebp]

; 2022 : 	    *inlen = processed - instart;

	sub	edx, DWORD PTR _instart$1$[ebp]
	pop	ebx
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _inlen$[ebp]
	pop	edi

; 2071 :     return(0);
; 2072 : }

	pop	esi
	mov	DWORD PTR [eax], edx
	mov	eax, -2					; fffffffeH
	mov	esp, ebp
	pop	ebp
	ret	0
$LN47@UTF8ToHtml:

; 2068 :     }
; 2069 :     *outlen = out - outstart;

	mov	edx, DWORD PTR _processed$1$[ebp]
$LN3@UTF8ToHtml:
	mov	eax, DWORD PTR _outlen$[ebp]
	sub	ecx, DWORD PTR _outstart$1$[ebp]

; 2070 :     *inlen = processed - instart;

	sub	edx, DWORD PTR _instart$1$[ebp]
	pop	ebx
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _inlen$[ebp]
	pop	edi

; 2071 :     return(0);
; 2072 : }

	pop	esi
	mov	DWORD PTR [eax], edx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
$LN8@UTF8ToHtml:
	pop	edi

; 1989 :     const unsigned char* processed = in;
; 1990 :     const unsigned char* outend;
; 1991 :     const unsigned char* outstart = out;
; 1992 :     const unsigned char* instart = in;
; 1993 :     const unsigned char* inend;
; 1994 :     unsigned int c, d;
; 1995 :     int trailing;
; 1996 : 
; 1997 :     if ((out == NULL) || (outlen == NULL) || (inlen == NULL)) return(-1);

	or	eax, -1

; 2071 :     return(0);
; 2072 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_UTF8ToHtml ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseFile
_TEXT	SEGMENT
_filename$ = 8						; size = 4
_encoding$ = 12						; size = 4
_htmlParseFile PROC					; COMDAT

; 6448 : htmlParseFile(const char *filename, const char *encoding) {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4

; 6414 :     xmlInitParser();

	call	_xmlInitParser

; 6415 : 
; 6416 :     ctxt = htmlCreateFileParserCtxt(filename, encoding);

	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _filename$[ebp]
	call	_htmlCreateFileParserCtxt
	mov	edi, eax
	add	esp, 8

; 6417 :     if (ctxt == NULL) return(NULL);

	test	edi, edi
	jne	SHORT $LN4@htmlParseF
	pop	edi

; 6450 : }

	pop	ebp
	ret	0
$LN4@htmlParseF:
	push	esi

; 6424 :     htmlParseDocument(ctxt);

	push	edi
	call	_htmlParseDocument

; 6425 : 
; 6426 :     ret = ctxt->myDoc;

	mov	esi, DWORD PTR [edi+8]

; 4974 :     xmlFreeParserCtxt(ctxt);

	push	edi
	call	_xmlFreeParserCtxt
	add	esp, 8

; 6449 :     return(htmlSAXParseFile(filename, encoding, NULL, NULL));

	mov	eax, esi
	pop	esi
	pop	edi

; 6450 : }

	pop	ebp
	ret	0
_htmlParseFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlSAXParseFile
_TEXT	SEGMENT
_ret$1$ = -4						; size = 4
_filename$ = 8						; size = 4
_encoding$ = 12						; size = 4
_sax$ = 16						; size = 4
_userData$ = 20						; size = 4
_htmlSAXParseFile PROC					; COMDAT

; 6409 :                  void *userData) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	xor	ebx, ebx
	call	_xmlInitParser
	push	DWORD PTR _encoding$[ebp]
	push	DWORD PTR _filename$[ebp]
	call	_htmlCreateFileParserCtxt
	mov	esi, eax
	add	esp, 8
	test	esi, esi
	jne	SHORT $LN2@htmlSAXPar

; 6434 : }

	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@htmlSAXPar:
	push	edi

; 6410 :     htmlDocPtr ret;
; 6411 :     htmlParserCtxtPtr ctxt;
; 6412 :     htmlSAXHandlerPtr oldsax = NULL;
; 6413 : 
; 6414 :     xmlInitParser();
; 6415 : 
; 6416 :     ctxt = htmlCreateFileParserCtxt(filename, encoding);
; 6417 :     if (ctxt == NULL) return(NULL);
; 6418 :     if (sax != NULL) {

	mov	edi, DWORD PTR _sax$[ebp]
	test	edi, edi
	je	SHORT $LN3@htmlSAXPar

; 6419 : 	oldsax = ctxt->sax;

	mov	ebx, DWORD PTR [esi]

; 6420 :         ctxt->sax = sax;
; 6421 :         ctxt->userData = userData;

	mov	eax, DWORD PTR _userData$[ebp]
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], eax
$LN3@htmlSAXPar:

; 6422 :     }
; 6423 : 
; 6424 :     htmlParseDocument(ctxt);

	push	esi
	call	_htmlParseDocument

; 6425 : 
; 6426 :     ret = ctxt->myDoc;

	mov	eax, DWORD PTR [esi+8]
	add	esp, 4

; 6427 :     if (sax != NULL) {

	test	edi, edi
	mov	DWORD PTR _ret$1$[ebp], eax
	pop	edi
	je	SHORT $LN4@htmlSAXPar

; 6428 :         ctxt->sax = oldsax;

	mov	DWORD PTR [esi], ebx

; 6429 :         ctxt->userData = NULL;

	mov	DWORD PTR [esi+4], 0
$LN4@htmlSAXPar:

; 4974 :     xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt

; 6430 :     }
; 6431 :     htmlFreeParserCtxt(ctxt);
; 6432 : 
; 6433 :     return(ret);

	mov	eax, DWORD PTR _ret$1$[ebp]

; 4974 :     xmlFreeParserCtxt(ctxt);

	add	esp, 4
	pop	esi

; 6434 : }

	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_htmlSAXParseFile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseDoc
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_encoding$ = 12						; size = 4
_htmlParseDoc PROC					; COMDAT

; 6321 : htmlParseDoc(const xmlChar *cur, const char *encoding) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4

; 6286 :     xmlInitParser();

	call	_xmlInitParser

; 6287 : 
; 6288 :     if (cur == NULL) return(NULL);

	mov	eax, DWORD PTR _cur$[ebp]
	test	eax, eax
	jne	SHORT $LN4@htmlParseD

; 6323 : }

	pop	ebp
	ret	0
$LN4@htmlParseD:
	push	edi

; 6291 :     ctxt = htmlCreateDocParserCtxt(cur, encoding);

	push	DWORD PTR _encoding$[ebp]
	push	eax
	call	_htmlCreateDocParserCtxt
	mov	edi, eax
	add	esp, 8

; 6292 :     if (ctxt == NULL) return(NULL);

	test	edi, edi
	jne	SHORT $LN5@htmlParseD
	pop	edi

; 6323 : }

	pop	ebp
	ret	0
$LN5@htmlParseD:
	push	esi

; 6299 :     htmlParseDocument(ctxt);

	push	edi
	call	_htmlParseDocument

; 6300 :     ret = ctxt->myDoc;

	mov	esi, DWORD PTR [edi+8]

; 4974 :     xmlFreeParserCtxt(ctxt);

	push	edi
	call	_xmlFreeParserCtxt
	add	esp, 8

; 6322 :     return(htmlSAXParseDoc(cur, encoding, NULL, NULL));

	mov	eax, esi
	pop	esi
	pop	edi

; 6323 : }

	pop	ebp
	ret	0
_htmlParseDoc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlSAXParseDoc
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_encoding$ = 12						; size = 4
_sax$ = 16						; size = 4
_userData$ = 20						; size = 4
_htmlSAXParseDoc PROC					; COMDAT

; 6282 :                 htmlSAXHandlerPtr sax, void *userData) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	call	_xmlInitParser
	mov	eax, DWORD PTR _cur$[ebp]
	test	eax, eax
	je	SHORT $LN10@htmlSAXPar

; 6283 :     htmlDocPtr ret;
; 6284 :     htmlParserCtxtPtr ctxt;
; 6285 : 
; 6286 :     xmlInitParser();
; 6287 : 
; 6288 :     if (cur == NULL) return(NULL);
; 6289 : 
; 6290 : 
; 6291 :     ctxt = htmlCreateDocParserCtxt(cur, encoding);

	push	DWORD PTR _encoding$[ebp]
	push	eax
	call	_htmlCreateDocParserCtxt
	mov	esi, eax
	add	esp, 8

; 6292 :     if (ctxt == NULL) return(NULL);

	test	esi, esi
	je	SHORT $LN10@htmlSAXPar

; 6293 :     if (sax != NULL) {

	push	ebx
	push	edi
	mov	edi, DWORD PTR _sax$[ebp]
	test	edi, edi
	je	SHORT $LN4@htmlSAXPar

; 6294 :         if (ctxt->sax != NULL) xmlFree (ctxt->sax);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN5@htmlSAXPar
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN5@htmlSAXPar:

; 6295 :         ctxt->sax = sax;
; 6296 :         ctxt->userData = userData;

	mov	eax, DWORD PTR _userData$[ebp]
	mov	DWORD PTR [esi], edi
	mov	DWORD PTR [esi+4], eax
$LN4@htmlSAXPar:

; 6297 :     }
; 6298 : 
; 6299 :     htmlParseDocument(ctxt);

	push	esi
	call	_htmlParseDocument

; 6300 :     ret = ctxt->myDoc;

	mov	ebx, DWORD PTR [esi+8]
	add	esp, 4

; 6301 :     if (sax != NULL) {

	test	edi, edi
	je	SHORT $LN6@htmlSAXPar

; 6302 : 	ctxt->sax = NULL;

	mov	DWORD PTR [esi], 0

; 6303 : 	ctxt->userData = NULL;

	mov	DWORD PTR [esi+4], 0
$LN6@htmlSAXPar:

; 4974 :     xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt
	add	esp, 4

; 6304 :     }
; 6305 :     htmlFreeParserCtxt(ctxt);
; 6306 : 
; 6307 :     return(ret);

	mov	eax, ebx
	pop	edi
	pop	ebx
	pop	esi

; 6308 : }

	pop	ebp
	ret	0
$LN10@htmlSAXPar:

; 6292 :     if (ctxt == NULL) return(NULL);

	xor	eax, eax
	pop	esi

; 6308 : }

	pop	ebp
	ret	0
_htmlSAXParseDoc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseDocument
_TEXT	SEGMENT
_start$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseDocument PROC					; COMDAT

; 4725 : htmlParseDocument(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	call	_xmlInitParser
	call	_htmlDefaultSAXHandlerInit
	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	$LN7@htmlParseD

; 4726 :     xmlChar start[4];
; 4727 :     xmlCharEncoding enc;
; 4728 :     xmlDtdPtr dtd;
; 4729 : 
; 4730 :     xmlInitParser();
; 4731 : 
; 4732 :     htmlDefaultSAXHandlerInit();
; 4733 : 
; 4734 :     if ((ctxt == NULL) || (ctxt->input == NULL)) {

	mov	ecx, DWORD PTR [esi+36]
	test	ecx, ecx
	je	$LN7@htmlParseD

; 4738 :     }
; 4739 :     ctxt->html = 1;
; 4740 :     ctxt->linenumbers = 1;
; 4741 :     GROW;

	cmp	DWORD PTR [esi+292], 0
	mov	DWORD PTR [esi+32], 1
	mov	DWORD PTR [esi+280], 1
	jne	SHORT $LN8@htmlParseD
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN8@htmlParseD
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN8@htmlParseD:

; 4742 :     /*
; 4743 :      * SAX: beginning of the document processing.
; 4744 :      */
; 4745 :     if ((ctxt->sax) && (ctxt->sax->setDocumentLocator))

	push	edi
	mov	edi, DWORD PTR [esi]
	test	edi, edi
	je	SHORT $LN9@htmlParseD
	cmp	DWORD PTR [edi+44], 0
	je	SHORT $LN9@htmlParseD

; 4746 :         ctxt->sax->setDocumentLocator(ctxt->userData, &xmlDefaultSAXLocator);

	call	___xmlDefaultSAXLocator
	push	eax
	push	DWORD PTR [esi+4]
	mov	eax, DWORD PTR [edi+44]
	call	eax
	add	esp, 8
$LN9@htmlParseD:

; 4747 : 
; 4748 :     if ((ctxt->encoding == (const xmlChar *)XML_CHAR_ENCODING_NONE) &&

	cmp	DWORD PTR [esi+24], 0
	jne	SHORT $LN11@htmlParseD
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR [ecx+16]
	sub	eax, edx
	cmp	eax, 4
	jl	SHORT $LN11@htmlParseD

; 4749 :         ((ctxt->input->end - ctxt->input->cur) >= 4)) {
; 4750 : 	/*
; 4751 : 	 * Get the 4 first bytes and decode the charset
; 4752 : 	 * if enc != XML_CHAR_ENCODING_NONE
; 4753 : 	 * plug some encoding conversion routines.
; 4754 : 	 */
; 4755 : 	start[0] = RAW;

	cmp	DWORD PTR [esi+176], 0
	je	SHORT $LN25@htmlParseD
	or	al, 255					; 000000ffH
	jmp	SHORT $LN26@htmlParseD
$LN25@htmlParseD:
	mov	al, BYTE PTR [edx]
$LN26@htmlParseD:
	mov	BYTE PTR _start$[ebp], al

; 4756 : 	start[1] = NXT(1);

	mov	eax, DWORD PTR [ecx+16]

; 4757 : 	start[2] = NXT(2);
; 4758 : 	start[3] = NXT(3);
; 4759 : 	enc = xmlDetectCharEncoding(&start[0], 4);

	push	4
	movzx	eax, BYTE PTR [eax+1]
	mov	BYTE PTR _start$[ebp+1], al
	mov	eax, DWORD PTR [ecx+16]
	movzx	eax, BYTE PTR [eax+2]
	mov	BYTE PTR _start$[ebp+2], al
	mov	eax, DWORD PTR [ecx+16]
	movzx	eax, BYTE PTR [eax+3]
	mov	BYTE PTR _start$[ebp+3], al
	lea	eax, DWORD PTR _start$[ebp]
	push	eax
	call	_xmlDetectCharEncoding
	add	esp, 8

; 4760 : 	if (enc != XML_CHAR_ENCODING_NONE) {

	test	eax, eax
	je	SHORT $LN11@htmlParseD

; 4761 : 	    xmlSwitchEncoding(ctxt, enc);

	push	eax
	push	esi
	call	_xmlSwitchEncoding
	add	esp, 8
$LN11@htmlParseD:

; 4762 : 	}
; 4763 :     }
; 4764 : 
; 4765 :     /*
; 4766 :      * Wipe out everything which is before the first '<'
; 4767 :      */
; 4768 :     SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars

; 4769 :     if (CUR == 0) {

	mov	eax, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN12@htmlParseD

; 4770 : 	htmlParseErr(ctxt, XML_ERR_DOCUMENT_EMPTY,

	push	0
	push	0
	push	OFFSET ??_C@_0BD@DKOGENJF@Document?5is?5empty?6@
	push	4
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN12@htmlParseD:

; 4771 : 	             "Document is empty\n", NULL, NULL);
; 4772 :     }
; 4773 : 
; 4774 :     if ((ctxt->sax) && (ctxt->sax->startDocument) && (!ctxt->disableSAX))

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LL2@htmlParseD
	mov	eax, DWORD PTR [eax+48]
	test	eax, eax
	je	SHORT $LL2@htmlParseD
	cmp	DWORD PTR [esi+212], 0
	jne	SHORT $LL2@htmlParseD

; 4775 : 	ctxt->sax->startDocument(ctxt->userData);

	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 4
	npad	6
$LL2@htmlParseD:

; 4776 : 
; 4777 : 
; 4778 :     /*
; 4779 :      * Parse possible comments and PIs before any content
; 4780 :      */
; 4781 :     while (((CUR == '<') && (NXT(1) == '!') &&
; 4782 :             (NXT(2) == '-') && (NXT(3) == '-')) ||

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	mov	dl, BYTE PTR [eax]
	cmp	dl, 60					; 0000003cH
	jne	$LN16@htmlParseD
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, 33					; 00000021H
	jne	SHORT $LN15@htmlParseD
	cmp	BYTE PTR [eax+2], 45			; 0000002dH
	jne	SHORT $LN15@htmlParseD
	cmp	BYTE PTR [eax+3], 45			; 0000002dH
	je	SHORT $LN35@htmlParseD
$LN15@htmlParseD:
	cmp	cl, 63					; 0000003fH
	jne	SHORT $LN36@htmlParseD
$LN35@htmlParseD:

; 4783 : 	   ((CUR == '<') && (NXT(1) == '?'))) {
; 4784 :         htmlParseComment(ctxt);

	push	esi
	call	_htmlParseComment

; 4785 :         htmlParsePI(ctxt);

	push	esi
	call	_htmlParsePI

; 4786 : 	SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars
	add	esp, 12					; 0000000cH

; 4787 :     }

	jmp	SHORT $LL2@htmlParseD
$LN36@htmlParseD:

; 4788 : 
; 4789 : 
; 4790 :     /*
; 4791 :      * Then possibly doc type declaration(s) and more Misc
; 4792 :      * (doctypedecl Misc*)?
; 4793 :      */
; 4794 :     if ((CUR == '<') && (NXT(1) == '!') &&
; 4795 : 	(UPP(2) == 'D') && (UPP(3) == 'O') &&
; 4796 : 	(UPP(4) == 'C') && (UPP(5) == 'T') &&
; 4797 : 	(UPP(6) == 'Y') && (UPP(7) == 'P') &&

	cmp	dl, 60					; 0000003cH
	jne	$LN16@htmlParseD
	cmp	cl, 33					; 00000021H
	jne	$LN16@htmlParseD
	movzx	eax, BYTE PTR [eax+2]
	mov	edi, DWORD PTR __imp__toupper
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 68					; 00000044H
	jne	$LN16@htmlParseD
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+3]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 79					; 0000004fH
	jne	SHORT $LN16@htmlParseD
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+4]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 67					; 00000043H
	jne	SHORT $LN16@htmlParseD
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+5]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 84					; 00000054H
	jne	SHORT $LN16@htmlParseD
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+6]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 89					; 00000059H
	jne	SHORT $LN16@htmlParseD
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+7]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN16@htmlParseD
	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	movzx	eax, BYTE PTR [eax+8]
	push	eax
	call	edi
	add	esp, 4
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN16@htmlParseD

; 4798 : 	(UPP(8) == 'E')) {
; 4799 : 	htmlParseDocTypeDecl(ctxt);

	push	esi
	call	_htmlParseDocTypeDecl
	add	esp, 4
$LN16@htmlParseD:

; 4800 :     }
; 4801 :     SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars
	add	esp, 4
	pop	edi
	npad	3
$LL4@htmlParseD:

; 4802 : 
; 4803 :     /*
; 4804 :      * Parse possible comments and PIs before any content
; 4805 :      */
; 4806 :     while (((CUR == '<') && (NXT(1) == '!') &&
; 4807 :             (NXT(2) == '-') && (NXT(3) == '-')) ||

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 60			; 0000003cH
	jne	SHORT $LN5@htmlParseD
	mov	cl, BYTE PTR [eax+1]
	cmp	cl, 33					; 00000021H
	jne	SHORT $LN18@htmlParseD
	cmp	BYTE PTR [eax+2], 45			; 0000002dH
	jne	SHORT $LN18@htmlParseD
	cmp	BYTE PTR [eax+3], 45			; 0000002dH
	je	SHORT $LN37@htmlParseD
$LN18@htmlParseD:
	cmp	cl, 63					; 0000003fH
	jne	SHORT $LN5@htmlParseD
$LN37@htmlParseD:

; 4808 : 	   ((CUR == '<') && (NXT(1) == '?'))) {
; 4809 :         htmlParseComment(ctxt);

	push	esi
	call	_htmlParseComment

; 4810 :         htmlParsePI(ctxt);

	push	esi
	call	_htmlParsePI

; 4811 : 	SKIP_BLANKS;

	push	esi
	call	_htmlSkipBlankChars
	add	esp, 12					; 0000000cH

; 4812 :     }

	jmp	SHORT $LL4@htmlParseD
$LN5@htmlParseD:

; 4813 : 
; 4814 :     /*
; 4815 :      * Time to start parsing the tree itself
; 4816 :      */
; 4817 :     htmlParseContentInternal(ctxt);

	push	esi
	call	_htmlParseContentInternal

; 4818 : 
; 4819 :     /*
; 4820 :      * autoclose
; 4821 :      */
; 4822 :     if (CUR == 0)

	mov	eax, DWORD PTR [esi+36]
	add	esp, 4
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 0
	jne	SHORT $LN19@htmlParseD

; 4823 : 	htmlAutoCloseOnEnd(ctxt);

	push	esi
	call	_htmlAutoCloseOnEnd
	add	esp, 4
$LN19@htmlParseD:

; 4824 : 
; 4825 : 
; 4826 :     /*
; 4827 :      * SAX: end of the document processing.
; 4828 :      */
; 4829 :     if ((ctxt->sax) && (ctxt->sax->endDocument != NULL))

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN20@htmlParseD
	mov	eax, DWORD PTR [eax+52]
	test	eax, eax
	je	SHORT $LN20@htmlParseD

; 4830 :         ctxt->sax->endDocument(ctxt->userData);

	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 4
$LN20@htmlParseD:

; 4831 : 
; 4832 :     if ((!(ctxt->options & HTML_PARSE_NODEFDTD)) && (ctxt->myDoc != NULL)) {

	test	BYTE PTR [esi+360], 4
	jne	SHORT $LN22@htmlParseD
	mov	eax, DWORD PTR [esi+8]
	test	eax, eax
	je	SHORT $LN22@htmlParseD

; 4833 : 	dtd = xmlGetIntSubset(ctxt->myDoc);

	push	eax
	call	_xmlGetIntSubset
	add	esp, 4

; 4834 : 	if (dtd == NULL)

	test	eax, eax
	jne	SHORT $LN22@htmlParseD

; 4835 : 	    ctxt->myDoc->intSubset =

	push	OFFSET ??_C@_0CK@JLEAHDEJ@http?3?1?1www?4w3?4org?1TR?1REC?9html40@
	push	OFFSET ??_C@_0CG@CIBPFINF@?9?1?1W3C?1?1DTD?5HTML?54?40?5Transition@
	push	OFFSET ??_C@_04PNIFHPHN@html@
	push	DWORD PTR [esi+8]
	call	_xmlCreateIntSubset
	mov	ecx, DWORD PTR [esi+8]
	add	esp, 16					; 00000010H
	mov	DWORD PTR [ecx+44], eax
$LN22@htmlParseD:

; 4836 : 		xmlCreateIntSubset(ctxt->myDoc, BAD_CAST "html",
; 4837 : 		    BAD_CAST "-//W3C//DTD HTML 4.0 Transitional//EN",
; 4838 : 		    BAD_CAST "http://www.w3.org/TR/REC-html40/loose.dtd");
; 4839 :     }
; 4840 :     if (! ctxt->wellFormed) return(-1);

	mov	eax, DWORD PTR [esi+12]
	neg	eax
	pop	esi
	sbb	eax, eax
	neg	eax
	dec	eax

; 4841 :     return(0);
; 4842 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@htmlParseD:

; 4735 : 	htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CC@IOOHKEGN@htmlParseDocument?3?5context?5erro@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 4736 : 		     "htmlParseDocument: context error\n", NULL, NULL);
; 4737 : 	return(XML_ERR_INTERNAL_ERROR);

	mov	eax, 1
	pop	esi

; 4841 :     return(0);
; 4842 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseDocument ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlCreateMemoryParserCtxt
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_htmlCreateMemoryParserCtxt PROC			; COMDAT

; 5013 : htmlCreateMemoryParserCtxt(const char *buffer, int size) {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _buffer$[ebp]
	test	ebx, ebx
	je	SHORT $LN8@htmlCreate

; 5014 :     xmlParserCtxtPtr ctxt;
; 5015 :     xmlParserInputPtr input;
; 5016 :     xmlParserInputBufferPtr buf;
; 5017 : 
; 5018 :     if (buffer == NULL)
; 5019 : 	return(NULL);
; 5020 :     if (size <= 0)

	mov	edi, DWORD PTR _size$[ebp]
	test	edi, edi
	jle	SHORT $LN8@htmlCreate

; 5021 : 	return(NULL);
; 5022 : 
; 5023 :     ctxt = htmlNewParserCtxt();

	call	_htmlNewParserCtxt
	mov	esi, eax

; 5024 :     if (ctxt == NULL)

	test	esi, esi
	je	SHORT $LN8@htmlCreate

; 5025 : 	return(NULL);
; 5026 : 
; 5027 :     buf = xmlParserInputBufferCreateMem(buffer, size, XML_CHAR_ENCODING_NONE);

	push	0
	push	edi
	push	ebx
	call	_xmlParserInputBufferCreateMem
	mov	ebx, eax
	add	esp, 12					; 0000000cH

; 5028 :     if (buf == NULL) return(NULL);

	test	ebx, ebx
	je	SHORT $LN8@htmlCreate

; 5029 : 
; 5030 :     input = xmlNewInputStream(ctxt);

	push	esi
	call	_xmlNewInputStream
	mov	edi, eax
	add	esp, 4

; 5031 :     if (input == NULL) {

	test	edi, edi
	jne	SHORT $LN6@htmlCreate

; 5032 : 	xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt
	add	esp, 4
$LN8@htmlCreate:

; 5042 : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
$LN6@htmlCreate:

; 5033 : 	return(NULL);
; 5034 :     }
; 5035 : 
; 5036 :     input->filename = NULL;

	mov	DWORD PTR [edi+4], 0

; 5037 :     input->buf = buf;

	mov	DWORD PTR [edi], ebx

; 5038 :     xmlBufResetInput(buf->buffer, input);

	push	edi
	push	DWORD PTR [ebx+16]
	call	_xmlBufResetInput

; 5039 : 
; 5040 :     inputPush(ctxt, input);

	push	edi
	push	esi
	call	_inputPush
	add	esp, 16					; 00000010H

; 5041 :     return(ctxt);

	mov	eax, esi
	pop	edi

; 5042 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
_htmlCreateMemoryParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlNewParserCtxt
_TEXT	SEGMENT
_htmlNewParserCtxt PROC					; COMDAT

; 4987 : {

	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	push	472					; 000001d8H
	call	DWORD PTR _xmlMalloc
	mov	esi, eax
	add	esp, 4
	test	esi, esi
	jne	SHORT $LN2@htmlNewPar

; 88   :         __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER,

	push	OFFSET ??_C@_0BO@MIDDFDBC@NewParserCtxt?3?5out?5of?5memory?6@
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	eax
	push	eax
	push	eax
	push	eax
	push	OFFSET ??_C@_0BO@MIDDFDBC@NewParserCtxt?3?5out?5of?5memory?6@
	push	eax
	push	eax
	push	3
	push	2
	push	1
	push	eax
	push	eax
	push	eax
	push	eax
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 4988 :     xmlParserCtxtPtr ctxt;
; 4989 : 
; 4990 :     ctxt = (xmlParserCtxtPtr) xmlMalloc(sizeof(xmlParserCtxt));
; 4991 :     if (ctxt == NULL) {
; 4992 :         htmlErrMemory(NULL, "NewParserCtxt: out of memory\n");
; 4993 : 	return(NULL);

	xor	eax, eax
	pop	esi

; 5001 : }

	ret	0
$LN2@htmlNewPar:

; 4994 :     }
; 4995 :     memset(ctxt, 0, sizeof(xmlParserCtxt));

	push	472					; 000001d8H
	push	0
	push	esi
	call	_memset

; 4996 :     if (htmlInitParserCtxt(ctxt) < 0) {

	push	esi
	call	_htmlInitParserCtxt
	add	esp, 16					; 00000010H
	test	eax, eax
	jns	SHORT $LN3@htmlNewPar

; 4974 :     xmlFreeParserCtxt(ctxt);

	push	esi
	call	_xmlFreeParserCtxt
	add	esp, 4

; 4997 :         htmlFreeParserCtxt(ctxt);
; 4998 : 	return(NULL);

	xor	eax, eax
	pop	esi

; 5001 : }

	ret	0
$LN3@htmlNewPar:

; 4999 :     }
; 5000 :     return(ctxt);

	mov	eax, esi
	pop	esi

; 5001 : }

	ret	0
_htmlNewParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseElement
_TEXT	SEGMENT
_node_info$ = -24					; size = 20
_currentNode$1$ = -4					; size = 4
_depth$1$ = 8						; size = 4
_ctxt$ = 8						; size = 4
_htmlParseElement PROC					; COMDAT

; 4298 : htmlParseElement(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	ecx, OFFSET __111E219E_htmlparser@c
	push	esi
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	$LN5@htmlParseE

; 4299 :     const xmlChar *name;
; 4300 :     xmlChar *currentNode = NULL;
; 4301 :     const htmlElemDesc * info;
; 4302 :     htmlParserNodeInfo node_info;
; 4303 :     int failed;
; 4304 :     int depth;
; 4305 :     const xmlChar *oldptr;
; 4306 : 
; 4307 :     if ((ctxt == NULL) || (ctxt->input == NULL)) {

	mov	ecx, DWORD PTR [esi+36]
	test	ecx, ecx
	je	$LN5@htmlParseE

; 4309 : 		     "htmlParseElement: context error\n", NULL, NULL);
; 4310 : 	return;
; 4311 :     }
; 4312 : 
; 4313 :     if (ctxt->instate == XML_PARSER_EOF)

	cmp	DWORD PTR [esi+172], -1
	je	$LN27@htmlParseE

; 4314 :         return;
; 4315 : 
; 4316 :     /* Capture start position */
; 4317 :     if (ctxt->record_info) {

	cmp	DWORD PTR [esi+68], 0
	je	SHORT $LN7@htmlParseE

; 4318 :         node_info.begin_pos = ctxt->input->consumed +

	mov	eax, DWORD PTR [ecx+36]
	sub	eax, DWORD PTR [ecx+12]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _node_info$[ebp+4], eax

; 4319 :                           (CUR_PTR - ctxt->input->base);
; 4320 : 	node_info.begin_line = ctxt->input->line;

	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _node_info$[ebp+8], eax
$LN7@htmlParseE:

; 4321 :     }
; 4322 : 
; 4323 :     failed = htmlParseStartTag(ctxt);

	push	edi
	push	esi
	call	_htmlParseStartTag

; 4324 :     name = ctxt->name;

	mov	edi, DWORD PTR [esi+184]
	add	esp, 4

; 4325 :     if ((failed == -1) || (name == NULL)) {

	cmp	eax, -1
	je	$LN9@htmlParseE
	test	edi, edi
	je	$LN9@htmlParseE

; 4328 :         return;
; 4329 :     }
; 4330 : 
; 4331 :     /*
; 4332 :      * Lookup the info for that element.
; 4333 :      */
; 4334 :     info = htmlTagLookup(name);

	push	ebx
	push	edi
	call	_htmlTagLookup
	mov	ebx, eax
	add	esp, 4

; 4335 :     if (info == NULL) {

	test	ebx, ebx
	jne	SHORT $LN11@htmlParseE

; 4336 : 	htmlParseErr(ctxt, XML_HTML_UNKNOWN_TAG,

	push	eax
	push	edi
	push	OFFSET ??_C@_0BA@NAOEEOLP@Tag?5?$CFs?5invalid?6@
	push	801					; 00000321H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN11@htmlParseE:

; 4337 : 	             "Tag %s invalid\n", name, NULL);
; 4338 :     }
; 4339 : 
; 4340 :     /*
; 4341 :      * Check for an Empty Element labeled the XML/SGML way
; 4342 :      */
; 4343 :     if ((CUR == '/') && (NXT(1) == '>')) {

	mov	eax, DWORD PTR [esi+36]
	mov	edx, DWORD PTR [eax+16]
	mov	cl, BYTE PTR [edx]
	cmp	cl, 47					; 0000002fH
	jne	SHORT $LN12@htmlParseE
	cmp	BYTE PTR [edx+1], 62			; 0000003eH
	jne	SHORT $LN12@htmlParseE

; 4344 :         SKIP(2);

	add	DWORD PTR [esi+200], 2
	add	DWORD PTR [eax+16], 2
	mov	eax, DWORD PTR [esi+36]
	add	DWORD PTR [eax+32], 2
	jmp	SHORT $LN94@htmlParseE
$LN12@htmlParseE:

; 4345 : 	if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))
; 4346 : 	    ctxt->sax->endElement(ctxt->userData, name);
; 4347 : 	htmlnamePop(ctxt);
; 4348 : 	return;
; 4349 :     }
; 4350 : 
; 4351 :     if (CUR == '>') {

	cmp	cl, 62					; 0000003eH
	jne	$LN14@htmlParseE

; 4352 :         NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4

; 4374 : 	}
; 4375 : 	return;
; 4376 :     }
; 4377 : 
; 4378 :     /*
; 4379 :      * Check for an Empty Element from DTD definition
; 4380 :      */
; 4381 :     if ((info != NULL) && (info->empty)) {

	test	ebx, ebx
	je	SHORT $LN18@htmlParseE
	cmp	BYTE PTR [ebx+7], 0
	je	SHORT $LN18@htmlParseE
$LN94@htmlParseE:

; 4382 : 	if ((ctxt->sax != NULL) && (ctxt->sax->endElement != NULL))
; 4383 : 	    ctxt->sax->endElement(ctxt->userData, name);
; 4384 : 	htmlnamePop(ctxt);

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN19@htmlParseE
	mov	eax, DWORD PTR [eax+60]
	test	eax, eax
	je	SHORT $LN19@htmlParseE
	push	edi
	push	DWORD PTR [esi+4]
	call	eax
	add	esp, 8
$LN19@htmlParseE:
	push	esi
	call	_htmlnamePop
	add	esp, 4
$LN91@htmlParseE:
	pop	ebx
$LN90@htmlParseE:
	pop	edi
$LN27@htmlParseE:
	pop	esi

; 4416 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN18@htmlParseE:

; 4385 : 	return;
; 4386 :     }
; 4387 : 
; 4388 :     /*
; 4389 :      * Parse the content of the element:
; 4390 :      */
; 4391 :     currentNode = xmlStrdup(ctxt->name);

	push	DWORD PTR [esi+184]
	call	_xmlStrdup

; 4392 :     depth = ctxt->nameNr;

	mov	ecx, DWORD PTR [esi+36]
	add	esp, 4
	mov	DWORD PTR _currentNode$1$[ebp], eax
	mov	eax, DWORD PTR [esi+188]
	mov	DWORD PTR _depth$1$[ebp], eax
$LL2@htmlParseE:

; 4393 :     while (IS_CHAR_CH(CUR)) {

	mov	edi, DWORD PTR [ecx+16]
	mov	bl, BYTE PTR [edi]
	cmp	bl, 9
	jb	SHORT $LN21@htmlParseE
	cmp	bl, 10					; 0000000aH
	jbe	SHORT $LN20@htmlParseE
$LN21@htmlParseE:
	cmp	bl, 13					; 0000000dH
	je	SHORT $LN20@htmlParseE
	mov	edx, ecx
	cmp	bl, 32					; 00000020H
	jb	SHORT $LN86@htmlParseE
$LN20@htmlParseE:

; 4394 : 	oldptr = ctxt->input->cur;
; 4395 : 	htmlParseContent(ctxt);

	push	esi
	call	_htmlParseContent

; 4396 : 	if (oldptr==ctxt->input->cur) break;

	mov	ecx, DWORD PTR [esi+36]
	add	esp, 4
	mov	edx, ecx
	cmp	edi, DWORD PTR [ecx+16]
	je	SHORT $LN86@htmlParseE

; 4397 : 	if (ctxt->nameNr < depth) break;

	mov	eax, DWORD PTR _depth$1$[ebp]
	cmp	DWORD PTR [esi+188], eax
	jge	SHORT $LL2@htmlParseE
$LN86@htmlParseE:

; 4398 :     }
; 4399 : 
; 4400 :     /*
; 4401 :      * Capture end position and add node
; 4402 :      */
; 4403 :     if ( currentNode != NULL && ctxt->record_info ) {

	mov	ebx, DWORD PTR _currentNode$1$[ebp]
	mov	eax, edx
	test	ebx, ebx
	je	SHORT $LN24@htmlParseE
	cmp	DWORD PTR [esi+68], 0
	je	SHORT $LN24@htmlParseE

; 4404 :        node_info.end_pos = ctxt->input->consumed +

	mov	eax, DWORD PTR [edx+36]
	sub	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _node_info$[ebp+12], eax

; 4405 :                           (CUR_PTR - ctxt->input->base);
; 4406 :        node_info.end_line = ctxt->input->line;

	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _node_info$[ebp+16], eax

; 4407 :        node_info.node = ctxt->node;

	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR _node_info$[ebp], eax

; 4408 :        xmlParserAddNodeInfo(ctxt, &node_info);

	lea	eax, DWORD PTR _node_info$[ebp]
	push	eax
	push	esi
	call	_xmlParserAddNodeInfo
	mov	eax, DWORD PTR [esi+36]
	add	esp, 8
$LN24@htmlParseE:

; 4409 :     }
; 4410 :     if (!IS_CHAR_CH(CUR)) {

	mov	eax, DWORD PTR [eax+16]
	mov	al, BYTE PTR [eax]
	cmp	al, 9
	jb	SHORT $LN26@htmlParseE
	cmp	al, 10					; 0000000aH
	jbe	SHORT $LN25@htmlParseE
$LN26@htmlParseE:
	cmp	al, 13					; 0000000dH
	je	SHORT $LN25@htmlParseE
	cmp	al, 32					; 00000020H
	jae	SHORT $LN25@htmlParseE

; 4411 : 	htmlAutoCloseOnEnd(ctxt);

	push	esi
	call	_htmlAutoCloseOnEnd
	add	esp, 4
$LN25@htmlParseE:

; 4412 :     }
; 4413 : 
; 4414 :     if (currentNode != NULL)

	test	ebx, ebx
	je	$LN91@htmlParseE

; 4415 : 	xmlFree(currentNode);

	push	ebx
	call	DWORD PTR _xmlFree
	add	esp, 4
	pop	ebx
	pop	edi
	pop	esi

; 4416 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@htmlParseE:

; 4353 :     } else {
; 4354 : 	htmlParseErr(ctxt, XML_ERR_GT_REQUIRED,

	push	0
	push	edi
	push	OFFSET ??_C@_0CD@HIMAKCPA@Couldn?8t?5find?5end?5of?5Start?5Tag?5@
	push	73					; 00000049H
	push	esi
	call	_htmlParseErr

; 4355 : 	             "Couldn't find end of Start Tag %s\n", name, NULL);
; 4356 : 
; 4357 : 	/*
; 4358 : 	 * end of parsing of this node.
; 4359 : 	 */
; 4360 : 	if (xmlStrEqual(name, ctxt->name)) {

	push	DWORD PTR [esi+184]
	push	edi
	call	_xmlStrEqual
	add	esp, 28					; 0000001cH
	test	eax, eax
	je	SHORT $LN16@htmlParseE

; 4361 : 	    nodePop(ctxt);

	push	esi
	call	_nodePop

; 4362 : 	    htmlnamePop(ctxt);

	push	esi
	call	_htmlnamePop
	add	esp, 8
$LN16@htmlParseE:

; 4363 : 	}
; 4364 : 
; 4365 : 	/*
; 4366 : 	 * Capture end position and add node
; 4367 : 	 */
; 4368 : 	if (ctxt->record_info) {

	cmp	DWORD PTR [esi+68], 0
	je	$LN91@htmlParseE

; 4369 : 	   node_info.end_pos = ctxt->input->consumed +

	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+36]
	sub	eax, DWORD PTR [ecx+12]
	add	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR _node_info$[ebp+12], eax

; 4370 : 			      (CUR_PTR - ctxt->input->base);
; 4371 : 	   node_info.end_line = ctxt->input->line;

	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR _node_info$[ebp+16], eax

; 4372 : 	   node_info.node = ctxt->node;

	mov	eax, DWORD PTR [esi+52]
	mov	DWORD PTR _node_info$[ebp], eax

; 4373 : 	   xmlParserAddNodeInfo(ctxt, &node_info);

	lea	eax, DWORD PTR _node_info$[ebp]
	push	eax
	push	esi
	call	_xmlParserAddNodeInfo
	add	esp, 8
	pop	ebx
	pop	edi
	pop	esi

; 4416 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@htmlParseE:

; 4326 : 	if (CUR == '>')

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 62			; 0000003eH
	jne	$LN90@htmlParseE

; 4327 : 	    NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4
	pop	edi
	pop	esi

; 4416 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@htmlParseE:

; 4308 : 	htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CB@EOHEMKHC@htmlParseElement?3?5context?5error@
	push	1
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
	pop	esi

; 4416 : }

	mov	esp, ebp
	pop	ebp
	ret	0
_htmlParseElement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseCharRef
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_htmlParseCharRef PROC					; COMDAT

; 3384 : htmlParseCharRef(htmlParserCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _ctxt$[ebp]
	xor	esi, esi
	test	edi, edi
	je	$LN7@htmlParseC

; 3385 :     int val = 0;
; 3386 : 
; 3387 :     if ((ctxt == NULL) || (ctxt->input == NULL)) {

	mov	eax, DWORD PTR [edi+36]
	test	eax, eax
	je	$LN7@htmlParseC

; 3389 : 		     "htmlParseCharRef: context error\n",
; 3390 : 		     NULL, NULL);
; 3391 :         return(0);
; 3392 :     }
; 3393 :     if ((CUR == '&') && (NXT(1) == '#') &&

	mov	ecx, DWORD PTR [eax+16]
	cmp	BYTE PTR [ecx], 38			; 00000026H
	jne	$LN18@htmlParseC
	mov	dl, BYTE PTR [ecx+1]
	cmp	dl, 35					; 00000023H
	jne	$LN18@htmlParseC
	mov	cl, BYTE PTR [ecx+2]
	cmp	cl, 120					; 00000078H
	je	SHORT $LN10@htmlParseC
	cmp	cl, 88					; 00000058H
	jne	$LN8@htmlParseC
$LN10@htmlParseC:

; 3394 :         ((NXT(2) == 'x') || NXT(2) == 'X')) {
; 3395 : 	SKIP(3);

	add	DWORD PTR [edi+200], 3
	add	DWORD PTR [eax+16], 3
	mov	eax, DWORD PTR [edi+36]
	add	DWORD PTR [eax+32], 3

; 3396 : 	while (CUR != ';') {

	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 59			; 0000003bH
	je	$LN5@htmlParseC
$LL2@htmlParseC:

; 3397 : 	    if ((CUR >= '0') && (CUR <= '9'))

	mov	eax, DWORD PTR [ecx+16]
	mov	cl, BYTE PTR [eax]
	lea	eax, DWORD PTR [ecx-48]
	cmp	al, 9
	ja	SHORT $LN11@htmlParseC

; 3398 : 	        val = val * 16 + (CUR - '0');

	add	esi, -3					; fffffffdH
	shl	esi, 4
	jmp	SHORT $LN49@htmlParseC
$LN11@htmlParseC:

; 3399 : 	    else if ((CUR >= 'a') && (CUR <= 'f'))

	cmp	cl, 97					; 00000061H
	jb	SHORT $LN13@htmlParseC
	cmp	cl, 102					; 00000066H
	ja	SHORT $LN13@htmlParseC

; 3400 : 	        val = val * 16 + (CUR - 'a') + 10;

	shl	esi, 4
	add	esi, -87				; ffffffa9H
	jmp	SHORT $LN49@htmlParseC
$LN13@htmlParseC:

; 3401 : 	    else if ((CUR >= 'A') && (CUR <= 'F'))

	cmp	cl, 65					; 00000041H
	jb	SHORT $LN15@htmlParseC
	cmp	cl, 70					; 00000046H
	ja	SHORT $LN15@htmlParseC

; 3402 : 	        val = val * 16 + (CUR - 'A') + 10;

	shl	esi, 4
	add	esi, -55				; ffffffc9H
$LN49@htmlParseC:

; 3405 : 		             "htmlParseCharRef: missing semicolon\n",
; 3406 : 			     NULL, NULL);
; 3407 : 		break;
; 3408 : 	    }
; 3409 : 	    NEXT;

	movzx	eax, cl
	push	edi
	add	esi, eax
	call	_xmlNextChar
	mov	ecx, DWORD PTR [edi+36]
	add	esp, 4
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 59			; 0000003bH
	jne	SHORT $LL2@htmlParseC

; 3385 :     int val = 0;
; 3386 : 
; 3387 :     if ((ctxt == NULL) || (ctxt->input == NULL)) {

	jmp	SHORT $LN5@htmlParseC
$LN15@htmlParseC:

; 3403 : 	    else {
; 3404 : 	        htmlParseErr(ctxt, XML_ERR_INVALID_HEX_CHARREF,

	push	0
	push	0
	push	OFFSET ??_C@_0CF@KKILEJJN@htmlParseCharRef?3?5missing?5semic@
	push	6

; 3410 : 	}
; 3411 : 	if (CUR == ';')
; 3412 : 	    NEXT;
; 3413 :     } else if  ((CUR == '&') && (NXT(1) == '#')) {

	jmp	SHORT $LN51@htmlParseC
$LN8@htmlParseC:
	cmp	dl, 35					; 00000023H
	jne	$LN18@htmlParseC

; 3414 : 	SKIP(2);

	add	DWORD PTR [edi+200], 2
	add	DWORD PTR [eax+16], 2
	mov	eax, DWORD PTR [edi+36]
	add	DWORD PTR [eax+32], 2

; 3415 : 	while (CUR != ';') {

	mov	ecx, DWORD PTR [edi+36]
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 59			; 0000003bH
	je	SHORT $LN5@htmlParseC
$LL4@htmlParseC:

; 3416 : 	    if ((CUR >= '0') && (CUR <= '9'))

	mov	eax, DWORD PTR [ecx+16]
	mov	dl, BYTE PTR [eax]
	lea	eax, DWORD PTR [edx-48]
	cmp	al, 9
	ja	SHORT $LN20@htmlParseC

; 3417 : 	        val = val * 10 + (CUR - '0');

	movzx	eax, dl
	lea	ecx, DWORD PTR [esi-6]
	lea	ecx, DWORD PTR [esi+ecx*4]

; 3420 : 		             "htmlParseCharRef: missing semicolon\n",
; 3421 : 			     NULL, NULL);
; 3422 : 		break;
; 3423 : 	    }
; 3424 : 	    NEXT;

	push	edi
	lea	esi, DWORD PTR [eax+ecx*2]
	call	_xmlNextChar
	mov	ecx, DWORD PTR [edi+36]
	add	esp, 4
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 59			; 0000003bH
	jne	SHORT $LL4@htmlParseC

; 3385 :     int val = 0;
; 3386 : 
; 3387 :     if ((ctxt == NULL) || (ctxt->input == NULL)) {

	jmp	SHORT $LN5@htmlParseC
$LN20@htmlParseC:

; 3418 : 	    else {
; 3419 : 	        htmlParseErr(ctxt, XML_ERR_INVALID_DEC_CHARREF,

	push	0
	push	0
	push	OFFSET ??_C@_0CF@KKILEJJN@htmlParseCharRef?3?5missing?5semic@
	push	7
$LN51@htmlParseC:

; 3430 : 	             "htmlParseCharRef: invalid value\n", NULL, NULL);
; 3431 :     }
; 3432 :     /*
; 3433 :      * Check the value IS_CHAR ...
; 3434 :      */
; 3435 :     if (IS_CHAR(val)) {

	push	edi
	call	_htmlParseErr
	mov	ecx, DWORD PTR [edi+36]
	add	esp, 20					; 00000014H
$LN5@htmlParseC:
	mov	eax, DWORD PTR [ecx+16]
	cmp	BYTE PTR [eax], 59			; 0000003bH
	jne	SHORT $LN19@htmlParseC
	push	edi
	call	_xmlNextChar
	add	esp, 4
$LN19@htmlParseC:
	cmp	esi, 256				; 00000100H
	jge	SHORT $LN34@htmlParseC
	cmp	esi, 9
	jl	SHORT $LN26@htmlParseC
	cmp	esi, 10					; 0000000aH
	jle	SHORT $LN47@htmlParseC
$LN26@htmlParseC:
	cmp	esi, 13					; 0000000dH
	je	SHORT $LN47@htmlParseC
	cmp	esi, 32					; 00000020H
	jge	SHORT $LN47@htmlParseC
	jmp	SHORT $LN23@htmlParseC
$LN34@htmlParseC:
	cmp	esi, 55295				; 0000d7ffH
	jle	SHORT $LN47@htmlParseC
	cmp	esi, 57344				; 0000e000H
	jl	SHORT $LN29@htmlParseC
	cmp	esi, 65533				; 0000fffdH
	jle	SHORT $LN47@htmlParseC
$LN29@htmlParseC:
	lea	eax, DWORD PTR [esi-65536]
	cmp	eax, 1048575				; 000fffffH
	ja	SHORT $LN23@htmlParseC
$LN47@htmlParseC:
	pop	edi

; 3436 :         return(val);

	mov	eax, esi

; 3439 : 			"htmlParseCharRef: invalid xmlChar value %d\n",
; 3440 : 			val);
; 3441 :     }
; 3442 :     return(0);
; 3443 : }

	pop	esi
	pop	ebp
	ret	0
$LN18@htmlParseC:

; 3425 : 	}
; 3426 : 	if (CUR == ';')
; 3427 : 	    NEXT;
; 3428 :     } else {
; 3429 : 	htmlParseErr(ctxt, XML_ERR_INVALID_CHARREF,

	push	0
	push	0
	push	OFFSET ??_C@_0CB@IKIMPOOL@htmlParseCharRef?3?5invalid?5value@
	push	8
	push	edi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN23@htmlParseC:

; 3437 :     } else {
; 3438 : 	htmlParseErrInt(ctxt, XML_ERR_INVALID_CHAR,

	push	esi
	push	OFFSET ??_C@_0CM@IDADHLG@htmlParseCharRef?3?5invalid?5xmlCh@
	push	9
	push	edi
	call	_htmlParseErrInt
	add	esp, 16					; 00000010H

; 3439 : 			"htmlParseCharRef: invalid xmlChar value %d\n",
; 3440 : 			val);
; 3441 :     }
; 3442 :     return(0);
; 3443 : }

	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN7@htmlParseC:

; 3388 : 	htmlParseErr(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	OFFSET ??_C@_0CB@DPLLMGHJ@htmlParseCharRef?3?5context?5error@
	push	1
	push	edi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 3439 : 			"htmlParseCharRef: invalid xmlChar value %d\n",
; 3440 : 			val);
; 3441 :     }
; 3442 :     return(0);
; 3443 : }

	xor	eax, eax
	pop	edi
	pop	esi
	pop	ebp
	ret	0
_htmlParseCharRef ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlParseEntityRef
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_str$ = 12						; size = 4
_htmlParseEntityRef PROC				; COMDAT

; 2694 : htmlParseEntityRef(htmlParserCtxtPtr ctxt, const xmlChar **str) {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _str$[ebp]
	test	edi, edi
	je	SHORT $LN2@htmlParseE

; 2695 :     const xmlChar *name;
; 2696 :     const htmlEntityDesc * ent = NULL;
; 2697 : 
; 2698 :     if (str != NULL) *str = NULL;

	mov	DWORD PTR [edi], 0
$LN2@htmlParseE:

; 2699 :     if ((ctxt == NULL) || (ctxt->input == NULL)) return(NULL);

	mov	esi, DWORD PTR _ctxt$[ebp]
	test	esi, esi
	je	$LN4@htmlParseE
	mov	eax, DWORD PTR [esi+36]
	test	eax, eax
	je	$LN4@htmlParseE

; 2700 : 
; 2701 :     if (CUR == '&') {

	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 38			; 00000026H
	jne	$LN15@htmlParseE

; 2702 :         NEXT;

	push	ebx
	push	esi
	call	_xmlNextChar

; 2703 :         name = htmlParseName(ctxt);

	push	esi
	call	_htmlParseName
	mov	ebx, eax
	add	esp, 8

; 2704 : 	if (name == NULL) {

	test	ebx, ebx
	jne	SHORT $LN6@htmlParseE

; 2705 : 	    htmlParseErr(ctxt, XML_ERR_NAME_REQUIRED,

	push	eax
	push	eax
	push	OFFSET ??_C@_0BN@FCLAMBFC@htmlParseEntityRef?3?5no?5name?6@
	push	68					; 00000044H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H
$LN16@htmlParseE:

; 2721 : 		             "htmlParseEntityRef: expecting ';'\n",
; 2722 : 			     NULL, NULL);
; 2723 : 	        if (str != NULL)

	xor	edi, edi
$LN17@htmlParseE:
	pop	ebx

; 2725 : 	    }
; 2726 : 	}
; 2727 :     }
; 2728 :     return(ent);

	mov	eax, edi
	pop	edi

; 2729 : }

	pop	esi
	pop	ebp
	ret	0
$LN6@htmlParseE:

; 2706 : 	                 "htmlParseEntityRef: no name\n", NULL, NULL);
; 2707 : 	} else {
; 2708 : 	    GROW;

	cmp	DWORD PTR [esi+292], 0
	jne	SHORT $LN8@htmlParseE
	mov	ecx, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [ecx+20]
	sub	eax, DWORD PTR [ecx+16]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN8@htmlParseE
	push	250					; 000000faH
	push	ecx
	call	_xmlParserInputGrow
	add	esp, 8
$LN8@htmlParseE:

; 2709 : 	    if (CUR == ';') {

	mov	eax, DWORD PTR [esi+36]
	mov	eax, DWORD PTR [eax+16]
	cmp	BYTE PTR [eax], 59			; 0000003bH
	jne	SHORT $LN9@htmlParseE

; 2710 : 	        if (str != NULL)

	test	edi, edi
	je	SHORT $LN11@htmlParseE

; 2711 : 		    *str = name;

	mov	DWORD PTR [edi], ebx
$LN11@htmlParseE:

; 2712 : 
; 2713 : 		/*
; 2714 : 		 * Lookup the entity in the table.
; 2715 : 		 */
; 2716 : 		ent = htmlEntityLookup(name);

	push	ebx
	call	_htmlEntityLookup
	mov	edi, eax
	add	esp, 4

; 2717 : 		if (ent != NULL) /* OK that's ugly !!! */

	test	edi, edi
	je	SHORT $LN17@htmlParseE

; 2718 : 		    NEXT;

	push	esi
	call	_xmlNextChar
	add	esp, 4

; 2725 : 	    }
; 2726 : 	}
; 2727 :     }
; 2728 :     return(ent);

	mov	eax, edi
	pop	ebx
	pop	edi

; 2729 : }

	pop	esi
	pop	ebp
	ret	0
$LN9@htmlParseE:

; 2719 : 	    } else {
; 2720 : 		htmlParseErr(ctxt, XML_ERR_ENTITYREF_SEMICOL_MISSING,

	push	0
	push	0
	push	OFFSET ??_C@_0CD@KJDDHCEO@htmlParseEntityRef?3?5expecting?5?8@
	push	23					; 00000017H
	push	esi
	call	_htmlParseErr
	add	esp, 20					; 00000014H

; 2721 : 		             "htmlParseEntityRef: expecting ';'\n",
; 2722 : 			     NULL, NULL);
; 2723 : 	        if (str != NULL)

	test	edi, edi
	je	SHORT $LN16@htmlParseE

; 2724 : 		    *str = name;

	mov	DWORD PTR [edi], ebx
	xor	edi, edi
	pop	ebx

; 2725 : 	    }
; 2726 : 	}
; 2727 :     }
; 2728 :     return(ent);

	mov	eax, edi
	pop	edi

; 2729 : }

	pop	esi
	pop	ebp
	ret	0
$LN15@htmlParseE:

; 2700 : 
; 2701 :     if (CUR == '&') {

	xor	edi, edi

; 2725 : 	    }
; 2726 : 	}
; 2727 :     }
; 2728 :     return(ent);

	mov	eax, edi
	pop	edi

; 2729 : }

	pop	esi
	pop	ebp
	ret	0
$LN4@htmlParseE:
	pop	edi

; 2699 :     if ((ctxt == NULL) || (ctxt->input == NULL)) return(NULL);

	xor	eax, eax

; 2729 : }

	pop	esi
	pop	ebp
	ret	0
_htmlParseEntityRef ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlAutoCloseTag
_TEXT	SEGMENT
_doc$ = 8						; size = 4
_name$ = 12						; size = 4
_elem$ = 16						; size = 4
_htmlAutoCloseTag PROC					; COMDAT

; 1438 : htmlAutoCloseTag(htmlDocPtr doc, const xmlChar *name, htmlNodePtr elem) {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _elem$[ebp]
	test	esi, esi
	je	SHORT $LN10@htmlAutoCl

; 1439 :     htmlNodePtr child;
; 1440 : 
; 1441 :     if (elem == NULL) return(1);
; 1442 :     if (xmlStrEqual(name, elem->name)) return(0);

	push	DWORD PTR [esi+8]
	mov	edi, DWORD PTR _name$[ebp]
	push	edi
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@htmlAutoCl

; 1443 :     if (htmlCheckAutoClose(elem->name, name)) return(1);

	push	edi
	push	DWORD PTR [esi+8]
	call	_htmlCheckAutoClose
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@htmlAutoCl

; 1444 :     child = elem->children;

	mov	esi, DWORD PTR [esi+12]

; 1445 :     while (child != NULL) {

	test	esi, esi
	je	SHORT $LN3@htmlAutoCl
	mov	ebx, DWORD PTR _doc$[ebp]
$LL2@htmlAutoCl:

; 1446 :         if (htmlAutoCloseTag(doc, name, child)) return(1);

	push	esi
	push	edi
	push	ebx
	call	_htmlAutoCloseTag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN10@htmlAutoCl

; 1447 : 	child = child->next;

	mov	esi, DWORD PTR [esi+24]
	test	esi, esi
	jne	SHORT $LL2@htmlAutoCl
$LN3@htmlAutoCl:
	pop	edi

; 1448 :     }
; 1449 :     return(0);
; 1450 : }

	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
$LN10@htmlAutoCl:
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
	pop	ebp
	ret	0
_htmlAutoCloseTag ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlIsAutoClosed
_TEXT	SEGMENT
_doc$ = 8						; size = 4
_elem$ = 12						; size = 4
_htmlIsAutoClosed PROC					; COMDAT

; 1464 : htmlIsAutoClosed(htmlDocPtr doc, htmlNodePtr elem) {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _elem$[ebp]
	test	ecx, ecx
	je	SHORT $LN18@htmlIsAuto

; 1465 :     htmlNodePtr child;
; 1466 : 
; 1467 :     if (elem == NULL) return(1);
; 1468 :     child = elem->children;
; 1469 :     while (child != NULL) {

	mov	edi, DWORD PTR [ecx+12]
	test	edi, edi
	je	SHORT $LN3@htmlIsAuto
$LN30@htmlIsAuto:

; 1442 :     if (xmlStrEqual(name, elem->name)) return(0);

	push	DWORD PTR [edi+8]

; 1470 : 	if (htmlAutoCloseTag(doc, elem->name, child)) return(1);

	mov	ebx, DWORD PTR [ecx+8]

; 1442 :     if (xmlStrEqual(name, elem->name)) return(0);

	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@htmlIsAuto

; 1443 :     if (htmlCheckAutoClose(elem->name, name)) return(1);

	push	ebx
	push	DWORD PTR [edi+8]
	call	_htmlCheckAutoClose
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN18@htmlIsAuto

; 1444 :     child = elem->children;

	mov	esi, DWORD PTR [edi+12]

; 1445 :     while (child != NULL) {

	test	esi, esi
	je	SHORT $LN9@htmlIsAuto
$LL8@htmlIsAuto:

; 1446 :         if (htmlAutoCloseTag(doc, name, child)) return(1);

	push	esi
	push	ebx
	push	DWORD PTR _doc$[ebp]
	call	_htmlAutoCloseTag
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN18@htmlIsAuto

; 1447 : 	child = child->next;

	mov	esi, DWORD PTR [esi+24]
	test	esi, esi
	jne	SHORT $LL8@htmlIsAuto
$LN9@htmlIsAuto:

; 1471 : 	child = child->next;

	mov	edi, DWORD PTR [edi+24]
	mov	ecx, DWORD PTR _elem$[ebp]
	test	edi, edi
	jne	SHORT $LN30@htmlIsAuto
$LN3@htmlIsAuto:
	pop	edi

; 1472 :     }
; 1473 :     return(0);
; 1474 : }

	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
$LN18@htmlIsAuto:
	pop	edi
	pop	esi
	mov	eax, 1
	pop	ebx
	pop	ebp
	ret	0
_htmlIsAutoClosed ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlEntityValueLookup
_TEXT	SEGMENT
_value$ = 8						; size = 4
_htmlEntityValueLookup PROC				; COMDAT

; 1957 : htmlEntityValueLookup(unsigned int value) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _value$[ebp]
	xor	ecx, ecx
	xor	eax, eax
$LL4@htmlEntity:

; 1962 :         if (html40EntitiesTable[i].value >= value) {

	cmp	DWORD PTR _html40EntitiesTable[eax], esi
	jae	SHORT $LN9@htmlEntity

; 1958 :     unsigned int i;
; 1959 : 
; 1960 :     for (i = 0;i < (sizeof(html40EntitiesTable)/
; 1961 :                     sizeof(html40EntitiesTable[0]));i++) {

	add	eax, 12					; 0000000cH
	inc	ecx
	cmp	eax, 3036				; 00000bdcH
	jb	SHORT $LL4@htmlEntity
$LN3@htmlEntity:

; 1966 : 	}
; 1967 :     }
; 1968 :     return(NULL);

	xor	eax, eax
	pop	esi

; 1969 : }

	pop	ebp
	ret	0
$LN9@htmlEntity:

; 1963 : 	    if (html40EntitiesTable[i].value > value)

	ja	SHORT $LN3@htmlEntity

; 1964 : 		break;
; 1965 :             return((htmlEntityDescPtr) &html40EntitiesTable[i]);

	lea	eax, DWORD PTR [ecx+ecx*2]
	lea	eax, DWORD PTR _html40EntitiesTable[eax*4]
	pop	esi

; 1969 : }

	pop	ebp
	ret	0
_htmlEntityValueLookup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlEntityLookup
_TEXT	SEGMENT
_name$ = 8						; size = 4
_htmlEntityLookup PROC					; COMDAT

; 1934 : htmlEntityLookup(const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _name$[ebp]
	xor	edi, edi
	xor	esi, esi
	npad	9
$LL4@htmlEntity:

; 1939 :         if (xmlStrEqual(name, BAD_CAST html40EntitiesTable[i].name)) {

	push	DWORD PTR _html40EntitiesTable[esi+4]
	push	ebx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@htmlEntity

; 1935 :     unsigned int i;
; 1936 : 
; 1937 :     for (i = 0;i < (sizeof(html40EntitiesTable)/
; 1938 :                     sizeof(html40EntitiesTable[0]));i++) {

	add	esi, 12					; 0000000cH
	inc	edi
	cmp	esi, 3036				; 00000bdcH
	jb	SHORT $LL4@htmlEntity

; 1941 : 	}
; 1942 :     }
; 1943 :     return(NULL);
; 1944 : }

	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	0
$LN8@htmlEntity:

; 1940 :             return((htmlEntityDescPtr) &html40EntitiesTable[i]);

	lea	eax, DWORD PTR [edi+edi*2]
	pop	edi

; 1941 : 	}
; 1942 :     }
; 1943 :     return(NULL);
; 1944 : }

	pop	esi
	lea	eax, DWORD PTR _html40EntitiesTable[eax*4]
	pop	ebx
	pop	ebp
	ret	0
_htmlEntityLookup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT _htmlTagLookup
_TEXT	SEGMENT
_tag$ = 8						; size = 4
_htmlTagLookup PROC					; COMDAT

; 1255 : htmlTagLookup(const xmlChar *tag) {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _tag$[ebp]
	xor	edi, edi
	xor	esi, esi
	npad	9
$LL4@htmlTagLoo:

; 1260 :         if (!xmlStrcasecmp(tag, BAD_CAST html40ElementTable[i].name))

	push	DWORD PTR _html40ElementTable[esi]
	push	ebx
	call	_xmlStrcasecmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@htmlTagLoo

; 1256 :     unsigned int i;
; 1257 : 
; 1258 :     for (i = 0; i < (sizeof(html40ElementTable) /
; 1259 :                      sizeof(html40ElementTable[0]));i++) {

	add	esi, 36					; 00000024H
	inc	edi
	cmp	esi, 3312				; 00000cf0H
	jb	SHORT $LL4@htmlTagLoo

; 1262 :     }
; 1263 :     return(NULL);
; 1264 : }

	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
$LN8@htmlTagLoo:

; 1261 : 	    return((htmlElemDescPtr) &html40ElementTable[i]);

	lea	eax, DWORD PTR [edi+edi*8]
	pop	edi

; 1262 :     }
; 1263 :     return(NULL);
; 1264 : }

	pop	esi
	lea	eax, DWORD PTR _html40ElementTable[eax*4]
	pop	ebx
	pop	ebp
	ret	0
_htmlTagLookup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\htmlparser.c
;	COMDAT ___htmlParseContent
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
___htmlParseContent PROC				; COMDAT

; 4708 : __htmlParseContent(void *ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __111E219E_htmlparser@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _ctxt$[ebp]
	test	eax, eax
	je	SHORT $LN2@htmlParseC

; 4709 :     if (ctxt != NULL)
; 4710 : 	htmlParseContentInternal((htmlParserCtxtPtr) ctxt);

	mov	DWORD PTR _ctxt$[ebp], eax

; 4711 : }

	pop	ebp

; 4709 :     if (ctxt != NULL)
; 4710 : 	htmlParseContentInternal((htmlParserCtxtPtr) ctxt);

	jmp	_htmlParseContentInternal
$LN2@htmlParseC:

; 4711 : }

	pop	ebp
	ret	0
___htmlParseContent ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_snprintf PROC						; COMDAT

; 1948 :     {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __A452D4A0_stdio@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR __Format$[ebp]

; 1440 :         int const _Result = __stdio_common_vsprintf(

	call	___local_stdio_printf_options
	lea	ecx, DWORD PTR __Format$[ebp+4]
	push	ecx
	push	0
	mov	ecx, DWORD PTR [eax]
	push	esi
	push	DWORD PTR __BufferCount$[ebp]
	or	ecx, 2
	push	DWORD PTR __Buffer$[ebp]
	push	DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

	or	ecx, -1
	test	eax, eax
	cmovs	eax, ecx

; 1949 :         int _Result;
; 1950 :         va_list _ArgList;
; 1951 :         __crt_va_start(_ArgList, _Format);
; 1952 :     #pragma warning(suppress:28719)    // 28719
; 1953 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
; 1954 :         __crt_va_end(_ArgList);
; 1955 :         return _Result;

	pop	esi

; 1956 :     }

	pop	ebp
	ret	0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
_vsnprintf PROC						; COMDAT

; 1439 :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A452D4A0_stdio@h
	call	@__CheckForDebuggerJustMyCode@4
	call	___local_stdio_printf_options
	push	DWORD PTR __ArgList$[ebp]
	mov	ecx, eax
	push	0
	push	DWORD PTR __Format$[ebp]
	push	DWORD PTR __BufferCount$[ebp]
	mov	eax, DWORD PTR [ecx]
	push	DWORD PTR __Buffer$[ebp]
	or	eax, 2
	push	DWORD PTR [ecx+4]
	push	eax
	call	DWORD PTR __imp____stdio_common_vsprintf
	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx

; 1440 :         int const _Result = __stdio_common_vsprintf(
; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;
; 1445 :     }

	pop	ebp
	ret	0
_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
	mov	ecx, OFFSET __2CC6E67D_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
