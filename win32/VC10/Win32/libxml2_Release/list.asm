; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\list.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__C9B4D122_list@c DB 01H
msvcjmc	ENDS
PUBLIC	_xmlListCreate
PUBLIC	_xmlListDelete
PUBLIC	_xmlListSearch
PUBLIC	_xmlListReverseSearch
PUBLIC	_xmlListInsert
PUBLIC	_xmlListAppend
PUBLIC	_xmlListRemoveFirst
PUBLIC	_xmlListRemoveLast
PUBLIC	_xmlListRemoveAll
PUBLIC	_xmlListClear
PUBLIC	_xmlListEmpty
PUBLIC	_xmlListFront
PUBLIC	_xmlListEnd
PUBLIC	_xmlListSize
PUBLIC	_xmlListPopFront
PUBLIC	_xmlListPopBack
PUBLIC	_xmlListPushFront
PUBLIC	_xmlListPushBack
PUBLIC	_xmlListReverse
PUBLIC	_xmlListSort
PUBLIC	_xmlListWalk
PUBLIC	_xmlListReverseWalk
PUBLIC	_xmlListMerge
PUBLIC	_xmlListDup
PUBLIC	_xmlListCopy
PUBLIC	_xmlLinkGetData
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0CC@PEFKPBME@Cannot?5initialize?5memory?5for?5li@ ; `string'
PUBLIC	??_C@_0CG@FNPNDOOA@Cannot?5initialize?5memory?5for?5se@ ; `string'
PUBLIC	??_C@_0CG@HDAIMGNF@Cannot?5initialize?5memory?5for?5ne@ ; `string'
EXTRN	___xmlGenericError:PROC
EXTRN	___xmlGenericErrorContext:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
;	COMDAT ??_C@_0CG@HDAIMGNF@Cannot?5initialize?5memory?5for?5ne@
CONST	SEGMENT
??_C@_0CG@HDAIMGNF@Cannot?5initialize?5memory?5for?5ne@ DB 'Cannot initia'
	DB	'lize memory for new link', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@FNPNDOOA@Cannot?5initialize?5memory?5for?5se@
CONST	SEGMENT
??_C@_0CG@FNPNDOOA@Cannot?5initialize?5memory?5for?5se@ DB 'Cannot initia'
	DB	'lize memory for sentinel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PEFKPBME@Cannot?5initialize?5memory?5for?5li@
CONST	SEGMENT
??_C@_0CC@PEFKPBME@Cannot?5initialize?5memory?5for?5li@ DB 'Cannot initia'
	DB	'lize memory for list', 00H			; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListLinkReverseSearch
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListLinkReverseSearch PROC				; COMDAT

; 164  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _l$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlListLin

; 165  :     xmlLinkPtr lk;
; 166  :     if (l == NULL)
; 167  :         return(NULL);
; 168  :     lk = xmlListHigherSearch(l, data);

	push	DWORD PTR _data$[ebp]
	push	esi
	call	_xmlListHigherSearch
	mov	edi, eax
	add	esp, 8

; 169  :     if (lk == l->sentinel)

	cmp	edi, DWORD PTR [esi]
	je	SHORT $LN5@xmlListLin

; 170  :         return NULL;
; 171  :     else {
; 172  :         if (l->linkCompare(lk->data, data) ==0)

	push	DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [esi+8]
	push	DWORD PTR [edi+8]
	call	ecx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@xmlListLin

; 173  :             return lk;

	mov	eax, edi
	pop	edi

; 175  :     }
; 176  : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlListLin:
	pop	edi

; 174  :         return NULL;

	xor	eax, eax

; 175  :     }
; 176  : }

	pop	esi
	pop	ebp
	ret	0
_xmlListLinkReverseSearch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListLinkSearch
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListLinkSearch PROC					; COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _l$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlListLin

; 140  :     xmlLinkPtr lk;
; 141  :     if (l == NULL)
; 142  :         return(NULL);
; 143  :     lk = xmlListLowerSearch(l, data);

	push	DWORD PTR _data$[ebp]
	push	esi
	call	_xmlListLowerSearch
	mov	edi, eax
	add	esp, 8

; 144  :     if (lk == l->sentinel)

	cmp	edi, DWORD PTR [esi]
	je	SHORT $LN5@xmlListLin

; 145  :         return NULL;
; 146  :     else {
; 147  :         if (l->linkCompare(lk->data, data) ==0)

	push	DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [esi+8]
	push	DWORD PTR [edi+8]
	call	ecx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@xmlListLin

; 148  :             return lk;

	mov	eax, edi
	pop	edi

; 150  :     }
; 151  : }

	pop	esi
	pop	ebp
	ret	0
$LN5@xmlListLin:
	pop	edi

; 149  :         return NULL;

	xor	eax, eax

; 150  :     }
; 151  : }

	pop	esi
	pop	ebp
	ret	0
_xmlListLinkSearch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListHigherSearch
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListHigherSearch PROC				; COMDAT

; 119  : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _l$[ebp]
	test	edi, edi
	jne	SHORT $LN5@xmlListHig

; 120  :     xmlLinkPtr lk;
; 121  : 
; 122  :     if (l == NULL)
; 123  :         return(NULL);

	xor	eax, eax
	pop	edi

; 126  : }

	pop	ebp
	ret	0
$LN5@xmlListHig:

; 124  :     for(lk = l->sentinel->prev;lk != l->sentinel && l->linkCompare(lk->data, data) >0 ;lk = lk->prev);

	mov	eax, DWORD PTR [edi]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	cmp	esi, eax
	je	SHORT $LN11@xmlListHig
	push	ebx
	mov	ebx, DWORD PTR _data$[ebp]
$LL4@xmlListHig:
	mov	eax, DWORD PTR [edi+8]
	push	ebx
	push	DWORD PTR [esi+8]
	call	eax
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN12@xmlListHig
	mov	esi, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [edi]
	jne	SHORT $LL4@xmlListHig
$LN12@xmlListHig:
	pop	ebx
$LN11@xmlListHig:

; 125  :     return lk;

	mov	eax, esi
	pop	esi
	pop	edi

; 126  : }

	pop	ebp
	ret	0
_xmlListHigherSearch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListLowerSearch
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListLowerSearch PROC				; COMDAT

; 99   : {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _l$[ebp]
	test	edi, edi
	jne	SHORT $LN5@xmlListLow

; 100  :     xmlLinkPtr lk;
; 101  : 
; 102  :     if (l == NULL)
; 103  :         return(NULL);

	xor	eax, eax
	pop	edi

; 106  : }

	pop	ebp
	ret	0
$LN5@xmlListLow:

; 104  :     for(lk = l->sentinel->next;lk != l->sentinel && l->linkCompare(lk->data, data) <0 ;lk = lk->next);

	mov	eax, DWORD PTR [edi]
	push	esi
	mov	esi, DWORD PTR [eax]
	cmp	esi, eax
	je	SHORT $LN11@xmlListLow
	push	ebx
	mov	ebx, DWORD PTR _data$[ebp]
$LL4@xmlListLow:
	mov	eax, DWORD PTR [edi+8]
	push	ebx
	push	DWORD PTR [esi+8]
	call	eax
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN12@xmlListLow
	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [edi]
	jne	SHORT $LL4@xmlListLow
$LN12@xmlListLow:
	pop	ebx
$LN11@xmlListLow:

; 105  :     return lk;

	mov	eax, esi
	pop	esi
	pop	edi

; 106  : }

	pop	ebp
	ret	0
_xmlListLowerSearch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlLinkCompare
_TEXT	SEGMENT
_data0$ = 8						; size = 4
_data1$ = 12						; size = 4
_xmlLinkCompare PROC					; COMDAT

; 80   : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _data0$[ebp]
	mov	edx, DWORD PTR _data1$[ebp]
	cmp	ecx, edx
	jae	SHORT $LN2@xmlLinkCom

; 81   :     if (data0 < data1)
; 82   :         return (-1);

	or	eax, -1

; 84   : 	return (0);
; 85   :     return (1);
; 86   : }

	pop	ebp
	ret	0
$LN2@xmlLinkCom:

; 83   :     else if (data0 == data1)

	xor	eax, eax
	cmp	ecx, edx
	setne	al

; 84   : 	return (0);
; 85   :     return (1);
; 86   : }

	pop	ebp
	ret	0
_xmlLinkCompare ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlLinkDeallocator
_TEXT	SEGMENT
_l$ = 8							; size = 4
_lk$ = 12						; size = 4
_xmlLinkDeallocator PROC				; COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _lk$[ebp]
	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax
	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR [eax+4]
	test	eax, eax
	je	SHORT $LN2@xmlLinkDea

; 61   :     (lk->prev)->next = lk->next;
; 62   :     (lk->next)->prev = lk->prev;
; 63   :     if(l->linkDeallocator)
; 64   :         l->linkDeallocator(lk);

	push	esi
	call	eax
	add	esp, 4
$LN2@xmlLinkDea:

; 65   :     xmlFree(lk);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4
	pop	esi

; 66   : }

	pop	ebp
	ret	0
_xmlLinkDeallocator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlLinkGetData
_TEXT	SEGMENT
_lk$ = 8						; size = 4
_xmlLinkGetData PROC					; COMDAT

; 605  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _lk$[ebp]
	test	eax, eax
	jne	SHORT $LN2@xmlLinkGet

; 609  : }

	pop	ebp
	ret	0
$LN2@xmlLinkGet:

; 606  :     if (lk == NULL)
; 607  :         return(NULL);
; 608  :     return lk->data;

	mov	eax, DWORD PTR [eax+8]

; 609  : }

	pop	ebp
	ret	0
_xmlLinkGetData ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListCopy
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_old$ = 12						; size = 4
_xmlListCopy PROC					; COMDAT

; 762  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _old$[ebp]
	test	ebx, ebx
	je	SHORT $LN6@xmlListCop

; 763  :     /* Walk the old tree and insert the data into the new one */
; 764  :     xmlLinkPtr lk;
; 765  : 
; 766  :     if ((old == NULL) || (cur == NULL))

	mov	edi, DWORD PTR _cur$[ebp]
	test	edi, edi
	je	SHORT $LN6@xmlListCop

; 768  :     for(lk = old->sentinel->next; lk != old->sentinel; lk = lk->next) {

	mov	eax, DWORD PTR [ebx]
	push	esi
	mov	esi, DWORD PTR [eax]
	cmp	esi, eax
	je	SHORT $LN3@xmlListCop
$LL4@xmlListCop:

; 769  :         if (0 !=xmlListInsert(cur, lk->data)) {

	push	DWORD PTR [esi+8]
	push	edi
	call	_xmlListInsert
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@xmlListCop

; 768  :     for(lk = old->sentinel->next; lk != old->sentinel; lk = lk->next) {

	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [ebx]
	jne	SHORT $LL4@xmlListCop
$LN3@xmlListCop:
	pop	esi
	pop	edi

; 772  :         }
; 773  :     }
; 774  :     return (0);

	xor	eax, eax

; 775  : }

	pop	ebx
	pop	ebp
	ret	0
$LN13@xmlListCop:

; 338  :     xmlListClear(l);

	push	edi
	call	_xmlListClear

; 339  :     xmlFree(l->sentinel);

	push	DWORD PTR [edi]
	call	DWORD PTR _xmlFree

; 340  :     xmlFree(l);

	push	edi
	call	DWORD PTR _xmlFree
	add	esp, 12					; 0000000cH

; 770  :             xmlListDelete(cur);
; 771  :             return (1);

	mov	eax, 1
	pop	esi
	pop	edi

; 775  : }

	pop	ebx
	pop	ebp
	ret	0
$LN6@xmlListCop:
	pop	edi

; 767  :         return(1);

	mov	eax, 1

; 775  : }

	pop	ebx
	pop	ebp
	ret	0
_xmlListCopy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListDup
_TEXT	SEGMENT
_old$ = 8						; size = 4
_xmlListDup PROC					; COMDAT

; 733  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _old$[ebp]
	test	esi, esi
	je	SHORT $LN6@xmlListDup

; 734  :     xmlListPtr cur;
; 735  : 
; 736  :     if (old == NULL)
; 737  :         return(NULL);
; 738  :     /* Hmmm, how to best deal with allocation issues when copying
; 739  :      * lists. If there is a de-allocator, should responsibility lie with
; 740  :      * the new list or the old list. Surely not both. I'll arbitrarily
; 741  :      * set it to be the old list for the time being whilst I work out
; 742  :      * the answer
; 743  :      */
; 744  :     if (NULL ==(cur = xmlListCreate(NULL, old->linkCompare)))

	push	DWORD PTR [esi+8]
	push	0
	call	_xmlListCreate
	mov	edi, eax
	add	esp, 8
	test	edi, edi
	je	SHORT $LN6@xmlListDup

; 745  :         return (NULL);
; 746  :     if (0 != xmlListCopy(cur, old))

	push	esi
	push	edi
	call	_xmlListCopy
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN6@xmlListDup

; 748  :     return cur;

	mov	eax, edi
	pop	edi

; 749  : }

	pop	esi
	pop	ebp
	ret	0
$LN6@xmlListDup:
	pop	edi

; 747  :         return NULL;

	xor	eax, eax

; 749  : }

	pop	esi
	pop	ebp
	ret	0
_xmlListDup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListMerge
_TEXT	SEGMENT
_l1$ = 8						; size = 4
_l2$ = 12						; size = 4
_xmlListMerge PROC					; COMDAT

; 718  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	push	DWORD PTR _l2$[ebp]
	push	DWORD PTR _l1$[ebp]
	call	_xmlListCopy
	push	DWORD PTR _l2$[ebp]
	call	_xmlListClear
	add	esp, 12					; 0000000cH

; 719  :     xmlListCopy(l1, l2);
; 720  :     xmlListClear(l2);
; 721  : }

	pop	ebp
	ret	0
_xmlListMerge ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListReverseWalk
_TEXT	SEGMENT
_l$ = 8							; size = 4
_walker$ = 12						; size = 4
_user$ = 16						; size = 4
_xmlListReverseWalk PROC				; COMDAT

; 697  : xmlListReverseWalk(xmlListPtr l, xmlListWalker walker, void *user) {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _l$[ebp]
	test	edi, edi
	je	SHORT $LN14@xmlListRev

; 698  :     xmlLinkPtr lk;
; 699  : 
; 700  :     if ((l == NULL) || (walker == NULL))

	push	ebx
	mov	ebx, DWORD PTR _walker$[ebp]
	test	ebx, ebx
	je	SHORT $LN15@xmlListRev

; 701  :         return;
; 702  :     for(lk = l->sentinel->prev; lk != l->sentinel; lk = lk->prev) {

	mov	eax, DWORD PTR [edi]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	cmp	esi, eax
	je	SHORT $LN16@xmlListRev
$LL4@xmlListRev:

; 703  :         if((walker(lk->data, user)) == 0)

	push	DWORD PTR _user$[ebp]
	push	DWORD PTR [esi+8]
	call	ebx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@xmlListRev

; 701  :         return;
; 702  :     for(lk = l->sentinel->prev; lk != l->sentinel; lk = lk->prev) {

	mov	esi, DWORD PTR [esi+4]
	cmp	esi, DWORD PTR [edi]
	jne	SHORT $LL4@xmlListRev
$LN16@xmlListRev:
	pop	esi
$LN15@xmlListRev:
	pop	ebx
$LN14@xmlListRev:
	pop	edi

; 704  :                 break;
; 705  :     }
; 706  : }

	pop	ebp
	ret	0
_xmlListReverseWalk ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListWalk
_TEXT	SEGMENT
_l$ = 8							; size = 4
_walker$ = 12						; size = 4
_user$ = 16						; size = 4
_xmlListWalk PROC					; COMDAT

; 676  : xmlListWalk(xmlListPtr l, xmlListWalker walker, void *user) {

	push	ebp
	mov	ebp, esp
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _l$[ebp]
	test	edi, edi
	je	SHORT $LN14@xmlListWal

; 677  :     xmlLinkPtr lk;
; 678  : 
; 679  :     if ((l == NULL) || (walker == NULL))

	push	ebx
	mov	ebx, DWORD PTR _walker$[ebp]
	test	ebx, ebx
	je	SHORT $LN15@xmlListWal

; 680  :         return;
; 681  :     for(lk = l->sentinel->next; lk != l->sentinel; lk = lk->next) {

	mov	eax, DWORD PTR [edi]
	push	esi
	mov	esi, DWORD PTR [eax]
	cmp	esi, eax
	je	SHORT $LN16@xmlListWal
$LL4@xmlListWal:

; 682  :         if((walker(lk->data, user)) == 0)

	push	DWORD PTR _user$[ebp]
	push	DWORD PTR [esi+8]
	call	ebx
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@xmlListWal

; 680  :         return;
; 681  :     for(lk = l->sentinel->next; lk != l->sentinel; lk = lk->next) {

	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [edi]
	jne	SHORT $LL4@xmlListWal
$LN16@xmlListWal:
	pop	esi
$LN15@xmlListWal:
	pop	ebx
$LN14@xmlListWal:
	pop	edi

; 683  :                 break;
; 684  :     }
; 685  : }

	pop	ebp
	ret	0
_xmlListWalk ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListSort
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListSort PROC					; COMDAT

; 644  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _l$[ebp]
	test	esi, esi
	je	SHORT $LN1@xmlListSor

; 450  :     return (l->sentinel->next == l->sentinel);

	mov	eax, DWORD PTR [esi]

; 645  :     xmlListPtr lTemp;
; 646  : 
; 647  :     if (l == NULL)
; 648  :         return;
; 649  :     if(xmlListEmpty(l))

	cmp	DWORD PTR [eax], eax
	je	SHORT $LN1@xmlListSor

; 650  :         return;
; 651  : 
; 652  :     /* I think that the real answer is to implement quicksort, the
; 653  :      * alternative is to implement some list copying procedure which
; 654  :      * would be based on a list copy followed by a clear followed by
; 655  :      * an insert. This is slow...
; 656  :      */
; 657  : 
; 658  :     if (NULL ==(lTemp = xmlListDup(l)))

	push	edi
	push	esi
	call	_xmlListDup
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	je	SHORT $LN11@xmlListSor

; 659  :         return;
; 660  :     xmlListClear(l);

	push	esi
	call	_xmlListClear

; 719  :     xmlListCopy(l1, l2);

	push	edi
	push	esi
	call	_xmlListCopy

; 720  :     xmlListClear(l2);

	push	edi
	call	_xmlListClear

; 661  :     xmlListMerge(l, lTemp);
; 662  :     xmlListDelete(lTemp);

	push	edi
	call	_xmlListDelete
	add	esp, 20					; 00000014H
$LN11@xmlListSor:
	pop	edi
$LN1@xmlListSor:
	pop	esi

; 663  :     return;
; 664  : }

	pop	ebp
	ret	0
_xmlListSort ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListReverse
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListReverse PROC					; COMDAT

; 619  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _l$[ebp]
	test	esi, esi
	je	SHORT $LN1@xmlListRev

; 620  :     xmlLinkPtr lk;
; 621  :     xmlLinkPtr lkPrev;
; 622  : 
; 623  :     if (l == NULL)
; 624  :         return;
; 625  :     lkPrev = l->sentinel;
; 626  :     for (lk = l->sentinel->next; lk != l->sentinel; lk = lk->next) {

	mov	eax, DWORD PTR [esi]
	mov	edx, DWORD PTR [eax]
	cmp	edx, eax
	je	SHORT $LN3@xmlListRev
	npad	3
$LL4@xmlListRev:

; 627  :         lkPrev->next = lkPrev->prev;

	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ecx

; 628  :         lkPrev->prev = lk;

	mov	DWORD PTR [eax+4], edx

; 629  :         lkPrev = lk;

	mov	eax, edx
	mov	edx, DWORD PTR [edx]
	cmp	edx, DWORD PTR [esi]
	jne	SHORT $LL4@xmlListRev
$LN3@xmlListRev:

; 630  :     }
; 631  :     /* Fix up the last node */
; 632  :     lkPrev->next = lkPrev->prev;

	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [eax], ecx

; 633  :     lkPrev->prev = lk;

	mov	DWORD PTR [eax+4], edx
$LN1@xmlListRev:
	pop	esi

; 634  : }

	pop	ebp
	ret	0
_xmlListReverse ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListPushBack
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListPushBack PROC					; COMDAT

; 575  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _l$[ebp]
	test	eax, eax
	jne	SHORT $LN2@xmlListPus

; 593  : }

	pop	ebp
	ret	0
$LN2@xmlListPus:

; 576  :     xmlLinkPtr lkPlace, lkNew;
; 577  : 
; 578  :     if (l == NULL)
; 579  :         return(0);
; 580  :     lkPlace = l->sentinel->prev;

	mov	eax, DWORD PTR [eax]
	push	esi

; 581  :     /* Add the new link */
; 582  :     if (NULL ==(lkNew = (xmlLinkPtr )xmlMalloc(sizeof(xmlLink)))) {

	push	12					; 0000000cH
	mov	esi, DWORD PTR [eax+4]
	call	DWORD PTR _xmlMalloc
	mov	ecx, eax
	add	esp, 4
	test	ecx, ecx
	jne	SHORT $LN3@xmlListPus

; 583  :         xmlGenericError(xmlGenericErrorContext,

	call	___xmlGenericError
	mov	esi, eax
	call	___xmlGenericErrorContext
	push	OFFSET ??_C@_0CG@HDAIMGNF@Cannot?5initialize?5memory?5for?5ne@
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	call	eax
	add	esp, 8

; 584  : 		        "Cannot initialize memory for new link");
; 585  :         return (0);

	xor	eax, eax
	pop	esi

; 593  : }

	pop	ebp
	ret	0
$LN3@xmlListPus:

; 586  :     }
; 587  :     lkNew->data = data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 588  :     lkNew->next = lkPlace->next;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 589  :     (lkPlace->next)->prev = lkNew;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax+4], ecx

; 590  :     lkPlace->next = lkNew;
; 591  :     lkNew->prev = lkPlace;
; 592  :     return 1;

	mov	eax, 1
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [ecx+4], esi
	pop	esi

; 593  : }

	pop	ebp
	ret	0
_xmlListPushBack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListPushFront
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListPushFront PROC					; COMDAT

; 543  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _l$[ebp]
	test	esi, esi
	je	SHORT $LN5@xmlListPus

; 544  :     xmlLinkPtr lkPlace, lkNew;
; 545  : 
; 546  :     if (l == NULL)
; 547  :         return(0);
; 548  :     lkPlace = l->sentinel;
; 549  :     /* Add the new link */
; 550  :     lkNew = (xmlLinkPtr) xmlMalloc(sizeof(xmlLink));

	mov	esi, DWORD PTR [esi]
	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	mov	ecx, eax
	add	esp, 4

; 551  :     if (lkNew == NULL) {

	test	ecx, ecx
	jne	SHORT $LN3@xmlListPus

; 552  :         xmlGenericError(xmlGenericErrorContext,

	call	___xmlGenericError
	mov	esi, eax
	call	___xmlGenericErrorContext
	push	OFFSET ??_C@_0CG@HDAIMGNF@Cannot?5initialize?5memory?5for?5ne@
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	call	eax
	add	esp, 8
$LN5@xmlListPus:

; 562  : }

	xor	eax, eax
	pop	esi
	pop	ebp
	ret	0
$LN3@xmlListPus:

; 553  : 		        "Cannot initialize memory for new link");
; 554  :         return (0);
; 555  :     }
; 556  :     lkNew->data = data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 557  :     lkNew->next = lkPlace->next;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 558  :     (lkPlace->next)->prev = lkNew;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax+4], ecx

; 559  :     lkPlace->next = lkNew;
; 560  :     lkNew->prev = lkPlace;
; 561  :     return 1;

	mov	eax, 1
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [ecx+4], esi
	pop	esi

; 562  : }

	pop	ebp
	ret	0
_xmlListPushFront ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListPopBack
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListPopBack PROC					; COMDAT

; 527  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 448  :     if (l == NULL)

	mov	edx, DWORD PTR _l$[ebp]
	test	edx, edx
	je	SHORT $LN7@xmlListPop

; 449  :         return(-1);
; 450  :     return (l->sentinel->next == l->sentinel);

	push	esi
	mov	esi, DWORD PTR [edx]

; 528  :     if(!xmlListEmpty(l))

	cmp	DWORD PTR [esi], esi
	je	SHORT $LN10@xmlListPop

; 529  :         xmlLinkDeallocator(l, l->sentinel->prev);

	mov	esi, DWORD PTR [esi+4]

; 61   :     (lk->prev)->next = lk->next;

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 62   :     (lk->next)->prev = lk->prev;

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 63   :     if(l->linkDeallocator)

	mov	eax, DWORD PTR [edx+4]
	test	eax, eax
	je	SHORT $LN8@xmlListPop

; 64   :         l->linkDeallocator(lk);

	push	esi
	call	eax
	add	esp, 4
$LN8@xmlListPop:

; 65   :     xmlFree(lk);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN10@xmlListPop:
	pop	esi
$LN7@xmlListPop:

; 530  : }

	pop	ebp
	ret	0
_xmlListPopBack ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListPopFront
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListPopFront PROC					; COMDAT

; 514  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4

; 448  :     if (l == NULL)

	mov	edx, DWORD PTR _l$[ebp]
	test	edx, edx
	je	SHORT $LN7@xmlListPop

; 449  :         return(-1);
; 450  :     return (l->sentinel->next == l->sentinel);

	mov	eax, DWORD PTR [edx]
	push	esi
	mov	esi, DWORD PTR [eax]

; 515  :     if(!xmlListEmpty(l))

	cmp	esi, eax
	je	SHORT $LN10@xmlListPop

; 61   :     (lk->prev)->next = lk->next;

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 62   :     (lk->next)->prev = lk->prev;

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 63   :     if(l->linkDeallocator)

	mov	eax, DWORD PTR [edx+4]
	test	eax, eax
	je	SHORT $LN8@xmlListPop

; 64   :         l->linkDeallocator(lk);

	push	esi
	call	eax
	add	esp, 4
$LN8@xmlListPop:

; 65   :     xmlFree(lk);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4
$LN10@xmlListPop:
	pop	esi
$LN7@xmlListPop:

; 516  :         xmlLinkDeallocator(l, l->sentinel->next);
; 517  : }

	pop	ebp
	ret	0
_xmlListPopFront ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListSize
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListSize PROC					; COMDAT

; 495  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edx, DWORD PTR _l$[ebp]
	xor	eax, eax
	test	edx, edx
	jne	SHORT $LN5@xmlListSiz

; 496  :     xmlLinkPtr lk;
; 497  :     int count=0;
; 498  : 
; 499  :     if (l == NULL)
; 500  :         return(-1);

	or	eax, -1

; 503  :     return count;
; 504  : }

	pop	ebp
	ret	0
$LN5@xmlListSiz:

; 501  :     /* TODO: keep a counter in xmlList instead */
; 502  :     for(lk = l->sentinel->next; lk != l->sentinel; lk = lk->next, count++);

	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, edx
	je	SHORT $LN1@xmlListSiz
$LL4@xmlListSiz:
	mov	ecx, DWORD PTR [ecx]
	inc	eax
	cmp	ecx, edx
	jne	SHORT $LL4@xmlListSiz
$LN1@xmlListSiz:

; 503  :     return count;
; 504  : }

	pop	ebp
	ret	0
_xmlListSize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListEnd
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListEnd PROC					; COMDAT

; 479  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _l$[ebp]
	test	eax, eax
	jne	SHORT $LN2@xmlListEnd

; 483  : }

	pop	ebp
	ret	0
$LN2@xmlListEnd:

; 480  :     if (l == NULL)
; 481  :         return(NULL);
; 482  :     return (l->sentinel->prev);

	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]

; 483  : }

	pop	ebp
	ret	0
_xmlListEnd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListFront
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListFront PROC					; COMDAT

; 463  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _l$[ebp]
	test	eax, eax
	jne	SHORT $LN2@xmlListFro

; 467  : }

	pop	ebp
	ret	0
$LN2@xmlListFro:

; 464  :     if (l == NULL)
; 465  :         return(NULL);
; 466  :     return (l->sentinel->next);

	mov	eax, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax]

; 467  : }

	pop	ebp
	ret	0
_xmlListFront ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListEmpty
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListEmpty PROC					; COMDAT

; 447  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ecx, DWORD PTR _l$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@xmlListEmp

; 448  :     if (l == NULL)
; 449  :         return(-1);

	or	eax, -1

; 451  : }

	pop	ebp
	ret	0
$LN2@xmlListEmp:

; 450  :     return (l->sentinel->next == l->sentinel);

	mov	ecx, DWORD PTR [ecx]
	xor	eax, eax
	cmp	DWORD PTR [ecx], ecx
	sete	al

; 451  : }

	pop	ebp
	ret	0
_xmlListEmpty ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListClear
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListClear PROC					; COMDAT

; 423  : {

	push	ebp
	mov	ebp, esp
	push	ebx
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	ebx, DWORD PTR _l$[ebp]
	test	ebx, ebx
	je	SHORT $LN3@xmlListCle

; 424  :     xmlLinkPtr  lk;
; 425  : 
; 426  :     if (l == NULL)
; 427  :         return;
; 428  :     lk = l->sentinel->next;

	mov	eax, DWORD PTR [ebx]
	push	esi
	mov	esi, DWORD PTR [eax]

; 429  :     while(lk != l->sentinel) {

	cmp	esi, eax
	je	SHORT $LN13@xmlListCle
	push	edi
	npad	1
$LL2@xmlListCle:

; 61   :     (lk->prev)->next = lk->next;

	mov	eax, DWORD PTR [esi+4]

; 430  :         xmlLinkPtr next = lk->next;

	mov	edi, DWORD PTR [esi]

; 61   :     (lk->prev)->next = lk->next;

	mov	DWORD PTR [eax], edi

; 62   :     (lk->next)->prev = lk->prev;

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 63   :     if(l->linkDeallocator)

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN7@xmlListCle

; 64   :         l->linkDeallocator(lk);

	push	esi
	call	eax
	add	esp, 4
$LN7@xmlListCle:

; 65   :     xmlFree(lk);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4

; 431  : 
; 432  :         xmlLinkDeallocator(l, lk);
; 433  :         lk = next;

	mov	esi, edi
	cmp	edi, DWORD PTR [ebx]
	jne	SHORT $LL2@xmlListCle
	pop	edi
$LN13@xmlListCle:
	pop	esi
$LN3@xmlListCle:
	pop	ebx

; 434  :     }
; 435  : }

	pop	ebp
	ret	0
_xmlListClear ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListRemoveAll
_TEXT	SEGMENT
_count$1$ = -4						; size = 4
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListRemoveAll PROC					; COMDAT

; 404  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _l$[ebp]
	xor	eax, eax
	mov	DWORD PTR _count$1$[ebp], eax
	test	edi, edi
	jne	SHORT $LN48@xmlListRem
	pop	edi

; 413  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN48@xmlListRem:
	push	ebx
	mov	ebx, DWORD PTR _data$[ebp]
	push	esi
$LL2@xmlListRem:

; 104  :     for(lk = l->sentinel->next;lk != l->sentinel && l->linkCompare(lk->data, data) <0 ;lk = lk->next);

	mov	eax, DWORD PTR [edi]
	mov	esi, DWORD PTR [eax]
	cmp	esi, eax
	je	SHORT $LN50@xmlListRem
	npad	3
$LL19@xmlListRem:
	mov	eax, DWORD PTR [edi+8]
	push	ebx
	push	DWORD PTR [esi+8]
	call	eax
	add	esp, 8
	test	eax, eax
	jns	SHORT $LN50@xmlListRem
	mov	esi, DWORD PTR [esi]
	cmp	esi, DWORD PTR [edi]
	jne	SHORT $LL19@xmlListRem
$LN50@xmlListRem:

; 144  :     if (lk == l->sentinel)

	cmp	esi, DWORD PTR [edi]
	je	SHORT $LN41@xmlListRem

; 145  :         return NULL;
; 146  :     else {
; 147  :         if (l->linkCompare(lk->data, data) ==0)

	mov	eax, DWORD PTR [edi+8]
	push	ebx
	push	DWORD PTR [esi+8]
	call	eax
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN41@xmlListRem

; 61   :     (lk->prev)->next = lk->next;

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 62   :     (lk->next)->prev = lk->prev;

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 63   :     if(l->linkDeallocator)

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN23@xmlListRem

; 64   :         l->linkDeallocator(lk);

	push	esi
	call	eax
	add	esp, 4
$LN23@xmlListRem:

; 65   :     xmlFree(lk);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4

; 405  :     int count=0;
; 406  : 
; 407  :     if (l == NULL)
; 408  :         return(0);
; 409  : 
; 410  :     while(xmlListRemoveFirst(l, data))
; 411  :         count++;

	inc	DWORD PTR _count$1$[ebp]
	jmp	SHORT $LL2@xmlListRem
$LN41@xmlListRem:

; 412  :     return count;

	mov	eax, DWORD PTR _count$1$[ebp]
	pop	esi
	pop	ebx
	pop	edi

; 413  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_xmlListRemoveAll ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListRemoveLast
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListRemoveLast PROC					; COMDAT

; 379  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _l$[ebp]
	test	edi, edi
	je	SHORT $LN3@xmlListRem

; 168  :     lk = xmlListHigherSearch(l, data);

	push	DWORD PTR _data$[ebp]
	push	edi
	call	_xmlListHigherSearch
	mov	esi, eax
	add	esp, 8

; 169  :     if (lk == l->sentinel)

	cmp	esi, DWORD PTR [edi]
	je	SHORT $LN3@xmlListRem

; 170  :         return NULL;
; 171  :     else {
; 172  :         if (l->linkCompare(lk->data, data) ==0)

	push	DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [edi+8]
	push	DWORD PTR [esi+8]
	call	ecx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@xmlListRem

; 61   :     (lk->prev)->next = lk->next;

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 62   :     (lk->next)->prev = lk->prev;

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 63   :     if(l->linkDeallocator)

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN12@xmlListRem

; 64   :         l->linkDeallocator(lk);

	push	esi
	call	eax
	add	esp, 4
$LN12@xmlListRem:

; 65   :     xmlFree(lk);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4

; 380  :     xmlLinkPtr lk;
; 381  : 
; 382  :     if (l == NULL)
; 383  :         return(0);
; 384  :     /*Find the last instance of this data */
; 385  :     lk = xmlListLinkReverseSearch(l, data);
; 386  :     if (lk != NULL) {
; 387  : 	xmlLinkDeallocator(l, lk);
; 388  :         return 1;

	mov	eax, 1
	pop	edi

; 391  : }

	pop	esi
	pop	ebp
	ret	0
$LN3@xmlListRem:
	pop	edi

; 389  :     }
; 390  :     return 0;

	xor	eax, eax

; 391  : }

	pop	esi
	pop	ebp
	ret	0
_xmlListRemoveLast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListRemoveFirst
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListRemoveFirst PROC				; COMDAT

; 354  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	edi, DWORD PTR _l$[ebp]
	test	edi, edi
	je	SHORT $LN3@xmlListRem

; 143  :     lk = xmlListLowerSearch(l, data);

	push	DWORD PTR _data$[ebp]
	push	edi
	call	_xmlListLowerSearch
	mov	esi, eax
	add	esp, 8

; 144  :     if (lk == l->sentinel)

	cmp	esi, DWORD PTR [edi]
	je	SHORT $LN3@xmlListRem

; 145  :         return NULL;
; 146  :     else {
; 147  :         if (l->linkCompare(lk->data, data) ==0)

	push	DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [edi+8]
	push	DWORD PTR [esi+8]
	call	ecx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@xmlListRem

; 61   :     (lk->prev)->next = lk->next;

	mov	ecx, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 62   :     (lk->next)->prev = lk->prev;

	mov	ecx, DWORD PTR [esi]
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 63   :     if(l->linkDeallocator)

	mov	eax, DWORD PTR [edi+4]
	test	eax, eax
	je	SHORT $LN12@xmlListRem

; 64   :         l->linkDeallocator(lk);

	push	esi
	call	eax
	add	esp, 4
$LN12@xmlListRem:

; 65   :     xmlFree(lk);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 4

; 355  :     xmlLinkPtr lk;
; 356  : 
; 357  :     if (l == NULL)
; 358  :         return(0);
; 359  :     /*Find the first instance of this data */
; 360  :     lk = xmlListLinkSearch(l, data);
; 361  :     if (lk != NULL) {
; 362  :         xmlLinkDeallocator(l, lk);
; 363  :         return 1;

	mov	eax, 1
	pop	edi

; 366  : }

	pop	esi
	pop	ebp
	ret	0
$LN3@xmlListRem:
	pop	edi

; 364  :     }
; 365  :     return 0;

	xor	eax, eax

; 366  : }

	pop	esi
	pop	ebp
	ret	0
_xmlListRemoveFirst ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListAppend
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListAppend PROC					; COMDAT

; 306  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _l$[ebp]
	test	eax, eax
	jne	SHORT $LN2@xmlListApp

; 307  :     xmlLinkPtr lkPlace, lkNew;
; 308  : 
; 309  :     if (l == NULL)
; 310  :         return(1);

	mov	eax, 1

; 325  : }

	pop	ebp
	ret	0
$LN2@xmlListApp:
	push	esi
	push	edi

; 311  :     lkPlace = xmlListHigherSearch(l, data);

	mov	edi, DWORD PTR _data$[ebp]
	push	edi
	push	eax
	call	_xmlListHigherSearch

; 312  :     /* Add the new link */
; 313  :     lkNew = (xmlLinkPtr) xmlMalloc(sizeof(xmlLink));

	push	12					; 0000000cH
	mov	esi, eax
	call	DWORD PTR _xmlMalloc
	mov	ecx, eax
	add	esp, 12					; 0000000cH

; 314  :     if (lkNew == NULL) {

	test	ecx, ecx
	jne	SHORT $LN3@xmlListApp

; 315  :         xmlGenericError(xmlGenericErrorContext,

	call	___xmlGenericError
	mov	esi, eax
	call	___xmlGenericErrorContext
	push	OFFSET ??_C@_0CG@HDAIMGNF@Cannot?5initialize?5memory?5for?5ne@
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	call	eax
	add	esp, 8

; 316  : 		        "Cannot initialize memory for new link");
; 317  :         return (1);

	mov	eax, 1
	pop	edi
	pop	esi

; 325  : }

	pop	ebp
	ret	0
$LN3@xmlListApp:

; 318  :     }
; 319  :     lkNew->data = data;

	mov	DWORD PTR [ecx+8], edi

; 320  :     lkNew->next = lkPlace->next;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 321  :     (lkPlace->next)->prev = lkNew;

	mov	eax, DWORD PTR [esi]
	pop	edi
	mov	DWORD PTR [eax+4], ecx

; 322  :     lkPlace->next = lkNew;
; 323  :     lkNew->prev = lkPlace;
; 324  :     return 0;

	xor	eax, eax
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [ecx+4], esi
	pop	esi

; 325  : }

	pop	ebp
	ret	0
_xmlListAppend ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListInsert
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListInsert PROC					; COMDAT

; 274  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	eax, DWORD PTR _l$[ebp]
	test	eax, eax
	jne	SHORT $LN2@xmlListIns

; 275  :     xmlLinkPtr lkPlace, lkNew;
; 276  : 
; 277  :     if (l == NULL)
; 278  :         return(1);

	mov	eax, 1

; 294  : }

	pop	ebp
	ret	0
$LN2@xmlListIns:
	push	esi

; 279  :     lkPlace = xmlListLowerSearch(l, data);

	mov	esi, DWORD PTR _data$[ebp]
	push	edi
	push	esi
	push	eax
	call	_xmlListLowerSearch

; 280  :     /* Add the new link */
; 281  :     lkNew = (xmlLinkPtr) xmlMalloc(sizeof(xmlLink));

	push	12					; 0000000cH
	mov	edi, eax
	call	DWORD PTR _xmlMalloc
	mov	edx, eax
	add	esp, 12					; 0000000cH

; 282  :     if (lkNew == NULL) {

	test	edx, edx
	jne	SHORT $LN3@xmlListIns

; 283  :         xmlGenericError(xmlGenericErrorContext,

	call	___xmlGenericError
	mov	esi, eax
	call	___xmlGenericErrorContext
	push	OFFSET ??_C@_0CG@HDAIMGNF@Cannot?5initialize?5memory?5for?5ne@
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	call	eax
	add	esp, 8

; 284  : 		        "Cannot initialize memory for new link");
; 285  :         return (1);

	mov	eax, 1
	pop	edi
	pop	esi

; 294  : }

	pop	ebp
	ret	0
$LN3@xmlListIns:

; 286  :     }
; 287  :     lkNew->data = data;

	mov	DWORD PTR [edx+8], esi

; 288  :     lkPlace = lkPlace->prev;

	mov	ecx, DWORD PTR [edi+4]
	pop	edi
	pop	esi

; 289  :     lkNew->next = lkPlace->next;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax

; 290  :     (lkPlace->next)->prev = lkNew;

	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 291  :     lkPlace->next = lkNew;
; 292  :     lkNew->prev = lkPlace;
; 293  :     return 0;

	xor	eax, eax
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [edx+4], ecx

; 294  : }

	pop	ebp
	ret	0
_xmlListInsert ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListReverseSearch
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListReverseSearch PROC				; COMDAT

; 253  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _l$[ebp]
	test	esi, esi
	je	SHORT $LN3@xmlListRev

; 168  :     lk = xmlListHigherSearch(l, data);

	push	DWORD PTR _data$[ebp]
	push	esi
	call	_xmlListHigherSearch
	mov	edi, eax
	add	esp, 8

; 169  :     if (lk == l->sentinel)

	cmp	edi, DWORD PTR [esi]
	je	SHORT $LN3@xmlListRev

; 170  :         return NULL;
; 171  :     else {
; 172  :         if (l->linkCompare(lk->data, data) ==0)

	push	DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [esi+8]
	push	DWORD PTR [edi+8]
	call	ecx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@xmlListRev

; 261  : }

	mov	eax, DWORD PTR [edi+8]
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN3@xmlListRev:
	pop	edi

; 254  :     xmlLinkPtr lk;
; 255  :     if (l == NULL)
; 256  :         return(NULL);
; 257  :     lk = xmlListLinkReverseSearch(l, data);
; 258  :     if (lk)
; 259  :         return (lk->data);
; 260  :     return NULL;

	xor	eax, eax

; 261  : }

	pop	esi
	pop	ebp
	ret	0
_xmlListReverseSearch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListSearch
_TEXT	SEGMENT
_l$ = 8							; size = 4
_data$ = 12						; size = 4
_xmlListSearch PROC					; COMDAT

; 232  : {

	push	ebp
	mov	ebp, esp
	push	esi
	push	edi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _l$[ebp]
	test	esi, esi
	je	SHORT $LN3@xmlListSea

; 143  :     lk = xmlListLowerSearch(l, data);

	push	DWORD PTR _data$[ebp]
	push	esi
	call	_xmlListLowerSearch
	mov	edi, eax
	add	esp, 8

; 144  :     if (lk == l->sentinel)

	cmp	edi, DWORD PTR [esi]
	je	SHORT $LN3@xmlListSea

; 145  :         return NULL;
; 146  :     else {
; 147  :         if (l->linkCompare(lk->data, data) ==0)

	push	DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [esi+8]
	push	DWORD PTR [edi+8]
	call	ecx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@xmlListSea

; 240  : }

	mov	eax, DWORD PTR [edi+8]
	pop	edi
	pop	esi
	pop	ebp
	ret	0
$LN3@xmlListSea:
	pop	edi

; 233  :     xmlLinkPtr lk;
; 234  :     if (l == NULL)
; 235  :         return(NULL);
; 236  :     lk = xmlListLinkSearch(l, data);
; 237  :     if (lk)
; 238  :         return (lk->data);
; 239  :     return NULL;

	xor	eax, eax

; 240  : }

	pop	esi
	pop	ebp
	ret	0
_xmlListSearch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListDelete
_TEXT	SEGMENT
_l$ = 8							; size = 4
_xmlListDelete PROC					; COMDAT

; 334  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __C9B4D122_list@c
	call	@__CheckForDebuggerJustMyCode@4
	mov	esi, DWORD PTR _l$[ebp]
	test	esi, esi
	je	SHORT $LN1@xmlListDel

; 335  :     if (l == NULL)
; 336  :         return;
; 337  : 
; 338  :     xmlListClear(l);

	push	esi
	call	_xmlListClear

; 339  :     xmlFree(l->sentinel);

	push	DWORD PTR [esi]
	call	DWORD PTR _xmlFree

; 340  :     xmlFree(l);

	push	esi
	call	DWORD PTR _xmlFree
	add	esp, 12					; 0000000cH
$LN1@xmlListDel:
	pop	esi

; 341  : }

	pop	ebp
	ret	0
_xmlListDelete ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\list.c
;	COMDAT _xmlListCreate
_TEXT	SEGMENT
_deallocator$ = 8					; size = 4
_compare$ = 12						; size = 4
_xmlListCreate PROC					; COMDAT

; 189  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR _compare$[ebp]
	mov	ecx, OFFSET __C9B4D122_list@c
	push	edi
	call	@__CheckForDebuggerJustMyCode@4
	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	mov	edi, eax
	add	esp, 4
	test	edi, edi
	jne	SHORT $LN2@xmlListCre

; 190  :     xmlListPtr l;
; 191  :     if (NULL == (l = (xmlListPtr )xmlMalloc( sizeof(xmlList)))) {
; 192  :         xmlGenericError(xmlGenericErrorContext,

	call	___xmlGenericError
	mov	esi, eax
	call	___xmlGenericErrorContext
	push	OFFSET ??_C@_0CC@PEFKPBME@Cannot?5initialize?5memory?5for?5li@
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	call	eax
	add	esp, 8

; 193  : 		        "Cannot initialize memory for list");
; 194  :         return (NULL);

	xor	eax, eax
	pop	edi

; 219  : }

	pop	esi
	pop	ebp
	ret	0
$LN2@xmlListCre:
	xorps	xmm0, xmm0

; 195  :     }
; 196  :     /* Initialize the list to NULL */
; 197  :     memset(l, 0, sizeof(xmlList));

	movq	QWORD PTR [edi], xmm0

; 198  : 
; 199  :     /* Add the sentinel */
; 200  :     if (NULL ==(l->sentinel = (xmlLinkPtr )xmlMalloc(sizeof(xmlLink)))) {

	push	12					; 0000000cH
	mov	DWORD PTR [edi+8], 0
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	mov	DWORD PTR [edi], eax
	test	eax, eax
	jne	SHORT $LN3@xmlListCre

; 201  :         xmlGenericError(xmlGenericErrorContext,

	call	___xmlGenericError
	mov	esi, eax
	call	___xmlGenericErrorContext
	push	OFFSET ??_C@_0CG@FNPNDOOA@Cannot?5initialize?5memory?5for?5se@
	push	DWORD PTR [eax]
	mov	eax, DWORD PTR [esi]
	call	eax

; 202  : 		        "Cannot initialize memory for sentinel");
; 203  : 	xmlFree(l);

	push	edi
	call	DWORD PTR _xmlFree
	add	esp, 12					; 0000000cH

; 204  :         return (NULL);

	xor	eax, eax
	pop	edi

; 219  : }

	pop	esi
	pop	ebp
	ret	0
$LN3@xmlListCre:

; 205  :     }
; 206  :     l->sentinel->next = l->sentinel;

	mov	DWORD PTR [eax], eax

; 207  :     l->sentinel->prev = l->sentinel;

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax+4], eax

; 208  :     l->sentinel->data = NULL;

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [eax+8], 0

; 209  : 
; 210  :     /* If there is a link deallocator, use it */
; 211  :     if (deallocator != NULL)

	mov	eax, DWORD PTR _deallocator$[ebp]
	test	eax, eax
	je	SHORT $LN4@xmlListCre

; 212  :         l->linkDeallocator = deallocator;

	mov	DWORD PTR [edi+4], eax
$LN4@xmlListCre:

; 213  :     /* If there is a link comparator, use it */
; 214  :     if (compare != NULL)
; 215  :         l->linkCompare = compare;
; 216  :     else /* Use our own */
; 217  :         l->linkCompare = xmlLinkCompare;
; 218  :     return l;

	test	esi, esi
	mov	eax, OFFSET _xmlLinkCompare
	cmove	esi, eax
	mov	eax, edi
	mov	DWORD PTR [edi+8], esi
	pop	edi

; 219  : }

	pop	esi
	pop	ebp
	ret	0
_xmlListCreate ENDP
_TEXT	ENDS
END
