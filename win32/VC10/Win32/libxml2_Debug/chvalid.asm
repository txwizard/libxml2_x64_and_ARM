; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\chvalid.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_xmlIsBaseCharGroup
PUBLIC	_xmlIsCharGroup
PUBLIC	_xmlIsCombiningGroup
PUBLIC	_xmlIsDigitGroup
PUBLIC	_xmlIsExtenderGroup
PUBLIC	_xmlIsIdeographicGroup
PUBLIC	_xmlIsPubidChar_tab
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__A03AD333_chvalid@c DB 01H
msvcjmc	ENDS
CONST	SEGMENT
_xmlIsBaseCharGroup DD 0c5H
	DD	00H
	DD	FLAT:_xmlIsBaseChar_srng
	DD	00H
_xmlIsCharGroup DD 02H
	DD	01H
	DD	FLAT:_xmlIsChar_srng
	DD	FLAT:_xmlIsChar_lrng
_xmlIsCombiningGroup DD 05fH
	DD	00H
	DD	FLAT:_xmlIsCombining_srng
	DD	00H
_xmlIsDigitGroup DD 0eH
	DD	00H
	DD	FLAT:_xmlIsDigit_srng
	DD	00H
_xmlIsExtenderGroup DD 0aH
	DD	00H
	DD	FLAT:_xmlIsExtender_srng
	DD	00H
_xmlIsIdeographicGroup DD 03H
	DD	00H
	DD	FLAT:_xmlIsIdeographic_srng
	DD	00H
_xmlIsPubidChar_tab DB 00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
_xmlIsBaseChar_srng DW 0100H
	DW	0131H
	DW	0134H
	DW	013eH
	DW	0141H
	DW	0148H
	DW	014aH
	DW	017eH
	DW	0180H
	DW	01c3H
	DW	01cdH
	DW	01f0H
	DW	01f4H
	DW	01f5H
	DW	01faH
	DW	0217H
	DW	0250H
	DW	02a8H
	DW	02bbH
	DW	02c1H
	DW	0386H
	DW	0386H
	DW	0388H
	DW	038aH
	DW	038cH
	DW	038cH
	DW	038eH
	DW	03a1H
	DW	03a3H
	DW	03ceH
	DW	03d0H
	DW	03d6H
	DW	03daH
	DW	03daH
	DW	03dcH
	DW	03dcH
	DW	03deH
	DW	03deH
	DW	03e0H
	DW	03e0H
	DW	03e2H
	DW	03f3H
	DW	0401H
	DW	040cH
	DW	040eH
	DW	044fH
	DW	0451H
	DW	045cH
	DW	045eH
	DW	0481H
	DW	0490H
	DW	04c4H
	DW	04c7H
	DW	04c8H
	DW	04cbH
	DW	04ccH
	DW	04d0H
	DW	04ebH
	DW	04eeH
	DW	04f5H
	DW	04f8H
	DW	04f9H
	DW	0531H
	DW	0556H
	DW	0559H
	DW	0559H
	DW	0561H
	DW	0586H
	DW	05d0H
	DW	05eaH
	DW	05f0H
	DW	05f2H
	DW	0621H
	DW	063aH
	DW	0641H
	DW	064aH
	DW	0671H
	DW	06b7H
	DW	06baH
	DW	06beH
	DW	06c0H
	DW	06ceH
	DW	06d0H
	DW	06d3H
	DW	06d5H
	DW	06d5H
	DW	06e5H
	DW	06e6H
	DW	0905H
	DW	0939H
	DW	093dH
	DW	093dH
	DW	0958H
	DW	0961H
	DW	0985H
	DW	098cH
	DW	098fH
	DW	0990H
	DW	0993H
	DW	09a8H
	DW	09aaH
	DW	09b0H
	DW	09b2H
	DW	09b2H
	DW	09b6H
	DW	09b9H
	DW	09dcH
	DW	09ddH
	DW	09dfH
	DW	09e1H
	DW	09f0H
	DW	09f1H
	DW	0a05H
	DW	0a0aH
	DW	0a0fH
	DW	0a10H
	DW	0a13H
	DW	0a28H
	DW	0a2aH
	DW	0a30H
	DW	0a32H
	DW	0a33H
	DW	0a35H
	DW	0a36H
	DW	0a38H
	DW	0a39H
	DW	0a59H
	DW	0a5cH
	DW	0a5eH
	DW	0a5eH
	DW	0a72H
	DW	0a74H
	DW	0a85H
	DW	0a8bH
	DW	0a8dH
	DW	0a8dH
	DW	0a8fH
	DW	0a91H
	DW	0a93H
	DW	0aa8H
	DW	0aaaH
	DW	0ab0H
	DW	0ab2H
	DW	0ab3H
	DW	0ab5H
	DW	0ab9H
	DW	0abdH
	DW	0abdH
	DW	0ae0H
	DW	0ae0H
	DW	0b05H
	DW	0b0cH
	DW	0b0fH
	DW	0b10H
	DW	0b13H
	DW	0b28H
	DW	0b2aH
	DW	0b30H
	DW	0b32H
	DW	0b33H
	DW	0b36H
	DW	0b39H
	DW	0b3dH
	DW	0b3dH
	DW	0b5cH
	DW	0b5dH
	DW	0b5fH
	DW	0b61H
	DW	0b85H
	DW	0b8aH
	DW	0b8eH
	DW	0b90H
	DW	0b92H
	DW	0b95H
	DW	0b99H
	DW	0b9aH
	DW	0b9cH
	DW	0b9cH
	DW	0b9eH
	DW	0b9fH
	DW	0ba3H
	DW	0ba4H
	DW	0ba8H
	DW	0baaH
	DW	0baeH
	DW	0bb5H
	DW	0bb7H
	DW	0bb9H
	DW	0c05H
	DW	0c0cH
	DW	0c0eH
	DW	0c10H
	DW	0c12H
	DW	0c28H
	DW	0c2aH
	DW	0c33H
	DW	0c35H
	DW	0c39H
	DW	0c60H
	DW	0c61H
	DW	0c85H
	DW	0c8cH
	DW	0c8eH
	DW	0c90H
	DW	0c92H
	DW	0ca8H
	DW	0caaH
	DW	0cb3H
	DW	0cb5H
	DW	0cb9H
	DW	0cdeH
	DW	0cdeH
	DW	0ce0H
	DW	0ce1H
	DW	0d05H
	DW	0d0cH
	DW	0d0eH
	DW	0d10H
	DW	0d12H
	DW	0d28H
	DW	0d2aH
	DW	0d39H
	DW	0d60H
	DW	0d61H
	DW	0e01H
	DW	0e2eH
	DW	0e30H
	DW	0e30H
	DW	0e32H
	DW	0e33H
	DW	0e40H
	DW	0e45H
	DW	0e81H
	DW	0e82H
	DW	0e84H
	DW	0e84H
	DW	0e87H
	DW	0e88H
	DW	0e8aH
	DW	0e8aH
	DW	0e8dH
	DW	0e8dH
	DW	0e94H
	DW	0e97H
	DW	0e99H
	DW	0e9fH
	DW	0ea1H
	DW	0ea3H
	DW	0ea5H
	DW	0ea5H
	DW	0ea7H
	DW	0ea7H
	DW	0eaaH
	DW	0eabH
	DW	0eadH
	DW	0eaeH
	DW	0eb0H
	DW	0eb0H
	DW	0eb2H
	DW	0eb3H
	DW	0ebdH
	DW	0ebdH
	DW	0ec0H
	DW	0ec4H
	DW	0f40H
	DW	0f47H
	DW	0f49H
	DW	0f69H
	DW	010a0H
	DW	010c5H
	DW	010d0H
	DW	010f6H
	DW	01100H
	DW	01100H
	DW	01102H
	DW	01103H
	DW	01105H
	DW	01107H
	DW	01109H
	DW	01109H
	DW	0110bH
	DW	0110cH
	DW	0110eH
	DW	01112H
	DW	0113cH
	DW	0113cH
	DW	0113eH
	DW	0113eH
	DW	01140H
	DW	01140H
	DW	0114cH
	DW	0114cH
	DW	0114eH
	DW	0114eH
	DW	01150H
	DW	01150H
	DW	01154H
	DW	01155H
	DW	01159H
	DW	01159H
	DW	0115fH
	DW	01161H
	DW	01163H
	DW	01163H
	DW	01165H
	DW	01165H
	DW	01167H
	DW	01167H
	DW	01169H
	DW	01169H
	DW	0116dH
	DW	0116eH
	DW	01172H
	DW	01173H
	DW	01175H
	DW	01175H
	DW	0119eH
	DW	0119eH
	DW	011a8H
	DW	011a8H
	DW	011abH
	DW	011abH
	DW	011aeH
	DW	011afH
	DW	011b7H
	DW	011b8H
	DW	011baH
	DW	011baH
	DW	011bcH
	DW	011c2H
	DW	011ebH
	DW	011ebH
	DW	011f0H
	DW	011f0H
	DW	011f9H
	DW	011f9H
	DW	01e00H
	DW	01e9bH
	DW	01ea0H
	DW	01ef9H
	DW	01f00H
	DW	01f15H
	DW	01f18H
	DW	01f1dH
	DW	01f20H
	DW	01f45H
	DW	01f48H
	DW	01f4dH
	DW	01f50H
	DW	01f57H
	DW	01f59H
	DW	01f59H
	DW	01f5bH
	DW	01f5bH
	DW	01f5dH
	DW	01f5dH
	DW	01f5fH
	DW	01f7dH
	DW	01f80H
	DW	01fb4H
	DW	01fb6H
	DW	01fbcH
	DW	01fbeH
	DW	01fbeH
	DW	01fc2H
	DW	01fc4H
	DW	01fc6H
	DW	01fccH
	DW	01fd0H
	DW	01fd3H
	DW	01fd6H
	DW	01fdbH
	DW	01fe0H
	DW	01fecH
	DW	01ff2H
	DW	01ff4H
	DW	01ff6H
	DW	01ffcH
	DW	02126H
	DW	02126H
	DW	0212aH
	DW	0212bH
	DW	0212eH
	DW	0212eH
	DW	02180H
	DW	02182H
	DW	03041H
	DW	03094H
	DW	030a1H
	DW	030faH
	DW	03105H
	DW	0312cH
	DW	0ac00H
	DW	0d7a3H
_xmlIsChar_srng DW 0100H
	DW	0d7ffH
	DW	0e000H
	DW	0fffdH
_xmlIsChar_lrng DD 010000H
	DD	010ffffH
_xmlIsIdeographic_srng DW 03007H
	DW	03007H
	DW	03021H
	DW	03029H
	DW	04e00H
	DW	09fa5H
_xmlIsCombining_srng DW 0300H
	DW	0345H
	DW	0360H
	DW	0361H
	DW	0483H
	DW	0486H
	DW	0591H
	DW	05a1H
	DW	05a3H
	DW	05b9H
	DW	05bbH
	DW	05bdH
	DW	05bfH
	DW	05bfH
	DW	05c1H
	DW	05c2H
	DW	05c4H
	DW	05c4H
	DW	064bH
	DW	0652H
	DW	0670H
	DW	0670H
	DW	06d6H
	DW	06dcH
	DW	06ddH
	DW	06dfH
	DW	06e0H
	DW	06e4H
	DW	06e7H
	DW	06e8H
	DW	06eaH
	DW	06edH
	DW	0901H
	DW	0903H
	DW	093cH
	DW	093cH
	DW	093eH
	DW	094cH
	DW	094dH
	DW	094dH
	DW	0951H
	DW	0954H
	DW	0962H
	DW	0963H
	DW	0981H
	DW	0983H
	DW	09bcH
	DW	09bcH
	DW	09beH
	DW	09beH
	DW	09bfH
	DW	09bfH
	DW	09c0H
	DW	09c4H
	DW	09c7H
	DW	09c8H
	DW	09cbH
	DW	09cdH
	DW	09d7H
	DW	09d7H
	DW	09e2H
	DW	09e3H
	DW	0a02H
	DW	0a02H
	DW	0a3cH
	DW	0a3cH
	DW	0a3eH
	DW	0a3eH
	DW	0a3fH
	DW	0a3fH
	DW	0a40H
	DW	0a42H
	DW	0a47H
	DW	0a48H
	DW	0a4bH
	DW	0a4dH
	DW	0a70H
	DW	0a71H
	DW	0a81H
	DW	0a83H
	DW	0abcH
	DW	0abcH
	DW	0abeH
	DW	0ac5H
	DW	0ac7H
	DW	0ac9H
	DW	0acbH
	DW	0acdH
	DW	0b01H
	DW	0b03H
	DW	0b3cH
	DW	0b3cH
	DW	0b3eH
	DW	0b43H
	DW	0b47H
	DW	0b48H
	DW	0b4bH
	DW	0b4dH
	DW	0b56H
	DW	0b57H
	DW	0b82H
	DW	0b83H
	DW	0bbeH
	DW	0bc2H
	DW	0bc6H
	DW	0bc8H
	DW	0bcaH
	DW	0bcdH
	DW	0bd7H
	DW	0bd7H
	DW	0c01H
	DW	0c03H
	DW	0c3eH
	DW	0c44H
	DW	0c46H
	DW	0c48H
	DW	0c4aH
	DW	0c4dH
	DW	0c55H
	DW	0c56H
	DW	0c82H
	DW	0c83H
	DW	0cbeH
	DW	0cc4H
	DW	0cc6H
	DW	0cc8H
	DW	0ccaH
	DW	0ccdH
	DW	0cd5H
	DW	0cd6H
	DW	0d02H
	DW	0d03H
	DW	0d3eH
	DW	0d43H
	DW	0d46H
	DW	0d48H
	DW	0d4aH
	DW	0d4dH
	DW	0d57H
	DW	0d57H
	DW	0e31H
	DW	0e31H
	DW	0e34H
	DW	0e3aH
	DW	0e47H
	DW	0e4eH
	DW	0eb1H
	DW	0eb1H
	DW	0eb4H
	DW	0eb9H
	DW	0ebbH
	DW	0ebcH
	DW	0ec8H
	DW	0ecdH
	DW	0f18H
	DW	0f19H
	DW	0f35H
	DW	0f35H
	DW	0f37H
	DW	0f37H
	DW	0f39H
	DW	0f39H
	DW	0f3eH
	DW	0f3eH
	DW	0f3fH
	DW	0f3fH
	DW	0f71H
	DW	0f84H
	DW	0f86H
	DW	0f8bH
	DW	0f90H
	DW	0f95H
	DW	0f97H
	DW	0f97H
	DW	0f99H
	DW	0fadH
	DW	0fb1H
	DW	0fb7H
	DW	0fb9H
	DW	0fb9H
	DW	020d0H
	DW	020dcH
	DW	020e1H
	DW	020e1H
	DW	0302aH
	DW	0302fH
	DW	03099H
	DW	03099H
	DW	0309aH
	DW	0309aH
_xmlIsDigit_srng DW 0660H
	DW	0669H
	DW	06f0H
	DW	06f9H
	DW	0966H
	DW	096fH
	DW	09e6H
	DW	09efH
	DW	0a66H
	DW	0a6fH
	DW	0ae6H
	DW	0aefH
	DW	0b66H
	DW	0b6fH
	DW	0be7H
	DW	0befH
	DW	0c66H
	DW	0c6fH
	DW	0ce6H
	DW	0cefH
	DW	0d66H
	DW	0d6fH
	DW	0e50H
	DW	0e59H
	DW	0ed0H
	DW	0ed9H
	DW	0f20H
	DW	0f29H
_xmlIsExtender_srng DW 02d0H
	DW	02d0H
	DW	02d1H
	DW	02d1H
	DW	0387H
	DW	0387H
	DW	0640H
	DW	0640H
	DW	0e46H
	DW	0e46H
	DW	0ec6H
	DW	0ec6H
	DW	03005H
	DW	03005H
	DW	03031H
	DW	03035H
	DW	0309dH
	DW	0309eH
	DW	030fcH
	DW	030feH
CONST	ENDS
PUBLIC	_xmlCharInRange
PUBLIC	_xmlIsBaseChar
PUBLIC	_xmlIsBlank
PUBLIC	_xmlIsChar
PUBLIC	_xmlIsCombining
PUBLIC	_xmlIsDigit
PUBLIC	_xmlIsExtender
PUBLIC	_xmlIsIdeographic
PUBLIC	_xmlIsPubidChar
PUBLIC	__JustMyCode_Default
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\chvalid.c
;	COMDAT _xmlIsPubidChar
_TEXT	SEGMENT
tv68 = -4						; size = 4
_ch$ = 8						; size = 4
_xmlIsPubidChar PROC					; COMDAT

; 331  : xmlIsPubidChar(unsigned int ch) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A03AD333_chvalid@c
	call	@__CheckForDebuggerJustMyCode@4

; 332  :     return(xmlIsPubidCharQ(ch));

	cmp	DWORD PTR _ch$[ebp], 256		; 00000100H
	jae	SHORT $LN3@xmlIsPubid
	mov	eax, DWORD PTR _ch$[ebp]
	movzx	ecx, BYTE PTR _xmlIsPubidChar_tab[eax]
	mov	DWORD PTR tv68[ebp], ecx
	jmp	SHORT $LN4@xmlIsPubid
$LN3@xmlIsPubid:
	mov	DWORD PTR tv68[ebp], 0
$LN4@xmlIsPubid:
	mov	eax, DWORD PTR tv68[ebp]

; 333  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsPubidChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\chvalid.c
;	COMDAT _xmlIsIdeographic
_TEXT	SEGMENT
tv70 = -8						; size = 4
tv71 = -4						; size = 4
_ch$ = 8						; size = 4
_xmlIsIdeographic PROC					; COMDAT

; 316  : xmlIsIdeographic(unsigned int ch) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A03AD333_chvalid@c
	call	@__CheckForDebuggerJustMyCode@4

; 317  :     return(xmlIsIdeographicQ(ch));

	cmp	DWORD PTR _ch$[ebp], 256		; 00000100H
	jae	SHORT $LN7@xmlIsIdeog
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN8@xmlIsIdeog
$LN7@xmlIsIdeog:
	cmp	DWORD PTR _ch$[ebp], 19968		; 00004e00H
	jb	SHORT $LN3@xmlIsIdeog
	cmp	DWORD PTR _ch$[ebp], 40869		; 00009fa5H
	jbe	SHORT $LN4@xmlIsIdeog
$LN3@xmlIsIdeog:
	cmp	DWORD PTR _ch$[ebp], 12295		; 00003007H
	je	SHORT $LN4@xmlIsIdeog
	cmp	DWORD PTR _ch$[ebp], 12321		; 00003021H
	jb	SHORT $LN5@xmlIsIdeog
	cmp	DWORD PTR _ch$[ebp], 12329		; 00003029H
	jbe	SHORT $LN4@xmlIsIdeog
$LN5@xmlIsIdeog:
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN6@xmlIsIdeog
$LN4@xmlIsIdeog:
	mov	DWORD PTR tv70[ebp], 1
$LN6@xmlIsIdeog:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR tv71[ebp], eax
$LN8@xmlIsIdeog:
	mov	eax, DWORD PTR tv71[ebp]

; 318  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsIdeographic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\chvalid.c
;	COMDAT _xmlIsExtender
_TEXT	SEGMENT
tv70 = -8						; size = 4
tv69 = -4						; size = 4
_ch$ = 8						; size = 4
_xmlIsExtender PROC					; COMDAT

; 301  : xmlIsExtender(unsigned int ch) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A03AD333_chvalid@c
	call	@__CheckForDebuggerJustMyCode@4

; 302  :     return(xmlIsExtenderQ(ch));

	cmp	DWORD PTR _ch$[ebp], 256		; 00000100H
	jae	SHORT $LN5@xmlIsExten
	cmp	DWORD PTR _ch$[ebp], 183		; 000000b7H
	jne	SHORT $LN3@xmlIsExten
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@xmlIsExten
$LN3@xmlIsExten:
	mov	DWORD PTR tv69[ebp], 0
$LN4@xmlIsExten:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN6@xmlIsExten
$LN5@xmlIsExten:
	push	OFFSET _xmlIsExtenderGroup
	mov	ecx, DWORD PTR _ch$[ebp]
	push	ecx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv70[ebp], eax
$LN6@xmlIsExten:
	mov	eax, DWORD PTR tv70[ebp]

; 303  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsExtender ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\chvalid.c
;	COMDAT _xmlIsDigit
_TEXT	SEGMENT
tv71 = -8						; size = 4
tv70 = -4						; size = 4
_ch$ = 8						; size = 4
_xmlIsDigit PROC					; COMDAT

; 286  : xmlIsDigit(unsigned int ch) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A03AD333_chvalid@c
	call	@__CheckForDebuggerJustMyCode@4

; 287  :     return(xmlIsDigitQ(ch));

	cmp	DWORD PTR _ch$[ebp], 256		; 00000100H
	jae	SHORT $LN5@xmlIsDigit
	cmp	DWORD PTR _ch$[ebp], 48			; 00000030H
	jb	SHORT $LN3@xmlIsDigit
	cmp	DWORD PTR _ch$[ebp], 57			; 00000039H
	ja	SHORT $LN3@xmlIsDigit
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@xmlIsDigit
$LN3@xmlIsDigit:
	mov	DWORD PTR tv70[ebp], 0
$LN4@xmlIsDigit:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN6@xmlIsDigit
$LN5@xmlIsDigit:
	push	OFFSET _xmlIsDigitGroup
	mov	ecx, DWORD PTR _ch$[ebp]
	push	ecx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv71[ebp], eax
$LN6@xmlIsDigit:
	mov	eax, DWORD PTR tv71[ebp]

; 288  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsDigit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\chvalid.c
;	COMDAT _xmlIsCombining
_TEXT	SEGMENT
tv68 = -4						; size = 4
_ch$ = 8						; size = 4
_xmlIsCombining PROC					; COMDAT

; 271  : xmlIsCombining(unsigned int ch) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A03AD333_chvalid@c
	call	@__CheckForDebuggerJustMyCode@4

; 272  :     return(xmlIsCombiningQ(ch));

	cmp	DWORD PTR _ch$[ebp], 256		; 00000100H
	jae	SHORT $LN3@xmlIsCombi
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN4@xmlIsCombi
$LN3@xmlIsCombi:
	push	OFFSET _xmlIsCombiningGroup
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv68[ebp], eax
$LN4@xmlIsCombi:
	mov	eax, DWORD PTR tv68[ebp]

; 273  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsCombining ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\chvalid.c
;	COMDAT _xmlIsChar
_TEXT	SEGMENT
tv75 = -12						; size = 4
tv77 = -8						; size = 4
tv76 = -4						; size = 4
_ch$ = 8						; size = 4
_xmlIsChar PROC						; COMDAT

; 256  : xmlIsChar(unsigned int ch) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A03AD333_chvalid@c
	call	@__CheckForDebuggerJustMyCode@4

; 257  :     return(xmlIsCharQ(ch));

	cmp	DWORD PTR _ch$[ebp], 256		; 00000100H
	jae	SHORT $LN11@xmlIsChar
	cmp	DWORD PTR _ch$[ebp], 9
	jb	SHORT $LN3@xmlIsChar
	cmp	DWORD PTR _ch$[ebp], 10			; 0000000aH
	jbe	SHORT $LN4@xmlIsChar
$LN3@xmlIsChar:
	cmp	DWORD PTR _ch$[ebp], 13			; 0000000dH
	je	SHORT $LN4@xmlIsChar
	cmp	DWORD PTR _ch$[ebp], 32			; 00000020H
	jae	SHORT $LN4@xmlIsChar
	mov	DWORD PTR tv76[ebp], 0
	jmp	SHORT $LN10@xmlIsChar
$LN4@xmlIsChar:
	mov	DWORD PTR tv76[ebp], 1
$LN10@xmlIsChar:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN12@xmlIsChar
$LN11@xmlIsChar:
	cmp	DWORD PTR _ch$[ebp], 256		; 00000100H
	jb	SHORT $LN5@xmlIsChar
	cmp	DWORD PTR _ch$[ebp], 55295		; 0000d7ffH
	jbe	SHORT $LN7@xmlIsChar
$LN5@xmlIsChar:
	cmp	DWORD PTR _ch$[ebp], 57344		; 0000e000H
	jb	SHORT $LN6@xmlIsChar
	cmp	DWORD PTR _ch$[ebp], 65533		; 0000fffdH
	jbe	SHORT $LN7@xmlIsChar
$LN6@xmlIsChar:
	cmp	DWORD PTR _ch$[ebp], 65536		; 00010000H
	jb	SHORT $LN8@xmlIsChar
	cmp	DWORD PTR _ch$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN7@xmlIsChar
$LN8@xmlIsChar:
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN9@xmlIsChar
$LN7@xmlIsChar:
	mov	DWORD PTR tv75[ebp], 1
$LN9@xmlIsChar:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv77[ebp], ecx
$LN12@xmlIsChar:
	mov	eax, DWORD PTR tv77[ebp]

; 258  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\chvalid.c
;	COMDAT _xmlIsBlank
_TEXT	SEGMENT
tv70 = -8						; size = 4
tv69 = -4						; size = 4
_ch$ = 8						; size = 4
_xmlIsBlank PROC					; COMDAT

; 241  : xmlIsBlank(unsigned int ch) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A03AD333_chvalid@c
	call	@__CheckForDebuggerJustMyCode@4

; 242  :     return(xmlIsBlankQ(ch));

	cmp	DWORD PTR _ch$[ebp], 256		; 00000100H
	jae	SHORT $LN6@xmlIsBlank
	cmp	DWORD PTR _ch$[ebp], 32			; 00000020H
	je	SHORT $LN4@xmlIsBlank
	cmp	DWORD PTR _ch$[ebp], 9
	jb	SHORT $LN3@xmlIsBlank
	cmp	DWORD PTR _ch$[ebp], 10			; 0000000aH
	jbe	SHORT $LN4@xmlIsBlank
$LN3@xmlIsBlank:
	cmp	DWORD PTR _ch$[ebp], 13			; 0000000dH
	je	SHORT $LN4@xmlIsBlank
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN5@xmlIsBlank
$LN4@xmlIsBlank:
	mov	DWORD PTR tv69[ebp], 1
$LN5@xmlIsBlank:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN7@xmlIsBlank
$LN6@xmlIsBlank:
	mov	DWORD PTR tv70[ebp], 0
$LN7@xmlIsBlank:
	mov	eax, DWORD PTR tv70[ebp]

; 243  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsBlank ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\chvalid.c
;	COMDAT _xmlIsBaseChar
_TEXT	SEGMENT
tv78 = -8						; size = 4
tv77 = -4						; size = 4
_ch$ = 8						; size = 4
_xmlIsBaseChar PROC					; COMDAT

; 226  : xmlIsBaseChar(unsigned int ch) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A03AD333_chvalid@c
	call	@__CheckForDebuggerJustMyCode@4

; 227  :     return(xmlIsBaseCharQ(ch));

	cmp	DWORD PTR _ch$[ebp], 256		; 00000100H
	jae	SHORT $LN9@xmlIsBaseC
	cmp	DWORD PTR _ch$[ebp], 65			; 00000041H
	jb	SHORT $LN3@xmlIsBaseC
	cmp	DWORD PTR _ch$[ebp], 90			; 0000005aH
	jbe	SHORT $LN5@xmlIsBaseC
$LN3@xmlIsBaseC:
	cmp	DWORD PTR _ch$[ebp], 97			; 00000061H
	jb	SHORT $LN4@xmlIsBaseC
	cmp	DWORD PTR _ch$[ebp], 122		; 0000007aH
	jbe	SHORT $LN5@xmlIsBaseC
$LN4@xmlIsBaseC:
	cmp	DWORD PTR _ch$[ebp], 192		; 000000c0H
	jb	SHORT $LN6@xmlIsBaseC
	cmp	DWORD PTR _ch$[ebp], 214		; 000000d6H
	jbe	SHORT $LN5@xmlIsBaseC
$LN6@xmlIsBaseC:
	cmp	DWORD PTR _ch$[ebp], 216		; 000000d8H
	jb	SHORT $LN7@xmlIsBaseC
	cmp	DWORD PTR _ch$[ebp], 246		; 000000f6H
	jbe	SHORT $LN5@xmlIsBaseC
$LN7@xmlIsBaseC:
	cmp	DWORD PTR _ch$[ebp], 248		; 000000f8H
	jae	SHORT $LN5@xmlIsBaseC
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN8@xmlIsBaseC
$LN5@xmlIsBaseC:
	mov	DWORD PTR tv77[ebp], 1
$LN8@xmlIsBaseC:
	mov	eax, DWORD PTR tv77[ebp]
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN10@xmlIsBaseC
$LN9@xmlIsBaseC:
	push	OFFSET _xmlIsBaseCharGroup
	mov	ecx, DWORD PTR _ch$[ebp]
	push	ecx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv78[ebp], eax
$LN10@xmlIsBaseC:
	mov	eax, DWORD PTR tv78[ebp]

; 228  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsBaseChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\chvalid.c
;	COMDAT _xmlCharInRange
_TEXT	SEGMENT
_lptr$ = -20						; size = 4
_sptr$ = -16						; size = 4
_mid$ = -12						; size = 4
_high$ = -8						; size = 4
_low$ = -4						; size = 4
_val$ = 8						; size = 4
_rptr$ = 12						; size = 4
_xmlCharInRange PROC					; COMDAT

; 168  : xmlCharInRange (unsigned int val, const xmlChRangeGroup *rptr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A03AD333_chvalid@c
	call	@__CheckForDebuggerJustMyCode@4

; 169  :     int low, high, mid;
; 170  :     const xmlChSRange *sptr;
; 171  :     const xmlChLRange *lptr;
; 172  : 
; 173  :     if (rptr == NULL) return(0);

	cmp	DWORD PTR _rptr$[ebp], 0
	jne	SHORT $LN6@xmlCharInR
	xor	eax, eax
	jmp	$LN1@xmlCharInR
$LN6@xmlCharInR:

; 174  :     if (val < 0x10000) {	/* is val in 'short' or 'long'  array? */

	cmp	DWORD PTR _val$[ebp], 65536		; 00010000H
	jae	$LN7@xmlCharInR

; 175  : 	if (rptr->nbShortRange == 0)

	mov	eax, DWORD PTR _rptr$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN9@xmlCharInR

; 176  : 	    return 0;

	xor	eax, eax
	jmp	$LN1@xmlCharInR
$LN9@xmlCharInR:

; 177  : 	low = 0;

	mov	DWORD PTR _low$[ebp], 0

; 178  : 	high = rptr->nbShortRange - 1;

	mov	ecx, DWORD PTR _rptr$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	DWORD PTR _high$[ebp], edx

; 179  : 	sptr = rptr->shortRange;

	mov	eax, DWORD PTR _rptr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _sptr$[ebp], ecx
$LN2@xmlCharInR:

; 180  : 	while (low <= high) {

	mov	edx, DWORD PTR _low$[ebp]
	cmp	edx, DWORD PTR _high$[ebp]
	jg	SHORT $LN3@xmlCharInR

; 181  : 	    mid = (low + high) / 2;

	mov	eax, DWORD PTR _low$[ebp]
	add	eax, DWORD PTR _high$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _mid$[ebp], eax

; 182  : 	    if ((unsigned short) val < sptr[mid].low) {

	movzx	eax, WORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*4]
	cmp	eax, ecx
	jge	SHORT $LN10@xmlCharInR

; 183  : 		high = mid - 1;

	mov	edx, DWORD PTR _mid$[ebp]
	sub	edx, 1
	mov	DWORD PTR _high$[ebp], edx

; 184  : 	    } else {

	jmp	SHORT $LN11@xmlCharInR
$LN10@xmlCharInR:

; 185  : 	        if ((unsigned short) val > sptr[mid].high) {

	movzx	eax, WORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR _sptr$[ebp]
	movzx	ecx, WORD PTR [edx+ecx*4+2]
	cmp	eax, ecx
	jle	SHORT $LN12@xmlCharInR

; 186  : 		    low = mid + 1;

	mov	edx, DWORD PTR _mid$[ebp]
	add	edx, 1
	mov	DWORD PTR _low$[ebp], edx

; 187  : 		} else {

	jmp	SHORT $LN11@xmlCharInR
$LN12@xmlCharInR:

; 188  : 		    return 1;

	mov	eax, 1
	jmp	$LN1@xmlCharInR
$LN11@xmlCharInR:

; 189  : 		}
; 190  : 	    }
; 191  : 	}

	jmp	SHORT $LN2@xmlCharInR
$LN3@xmlCharInR:

; 192  :     } else {

	jmp	SHORT $LN8@xmlCharInR
$LN7@xmlCharInR:

; 193  : 	if (rptr->nbLongRange == 0) {

	mov	eax, DWORD PTR _rptr$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN14@xmlCharInR

; 194  : 	    return 0;

	xor	eax, eax
	jmp	SHORT $LN1@xmlCharInR
$LN14@xmlCharInR:

; 195  : 	}
; 196  : 	low = 0;

	mov	DWORD PTR _low$[ebp], 0

; 197  : 	high = rptr->nbLongRange - 1;

	mov	ecx, DWORD PTR _rptr$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR _high$[ebp], edx

; 198  : 	lptr = rptr->longRange;

	mov	eax, DWORD PTR _rptr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _lptr$[ebp], ecx
$LN4@xmlCharInR:

; 199  : 	while (low <= high) {

	mov	edx, DWORD PTR _low$[ebp]
	cmp	edx, DWORD PTR _high$[ebp]
	jg	SHORT $LN8@xmlCharInR

; 200  : 	    mid = (low + high) / 2;

	mov	eax, DWORD PTR _low$[ebp]
	add	eax, DWORD PTR _high$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR _mid$[ebp], eax

; 201  : 	    if (val < lptr[mid].low) {

	mov	eax, DWORD PTR _mid$[ebp]
	mov	ecx, DWORD PTR _lptr$[ebp]
	mov	edx, DWORD PTR _val$[ebp]
	cmp	edx, DWORD PTR [ecx+eax*8]
	jae	SHORT $LN15@xmlCharInR

; 202  : 		high = mid - 1;

	mov	eax, DWORD PTR _mid$[ebp]
	sub	eax, 1
	mov	DWORD PTR _high$[ebp], eax

; 203  : 	    } else {

	jmp	SHORT $LN16@xmlCharInR
$LN15@xmlCharInR:

; 204  : 	        if (val > lptr[mid].high) {

	mov	ecx, DWORD PTR _mid$[ebp]
	mov	edx, DWORD PTR _lptr$[ebp]
	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR [edx+ecx*8+4]
	jbe	SHORT $LN17@xmlCharInR

; 205  : 		    low = mid + 1;

	mov	ecx, DWORD PTR _mid$[ebp]
	add	ecx, 1
	mov	DWORD PTR _low$[ebp], ecx

; 206  : 		} else {

	jmp	SHORT $LN16@xmlCharInR
$LN17@xmlCharInR:

; 207  : 		    return 1;

	mov	eax, 1
	jmp	SHORT $LN1@xmlCharInR
$LN16@xmlCharInR:

; 208  : 		}
; 209  : 	    }
; 210  : 	}

	jmp	SHORT $LN4@xmlCharInR
$LN8@xmlCharInR:

; 211  :     }
; 212  :     return 0;

	xor	eax, eax
$LN1@xmlCharInR:

; 213  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlCharInRange ENDP
_TEXT	ENDS
END
