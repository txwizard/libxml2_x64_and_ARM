; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\xpath.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@ ; `string'
PUBLIC	??_C@_03PJHHNEEI@xml@				; `string'
PUBLIC	??_C@_03KDKBKEMD@Ok?6@				; `string'
PUBLIC	??_C@_0BB@OKMDJLIM@Number?5encoding?6@		; `string'
PUBLIC	??_C@_0BE@HEBMIFHL@Unfinished?5literal?6@	; `string'
PUBLIC	??_C@_0BC@KLADNOLA@Start?5of?5literal?6@	; `string'
PUBLIC	??_C@_0CD@PCDALDFN@Expected?5$?5for?5variable?5referen@ ; `string'
PUBLIC	??_C@_0BE@JIMEOEEA@Undefined?5variable?6@	; `string'
PUBLIC	??_C@_0BD@MFLBJOMG@Invalid?5predicate?6@	; `string'
PUBLIC	??_C@_0BE@CGBIHHBE@Invalid?5expression?6@	; `string'
PUBLIC	??_C@_0BN@DKJEIEAC@Missing?5closing?5curly?5brace?6@ ; `string'
PUBLIC	??_C@_0BH@FDADKKDC@Unregistered?5function?6@	; `string'
PUBLIC	??_C@_0BB@NCMBGCMG@Invalid?5operand?6@		; `string'
PUBLIC	??_C@_0O@HECJPNOD@Invalid?5type?6@		; `string'
PUBLIC	??_C@_0BN@CGCHLLOB@Invalid?5number?5of?5arguments?6@ ; `string'
PUBLIC	??_C@_0BG@JMBOPCAE@Invalid?5context?5size?6@	; `string'
PUBLIC	??_C@_0BK@CKPBPDPH@Invalid?5context?5position?6@ ; `string'
PUBLIC	??_C@_0BJ@OGCHFJAK@Memory?5allocation?5error?6@	; `string'
PUBLIC	??_C@_0O@JJFGCDGG@Syntax?5error?6@		; `string'
PUBLIC	??_C@_0BA@IPNFPAOO@Resource?5error?6@		; `string'
PUBLIC	??_C@_0BE@ILOLKABH@Sub?5resource?5error?6@	; `string'
PUBLIC	??_C@_0BM@FJPIKKBA@Undefined?5namespace?5prefix?6@ ; `string'
PUBLIC	??_C@_0BA@ONCPONLN@Encoding?5error?6@		; `string'
PUBLIC	??_C@_0BH@FAHNGONI@Char?5out?5of?5XML?5range?6@	; `string'
PUBLIC	??_C@_0BP@HNOPDOE@Invalid?5or?5incomplete?5context?6@ ; `string'
PUBLIC	??_C@_0BD@MEAKLJLB@Stack?5usage?5error?6@	; `string'
PUBLIC	??_C@_0BE@EKOADJON@Forbidden?5variable?6@	; `string'
PUBLIC	??_C@_0BF@NKLLLIIE@?$DP?$DP?5Unknown?5error?5?$DP?$DP?6@ ; `string'
_DATA	SEGMENT
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_xmlXPathNAN:QWORD
COMM	_xmlXPathPINF:QWORD
COMM	_xmlXPathNINF:QWORD
COMM	_xmlIsBaseCharGroup:BYTE:010H
COMM	_xmlIsCharGroup:BYTE:010H
COMM	_xmlIsCombiningGroup:BYTE:010H
COMM	_xmlIsDigitGroup:BYTE:010H
COMM	_xmlIsExtenderGroup:BYTE:010H
COMM	_xmlIsIdeographicGroup:BYTE:010H
COMM	_xmlIsPubidChar_tab:BYTE:0100H
COMM	_xmlParserMaxDepth:DWORD
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
_DATA	ENDS
;	COMDAT ??_C@_0BF@NKLLLIIE@?$DP?$DP?5Unknown?5error?5?$DP?$DP?6@
CONST	SEGMENT
??_C@_0BF@NKLLLIIE@?$DP?$DP?5Unknown?5error?5?$DP?$DP?6@ DB '?? Unknown e'
	DB	'rror ??', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EKOADJON@Forbidden?5variable?6@
CONST	SEGMENT
??_C@_0BE@EKOADJON@Forbidden?5variable?6@ DB 'Forbidden variable', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MEAKLJLB@Stack?5usage?5error?6@
CONST	SEGMENT
??_C@_0BD@MEAKLJLB@Stack?5usage?5error?6@ DB 'Stack usage error', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HNOPDOE@Invalid?5or?5incomplete?5context?6@
CONST	SEGMENT
??_C@_0BP@HNOPDOE@Invalid?5or?5incomplete?5context?6@ DB 'Invalid or inco'
	DB	'mplete context', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FAHNGONI@Char?5out?5of?5XML?5range?6@
CONST	SEGMENT
??_C@_0BH@FAHNGONI@Char?5out?5of?5XML?5range?6@ DB 'Char out of XML range'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ONCPONLN@Encoding?5error?6@
CONST	SEGMENT
??_C@_0BA@ONCPONLN@Encoding?5error?6@ DB 'Encoding error', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FJPIKKBA@Undefined?5namespace?5prefix?6@
CONST	SEGMENT
??_C@_0BM@FJPIKKBA@Undefined?5namespace?5prefix?6@ DB 'Undefined namespac'
	DB	'e prefix', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ILOLKABH@Sub?5resource?5error?6@
CONST	SEGMENT
??_C@_0BE@ILOLKABH@Sub?5resource?5error?6@ DB 'Sub resource error', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IPNFPAOO@Resource?5error?6@
CONST	SEGMENT
??_C@_0BA@IPNFPAOO@Resource?5error?6@ DB 'Resource error', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JJFGCDGG@Syntax?5error?6@
CONST	SEGMENT
??_C@_0O@JJFGCDGG@Syntax?5error?6@ DB 'Syntax error', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGCHFJAK@Memory?5allocation?5error?6@
CONST	SEGMENT
??_C@_0BJ@OGCHFJAK@Memory?5allocation?5error?6@ DB 'Memory allocation err'
	DB	'or', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CKPBPDPH@Invalid?5context?5position?6@
CONST	SEGMENT
??_C@_0BK@CKPBPDPH@Invalid?5context?5position?6@ DB 'Invalid context posi'
	DB	'tion', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JMBOPCAE@Invalid?5context?5size?6@
CONST	SEGMENT
??_C@_0BG@JMBOPCAE@Invalid?5context?5size?6@ DB 'Invalid context size', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CGCHLLOB@Invalid?5number?5of?5arguments?6@
CONST	SEGMENT
??_C@_0BN@CGCHLLOB@Invalid?5number?5of?5arguments?6@ DB 'Invalid number o'
	DB	'f arguments', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HECJPNOD@Invalid?5type?6@
CONST	SEGMENT
??_C@_0O@HECJPNOD@Invalid?5type?6@ DB 'Invalid type', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NCMBGCMG@Invalid?5operand?6@
CONST	SEGMENT
??_C@_0BB@NCMBGCMG@Invalid?5operand?6@ DB 'Invalid operand', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FDADKKDC@Unregistered?5function?6@
CONST	SEGMENT
??_C@_0BH@FDADKKDC@Unregistered?5function?6@ DB 'Unregistered function', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DKJEIEAC@Missing?5closing?5curly?5brace?6@
CONST	SEGMENT
??_C@_0BN@DKJEIEAC@Missing?5closing?5curly?5brace?6@ DB 'Missing closing '
	DB	'curly brace', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CGBIHHBE@Invalid?5expression?6@
CONST	SEGMENT
??_C@_0BE@CGBIHHBE@Invalid?5expression?6@ DB 'Invalid expression', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MFLBJOMG@Invalid?5predicate?6@
CONST	SEGMENT
??_C@_0BD@MFLBJOMG@Invalid?5predicate?6@ DB 'Invalid predicate', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JIMEOEEA@Undefined?5variable?6@
CONST	SEGMENT
??_C@_0BE@JIMEOEEA@Undefined?5variable?6@ DB 'Undefined variable', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@PCDALDFN@Expected?5$?5for?5variable?5referen@
CONST	SEGMENT
??_C@_0CD@PCDALDFN@Expected?5$?5for?5variable?5referen@ DB 'Expected $ fo'
	DB	'r variable reference', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KLADNOLA@Start?5of?5literal?6@
CONST	SEGMENT
??_C@_0BC@KLADNOLA@Start?5of?5literal?6@ DB 'Start of literal', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HEBMIFHL@Unfinished?5literal?6@
CONST	SEGMENT
??_C@_0BE@HEBMIFHL@Unfinished?5literal?6@ DB 'Unfinished literal', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OKMDJLIM@Number?5encoding?6@
CONST	SEGMENT
??_C@_0BB@OKMDJLIM@Number?5encoding?6@ DB 'Number encoding', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03KDKBKEMD@Ok?6@
CONST	SEGMENT
??_C@_03KDKBKEMD@Ok?6@ DB 'Ok', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PJHHNEEI@xml@
CONST	SEGMENT
??_C@_03PJHHNEEI@xml@ DB 'xml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@
CONST	SEGMENT
??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@ DB 'http://ww'
	DB	'w.w3.org/XML/1998/namespace', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_xmlXPathXMLNamespaceStruct DD 00H
	DD	012H
	DD	FLAT:??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@
	DD	FLAT:??_C@_03PJHHNEEI@xml@
	DD	00H
	DD	00H
_DATA	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__7B7A869E_ctype@h DB 01H
__C4BA4707_timsort@h DB 01H
__9DBA2A81_xpath@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	_snprintf
PUBLIC	_xmlXPathFreeObject
PUBLIC	_xmlXPathNodeSetCreate
PUBLIC	_xmlXPathFreeNodeSetList
PUBLIC	_xmlXPathFreeNodeSet
PUBLIC	_xmlXPathObjectCopy
PUBLIC	_xmlXPathCmpNodes
PUBLIC	_xmlXPathCastNumberToBoolean
PUBLIC	_xmlXPathCastStringToBoolean
PUBLIC	_xmlXPathCastNodeSetToBoolean
PUBLIC	_xmlXPathCastToBoolean
PUBLIC	_xmlXPathCastBooleanToNumber
PUBLIC	_xmlXPathCastStringToNumber
PUBLIC	_xmlXPathCastNodeToNumber
PUBLIC	_xmlXPathCastNodeSetToNumber
PUBLIC	_xmlXPathCastToNumber
PUBLIC	_xmlXPathCastBooleanToString
PUBLIC	_xmlXPathCastNumberToString
PUBLIC	_xmlXPathCastNodeToString
PUBLIC	_xmlXPathCastNodeSetToString
PUBLIC	_xmlXPathCastToString
PUBLIC	_xmlXPathConvertBoolean
PUBLIC	_xmlXPathConvertNumber
PUBLIC	_xmlXPathConvertString
PUBLIC	_xmlXPathNewContext
PUBLIC	_xmlXPathFreeContext
PUBLIC	_xmlXPathContextSetCache
PUBLIC	_xmlXPathOrderDocElems
PUBLIC	_xmlXPathSetContextNode
PUBLIC	_xmlXPathNodeEval
PUBLIC	_xmlXPathEval
PUBLIC	_xmlXPathEvalExpression
PUBLIC	_xmlXPathEvalPredicate
PUBLIC	_xmlXPathCompile
PUBLIC	_xmlXPathCtxtCompile
PUBLIC	_xmlXPathCompiledEval
PUBLIC	_xmlXPathCompiledEvalToBoolean
PUBLIC	_xmlXPathFreeCompExpr
PUBLIC	_xmlXPathInit
PUBLIC	_xmlXPathIsNaN
PUBLIC	_xmlXPathIsInf
PUBLIC	_xmlXPathPopBoolean
PUBLIC	_xmlXPathPopNumber
PUBLIC	_xmlXPathPopString
PUBLIC	_xmlXPathPopNodeSet
PUBLIC	_xmlXPathPopExternal
PUBLIC	_xmlXPathRegisterVariableLookup
PUBLIC	_xmlXPathRegisterFuncLookup
PUBLIC	_xmlXPatherror
PUBLIC	_xmlXPathErr
PUBLIC	_xmlXPathDebugDumpObject
PUBLIC	_xmlXPathDebugDumpCompExpr
PUBLIC	_xmlXPathNodeSetContains
PUBLIC	_xmlXPathDifference
PUBLIC	_xmlXPathIntersection
PUBLIC	_xmlXPathDistinctSorted
PUBLIC	_xmlXPathDistinct
PUBLIC	_xmlXPathHasSameNodes
PUBLIC	_xmlXPathNodeLeadingSorted
PUBLIC	_xmlXPathLeadingSorted
PUBLIC	_xmlXPathNodeLeading
PUBLIC	_xmlXPathLeading
PUBLIC	_xmlXPathNodeTrailingSorted
PUBLIC	_xmlXPathTrailingSorted
PUBLIC	_xmlXPathNodeTrailing
PUBLIC	_xmlXPathTrailing
PUBLIC	_xmlXPathRegisterNs
PUBLIC	_xmlXPathNsLookup
PUBLIC	_xmlXPathRegisteredNsCleanup
PUBLIC	_xmlXPathRegisterFunc
PUBLIC	_xmlXPathRegisterFuncNS
PUBLIC	_xmlXPathRegisterVariable
PUBLIC	_xmlXPathRegisterVariableNS
PUBLIC	_xmlXPathFunctionLookup
PUBLIC	_xmlXPathFunctionLookupNS
PUBLIC	_xmlXPathRegisteredFuncsCleanup
PUBLIC	_xmlXPathVariableLookup
PUBLIC	_xmlXPathVariableLookupNS
PUBLIC	_xmlXPathRegisteredVariablesCleanup
PUBLIC	_xmlXPathNewParserContext
PUBLIC	_xmlXPathFreeParserContext
PUBLIC	_valuePop
PUBLIC	_valuePush
PUBLIC	_xmlXPathNewString
PUBLIC	_xmlXPathNewCString
PUBLIC	_xmlXPathWrapString
PUBLIC	_xmlXPathWrapCString
PUBLIC	_xmlXPathNewFloat
PUBLIC	_xmlXPathNewBoolean
PUBLIC	_xmlXPathNewNodeSet
PUBLIC	_xmlXPathNewValueTree
PUBLIC	_xmlXPathNodeSetAdd
PUBLIC	_xmlXPathNodeSetAddUnique
PUBLIC	_xmlXPathNodeSetAddNs
PUBLIC	_xmlXPathNodeSetSort
PUBLIC	_xmlXPathRoot
PUBLIC	_xmlXPathEvalExpr
PUBLIC	_xmlXPathParseName
PUBLIC	_xmlXPathParseNCName
PUBLIC	_xmlXPathStringEvalNumber
PUBLIC	_xmlXPathEvaluatePredicateResult
PUBLIC	_xmlXPathRegisterAllFunctions
PUBLIC	_xmlXPathNodeSetMerge
PUBLIC	_xmlXPathNodeSetDel
PUBLIC	_xmlXPathNodeSetRemove
PUBLIC	_xmlXPathNewNodeSetList
PUBLIC	_xmlXPathWrapNodeSet
PUBLIC	_xmlXPathWrapExternal
PUBLIC	_xmlXPathEqualValues
PUBLIC	_xmlXPathNotEqualValues
PUBLIC	_xmlXPathCompareValues
PUBLIC	_xmlXPathValueFlipSign
PUBLIC	_xmlXPathAddValues
PUBLIC	_xmlXPathSubValues
PUBLIC	_xmlXPathMultValues
PUBLIC	_xmlXPathDivValues
PUBLIC	_xmlXPathModValues
PUBLIC	_xmlXPathIsNodeType
PUBLIC	_xmlXPathNextSelf
PUBLIC	_xmlXPathNextChild
PUBLIC	_xmlXPathNextDescendant
PUBLIC	_xmlXPathNextDescendantOrSelf
PUBLIC	_xmlXPathNextParent
PUBLIC	_xmlXPathNextAncestorOrSelf
PUBLIC	_xmlXPathNextFollowingSibling
PUBLIC	_xmlXPathNextFollowing
PUBLIC	_xmlXPathNextNamespace
PUBLIC	_xmlXPathNextAttribute
PUBLIC	_xmlXPathNextPreceding
PUBLIC	_xmlXPathNextAncestor
PUBLIC	_xmlXPathNextPrecedingSibling
PUBLIC	_xmlXPathLastFunction
PUBLIC	_xmlXPathPositionFunction
PUBLIC	_xmlXPathCountFunction
PUBLIC	_xmlXPathIdFunction
PUBLIC	_xmlXPathLocalNameFunction
PUBLIC	_xmlXPathNamespaceURIFunction
PUBLIC	_xmlXPathStringFunction
PUBLIC	_xmlXPathStringLengthFunction
PUBLIC	_xmlXPathConcatFunction
PUBLIC	_xmlXPathContainsFunction
PUBLIC	_xmlXPathStartsWithFunction
PUBLIC	_xmlXPathSubstringFunction
PUBLIC	_xmlXPathSubstringBeforeFunction
PUBLIC	_xmlXPathSubstringAfterFunction
PUBLIC	_xmlXPathNormalizeFunction
PUBLIC	_xmlXPathTranslateFunction
PUBLIC	_xmlXPathNotFunction
PUBLIC	_xmlXPathTrueFunction
PUBLIC	_xmlXPathFalseFunction
PUBLIC	_xmlXPathLangFunction
PUBLIC	_xmlXPathNumberFunction
PUBLIC	_xmlXPathSumFunction
PUBLIC	_xmlXPathFloorFunction
PUBLIC	_xmlXPathCeilingFunction
PUBLIC	_xmlXPathRoundFunction
PUBLIC	_xmlXPathBooleanFunction
PUBLIC	_xmlXPathNodeSetFreeNs
PUBLIC	_libxml_domnode_binary_insertion_sort
PUBLIC	_libxml_domnode_tim_sort
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0EA@JENGBCEE@Error?5allocating?5temporary?5stor@ ; `string'
PUBLIC	??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0CH@GLHDGMAA@xmlPointerListCreate?3?5allocatin@ ; `string'
PUBLIC	??_C@_0CL@LEBBNDKO@xmlPointerListAddSize?3?5re?9alloc@ ; `string'
PUBLIC	??_C@_0BG@OMFEJMIL@allocating?5component?6@	; `string'
PUBLIC	??_C@_0BC@EIFELMJ@allocating?5steps?6@		; `string'
PUBLIC	??_C@_0N@GHHFFDFC@adding?5step?6@		; `string'
PUBLIC	??_C@_0BA@OKLFJGHE@Node?5is?5NULL?5?$CB?6@	; `string'
PUBLIC	??_C@_03LHHHGGIK@?5?1?6@			; `string'
PUBLIC	??_C@_0BD@CEACDENF@NodeSet?5is?5NULL?5?$CB?6@	; `string'
PUBLIC	??_C@_0BI@CGJHGOLK@Set?5contains?5?$CFd?5nodes?3?6@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0BG@ODIPEGMA@Value?5Tree?5is?5NULL?5?$CB?6@ ; `string'
PUBLIC	??_C@_0BH@OMGEHPOG@LocationSet?5is?5NULL?5?$CB?6@ ; `string'
PUBLIC	??_C@_05GJKEPAIO@?$CFd?5?3?5@			; `string'
PUBLIC	??_C@_0BI@CIBIAOEE@Object?5is?5empty?5?$CINULL?$CJ?6@ ; `string'
PUBLIC	??_C@_0BJ@EGAONLPM@Object?5is?5uninitialized?6@	; `string'
PUBLIC	??_C@_0BI@NCNINNMM@Object?5is?5a?5Node?5Set?5?3?6@ ; `string'
PUBLIC	??_C@_0CA@NNPHAPO@Object?5is?5an?5XSLT?5value?5tree?5?3?6@ ; `string'
PUBLIC	??_C@_0BH@GPCPEGOI@Object?5is?5a?5Boolean?5?3?5@ ; `string'
PUBLIC	??_C@_05LFIOBDML@true?6@			; `string'
PUBLIC	??_C@_06NIOGPBNO@false?6@			; `string'
PUBLIC	??_C@_0BP@DBNKIPBA@Object?5is?5a?5number?5?3?5Infinity?6@ ; `string'
PUBLIC	??_C@_0CA@CMBCDMBH@Object?5is?5a?5number?5?3?5?9Infinity?6@ ; `string'
PUBLIC	??_C@_0BK@JAENJFCB@Object?5is?5a?5number?5?3?5NaN?6@ ; `string'
PUBLIC	??_C@_0BI@KDLCNKPI@Object?5is?5a?5number?5?3?50?6@ ; `string'
PUBLIC	??_C@_0BK@DKICMGNF@Object?5is?5a?5number?5?3?5?$CF0g?6@ ; `string'
PUBLIC	??_C@_0BG@IHKNOBPJ@Object?5is?5a?5string?5?3?5@	; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0CF@IDHPHOMH@Object?5is?5a?5point?5?3?5index?5?$CFd?5in@ ; `string'
PUBLIC	??_C@_0BP@BGPHFANM@Object?5is?5a?5collapsed?5range?5?3?6@ ; `string'
PUBLIC	??_C@_0N@IDICPBLK@index?5?$CFd?5in?5@		; `string'
PUBLIC	??_C@_05GHBGFBPP@node?6@			; `string'
PUBLIC	??_C@_0BF@JIJMPGFP@Object?5is?5a?5range?5?3?6@	; `string'
PUBLIC	??_C@_05KCOAJPAG@From?5@			; `string'
PUBLIC	??_C@_03EMNLBAKJ@To?5@				; `string'
PUBLIC	??_C@_0BL@DOOMBINH@Object?5is?5a?5Location?5Set?3?6@ ; `string'
PUBLIC	??_C@_0BI@JJDBNCDG@Object?5is?5user?5defined?6@	; `string'
PUBLIC	??_C@_0O@IEEDPMEL@Step?5is?5NULL?6@		; `string'
PUBLIC	??_C@_03JMGAKCCH@END@				; `string'
PUBLIC	??_C@_03BDACDFHA@AND@				; `string'
PUBLIC	??_C@_02PDPFNDMG@OR@				; `string'
PUBLIC	??_C@_07MELFAPHK@EQUAL?5?$DN@			; `string'
PUBLIC	??_C@_08MPMADPIH@EQUAL?5?$CB?$DN@		; `string'
PUBLIC	??_C@_05OHCBIKNL@CMP?5?$DM@			; `string'
PUBLIC	??_C@_05NFBHOIFJ@CMP?5?$DO@			; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN@				; `string'
PUBLIC	??_C@_06IPAPPNJ@PLUS?5?9@			; `string'
PUBLIC	??_C@_06FOKKFIFP@PLUS?5?$CL@			; `string'
PUBLIC	??_C@_0N@GEIAIOPG@PLUS?5unary?5?9@		; `string'
PUBLIC	??_C@_0P@FAIBJAJD@PLUS?5unary?5?9?5?9@		; `string'
PUBLIC	??_C@_06JFEGAKAJ@MULT?5?$CK@			; `string'
PUBLIC	??_C@_08HELPMGMA@MULT?5div@			; `string'
PUBLIC	??_C@_08HFMOIFCL@MULT?5mod@			; `string'
PUBLIC	??_C@_05GJNJOPB@UNION@				; `string'
PUBLIC	??_C@_04BNGIIOIP@ROOT@				; `string'
PUBLIC	??_C@_04OHPEDIPN@NODE@				; `string'
PUBLIC	??_C@_04DEPGJHBM@SORT@				; `string'
PUBLIC	??_C@_08BCOGFDOM@COLLECT?5@			; `string'
PUBLIC	??_C@_0O@CBBIECFC@?5?8ancestors?8?5@		; `string'
PUBLIC	??_C@_0BG@IJDLJMNP@?5?8ancestors?9or?9self?8?5@	; `string'
PUBLIC	??_C@_0P@IMBNHOPA@?5?8attributes?8?5@		; `string'
PUBLIC	??_C@_09DMHOAOKE@?5?8child?8?5@			; `string'
PUBLIC	??_C@_0P@COPGHIIE@?5?8descendant?8?5@		; `string'
PUBLIC	??_C@_0BH@OLEEPEHL@?5?8descendant?9or?9self?8?5@ ; `string'
PUBLIC	??_C@_0O@HPGIPOGE@?5?8following?8?5@		; `string'
PUBLIC	??_C@_0BH@KMMFLMJK@?5?8following?9siblings?8?5@	; `string'
PUBLIC	??_C@_0O@DIAKOKEE@?5?8namespace?8?5@		; `string'
PUBLIC	??_C@_0L@BKJAGPFG@?5?8parent?8?5@		; `string'
PUBLIC	??_C@_0O@BNHFEBDE@?5?8preceding?8?5@		; `string'
PUBLIC	??_C@_0BG@LJHOBDKP@?5?8preceding?9sibling?8?5@	; `string'
PUBLIC	??_C@_08HAEBALG@?5?8self?8?5@			; `string'
PUBLIC	??_C@_07MJDJHLDE@?8none?8?5@			; `string'
PUBLIC	??_C@_07MIHANB@?8type?8?5@			; `string'
PUBLIC	??_C@_05CCBNMHGJ@?8PI?8?5@			; `string'
PUBLIC	??_C@_06COJFFNFM@?8all?8?5@			; `string'
PUBLIC	??_C@_0N@CLKBKNNJ@?8namespace?8?5@		; `string'
PUBLIC	??_C@_07LEJDGAJE@?8name?8?5@			; `string'
PUBLIC	??_C@_07IDIJGDJF@?8node?8?5@			; `string'
PUBLIC	??_C@_0L@BBLKKJMH@?8comment?8?5@		; `string'
PUBLIC	??_C@_07KMAJMJAK@?8text?8?5@			; `string'
PUBLIC	??_C@_03DKEJHHJP@?$CFs?3@			; `string'
PUBLIC	??_C@_05MNKHOCPF@ELEM?5@			; `string'
PUBLIC	??_C@_0P@MLBLHJNB@VARIABLE?5?$CFs?3?$CFs@	; `string'
PUBLIC	??_C@_0M@MLPGFJHH@VARIABLE?5?$CFs@		; `string'
PUBLIC	??_C@_0BI@JIAOIFFJ@FUNCTION?5?$CFs?3?$CFs?$CI?$CFd?5args?$CJ@ ; `string'
PUBLIC	??_C@_0BF@LKMAOONC@FUNCTION?5?$CFs?$CI?$CFd?5args?$CJ@ ; `string'
PUBLIC	??_C@_03CNBDDMKH@ARG@				; `string'
PUBLIC	??_C@_09NKOLJOJL@PREDICATE@			; `string'
PUBLIC	??_C@_06EKKPGGCG@FILTER@			; `string'
PUBLIC	??_C@_07LNDIAM@RANGETO@				; `string'
PUBLIC	??_C@_0M@BEEHJFLN@UNKNOWN?5?$CFd?6@		; `string'
PUBLIC	??_C@_0BG@FMDDAOLJ@Streaming?5Expression?6@	; `string'
PUBLIC	??_C@_0CD@DHBDACDN@Compiled?5Expression?5?3?5?$CFd?5elemen@ ; `string'
PUBLIC	??_C@_0BH@LJLEGFLD@creating?5object?5cache?6@	; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@ ; `string'
PUBLIC	??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@ ; `string'
PUBLIC	??_C@_0CB@EAFHACKN@XPath?5stack?5depth?5limit?5reached@ ; `string'
PUBLIC	??_C@_0P@LENPPBCI@pushing?5value?6@		; `string'
PUBLIC	??_C@_08KEBCLIFP@Infinity@			; `string'
PUBLIC	??_C@_09BLDCEMOH@?9Infinity@			; `string'
PUBLIC	??_C@_03ICJPMMHB@NaN@				; `string'
PUBLIC	??_C@_01GBGANLPD@0@				; `string'
PUBLIC	??_C@_05PPJAHJKF@?$CF?$CK?4?$CKe@		; `string'
PUBLIC	??_C@_05POONKFEF@?$CF0?4?$CKf@			; `string'
PUBLIC	??_C@_0BH@EHGBBAJH@duplicating?5namespace?6@	; `string'
PUBLIC	??_C@_0BC@LBLPMNCN@creating?5nodeset?6@		; `string'
PUBLIC	??_C@_0BB@HLDFGIFL@growing?5nodeset?6@		; `string'
PUBLIC	??_C@_0BL@JKBEHGK@growing?5nodeset?5hit?5limit?6@ ; `string'
PUBLIC	??_C@_0BB@IMBJKAMG@merging?5nodeset?6@		; `string'
PUBLIC	??_C@_0BL@DBOLJGCN@merging?5nodeset?5hit?5limit?6@ ; `string'
PUBLIC	??_C@_0BM@FFJIGPKH@creating?5result?5value?5tree?6@ ; `string'
PUBLIC	??_C@_0BK@DGDFHNNJ@creating?5node?5set?5object?6@ ; `string'
PUBLIC	??_C@_0BH@FGBKIIOK@creating?5float?5object?6@	; `string'
PUBLIC	??_C@_0BJ@ECLOGIHC@creating?5boolean?5object?6@	; `string'
PUBLIC	??_C@_0BI@BJAGDAFP@creating?5string?5object?6@	; `string'
PUBLIC	??_C@_0BG@ENIHPAML@creating?5user?5object?6@	; `string'
PUBLIC	??_C@_0BA@KJDNPDLE@copying?5object?6@		; `string'
PUBLIC	??_C@_0CJ@OPCFGEGG@xmlXPathObjectCopy?3?5unsupported@ ; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
PUBLIC	??_C@_0BC@GBNJEJGK@creating?5context?6@		; `string'
PUBLIC	??_C@_0BJ@KFGJCHDI@creating?5parser?5context?6@	; `string'
PUBLIC	??_C@_0BN@DLELJOPA@creating?5evaluation?5context?6@ ; `string'
PUBLIC	??_C@_0BE@EIMBPOMM@comparing?5nodesets?6@	; `string'
PUBLIC	??_C@_0EL@MECKCKJO@xmlXPathCompareNodeSetValue?3?5Ca@ ; `string'
PUBLIC	??_C@_0BC@MHFGEIED@fake?5node?5libxslt@		; `string'
PUBLIC	??_C@_0DA@NKGEEAEF@xmlXPathTranslateFunction?3?5Inva@ ; `string'
PUBLIC	??_C@_04CLMONKIF@node@				; `string'
PUBLIC	??_C@_04CIMGMMMG@text@				; `string'
PUBLIC	??_C@_07GJGNEJFD@comment@			; `string'
PUBLIC	??_C@_0BH@NNLCFMHO@processing?9instruction@	; `string'
PUBLIC	??_C@_05IOMEMJEC@count@				; `string'
PUBLIC	??_C@_02MOLJINC@?3?3@				; `string'
PUBLIC	??_C@_08KHINJAEH@range?9to@			; `string'
PUBLIC	??_C@_0BJ@DADKHPPP@Internal?5error?5at?5?$CFs?3?$CFd?6@ ; `string'
PUBLIC	??_C@_08HBEFDOBD@ancestor@			; `string'
PUBLIC	??_C@_0BB@OLBPNJCF@ancestor?9or?9self@		; `string'
PUBLIC	??_C@_09HGIEBAJ@attribute@			; `string'
PUBLIC	??_C@_05GPGNDLEK@child@				; `string'
PUBLIC	??_C@_0L@NJLDCKIO@descendant@			; `string'
PUBLIC	??_C@_0BD@EPJHOOIL@descendant?9or?9self@	; `string'
PUBLIC	??_C@_09BEIPBMDN@following@			; `string'
PUBLIC	??_C@_0BC@LMFKEKDG@following?9sibling@		; `string'
PUBLIC	??_C@_09KPMGAFNI@namespace@			; `string'
PUBLIC	??_C@_06MLKDMCBD@parent@			; `string'
PUBLIC	??_C@_09MGMONEC@preceding@			; `string'
PUBLIC	??_C@_0BC@MLGDENAI@preceding?9sibling@		; `string'
PUBLIC	??_C@_04PJDNGLKJ@self@				; `string'
PUBLIC	??_C@_04PLGBGIDD@last@				; `string'
PUBLIC	??_C@_0DO@IDAPNIMJ@xmlXPathCompOpEval?3?5variable?5?$CFs@ ; `string'
PUBLIC	??_C@_0CF@LMIGLEJC@xmlXPathCompOpEval?3?5parameter?5e@ ; `string'
PUBLIC	??_C@_0DO@MGJDMDIG@xmlXPathCompOpEval?3?5function?5?$CFs@ ; `string'
PUBLIC	??_C@_0CL@KAMILNDJ@xmlXPathCompOpEval?3?5function?5?$CFs@ ; `string'
PUBLIC	??_C@_0CJ@OFCEKGJC@XPath?3?5unknown?5precompiled?5oper@ ; `string'
PUBLIC	??_C@_0CJ@GKOHPKDK@xmlXPathRunEval?3?5last?5is?5less?5t@ ; `string'
PUBLIC	??_C@_0BN@BJKHBGFI@allocating?5namespaces?5array?6@ ; `string'
PUBLIC	??_C@_0CC@FJFLGALO@allocating?5streamable?5expressio@ ; `string'
PUBLIC	??_C@_0BG@PBKLCIKP@NULL?5context?5pointer?6@	; `string'
PUBLIC	??_C@_0CP@KKKCDCLL@xmlXPathCompiledEval?3?5No?5result@ ; `string'
PUBLIC	??_C@_0DH@OEPEKFKA@xmlXPathCompiledEval?3?5?$CFd?5object@ ; `string'
PUBLIC	??_C@_07GOBOHMJA@boolean@			; `string'
PUBLIC	??_C@_07EANFIDJB@ceiling@			; `string'
PUBLIC	??_C@_06CMLIEHFC@concat@			; `string'
PUBLIC	??_C@_08JKMOLGCD@contains@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id@				; `string'
PUBLIC	??_C@_05PBJFFIGL@floor@				; `string'
PUBLIC	??_C@_04IOHABJIC@lang@				; `string'
PUBLIC	??_C@_0L@JNMMKGPH@local?9name@			; `string'
PUBLIC	??_C@_03NJKJADM@not@				; `string'
PUBLIC	??_C@_04MEMAJGDJ@name@				; `string'
PUBLIC	??_C@_0O@LIBIEKOH@namespace?9uri@		; `string'
PUBLIC	??_C@_0BA@GMCNNFIH@normalize?9space@		; `string'
PUBLIC	??_C@_06EBGNBFIA@number@			; `string'
PUBLIC	??_C@_08OAGMDKAF@position@			; `string'
PUBLIC	??_C@_05MIMAKCN@round@				; `string'
PUBLIC	??_C@_06ICGJLFIM@string@			; `string'
PUBLIC	??_C@_0O@NOLAIBIG@string?9length@		; `string'
PUBLIC	??_C@_0M@MENNCJLJ@starts?9with@			; `string'
PUBLIC	??_C@_09MJALBNED@substring@			; `string'
PUBLIC	??_C@_0BB@KKJFBMPK@substring?9before@		; `string'
PUBLIC	??_C@_0BA@JEDLCCAF@substring?9after@		; `string'
PUBLIC	??_C@_03CFFIJAMA@sum@				; `string'
PUBLIC	??_C@_09ODNGOEIO@translate@			; `string'
PUBLIC	??_C@_0CL@DABLMGPH@http?3?1?1www?4w3?4org?12002?108?1xquer@ ; `string'
PUBLIC	??_C@_0L@ODIBMOLP@escape?9uri@			; `string'
PUBLIC	__real@0000000000000000
PUBLIC	__real@3ee4f8b588e368f1
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@41cdcd6500000000
PUBLIC	__real@41dfffffffc00000
PUBLIC	__real@7ff0000000000000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@c1e0000000000000
PUBLIC	__real@fff0000000000000
PUBLIC	__real@fff8000000000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	_xmlStrdup:PROC
EXTRN	_xmlStrndup:PROC
EXTRN	_xmlStrchr:PROC
EXTRN	_xmlStrstr:PROC
EXTRN	_xmlStrncmp:PROC
EXTRN	_xmlStrEqual:PROC
EXTRN	_xmlStrlen:PROC
EXTRN	_xmlStrcat:PROC
EXTRN	_xmlStrPrintf:PROC
EXTRN	_xmlUTF8Strsize:PROC
EXTRN	_xmlUTF8Strpos:PROC
EXTRN	_xmlUTF8Strloc:PROC
EXTRN	_xmlUTF8Strsub:PROC
EXTRN	_xmlUTF8Strlen:PROC
EXTRN	__imp___dclass:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__toupper:PROC
EXTRN	_xmlBufContent:PROC
EXTRN	_xmlDictReference:PROC
EXTRN	_xmlDictFree:PROC
EXTRN	_xmlDictLookup:PROC
EXTRN	_xmlBuildQName:PROC
EXTRN	_xmlDocGetRootElement:PROC
EXTRN	_xmlFreeNodeList:PROC
EXTRN	_xmlGetNsList:PROC
EXTRN	_xmlNodeGetContent:PROC
EXTRN	_xmlNodeGetLang:PROC
EXTRN	_xmlHashCreate:PROC
EXTRN	_xmlHashFree:PROC
EXTRN	_xmlHashDefaultDeallocator:PROC
EXTRN	_xmlHashAddEntry:PROC
EXTRN	_xmlHashUpdateEntry:PROC
EXTRN	_xmlHashAddEntry2:PROC
EXTRN	_xmlHashUpdateEntry2:PROC
EXTRN	_xmlHashRemoveEntry:PROC
EXTRN	_xmlHashRemoveEntry2:PROC
EXTRN	_xmlHashLookup:PROC
EXTRN	_xmlHashLookup2:PROC
EXTRN	_xmlResetError:PROC
EXTRN	___xmlRaiseError:PROC
EXTRN	_xmlGetID:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__realloc:PROC
EXTRN	__imp__exit:PROC
EXTRN	___xmlGenericError:PROC
EXTRN	___xmlGenericErrorContext:PROC
EXTRN	_xmlCharInRange:PROC
EXTRN	_xmlCopyChar:PROC
EXTRN	_xmlXPtrLocationSetCreate:PROC
EXTRN	_xmlXPtrFreeLocationSet:PROC
EXTRN	_xmlXPtrLocationSetMerge:PROC
EXTRN	_xmlXPtrNewRange:PROC
EXTRN	_xmlXPtrNewRangeNodeObject:PROC
EXTRN	_xmlXPtrLocationSetAdd:PROC
EXTRN	_xmlXPtrWrapLocationSet:PROC
EXTRN	_xmlDebugDumpString:PROC
EXTRN	_xmlDebugDumpAttr:PROC
EXTRN	_xmlDebugDumpOneNode:PROC
EXTRN	_xmlFreePattern:PROC
EXTRN	_xmlFreePatternList:PROC
EXTRN	_xmlPatterncompile:PROC
EXTRN	_xmlPatternStreamable:PROC
EXTRN	_xmlPatternMaxDepth:PROC
EXTRN	_xmlPatternMinDepth:PROC
EXTRN	_xmlPatternFromRoot:PROC
EXTRN	_xmlPatternGetStreamCtxt:PROC
EXTRN	_xmlFreeStreamCtxt:PROC
EXTRN	_xmlStreamPushNode:PROC
EXTRN	_xmlStreamPush:PROC
EXTRN	_xmlStreamPop:PROC
EXTRN	_xmlStreamWantsAnyNode:PROC
EXTRN	_xmlBufCreate:PROC
EXTRN	_xmlBufFree:PROC
EXTRN	_xmlBufAdd:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__CIfmod:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__allshl:PROC
EXTRN	__aullshr:PROC
EXTRN	__libm_sse2_log10_precise:PROC
EXTRN	__libm_sse2_pow_precise:PROC
EXTRN	_ceil:PROC
EXTRN	_floor:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@fff8000000000000
CONST	SEGMENT
__real@fff8000000000000 DQ 0fff8000000000000r	; -nan(ind)
CONST	ENDS
;	COMDAT __real@fff0000000000000
CONST	SEGMENT
__real@fff0000000000000 DQ 0fff0000000000000r	; -inf
CONST	ENDS
;	COMDAT __real@c1e0000000000000
CONST	SEGMENT
__real@c1e0000000000000 DQ 0c1e0000000000000r	; -2.14748e+09
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@7ff0000000000000
CONST	SEGMENT
__real@7ff0000000000000 DQ 07ff0000000000000r	; inf
CONST	ENDS
;	COMDAT __real@41dfffffffc00000
CONST	SEGMENT
__real@41dfffffffc00000 DQ 041dfffffffc00000r	; 2.14748e+09
CONST	ENDS
;	COMDAT __real@41cdcd6500000000
CONST	SEGMENT
__real@41cdcd6500000000 DQ 041cdcd6500000000r	; 1e+09
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3ee4f8b588e368f1
CONST	SEGMENT
__real@3ee4f8b588e368f1 DQ 03ee4f8b588e368f1r	; 1e-05
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0L@ODIBMOLP@escape?9uri@
CONST	SEGMENT
??_C@_0L@ODIBMOLP@escape?9uri@ DB 'escape-uri', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DABLMGPH@http?3?1?1www?4w3?4org?12002?108?1xquer@
CONST	SEGMENT
??_C@_0CL@DABLMGPH@http?3?1?1www?4w3?4org?12002?108?1xquer@ DB 'http://ww'
	DB	'w.w3.org/2002/08/xquery-functions', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09ODNGOEIO@translate@
CONST	SEGMENT
??_C@_09ODNGOEIO@translate@ DB 'translate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFFIJAMA@sum@
CONST	SEGMENT
??_C@_03CFFIJAMA@sum@ DB 'sum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JEDLCCAF@substring?9after@
CONST	SEGMENT
??_C@_0BA@JEDLCCAF@substring?9after@ DB 'substring-after', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KKJFBMPK@substring?9before@
CONST	SEGMENT
??_C@_0BB@KKJFBMPK@substring?9before@ DB 'substring-before', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MJALBNED@substring@
CONST	SEGMENT
??_C@_09MJALBNED@substring@ DB 'substring', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MENNCJLJ@starts?9with@
CONST	SEGMENT
??_C@_0M@MENNCJLJ@starts?9with@ DB 'starts-with', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NOLAIBIG@string?9length@
CONST	SEGMENT
??_C@_0O@NOLAIBIG@string?9length@ DB 'string-length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICGJLFIM@string@
CONST	SEGMENT
??_C@_06ICGJLFIM@string@ DB 'string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MIMAKCN@round@
CONST	SEGMENT
??_C@_05MIMAKCN@round@ DB 'round', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OAGMDKAF@position@
CONST	SEGMENT
??_C@_08OAGMDKAF@position@ DB 'position', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGNBFIA@number@
CONST	SEGMENT
??_C@_06EBGNBFIA@number@ DB 'number', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GMCNNFIH@normalize?9space@
CONST	SEGMENT
??_C@_0BA@GMCNNFIH@normalize?9space@ DB 'normalize-space', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LIBIEKOH@namespace?9uri@
CONST	SEGMENT
??_C@_0O@LIBIEKOH@namespace?9uri@ DB 'namespace-uri', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name@ DB 'name', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJKJADM@not@
CONST	SEGMENT
??_C@_03NJKJADM@not@ DB 'not', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JNMMKGPH@local?9name@
CONST	SEGMENT
??_C@_0L@JNMMKGPH@local?9name@ DB 'local-name', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IOHABJIC@lang@
CONST	SEGMENT
??_C@_04IOHABJIC@lang@ DB 'lang', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PBJFFIGL@floor@
CONST	SEGMENT
??_C@_05PBJFFIGL@floor@ DB 'floor', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id@
CONST	SEGMENT
??_C@_02EGCJHIOB@id@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKMOLGCD@contains@
CONST	SEGMENT
??_C@_08JKMOLGCD@contains@ DB 'contains', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CMLIEHFC@concat@
CONST	SEGMENT
??_C@_06CMLIEHFC@concat@ DB 'concat', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EANFIDJB@ceiling@
CONST	SEGMENT
??_C@_07EANFIDJB@ceiling@ DB 'ceiling', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GOBOHMJA@boolean@
CONST	SEGMENT
??_C@_07GOBOHMJA@boolean@ DB 'boolean', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@OEPEKFKA@xmlXPathCompiledEval?3?5?$CFd?5object@
CONST	SEGMENT
??_C@_0DH@OEPEKFKA@xmlXPathCompiledEval?3?5?$CFd?5object@ DB 'xmlXPathCom'
	DB	'piledEval: %d object(s) left on the stack.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@KKKCDCLL@xmlXPathCompiledEval?3?5No?5result@
CONST	SEGMENT
??_C@_0CP@KKKCDCLL@xmlXPathCompiledEval?3?5No?5result@ DB 'xmlXPathCompil'
	DB	'edEval: No result on the stack.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PBKLCIKP@NULL?5context?5pointer?6@
CONST	SEGMENT
??_C@_0BG@PBKLCIKP@NULL?5context?5pointer?6@ DB 'NULL context pointer', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FJFLGALO@allocating?5streamable?5expressio@
CONST	SEGMENT
??_C@_0CC@FJFLGALO@allocating?5streamable?5expressio@ DB 'allocating stre'
	DB	'amable expression', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BJKHBGFI@allocating?5namespaces?5array?6@
CONST	SEGMENT
??_C@_0BN@BJKHBGFI@allocating?5namespaces?5array?6@ DB 'allocating namesp'
	DB	'aces array', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@GKOHPKDK@xmlXPathRunEval?3?5last?5is?5less?5t@
CONST	SEGMENT
??_C@_0CJ@GKOHPKDK@xmlXPathRunEval?3?5last?5is?5less?5t@ DB 'xmlXPathRunE'
	DB	'val: last is less than zero', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OFCEKGJC@XPath?3?5unknown?5precompiled?5oper@
CONST	SEGMENT
??_C@_0CJ@OFCEKGJC@XPath?3?5unknown?5precompiled?5oper@ DB 'XPath: unknow'
	DB	'n precompiled operation %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KAMILNDJ@xmlXPathCompOpEval?3?5function?5?$CFs@
CONST	SEGMENT
??_C@_0CL@KAMILNDJ@xmlXPathCompOpEval?3?5function?5?$CFs@ DB 'xmlXPathCom'
	DB	'pOpEval: function %s not found', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@MGJDMDIG@xmlXPathCompOpEval?3?5function?5?$CFs@
CONST	SEGMENT
??_C@_0DO@MGJDMDIG@xmlXPathCompOpEval?3?5function?5?$CFs@ DB 'xmlXPathCom'
	DB	'pOpEval: function %s bound to undefined prefix %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LMIGLEJC@xmlXPathCompOpEval?3?5parameter?5e@
CONST	SEGMENT
??_C@_0CF@LMIGLEJC@xmlXPathCompOpEval?3?5parameter?5e@ DB 'xmlXPathCompOp'
	DB	'Eval: parameter error', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@IDAPNIMJ@xmlXPathCompOpEval?3?5variable?5?$CFs@
CONST	SEGMENT
??_C@_0DO@IDAPNIMJ@xmlXPathCompOpEval?3?5variable?5?$CFs@ DB 'xmlXPathCom'
	DB	'pOpEval: variable %s bound to undefined prefix %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PLGBGIDD@last@
CONST	SEGMENT
??_C@_04PLGBGIDD@last@ DB 'last', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PJDNGLKJ@self@
CONST	SEGMENT
??_C@_04PJDNGLKJ@self@ DB 'self', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MLGDENAI@preceding?9sibling@
CONST	SEGMENT
??_C@_0BC@MLGDENAI@preceding?9sibling@ DB 'preceding-sibling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MGMONEC@preceding@
CONST	SEGMENT
??_C@_09MGMONEC@preceding@ DB 'preceding', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLKDMCBD@parent@
CONST	SEGMENT
??_C@_06MLKDMCBD@parent@ DB 'parent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPMGAFNI@namespace@
CONST	SEGMENT
??_C@_09KPMGAFNI@namespace@ DB 'namespace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LMFKEKDG@following?9sibling@
CONST	SEGMENT
??_C@_0BC@LMFKEKDG@following?9sibling@ DB 'following-sibling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BEIPBMDN@following@
CONST	SEGMENT
??_C@_09BEIPBMDN@following@ DB 'following', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EPJHOOIL@descendant?9or?9self@
CONST	SEGMENT
??_C@_0BD@EPJHOOIL@descendant?9or?9self@ DB 'descendant-or-self', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NJLDCKIO@descendant@
CONST	SEGMENT
??_C@_0L@NJLDCKIO@descendant@ DB 'descendant', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPGNDLEK@child@
CONST	SEGMENT
??_C@_05GPGNDLEK@child@ DB 'child', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09HGIEBAJ@attribute@
CONST	SEGMENT
??_C@_09HGIEBAJ@attribute@ DB 'attribute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OLBPNJCF@ancestor?9or?9self@
CONST	SEGMENT
??_C@_0BB@OLBPNJCF@ancestor?9or?9self@ DB 'ancestor-or-self', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBEFDOBD@ancestor@
CONST	SEGMENT
??_C@_08HBEFDOBD@ancestor@ DB 'ancestor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DADKHPPP@Internal?5error?5at?5?$CFs?3?$CFd?6@
CONST	SEGMENT
??_C@_0BJ@DADKHPPP@Internal?5error?5at?5?$CFs?3?$CFd?6@ DB 'Internal erro'
	DB	'r at %s:%d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08KHINJAEH@range?9to@
CONST	SEGMENT
??_C@_08KHINJAEH@range?9to@ DB 'range-to', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02MOLJINC@?3?3@
CONST	SEGMENT
??_C@_02MOLJINC@?3?3@ DB '::', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count@
CONST	SEGMENT
??_C@_05IOMEMJEC@count@ DB 'count', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NNLCFMHO@processing?9instruction@
CONST	SEGMENT
??_C@_0BH@NNLCFMHO@processing?9instruction@ DB 'processing-instruction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GJGNEJFD@comment@
CONST	SEGMENT
??_C@_07GJGNEJFD@comment@ DB 'comment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CIMGMMMG@text@
CONST	SEGMENT
??_C@_04CIMGMMMG@text@ DB 'text', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CLMONKIF@node@
CONST	SEGMENT
??_C@_04CLMONKIF@node@ DB 'node', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NKGEEAEF@xmlXPathTranslateFunction?3?5Inva@
CONST	SEGMENT
??_C@_0DA@NKGEEAEF@xmlXPathTranslateFunction?3?5Inva@ DB 'xmlXPathTransla'
	DB	'teFunction: Invalid UTF8 string', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MHFGEIED@fake?5node?5libxslt@
CONST	SEGMENT
??_C@_0BC@MHFGEIED@fake?5node?5libxslt@ DB 'fake node libxslt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@MECKCKJO@xmlXPathCompareNodeSetValue?3?5Ca@
CONST	SEGMENT
??_C@_0EL@MECKCKJO@xmlXPathCompareNodeSetValue?3?5Ca@ DB 'xmlXPathCompare'
	DB	'NodeSetValue: Can''t compare node set and object of type %d', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EIMBPOMM@comparing?5nodesets?6@
CONST	SEGMENT
??_C@_0BE@EIMBPOMM@comparing?5nodesets?6@ DB 'comparing nodesets', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DLELJOPA@creating?5evaluation?5context?6@
CONST	SEGMENT
??_C@_0BN@DLELJOPA@creating?5evaluation?5context?6@ DB 'creating evaluati'
	DB	'on context', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KFGJCHDI@creating?5parser?5context?6@
CONST	SEGMENT
??_C@_0BJ@KFGJCHDI@creating?5parser?5context?6@ DB 'creating parser conte'
	DB	'xt', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GBNJEJGK@creating?5context?6@
CONST	SEGMENT
??_C@_0BC@GBNJEJGK@creating?5context?6@ DB 'creating context', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@OPCFGEGG@xmlXPathObjectCopy?3?5unsupported@
CONST	SEGMENT
??_C@_0CJ@OPCFGEGG@xmlXPathObjectCopy?3?5unsupported@ DB 'xmlXPathObjectC'
	DB	'opy: unsupported type %d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KJDNPDLE@copying?5object?6@
CONST	SEGMENT
??_C@_0BA@KJDNPDLE@copying?5object?6@ DB 'copying object', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ENIHPAML@creating?5user?5object?6@
CONST	SEGMENT
??_C@_0BG@ENIHPAML@creating?5user?5object?6@ DB 'creating user object', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BJAGDAFP@creating?5string?5object?6@
CONST	SEGMENT
??_C@_0BI@BJAGDAFP@creating?5string?5object?6@ DB 'creating string object'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@ECLOGIHC@creating?5boolean?5object?6@
CONST	SEGMENT
??_C@_0BJ@ECLOGIHC@creating?5boolean?5object?6@ DB 'creating boolean obje'
	DB	'ct', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FGBKIIOK@creating?5float?5object?6@
CONST	SEGMENT
??_C@_0BH@FGBKIIOK@creating?5float?5object?6@ DB 'creating float object', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DGDFHNNJ@creating?5node?5set?5object?6@
CONST	SEGMENT
??_C@_0BK@DGDFHNNJ@creating?5node?5set?5object?6@ DB 'creating node set o'
	DB	'bject', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FFJIGPKH@creating?5result?5value?5tree?6@
CONST	SEGMENT
??_C@_0BM@FFJIGPKH@creating?5result?5value?5tree?6@ DB 'creating result v'
	DB	'alue tree', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DBOLJGCN@merging?5nodeset?5hit?5limit?6@
CONST	SEGMENT
??_C@_0BL@DBOLJGCN@merging?5nodeset?5hit?5limit?6@ DB 'merging nodeset hi'
	DB	't limit', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IMBJKAMG@merging?5nodeset?6@
CONST	SEGMENT
??_C@_0BB@IMBJKAMG@merging?5nodeset?6@ DB 'merging nodeset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JKBEHGK@growing?5nodeset?5hit?5limit?6@
CONST	SEGMENT
??_C@_0BL@JKBEHGK@growing?5nodeset?5hit?5limit?6@ DB 'growing nodeset hit'
	DB	' limit', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HLDFGIFL@growing?5nodeset?6@
CONST	SEGMENT
??_C@_0BB@HLDFGIFL@growing?5nodeset?6@ DB 'growing nodeset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LBLPMNCN@creating?5nodeset?6@
CONST	SEGMENT
??_C@_0BC@LBLPMNCN@creating?5nodeset?6@ DB 'creating nodeset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EHGBBAJH@duplicating?5namespace?6@
CONST	SEGMENT
??_C@_0BH@EHGBBAJH@duplicating?5namespace?6@ DB 'duplicating namespace', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05POONKFEF@?$CF0?4?$CKf@
CONST	SEGMENT
??_C@_05POONKFEF@?$CF0?4?$CKf@ DB '%0.*f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPJAHJKF@?$CF?$CK?4?$CKe@
CONST	SEGMENT
??_C@_05PPJAHJKF@?$CF?$CK?4?$CKe@ DB '%*.*e', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01GBGANLPD@0@
CONST	SEGMENT
??_C@_01GBGANLPD@0@ DB '0', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICJPMMHB@NaN@
CONST	SEGMENT
??_C@_03ICJPMMHB@NaN@ DB 'NaN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09BLDCEMOH@?9Infinity@
CONST	SEGMENT
??_C@_09BLDCEMOH@?9Infinity@ DB '-Infinity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEBCLIFP@Infinity@
CONST	SEGMENT
??_C@_08KEBCLIFP@Infinity@ DB 'Infinity', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LENPPBCI@pushing?5value?6@
CONST	SEGMENT
??_C@_0P@LENPPBCI@pushing?5value?6@ DB 'pushing value', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EAFHACKN@XPath?5stack?5depth?5limit?5reached@
CONST	SEGMENT
??_C@_0CB@EAFHACKN@XPath?5stack?5depth?5limit?5reached@ DB 'XPath stack d'
	DB	'epth limit reached', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
CONST	SEGMENT
??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@ DB 'Unimplem'
	DB	'ented block at %s:%d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
CONST	SEGMENT
??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@ DB 'c:\users\dag'
	DB	'\documents\_clients\codeproject authors group\windows on arm\'
	DB	'libxml2\libxml2-2.9.9\xpath.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LJLEGFLD@creating?5object?5cache?6@
CONST	SEGMENT
??_C@_0BH@LJLEGFLD@creating?5object?5cache?6@ DB 'creating object cache', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DHBDACDN@Compiled?5Expression?5?3?5?$CFd?5elemen@
CONST	SEGMENT
??_C@_0CD@DHBDACDN@Compiled?5Expression?5?3?5?$CFd?5elemen@ DB 'Compiled '
	DB	'Expression : %d elements', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMDDAOLJ@Streaming?5Expression?6@
CONST	SEGMENT
??_C@_0BG@FMDDAOLJ@Streaming?5Expression?6@ DB 'Streaming Expression', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BEEHJFLN@UNKNOWN?5?$CFd?6@
CONST	SEGMENT
??_C@_0M@BEEHJFLN@UNKNOWN?5?$CFd?6@ DB 'UNKNOWN %d', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LNDIAM@RANGETO@
CONST	SEGMENT
??_C@_07LNDIAM@RANGETO@ DB 'RANGETO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKKPGGCG@FILTER@
CONST	SEGMENT
??_C@_06EKKPGGCG@FILTER@ DB 'FILTER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NKOLJOJL@PREDICATE@
CONST	SEGMENT
??_C@_09NKOLJOJL@PREDICATE@ DB 'PREDICATE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CNBDDMKH@ARG@
CONST	SEGMENT
??_C@_03CNBDDMKH@ARG@ DB 'ARG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LKMAOONC@FUNCTION?5?$CFs?$CI?$CFd?5args?$CJ@
CONST	SEGMENT
??_C@_0BF@LKMAOONC@FUNCTION?5?$CFs?$CI?$CFd?5args?$CJ@ DB 'FUNCTION %s(%d'
	DB	' args)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JIAOIFFJ@FUNCTION?5?$CFs?3?$CFs?$CI?$CFd?5args?$CJ@
CONST	SEGMENT
??_C@_0BI@JIAOIFFJ@FUNCTION?5?$CFs?3?$CFs?$CI?$CFd?5args?$CJ@ DB 'FUNCTIO'
	DB	'N %s:%s(%d args)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLPGFJHH@VARIABLE?5?$CFs@
CONST	SEGMENT
??_C@_0M@MLPGFJHH@VARIABLE?5?$CFs@ DB 'VARIABLE %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MLBLHJNB@VARIABLE?5?$CFs?3?$CFs@
CONST	SEGMENT
??_C@_0P@MLBLHJNB@VARIABLE?5?$CFs?3?$CFs@ DB 'VARIABLE %s:%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNKHOCPF@ELEM?5@
CONST	SEGMENT
??_C@_05MNKHOCPF@ELEM?5@ DB 'ELEM ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DKEJHHJP@?$CFs?3@
CONST	SEGMENT
??_C@_03DKEJHHJP@?$CFs?3@ DB '%s:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KMAJMJAK@?8text?8?5@
CONST	SEGMENT
??_C@_07KMAJMJAK@?8text?8?5@ DB '''text'' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BBLKKJMH@?8comment?8?5@
CONST	SEGMENT
??_C@_0L@BBLKKJMH@?8comment?8?5@ DB '''comment'' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IDIJGDJF@?8node?8?5@
CONST	SEGMENT
??_C@_07IDIJGDJF@?8node?8?5@ DB '''node'' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LEJDGAJE@?8name?8?5@
CONST	SEGMENT
??_C@_07LEJDGAJE@?8name?8?5@ DB '''name'' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CLKBKNNJ@?8namespace?8?5@
CONST	SEGMENT
??_C@_0N@CLKBKNNJ@?8namespace?8?5@ DB '''namespace'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06COJFFNFM@?8all?8?5@
CONST	SEGMENT
??_C@_06COJFFNFM@?8all?8?5@ DB '''all'' ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCBNMHGJ@?8PI?8?5@
CONST	SEGMENT
??_C@_05CCBNMHGJ@?8PI?8?5@ DB '''PI'' ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIHANB@?8type?8?5@
CONST	SEGMENT
??_C@_07MIHANB@?8type?8?5@ DB '''type'' ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MJDJHLDE@?8none?8?5@
CONST	SEGMENT
??_C@_07MJDJHLDE@?8none?8?5@ DB '''none'' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HAEBALG@?5?8self?8?5@
CONST	SEGMENT
??_C@_08HAEBALG@?5?8self?8?5@ DB ' ''self'' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LJHOBDKP@?5?8preceding?9sibling?8?5@
CONST	SEGMENT
??_C@_0BG@LJHOBDKP@?5?8preceding?9sibling?8?5@ DB ' ''preceding-sibling'''
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNHFEBDE@?5?8preceding?8?5@
CONST	SEGMENT
??_C@_0O@BNHFEBDE@?5?8preceding?8?5@ DB ' ''preceding'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BKJAGPFG@?5?8parent?8?5@
CONST	SEGMENT
??_C@_0L@BKJAGPFG@?5?8parent?8?5@ DB ' ''parent'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DIAKOKEE@?5?8namespace?8?5@
CONST	SEGMENT
??_C@_0O@DIAKOKEE@?5?8namespace?8?5@ DB ' ''namespace'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KMMFLMJK@?5?8following?9siblings?8?5@
CONST	SEGMENT
??_C@_0BH@KMMFLMJK@?5?8following?9siblings?8?5@ DB ' ''following-siblings'
	DB	''' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HPGIPOGE@?5?8following?8?5@
CONST	SEGMENT
??_C@_0O@HPGIPOGE@?5?8following?8?5@ DB ' ''following'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OLEEPEHL@?5?8descendant?9or?9self?8?5@
CONST	SEGMENT
??_C@_0BH@OLEEPEHL@?5?8descendant?9or?9self?8?5@ DB ' ''descendant-or-sel'
	DB	'f'' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@COPGHIIE@?5?8descendant?8?5@
CONST	SEGMENT
??_C@_0P@COPGHIIE@?5?8descendant?8?5@ DB ' ''descendant'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DMHOAOKE@?5?8child?8?5@
CONST	SEGMENT
??_C@_09DMHOAOKE@?5?8child?8?5@ DB ' ''child'' ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMBNHOPA@?5?8attributes?8?5@
CONST	SEGMENT
??_C@_0P@IMBNHOPA@?5?8attributes?8?5@ DB ' ''attributes'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IJDLJMNP@?5?8ancestors?9or?9self?8?5@
CONST	SEGMENT
??_C@_0BG@IJDLJMNP@?5?8ancestors?9or?9self?8?5@ DB ' ''ancestors-or-self'''
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBBIECFC@?5?8ancestors?8?5@
CONST	SEGMENT
??_C@_0O@CBBIECFC@?5?8ancestors?8?5@ DB ' ''ancestors'' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BCOGFDOM@COLLECT?5@
CONST	SEGMENT
??_C@_08BCOGFDOM@COLLECT?5@ DB 'COLLECT ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DEPGJHBM@SORT@
CONST	SEGMENT
??_C@_04DEPGJHBM@SORT@ DB 'SORT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHPEDIPN@NODE@
CONST	SEGMENT
??_C@_04OHPEDIPN@NODE@ DB 'NODE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BNGIIOIP@ROOT@
CONST	SEGMENT
??_C@_04BNGIIOIP@ROOT@ DB 'ROOT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJNJOPB@UNION@
CONST	SEGMENT
??_C@_05GJNJOPB@UNION@ DB 'UNION', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFMOIFCL@MULT?5mod@
CONST	SEGMENT
??_C@_08HFMOIFCL@MULT?5mod@ DB 'MULT mod', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HELPMGMA@MULT?5div@
CONST	SEGMENT
??_C@_08HELPMGMA@MULT?5div@ DB 'MULT div', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JFEGAKAJ@MULT?5?$CK@
CONST	SEGMENT
??_C@_06JFEGAKAJ@MULT?5?$CK@ DB 'MULT *', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FAIBJAJD@PLUS?5unary?5?9?5?9@
CONST	SEGMENT
??_C@_0P@FAIBJAJD@PLUS?5unary?5?9?5?9@ DB 'PLUS unary - -', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GEIAIOPG@PLUS?5unary?5?9@
CONST	SEGMENT
??_C@_0N@GEIAIOPG@PLUS?5unary?5?9@ DB 'PLUS unary -', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FOKKFIFP@PLUS?5?$CL@
CONST	SEGMENT
??_C@_06FOKKFIFP@PLUS?5?$CL@ DB 'PLUS +', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IPAPPNJ@PLUS?5?9@
CONST	SEGMENT
??_C@_06IPAPPNJ@PLUS?5?9@ DB 'PLUS -', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NFBHOIFJ@CMP?5?$DO@
CONST	SEGMENT
??_C@_05NFBHOIFJ@CMP?5?$DO@ DB 'CMP >', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHCBIKNL@CMP?5?$DM@
CONST	SEGMENT
??_C@_05OHCBIKNL@CMP?5?$DM@ DB 'CMP <', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MPMADPIH@EQUAL?5?$CB?$DN@
CONST	SEGMENT
??_C@_08MPMADPIH@EQUAL?5?$CB?$DN@ DB 'EQUAL !=', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MELFAPHK@EQUAL?5?$DN@
CONST	SEGMENT
??_C@_07MELFAPHK@EQUAL?5?$DN@ DB 'EQUAL =', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PDPFNDMG@OR@
CONST	SEGMENT
??_C@_02PDPFNDMG@OR@ DB 'OR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03BDACDFHA@AND@
CONST	SEGMENT
??_C@_03BDACDFHA@AND@ DB 'AND', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMGAKCCH@END@
CONST	SEGMENT
??_C@_03JMGAKCCH@END@ DB 'END', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IEEDPMEL@Step?5is?5NULL?6@
CONST	SEGMENT
??_C@_0O@IEEDPMEL@Step?5is?5NULL?6@ DB 'Step is NULL', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JJDBNCDG@Object?5is?5user?5defined?6@
CONST	SEGMENT
??_C@_0BI@JJDBNCDG@Object?5is?5user?5defined?6@ DB 'Object is user define'
	DB	'd', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DOOMBINH@Object?5is?5a?5Location?5Set?3?6@
CONST	SEGMENT
??_C@_0BL@DOOMBINH@Object?5is?5a?5Location?5Set?3?6@ DB 'Object is a Loca'
	DB	'tion Set:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EMNLBAKJ@To?5@
CONST	SEGMENT
??_C@_03EMNLBAKJ@To?5@ DB 'To ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KCOAJPAG@From?5@
CONST	SEGMENT
??_C@_05KCOAJPAG@From?5@ DB 'From ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JIJMPGFP@Object?5is?5a?5range?5?3?6@
CONST	SEGMENT
??_C@_0BF@JIJMPGFP@Object?5is?5a?5range?5?3?6@ DB 'Object is a range :', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05GHBGFBPP@node?6@
CONST	SEGMENT
??_C@_05GHBGFBPP@node?6@ DB 'node', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IDICPBLK@index?5?$CFd?5in?5@
CONST	SEGMENT
??_C@_0N@IDICPBLK@index?5?$CFd?5in?5@ DB 'index %d in ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@BGPHFANM@Object?5is?5a?5collapsed?5range?5?3?6@
CONST	SEGMENT
??_C@_0BP@BGPHFANM@Object?5is?5a?5collapsed?5range?5?3?6@ DB 'Object is a'
	DB	' collapsed range :', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IDHPHOMH@Object?5is?5a?5point?5?3?5index?5?$CFd?5in@
CONST	SEGMENT
??_C@_0CF@IDHPHOMH@Object?5is?5a?5point?5?3?5index?5?$CFd?5in@ DB 'Object'
	DB	' is a point : index %d in node', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IHKNOBPJ@Object?5is?5a?5string?5?3?5@
CONST	SEGMENT
??_C@_0BG@IHKNOBPJ@Object?5is?5a?5string?5?3?5@ DB 'Object is a string : '
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@DKICMGNF@Object?5is?5a?5number?5?3?5?$CF0g?6@
CONST	SEGMENT
??_C@_0BK@DKICMGNF@Object?5is?5a?5number?5?3?5?$CF0g?6@ DB 'Object is a n'
	DB	'umber : %0g', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KDLCNKPI@Object?5is?5a?5number?5?3?50?6@
CONST	SEGMENT
??_C@_0BI@KDLCNKPI@Object?5is?5a?5number?5?3?50?6@ DB 'Object is a number'
	DB	' : 0', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JAENJFCB@Object?5is?5a?5number?5?3?5NaN?6@
CONST	SEGMENT
??_C@_0BK@JAENJFCB@Object?5is?5a?5number?5?3?5NaN?6@ DB 'Object is a numb'
	DB	'er : NaN', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CMBCDMBH@Object?5is?5a?5number?5?3?5?9Infinity?6@
CONST	SEGMENT
??_C@_0CA@CMBCDMBH@Object?5is?5a?5number?5?3?5?9Infinity?6@ DB 'Object is'
	DB	' a number : -Infinity', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DBNKIPBA@Object?5is?5a?5number?5?3?5Infinity?6@
CONST	SEGMENT
??_C@_0BP@DBNKIPBA@Object?5is?5a?5number?5?3?5Infinity?6@ DB 'Object is a'
	DB	' number : Infinity', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NIOGPBNO@false?6@
CONST	SEGMENT
??_C@_06NIOGPBNO@false?6@ DB 'false', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LFIOBDML@true?6@
CONST	SEGMENT
??_C@_05LFIOBDML@true?6@ DB 'true', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GPCPEGOI@Object?5is?5a?5Boolean?5?3?5@
CONST	SEGMENT
??_C@_0BH@GPCPEGOI@Object?5is?5a?5Boolean?5?3?5@ DB 'Object is a Boolean '
	DB	': ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NNPHAPO@Object?5is?5an?5XSLT?5value?5tree?5?3?6@
CONST	SEGMENT
??_C@_0CA@NNPHAPO@Object?5is?5an?5XSLT?5value?5tree?5?3?6@ DB 'Object is '
	DB	'an XSLT value tree :', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NCNINNMM@Object?5is?5a?5Node?5Set?5?3?6@
CONST	SEGMENT
??_C@_0BI@NCNINNMM@Object?5is?5a?5Node?5Set?5?3?6@ DB 'Object is a Node S'
	DB	'et :', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EGAONLPM@Object?5is?5uninitialized?6@
CONST	SEGMENT
??_C@_0BJ@EGAONLPM@Object?5is?5uninitialized?6@ DB 'Object is uninitializ'
	DB	'ed', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CIBIAOEE@Object?5is?5empty?5?$CINULL?$CJ?6@
CONST	SEGMENT
??_C@_0BI@CIBIAOEE@Object?5is?5empty?5?$CINULL?$CJ?6@ DB 'Object is empty'
	DB	' (NULL)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05GJKEPAIO@?$CFd?5?3?5@
CONST	SEGMENT
??_C@_05GJKEPAIO@?$CFd?5?3?5@ DB '%d : ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OMGEHPOG@LocationSet?5is?5NULL?5?$CB?6@
CONST	SEGMENT
??_C@_0BH@OMGEHPOG@LocationSet?5is?5NULL?5?$CB?6@ DB 'LocationSet is NULL'
	DB	' !', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ODIPEGMA@Value?5Tree?5is?5NULL?5?$CB?6@
CONST	SEGMENT
??_C@_0BG@ODIPEGMA@Value?5Tree?5is?5NULL?5?$CB?6@ DB 'Value Tree is NULL '
	DB	'!', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CGJHGOLK@Set?5contains?5?$CFd?5nodes?3?6@
CONST	SEGMENT
??_C@_0BI@CGJHGOLK@Set?5contains?5?$CFd?5nodes?3?6@ DB 'Set contains %d n'
	DB	'odes:', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CEACDENF@NodeSet?5is?5NULL?5?$CB?6@
CONST	SEGMENT
??_C@_0BD@CEACDENF@NodeSet?5is?5NULL?5?$CB?6@ DB 'NodeSet is NULL !', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03LHHHGGIK@?5?1?6@
CONST	SEGMENT
??_C@_03LHHHGGIK@?5?1?6@ DB ' /', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OKLFJGHE@Node?5is?5NULL?5?$CB?6@
CONST	SEGMENT
??_C@_0BA@OKLFJGHE@Node?5is?5NULL?5?$CB?6@ DB 'Node is NULL !', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GHHFFDFC@adding?5step?6@
CONST	SEGMENT
??_C@_0N@GHHFFDFC@adding?5step?6@ DB 'adding step', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EIFELMJ@allocating?5steps?6@
CONST	SEGMENT
??_C@_0BC@EIFELMJ@allocating?5steps?6@ DB 'allocating steps', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OMFEJMIL@allocating?5component?6@
CONST	SEGMENT
??_C@_0BG@OMFEJMIL@allocating?5component?6@ DB 'allocating component', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@LEBBNDKO@xmlPointerListAddSize?3?5re?9alloc@
CONST	SEGMENT
??_C@_0CL@LEBBNDKO@xmlPointerListAddSize?3?5re?9alloc@ DB 'xmlPointerList'
	DB	'AddSize: re-allocating item', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@GLHDGMAA@xmlPointerListCreate?3?5allocatin@
CONST	SEGMENT
??_C@_0CH@GLHDGMAA@xmlPointerListCreate?3?5allocatin@ DB 'xmlPointerListC'
	DB	'reate: allocating item', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@
CONST	SEGMENT
??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@ DB 'Memory allocation fa'
	DB	'iled', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ DB 'Memory al'
	DB	'location failed : %s', 0aH, 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_xmlXPathXMLNamespace DD FLAT:_xmlXPathXMLNamespaceStruct
	ORG $+4
_xmlXPathErrorMessages DD FLAT:??_C@_03KDKBKEMD@Ok?6@
	DD	FLAT:??_C@_0BB@OKMDJLIM@Number?5encoding?6@
	DD	FLAT:??_C@_0BE@HEBMIFHL@Unfinished?5literal?6@
	DD	FLAT:??_C@_0BC@KLADNOLA@Start?5of?5literal?6@
	DD	FLAT:??_C@_0CD@PCDALDFN@Expected?5$?5for?5variable?5referen@
	DD	FLAT:??_C@_0BE@JIMEOEEA@Undefined?5variable?6@
	DD	FLAT:??_C@_0BD@MFLBJOMG@Invalid?5predicate?6@
	DD	FLAT:??_C@_0BE@CGBIHHBE@Invalid?5expression?6@
	DD	FLAT:??_C@_0BN@DKJEIEAC@Missing?5closing?5curly?5brace?6@
	DD	FLAT:??_C@_0BH@FDADKKDC@Unregistered?5function?6@
	DD	FLAT:??_C@_0BB@NCMBGCMG@Invalid?5operand?6@
	DD	FLAT:??_C@_0O@HECJPNOD@Invalid?5type?6@
	DD	FLAT:??_C@_0BN@CGCHLLOB@Invalid?5number?5of?5arguments?6@
	DD	FLAT:??_C@_0BG@JMBOPCAE@Invalid?5context?5size?6@
	DD	FLAT:??_C@_0BK@CKPBPDPH@Invalid?5context?5position?6@
	DD	FLAT:??_C@_0BJ@OGCHFJAK@Memory?5allocation?5error?6@
	DD	FLAT:??_C@_0O@JJFGCDGG@Syntax?5error?6@
	DD	FLAT:??_C@_0BA@IPNFPAOO@Resource?5error?6@
	DD	FLAT:??_C@_0BE@ILOLKABH@Sub?5resource?5error?6@
	DD	FLAT:??_C@_0BM@FJPIKKBA@Undefined?5namespace?5prefix?6@
	DD	FLAT:??_C@_0BA@ONCPONLN@Encoding?5error?6@
	DD	FLAT:??_C@_0BH@FAHNGONI@Char?5out?5of?5XML?5range?6@
	DD	FLAT:??_C@_0BP@HNOPDOE@Invalid?5or?5incomplete?5context?6@
	DD	FLAT:??_C@_0BD@MEAKLJLB@Stack?5usage?5error?6@
	DD	FLAT:??_C@_0BE@EKOADJON@Forbidden?5variable?6@
	DD	FLAT:??_C@_0BF@NKLLLIIE@?$DP?$DP?5Unknown?5error?5?$DP?$DP?6@
_DATA	ENDS
;	COMDAT ??_C@_0EA@JENGBCEE@Error?5allocating?5temporary?5stor@
CONST	SEGMENT
??_C@_0EA@JENGBCEE@Error?5allocating?5temporary?5stor@ DB 'Error allocati'
	DB	'ng temporary storage for tim sort: need %lu bytes', 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEscapeUriFunction
_TEXT	SEGMENT
_escape$ = -24						; size = 4
_cptr$ = -16						; size = 4
_target$ = -12						; size = 4
_escape_reserved$ = -8					; size = 4
_str$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathEscapeUriFunction PROC				; COMDAT

; 15001: xmlXPathEscapeUriFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 15002:     xmlXPathObjectPtr str;
; 15003:     int escape_reserved;
; 15004:     xmlBufPtr target;
; 15005:     xmlChar *cptr;
; 15006:     xmlChar escape[4];
; 15007: 
; 15008:     CHECK_ARITY(2);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN5@xmlXPathEs
	jmp	$LN1@xmlXPathEs
$LN5@xmlXPathEs:
	cmp	DWORD PTR _nargs$[ebp], 2
	je	SHORT $LN6@xmlXPathEs
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathEs
$LN6@xmlXPathEs:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN7@xmlXPathEs
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathEs
$LN7@xmlXPathEs:

; 15009: 
; 15010:     escape_reserved = xmlXPathPopBoolean(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathPopBoolean
	add	esp, 4
	mov	DWORD PTR _escape_reserved$[ebp], eax

; 15011: 
; 15012:     CAST_TO_STRING;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN8@xmlXPathEs
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN8@xmlXPathEs
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathStringFunction
	add	esp, 8
$LN8@xmlXPathEs:

; 15013:     str = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax

; 15014: 
; 15015:     target = xmlBufCreate();

	call	_xmlBufCreate
	mov	DWORD PTR _target$[ebp], eax

; 15016: 
; 15017:     escape[0] = '%';

	mov	edx, 1
	imul	eax, edx, 0
	mov	BYTE PTR _escape$[ebp+eax], 37		; 00000025H

; 15018:     escape[3] = 0;

	mov	ecx, 1
	imul	edx, ecx, 3
	mov	BYTE PTR _escape$[ebp+edx], 0

; 15019: 
; 15020:     if (target) {

	cmp	DWORD PTR _target$[ebp], 0
	je	$LN9@xmlXPathEs

; 15021: 	for (cptr = str->stringval; *cptr; cptr++) {

	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cptr$[ebp], ecx
	jmp	SHORT $LN4@xmlXPathEs
$LN2@xmlXPathEs:
	mov	edx, DWORD PTR _cptr$[ebp]
	add	edx, 1
	mov	DWORD PTR _cptr$[ebp], edx
$LN4@xmlXPathEs:
	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN9@xmlXPathEs

; 15022: 	    if ((*cptr >= 'A' && *cptr <= 'Z') ||
; 15023: 		(*cptr >= 'a' && *cptr <= 'z') ||
; 15024: 		(*cptr >= '0' && *cptr <= '9') ||
; 15025: 		*cptr == '-' || *cptr == '_' || *cptr == '.' ||
; 15026: 		*cptr == '!' || *cptr == '~' || *cptr == '*' ||
; 15027: 		*cptr == '\''|| *cptr == '(' || *cptr == ')' ||
; 15028: 		(*cptr == '%' &&
; 15029: 		 ((cptr[1] >= 'A' && cptr[1] <= 'F') ||
; 15030: 		  (cptr[1] >= 'a' && cptr[1] <= 'f') ||
; 15031: 		  (cptr[1] >= '0' && cptr[1] <= '9')) &&
; 15032: 		 ((cptr[2] >= 'A' && cptr[2] <= 'F') ||
; 15033: 		  (cptr[2] >= 'a' && cptr[2] <= 'f') ||
; 15034: 		  (cptr[2] >= '0' && cptr[2] <= '9'))) ||

	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN13@xmlXPathEs
	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 90					; 0000005aH
	jle	$LN12@xmlXPathEs
$LN13@xmlXPathEs:
	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN14@xmlXPathEs
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 122				; 0000007aH
	jle	$LN12@xmlXPathEs
$LN14@xmlXPathEs:
	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN15@xmlXPathEs
	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jle	$LN12@xmlXPathEs
$LN15@xmlXPathEs:
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	je	$LN12@xmlXPathEs
	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 95					; 0000005fH
	je	$LN12@xmlXPathEs
	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	je	$LN12@xmlXPathEs
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 33					; 00000021H
	je	$LN12@xmlXPathEs
	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 126				; 0000007eH
	je	$LN12@xmlXPathEs
	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	je	$LN12@xmlXPathEs
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 39					; 00000027H
	je	$LN12@xmlXPathEs
	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 40					; 00000028H
	je	$LN12@xmlXPathEs
	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 41					; 00000029H
	je	$LN12@xmlXPathEs
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 37					; 00000025H
	jne	$LN16@xmlXPathEs
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN18@xmlXPathEs
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 70					; 00000046H
	jle	SHORT $LN17@xmlXPathEs
$LN18@xmlXPathEs:
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN19@xmlXPathEs
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 102				; 00000066H
	jle	SHORT $LN17@xmlXPathEs
$LN19@xmlXPathEs:
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 48					; 00000030H
	jl	$LN16@xmlXPathEs
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN16@xmlXPathEs
$LN17@xmlXPathEs:
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN20@xmlXPathEs
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 70					; 00000046H
	jle	$LN12@xmlXPathEs
$LN20@xmlXPathEs:
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN21@xmlXPathEs
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 102				; 00000066H
	jle	$LN12@xmlXPathEs
$LN21@xmlXPathEs:
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN16@xmlXPathEs
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN12@xmlXPathEs
$LN16@xmlXPathEs:
	cmp	DWORD PTR _escape_reserved$[ebp], 0
	jne	$LN10@xmlXPathEs
	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 59					; 0000003bH
	je	SHORT $LN12@xmlXPathEs
	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN12@xmlXPathEs
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 63					; 0000003fH
	je	SHORT $LN12@xmlXPathEs
	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 58					; 0000003aH
	je	SHORT $LN12@xmlXPathEs
	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 64					; 00000040H
	je	SHORT $LN12@xmlXPathEs
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 38					; 00000026H
	je	SHORT $LN12@xmlXPathEs
	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 61					; 0000003dH
	je	SHORT $LN12@xmlXPathEs
	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	je	SHORT $LN12@xmlXPathEs
	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 36					; 00000024H
	je	SHORT $LN12@xmlXPathEs
	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 44					; 0000002cH
	jne	SHORT $LN10@xmlXPathEs
$LN12@xmlXPathEs:

; 15035: 		(!escape_reserved &&
; 15036: 		 (*cptr == ';' || *cptr == '/' || *cptr == '?' ||
; 15037: 		  *cptr == ':' || *cptr == '@' || *cptr == '&' ||
; 15038: 		  *cptr == '=' || *cptr == '+' || *cptr == '$' ||
; 15039: 		  *cptr == ','))) {
; 15040: 		xmlBufAdd(target, cptr, 1);

	push	1
	mov	eax, DWORD PTR _cptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	call	_xmlBufAdd
	add	esp, 12					; 0000000cH

; 15041: 	    } else {

	jmp	$LN11@xmlXPathEs
$LN10@xmlXPathEs:

; 15042: 		if ((*cptr >> 4) < 10)

	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	sar	eax, 4
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN24@xmlXPathEs

; 15043: 		    escape[1] = '0' + (*cptr >> 4);

	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sar	edx, 4
	add	edx, 48					; 00000030H
	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR _escape$[ebp+eax], dl
	jmp	SHORT $LN25@xmlXPathEs
$LN24@xmlXPathEs:

; 15044: 		else
; 15045: 		    escape[1] = 'A' - 10 + (*cptr >> 4);

	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sar	edx, 4
	add	edx, 55					; 00000037H
	mov	eax, 1
	shl	eax, 0
	mov	BYTE PTR _escape$[ebp+eax], dl
$LN25@xmlXPathEs:

; 15046: 		if ((*cptr & 0xF) < 10)

	mov	ecx, DWORD PTR _cptr$[ebp]
	movzx	edx, BYTE PTR [ecx]
	and	edx, 15					; 0000000fH
	cmp	edx, 10					; 0000000aH
	jge	SHORT $LN26@xmlXPathEs

; 15047: 		    escape[2] = '0' + (*cptr & 0xF);

	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 15					; 0000000fH
	add	ecx, 48					; 00000030H
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR _escape$[ebp+edx], cl
	jmp	SHORT $LN27@xmlXPathEs
$LN26@xmlXPathEs:

; 15048: 		else
; 15049: 		    escape[2] = 'A' - 10 + (*cptr & 0xF);

	mov	eax, DWORD PTR _cptr$[ebp]
	movzx	ecx, BYTE PTR [eax]
	and	ecx, 15					; 0000000fH
	add	ecx, 55					; 00000037H
	mov	edx, 1
	shl	edx, 1
	mov	BYTE PTR _escape$[ebp+edx], cl
$LN27@xmlXPathEs:

; 15050: 
; 15051: 		xmlBufAdd(target, &escape[0], 3);

	push	3
	mov	eax, 1
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _escape$[ebp+ecx]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_xmlBufAdd
	add	esp, 12					; 0000000cH
$LN11@xmlXPathEs:

; 15052: 	    }
; 15053: 	}

	jmp	$LN2@xmlXPathEs
$LN9@xmlXPathEs:

; 15054:     }
; 15055:     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,

	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	call	_xmlBufContent
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 15056: 	xmlBufContent(target)));
; 15057:     xmlBufFree(target);

	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	_xmlBufFree
	add	esp, 4

; 15058:     xmlXPathReleaseObject(ctxt->context, str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathEs:

; 15059: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@xmlXPathEs
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN31@xmlXPathEs:
	DD	1
	DD	$LN30@xmlXPathEs
$LN30@xmlXPathEs:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN29@xmlXPathEs
$LN29@xmlXPathEs:
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
_xmlXPathEscapeUriFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompiledEvalInternal
_TEXT	SEGMENT
_res$ = -12						; size = 4
_resObj$ = -8						; size = 4
_pctxt$ = -4						; size = 4
_comp$ = 8						; size = 4
_ctxt$ = 12						; size = 4
_resObjPtr$ = 16					; size = 4
_toBool$ = 20						; size = 4
_xmlXPathCompiledEvalInternal PROC			; COMDAT

; 14712: {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14713:     xmlXPathParserContextPtr pctxt;
; 14714:     xmlXPathObjectPtr resObj;
; 14715: #ifndef LIBXML_THREAD_ENABLED
; 14716:     static int reentance = 0;
; 14717: #endif
; 14718:     int res;
; 14719: 
; 14720:     CHECK_CTXT_NEG(ctxt)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathCo
	push	OFFSET ??_C@_0BG@PBKLCIKP@NULL?5context?5pointer?6@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	14720					; 00003980H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	3
	push	1
	push	12					; 0000000cH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 64					; 00000040H
	or	eax, -1
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 14721: 
; 14722:     if (comp == NULL)

	cmp	DWORD PTR _comp$[ebp], 0
	jne	SHORT $LN3@xmlXPathCo

; 14723: 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCo
$LN3@xmlXPathCo:

; 14724:     xmlXPathInit();

	call	_xmlXPathInit

; 14725: 
; 14726: #ifndef LIBXML_THREAD_ENABLED
; 14727:     reentance++;
; 14728:     if (reentance > 1)
; 14729: 	xmlXPathDisableOptimizer = 1;
; 14730: #endif
; 14731: 
; 14732: #ifdef DEBUG_EVAL_COUNTS
; 14733:     comp->nb++;
; 14734:     if ((comp->string != NULL) && (comp->nb > 100)) {
; 14735: 	fprintf(stderr, "100 x %s\n", comp->string);
; 14736: 	comp->nb = 0;
; 14737:     }
; 14738: #endif
; 14739:     pctxt = xmlXPathCompParserContext(comp, ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _comp$[ebp]
	push	ecx
	call	_xmlXPathCompParserContext
	add	esp, 8
	mov	DWORD PTR _pctxt$[ebp], eax

; 14740:     res = xmlXPathRunEval(pctxt, toBool);

	mov	edx, DWORD PTR _toBool$[ebp]
	push	edx
	mov	eax, DWORD PTR _pctxt$[ebp]
	push	eax
	call	_xmlXPathRunEval
	add	esp, 8
	mov	DWORD PTR _res$[ebp], eax

; 14741: 
; 14742:     if (pctxt->error != XPATH_EXPRESSION_OK) {

	mov	ecx, DWORD PTR _pctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN4@xmlXPathCo

; 14743:         resObj = NULL;

	mov	DWORD PTR _resObj$[ebp], 0

; 14744:     } else {

	jmp	SHORT $LN5@xmlXPathCo
$LN4@xmlXPathCo:

; 14745:         resObj = valuePop(pctxt);

	mov	edx, DWORD PTR _pctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _resObj$[ebp], eax

; 14746:         if (resObj == NULL) {

	cmp	DWORD PTR _resObj$[ebp], 0
	jne	SHORT $LN6@xmlXPathCo

; 14747:             if (!toBool)

	cmp	DWORD PTR _toBool$[ebp], 0
	jne	SHORT $LN8@xmlXPathCo

; 14748:                 xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CP@KKKCDCLL@xmlXPathCompiledEval?3?5No?5result@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@xmlXPathCo:

; 14749:                     "xmlXPathCompiledEval: No result on the stack.\n");
; 14750:         } else if (pctxt->valueNr > 0) {

	jmp	SHORT $LN5@xmlXPathCo
$LN6@xmlXPathCo:
	mov	edx, DWORD PTR _pctxt$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jle	SHORT $LN5@xmlXPathCo

; 14751:             xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	mov	eax, DWORD PTR _pctxt$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	push	OFFSET ??_C@_0DH@OEPEKFKA@xmlXPathCompiledEval?3?5?$CFd?5object@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlXPathCo:

; 14752:                 "xmlXPathCompiledEval: %d object(s) left on the stack.\n",
; 14753:                 pctxt->valueNr);
; 14754:         }
; 14755:     }
; 14756: 
; 14757:     if (resObjPtr)

	cmp	DWORD PTR _resObjPtr$[ebp], 0
	je	SHORT $LN10@xmlXPathCo

; 14758:         *resObjPtr = resObj;

	mov	ecx, DWORD PTR _resObjPtr$[ebp]
	mov	edx, DWORD PTR _resObj$[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN11@xmlXPathCo
$LN10@xmlXPathCo:

; 14759:     else
; 14760:         xmlXPathReleaseObject(ctxt, resObj);

	mov	eax, DWORD PTR _resObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN11@xmlXPathCo:

; 14761: 
; 14762:     pctxt->comp = NULL;

	mov	edx, DWORD PTR _pctxt$[ebp]
	mov	DWORD PTR [edx+32], 0

; 14763:     xmlXPathFreeParserContext(pctxt);

	mov	eax, DWORD PTR _pctxt$[ebp]
	push	eax
	call	_xmlXPathFreeParserContext
	add	esp, 4

; 14764: #ifndef LIBXML_THREAD_ENABLED
; 14765:     reentance--;
; 14766: #endif
; 14767: 
; 14768:     return(res);

	mov	eax, DWORD PTR _res$[ebp]
$LN1@xmlXPathCo:

; 14769: }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompiledEvalInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathOptimizeExpression
_TEXT	SEGMENT
tv85 = -8						; size = 4
_prevop$1 = -4						; size = 4
_comp$ = 8						; size = 4
_op$ = 12						; size = 4
_xmlXPathOptimizeExpression PROC			; COMDAT

; 14556: {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14557:     /*
; 14558:     * Try to rewrite "descendant-or-self::node()/foo" to an optimized
; 14559:     * internal representation.
; 14560:     */
; 14561: 
; 14562:     if ((op->op == XPATH_OP_COLLECT /* 11 */) &&
; 14563:         (op->ch1 != -1) &&

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax], 10			; 0000000aH
	jne	$LN4@xmlXPathOp
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	$LN4@xmlXPathOp
	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+8], -1
	jne	$LN4@xmlXPathOp

; 14564:         (op->ch2 == -1 /* no predicate */))
; 14565:     {
; 14566:         xmlXPathStepOpPtr prevop = &comp->steps[op->ch1];

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _prevop$1[ebp], ecx

; 14567: 
; 14568:         if ((prevop->op == XPATH_OP_COLLECT /* 11 */) &&
; 14569:             ((xmlXPathAxisVal) prevop->value ==
; 14570:                 AXIS_DESCENDANT_OR_SELF) &&
; 14571:             (prevop->ch2 == -1) &&
; 14572:             ((xmlXPathTestVal) prevop->value2 == NODE_TEST_TYPE) &&

	mov	eax, DWORD PTR _prevop$1[ebp]
	cmp	DWORD PTR [eax], 10			; 0000000aH
	jne	SHORT $LN4@xmlXPathOp
	mov	ecx, DWORD PTR _prevop$1[ebp]
	cmp	DWORD PTR [ecx+12], 6
	jne	SHORT $LN4@xmlXPathOp
	mov	edx, DWORD PTR _prevop$1[ebp]
	cmp	DWORD PTR [edx+8], -1
	jne	SHORT $LN4@xmlXPathOp
	mov	eax, DWORD PTR _prevop$1[ebp]
	cmp	DWORD PTR [eax+16], 1
	jne	SHORT $LN4@xmlXPathOp
	mov	ecx, DWORD PTR _prevop$1[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN4@xmlXPathOp

; 14573:             ((xmlXPathTypeVal) prevop->value3 == NODE_TYPE_NODE))
; 14574:         {
; 14575:             /*
; 14576:             * This is a "descendant-or-self::node()" without predicates.
; 14577:             * Try to eliminate it.
; 14578:             */
; 14579: 
; 14580:             switch ((xmlXPathAxisVal) op->value) {

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv85[ebp], eax
	mov	ecx, DWORD PTR tv85[ebp]
	sub	ecx, 4
	mov	DWORD PTR tv85[ebp], ecx
	cmp	DWORD PTR tv85[ebp], 9
	ja	SHORT $LN4@xmlXPathOp
	mov	edx, DWORD PTR tv85[ebp]
	movzx	eax, BYTE PTR $LN13@xmlXPathOp[edx]
	jmp	DWORD PTR $LN14@xmlXPathOp[eax*4]
$LN6@xmlXPathOp:

; 14581:                 case AXIS_CHILD:
; 14582:                 case AXIS_DESCENDANT:
; 14583:                     /*
; 14584:                     * Convert "descendant-or-self::node()/child::" or
; 14585:                     * "descendant-or-self::node()/descendant::" to
; 14586:                     * "descendant::"
; 14587:                     */
; 14588:                     op->ch1   = prevop->ch1;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR _prevop$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 14589:                     op->value = AXIS_DESCENDANT;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	DWORD PTR [ecx+12], 5

; 14590:                     break;

	jmp	SHORT $LN4@xmlXPathOp
$LN7@xmlXPathOp:

; 14591:                 case AXIS_SELF:
; 14592:                 case AXIS_DESCENDANT_OR_SELF:
; 14593:                     /*
; 14594:                     * Convert "descendant-or-self::node()/self::" or
; 14595:                     * "descendant-or-self::node()/descendant-or-self::" to
; 14596:                     * to "descendant-or-self::"
; 14597:                     */
; 14598:                     op->ch1   = prevop->ch1;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _prevop$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx

; 14599:                     op->value = AXIS_DESCENDANT_OR_SELF;

	mov	edx, DWORD PTR _op$[ebp]
	mov	DWORD PTR [edx+12], 6
$LN4@xmlXPathOp:

; 14600:                     break;
; 14601:                 default:
; 14602:                     break;
; 14603:             }
; 14604: 	}
; 14605:     }
; 14606: 
; 14607:     /* OP_VALUE has invalid ch1. */
; 14608:     if (op->op == XPATH_OP_VALUE)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax], 11			; 0000000bH
	jne	SHORT $LN9@xmlXPathOp

; 14609:         return;

	jmp	SHORT $LN1@xmlXPathOp
$LN9@xmlXPathOp:

; 14610: 
; 14611:     /* Recurse */
; 14612:     if (op->ch1 != -1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN10@xmlXPathOp

; 14613:         xmlXPathOptimizeExpression(comp, &comp->steps[op->ch1]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _comp$[ebp]
	push	edx
	call	_xmlXPathOptimizeExpression
	add	esp, 8
$LN10@xmlXPathOp:

; 14614:     if (op->ch2 != -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	SHORT $LN1@xmlXPathOp

; 14615: 	xmlXPathOptimizeExpression(comp, &comp->steps[op->ch2]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _comp$[ebp]
	push	ecx
	call	_xmlXPathOptimizeExpression
	add	esp, 8
$LN1@xmlXPathOp:

; 14616: }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@xmlXPathOp:
	DD	$LN6@xmlXPathOp
	DD	$LN7@xmlXPathOp
	DD	$LN4@xmlXPathOp
$LN13@xmlXPathOp:
	DB	0
	DB	0
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
_xmlXPathOptimizeExpression ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathTryStreamCompile
_TEXT	SEGMENT
_tmp$1 = -32						; size = 4
_j$ = -28						; size = 4
_i$ = -24						; size = 4
_ns$ = -20						; size = 4
_namespaces$ = -16					; size = 4
_dict$ = -12						; size = 4
_comp$ = -8						; size = 4
_stream$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_str$ = 12						; size = 4
_xmlXPathTryStreamCompile PROC				; COMDAT

; 14483: xmlXPathTryStreamCompile(xmlXPathContextPtr ctxt, const xmlChar *str) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14484:     /*
; 14485:      * Optimization: use streaming patterns when the XPath expression can
; 14486:      * be compiled to a stream lookup
; 14487:      */
; 14488:     xmlPatternPtr stream;
; 14489:     xmlXPathCompExprPtr comp;
; 14490:     xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0

; 14491:     const xmlChar **namespaces = NULL;

	mov	DWORD PTR _namespaces$[ebp], 0

; 14492:     xmlNsPtr ns;
; 14493:     int i, j;
; 14494: 
; 14495:     if ((!xmlStrchr(str, '[')) && (!xmlStrchr(str, '(')) &&

	push	91					; 0000005bH
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_xmlStrchr
	add	esp, 8
	test	eax, eax
	jne	$LN5@xmlXPathTr
	push	40					; 00000028H
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_xmlStrchr
	add	esp, 8
	test	eax, eax
	jne	$LN5@xmlXPathTr
	push	64					; 00000040H
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_xmlStrchr
	add	esp, 8
	test	eax, eax
	jne	$LN5@xmlXPathTr

; 14496:         (!xmlStrchr(str, '@'))) {
; 14497: 	const xmlChar *tmp;
; 14498: 
; 14499: 	/*
; 14500: 	 * We don't try to handle expressions using the verbose axis
; 14501: 	 * specifiers ("::"), just the simplied form at this point.
; 14502: 	 * Additionally, if there is no list of namespaces available and
; 14503: 	 *  there's a ":" in the expression, indicating a prefixed QName,
; 14504: 	 *  then we won't try to compile either. xmlPatterncompile() needs
; 14505: 	 *  to have a list of namespaces at compilation time in order to
; 14506: 	 *  compile prefixed name tests.
; 14507: 	 */
; 14508: 	tmp = xmlStrchr(str, ':');

	push	58					; 0000003aH
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_xmlStrchr
	add	esp, 8
	mov	DWORD PTR _tmp$1[ebp], eax

; 14509: 	if ((tmp != NULL) &&

	cmp	DWORD PTR _tmp$1[ebp], 0
	je	SHORT $LN6@xmlXPathTr
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN7@xmlXPathTr
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	je	SHORT $LN7@xmlXPathTr
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _tmp$1[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 58					; 0000003aH
	jne	SHORT $LN6@xmlXPathTr
$LN7@xmlXPathTr:

; 14510: 	    ((ctxt == NULL) || (ctxt->nsNr == 0) || (tmp[1] == ':')))
; 14511: 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathTr
$LN6@xmlXPathTr:

; 14512: 
; 14513: 	if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN8@xmlXPathTr

; 14514: 	    dict = ctxt->dict;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	DWORD PTR _dict$[ebp], eax

; 14515: 	    if (ctxt->nsNr > 0) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	jle	$LN8@xmlXPathTr

; 14516: 		namespaces = xmlMalloc(2 * (ctxt->nsNr + 1) * sizeof(xmlChar*));

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	lea	ecx, DWORD PTR [eax+eax+2]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _namespaces$[ebp], eax

; 14517: 		if (namespaces == NULL) {

	cmp	DWORD PTR _namespaces$[ebp], 0
	jne	SHORT $LN10@xmlXPathTr

; 14518: 		    xmlXPathErrMemory(ctxt, "allocating namespaces array\n");

	push	OFFSET ??_C@_0BN@BJKHBGFI@allocating?5namespaces?5array?6@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErrMemory
	add	esp, 8

; 14519: 		    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathTr
$LN10@xmlXPathTr:

; 14520: 		}
; 14521: 		for (i = 0, j = 0; (j < ctxt->nsNr); j++) {

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@xmlXPathTr
$LN2@xmlXPathTr:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@xmlXPathTr:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx+60]
	jge	SHORT $LN3@xmlXPathTr

; 14522: 		    ns = ctxt->namespaces[j];

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _ns$[ebp], eax

; 14523: 		    namespaces[i++] = ns->href;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _namespaces$[ebp]
	mov	eax, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 14524: 		    namespaces[i++] = ns->prefix;

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _namespaces$[ebp]
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 14525: 		}

	jmp	SHORT $LN2@xmlXPathTr
$LN3@xmlXPathTr:

; 14526: 		namespaces[i++] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _namespaces$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 14527: 		namespaces[i] = NULL;

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _namespaces$[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
$LN8@xmlXPathTr:

; 14528: 	    }
; 14529: 	}
; 14530: 
; 14531: 	stream = xmlPatterncompile(str, dict, XML_PATTERN_XPATH,

	mov	edx, 4
	imul	eax, edx, 0
	add	eax, DWORD PTR _namespaces$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _dict$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_xmlPatterncompile
	add	esp, 16					; 00000010H
	mov	DWORD PTR _stream$[ebp], eax

; 14532: 			&namespaces[0]);
; 14533: 	if (namespaces != NULL) {

	cmp	DWORD PTR _namespaces$[ebp], 0
	je	SHORT $LN11@xmlXPathTr

; 14534: 	    xmlFree((xmlChar **)namespaces);

	mov	esi, esp
	mov	eax, DWORD PTR _namespaces$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlXPathTr:

; 14535: 	}
; 14536: 	if ((stream != NULL) && (xmlPatternStreamable(stream) == 1)) {

	cmp	DWORD PTR _stream$[ebp], 0
	je	SHORT $LN12@xmlXPathTr
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_xmlPatternStreamable
	add	esp, 4
	cmp	eax, 1
	jne	SHORT $LN12@xmlXPathTr

; 14537: 	    comp = xmlXPathNewCompExpr();

	call	_xmlXPathNewCompExpr
	mov	DWORD PTR _comp$[ebp], eax

; 14538: 	    if (comp == NULL) {

	cmp	DWORD PTR _comp$[ebp], 0
	jne	SHORT $LN13@xmlXPathTr

; 14539: 		xmlXPathErrMemory(ctxt, "allocating streamable expression\n");

	push	OFFSET ??_C@_0CC@FJFLGALO@allocating?5streamable?5expressio@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErrMemory
	add	esp, 8

; 14540: 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathTr
$LN13@xmlXPathTr:

; 14541: 	    }
; 14542: 	    comp->stream = stream;

	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 14543: 	    comp->dict = dict;

	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR _dict$[ebp]
	mov	DWORD PTR [edx+20], eax

; 14544: 	    if (comp->dict)

	mov	ecx, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN14@xmlXPathTr

; 14545: 		xmlDictReference(comp->dict);

	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_xmlDictReference
	add	esp, 4
$LN14@xmlXPathTr:

; 14546: 	    return(comp);

	mov	eax, DWORD PTR _comp$[ebp]
	jmp	SHORT $LN1@xmlXPathTr
$LN12@xmlXPathTr:

; 14547: 	}
; 14548: 	xmlFreePattern(stream);

	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	_xmlFreePattern
	add	esp, 4
$LN5@xmlXPathTr:

; 14549:     }
; 14550:     return(NULL);

	xor	eax, eax
$LN1@xmlXPathTr:

; 14551: }

	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathTryStreamCompile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRunEval
_TEXT	SEGMENT
_resObj$1 = -16						; size = 4
_res$2 = -8						; size = 4
_comp$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_toBool$ = 12						; size = 4
_xmlXPathRunEval PROC					; COMDAT

; 14309: {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14310:     xmlXPathCompExprPtr comp;
; 14311: 
; 14312:     if ((ctxt == NULL) || (ctxt->comp == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathRu
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN2@xmlXPathRu
$LN3@xmlXPathRu:

; 14313: 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathRu
$LN2@xmlXPathRu:

; 14314: 
; 14315:     if (ctxt->valueTab == NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	jne	SHORT $LN4@xmlXPathRu

; 14316: 	/* Allocate the value stack */
; 14317: 	ctxt->valueTab = (xmlXPathObjectPtr *)

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+28], eax

; 14318: 			 xmlMalloc(10 * sizeof(xmlXPathObjectPtr));
; 14319: 	if (ctxt->valueTab == NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN5@xmlXPathRu

; 14320: 	    xmlXPathPErrMemory(ctxt, "creating evaluation context\n");

	push	OFFSET ??_C@_0BN@DLELJOPA@creating?5evaluation?5context?6@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathPErrMemory
	add	esp, 8

; 14321: 	    xmlFree(ctxt);

	mov	esi, esp
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlXPathRu:

; 14322: 	}
; 14323: 	ctxt->valueNr = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+20], 0

; 14324: 	ctxt->valueMax = 10;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+24], 10			; 0000000aH

; 14325: 	ctxt->value = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+16], 0

; 14326:         ctxt->valueFrame = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+44], 0
$LN4@xmlXPathRu:

; 14327:     }
; 14328: #ifdef XPATH_STREAMING
; 14329:     if (ctxt->comp->stream) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	cmp	DWORD PTR [edx+24], 0
	je	$LN6@xmlXPathRu

; 14330: 	int res;
; 14331: 
; 14332: 	if (toBool) {

	cmp	DWORD PTR _toBool$[ebp], 0
	je	SHORT $LN7@xmlXPathRu

; 14333: 	    /*
; 14334: 	    * Evaluation to boolean result.
; 14335: 	    */
; 14336: 	    res = xmlXPathRunStreamEval(ctxt->context,

	push	1
	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathRunStreamEval
	add	esp, 16					; 00000010H
	mov	DWORD PTR _res$2[ebp], eax

; 14337: 		ctxt->comp->stream, NULL, 1);
; 14338: 	    if (res != -1)

	cmp	DWORD PTR _res$2[ebp], -1
	je	SHORT $LN9@xmlXPathRu

; 14339: 		return(res);

	mov	eax, DWORD PTR _res$2[ebp]
	jmp	$LN1@xmlXPathRu
$LN9@xmlXPathRu:

; 14340: 	} else {

	jmp	SHORT $LN6@xmlXPathRu
$LN7@xmlXPathRu:

; 14341: 	    xmlXPathObjectPtr resObj = NULL;

	mov	DWORD PTR _resObj$1[ebp], 0

; 14342: 
; 14343: 	    /*
; 14344: 	    * Evaluation to a sequence.
; 14345: 	    */
; 14346: 	    res = xmlXPathRunStreamEval(ctxt->context,

	push	0
	lea	edx, DWORD PTR _resObj$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathRunStreamEval
	add	esp, 16					; 00000010H
	mov	DWORD PTR _res$2[ebp], eax

; 14347: 		ctxt->comp->stream, &resObj, 0);
; 14348: 
; 14349: 	    if ((res != -1) && (resObj != NULL)) {

	cmp	DWORD PTR _res$2[ebp], -1
	je	SHORT $LN10@xmlXPathRu
	cmp	DWORD PTR _resObj$1[ebp], 0
	je	SHORT $LN10@xmlXPathRu

; 14350: 		valuePush(ctxt, resObj);

	mov	edx, DWORD PTR _resObj$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 14351: 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathRu
$LN10@xmlXPathRu:

; 14352: 	    }
; 14353: 	    if (resObj != NULL)

	cmp	DWORD PTR _resObj$1[ebp], 0
	je	SHORT $LN6@xmlXPathRu

; 14354: 		xmlXPathReleaseObject(ctxt->context, resObj);

	mov	ecx, DWORD PTR _resObj$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN6@xmlXPathRu:

; 14355: 	}
; 14356: 	/*
; 14357: 	* QUESTION TODO: This falls back to normal XPath evaluation
; 14358: 	* if res == -1. Is this intended?
; 14359: 	*/
; 14360:     }
; 14361: #endif
; 14362:     comp = ctxt->comp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _comp$[ebp], edx

; 14363:     if (comp->last < 0) {

	mov	eax, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jge	SHORT $LN12@xmlXPathRu

; 14364: 	xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CJ@GKOHPKDK@xmlXPathRunEval?3?5last?5is?5less?5t@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 14365: 	    "xmlXPathRunEval: last is less than zero\n");
; 14366: 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathRu
$LN12@xmlXPathRu:

; 14367:     }
; 14368:     if (toBool)

	cmp	DWORD PTR _toBool$[ebp], 0
	je	SHORT $LN13@xmlXPathRu

; 14369: 	return(xmlXPathCompOpEvalToBoolean(ctxt,

	push	0
	mov	eax, DWORD PTR _comp$[ebp]
	imul	ecx, DWORD PTR [eax+12], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEvalToBoolean
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlXPathRu
	jmp	SHORT $LN14@xmlXPathRu
$LN13@xmlXPathRu:

; 14370: 	    &comp->steps[comp->last], 0));
; 14371:     else
; 14372: 	xmlXPathCompOpEval(ctxt, &comp->steps[comp->last]);

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx+12], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
$LN14@xmlXPathRu:

; 14373: 
; 14374:     return(0);

	xor	eax, eax
$LN1@xmlXPathRu:

; 14375: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN18@xmlXPathRu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN18@xmlXPathRu:
	DD	1
	DD	$LN17@xmlXPathRu
$LN17@xmlXPathRu:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN16@xmlXPathRu
$LN16@xmlXPathRu:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	79					; 0000004fH
	DB	98					; 00000062H
	DB	106					; 0000006aH
	DB	0
_xmlXPathRunEval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRunStreamEval
_TEXT	SEGMENT
tv164 = -52						; size = 4
tv156 = -48						; size = 4
tv133 = -44						; size = 4
_nb_nodes$ = -40					; size = 4
_patstream$ = -36					; size = 4
_limit$ = -32						; size = 4
_cur$ = -28						; size = 4
_eval_all_nodes$ = -24					; size = 4
_depth$ = -20						; size = 4
_ret$ = -16						; size = 4
_from_root$ = -12					; size = 4
_min_depth$ = -8					; size = 4
_max_depth$ = -4					; size = 4
_ctxt$ = 8						; size = 4
_comp$ = 12						; size = 4
_resultSeq$ = 16					; size = 4
_toBool$ = 20						; size = 4
_xmlXPathRunStreamEval PROC				; COMDAT

; 14076: {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14077:     int max_depth, min_depth;
; 14078:     int from_root;
; 14079:     int ret, depth;
; 14080:     int eval_all_nodes;
; 14081:     xmlNodePtr cur = NULL, limit = NULL;

	mov	DWORD PTR _cur$[ebp], 0
	mov	DWORD PTR _limit$[ebp], 0

; 14082:     xmlStreamCtxtPtr patstream = NULL;

	mov	DWORD PTR _patstream$[ebp], 0

; 14083: 
; 14084:     int nb_nodes = 0;

	mov	DWORD PTR _nb_nodes$[ebp], 0

; 14085: 
; 14086:     if ((ctxt == NULL) || (comp == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN17@xmlXPathRu
	cmp	DWORD PTR _comp$[ebp], 0
	jne	SHORT $LN16@xmlXPathRu
$LN17@xmlXPathRu:

; 14087:         return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathRu
$LN16@xmlXPathRu:

; 14088:     max_depth = xmlPatternMaxDepth(comp);

	mov	eax, DWORD PTR _comp$[ebp]
	push	eax
	call	_xmlPatternMaxDepth
	add	esp, 4
	mov	DWORD PTR _max_depth$[ebp], eax

; 14089:     if (max_depth == -1)

	cmp	DWORD PTR _max_depth$[ebp], -1
	jne	SHORT $LN18@xmlXPathRu

; 14090:         return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathRu
$LN18@xmlXPathRu:

; 14091:     if (max_depth == -2)

	cmp	DWORD PTR _max_depth$[ebp], -2		; fffffffeH
	jne	SHORT $LN19@xmlXPathRu

; 14092:         max_depth = 10000;

	mov	DWORD PTR _max_depth$[ebp], 10000	; 00002710H
$LN19@xmlXPathRu:

; 14093:     min_depth = xmlPatternMinDepth(comp);

	mov	ecx, DWORD PTR _comp$[ebp]
	push	ecx
	call	_xmlPatternMinDepth
	add	esp, 4
	mov	DWORD PTR _min_depth$[ebp], eax

; 14094:     if (min_depth == -1)

	cmp	DWORD PTR _min_depth$[ebp], -1
	jne	SHORT $LN20@xmlXPathRu

; 14095:         return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathRu
$LN20@xmlXPathRu:

; 14096:     from_root = xmlPatternFromRoot(comp);

	mov	edx, DWORD PTR _comp$[ebp]
	push	edx
	call	_xmlPatternFromRoot
	add	esp, 4
	mov	DWORD PTR _from_root$[ebp], eax

; 14097:     if (from_root < 0)

	cmp	DWORD PTR _from_root$[ebp], 0
	jge	SHORT $LN21@xmlXPathRu

; 14098:         return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathRu
$LN21@xmlXPathRu:

; 14099: #if 0
; 14100:     printf("stream eval: depth %d from root %d\n", max_depth, from_root);
; 14101: #endif
; 14102: 
; 14103:     if (! toBool) {

	cmp	DWORD PTR _toBool$[ebp], 0
	jne	SHORT $LN22@xmlXPathRu

; 14104: 	if (resultSeq == NULL)

	cmp	DWORD PTR _resultSeq$[ebp], 0
	jne	SHORT $LN23@xmlXPathRu

; 14105: 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathRu
$LN23@xmlXPathRu:

; 14106: 	*resultSeq = xmlXPathCacheNewNodeSet(ctxt, NULL);

	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	mov	ecx, DWORD PTR _resultSeq$[ebp]
	mov	DWORD PTR [ecx], eax

; 14107: 	if (*resultSeq == NULL)

	mov	edx, DWORD PTR _resultSeq$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN22@xmlXPathRu

; 14108: 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathRu
$LN22@xmlXPathRu:

; 14109:     }
; 14110: 
; 14111:     /*
; 14112:      * handle the special cases of "/" amd "." being matched
; 14113:      */
; 14114:     if (min_depth == 0) {

	cmp	DWORD PTR _min_depth$[ebp], 0
	jne	SHORT $LN25@xmlXPathRu

; 14115: 	if (from_root) {

	cmp	DWORD PTR _from_root$[ebp], 0
	je	SHORT $LN26@xmlXPathRu

; 14116: 	    /* Select "/" */
; 14117: 	    if (toBool)

	cmp	DWORD PTR _toBool$[ebp], 0
	je	SHORT $LN28@xmlXPathRu

; 14118: 		return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathRu
$LN28@xmlXPathRu:

; 14119: 	    xmlXPathNodeSetAddUnique((*resultSeq)->nodesetval,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _resultSeq$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8

; 14120: 		                     (xmlNodePtr) ctxt->doc);
; 14121: 	} else {

	jmp	SHORT $LN25@xmlXPathRu
$LN26@xmlXPathRu:

; 14122: 	    /* Select "self::node()" */
; 14123: 	    if (toBool)

	cmp	DWORD PTR _toBool$[ebp], 0
	je	SHORT $LN29@xmlXPathRu

; 14124: 		return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathRu
$LN29@xmlXPathRu:

; 14125: 	    xmlXPathNodeSetAddUnique((*resultSeq)->nodesetval, ctxt->node);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _resultSeq$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
$LN25@xmlXPathRu:

; 14126: 	}
; 14127:     }
; 14128:     if (max_depth == 0) {

	cmp	DWORD PTR _max_depth$[ebp], 0
	jne	SHORT $LN30@xmlXPathRu

; 14129: 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathRu
$LN30@xmlXPathRu:

; 14130:     }
; 14131: 
; 14132:     if (from_root) {

	cmp	DWORD PTR _from_root$[ebp], 0
	je	SHORT $LN31@xmlXPathRu

; 14133:         cur = (xmlNodePtr)ctxt->doc;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN32@xmlXPathRu
$LN31@xmlXPathRu:

; 14134:     } else if (ctxt->node != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN32@xmlXPathRu

; 14135:         switch (ctxt->node->type) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv133[ebp], eax
	mov	ecx, DWORD PTR tv133[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv133[ebp], ecx
	cmp	DWORD PTR tv133[ebp], 20		; 00000014H
	ja	SHORT $LN2@xmlXPathRu
	mov	edx, DWORD PTR tv133[ebp]
	movzx	eax, BYTE PTR $LN76@xmlXPathRu[edx]
	jmp	DWORD PTR $LN78@xmlXPathRu[eax*4]
$LN34@xmlXPathRu:

; 14136:             case XML_ELEMENT_NODE:
; 14137:             case XML_DOCUMENT_NODE:
; 14138:             case XML_DOCUMENT_FRAG_NODE:
; 14139:             case XML_HTML_DOCUMENT_NODE:
; 14140: #ifdef LIBXML_DOCB_ENABLED
; 14141:             case XML_DOCB_DOCUMENT_NODE:
; 14142: #endif
; 14143: 	        cur = ctxt->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _cur$[ebp], edx
$LN2@xmlXPathRu:

; 14144: 		break;
; 14145:             case XML_ATTRIBUTE_NODE:
; 14146:             case XML_TEXT_NODE:
; 14147:             case XML_CDATA_SECTION_NODE:
; 14148:             case XML_ENTITY_REF_NODE:
; 14149:             case XML_ENTITY_NODE:
; 14150:             case XML_PI_NODE:
; 14151:             case XML_COMMENT_NODE:
; 14152:             case XML_NOTATION_NODE:
; 14153:             case XML_DTD_NODE:
; 14154:             case XML_DOCUMENT_TYPE_NODE:
; 14155:             case XML_ELEMENT_DECL:
; 14156:             case XML_ATTRIBUTE_DECL:
; 14157:             case XML_ENTITY_DECL:
; 14158:             case XML_NAMESPACE_DECL:
; 14159:             case XML_XINCLUDE_START:
; 14160:             case XML_XINCLUDE_END:
; 14161: 		break;
; 14162: 	}
; 14163: 	limit = cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _limit$[ebp], eax
$LN32@xmlXPathRu:

; 14164:     }
; 14165:     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN36@xmlXPathRu

; 14166:         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathRu
$LN36@xmlXPathRu:

; 14167:     }
; 14168: 
; 14169:     patstream = xmlPatternGetStreamCtxt(comp);

	mov	ecx, DWORD PTR _comp$[ebp]
	push	ecx
	call	_xmlPatternGetStreamCtxt
	add	esp, 4
	mov	DWORD PTR _patstream$[ebp], eax

; 14170:     if (patstream == NULL) {

	cmp	DWORD PTR _patstream$[ebp], 0
	jne	SHORT $LN37@xmlXPathRu

; 14171: 	/*
; 14172: 	* QUESTION TODO: Is this an error?
; 14173: 	*/
; 14174: 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathRu
$LN37@xmlXPathRu:

; 14175:     }
; 14176: 
; 14177:     eval_all_nodes = xmlStreamWantsAnyNode(patstream);

	mov	edx, DWORD PTR _patstream$[ebp]
	push	edx
	call	_xmlStreamWantsAnyNode
	add	esp, 4
	mov	DWORD PTR _eval_all_nodes$[ebp], eax

; 14178: 
; 14179:     if (from_root) {

	cmp	DWORD PTR _from_root$[ebp], 0
	je	SHORT $LN38@xmlXPathRu

; 14180: 	ret = xmlStreamPush(patstream, NULL, NULL);

	push	0
	push	0
	mov	eax, DWORD PTR _patstream$[ebp]
	push	eax
	call	_xmlStreamPush
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 14181: 	if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN39@xmlXPathRu
	jmp	SHORT $LN38@xmlXPathRu
$LN39@xmlXPathRu:

; 14182: 	} else if (ret == 1) {

	cmp	DWORD PTR _ret$[ebp], 1
	jne	SHORT $LN38@xmlXPathRu

; 14183: 	    if (toBool)

	cmp	DWORD PTR _toBool$[ebp], 0
	je	SHORT $LN42@xmlXPathRu

; 14184: 		goto return_1;

	jmp	$return_1$80
$LN42@xmlXPathRu:

; 14185: 	    xmlXPathNodeSetAddUnique((*resultSeq)->nodesetval, cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _resultSeq$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
$LN38@xmlXPathRu:

; 14186: 	}
; 14187:     }
; 14188:     depth = 0;

	mov	DWORD PTR _depth$[ebp], 0

; 14189:     goto scan_children;

	jmp	$scan_children$81
$next_node$82:

; 14190: next_node:
; 14191:     do {
; 14192:         nb_nodes++;

	mov	edx, DWORD PTR _nb_nodes$[ebp]
	add	edx, 1
	mov	DWORD PTR _nb_nodes$[ebp], edx

; 14193: 
; 14194: 	switch (cur->type) {

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv156[ebp], ecx
	mov	edx, DWORD PTR tv156[ebp]
	sub	edx, 1
	mov	DWORD PTR tv156[ebp], edx
	cmp	DWORD PTR tv156[ebp], 7
	ja	$scan_children$81
	mov	eax, DWORD PTR tv156[ebp]
	movzx	ecx, BYTE PTR $LN77@xmlXPathRu[eax]
	jmp	DWORD PTR $LN79@xmlXPathRu[ecx*4]
$LN43@xmlXPathRu:

; 14195: 	    case XML_ELEMENT_NODE:
; 14196: 	    case XML_TEXT_NODE:
; 14197: 	    case XML_CDATA_SECTION_NODE:
; 14198: 	    case XML_COMMENT_NODE:
; 14199: 	    case XML_PI_NODE:
; 14200: 		if (cur->type == XML_ELEMENT_NODE) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN44@xmlXPathRu

; 14201: 		    ret = xmlStreamPush(patstream, cur->name,

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN74@xmlXPathRu
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN75@xmlXPathRu
$LN74@xmlXPathRu:
	mov	DWORD PTR tv164[ebp], 0
$LN75@xmlXPathRu:
	mov	ecx, DWORD PTR tv164[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _patstream$[ebp]
	push	ecx
	call	_xmlStreamPush
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN45@xmlXPathRu
$LN44@xmlXPathRu:

; 14202: 				(cur->ns ? cur->ns->href : NULL));
; 14203: 		} else if (eval_all_nodes)

	cmp	DWORD PTR _eval_all_nodes$[ebp], 0
	je	SHORT $LN46@xmlXPathRu

; 14204: 		    ret = xmlStreamPushNode(patstream, NULL, NULL, cur->type);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _patstream$[ebp]
	push	ecx
	call	_xmlStreamPushNode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN45@xmlXPathRu
$LN46@xmlXPathRu:

; 14205: 		else
; 14206: 		    break;

	jmp	$scan_children$81
$LN45@xmlXPathRu:

; 14207: 
; 14208: 		if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN48@xmlXPathRu
	jmp	SHORT $LN49@xmlXPathRu
$LN48@xmlXPathRu:

; 14209: 		    /* NOP. */
; 14210: 		} else if (ret == 1) {

	cmp	DWORD PTR _ret$[ebp], 1
	jne	SHORT $LN49@xmlXPathRu

; 14211: 		    if (toBool)

	cmp	DWORD PTR _toBool$[ebp], 0
	je	SHORT $LN51@xmlXPathRu

; 14212: 			goto return_1;

	jmp	$return_1$80
$LN51@xmlXPathRu:

; 14213: 		    if (xmlXPathNodeSetAddUnique((*resultSeq)->nodesetval, cur)
; 14214: 		        < 0) {

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _resultSeq$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN49@xmlXPathRu

; 14215: 			ctxt->lastError.domain = XML_FROM_XPATH;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+136], 12			; 0000000cH

; 14216: 			ctxt->lastError.code = XML_ERR_NO_MEMORY;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+140], 2
$LN49@xmlXPathRu:

; 14217: 		    }
; 14218: 		}
; 14219: 		if ((cur->children == NULL) || (depth >= max_depth)) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN54@xmlXPathRu
	mov	eax, DWORD PTR _depth$[ebp]
	cmp	eax, DWORD PTR _max_depth$[ebp]
	jl	SHORT $scan_children$81
$LN54@xmlXPathRu:

; 14220: 		    ret = xmlStreamPop(patstream);

	mov	ecx, DWORD PTR _patstream$[ebp]
	push	ecx
	call	_xmlStreamPop
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
$LN9@xmlXPathRu:

; 14221: 		    while (cur->next != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $scan_children$81

; 14222: 			cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx

; 14223: 			if ((cur->type != XML_ENTITY_DECL) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 17			; 00000011H
	je	SHORT $LN55@xmlXPathRu
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 14			; 0000000eH
	je	SHORT $LN55@xmlXPathRu

; 14224: 			    (cur->type != XML_DTD_NODE))
; 14225: 			    goto next_node;

	jmp	$next_node$82
$LN55@xmlXPathRu:

; 14226: 		    }

	jmp	SHORT $LN9@xmlXPathRu
$scan_children$81:

; 14227: 		}
; 14228: 	    default:
; 14229: 		break;
; 14230: 	}
; 14231: 
; 14232: scan_children:
; 14233: 	if (cur->type == XML_NAMESPACE_DECL) break;

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN57@xmlXPathRu
	jmp	$done$83
$LN57@xmlXPathRu:

; 14234: 	if ((cur->children != NULL) && (depth < max_depth)) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN58@xmlXPathRu
	mov	eax, DWORD PTR _depth$[ebp]
	cmp	eax, DWORD PTR _max_depth$[ebp]
	jge	SHORT $LN58@xmlXPathRu

; 14235: 	    /*
; 14236: 	     * Do not descend on entities declarations
; 14237: 	     */
; 14238: 	    if (cur->children->type != XML_ENTITY_DECL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 17			; 00000011H
	je	SHORT $LN58@xmlXPathRu

; 14239: 		cur = cur->children;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 14240: 		depth++;

	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	mov	DWORD PTR _depth$[ebp], edx

; 14241: 		/*
; 14242: 		 * Skip DTDs
; 14243: 		 */
; 14244: 		if (cur->type != XML_DTD_NODE)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 14			; 0000000eH
	je	SHORT $LN58@xmlXPathRu

; 14245: 		    continue;

	jmp	$LN4@xmlXPathRu
$LN58@xmlXPathRu:

; 14246: 	    }
; 14247: 	}
; 14248: 
; 14249: 	if (cur == limit)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jne	SHORT $LN11@xmlXPathRu

; 14250: 	    break;

	jmp	$done$83
$LN11@xmlXPathRu:

; 14251: 
; 14252: 	while (cur->next != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN15@xmlXPathRu

; 14253: 	    cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx

; 14254: 	    if ((cur->type != XML_ENTITY_DECL) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 17			; 00000011H
	je	SHORT $LN62@xmlXPathRu
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 14			; 0000000eH
	je	SHORT $LN62@xmlXPathRu

; 14255: 		(cur->type != XML_DTD_NODE))
; 14256: 		goto next_node;

	jmp	$next_node$82
$LN62@xmlXPathRu:

; 14257: 	}

	jmp	SHORT $LN11@xmlXPathRu
$LN15@xmlXPathRu:

; 14258: 
; 14259: 	do {
; 14260: 	    cur = cur->parent;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _cur$[ebp], edx

; 14261: 	    depth--;

	mov	eax, DWORD PTR _depth$[ebp]
	sub	eax, 1
	mov	DWORD PTR _depth$[ebp], eax

; 14262: 	    if ((cur == NULL) || (cur == limit))

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN64@xmlXPathRu
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _limit$[ebp]
	jne	SHORT $LN63@xmlXPathRu
$LN64@xmlXPathRu:

; 14263: 	        goto done;

	jmp	$done$83
$LN63@xmlXPathRu:

; 14264: 	    if (cur->type == XML_ELEMENT_NODE) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN65@xmlXPathRu

; 14265: 		ret = xmlStreamPop(patstream);

	mov	eax, DWORD PTR _patstream$[ebp]
	push	eax
	call	_xmlStreamPop
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN66@xmlXPathRu
$LN65@xmlXPathRu:

; 14266: 	    } else if ((eval_all_nodes) &&

	cmp	DWORD PTR _eval_all_nodes$[ebp], 0
	je	SHORT $LN66@xmlXPathRu
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 3
	je	SHORT $LN68@xmlXPathRu
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 4
	je	SHORT $LN68@xmlXPathRu
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 8
	je	SHORT $LN68@xmlXPathRu
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 7
	jne	SHORT $LN66@xmlXPathRu
$LN68@xmlXPathRu:

; 14267: 		((cur->type == XML_TEXT_NODE) ||
; 14268: 		 (cur->type == XML_CDATA_SECTION_NODE) ||
; 14269: 		 (cur->type == XML_COMMENT_NODE) ||
; 14270: 		 (cur->type == XML_PI_NODE)))
; 14271: 	    {
; 14272: 		ret = xmlStreamPop(patstream);

	mov	edx, DWORD PTR _patstream$[ebp]
	push	edx
	call	_xmlStreamPop
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
$LN66@xmlXPathRu:

; 14273: 	    }
; 14274: 	    if (cur->next != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN13@xmlXPathRu

; 14275: 		cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx

; 14276: 		break;

	jmp	SHORT $LN4@xmlXPathRu
$LN13@xmlXPathRu:

; 14277: 	    }
; 14278: 	} while (cur != NULL);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	$LN15@xmlXPathRu
$LN4@xmlXPathRu:

; 14279: 
; 14280:     } while ((cur != NULL) && (depth >= 0));

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $done$83
	cmp	DWORD PTR _depth$[ebp], 0
	jge	$next_node$82
$done$83:

; 14281: 
; 14282: done:
; 14283: 
; 14284: #if 0
; 14285:     printf("stream eval: checked %d nodes selected %d\n",
; 14286:            nb_nodes, retObj->nodesetval->nodeNr);
; 14287: #endif
; 14288: 
; 14289:     if (patstream)

	cmp	DWORD PTR _patstream$[ebp], 0
	je	SHORT $LN71@xmlXPathRu

; 14290: 	xmlFreeStreamCtxt(patstream);

	mov	eax, DWORD PTR _patstream$[ebp]
	push	eax
	call	_xmlFreeStreamCtxt
	add	esp, 4
$LN71@xmlXPathRu:

; 14291:     return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathRu
$return_1$80:

; 14292: 
; 14293: return_1:
; 14294:     if (patstream)

	cmp	DWORD PTR _patstream$[ebp], 0
	je	SHORT $LN72@xmlXPathRu

; 14295: 	xmlFreeStreamCtxt(patstream);

	mov	ecx, DWORD PTR _patstream$[ebp]
	push	ecx
	call	_xmlFreeStreamCtxt
	add	esp, 4
$LN72@xmlXPathRu:

; 14296:     return(1);

	mov	eax, 1
$LN1@xmlXPathRu:

; 14297: }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN78@xmlXPathRu:
	DD	$LN34@xmlXPathRu
	DD	$LN2@xmlXPathRu
$LN76@xmlXPathRu:
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	DB	1
	DB	0
	DB	1
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
	npad	3
$LN79@xmlXPathRu:
	DD	$LN43@xmlXPathRu
	DD	$scan_children$81
$LN77@xmlXPathRu:
	DB	0
	DB	1
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	0
_xmlXPathRunStreamEval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompOpEvalLast
_TEXT	SEGMENT
tv68 = -24						; size = 4
_arg2$ = -20						; size = 4
_arg1$ = -16						; size = 4
_comp$ = -12						; size = 4
_cur$ = -8						; size = 4
_total$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_op$ = 12						; size = 4
_last$ = 16						; size = 4
_xmlXPathCompOpEvalLast PROC				; COMDAT

; 12834: {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 12835:     int total = 0, cur;

	mov	DWORD PTR _total$[ebp], 0

; 12836:     xmlXPathCompExprPtr comp;
; 12837:     xmlXPathObjectPtr arg1, arg2;
; 12838: 
; 12839:     CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:

; 12840:     comp = ctxt->comp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _comp$[ebp], edx

; 12841:     switch (op->op) {

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 17			; 00000011H
	ja	$LN29@xmlXPathCo
	mov	edx, DWORD PTR tv68[ebp]
	movzx	eax, BYTE PTR $LN31@xmlXPathCo[edx]
	jmp	DWORD PTR $LN32@xmlXPathCo[eax*4]
$LN5@xmlXPathCo:

; 12842:         case XPATH_OP_END:
; 12843:             return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN6@xmlXPathCo:

; 12844:         case XPATH_OP_UNION:
; 12845:             total =

	mov	ecx, DWORD PTR _last$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEvalLast
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _total$[ebp], eax

; 12846:                 xmlXPathCompOpEvalLast(ctxt, &comp->steps[op->ch1], last);
; 12847: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN7@xmlXPathCo:

; 12848:             if ((ctxt->value != NULL)
; 12849:                 && (ctxt->value->type == XPATH_NODESET)
; 12850:                 && (ctxt->value->nodesetval != NULL)
; 12851:                 && (ctxt->value->nodesetval->nodeNr >= 1)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN8@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN8@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN8@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 1
	jl	SHORT $LN8@xmlXPathCo

; 12852:                 /*
; 12853:                  * limit tree traversing to first node in the result
; 12854:                  */
; 12855: 		if (ctxt->value->nodesetval->nodeNr > 1)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 1
	jle	SHORT $LN9@xmlXPathCo

; 12856: 		    xmlXPathNodeSetSort(ctxt->value->nodesetval);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetSort
	add	esp, 4
$LN9@xmlXPathCo:

; 12857:                 *last =

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4-4]
	mov	DWORD PTR [eax], ecx
$LN8@xmlXPathCo:

; 12858:                     ctxt->value->nodesetval->nodeTab[ctxt->value->
; 12859:                                                      nodesetval->nodeNr -
; 12860:                                                      1];
; 12861:             }
; 12862:             cur =

	mov	edx, DWORD PTR _last$[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+8], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEvalLast
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur$[ebp], eax

; 12863:                 xmlXPathCompOpEvalLast(ctxt, &comp->steps[op->ch2], last);
; 12864: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN11@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN11@xmlXPathCo:

; 12865:             if ((ctxt->value != NULL)
; 12866:                 && (ctxt->value->type == XPATH_NODESET)
; 12867:                 && (ctxt->value->nodesetval != NULL)
; 12868:                 && (ctxt->value->nodesetval->nodeNr >= 1)) { /* TODO: NOP ? */
; 12869:             }
; 12870: 
; 12871:             arg2 = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax

; 12872:             arg1 = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg1$[ebp], eax

; 12873:             if ((arg1 == NULL) || (arg1->type != XPATH_NODESET) ||
; 12874:                 (arg2 == NULL) || (arg2->type != XPATH_NODESET)) {

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN13@xmlXPathCo
	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN13@xmlXPathCo
	cmp	DWORD PTR _arg2$[ebp], 0
	je	SHORT $LN13@xmlXPathCo
	mov	ecx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN12@xmlXPathCo
$LN13@xmlXPathCo:

; 12875: 	        xmlXPathReleaseObject(ctxt->context, arg1);

	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12876: 	        xmlXPathReleaseObject(ctxt->context, arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12877:                 XP_ERROR0(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN12@xmlXPathCo:

; 12878:             }
; 12879: 
; 12880:             arg1->nodesetval = xmlXPathNodeSetMerge(arg1->nodesetval,

	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathNodeSetMerge
	add	esp, 8
	mov	ecx, DWORD PTR _arg1$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 12881:                                                     arg2->nodesetval);
; 12882:             valuePush(ctxt, arg1);

	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 12883: 	    xmlXPathReleaseObject(ctxt->context, arg2);

	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12884:             /* optimizer */
; 12885: 	    if (total > cur)

	mov	ecx, DWORD PTR _total$[ebp]
	cmp	ecx, DWORD PTR _cur$[ebp]
	jle	SHORT $LN14@xmlXPathCo

; 12886: 		xmlXPathCompSwap(op);

	mov	edx, DWORD PTR _op$[ebp]
	push	edx
	call	_xmlXPathCompSwap
	add	esp, 4
$LN14@xmlXPathCo:

; 12887:             return (total + cur);

	mov	eax, DWORD PTR _total$[ebp]
	add	eax, DWORD PTR _cur$[ebp]
	jmp	$LN1@xmlXPathCo
$LN15@xmlXPathCo:

; 12888:         case XPATH_OP_ROOT:
; 12889:             xmlXPathRoot(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRoot
	add	esp, 4

; 12890:             return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN16@xmlXPathCo:

; 12891:         case XPATH_OP_NODE:
; 12892:             if (op->ch1 != -1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN17@xmlXPathCo

; 12893:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN17@xmlXPathCo:

; 12894: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN18@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN18@xmlXPathCo:

; 12895:             if (op->ch2 != -1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+8], -1
	je	SHORT $LN19@xmlXPathCo

; 12896:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+8], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN19@xmlXPathCo:

; 12897: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN20@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN20@xmlXPathCo:

; 12898: 	    valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 12899: 		ctxt->context->node));
; 12900:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN21@xmlXPathCo:

; 12901:         case XPATH_OP_COLLECT:{
; 12902:                 if (op->ch1 == -1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	jne	SHORT $LN22@xmlXPathCo

; 12903:                     return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN22@xmlXPathCo:

; 12904: 
; 12905:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 12906: 		CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN23@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN23@xmlXPathCo:

; 12907: 
; 12908:                 total += xmlXPathNodeCollectAndTest(ctxt, op, NULL, last, 0);

	push	0
	mov	ecx, DWORD PTR _last$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _op$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathNodeCollectAndTest
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 12909:                 return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN24@xmlXPathCo:

; 12910:             }
; 12911:         case XPATH_OP_VALUE:
; 12912:             valuePush(ctxt,

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheObjectCopy
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 12913:                       xmlXPathCacheObjectCopy(ctxt->context,
; 12914: 			(xmlXPathObjectPtr) op->value4));
; 12915:             return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN25@xmlXPathCo:

; 12916:         case XPATH_OP_SORT:
; 12917:             if (op->ch1 != -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN26@xmlXPathCo

; 12918:                 total +=

	mov	ecx, DWORD PTR _last$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEvalLast
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN26@xmlXPathCo:

; 12919:                     xmlXPathCompOpEvalLast(ctxt, &comp->steps[op->ch1],
; 12920:                                            last);
; 12921: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN27@xmlXPathCo
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCo
$LN27@xmlXPathCo:

; 12922:             if ((ctxt->value != NULL)
; 12923:                 && (ctxt->value->type == XPATH_NODESET)
; 12924:                 && (ctxt->value->nodesetval != NULL)
; 12925: 		&& (ctxt->value->nodesetval->nodeNr > 1))

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN28@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN28@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN28@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 1
	jle	SHORT $LN28@xmlXPathCo

; 12926:                 xmlXPathNodeSetSort(ctxt->value->nodesetval);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetSort
	add	esp, 4
$LN28@xmlXPathCo:

; 12927:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	SHORT $LN1@xmlXPathCo
$LN29@xmlXPathCo:

; 12928:         default:
; 12929:             return (xmlXPathCompOpEval(ctxt, op));

	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
$LN1@xmlXPathCo:

; 12930:     }
; 12931: }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN32@xmlXPathCo:
	DD	$LN5@xmlXPathCo
	DD	$LN6@xmlXPathCo
	DD	$LN15@xmlXPathCo
	DD	$LN16@xmlXPathCo
	DD	$LN21@xmlXPathCo
	DD	$LN24@xmlXPathCo
	DD	$LN25@xmlXPathCo
	DD	$LN29@xmlXPathCo
$LN31@xmlXPathCo:
	DB	0
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	6
_xmlXPathCompOpEvalLast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompOpEvalFilterFirst
_TEXT	SEGMENT
_tmp$1 = -76						; size = 4
_newset$2 = -72						; size = 4
_oldlocset$3 = -68					; size = 4
_newlocset$4 = -64					; size = 4
_tmp$5 = -60						; size = 4
_last$6 = -52						; size = 4
_f$7 = -44						; size = 4
_i$ = -40						; size = 4
_oldpp$ = -36						; size = 4
_oldcs$ = -32						; size = 4
_oldDoc$ = -28						; size = 4
_oldnode$ = -24						; size = 4
_oldset$ = -20						; size = 4
_obj$ = -16						; size = 4
_res$ = -12						; size = 4
_comp$ = -8						; size = 4
_total$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_op$ = 12						; size = 4
_first$ = 16						; size = 4
_xmlXPathCompOpEvalFilterFirst PROC			; COMDAT

; 12937: {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 12938:     int total = 0;

	mov	DWORD PTR _total$[ebp], 0

; 12939:     xmlXPathCompExprPtr comp;
; 12940:     xmlXPathObjectPtr res;
; 12941:     xmlXPathObjectPtr obj;
; 12942:     xmlNodeSetPtr oldset;
; 12943:     xmlNodePtr oldnode;
; 12944:     xmlDocPtr oldDoc;
; 12945:     int oldcs, oldpp;
; 12946:     int i;
; 12947: 
; 12948:     CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN8@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN8@xmlXPathCo:

; 12949:     comp = ctxt->comp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _comp$[ebp], edx

; 12950:     /*
; 12951:     * Optimization for ()[last()] selection i.e. the last elem
; 12952:     */
; 12953:     if ((op->ch1 != -1) && (op->ch2 != -1) &&
; 12954: 	(comp->steps[op->ch1].op == XPATH_OP_SORT) &&

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	$LN9@xmlXPathCo
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+8], -1
	je	$LN9@xmlXPathCo
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 17			; 00000011H
	jne	$LN9@xmlXPathCo
	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+8], 40
	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+ecx], 17			; 00000011H
	jne	$LN9@xmlXPathCo

; 12955: 	(comp->steps[op->ch2].op == XPATH_OP_SORT)) {
; 12956: 	int f = comp->steps[op->ch2].ch1;

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx+4]
	mov	DWORD PTR _f$7[ebp], edx

; 12957: 
; 12958: 	if ((f != -1) &&
; 12959: 	    (comp->steps[f].op == XPATH_OP_FUNCTION) &&
; 12960: 	    (comp->steps[f].value5 == NULL) &&
; 12961: 	    (comp->steps[f].value == 0) &&
; 12962: 	    (comp->steps[f].value4 != NULL) &&

	cmp	DWORD PTR _f$7[ebp], -1
	je	$LN9@xmlXPathCo
	imul	eax, DWORD PTR _f$7[ebp], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 13			; 0000000dH
	jne	$LN9@xmlXPathCo
	imul	eax, DWORD PTR _f$7[ebp], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax+28], 0
	jne	$LN9@xmlXPathCo
	imul	eax, DWORD PTR _f$7[ebp], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax+12], 0
	jne	$LN9@xmlXPathCo
	imul	eax, DWORD PTR _f$7[ebp], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax+24], 0
	je	$LN9@xmlXPathCo
	push	OFFSET ??_C@_04PLGBGIDD@last@
	imul	eax, DWORD PTR _f$7[ebp], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+24]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN9@xmlXPathCo

; 12963: 	    (xmlStrEqual
; 12964: 	    (comp->steps[f].value4, BAD_CAST "last"))) {
; 12965: 	    xmlNodePtr last = NULL;

	mov	DWORD PTR _last$6[ebp], 0

; 12966: 
; 12967: 	    total +=

	lea	ecx, DWORD PTR _last$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEvalLast
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 12968: 		xmlXPathCompOpEvalLast(ctxt,
; 12969: 		    &comp->steps[op->ch1],
; 12970: 		    &last);
; 12971: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN11@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN11@xmlXPathCo:

; 12972: 	    /*
; 12973: 	    * The nodeset should be in document order,
; 12974: 	    * Keep only the last value
; 12975: 	    */
; 12976: 	    if ((ctxt->value != NULL) &&
; 12977: 		(ctxt->value->type == XPATH_NODESET) &&
; 12978: 		(ctxt->value->nodesetval != NULL) &&
; 12979: 		(ctxt->value->nodesetval->nodeTab != NULL) &&

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN12@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN12@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN12@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 1
	jle	SHORT $LN12@xmlXPathCo

; 12980: 		(ctxt->value->nodesetval->nodeNr > 1)) {
; 12981:                 xmlXPathNodeSetKeepLast(ctxt->value->nodesetval);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetKeepLast
	add	esp, 4

; 12982: 		*first = *(ctxt->value->nodesetval->nodeTab);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _first$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
$LN12@xmlXPathCo:

; 12983: 	    }
; 12984: 	    return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN9@xmlXPathCo:

; 12985: 	}
; 12986:     }
; 12987: 
; 12988:     if (op->ch1 != -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN13@xmlXPathCo

; 12989: 	total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN13@xmlXPathCo:

; 12990:     CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN14@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN14@xmlXPathCo:

; 12991:     if (op->ch2 == -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	jne	SHORT $LN15@xmlXPathCo

; 12992: 	return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN15@xmlXPathCo:

; 12993:     if (ctxt->value == NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN16@xmlXPathCo

; 12994: 	return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN16@xmlXPathCo:

; 12995: 
; 12996: #ifdef LIBXML_XPTR_ENABLED
; 12997:     /*
; 12998:     * Hum are we filtering the result of an XPointer expression
; 12999:     */
; 13000:     if (ctxt->value->type == XPATH_LOCATIONSET) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 7
	jne	$LN17@xmlXPathCo

; 13001: 	xmlXPathObjectPtr tmp = NULL;

	mov	DWORD PTR _tmp$5[ebp], 0

; 13002: 	xmlLocationSetPtr newlocset = NULL;

	mov	DWORD PTR _newlocset$4[ebp], 0

; 13003: 	xmlLocationSetPtr oldlocset;
; 13004: 
; 13005: 	/*
; 13006: 	* Extract the old locset, and then evaluate the result of the
; 13007: 	* expression for all the element in the locset. use it to grow
; 13008: 	* up a new locset.
; 13009: 	*/
; 13010: 	CHECK_TYPE0(XPATH_LOCATIONSET);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN19@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 7
	je	SHORT $LN18@xmlXPathCo
$LN19@xmlXPathCo:
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN18@xmlXPathCo:

; 13011: 
; 13012: 	if ((ctxt->value->user == NULL) ||

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN21@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN20@xmlXPathCo
$LN21@xmlXPathCo:

; 13013:             (((xmlLocationSetPtr) ctxt->value->user)->locNr == 0))
; 13014: 	    return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN20@xmlXPathCo:

; 13015: 
; 13016: 	obj = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 13017: 	oldlocset = obj->user;

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _oldlocset$3[ebp], eax

; 13018:         oldnode = ctxt->context->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _oldnode$[ebp], eax

; 13019:         oldcs = ctxt->context->contextSize;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _oldcs$[ebp], eax

; 13020:         oldpp = ctxt->context->proximityPosition;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR _oldpp$[ebp], eax

; 13021: 
; 13022: 	newlocset = xmlXPtrLocationSetCreate(NULL);

	push	0
	call	_xmlXPtrLocationSetCreate
	add	esp, 4
	mov	DWORD PTR _newlocset$4[ebp], eax

; 13023: 
; 13024: 	for (i = 0; i < oldlocset->locNr; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathCo
$LN2@xmlXPathCo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathCo:
	mov	edx, DWORD PTR _oldlocset$3[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	$LN3@xmlXPathCo

; 13025: 	    /*
; 13026: 	    * Run the evaluation with a node list made of a
; 13027: 	    * single item in the nodelocset.
; 13028: 	    */
; 13029: 	    ctxt->context->node = oldlocset->locTab[i]->user;

	mov	ecx, DWORD PTR _oldlocset$3[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+4], ecx

; 13030: 	    ctxt->context->contextSize = oldlocset->locNr;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _oldlocset$3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+68], edx

; 13031: 	    ctxt->context->proximityPosition = i + 1;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+72], eax

; 13032: 	    if (tmp == NULL) {

	cmp	DWORD PTR _tmp$5[ebp], 0
	jne	SHORT $LN22@xmlXPathCo

; 13033: 		tmp = xmlXPathCacheNewNodeSet(ctxt->context,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	mov	DWORD PTR _tmp$5[ebp], eax

; 13034: 		    ctxt->context->node);
; 13035: 	    } else {

	jmp	SHORT $LN23@xmlXPathCo
$LN22@xmlXPathCo:

; 13036: 		if (xmlXPathNodeSetAddUnique(tmp->nodesetval,
; 13037: 		                             ctxt->context->node) < 0) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _tmp$5[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN23@xmlXPathCo

; 13038: 		    ctxt->error = XPATH_MEMORY_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH
$LN23@xmlXPathCo:

; 13039: 		}
; 13040: 	    }
; 13041: 	    valuePush(ctxt, tmp);

	mov	edx, DWORD PTR _tmp$5[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 13042: 	    if (op->ch2 != -1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+8], -1
	je	SHORT $LN25@xmlXPathCo

; 13043: 		total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+8], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN25@xmlXPathCo:

; 13044: 	    if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN26@xmlXPathCo

; 13045:                 xmlXPtrFreeLocationSet(newlocset);

	mov	ecx, DWORD PTR _newlocset$4[ebp]
	push	ecx
	call	_xmlXPtrFreeLocationSet
	add	esp, 4

; 13046:                 goto xptr_error;

	jmp	$xptr_error$53
$LN26@xmlXPathCo:

; 13047: 	    }
; 13048: 	    /*
; 13049: 	    * The result of the evaluation need to be tested to
; 13050: 	    * decided whether the filter succeeded or not
; 13051: 	    */
; 13052: 	    res = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$[ebp], eax

; 13053: 	    if (xmlXPathEvaluatePredicateResult(ctxt, res)) {

	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathEvaluatePredicateResult
	add	esp, 8
	test	eax, eax
	je	SHORT $LN27@xmlXPathCo

; 13054: 		xmlXPtrLocationSetAdd(newlocset,

	mov	edx, DWORD PTR _oldlocset$3[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheObjectCopy
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _newlocset$4[ebp]
	push	edx
	call	_xmlXPtrLocationSetAdd
	add	esp, 8
$LN27@xmlXPathCo:

; 13055: 		    xmlXPathCacheObjectCopy(ctxt->context,
; 13056: 			oldlocset->locTab[i]));
; 13057: 	    }
; 13058: 	    /*
; 13059: 	    * Cleanup
; 13060: 	    */
; 13061: 	    if (res != NULL) {

	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN28@xmlXPathCo

; 13062: 		xmlXPathReleaseObject(ctxt->context, res);

	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN28@xmlXPathCo:

; 13063: 	    }
; 13064: 	    if (ctxt->value == tmp) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _tmp$5[ebp]
	jne	SHORT $LN29@xmlXPathCo

; 13065: 		valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4

; 13066: 		xmlXPathNodeSetClear(tmp->nodesetval, 1);

	push	1
	mov	eax, DWORD PTR _tmp$5[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetClear
	add	esp, 8

; 13067: 		/*
; 13068: 		* REVISIT TODO: Don't create a temporary nodeset
; 13069: 		* for everly iteration.
; 13070: 		*/
; 13071: 		/* OLD: xmlXPathFreeObject(res); */
; 13072: 	    } else

	jmp	SHORT $LN30@xmlXPathCo
$LN29@xmlXPathCo:

; 13073: 		tmp = NULL;

	mov	DWORD PTR _tmp$5[ebp], 0
$LN30@xmlXPathCo:

; 13074: 	    /*
; 13075: 	    * Only put the first node in the result, then leave.
; 13076: 	    */
; 13077: 	    if (newlocset->locNr > 0) {

	mov	edx, DWORD PTR _newlocset$4[ebp]
	cmp	DWORD PTR [edx], 0
	jle	SHORT $LN31@xmlXPathCo

; 13078: 		*first = (xmlNodePtr) oldlocset->locTab[i]->user;

	mov	eax, DWORD PTR _oldlocset$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _first$[ebp]
	mov	edx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx], edx

; 13079: 		break;

	jmp	SHORT $LN3@xmlXPathCo
$LN31@xmlXPathCo:

; 13080: 	    }
; 13081: 	}

	jmp	$LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 13082: 	if (tmp != NULL) {

	cmp	DWORD PTR _tmp$5[ebp], 0
	je	SHORT $LN32@xmlXPathCo

; 13083: 	    xmlXPathReleaseObject(ctxt->context, tmp);

	mov	eax, DWORD PTR _tmp$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN32@xmlXPathCo:

; 13084: 	}
; 13085: 	/*
; 13086: 	* The result is used as the new evaluation locset.
; 13087: 	*/
; 13088: 	valuePush(ctxt, xmlXPtrWrapLocationSet(newlocset));

	mov	eax, DWORD PTR _newlocset$4[ebp]
	push	eax
	call	_xmlXPtrWrapLocationSet
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8
$xptr_error$53:

; 13089: xptr_error:
; 13090: 	xmlXPathReleaseObject(ctxt->context, obj);

	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13091: 	ctxt->context->node = oldnode;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _oldnode$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 13092: 	ctxt->context->contextSize = oldcs;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _oldcs$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 13093: 	ctxt->context->proximityPosition = oldpp;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _oldpp$[ebp]
	mov	DWORD PTR [eax+72], ecx

; 13094: 	return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN17@xmlXPathCo:

; 13095:     }
; 13096: #endif /* LIBXML_XPTR_ENABLED */
; 13097: 
; 13098:     /*
; 13099:     * Extract the old set, and then evaluate the result of the
; 13100:     * expression for all the element in the set. use it to grow
; 13101:     * up a new set.
; 13102:     */
; 13103:     CHECK_TYPE0(XPATH_NODESET);

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN34@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN33@xmlXPathCo
$LN34@xmlXPathCo:
	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN33@xmlXPathCo:

; 13104: 
; 13105:     if ((ctxt->value->nodesetval != NULL) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+4], 0
	je	$LN35@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 0
	je	$LN35@xmlXPathCo

; 13106:         (ctxt->value->nodesetval->nodeNr != 0)) {
; 13107: 	xmlNodeSetPtr newset;
; 13108: 	xmlXPathObjectPtr tmp = NULL;

	mov	DWORD PTR _tmp$1[ebp], 0

; 13109: 
; 13110:         obj = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 13111:         oldset = obj->nodesetval;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _oldset$[ebp], ecx

; 13112:         oldnode = ctxt->context->node;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _oldnode$[ebp], ecx

; 13113:         oldDoc = ctxt->context->doc;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _oldDoc$[ebp], ecx

; 13114:         oldcs = ctxt->context->contextSize;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _oldcs$[ebp], ecx

; 13115:         oldpp = ctxt->context->proximityPosition;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _oldpp$[ebp], ecx

; 13116: 
; 13117: 	/*
; 13118: 	* Initialize the new set.
; 13119: 	* Also set the xpath document in case things like
; 13120: 	* key() evaluation are attempted on the predicate
; 13121: 	*/
; 13122: 	newset = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _newset$2[ebp], eax

; 13123:         /* XXX what if xmlXPathNodeSetCreate returned NULL? */
; 13124: 
; 13125: 	for (i = 0; i < oldset->nodeNr; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@xmlXPathCo
$LN5@xmlXPathCo:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@xmlXPathCo:
	mov	eax, DWORD PTR _oldset$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN6@xmlXPathCo

; 13126: 	    /*
; 13127: 	    * Run the evaluation with a node list made of
; 13128: 	    * a single item in the nodeset.
; 13129: 	    */
; 13130: 	    ctxt->context->node = oldset->nodeTab[i];

	mov	edx, DWORD PTR _oldset$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+4], eax

; 13131: 	    if ((oldset->nodeTab[i]->type != XML_NAMESPACE_DECL) &&

	mov	ecx, DWORD PTR _oldset$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	je	SHORT $LN36@xmlXPathCo
	mov	edx, DWORD PTR _oldset$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN36@xmlXPathCo

; 13132: 		(oldset->nodeTab[i]->doc != NULL))
; 13133: 		ctxt->context->doc = oldset->nodeTab[i]->doc;

	mov	eax, DWORD PTR _oldset$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR [edx], eax
$LN36@xmlXPathCo:

; 13134: 	    if (tmp == NULL) {

	cmp	DWORD PTR _tmp$1[ebp], 0
	jne	SHORT $LN37@xmlXPathCo

; 13135: 		tmp = xmlXPathCacheNewNodeSet(ctxt->context,

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	mov	DWORD PTR _tmp$1[ebp], eax

; 13136: 		    ctxt->context->node);
; 13137: 	    } else {

	jmp	SHORT $LN38@xmlXPathCo
$LN37@xmlXPathCo:

; 13138: 		if (xmlXPathNodeSetAddUnique(tmp->nodesetval,
; 13139: 		                             ctxt->context->node) < 0) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _tmp$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN38@xmlXPathCo

; 13140: 		    ctxt->error = XPATH_MEMORY_ERROR;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN38@xmlXPathCo:

; 13141: 		}
; 13142: 	    }
; 13143: 	    valuePush(ctxt, tmp);

	mov	eax, DWORD PTR _tmp$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 13144: 	    ctxt->context->contextSize = oldset->nodeNr;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _oldset$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+68], edx

; 13145: 	    ctxt->context->proximityPosition = i + 1;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+72], eax

; 13146: 	    if (op->ch2 != -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	SHORT $LN40@xmlXPathCo

; 13147: 		total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN40@xmlXPathCo:

; 13148: 	    if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN41@xmlXPathCo

; 13149: 		xmlXPathFreeNodeSet(newset);

	mov	eax, DWORD PTR _newset$2[ebp]
	push	eax
	call	_xmlXPathFreeNodeSet
	add	esp, 4

; 13150:                 goto error;

	jmp	$error$54
$LN41@xmlXPathCo:

; 13151: 	    }
; 13152: 	    /*
; 13153: 	    * The result of the evaluation needs to be tested to
; 13154: 	    * decide whether the filter succeeded or not
; 13155: 	    */
; 13156: 	    res = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$[ebp], eax

; 13157: 	    if (xmlXPathEvaluatePredicateResult(ctxt, res)) {

	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathEvaluatePredicateResult
	add	esp, 8
	test	eax, eax
	je	SHORT $LN42@xmlXPathCo

; 13158: 		if (xmlXPathNodeSetAdd(newset, oldset->nodeTab[i]) < 0)

	mov	ecx, DWORD PTR _oldset$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _newset$2[ebp]
	push	edx
	call	_xmlXPathNodeSetAdd
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN42@xmlXPathCo

; 13159: 		    ctxt->error = XPATH_MEMORY_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN42@xmlXPathCo:

; 13160: 	    }
; 13161: 	    /*
; 13162: 	    * Cleanup
; 13163: 	    */
; 13164: 	    if (res != NULL) {

	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN44@xmlXPathCo

; 13165: 		xmlXPathReleaseObject(ctxt->context, res);

	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN44@xmlXPathCo:

; 13166: 	    }
; 13167: 	    if (ctxt->value == tmp) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR _tmp$1[ebp]
	jne	SHORT $LN45@xmlXPathCo

; 13168: 		valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4

; 13169: 		/*
; 13170: 		* Don't free the temporary nodeset
; 13171: 		* in order to avoid massive recreation inside this
; 13172: 		* loop.
; 13173: 		*/
; 13174: 		xmlXPathNodeSetClear(tmp->nodesetval, 1);

	push	1
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetClear
	add	esp, 8

; 13175: 	    } else

	jmp	SHORT $LN46@xmlXPathCo
$LN45@xmlXPathCo:

; 13176: 		tmp = NULL;

	mov	DWORD PTR _tmp$1[ebp], 0
$LN46@xmlXPathCo:

; 13177: 	    /*
; 13178: 	    * Only put the first node in the result, then leave.
; 13179: 	    */
; 13180: 	    if (newset->nodeNr > 0) {

	mov	eax, DWORD PTR _newset$2[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN47@xmlXPathCo

; 13181: 		*first = *(newset->nodeTab);

	mov	ecx, DWORD PTR _newset$2[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	DWORD PTR [eax], ecx

; 13182: 		break;

	jmp	SHORT $LN6@xmlXPathCo
$LN47@xmlXPathCo:

; 13183: 	    }
; 13184: 	}

	jmp	$LN5@xmlXPathCo
$LN6@xmlXPathCo:

; 13185: 	if (tmp != NULL) {

	cmp	DWORD PTR _tmp$1[ebp], 0
	je	SHORT $LN48@xmlXPathCo

; 13186: 	    xmlXPathReleaseObject(ctxt->context, tmp);

	mov	edx, DWORD PTR _tmp$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN48@xmlXPathCo:

; 13187: 	}
; 13188: 	/*
; 13189: 	* The result is used as the new evaluation set.
; 13190: 	*/
; 13191: 	valuePush(ctxt, xmlXPathCacheWrapNodeSet(ctxt->context, newset));

	mov	edx, DWORD PTR _newset$2[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheWrapNodeSet
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
$error$54:

; 13192: error:
; 13193: 	xmlXPathReleaseObject(ctxt->context, obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13194: 	ctxt->context->node = oldnode;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _oldnode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 13195: 	ctxt->context->doc = oldDoc;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _oldDoc$[ebp]
	mov	DWORD PTR [ecx], edx

; 13196: 	ctxt->context->contextSize = oldcs;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _oldcs$[ebp]
	mov	DWORD PTR [ecx+68], edx

; 13197: 	ctxt->context->proximityPosition = oldpp;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _oldpp$[ebp]
	mov	DWORD PTR [ecx+72], edx
$LN35@xmlXPathCo:

; 13198:     }
; 13199:     return(total);

	mov	eax, DWORD PTR _total$[ebp]
$LN1@xmlXPathCo:

; 13200: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN52@xmlXPathCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN52@xmlXPathCo:
	DD	1
	DD	$LN51@xmlXPathCo
$LN51@xmlXPathCo:
	DD	-52					; ffffffccH
	DD	4
	DD	$LN50@xmlXPathCo
$LN50@xmlXPathCo:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
_xmlXPathCompOpEvalFilterFirst ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeCollectAndTest
_TEXT	SEGMENT
tv655 = -152						; size = 4
tv449 = -148						; size = 4
tv209 = -144						; size = 4
tv200 = -140						; size = 4
tv161 = -136						; size = 4
tv88 = -132						; size = 4
_ns$1 = -128						; size = 4
_attr$2 = -124						; size = 4
_xpctxt$ = -120						; size = 4
_oldContextNode$ = -116					; size = 4
_mergeAndClear$ = -112					; size = 4
_addNode$ = -108					; size = 4
_next$ = -104						; size = 4
_breakOnFirstHit$ = -100				; size = 4
_newSize$ = -96						; size = 4
_size$ = -92						; size = 4
_pos$ = -88						; size = 4
_hasAxisRange$ = -84					; size = 4
_hasPredicateRange$ = -80				; size = 4
_maxPos$ = -72						; size = 4
_predOp$ = -64						; size = 4
_cur$ = -60						; size = 4
_seq$ = -56						; size = 4
_outSeq$ = -52						; size = 4
_contextNode$ = -48					; size = 4
_contextIdx$ = -44					; size = 4
_contextSeq$ = -40					; size = 4
_obj$ = -36						; size = 4
_hasNsNodes$ = -32					; size = 4
_total$ = -28						; size = 4
_URI$ = -24						; size = 4
_name$ = -20						; size = 4
_prefix$ = -16						; size = 4
_type$ = -12						; size = 4
_test$ = -8						; size = 4
_axis$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_op$ = 12						; size = 4
_first$ = 16						; size = 4
_last$ = 20						; size = 4
_toBool$ = 24						; size = 4
_xmlXPathNodeCollectAndTest PROC			; COMDAT

; 12060: {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-152]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 12061: 
; 12062: #define XP_TEST_HIT \
; 12063:     if (hasAxisRange != 0) { \
; 12064: 	if (++pos == maxPos) { \
; 12065: 	    if (addNode(seq, cur) < 0) \
; 12066: 	        ctxt->error = XPATH_MEMORY_ERROR; \
; 12067: 	    goto axis_range_end; } \
; 12068:     } else { \
; 12069: 	if (addNode(seq, cur) < 0) \
; 12070: 	    ctxt->error = XPATH_MEMORY_ERROR; \
; 12071: 	if (breakOnFirstHit) goto first_hit; }
; 12072: 
; 12073: #define XP_TEST_HIT_NS \
; 12074:     if (hasAxisRange != 0) { \
; 12075: 	if (++pos == maxPos) { \
; 12076: 	    hasNsNodes = 1; \
; 12077: 	    if (xmlXPathNodeSetAddNs(seq, xpctxt->node, (xmlNsPtr) cur) < 0) \
; 12078: 	        ctxt->error = XPATH_MEMORY_ERROR; \
; 12079: 	goto axis_range_end; } \
; 12080:     } else { \
; 12081: 	hasNsNodes = 1; \
; 12082: 	if (xmlXPathNodeSetAddNs(seq, xpctxt->node, (xmlNsPtr) cur) < 0) \
; 12083: 	    ctxt->error = XPATH_MEMORY_ERROR; \
; 12084: 	if (breakOnFirstHit) goto first_hit; }
; 12085: 
; 12086:     xmlXPathAxisVal axis = (xmlXPathAxisVal) op->value;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _axis$[ebp], ecx

; 12087:     xmlXPathTestVal test = (xmlXPathTestVal) op->value2;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _test$[ebp], eax

; 12088:     xmlXPathTypeVal type = (xmlXPathTypeVal) op->value3;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _type$[ebp], edx

; 12089:     const xmlChar *prefix = op->value4;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _prefix$[ebp], ecx

; 12090:     const xmlChar *name = op->value5;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _name$[ebp], eax

; 12091:     const xmlChar *URI = NULL;

	mov	DWORD PTR _URI$[ebp], 0

; 12092: 
; 12093: #ifdef DEBUG_STEP
; 12094:     int nbMatches = 0, prevMatches = 0;
; 12095: #endif
; 12096:     int total = 0, hasNsNodes = 0;

	mov	DWORD PTR _total$[ebp], 0
	mov	DWORD PTR _hasNsNodes$[ebp], 0

; 12097:     /* The popped object holding the context nodes */
; 12098:     xmlXPathObjectPtr obj;
; 12099:     /* The set of context nodes for the node tests */
; 12100:     xmlNodeSetPtr contextSeq;
; 12101:     int contextIdx;
; 12102:     xmlNodePtr contextNode;
; 12103:     /* The final resulting node set wrt to all context nodes */
; 12104:     xmlNodeSetPtr outSeq;
; 12105:     /*
; 12106:     * The temporary resulting node set wrt 1 context node.
; 12107:     * Used to feed predicate evaluation.
; 12108:     */
; 12109:     xmlNodeSetPtr seq;
; 12110:     xmlNodePtr cur;
; 12111:     /* First predicate operator */
; 12112:     xmlXPathStepOpPtr predOp;
; 12113:     int maxPos; /* The requested position() (when a "[n]" predicate) */
; 12114:     int hasPredicateRange, hasAxisRange, pos, size, newSize;
; 12115:     int breakOnFirstHit;
; 12116: 
; 12117:     xmlXPathTraversalFunction next = NULL;

	mov	DWORD PTR _next$[ebp], 0

; 12118:     int (*addNode) (xmlNodeSetPtr, xmlNodePtr);
; 12119:     xmlXPathNodeSetMergeFunction mergeAndClear;
; 12120:     xmlNodePtr oldContextNode;
; 12121:     xmlXPathContextPtr xpctxt = ctxt->context;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _xpctxt$[ebp], edx

; 12122: 
; 12123: 
; 12124:     CHECK_TYPE0(XPATH_NODESET);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN16@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN15@xmlXPathNo
$LN16@xmlXPathNo:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN15@xmlXPathNo:

; 12125:     obj = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 12126:     /*
; 12127:     * Setup namespaces.
; 12128:     */
; 12129:     if (prefix != NULL) {

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN17@xmlXPathNo

; 12130:         URI = xmlXPathNsLookup(xpctxt, prefix);

	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _xpctxt$[ebp]
	push	eax
	call	_xmlXPathNsLookup
	add	esp, 8
	mov	DWORD PTR _URI$[ebp], eax

; 12131:         if (URI == NULL) {

	cmp	DWORD PTR _URI$[ebp], 0
	jne	SHORT $LN17@xmlXPathNo

; 12132: 	    xmlXPathReleaseObject(xpctxt, obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpctxt$[ebp]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12133:             XP_ERROR0(XPATH_UNDEF_PREFIX_ERROR);

	push	19					; 00000013H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN17@xmlXPathNo:

; 12134: 	}
; 12135:     }
; 12136:     /*
; 12137:     * Setup axis.
; 12138:     *
; 12139:     * MAYBE FUTURE TODO: merging optimizations:
; 12140:     * - If the nodes to be traversed wrt to the initial nodes and
; 12141:     *   the current axis cannot overlap, then we could avoid searching
; 12142:     *   for duplicates during the merge.
; 12143:     *   But the question is how/when to evaluate if they cannot overlap.
; 12144:     *   Example: if we know that for two initial nodes, the one is
; 12145:     *   not in the ancestor-or-self axis of the other, then we could safely
; 12146:     *   avoid a duplicate-aware merge, if the axis to be traversed is e.g.
; 12147:     *   the descendant-or-self axis.
; 12148:     */
; 12149:     mergeAndClear = xmlXPathNodeSetMergeAndClear;

	mov	DWORD PTR _mergeAndClear$[ebp], OFFSET _xmlXPathNodeSetMergeAndClear

; 12150:     switch (axis) {

	mov	ecx, DWORD PTR _axis$[ebp]
	mov	DWORD PTR tv88[ebp], ecx
	mov	edx, DWORD PTR tv88[ebp]
	sub	edx, 1
	mov	DWORD PTR tv88[ebp], edx
	cmp	DWORD PTR tv88[ebp], 12			; 0000000cH
	ja	$LN2@xmlXPathNo
	mov	eax, DWORD PTR tv88[ebp]
	jmp	DWORD PTR $LN252@xmlXPathNo[eax*4]
$LN19@xmlXPathNo:

; 12151:         case AXIS_ANCESTOR:
; 12152:             first = NULL;

	mov	DWORD PTR _first$[ebp], 0

; 12153:             next = xmlXPathNextAncestor;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextAncestor

; 12154:             break;

	jmp	$LN2@xmlXPathNo
$LN20@xmlXPathNo:

; 12155:         case AXIS_ANCESTOR_OR_SELF:
; 12156:             first = NULL;

	mov	DWORD PTR _first$[ebp], 0

; 12157:             next = xmlXPathNextAncestorOrSelf;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextAncestorOrSelf

; 12158:             break;

	jmp	$LN2@xmlXPathNo
$LN21@xmlXPathNo:

; 12159:         case AXIS_ATTRIBUTE:
; 12160:             first = NULL;

	mov	DWORD PTR _first$[ebp], 0

; 12161: 	    last = NULL;

	mov	DWORD PTR _last$[ebp], 0

; 12162:             next = xmlXPathNextAttribute;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextAttribute

; 12163: 	    mergeAndClear = xmlXPathNodeSetMergeAndClearNoDupls;

	mov	DWORD PTR _mergeAndClear$[ebp], OFFSET _xmlXPathNodeSetMergeAndClearNoDupls

; 12164:             break;

	jmp	$LN2@xmlXPathNo
$LN22@xmlXPathNo:

; 12165:         case AXIS_CHILD:
; 12166: 	    last = NULL;

	mov	DWORD PTR _last$[ebp], 0

; 12167: 	    if (((test == NODE_TEST_NAME) || (test == NODE_TEST_ALL)) &&

	cmp	DWORD PTR _test$[ebp], 5
	je	SHORT $LN25@xmlXPathNo
	cmp	DWORD PTR _test$[ebp], 3
	jne	SHORT $LN23@xmlXPathNo
$LN25@xmlXPathNo:
	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN23@xmlXPathNo

; 12168: 		(type == NODE_TYPE_NODE))
; 12169: 	    {
; 12170: 		/*
; 12171: 		* Optimization if an element node type is 'element'.
; 12172: 		*/
; 12173: 		next = xmlXPathNextChildElement;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextChildElement

; 12174: 	    } else

	jmp	SHORT $LN24@xmlXPathNo
$LN23@xmlXPathNo:

; 12175: 		next = xmlXPathNextChild;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextChild
$LN24@xmlXPathNo:

; 12176: 	    mergeAndClear = xmlXPathNodeSetMergeAndClearNoDupls;

	mov	DWORD PTR _mergeAndClear$[ebp], OFFSET _xmlXPathNodeSetMergeAndClearNoDupls

; 12177:             break;

	jmp	$LN2@xmlXPathNo
$LN26@xmlXPathNo:

; 12178:         case AXIS_DESCENDANT:
; 12179: 	    last = NULL;

	mov	DWORD PTR _last$[ebp], 0

; 12180:             next = xmlXPathNextDescendant;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextDescendant

; 12181:             break;

	jmp	$LN2@xmlXPathNo
$LN27@xmlXPathNo:

; 12182:         case AXIS_DESCENDANT_OR_SELF:
; 12183: 	    last = NULL;

	mov	DWORD PTR _last$[ebp], 0

; 12184:             next = xmlXPathNextDescendantOrSelf;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextDescendantOrSelf

; 12185:             break;

	jmp	$LN2@xmlXPathNo
$LN28@xmlXPathNo:

; 12186:         case AXIS_FOLLOWING:
; 12187: 	    last = NULL;

	mov	DWORD PTR _last$[ebp], 0

; 12188:             next = xmlXPathNextFollowing;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextFollowing

; 12189:             break;

	jmp	SHORT $LN2@xmlXPathNo
$LN29@xmlXPathNo:

; 12190:         case AXIS_FOLLOWING_SIBLING:
; 12191: 	    last = NULL;

	mov	DWORD PTR _last$[ebp], 0

; 12192:             next = xmlXPathNextFollowingSibling;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextFollowingSibling

; 12193:             break;

	jmp	SHORT $LN2@xmlXPathNo
$LN30@xmlXPathNo:

; 12194:         case AXIS_NAMESPACE:
; 12195:             first = NULL;

	mov	DWORD PTR _first$[ebp], 0

; 12196: 	    last = NULL;

	mov	DWORD PTR _last$[ebp], 0

; 12197:             next = (xmlXPathTraversalFunction) xmlXPathNextNamespace;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextNamespace

; 12198: 	    mergeAndClear = xmlXPathNodeSetMergeAndClearNoDupls;

	mov	DWORD PTR _mergeAndClear$[ebp], OFFSET _xmlXPathNodeSetMergeAndClearNoDupls

; 12199:             break;

	jmp	SHORT $LN2@xmlXPathNo
$LN31@xmlXPathNo:

; 12200:         case AXIS_PARENT:
; 12201:             first = NULL;

	mov	DWORD PTR _first$[ebp], 0

; 12202:             next = xmlXPathNextParent;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextParent

; 12203:             break;

	jmp	SHORT $LN2@xmlXPathNo
$LN32@xmlXPathNo:

; 12204:         case AXIS_PRECEDING:
; 12205:             first = NULL;

	mov	DWORD PTR _first$[ebp], 0

; 12206:             next = xmlXPathNextPrecedingInternal;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextPrecedingInternal

; 12207:             break;

	jmp	SHORT $LN2@xmlXPathNo
$LN33@xmlXPathNo:

; 12208:         case AXIS_PRECEDING_SIBLING:
; 12209:             first = NULL;

	mov	DWORD PTR _first$[ebp], 0

; 12210:             next = xmlXPathNextPrecedingSibling;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextPrecedingSibling

; 12211:             break;

	jmp	SHORT $LN2@xmlXPathNo
$LN34@xmlXPathNo:

; 12212:         case AXIS_SELF:
; 12213:             first = NULL;

	mov	DWORD PTR _first$[ebp], 0

; 12214: 	    last = NULL;

	mov	DWORD PTR _last$[ebp], 0

; 12215:             next = xmlXPathNextSelf;

	mov	DWORD PTR _next$[ebp], OFFSET _xmlXPathNextSelf

; 12216: 	    mergeAndClear = xmlXPathNodeSetMergeAndClearNoDupls;

	mov	DWORD PTR _mergeAndClear$[ebp], OFFSET _xmlXPathNodeSetMergeAndClearNoDupls
$LN2@xmlXPathNo:

; 12217:             break;
; 12218:     }
; 12219: 
; 12220: #ifdef DEBUG_STEP
; 12221:     xmlXPathDebugDumpStepAxis(op,
; 12222: 	(obj->nodesetval != NULL) ? obj->nodesetval->nodeNr : 0);
; 12223: #endif
; 12224: 
; 12225:     if (next == NULL) {

	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN35@xmlXPathNo

; 12226: 	xmlXPathReleaseObject(xpctxt, obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpctxt$[ebp]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12227:         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN35@xmlXPathNo:

; 12228:     }
; 12229:     contextSeq = obj->nodesetval;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _contextSeq$[ebp], ecx

; 12230:     if ((contextSeq == NULL) || (contextSeq->nodeNr <= 0)) {

	cmp	DWORD PTR _contextSeq$[ebp], 0
	je	SHORT $LN37@xmlXPathNo
	mov	edx, DWORD PTR _contextSeq$[ebp]
	cmp	DWORD PTR [edx], 0
	jg	SHORT $LN36@xmlXPathNo
$LN37@xmlXPathNo:

; 12231: 	xmlXPathReleaseObject(xpctxt, obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xpctxt$[ebp]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12232:         valuePush(ctxt, xmlXPathCacheWrapNodeSet(xpctxt, NULL));

	push	0
	mov	edx, DWORD PTR _xpctxt$[ebp]
	push	edx
	call	_xmlXPathCacheWrapNodeSet
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 12233:         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN36@xmlXPathNo:

; 12234:     }
; 12235:     /*
; 12236:     * Predicate optimization ---------------------------------------------
; 12237:     * If this step has a last predicate, which contains a position(),
; 12238:     * then we'll optimize (although not exactly "position()", but only
; 12239:     * the  short-hand form, i.e., "[n]".
; 12240:     *
; 12241:     * Example - expression "/foo[parent::bar][1]":
; 12242:     *
; 12243:     * COLLECT 'child' 'name' 'node' foo    -- op (we are here)
; 12244:     *   ROOT                               -- op->ch1
; 12245:     *   PREDICATE                          -- op->ch2 (predOp)
; 12246:     *     PREDICATE                          -- predOp->ch1 = [parent::bar]
; 12247:     *       SORT
; 12248:     *         COLLECT  'parent' 'name' 'node' bar
; 12249:     *           NODE
; 12250:     *     ELEM Object is a number : 1        -- predOp->ch2 = [1]
; 12251:     *
; 12252:     */
; 12253:     maxPos = 0;

	mov	DWORD PTR _maxPos$[ebp], 0

; 12254:     predOp = NULL;

	mov	DWORD PTR _predOp$[ebp], 0

; 12255:     hasPredicateRange = 0;

	mov	DWORD PTR _hasPredicateRange$[ebp], 0

; 12256:     hasAxisRange = 0;

	mov	DWORD PTR _hasAxisRange$[ebp], 0

; 12257:     if (op->ch2 != -1) {

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+8], -1
	je	SHORT $LN38@xmlXPathNo

; 12258: 	/*
; 12259: 	* There's at least one predicate. 16 == XPATH_OP_PREDICATE
; 12260: 	*/
; 12261: 	predOp = &ctxt->comp->steps[op->ch2];

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _predOp$[ebp], edx

; 12262: 	if (xmlXPathIsPositionalPredicate(ctxt, predOp, &maxPos)) {

	lea	eax, DWORD PTR _maxPos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _predOp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathIsPositionalPredicate
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN38@xmlXPathNo

; 12263: 	    if (predOp->ch1 != -1) {

	mov	eax, DWORD PTR _predOp$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN40@xmlXPathNo

; 12264: 		/*
; 12265: 		* Use the next inner predicate operator.
; 12266: 		*/
; 12267: 		predOp = &ctxt->comp->steps[predOp->ch1];

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _predOp$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _predOp$[ebp], ecx

; 12268: 		hasPredicateRange = 1;

	mov	DWORD PTR _hasPredicateRange$[ebp], 1

; 12269: 	    } else {

	jmp	SHORT $LN38@xmlXPathNo
$LN40@xmlXPathNo:

; 12270: 		/*
; 12271: 		* There's no other predicate than the [n] predicate.
; 12272: 		*/
; 12273: 		predOp = NULL;

	mov	DWORD PTR _predOp$[ebp], 0

; 12274: 		hasAxisRange = 1;

	mov	DWORD PTR _hasAxisRange$[ebp], 1
$LN38@xmlXPathNo:

; 12275: 	    }
; 12276: 	}
; 12277:     }
; 12278:     breakOnFirstHit = ((toBool) && (predOp == NULL)) ? 1 : 0;

	cmp	DWORD PTR _toBool$[ebp], 0
	je	SHORT $LN241@xmlXPathNo
	cmp	DWORD PTR _predOp$[ebp], 0
	jne	SHORT $LN241@xmlXPathNo
	mov	DWORD PTR tv161[ebp], 1
	jmp	SHORT $LN242@xmlXPathNo
$LN241@xmlXPathNo:
	mov	DWORD PTR tv161[ebp], 0
$LN242@xmlXPathNo:
	mov	edx, DWORD PTR tv161[ebp]
	mov	DWORD PTR _breakOnFirstHit$[ebp], edx

; 12279:     /*
; 12280:     * Axis traversal -----------------------------------------------------
; 12281:     */
; 12282:     /*
; 12283:      * 2.3 Node Tests
; 12284:      *  - For the attribute axis, the principal node type is attribute.
; 12285:      *  - For the namespace axis, the principal node type is namespace.
; 12286:      *  - For other axes, the principal node type is element.
; 12287:      *
; 12288:      * A node test * is true for any node of the
; 12289:      * principal node type. For example, child::* will
; 12290:      * select all element children of the context node
; 12291:      */
; 12292:     oldContextNode = xpctxt->node;

	mov	eax, DWORD PTR _xpctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _oldContextNode$[ebp], ecx

; 12293:     addNode = xmlXPathNodeSetAddUnique;

	mov	DWORD PTR _addNode$[ebp], OFFSET _xmlXPathNodeSetAddUnique

; 12294:     outSeq = NULL;

	mov	DWORD PTR _outSeq$[ebp], 0

; 12295:     seq = NULL;

	mov	DWORD PTR _seq$[ebp], 0

; 12296:     contextNode = NULL;

	mov	DWORD PTR _contextNode$[ebp], 0

; 12297:     contextIdx = 0;

	mov	DWORD PTR _contextIdx$[ebp], 0
$LN4@xmlXPathNo:

; 12298: 
; 12299: 
; 12300:     while (((contextIdx < contextSeq->nodeNr) || (contextNode != NULL)) &&

	mov	edx, DWORD PTR _contextSeq$[ebp]
	mov	eax, DWORD PTR _contextIdx$[ebp]
	cmp	eax, DWORD PTR [edx]
	jl	SHORT $LN42@xmlXPathNo
	cmp	DWORD PTR _contextNode$[ebp], 0
	je	$error$255
$LN42@xmlXPathNo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	$error$255

; 12301:            (ctxt->error == XPATH_EXPRESSION_OK)) {
; 12302: 	xpctxt->node = contextSeq->nodeTab[contextIdx++];

	mov	edx, DWORD PTR _contextSeq$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _xpctxt$[ebp]
	mov	edx, DWORD PTR _contextIdx$[ebp]
	mov	eax, DWORD PTR [eax+edx*4]
	mov	DWORD PTR [ecx+4], eax
	mov	ecx, DWORD PTR _contextIdx$[ebp]
	add	ecx, 1
	mov	DWORD PTR _contextIdx$[ebp], ecx

; 12303: 
; 12304: 	if (seq == NULL) {

	cmp	DWORD PTR _seq$[ebp], 0
	jne	SHORT $LN43@xmlXPathNo

; 12305: 	    seq = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _seq$[ebp], eax

; 12306: 	    if (seq == NULL) {

	cmp	DWORD PTR _seq$[ebp], 0
	jne	SHORT $LN43@xmlXPathNo

; 12307: 		total = 0;

	mov	DWORD PTR _total$[ebp], 0

; 12308: 		goto error;

	jmp	$error$255
$LN43@xmlXPathNo:

; 12309: 	    }
; 12310: 	}
; 12311: 	/*
; 12312: 	* Traverse the axis and test the nodes.
; 12313: 	*/
; 12314: 	pos = 0;

	mov	DWORD PTR _pos$[ebp], 0

; 12315: 	cur = NULL;

	mov	DWORD PTR _cur$[ebp], 0

; 12316: 	hasNsNodes = 0;

	mov	DWORD PTR _hasNsNodes$[ebp], 0
$LN8@xmlXPathNo:

; 12317:         do {
; 12318:             cur = next(ctxt, cur);

	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	DWORD PTR _next$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur$[ebp], eax

; 12319:             if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN45@xmlXPathNo

; 12320:                 break;

	jmp	$LN7@xmlXPathNo
$LN45@xmlXPathNo:

; 12321: 
; 12322: 	    /*
; 12323: 	    * QUESTION TODO: What does the "first" and "last" stuff do?
; 12324: 	    */
; 12325:             if ((first != NULL) && (*first != NULL)) {

	cmp	DWORD PTR _first$[ebp], 0
	je	SHORT $LN46@xmlXPathNo
	mov	ecx, DWORD PTR _first$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN46@xmlXPathNo

; 12326: 		if (*first == cur)

	mov	edx, DWORD PTR _first$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR _cur$[ebp]
	jne	SHORT $LN47@xmlXPathNo

; 12327: 		    break;

	jmp	$LN7@xmlXPathNo
$LN47@xmlXPathNo:

; 12328: 		if (((total % 256) == 0) &&

	mov	ecx, DWORD PTR _total$[ebp]
	and	ecx, -2147483393			; 800000ffH
	jns	SHORT $LN250@xmlXPathNo
	dec	ecx
	or	ecx, -256				; ffffff00H
	inc	ecx
$LN250@xmlXPathNo:
	test	ecx, ecx
	jne	SHORT $LN46@xmlXPathNo
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlXPathCmpNodesExt
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN46@xmlXPathNo

; 12329: #ifdef XP_OPTIMIZED_NON_ELEM_COMPARISON
; 12330: 		    (xmlXPathCmpNodesExt(*first, cur) >= 0))
; 12331: #else
; 12332: 		    (xmlXPathCmpNodes(*first, cur) >= 0))
; 12333: #endif
; 12334: 		{
; 12335: 		    break;

	jmp	$LN7@xmlXPathNo
$LN46@xmlXPathNo:

; 12336: 		}
; 12337: 	    }
; 12338: 	    if ((last != NULL) && (*last != NULL)) {

	cmp	DWORD PTR _last$[ebp], 0
	je	SHORT $LN49@xmlXPathNo
	mov	edx, DWORD PTR _last$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN49@xmlXPathNo

; 12339: 		if (*last == cur)

	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _cur$[ebp]
	jne	SHORT $LN50@xmlXPathNo

; 12340: 		    break;

	jmp	$LN7@xmlXPathNo
$LN50@xmlXPathNo:

; 12341: 		if (((total % 256) == 0) &&

	mov	edx, DWORD PTR _total$[ebp]
	and	edx, -2147483393			; 800000ffH
	jns	SHORT $LN251@xmlXPathNo
	dec	edx
	or	edx, -256				; ffffff00H
	inc	edx
$LN251@xmlXPathNo:
	test	edx, edx
	jne	SHORT $LN49@xmlXPathNo
	mov	eax, DWORD PTR _last$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlXPathCmpNodesExt
	add	esp, 8
	test	eax, eax
	jl	SHORT $LN49@xmlXPathNo

; 12342: #ifdef XP_OPTIMIZED_NON_ELEM_COMPARISON
; 12343: 		    (xmlXPathCmpNodesExt(cur, *last) >= 0))
; 12344: #else
; 12345: 		    (xmlXPathCmpNodes(cur, *last) >= 0))
; 12346: #endif
; 12347: 		{
; 12348: 		    break;

	jmp	$LN7@xmlXPathNo
$LN49@xmlXPathNo:

; 12349: 		}
; 12350: 	    }
; 12351: 
; 12352:             total++;

	mov	eax, DWORD PTR _total$[ebp]
	add	eax, 1
	mov	DWORD PTR _total$[ebp], eax

; 12353: 
; 12354: #ifdef DEBUG_STEP
; 12355:             xmlGenericError(xmlGenericErrorContext, " %s", cur->name);
; 12356: #endif
; 12357: 
; 12358: 	    switch (test) {

	mov	ecx, DWORD PTR _test$[ebp]
	mov	DWORD PTR tv200[ebp], ecx
	cmp	DWORD PTR tv200[ebp], 5
	ja	$LN6@xmlXPathNo
	mov	edx, DWORD PTR tv200[ebp]
	jmp	DWORD PTR $LN253@xmlXPathNo[edx*4]
$LN52@xmlXPathNo:

; 12359:                 case NODE_TEST_NONE:
; 12360: 		    total = 0;

	mov	DWORD PTR _total$[ebp], 0

; 12361:                     STRANGE

	mov	esi, esp
	push	12361					; 00003049H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BJ@DADKHPPP@Internal?5error?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12362: 		    goto error;

	jmp	$error$255
$LN53@xmlXPathNo:

; 12363:                 case NODE_TEST_TYPE:
; 12364: 		    if (type == NODE_TYPE_NODE) {

	cmp	DWORD PTR _type$[ebp], 0
	jne	$LN54@xmlXPathNo

; 12365: 			switch (cur->type) {

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv209[ebp], eax
	mov	ecx, DWORD PTR tv209[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv209[ebp], ecx
	cmp	DWORD PTR tv209[ebp], 20		; 00000014H
	ja	$LN11@xmlXPathNo
	mov	edx, DWORD PTR tv209[ebp]
	movzx	eax, BYTE PTR $LN246@xmlXPathNo[edx]
	jmp	DWORD PTR $LN254@xmlXPathNo[eax*4]
$LN56@xmlXPathNo:

; 12366: 			    case XML_DOCUMENT_NODE:
; 12367: 			    case XML_HTML_DOCUMENT_NODE:
; 12368: #ifdef LIBXML_DOCB_ENABLED
; 12369: 			    case XML_DOCB_DOCUMENT_NODE:
; 12370: #endif
; 12371: 			    case XML_ELEMENT_NODE:
; 12372: 			    case XML_ATTRIBUTE_NODE:
; 12373: 			    case XML_PI_NODE:
; 12374: 			    case XML_COMMENT_NODE:
; 12375: 			    case XML_CDATA_SECTION_NODE:
; 12376: 			    case XML_TEXT_NODE:
; 12377: 				XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN57@xmlXPathNo
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN59@xmlXPathNo
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN60@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN60@xmlXPathNo:
	jmp	$axis_range_end$256
$LN59@xmlXPathNo:
	jmp	SHORT $LN58@xmlXPathNo
$LN57@xmlXPathNo:
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN61@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN61@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN58@xmlXPathNo
	jmp	$first_hit$257
$LN58@xmlXPathNo:

; 12378: 				break;

	jmp	$LN11@xmlXPathNo
$LN63@xmlXPathNo:

; 12379: 			    case XML_NAMESPACE_DECL: {
; 12380: 				if (axis == AXIS_NAMESPACE) {

	cmp	DWORD PTR _axis$[ebp], 9
	jne	$LN64@xmlXPathNo

; 12381: 				    XP_TEST_HIT_NS

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN66@xmlXPathNo
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN68@xmlXPathNo
	mov	DWORD PTR _hasNsNodes$[ebp], 1
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _xpctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	_xmlXPathNodeSetAddNs
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN69@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN69@xmlXPathNo:
	jmp	$axis_range_end$256
$LN68@xmlXPathNo:
	jmp	SHORT $LN67@xmlXPathNo
$LN66@xmlXPathNo:
	mov	DWORD PTR _hasNsNodes$[ebp], 1
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	_xmlXPathNodeSetAddNs
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN70@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN70@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN67@xmlXPathNo
	jmp	$first_hit$257
$LN67@xmlXPathNo:

; 12382: 				} else {

	jmp	SHORT $LN11@xmlXPathNo
$LN64@xmlXPathNo:

; 12383: 	                            hasNsNodes = 1;

	mov	DWORD PTR _hasNsNodes$[ebp], 1

; 12384: 				    XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN72@xmlXPathNo
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN74@xmlXPathNo
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN75@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH
$LN75@xmlXPathNo:
	jmp	$axis_range_end$256
$LN74@xmlXPathNo:
	jmp	SHORT $LN11@xmlXPathNo
$LN72@xmlXPathNo:
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN76@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH
$LN76@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN11@xmlXPathNo
	jmp	$first_hit$257
$LN11@xmlXPathNo:

; 12385: 				}
; 12386: 				break;
; 12387:                             }
; 12388: 			    default:
; 12389: 				break;
; 12390: 			}
; 12391: 		    } else if (cur->type == (xmlElementType) type) {

	jmp	$LN55@xmlXPathNo
$LN54@xmlXPathNo:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	eax, DWORD PTR _type$[ebp]
	jne	$LN79@xmlXPathNo

; 12392: 			if (cur->type == XML_NAMESPACE_DECL)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	$LN81@xmlXPathNo

; 12393: 			    XP_TEST_HIT_NS

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN83@xmlXPathNo
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN85@xmlXPathNo
	mov	DWORD PTR _hasNsNodes$[ebp], 1
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	_xmlXPathNodeSetAddNs
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN86@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN86@xmlXPathNo:
	jmp	$axis_range_end$256
$LN85@xmlXPathNo:
	jmp	SHORT $LN84@xmlXPathNo
$LN83@xmlXPathNo:
	mov	DWORD PTR _hasNsNodes$[ebp], 1
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xpctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	call	_xmlXPathNodeSetAddNs
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN87@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH
$LN87@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN84@xmlXPathNo
	jmp	$first_hit$257
$LN84@xmlXPathNo:
	jmp	SHORT $LN82@xmlXPathNo
$LN81@xmlXPathNo:

; 12394: 			else
; 12395: 			    XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN89@xmlXPathNo
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN91@xmlXPathNo
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN92@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN92@xmlXPathNo:
	jmp	$axis_range_end$256
$LN91@xmlXPathNo:
	jmp	SHORT $LN82@xmlXPathNo
$LN89@xmlXPathNo:
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN93@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN93@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN82@xmlXPathNo
	jmp	$first_hit$257
$LN82@xmlXPathNo:
	jmp	$LN55@xmlXPathNo
$LN79@xmlXPathNo:

; 12396: 		    } else if ((type == NODE_TYPE_TEXT) &&

	cmp	DWORD PTR _type$[ebp], 3
	jne	SHORT $LN55@xmlXPathNo
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 4
	jne	SHORT $LN55@xmlXPathNo

; 12397: 			 (cur->type == XML_CDATA_SECTION_NODE))
; 12398: 		    {
; 12399: 			XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN96@xmlXPathNo
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN98@xmlXPathNo
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN99@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN99@xmlXPathNo:
	jmp	$axis_range_end$256
$LN98@xmlXPathNo:
	jmp	SHORT $LN55@xmlXPathNo
$LN96@xmlXPathNo:
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN100@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN100@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN55@xmlXPathNo
	jmp	$first_hit$257
$LN55@xmlXPathNo:

; 12400: 		    }
; 12401: 		    break;

	jmp	$LN6@xmlXPathNo
$LN102@xmlXPathNo:

; 12402:                 case NODE_TEST_PI:
; 12403:                     if ((cur->type == XML_PI_NODE) &&

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 7
	jne	$LN103@xmlXPathNo
	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN104@xmlXPathNo
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN103@xmlXPathNo
$LN104@xmlXPathNo:

; 12404:                         ((name == NULL) || xmlStrEqual(name, cur->name)))
; 12405: 		    {
; 12406: 			XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN105@xmlXPathNo
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN107@xmlXPathNo
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN108@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN108@xmlXPathNo:
	jmp	$axis_range_end$256
$LN107@xmlXPathNo:
	jmp	SHORT $LN103@xmlXPathNo
$LN105@xmlXPathNo:
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN109@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN109@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN103@xmlXPathNo
	jmp	$first_hit$257
$LN103@xmlXPathNo:

; 12407:                     }
; 12408:                     break;

	jmp	$LN6@xmlXPathNo
$LN111@xmlXPathNo:

; 12409:                 case NODE_TEST_ALL:
; 12410:                     if (axis == AXIS_ATTRIBUTE) {

	cmp	DWORD PTR _axis$[ebp], 3
	jne	$LN112@xmlXPathNo

; 12411:                         if (cur->type == XML_ATTRIBUTE_NODE)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	jne	$LN114@xmlXPathNo

; 12412: 			{
; 12413:                             if (prefix == NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	jne	SHORT $LN115@xmlXPathNo

; 12414: 			    {
; 12415: 				XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN117@xmlXPathNo
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN119@xmlXPathNo
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN120@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN120@xmlXPathNo:
	jmp	$axis_range_end$256
$LN119@xmlXPathNo:
	jmp	SHORT $LN118@xmlXPathNo
$LN117@xmlXPathNo:
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN121@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN121@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN118@xmlXPathNo
	jmp	$first_hit$257
$LN118@xmlXPathNo:
	jmp	$LN114@xmlXPathNo
$LN115@xmlXPathNo:

; 12416:                             } else if ((cur->ns != NULL) &&

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN114@xmlXPathNo
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _URI$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN114@xmlXPathNo

; 12417: 				(xmlStrEqual(URI, cur->ns->href)))
; 12418: 			    {
; 12419: 				XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN124@xmlXPathNo
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN126@xmlXPathNo
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN127@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH
$LN127@xmlXPathNo:
	jmp	$axis_range_end$256
$LN126@xmlXPathNo:
	jmp	SHORT $LN114@xmlXPathNo
$LN124@xmlXPathNo:
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN128@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH
$LN128@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN114@xmlXPathNo
	jmp	$first_hit$257
$LN114@xmlXPathNo:

; 12420:                             }
; 12421:                         }

	jmp	$LN113@xmlXPathNo
$LN112@xmlXPathNo:

; 12422:                     } else if (axis == AXIS_NAMESPACE) {

	cmp	DWORD PTR _axis$[ebp], 9
	jne	$LN130@xmlXPathNo

; 12423:                         if (cur->type == XML_NAMESPACE_DECL)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	$LN132@xmlXPathNo

; 12424: 			{
; 12425: 			    XP_TEST_HIT_NS

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN133@xmlXPathNo
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN135@xmlXPathNo
	mov	DWORD PTR _hasNsNodes$[ebp], 1
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _xpctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	_xmlXPathNodeSetAddNs
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN136@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN136@xmlXPathNo:
	jmp	$axis_range_end$256
$LN135@xmlXPathNo:
	jmp	SHORT $LN132@xmlXPathNo
$LN133@xmlXPathNo:
	mov	DWORD PTR _hasNsNodes$[ebp], 1
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	_xmlXPathNodeSetAddNs
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN137@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN137@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN132@xmlXPathNo
	jmp	$first_hit$257
$LN132@xmlXPathNo:

; 12426:                         }
; 12427:                     } else {

	jmp	$LN113@xmlXPathNo
$LN130@xmlXPathNo:

; 12428:                         if (cur->type == XML_ELEMENT_NODE) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	$LN113@xmlXPathNo

; 12429:                             if (prefix == NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	jne	SHORT $LN140@xmlXPathNo

; 12430: 			    {
; 12431: 				XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN142@xmlXPathNo
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN144@xmlXPathNo
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN145@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN145@xmlXPathNo:
	jmp	$axis_range_end$256
$LN144@xmlXPathNo:
	jmp	SHORT $LN143@xmlXPathNo
$LN142@xmlXPathNo:
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN146@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN146@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN143@xmlXPathNo
	jmp	$first_hit$257
$LN143@xmlXPathNo:
	jmp	$LN113@xmlXPathNo
$LN140@xmlXPathNo:

; 12432: 
; 12433:                             } else if ((cur->ns != NULL) &&

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN113@xmlXPathNo
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _URI$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN113@xmlXPathNo

; 12434: 				(xmlStrEqual(URI, cur->ns->href)))
; 12435: 			    {
; 12436: 				XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN149@xmlXPathNo
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN151@xmlXPathNo
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN152@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN152@xmlXPathNo:
	jmp	$axis_range_end$256
$LN151@xmlXPathNo:
	jmp	SHORT $LN113@xmlXPathNo
$LN149@xmlXPathNo:
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN153@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN153@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN113@xmlXPathNo
	jmp	$first_hit$257
$LN113@xmlXPathNo:

; 12437:                             }
; 12438:                         }
; 12439:                     }
; 12440:                     break;

	jmp	$LN6@xmlXPathNo
$LN155@xmlXPathNo:

; 12441:                 case NODE_TEST_NS:{
; 12442:                         TODO;

	mov	esi, esp
	push	12442					; 0000309aH
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12443:                         break;

	jmp	$LN6@xmlXPathNo
$LN156@xmlXPathNo:

; 12444:                     }
; 12445:                 case NODE_TEST_NAME:
; 12446:                     if (axis == AXIS_ATTRIBUTE) {

	cmp	DWORD PTR _axis$[ebp], 3
	jne	SHORT $LN157@xmlXPathNo

; 12447:                         if (cur->type != XML_ATTRIBUTE_NODE)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 2
	je	SHORT $LN159@xmlXPathNo

; 12448: 			    break;

	jmp	$LN6@xmlXPathNo
$LN159@xmlXPathNo:

; 12449: 		    } else if (axis == AXIS_NAMESPACE) {

	jmp	SHORT $LN158@xmlXPathNo
$LN157@xmlXPathNo:
	cmp	DWORD PTR _axis$[ebp], 9
	jne	SHORT $LN160@xmlXPathNo

; 12450:                         if (cur->type != XML_NAMESPACE_DECL)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	je	SHORT $LN162@xmlXPathNo

; 12451: 			    break;

	jmp	$LN6@xmlXPathNo
$LN162@xmlXPathNo:

; 12452: 		    } else {

	jmp	SHORT $LN158@xmlXPathNo
$LN160@xmlXPathNo:

; 12453: 		        if (cur->type != XML_ELEMENT_NODE)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN158@xmlXPathNo

; 12454: 			    break;

	jmp	$LN6@xmlXPathNo
$LN158@xmlXPathNo:

; 12455: 		    }
; 12456:                     switch (cur->type) {

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv449[ebp], ecx
	cmp	DWORD PTR tv449[ebp], 1
	je	SHORT $LN164@xmlXPathNo
	cmp	DWORD PTR tv449[ebp], 2
	je	$LN182@xmlXPathNo
	cmp	DWORD PTR tv449[ebp], 18		; 00000012H
	je	$LN201@xmlXPathNo
	jmp	$LN6@xmlXPathNo
$LN164@xmlXPathNo:

; 12457:                         case XML_ELEMENT_NODE:
; 12458:                             if (xmlStrEqual(name, cur->name)) {

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN165@xmlXPathNo

; 12459:                                 if (prefix == NULL) {

	cmp	DWORD PTR _prefix$[ebp], 0
	jne	$LN166@xmlXPathNo

; 12460:                                     if (cur->ns == NULL)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN168@xmlXPathNo

; 12461: 				    {
; 12462: 					XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN169@xmlXPathNo
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN171@xmlXPathNo
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN172@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH
$LN172@xmlXPathNo:
	jmp	$axis_range_end$256
$LN171@xmlXPathNo:
	jmp	SHORT $LN168@xmlXPathNo
$LN169@xmlXPathNo:
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN173@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH
$LN173@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN168@xmlXPathNo
	jmp	$first_hit$257
$LN168@xmlXPathNo:

; 12463:                                     }
; 12464:                                 } else {

	jmp	$LN165@xmlXPathNo
$LN166@xmlXPathNo:

; 12465:                                     if ((cur->ns != NULL) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	$LN165@xmlXPathNo
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _URI$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN165@xmlXPathNo

; 12466:                                         (xmlStrEqual(URI, cur->ns->href)))
; 12467: 				    {
; 12468: 					XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN176@xmlXPathNo
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN178@xmlXPathNo
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN179@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN179@xmlXPathNo:
	jmp	$axis_range_end$256
$LN178@xmlXPathNo:
	jmp	SHORT $LN165@xmlXPathNo
$LN176@xmlXPathNo:
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN180@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN180@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN165@xmlXPathNo
	jmp	$first_hit$257
$LN165@xmlXPathNo:

; 12469:                                     }
; 12470:                                 }
; 12471:                             }
; 12472:                             break;

	jmp	$LN6@xmlXPathNo
$LN182@xmlXPathNo:

; 12473:                         case XML_ATTRIBUTE_NODE:{
; 12474:                                 xmlAttrPtr attr = (xmlAttrPtr) cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _attr$2[ebp], eax

; 12475: 
; 12476:                                 if (xmlStrEqual(name, attr->name)) {

	mov	ecx, DWORD PTR _attr$2[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN183@xmlXPathNo

; 12477:                                     if (prefix == NULL) {

	cmp	DWORD PTR _prefix$[ebp], 0
	jne	$LN184@xmlXPathNo

; 12478:                                         if ((attr->ns == NULL) ||

	mov	ecx, DWORD PTR _attr$2[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN187@xmlXPathNo
	mov	edx, DWORD PTR _attr$2[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN186@xmlXPathNo
$LN187@xmlXPathNo:

; 12479:                                             (attr->ns->prefix == NULL))
; 12480: 					{
; 12481: 					    XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN188@xmlXPathNo
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN190@xmlXPathNo
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN191@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN191@xmlXPathNo:
	jmp	$axis_range_end$256
$LN190@xmlXPathNo:
	jmp	SHORT $LN186@xmlXPathNo
$LN188@xmlXPathNo:
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN192@xmlXPathNo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN192@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN186@xmlXPathNo
	jmp	$first_hit$257
$LN186@xmlXPathNo:

; 12482:                                         }
; 12483:                                     } else {

	jmp	$LN183@xmlXPathNo
$LN184@xmlXPathNo:

; 12484:                                         if ((attr->ns != NULL) &&

	mov	eax, DWORD PTR _attr$2[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN183@xmlXPathNo
	mov	ecx, DWORD PTR _attr$2[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _URI$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN183@xmlXPathNo

; 12485:                                             (xmlStrEqual(URI,
; 12486: 					      attr->ns->href)))
; 12487: 					{
; 12488: 					    XP_TEST_HIT

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN195@xmlXPathNo
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN197@xmlXPathNo
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN198@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN198@xmlXPathNo:
	jmp	$axis_range_end$256
$LN197@xmlXPathNo:
	jmp	SHORT $LN183@xmlXPathNo
$LN195@xmlXPathNo:
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	DWORD PTR _addNode$[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN199@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN199@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN183@xmlXPathNo
	jmp	$first_hit$257
$LN183@xmlXPathNo:

; 12489:                                         }
; 12490:                                     }
; 12491:                                 }
; 12492:                                 break;

	jmp	$LN6@xmlXPathNo
$LN201@xmlXPathNo:

; 12493:                             }
; 12494:                         case XML_NAMESPACE_DECL:
; 12495:                             if (cur->type == XML_NAMESPACE_DECL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	$LN6@xmlXPathNo

; 12496:                                 xmlNsPtr ns = (xmlNsPtr) cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _ns$1[ebp], edx

; 12497: 
; 12498:                                 if ((ns->prefix != NULL) && (name != NULL)
; 12499:                                     && (xmlStrEqual(ns->prefix, name)))

	mov	eax, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN6@xmlXPathNo
	cmp	DWORD PTR _name$[ebp], 0
	je	$LN6@xmlXPathNo
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@xmlXPathNo

; 12500: 				{
; 12501: 				    XP_TEST_HIT_NS

	cmp	DWORD PTR _hasAxisRange$[ebp], 0
	je	SHORT $LN204@xmlXPathNo
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN206@xmlXPathNo
	mov	DWORD PTR _hasNsNodes$[ebp], 1
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _xpctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	call	_xmlXPathNodeSetAddNs
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN207@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH
$LN207@xmlXPathNo:
	jmp	SHORT $axis_range_end$256
$LN206@xmlXPathNo:
	jmp	SHORT $LN6@xmlXPathNo
$LN204@xmlXPathNo:
	mov	DWORD PTR _hasNsNodes$[ebp], 1
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _xpctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	_xmlXPathNodeSetAddNs
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN208@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN208@xmlXPathNo:
	cmp	DWORD PTR _breakOnFirstHit$[ebp], 0
	je	SHORT $LN6@xmlXPathNo
	jmp	SHORT $first_hit$257
$LN6@xmlXPathNo:

; 12502:                                 }
; 12503:                             }
; 12504:                             break;
; 12505:                         default:
; 12506:                             break;
; 12507:                     }
; 12508:                     break;
; 12509: 	    } /* switch(test) */
; 12510:         } while ((cur != NULL) && (ctxt->error == XPATH_EXPRESSION_OK));

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN7@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	$LN8@xmlXPathNo
$LN7@xmlXPathNo:

; 12511: 
; 12512: 	goto apply_predicates;

	jmp	SHORT $apply_predicates$258
$axis_range_end$256:

; 12513: 
; 12514: axis_range_end: /* ----------------------------------------------------- */
; 12515: 	/*
; 12516: 	* We have a "/foo[n]", and position() = n was reached.
; 12517: 	* Note that we can have as well "/foo/::parent::foo[1]", so
; 12518: 	* a duplicate-aware merge is still needed.
; 12519: 	* Merge with the result.
; 12520: 	*/
; 12521: 	if (outSeq == NULL) {

	cmp	DWORD PTR _outSeq$[ebp], 0
	jne	SHORT $LN212@xmlXPathNo

; 12522: 	    outSeq = seq;

	mov	edx, DWORD PTR _seq$[ebp]
	mov	DWORD PTR _outSeq$[ebp], edx

; 12523: 	    seq = NULL;

	mov	DWORD PTR _seq$[ebp], 0

; 12524: 	} else

	jmp	SHORT $LN213@xmlXPathNo
$LN212@xmlXPathNo:

; 12525: 	    outSeq = mergeAndClear(outSeq, seq, 0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outSeq$[ebp]
	push	ecx
	call	DWORD PTR _mergeAndClear$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _outSeq$[ebp], eax
$LN213@xmlXPathNo:

; 12526: 	/*
; 12527: 	* Break if only a true/false result was requested.
; 12528: 	*/
; 12529: 	if (toBool)

	cmp	DWORD PTR _toBool$[ebp], 0
	je	SHORT $LN214@xmlXPathNo

; 12530: 	    break;

	jmp	$error$255
$LN214@xmlXPathNo:

; 12531: 	continue;

	jmp	$LN4@xmlXPathNo
$first_hit$257:

; 12532: 
; 12533: first_hit: /* ---------------------------------------------------------- */
; 12534: 	/*
; 12535: 	* Break if only a true/false result was requested and
; 12536: 	* no predicates existed and a node test succeeded.
; 12537: 	*/
; 12538: 	if (outSeq == NULL) {

	cmp	DWORD PTR _outSeq$[ebp], 0
	jne	SHORT $LN215@xmlXPathNo

; 12539: 	    outSeq = seq;

	mov	edx, DWORD PTR _seq$[ebp]
	mov	DWORD PTR _outSeq$[ebp], edx

; 12540: 	    seq = NULL;

	mov	DWORD PTR _seq$[ebp], 0

; 12541: 	} else

	jmp	SHORT $LN216@xmlXPathNo
$LN215@xmlXPathNo:

; 12542: 	    outSeq = mergeAndClear(outSeq, seq, 0);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outSeq$[ebp]
	push	ecx
	call	DWORD PTR _mergeAndClear$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _outSeq$[ebp], eax
$LN216@xmlXPathNo:

; 12543: 	break;

	jmp	$error$255
$apply_predicates$258:

; 12544: 
; 12545: #ifdef DEBUG_STEP
; 12546: 	if (seq != NULL)
; 12547: 	    nbMatches += seq->nodeNr;
; 12548: #endif
; 12549: 
; 12550: apply_predicates: /* --------------------------------------------------- */
; 12551:         if (ctxt->error != XPATH_EXPRESSION_OK)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN217@xmlXPathNo

; 12552: 	    goto error;

	jmp	$error$255
$LN217@xmlXPathNo:

; 12553: 
; 12554:         /*
; 12555: 	* Apply predicates.
; 12556: 	*/
; 12557:         if ((predOp != NULL) && (seq->nodeNr > 0)) {

	cmp	DWORD PTR _predOp$[ebp], 0
	je	$LN218@xmlXPathNo
	mov	eax, DWORD PTR _seq$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	$LN218@xmlXPathNo

; 12558: 	    /*
; 12559: 	    * E.g. when we have a "/foo[some expression][n]".
; 12560: 	    */
; 12561: 	    /*
; 12562: 	    * QUESTION TODO: The old predicate evaluation took into
; 12563: 	    *  account location-sets.
; 12564: 	    *  (E.g. ctxt->value->type == XPATH_LOCATIONSET)
; 12565: 	    *  Do we expect such a set here?
; 12566: 	    *  All what I learned now from the evaluation semantics
; 12567: 	    *  does not indicate that a location-set will be processed
; 12568: 	    *  here, so this looks OK.
; 12569: 	    */
; 12570: 	    /*
; 12571: 	    * Iterate over all predicates, starting with the outermost
; 12572: 	    * predicate.
; 12573: 	    * TODO: Problem: we cannot execute the inner predicates first
; 12574: 	    *  since we cannot go back *up* the operator tree!
; 12575: 	    *  Options we have:
; 12576: 	    *  1) Use of recursive functions (like is it currently done
; 12577: 	    *     via xmlXPathCompOpEval())
; 12578: 	    *  2) Add a predicate evaluation information stack to the
; 12579: 	    *     context struct
; 12580: 	    *  3) Change the way the operators are linked; we need a
; 12581: 	    *     "parent" field on xmlXPathStepOp
; 12582: 	    *
; 12583: 	    * For the moment, I'll try to solve this with a recursive
; 12584: 	    * function: xmlXPathCompOpEvalPredicate().
; 12585: 	    */
; 12586: 	    size = seq->nodeNr;

	mov	ecx, DWORD PTR _seq$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _size$[ebp], edx

; 12587: 	    if (hasPredicateRange != 0)

	cmp	DWORD PTR _hasPredicateRange$[ebp], 0
	je	SHORT $LN220@xmlXPathNo

; 12588: 		newSize = xmlXPathCompOpEvalPositionalPredicate(ctxt,

	mov	eax, DWORD PTR _hasNsNodes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _maxPos$[ebp]
	push	ecx
	mov	edx, DWORD PTR _maxPos$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _predOp$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEvalPositionalPredicate
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _newSize$[ebp], eax
	jmp	SHORT $LN221@xmlXPathNo
$LN220@xmlXPathNo:

; 12589: 		    predOp, seq, size, maxPos, maxPos, hasNsNodes);
; 12590: 	    else
; 12591: 		newSize = xmlXPathCompOpEvalPredicate(ctxt,

	mov	ecx, DWORD PTR _hasNsNodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _predOp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEvalPredicate
	add	esp, 20					; 00000014H
	mov	DWORD PTR _newSize$[ebp], eax
$LN221@xmlXPathNo:

; 12592: 		    predOp, seq, size, hasNsNodes);
; 12593: 
; 12594: 	    if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN222@xmlXPathNo

; 12595: 		total = 0;

	mov	DWORD PTR _total$[ebp], 0

; 12596: 		goto error;

	jmp	$error$255
$LN222@xmlXPathNo:

; 12597: 	    }
; 12598: 	    /*
; 12599: 	    * Add the filtered set of nodes to the result node set.
; 12600: 	    */
; 12601: 	    if (newSize == 0) {

	cmp	DWORD PTR _newSize$[ebp], 0
	jne	SHORT $LN223@xmlXPathNo

; 12602: 		/*
; 12603: 		* The predicates filtered all nodes out.
; 12604: 		*/
; 12605: 		xmlXPathNodeSetClear(seq, hasNsNodes);

	mov	ecx, DWORD PTR _hasNsNodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	call	_xmlXPathNodeSetClear
	add	esp, 8
	jmp	$LN224@xmlXPathNo
$LN223@xmlXPathNo:

; 12606: 	    } else if (seq->nodeNr > 0) {

	mov	eax, DWORD PTR _seq$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	$LN224@xmlXPathNo

; 12607: 		/*
; 12608: 		* Add to result set.
; 12609: 		*/
; 12610: 		if (outSeq == NULL) {

	cmp	DWORD PTR _outSeq$[ebp], 0
	jne	SHORT $LN226@xmlXPathNo

; 12611: 		    if (size != newSize) {

	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR _newSize$[ebp]
	je	SHORT $LN228@xmlXPathNo

; 12612: 			/*
; 12613: 			* We need to merge and clear here, since
; 12614: 			* the sequence will contained NULLed entries.
; 12615: 			*/
; 12616: 			outSeq = mergeAndClear(NULL, seq, 1);

	mov	esi, esp
	push	1
	mov	edx, DWORD PTR _seq$[ebp]
	push	edx
	push	0
	call	DWORD PTR _mergeAndClear$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _outSeq$[ebp], eax

; 12617: 		    } else {

	jmp	SHORT $LN229@xmlXPathNo
$LN228@xmlXPathNo:

; 12618: 			outSeq = seq;

	mov	eax, DWORD PTR _seq$[ebp]
	mov	DWORD PTR _outSeq$[ebp], eax

; 12619: 			seq = NULL;

	mov	DWORD PTR _seq$[ebp], 0
$LN229@xmlXPathNo:

; 12620: 		    }
; 12621: 		} else

	jmp	SHORT $LN227@xmlXPathNo
$LN226@xmlXPathNo:

; 12622: 		    outSeq = mergeAndClear(outSeq, seq,

	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR _newSize$[ebp]
	je	SHORT $LN243@xmlXPathNo
	mov	DWORD PTR tv655[ebp], 1
	jmp	SHORT $LN244@xmlXPathNo
$LN243@xmlXPathNo:
	mov	DWORD PTR tv655[ebp], 0
$LN244@xmlXPathNo:
	mov	esi, esp
	mov	edx, DWORD PTR tv655[ebp]
	push	edx
	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outSeq$[ebp]
	push	ecx
	call	DWORD PTR _mergeAndClear$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _outSeq$[ebp], eax
$LN227@xmlXPathNo:

; 12623: 			(size != newSize) ? 1: 0);
; 12624: 		/*
; 12625: 		* Break if only a true/false result was requested.
; 12626: 		*/
; 12627: 		if (toBool)

	cmp	DWORD PTR _toBool$[ebp], 0
	je	SHORT $LN224@xmlXPathNo

; 12628: 		    break;

	jmp	SHORT $error$255
$LN224@xmlXPathNo:

; 12629: 	    }

	jmp	SHORT $LN219@xmlXPathNo
$LN218@xmlXPathNo:

; 12630:         } else if (seq->nodeNr > 0) {

	mov	edx, DWORD PTR _seq$[ebp]
	cmp	DWORD PTR [edx], 0
	jle	SHORT $LN219@xmlXPathNo

; 12631: 	    /*
; 12632: 	    * Add to result set.
; 12633: 	    */
; 12634: 	    if (outSeq == NULL) {

	cmp	DWORD PTR _outSeq$[ebp], 0
	jne	SHORT $LN232@xmlXPathNo

; 12635: 		outSeq = seq;

	mov	eax, DWORD PTR _seq$[ebp]
	mov	DWORD PTR _outSeq$[ebp], eax

; 12636: 		seq = NULL;

	mov	DWORD PTR _seq$[ebp], 0

; 12637: 	    } else {

	jmp	SHORT $LN219@xmlXPathNo
$LN232@xmlXPathNo:

; 12638: 		outSeq = mergeAndClear(outSeq, seq, 0);

	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _seq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outSeq$[ebp]
	push	edx
	call	DWORD PTR _mergeAndClear$[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _outSeq$[ebp], eax
$LN219@xmlXPathNo:

; 12639: 	    }
; 12640: 	}
; 12641:     }

	jmp	$LN4@xmlXPathNo
$error$255:

; 12642: 
; 12643: error:
; 12644:     if ((obj->boolval) && (obj->user != NULL)) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN234@xmlXPathNo
	mov	ecx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN234@xmlXPathNo

; 12645: 	/*
; 12646: 	* QUESTION TODO: What does this do and why?
; 12647: 	* TODO: Do we have to do this also for the "error"
; 12648: 	* cleanup further down?
; 12649: 	*/
; 12650: 	ctxt->value->boolval = 1;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+8], 1

; 12651: 	ctxt->value->user = obj->user;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx

; 12652: 	obj->user = NULL;

	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+28], 0

; 12653: 	obj->boolval = 0;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN234@xmlXPathNo:

; 12654:     }
; 12655:     xmlXPathReleaseObject(xpctxt, obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpctxt$[ebp]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12656: 
; 12657:     /*
; 12658:     * Ensure we return at least an emtpy set.
; 12659:     */
; 12660:     if (outSeq == NULL) {

	cmp	DWORD PTR _outSeq$[ebp], 0
	jne	SHORT $LN235@xmlXPathNo

; 12661: 	if ((seq != NULL) && (seq->nodeNr == 0))

	cmp	DWORD PTR _seq$[ebp], 0
	je	SHORT $LN236@xmlXPathNo
	mov	eax, DWORD PTR _seq$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN236@xmlXPathNo

; 12662: 	    outSeq = seq;

	mov	ecx, DWORD PTR _seq$[ebp]
	mov	DWORD PTR _outSeq$[ebp], ecx
	jmp	SHORT $LN235@xmlXPathNo
$LN236@xmlXPathNo:

; 12663: 	else
; 12664: 	    outSeq = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _outSeq$[ebp], eax
$LN235@xmlXPathNo:

; 12665:         /* XXX what if xmlXPathNodeSetCreate returned NULL here? */
; 12666:     }
; 12667:     if ((seq != NULL) && (seq != outSeq)) {

	cmp	DWORD PTR _seq$[ebp], 0
	je	SHORT $LN238@xmlXPathNo
	mov	edx, DWORD PTR _seq$[ebp]
	cmp	edx, DWORD PTR _outSeq$[ebp]
	je	SHORT $LN238@xmlXPathNo

; 12668: 	 xmlXPathFreeNodeSet(seq);

	mov	eax, DWORD PTR _seq$[ebp]
	push	eax
	call	_xmlXPathFreeNodeSet
	add	esp, 4
$LN238@xmlXPathNo:

; 12669:     }
; 12670:     /*
; 12671:     * Hand over the result. Better to push the set also in
; 12672:     * case of errors.
; 12673:     */
; 12674:     valuePush(ctxt, xmlXPathCacheWrapNodeSet(xpctxt, outSeq));

	mov	ecx, DWORD PTR _outSeq$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpctxt$[ebp]
	push	edx
	call	_xmlXPathCacheWrapNodeSet
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 12675:     /*
; 12676:     * Reset the context node.
; 12677:     */
; 12678:     xpctxt->node = oldContextNode;

	mov	ecx, DWORD PTR _xpctxt$[ebp]
	mov	edx, DWORD PTR _oldContextNode$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 12679:     /*
; 12680:     * When traversing the namespace axis in "toBool" mode, it's
; 12681:     * possible that tmpNsList wasn't freed.
; 12682:     */
; 12683:     if (xpctxt->tmpNsList != NULL) {

	mov	eax, DWORD PTR _xpctxt$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN239@xmlXPathNo

; 12684:         xmlFree(xpctxt->tmpNsList);

	mov	esi, esp
	mov	ecx, DWORD PTR _xpctxt$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 12685:         xpctxt->tmpNsList = NULL;

	mov	eax, DWORD PTR _xpctxt$[ebp]
	mov	DWORD PTR [eax+120], 0
$LN239@xmlXPathNo:

; 12686:     }
; 12687: 
; 12688: #ifdef DEBUG_STEP
; 12689:     xmlGenericError(xmlGenericErrorContext,
; 12690: 	"\nExamined %d nodes, found %d nodes at that step\n",
; 12691: 	total, nbMatches);
; 12692: #endif
; 12693: 
; 12694:     return(total);

	mov	eax, DWORD PTR _total$[ebp]
$LN1@xmlXPathNo:

; 12695: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN249@xmlXPathNo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 152				; 00000098H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN249@xmlXPathNo:
	DD	1
	DD	$LN248@xmlXPathNo
$LN248@xmlXPathNo:
	DD	-72					; ffffffb8H
	DD	4
	DD	$LN247@xmlXPathNo
$LN247@xmlXPathNo:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	120					; 00000078H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
	npad	1
$LN252@xmlXPathNo:
	DD	$LN19@xmlXPathNo
	DD	$LN20@xmlXPathNo
	DD	$LN21@xmlXPathNo
	DD	$LN22@xmlXPathNo
	DD	$LN26@xmlXPathNo
	DD	$LN27@xmlXPathNo
	DD	$LN28@xmlXPathNo
	DD	$LN29@xmlXPathNo
	DD	$LN30@xmlXPathNo
	DD	$LN31@xmlXPathNo
	DD	$LN32@xmlXPathNo
	DD	$LN33@xmlXPathNo
	DD	$LN34@xmlXPathNo
$LN253@xmlXPathNo:
	DD	$LN52@xmlXPathNo
	DD	$LN53@xmlXPathNo
	DD	$LN102@xmlXPathNo
	DD	$LN111@xmlXPathNo
	DD	$LN155@xmlXPathNo
	DD	$LN156@xmlXPathNo
$LN254@xmlXPathNo:
	DD	$LN56@xmlXPathNo
	DD	$LN63@xmlXPathNo
	DD	$LN11@xmlXPathNo
$LN246@xmlXPathNo:
	DB	0
	DB	0
	DB	0
	DB	0
	DB	2
	DB	2
	DB	0
	DB	0
	DB	0
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	DB	2
	DB	2
	DB	0
_xmlXPathNodeCollectAndTest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathIsPositionalPredicate
_TEXT	SEGMENT
_floatval$1 = -12					; size = 8
_exprOp$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_op$ = 12						; size = 4
_maxPos$ = 16						; size = 4
_xmlXPathIsPositionalPredicate PROC			; COMDAT

; 12003: {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 12004: 
; 12005:     xmlXPathStepOpPtr exprOp;
; 12006: 
; 12007:     /*
; 12008:     * BIG NOTE: This is not intended for XPATH_OP_FILTER yet!
; 12009:     */
; 12010: 
; 12011:     /*
; 12012:     * If not -1, then ch1 will point to:
; 12013:     * 1) For predicates (XPATH_OP_PREDICATE):
; 12014:     *    - an inner predicate operator
; 12015:     * 2) For filters (XPATH_OP_FILTER):
; 12016:     *    - an inner filter operater OR
; 12017:     *    - an expression selecting the node set.
; 12018:     *      E.g. "key('a', 'b')" or "(//foo | //bar)".
; 12019:     */
; 12020:     if ((op->op != XPATH_OP_PREDICATE) && (op->op != XPATH_OP_FILTER))

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax], 15			; 0000000fH
	je	SHORT $LN2@xmlXPathIs
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx], 16			; 00000010H
	je	SHORT $LN2@xmlXPathIs

; 12021: 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathIs
$LN2@xmlXPathIs:

; 12022: 
; 12023:     if (op->ch2 != -1) {

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+8], -1
	je	SHORT $LN3@xmlXPathIs

; 12024: 	exprOp = &ctxt->comp->steps[op->ch2];

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+8], 40
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _exprOp$[ebp], eax

; 12025:     } else

	jmp	SHORT $LN4@xmlXPathIs
$LN3@xmlXPathIs:

; 12026: 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathIs
$LN4@xmlXPathIs:

; 12027: 
; 12028:     if ((exprOp != NULL) &&
; 12029: 	(exprOp->op == XPATH_OP_VALUE) &&
; 12030: 	(exprOp->value4 != NULL) &&

	cmp	DWORD PTR _exprOp$[ebp], 0
	je	SHORT $LN7@xmlXPathIs
	mov	ecx, DWORD PTR _exprOp$[ebp]
	cmp	DWORD PTR [ecx], 11			; 0000000bH
	jne	SHORT $LN7@xmlXPathIs
	mov	edx, DWORD PTR _exprOp$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN7@xmlXPathIs
	mov	eax, DWORD PTR _exprOp$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	cmp	DWORD PTR [ecx], 3
	jne	SHORT $LN7@xmlXPathIs

; 12031: 	(((xmlXPathObjectPtr) exprOp->value4)->type == XPATH_NUMBER))
; 12032:     {
; 12033:         double floatval = ((xmlXPathObjectPtr) exprOp->value4)->floatval;

	mov	edx, DWORD PTR _exprOp$[ebp]
	mov	eax, DWORD PTR [edx+24]
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR _floatval$1[ebp], xmm0

; 12034: 
; 12035: 	/*
; 12036: 	* We have a "[n]" predicate here.
; 12037: 	* TODO: Unfortunately this simplistic test here is not
; 12038: 	* able to detect a position() predicate in compound
; 12039: 	* expressions like "[@attr = 'a" and position() = 1],
; 12040: 	* and even not the usage of position() in
; 12041: 	* "[position() = 1]"; thus - obviously - a position-range,
; 12042: 	* like it "[position() < 5]", is also not detected.
; 12043: 	* Maybe we could rewrite the AST to ease the optimization.
; 12044: 	*/
; 12045: 
; 12046:         if ((floatval > INT_MIN) && (floatval < INT_MAX)) {

	movsd	xmm0, QWORD PTR _floatval$1[ebp]
	comisd	xmm0, QWORD PTR __real@c1e0000000000000
	jbe	SHORT $LN7@xmlXPathIs
	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	comisd	xmm0, QWORD PTR _floatval$1[ebp]
	jbe	SHORT $LN7@xmlXPathIs

; 12047: 	    *maxPos = (int) floatval;

	cvttsd2si ecx, QWORD PTR _floatval$1[ebp]
	mov	edx, DWORD PTR _maxPos$[ebp]
	mov	DWORD PTR [edx], ecx

; 12048:             if (floatval == (double) *maxPos)

	mov	eax, DWORD PTR _maxPos$[ebp]
	cvtsi2sd xmm0, DWORD PTR [eax]
	movsd	xmm1, QWORD PTR _floatval$1[ebp]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN7@xmlXPathIs

; 12049:                 return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathIs
$LN7@xmlXPathIs:

; 12050:         }
; 12051:     }
; 12052:     return(0);

	xor	eax, eax
$LN1@xmlXPathIs:

; 12053: }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathIsPositionalPredicate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompOpEvalPositionalPredicate
_TEXT	SEGMENT
_tmp$1 = -68						; size = 4
_frame$2 = -64						; size = 4
_xpctxt$3 = -60						; size = 4
_contextNode$4 = -56					; size = 4
_oldContextNode$5 = -52					; size = 4
_exprRes$6 = -48					; size = 4
_contextObj$7 = -44					; size = 4
_exprOp$8 = -40						; size = 4
_res$9 = -36						; size = 4
_contextPos$10 = -32					; size = 4
_newContextSize$11 = -28				; size = 4
_pos$12 = -24						; size = 4
_i$13 = -20						; size = 4
_oldpp$14 = -16						; size = 4
_oldcs$15 = -12						; size = 4
_oldContextDoc$16 = -8					; size = 4
_comp$17 = -4						; size = 4
_ctxt$ = 8						; size = 4
_op$ = 12						; size = 4
_set$ = 16						; size = 4
_contextSize$ = 20					; size = 4
_minPos$ = 24						; size = 4
_maxPos$ = 28						; size = 4
_hasNsNodes$ = 32					; size = 4
_xmlXPathCompOpEvalPositionalPredicate PROC		; COMDAT

; 11804: {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	push	edi
	lea	edi, DWORD PTR [ebp-68]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 11805:     if (op->ch1 != -1) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN7@xmlXPathCo

; 11806: 	xmlXPathCompExprPtr comp = ctxt->comp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _comp$17[ebp], edx

; 11807: 	if (comp->steps[op->ch1].op != XPATH_OP_PREDICATE) {
; 11808: 	    /*
; 11809: 	    * TODO: raise an internal error.
; 11810: 	    */
; 11811: 	}
; 11812: 	contextSize = xmlXPathCompOpEvalPredicate(ctxt,

	mov	ecx, DWORD PTR _hasNsNodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _contextSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$17[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEvalPredicate
	add	esp, 20					; 00000014H
	mov	DWORD PTR _contextSize$[ebp], eax

; 11813: 	    &comp->steps[op->ch1], set, contextSize, hasNsNodes);
; 11814: 	CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN9@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN9@xmlXPathCo:

; 11815: 	if (contextSize <= 0)

	cmp	DWORD PTR _contextSize$[ebp], 0
	jg	SHORT $LN7@xmlXPathCo

; 11816: 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN7@xmlXPathCo:

; 11817:     }
; 11818:     /*
; 11819:     * Check if the node set contains a sufficient number of nodes for
; 11820:     * the requested range.
; 11821:     */
; 11822:     if (contextSize < minPos) {

	mov	eax, DWORD PTR _contextSize$[ebp]
	cmp	eax, DWORD PTR _minPos$[ebp]
	jge	SHORT $LN11@xmlXPathCo

; 11823: 	xmlXPathNodeSetClear(set, hasNsNodes);

	mov	ecx, DWORD PTR _hasNsNodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	call	_xmlXPathNodeSetClear
	add	esp, 8

; 11824: 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN11@xmlXPathCo:

; 11825:     }
; 11826:     if (op->ch2 == -1) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	jne	SHORT $LN12@xmlXPathCo

; 11827: 	/*
; 11828: 	* TODO: Can this ever happen?
; 11829: 	*/
; 11830: 	return (contextSize);

	mov	eax, DWORD PTR _contextSize$[ebp]
	jmp	$LN1@xmlXPathCo

; 11831:     } else {

	jmp	$LN13@xmlXPathCo
$LN12@xmlXPathCo:

; 11832: 	xmlDocPtr oldContextDoc;
; 11833:         int oldcs, oldpp;
; 11834: 	int i, pos = 0, newContextSize = 0, contextPos = 0, res;

	mov	DWORD PTR _pos$12[ebp], 0
	mov	DWORD PTR _newContextSize$11[ebp], 0
	mov	DWORD PTR _contextPos$10[ebp], 0

; 11835: 	xmlXPathStepOpPtr exprOp;
; 11836: 	xmlXPathObjectPtr contextObj = NULL, exprRes = NULL;

	mov	DWORD PTR _contextObj$7[ebp], 0
	mov	DWORD PTR _exprRes$6[ebp], 0

; 11837: 	xmlNodePtr oldContextNode, contextNode = NULL;

	mov	DWORD PTR _contextNode$4[ebp], 0

; 11838: 	xmlXPathContextPtr xpctxt = ctxt->context;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _xpctxt$3[ebp], edx

; 11839:         int frame;
; 11840: 
; 11841: #ifdef LIBXML_XPTR_ENABLED
; 11842: 	    /*
; 11843: 	    * URGENT TODO: Check the following:
; 11844: 	    *  We don't expect location sets if evaluating prediates, right?
; 11845: 	    *  Only filters should expect location sets, right?
; 11846: 	*/
; 11847: #endif /* LIBXML_XPTR_ENABLED */
; 11848: 
; 11849: 	/*
; 11850: 	* Save old context.
; 11851: 	*/
; 11852: 	oldContextNode = xpctxt->node;

	mov	eax, DWORD PTR _xpctxt$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _oldContextNode$5[ebp], ecx

; 11853: 	oldContextDoc = xpctxt->doc;

	mov	edx, DWORD PTR _xpctxt$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _oldContextDoc$16[ebp], eax

; 11854:         oldcs = xpctxt->contextSize;

	mov	ecx, DWORD PTR _xpctxt$3[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _oldcs$15[ebp], edx

; 11855:         oldpp = xpctxt->proximityPosition;

	mov	eax, DWORD PTR _xpctxt$3[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _oldpp$14[ebp], ecx

; 11856: 	/*
; 11857: 	* Get the expression of this predicate.
; 11858: 	*/
; 11859: 	exprOp = &ctxt->comp->steps[op->ch2];

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _exprOp$8[ebp], edx

; 11860: 	for (i = 0; i < set->nodeNr; i++) {

	mov	DWORD PTR _i$13[ebp], 0
	jmp	SHORT $LN4@xmlXPathCo
$LN2@xmlXPathCo:
	mov	eax, DWORD PTR _i$13[ebp]
	add	eax, 1
	mov	DWORD PTR _i$13[ebp], eax
$LN4@xmlXPathCo:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR _i$13[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN3@xmlXPathCo

; 11861:             xmlXPathObjectPtr tmp;
; 11862: 
; 11863: 	    if (set->nodeTab[i] == NULL)

	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$13[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	jne	SHORT $LN14@xmlXPathCo

; 11864: 		continue;

	jmp	SHORT $LN2@xmlXPathCo
$LN14@xmlXPathCo:

; 11865: 
; 11866: 	    contextNode = set->nodeTab[i];

	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$13[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _contextNode$4[ebp], eax

; 11867: 	    xpctxt->node = contextNode;

	mov	ecx, DWORD PTR _xpctxt$3[ebp]
	mov	edx, DWORD PTR _contextNode$4[ebp]
	mov	DWORD PTR [ecx+4], edx

; 11868: 	    xpctxt->contextSize = contextSize;

	mov	eax, DWORD PTR _xpctxt$3[ebp]
	mov	ecx, DWORD PTR _contextSize$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 11869: 	    xpctxt->proximityPosition = ++contextPos;

	mov	edx, DWORD PTR _contextPos$10[ebp]
	add	edx, 1
	mov	DWORD PTR _contextPos$10[ebp], edx
	mov	eax, DWORD PTR _xpctxt$3[ebp]
	mov	ecx, DWORD PTR _contextPos$10[ebp]
	mov	DWORD PTR [eax+72], ecx

; 11870: 
; 11871: 	    /*
; 11872: 	    * Initialize the new set.
; 11873: 	    * Also set the xpath document in case things like
; 11874: 	    * key() evaluation are attempted on the predicate
; 11875: 	    */
; 11876: 	    if ((contextNode->type != XML_NAMESPACE_DECL) &&

	mov	edx, DWORD PTR _contextNode$4[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	je	SHORT $LN15@xmlXPathCo
	mov	eax, DWORD PTR _contextNode$4[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN15@xmlXPathCo

; 11877: 		(contextNode->doc != NULL))
; 11878: 		xpctxt->doc = contextNode->doc;

	mov	ecx, DWORD PTR _xpctxt$3[ebp]
	mov	edx, DWORD PTR _contextNode$4[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx], eax
$LN15@xmlXPathCo:

; 11879: 	    /*
; 11880: 	    * Evaluate the predicate expression with 1 context node
; 11881: 	    * at a time; this node is packaged into a node set; this
; 11882: 	    * node set is handed over to the evaluation mechanism.
; 11883: 	    */
; 11884: 	    if (contextObj == NULL)

	cmp	DWORD PTR _contextObj$7[ebp], 0
	jne	SHORT $LN16@xmlXPathCo

; 11885: 		contextObj = xmlXPathCacheNewNodeSet(xpctxt, contextNode);

	mov	ecx, DWORD PTR _contextNode$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpctxt$3[ebp]
	push	edx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	mov	DWORD PTR _contextObj$7[ebp], eax
	jmp	SHORT $LN17@xmlXPathCo
$LN16@xmlXPathCo:

; 11886: 	    else {
; 11887: 		if (xmlXPathNodeSetAddUnique(contextObj->nodesetval,
; 11888: 		    contextNode) < 0) {

	mov	eax, DWORD PTR _contextNode$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _contextObj$7[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN17@xmlXPathCo

; 11889: 		    ctxt->error = XPATH_MEMORY_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH

; 11890: 		    goto evaluation_exit;

	jmp	$evaluation_exit$35
$LN17@xmlXPathCo:

; 11891: 		}
; 11892: 	    }
; 11893: 
; 11894: 	    valuePush(ctxt, contextObj);

	mov	ecx, DWORD PTR _contextObj$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 11895:             frame = xmlXPathSetFrame(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathSetFrame
	add	esp, 4
	mov	DWORD PTR _frame$2[ebp], eax

; 11896: 	    res = xmlXPathCompOpEvalToBoolean(ctxt, exprOp, 1);

	push	1
	mov	ecx, DWORD PTR _exprOp$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEvalToBoolean
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _res$9[ebp], eax

; 11897:             xmlXPathPopFrame(ctxt, frame);

	mov	eax, DWORD PTR _frame$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathPopFrame
	add	esp, 8

; 11898:             tmp = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _tmp$1[ebp], eax

; 11899: 
; 11900: 	    if ((ctxt->error != XPATH_EXPRESSION_OK) || (res == -1)) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN5@xmlXPathCo
	cmp	DWORD PTR _res$9[ebp], -1
	jne	SHORT $LN19@xmlXPathCo
$LN5@xmlXPathCo:

; 11901:                 while (tmp != contextObj) {

	mov	ecx, DWORD PTR _tmp$1[ebp]
	cmp	ecx, DWORD PTR _contextObj$7[ebp]
	je	SHORT $LN6@xmlXPathCo

; 11902:                     /*
; 11903:                      * Free up the result
; 11904:                      * then pop off contextObj, which will be freed later
; 11905:                      */
; 11906:                     xmlXPathReleaseObject(xpctxt, tmp);

	mov	edx, DWORD PTR _tmp$1[ebp]
	push	edx
	mov	eax, DWORD PTR _xpctxt$3[ebp]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 11907:                     tmp = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _tmp$1[ebp], eax

; 11908:                 }

	jmp	SHORT $LN5@xmlXPathCo
$LN6@xmlXPathCo:

; 11909: 		goto evaluation_error;

	jmp	$evaluation_error$36
$LN19@xmlXPathCo:

; 11910: 	    }
; 11911:             /* push the result back onto the stack */
; 11912:             valuePush(ctxt, tmp);

	mov	edx, DWORD PTR _tmp$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 11913: 
; 11914: 	    if (res)

	cmp	DWORD PTR _res$9[ebp], 0
	je	SHORT $LN21@xmlXPathCo

; 11915: 		pos++;

	mov	ecx, DWORD PTR _pos$12[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$12[ebp], ecx
$LN21@xmlXPathCo:

; 11916: 
; 11917: 	    if (res && (pos >= minPos) && (pos <= maxPos)) {

	cmp	DWORD PTR _res$9[ebp], 0
	je	$LN22@xmlXPathCo
	mov	edx, DWORD PTR _pos$12[ebp]
	cmp	edx, DWORD PTR _minPos$[ebp]
	jl	$LN22@xmlXPathCo
	mov	eax, DWORD PTR _pos$12[ebp]
	cmp	eax, DWORD PTR _maxPos$[ebp]
	jg	$LN22@xmlXPathCo

; 11918: 		/*
; 11919: 		* Fits in the requested range.
; 11920: 		*/
; 11921: 		newContextSize++;

	mov	ecx, DWORD PTR _newContextSize$11[ebp]
	add	ecx, 1
	mov	DWORD PTR _newContextSize$11[ebp], ecx

; 11922: 		if (minPos == maxPos) {

	mov	edx, DWORD PTR _minPos$[ebp]
	cmp	edx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN24@xmlXPathCo

; 11923: 		    /*
; 11924: 		    * Only 1 node was requested.
; 11925: 		    */
; 11926: 		    if (contextNode->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _contextNode$4[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN25@xmlXPathCo

; 11927: 			/*
; 11928: 			* As always: take care of those nasty
; 11929: 			* namespace nodes.
; 11930: 			*/
; 11931: 			set->nodeTab[i] = NULL;

	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$13[ebp]
	mov	DWORD PTR [edx+eax*4], 0
$LN25@xmlXPathCo:

; 11932: 		    }
; 11933: 		    xmlXPathNodeSetClear(set, hasNsNodes);

	mov	ecx, DWORD PTR _hasNsNodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	call	_xmlXPathNodeSetClear
	add	esp, 8

; 11934: 		    set->nodeNr = 1;

	mov	eax, DWORD PTR _set$[ebp]
	mov	DWORD PTR [eax], 1

; 11935: 		    set->nodeTab[0] = contextNode;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _contextNode$4[ebp]
	mov	DWORD PTR [edx+ecx], eax

; 11936: 		    goto evaluation_exit;

	jmp	$evaluation_exit$35
$LN24@xmlXPathCo:

; 11937: 		}
; 11938: 		if (pos == maxPos) {

	mov	ecx, DWORD PTR _pos$12[ebp]
	cmp	ecx, DWORD PTR _maxPos$[ebp]
	jne	SHORT $LN26@xmlXPathCo

; 11939: 		    /*
; 11940: 		    * We are done.
; 11941: 		    */
; 11942: 		    xmlXPathNodeSetClearFromPos(set, i +1, hasNsNodes);

	mov	edx, DWORD PTR _hasNsNodes$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$13[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	call	_xmlXPathNodeSetClearFromPos
	add	esp, 12					; 0000000cH

; 11943: 		    goto evaluation_exit;

	jmp	$evaluation_exit$35
$LN26@xmlXPathCo:

; 11944: 		}
; 11945: 	    } else {

	jmp	SHORT $LN23@xmlXPathCo
$LN22@xmlXPathCo:

; 11946: 		/*
; 11947: 		* Remove the entry from the initial node set.
; 11948: 		*/
; 11949: 		set->nodeTab[i] = NULL;

	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$13[ebp]
	mov	DWORD PTR [eax+ecx*4], 0

; 11950: 		if (contextNode->type == XML_NAMESPACE_DECL)

	mov	edx, DWORD PTR _contextNode$4[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN23@xmlXPathCo

; 11951: 		    xmlXPathNodeSetFreeNs((xmlNsPtr) contextNode);

	mov	eax, DWORD PTR _contextNode$4[ebp]
	push	eax
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4
$LN23@xmlXPathCo:

; 11952: 	    }
; 11953: 	    if (exprRes != NULL) {

	cmp	DWORD PTR _exprRes$6[ebp], 0
	je	SHORT $LN28@xmlXPathCo

; 11954: 		xmlXPathReleaseObject(ctxt->context, exprRes);

	mov	ecx, DWORD PTR _exprRes$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 11955: 		exprRes = NULL;

	mov	DWORD PTR _exprRes$6[ebp], 0
$LN28@xmlXPathCo:

; 11956: 	    }
; 11957: 	    if (ctxt->value == contextObj) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR _contextObj$7[ebp]
	jne	SHORT $LN29@xmlXPathCo

; 11958: 		/*
; 11959: 		* Don't free the temporary XPath object holding the
; 11960: 		* context node, in order to avoid massive recreation
; 11961: 		* inside this loop.
; 11962: 		*/
; 11963: 		valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4

; 11964: 		xmlXPathNodeSetClear(contextObj->nodesetval, hasNsNodes);

	mov	ecx, DWORD PTR _hasNsNodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _contextObj$7[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathNodeSetClear
	add	esp, 8

; 11965: 	    } else {

	jmp	SHORT $LN30@xmlXPathCo
$LN29@xmlXPathCo:

; 11966: 		/*
; 11967: 		* The object was lost in the evaluation machinery.
; 11968: 		* Can this happen? Maybe in case of internal-errors.
; 11969: 		*/
; 11970: 		contextObj = NULL;

	mov	DWORD PTR _contextObj$7[ebp], 0
$LN30@xmlXPathCo:

; 11971: 	    }
; 11972: 	}

	jmp	$LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 11973: 	goto evaluation_exit;

	jmp	SHORT $evaluation_exit$35
$evaluation_error$36:

; 11974: 
; 11975: evaluation_error:
; 11976: 	xmlXPathNodeSetClear(set, hasNsNodes);

	mov	ecx, DWORD PTR _hasNsNodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	push	edx
	call	_xmlXPathNodeSetClear
	add	esp, 8

; 11977: 	newContextSize = 0;

	mov	DWORD PTR _newContextSize$11[ebp], 0
$evaluation_exit$35:

; 11978: 
; 11979: evaluation_exit:
; 11980: 	if (contextObj != NULL) {

	cmp	DWORD PTR _contextObj$7[ebp], 0
	je	SHORT $LN31@xmlXPathCo

; 11981: 	    if (ctxt->value == contextObj)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _contextObj$7[ebp]
	jne	SHORT $LN32@xmlXPathCo

; 11982: 		valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
$LN32@xmlXPathCo:

; 11983: 	    xmlXPathReleaseObject(xpctxt, contextObj);

	mov	eax, DWORD PTR _contextObj$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _xpctxt$3[ebp]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN31@xmlXPathCo:

; 11984: 	}
; 11985: 	if (exprRes != NULL)

	cmp	DWORD PTR _exprRes$6[ebp], 0
	je	SHORT $LN33@xmlXPathCo

; 11986: 	    xmlXPathReleaseObject(ctxt->context, exprRes);

	mov	edx, DWORD PTR _exprRes$6[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN33@xmlXPathCo:

; 11987: 	/*
; 11988: 	* Reset/invalidate the context.
; 11989: 	*/
; 11990: 	xpctxt->node = oldContextNode;

	mov	edx, DWORD PTR _xpctxt$3[ebp]
	mov	eax, DWORD PTR _oldContextNode$5[ebp]
	mov	DWORD PTR [edx+4], eax

; 11991: 	xpctxt->doc = oldContextDoc;

	mov	ecx, DWORD PTR _xpctxt$3[ebp]
	mov	edx, DWORD PTR _oldContextDoc$16[ebp]
	mov	DWORD PTR [ecx], edx

; 11992: 	xpctxt->contextSize = oldcs;

	mov	eax, DWORD PTR _xpctxt$3[ebp]
	mov	ecx, DWORD PTR _oldcs$15[ebp]
	mov	DWORD PTR [eax+68], ecx

; 11993: 	xpctxt->proximityPosition = oldpp;

	mov	edx, DWORD PTR _xpctxt$3[ebp]
	mov	eax, DWORD PTR _oldpp$14[ebp]
	mov	DWORD PTR [edx+72], eax

; 11994: 	return(newContextSize);

	mov	eax, DWORD PTR _newContextSize$11[ebp]
	jmp	SHORT $LN1@xmlXPathCo
$LN13@xmlXPathCo:

; 11995:     }
; 11996:     return(contextSize);

	mov	eax, DWORD PTR _contextSize$[ebp]
$LN1@xmlXPathCo:

; 11997: }

	pop	edi
	add	esp, 68					; 00000044H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompOpEvalPositionalPredicate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompOpEvalPredicate
_TEXT	SEGMENT
_exprRes$1 = -56					; size = 4
_contextObj$2 = -52					; size = 4
_exprOp$3 = -48						; size = 4
_newContextSize$4 = -44					; size = 4
_contextPos$5 = -40					; size = 4
_res$6 = -36						; size = 4
_i$7 = -32						; size = 4
_oldpp$8 = -28						; size = 4
_oldcs$9 = -24						; size = 4
_oldContextDoc$10 = -20					; size = 4
_oldContextNode$11 = -16				; size = 4
_contextNode$12 = -12					; size = 4
_xpctxt$13 = -8						; size = 4
_comp$14 = -4						; size = 4
_ctxt$ = 8						; size = 4
_op$ = 12						; size = 4
_set$ = 16						; size = 4
_contextSize$ = 20					; size = 4
_hasNsNodes$ = 24					; size = 4
_xmlXPathCompOpEvalPredicate PROC			; COMDAT

; 11643: {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 11644:     if (op->ch1 != -1) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN5@xmlXPathCo

; 11645: 	xmlXPathCompExprPtr comp = ctxt->comp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _comp$14[ebp], edx

; 11646: 	/*
; 11647: 	* Process inner predicates first.
; 11648: 	*/
; 11649: 	if (comp->steps[op->ch1].op != XPATH_OP_PREDICATE) {
; 11650: 	    /*
; 11651: 	    * TODO: raise an internal error.
; 11652: 	    */
; 11653: 	}
; 11654: 	contextSize = xmlXPathCompOpEvalPredicate(ctxt,

	mov	ecx, DWORD PTR _hasNsNodes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _contextSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _set$[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$14[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEvalPredicate
	add	esp, 20					; 00000014H
	mov	DWORD PTR _contextSize$[ebp], eax

; 11655: 	    &comp->steps[op->ch1], set, contextSize, hasNsNodes);
; 11656: 	CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN7@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN7@xmlXPathCo:

; 11657: 	if (contextSize <= 0)

	cmp	DWORD PTR _contextSize$[ebp], 0
	jg	SHORT $LN5@xmlXPathCo

; 11658: 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN5@xmlXPathCo:

; 11659:     }
; 11660:     if (op->ch2 != -1) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	$LN9@xmlXPathCo

; 11661: 	xmlXPathContextPtr xpctxt = ctxt->context;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _xpctxt$13[ebp], edx

; 11662: 	xmlNodePtr contextNode, oldContextNode;
; 11663: 	xmlDocPtr oldContextDoc;
; 11664:         int oldcs, oldpp;
; 11665: 	int i, res, contextPos = 0, newContextSize;

	mov	DWORD PTR _contextPos$5[ebp], 0

; 11666: 	xmlXPathStepOpPtr exprOp;
; 11667: 	xmlXPathObjectPtr contextObj = NULL, exprRes = NULL;

	mov	DWORD PTR _contextObj$2[ebp], 0
	mov	DWORD PTR _exprRes$1[ebp], 0

; 11668: 
; 11669: #ifdef LIBXML_XPTR_ENABLED
; 11670: 	/*
; 11671: 	* URGENT TODO: Check the following:
; 11672: 	*  We don't expect location sets if evaluating prediates, right?
; 11673: 	*  Only filters should expect location sets, right?
; 11674: 	*/
; 11675: #endif
; 11676: 	/*
; 11677: 	* SPEC XPath 1.0:
; 11678: 	*  "For each node in the node-set to be filtered, the
; 11679: 	*  PredicateExpr is evaluated with that node as the
; 11680: 	*  context node, with the number of nodes in the
; 11681: 	*  node-set as the context size, and with the proximity
; 11682: 	*  position of the node in the node-set with respect to
; 11683: 	*  the axis as the context position;"
; 11684: 	* @oldset is the node-set" to be filtered.
; 11685: 	*
; 11686: 	* SPEC XPath 1.0:
; 11687: 	*  "only predicates change the context position and
; 11688: 	*  context size (see [2.4 Predicates])."
; 11689: 	* Example:
; 11690: 	*   node-set  context pos
; 11691: 	*    nA         1
; 11692: 	*    nB         2
; 11693: 	*    nC         3
; 11694: 	*   After applying predicate [position() > 1] :
; 11695: 	*   node-set  context pos
; 11696: 	*    nB         1
; 11697: 	*    nC         2
; 11698: 	*/
; 11699: 	oldContextNode = xpctxt->node;

	mov	eax, DWORD PTR _xpctxt$13[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _oldContextNode$11[ebp], ecx

; 11700: 	oldContextDoc = xpctxt->doc;

	mov	edx, DWORD PTR _xpctxt$13[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _oldContextDoc$10[ebp], eax

; 11701:         oldcs = xpctxt->contextSize;

	mov	ecx, DWORD PTR _xpctxt$13[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _oldcs$9[ebp], edx

; 11702:         oldpp = xpctxt->proximityPosition;

	mov	eax, DWORD PTR _xpctxt$13[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _oldpp$8[ebp], ecx

; 11703: 	/*
; 11704: 	* Get the expression of this predicate.
; 11705: 	*/
; 11706: 	exprOp = &ctxt->comp->steps[op->ch2];

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	add	edx, DWORD PTR [eax+8]
	mov	DWORD PTR _exprOp$3[ebp], edx

; 11707: 	newContextSize = 0;

	mov	DWORD PTR _newContextSize$4[ebp], 0

; 11708: 	for (i = 0; i < set->nodeNr; i++) {

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN4@xmlXPathCo
$LN2@xmlXPathCo:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN4@xmlXPathCo:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR _i$7[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN3@xmlXPathCo

; 11709: 	    if (set->nodeTab[i] == NULL)

	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$7[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	jne	SHORT $LN10@xmlXPathCo

; 11710: 		continue;

	jmp	SHORT $LN2@xmlXPathCo
$LN10@xmlXPathCo:

; 11711: 
; 11712: 	    contextNode = set->nodeTab[i];

	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$7[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _contextNode$12[ebp], eax

; 11713: 	    xpctxt->node = contextNode;

	mov	ecx, DWORD PTR _xpctxt$13[ebp]
	mov	edx, DWORD PTR _contextNode$12[ebp]
	mov	DWORD PTR [ecx+4], edx

; 11714: 	    xpctxt->contextSize = contextSize;

	mov	eax, DWORD PTR _xpctxt$13[ebp]
	mov	ecx, DWORD PTR _contextSize$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 11715: 	    xpctxt->proximityPosition = ++contextPos;

	mov	edx, DWORD PTR _contextPos$5[ebp]
	add	edx, 1
	mov	DWORD PTR _contextPos$5[ebp], edx
	mov	eax, DWORD PTR _xpctxt$13[ebp]
	mov	ecx, DWORD PTR _contextPos$5[ebp]
	mov	DWORD PTR [eax+72], ecx

; 11716: 
; 11717: 	    /*
; 11718: 	    * Also set the xpath document in case things like
; 11719: 	    * key() are evaluated in the predicate.
; 11720: 	    */
; 11721: 	    if ((contextNode->type != XML_NAMESPACE_DECL) &&

	mov	edx, DWORD PTR _contextNode$12[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	je	SHORT $LN11@xmlXPathCo
	mov	eax, DWORD PTR _contextNode$12[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN11@xmlXPathCo

; 11722: 		(contextNode->doc != NULL))
; 11723: 		xpctxt->doc = contextNode->doc;

	mov	ecx, DWORD PTR _xpctxt$13[ebp]
	mov	edx, DWORD PTR _contextNode$12[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx], eax
$LN11@xmlXPathCo:

; 11724: 	    /*
; 11725: 	    * Evaluate the predicate expression with 1 context node
; 11726: 	    * at a time; this node is packaged into a node set; this
; 11727: 	    * node set is handed over to the evaluation mechanism.
; 11728: 	    */
; 11729: 	    if (contextObj == NULL)

	cmp	DWORD PTR _contextObj$2[ebp], 0
	jne	SHORT $LN12@xmlXPathCo

; 11730: 		contextObj = xmlXPathCacheNewNodeSet(xpctxt, contextNode);

	mov	ecx, DWORD PTR _contextNode$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _xpctxt$13[ebp]
	push	edx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	mov	DWORD PTR _contextObj$2[ebp], eax
	jmp	SHORT $LN13@xmlXPathCo
$LN12@xmlXPathCo:

; 11731: 	    else {
; 11732: 		if (xmlXPathNodeSetAddUnique(contextObj->nodesetval,
; 11733: 		    contextNode) < 0) {

	mov	eax, DWORD PTR _contextNode$12[ebp]
	push	eax
	mov	ecx, DWORD PTR _contextObj$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN13@xmlXPathCo

; 11734: 		    ctxt->error = XPATH_MEMORY_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH

; 11735: 		    goto evaluation_exit;

	jmp	$evaluation_exit$26
$LN13@xmlXPathCo:

; 11736: 		}
; 11737: 	    }
; 11738: 
; 11739: 	    valuePush(ctxt, contextObj);

	mov	ecx, DWORD PTR _contextObj$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 11740: 
; 11741: 	    res = xmlXPathCompOpEvalToBoolean(ctxt, exprOp, 1);

	push	1
	mov	eax, DWORD PTR _exprOp$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEvalToBoolean
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _res$6[ebp], eax

; 11742: 
; 11743: 	    if ((ctxt->error != XPATH_EXPRESSION_OK) || (res == -1)) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN16@xmlXPathCo
	cmp	DWORD PTR _res$6[ebp], -1
	jne	SHORT $LN15@xmlXPathCo
$LN16@xmlXPathCo:

; 11744: 		xmlXPathNodeSetClear(set, hasNsNodes);

	mov	eax, DWORD PTR _hasNsNodes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	call	_xmlXPathNodeSetClear
	add	esp, 8

; 11745: 		newContextSize = 0;

	mov	DWORD PTR _newContextSize$4[ebp], 0

; 11746: 		goto evaluation_exit;

	jmp	$evaluation_exit$26
$LN15@xmlXPathCo:

; 11747: 	    }
; 11748: 
; 11749: 	    if (res != 0) {

	cmp	DWORD PTR _res$6[ebp], 0
	je	SHORT $LN17@xmlXPathCo

; 11750: 		newContextSize++;

	mov	edx, DWORD PTR _newContextSize$4[ebp]
	add	edx, 1
	mov	DWORD PTR _newContextSize$4[ebp], edx

; 11751: 	    } else {

	jmp	SHORT $LN18@xmlXPathCo
$LN17@xmlXPathCo:

; 11752: 		/*
; 11753: 		* Remove the entry from the initial node set.
; 11754: 		*/
; 11755: 		set->nodeTab[i] = NULL;

	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$7[ebp]
	mov	DWORD PTR [ecx+edx*4], 0

; 11756: 		if (contextNode->type == XML_NAMESPACE_DECL)

	mov	eax, DWORD PTR _contextNode$12[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN18@xmlXPathCo

; 11757: 		    xmlXPathNodeSetFreeNs((xmlNsPtr) contextNode);

	mov	ecx, DWORD PTR _contextNode$12[ebp]
	push	ecx
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4
$LN18@xmlXPathCo:

; 11758: 	    }
; 11759: 	    if (ctxt->value == contextObj) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR _contextObj$2[ebp]
	jne	SHORT $LN20@xmlXPathCo

; 11760: 		/*
; 11761: 		* Don't free the temporary XPath object holding the
; 11762: 		* context node, in order to avoid massive recreation
; 11763: 		* inside this loop.
; 11764: 		*/
; 11765: 		valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4

; 11766: 		xmlXPathNodeSetClear(contextObj->nodesetval, hasNsNodes);

	mov	edx, DWORD PTR _hasNsNodes$[ebp]
	push	edx
	mov	eax, DWORD PTR _contextObj$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetClear
	add	esp, 8

; 11767: 	    } else {

	jmp	SHORT $LN21@xmlXPathCo
$LN20@xmlXPathCo:

; 11768: 		/*
; 11769: 		* TODO: The object was lost in the evaluation machinery.
; 11770: 		*  Can this happen? Maybe in internal-error cases.
; 11771: 		*/
; 11772: 		contextObj = NULL;

	mov	DWORD PTR _contextObj$2[ebp], 0
$LN21@xmlXPathCo:

; 11773: 	    }
; 11774: 	}

	jmp	$LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 11775: 
; 11776: 	if (contextObj != NULL) {

	cmp	DWORD PTR _contextObj$2[ebp], 0
	je	SHORT $evaluation_exit$26

; 11777: 	    if (ctxt->value == contextObj)

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR _contextObj$2[ebp]
	jne	SHORT $LN23@xmlXPathCo

; 11778: 		valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
$LN23@xmlXPathCo:

; 11779: 	    xmlXPathReleaseObject(xpctxt, contextObj);

	mov	edx, DWORD PTR _contextObj$2[ebp]
	push	edx
	mov	eax, DWORD PTR _xpctxt$13[ebp]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$evaluation_exit$26:

; 11780: 	}
; 11781: evaluation_exit:
; 11782: 	if (exprRes != NULL)

	cmp	DWORD PTR _exprRes$1[ebp], 0
	je	SHORT $LN24@xmlXPathCo

; 11783: 	    xmlXPathReleaseObject(ctxt->context, exprRes);

	mov	ecx, DWORD PTR _exprRes$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN24@xmlXPathCo:

; 11784: 	/*
; 11785: 	* Reset/invalidate the context.
; 11786: 	*/
; 11787: 	xpctxt->node = oldContextNode;

	mov	ecx, DWORD PTR _xpctxt$13[ebp]
	mov	edx, DWORD PTR _oldContextNode$11[ebp]
	mov	DWORD PTR [ecx+4], edx

; 11788: 	xpctxt->doc = oldContextDoc;

	mov	eax, DWORD PTR _xpctxt$13[ebp]
	mov	ecx, DWORD PTR _oldContextDoc$10[ebp]
	mov	DWORD PTR [eax], ecx

; 11789: 	xpctxt->contextSize = oldcs;

	mov	edx, DWORD PTR _xpctxt$13[ebp]
	mov	eax, DWORD PTR _oldcs$9[ebp]
	mov	DWORD PTR [edx+68], eax

; 11790: 	xpctxt->proximityPosition = oldpp;

	mov	ecx, DWORD PTR _xpctxt$13[ebp]
	mov	edx, DWORD PTR _oldpp$8[ebp]
	mov	DWORD PTR [ecx+72], edx

; 11791: 	return(newContextSize);

	mov	eax, DWORD PTR _newContextSize$4[ebp]
	jmp	SHORT $LN1@xmlXPathCo
$LN9@xmlXPathCo:

; 11792:     }
; 11793:     return(contextSize);

	mov	eax, DWORD PTR _contextSize$[ebp]
$LN1@xmlXPathCo:

; 11794: }

	pop	edi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompOpEvalPredicate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompOpEval
_TEXT	SEGMENT
tv68 = -192						; size = 4
_rloc$1 = -188						; size = 4
_j$2 = -184						; size = 4
_i$3 = -180						; size = 4
_oldpp$4 = -176						; size = 4
_oldcs$5 = -172						; size = 4
_oldnode$6 = -168					; size = 4
_oldset$7 = -164					; size = 4
_oldlocset$8 = -160					; size = 4
_newlocset$9 = -156					; size = 4
_tmp$10 = -152						; size = 4
_obj$11 = -148						; size = 4
_res$12 = -144						; size = 4
_range$13 = -140					; size = 4
_oldlocset$14 = -136					; size = 4
_newlocset$15 = -132					; size = 4
_last$16 = -124						; size = 4
_f$17 = -116						; size = 4
_first$18 = -108					; size = 4
_val$19 = -100						; size = 4
_i$20 = -96						; size = 4
_oldpp$21 = -92						; size = 4
_oldcs$22 = -88						; size = 4
_oldDoc$23 = -84					; size = 4
_oldnode$24 = -80					; size = 4
_oldset$25 = -76					; size = 4
_newset$26 = -72					; size = 4
_tmp$27 = -68						; size = 4
_obj$28 = -64						; size = 4
_res$29 = -60						; size = 4
_URI$30 = -56						; size = 4
_frame$31 = -52						; size = 4
_i$32 = -48						; size = 4
_oldFuncURI$33 = -44					; size = 4
_oldFunc$34 = -40					; size = 4
_func$35 = -36						; size = 4
_URI$36 = -32						; size = 4
_val$37 = -28						; size = 4
_arg2$ = -24						; size = 4
_arg1$ = -20						; size = 4
_comp$ = -16						; size = 4
_ret$ = -12						; size = 4
_equal$ = -8						; size = 4
_total$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_op$ = 12						; size = 4
_xmlXPathCompOpEval PROC				; COMDAT

; 13213: {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 13214:     int total = 0;

	mov	DWORD PTR _total$[ebp], 0

; 13215:     int equal, ret;
; 13216:     xmlXPathCompExprPtr comp;
; 13217:     xmlXPathObjectPtr arg1, arg2;
; 13218: 
; 13219:     CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN22@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN22@xmlXPathCo:

; 13220:     comp = ctxt->comp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _comp$[ebp], edx

; 13221:     switch (op->op) {

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 18			; 00000012H
	ja	$LN2@xmlXPathCo
	mov	edx, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN181@xmlXPathCo[edx*4]
$LN23@xmlXPathCo:

; 13222:         case XPATH_OP_END:
; 13223:             return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN24@xmlXPathCo:

; 13224:         case XPATH_OP_AND:
; 13225:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13226: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN25@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN25@xmlXPathCo:

; 13227:             xmlXPathBooleanFunction(ctxt, 1);

	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathBooleanFunction
	add	esp, 8

; 13228:             if ((ctxt->value == NULL) || (ctxt->value->boolval == 0))

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN27@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN26@xmlXPathCo
$LN27@xmlXPathCo:

; 13229:                 return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN26@xmlXPathCo:

; 13230:             arg2 = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax

; 13231:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13232: 	    if (ctxt->error) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN28@xmlXPathCo

; 13233: 		xmlXPathFreeObject(arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	call	_xmlXPathFreeObject
	add	esp, 4

; 13234: 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN28@xmlXPathCo:

; 13235: 	    }
; 13236:             xmlXPathBooleanFunction(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathBooleanFunction
	add	esp, 8

; 13237:             if (ctxt->value != NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN29@xmlXPathCo

; 13238:                 ctxt->value->boolval &= arg2->boolval;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _arg2$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	and	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+8], eax
$LN29@xmlXPathCo:

; 13239: 	    xmlXPathReleaseObject(ctxt->context, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13240:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN30@xmlXPathCo:

; 13241:         case XPATH_OP_OR:
; 13242:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13243: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN31@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN31@xmlXPathCo:

; 13244:             xmlXPathBooleanFunction(ctxt, 1);

	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathBooleanFunction
	add	esp, 8

; 13245:             if ((ctxt->value == NULL) || (ctxt->value->boolval == 1))

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN33@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+8], 1
	jne	SHORT $LN32@xmlXPathCo
$LN33@xmlXPathCo:

; 13246:                 return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN32@xmlXPathCo:

; 13247:             arg2 = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax

; 13248:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13249: 	    if (ctxt->error) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN34@xmlXPathCo

; 13250: 		xmlXPathFreeObject(arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	call	_xmlXPathFreeObject
	add	esp, 4

; 13251: 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN34@xmlXPathCo:

; 13252: 	    }
; 13253:             xmlXPathBooleanFunction(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathBooleanFunction
	add	esp, 8

; 13254:             if (ctxt->value != NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN35@xmlXPathCo

; 13255:                 ctxt->value->boolval |= arg2->boolval;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _arg2$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	or	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+8], eax
$LN35@xmlXPathCo:

; 13256: 	    xmlXPathReleaseObject(ctxt->context, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13257:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN36@xmlXPathCo:

; 13258:         case XPATH_OP_EQUAL:
; 13259:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13260: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN37@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN37@xmlXPathCo:

; 13261:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+8], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13262: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN38@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN38@xmlXPathCo:

; 13263: 	    if (op->value)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN39@xmlXPathCo

; 13264: 		equal = xmlXPathEqualValues(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathEqualValues
	add	esp, 4
	mov	DWORD PTR _equal$[ebp], eax
	jmp	SHORT $LN40@xmlXPathCo
$LN39@xmlXPathCo:

; 13265: 	    else
; 13266: 		equal = xmlXPathNotEqualValues(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathNotEqualValues
	add	esp, 4
	mov	DWORD PTR _equal$[ebp], eax
$LN40@xmlXPathCo:

; 13267: 	    valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, equal));

	mov	ecx, DWORD PTR _equal$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 13268:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN41@xmlXPathCo:

; 13269:         case XPATH_OP_CMP:
; 13270:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13271: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN42@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN42@xmlXPathCo:

; 13272:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13273: 	    CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN43@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN43@xmlXPathCo:

; 13274:             ret = xmlXPathCompareValues(ctxt, op->value, op->value2);

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompareValues
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 13275: 	    valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, ret));

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 13276:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN44@xmlXPathCo:

; 13277:         case XPATH_OP_PLUS:
; 13278:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13279: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN45@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN45@xmlXPathCo:

; 13280:             if (op->ch2 != -1) {

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+8], -1
	je	SHORT $LN46@xmlXPathCo

; 13281:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+8], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN46@xmlXPathCo:

; 13282: 	    }
; 13283: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN47@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN47@xmlXPathCo:

; 13284:             if (op->value == 0)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN48@xmlXPathCo

; 13285:                 xmlXPathSubValues(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathSubValues
	add	esp, 4
	jmp	$LN56@xmlXPathCo
$LN48@xmlXPathCo:

; 13286:             else if (op->value == 1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+12], 1
	jne	SHORT $LN50@xmlXPathCo

; 13287:                 xmlXPathAddValues(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathAddValues
	add	esp, 4
	jmp	SHORT $LN56@xmlXPathCo
$LN50@xmlXPathCo:

; 13288:             else if (op->value == 2)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+12], 2
	jne	SHORT $LN52@xmlXPathCo

; 13289:                 xmlXPathValueFlipSign(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathValueFlipSign
	add	esp, 4
	jmp	SHORT $LN56@xmlXPathCo
$LN52@xmlXPathCo:

; 13290:             else if (op->value == 3) {

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+12], 3
	jne	SHORT $LN56@xmlXPathCo

; 13291:                 CAST_TO_NUMBER;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN55@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN55@xmlXPathCo
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN55@xmlXPathCo:

; 13292:                 CHECK_TYPE0(XPATH_NUMBER);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN57@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN56@xmlXPathCo
$LN57@xmlXPathCo:
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN56@xmlXPathCo:

; 13293:             }
; 13294:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN58@xmlXPathCo:

; 13295:         case XPATH_OP_MULT:
; 13296:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13297: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN59@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN59@xmlXPathCo:

; 13298:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13299: 	    CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN60@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN60@xmlXPathCo:

; 13300:             if (op->value == 0)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN61@xmlXPathCo

; 13301:                 xmlXPathMultValues(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathMultValues
	add	esp, 4
	jmp	SHORT $LN65@xmlXPathCo
$LN61@xmlXPathCo:

; 13302:             else if (op->value == 1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+12], 1
	jne	SHORT $LN63@xmlXPathCo

; 13303:                 xmlXPathDivValues(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathDivValues
	add	esp, 4
	jmp	SHORT $LN65@xmlXPathCo
$LN63@xmlXPathCo:

; 13304:             else if (op->value == 2)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+12], 2
	jne	SHORT $LN65@xmlXPathCo

; 13305:                 xmlXPathModValues(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathModValues
	add	esp, 4
$LN65@xmlXPathCo:

; 13306:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN66@xmlXPathCo:

; 13307:         case XPATH_OP_UNION:
; 13308:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13309: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN67@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN67@xmlXPathCo:

; 13310:             total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+8], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13311: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN68@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN68@xmlXPathCo:

; 13312: 
; 13313:             arg2 = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax

; 13314:             arg1 = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg1$[ebp], eax

; 13315:             if ((arg1 == NULL) || (arg1->type != XPATH_NODESET) ||
; 13316:                 (arg2 == NULL) || (arg2->type != XPATH_NODESET)) {

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN70@xmlXPathCo
	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN70@xmlXPathCo
	cmp	DWORD PTR _arg2$[ebp], 0
	je	SHORT $LN70@xmlXPathCo
	mov	ecx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN69@xmlXPathCo
$LN70@xmlXPathCo:

; 13317: 	        xmlXPathReleaseObject(ctxt->context, arg1);

	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13318: 	        xmlXPathReleaseObject(ctxt->context, arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13319:                 XP_ERROR0(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN69@xmlXPathCo:

; 13320:             }
; 13321: 
; 13322: 	    if ((arg1->nodesetval == NULL) ||

	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN72@xmlXPathCo
	mov	ecx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN71@xmlXPathCo
	mov	edx, DWORD PTR _arg2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN71@xmlXPathCo
$LN72@xmlXPathCo:

; 13323: 		((arg2->nodesetval != NULL) &&
; 13324: 		 (arg2->nodesetval->nodeNr != 0)))
; 13325: 	    {
; 13326: 		arg1->nodesetval = xmlXPathNodeSetMerge(arg1->nodesetval,

	mov	ecx, DWORD PTR _arg2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetMerge
	add	esp, 8
	mov	edx, DWORD PTR _arg1$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN71@xmlXPathCo:

; 13327: 							arg2->nodesetval);
; 13328: 	    }
; 13329: 
; 13330:             valuePush(ctxt, arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 13331: 	    xmlXPathReleaseObject(ctxt->context, arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13332:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN73@xmlXPathCo:

; 13333:         case XPATH_OP_ROOT:
; 13334:             xmlXPathRoot(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRoot
	add	esp, 4

; 13335:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN74@xmlXPathCo:

; 13336:         case XPATH_OP_NODE:
; 13337:             if (op->ch1 != -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN75@xmlXPathCo

; 13338:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN75@xmlXPathCo:

; 13339: 	    CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN76@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN76@xmlXPathCo:

; 13340:             if (op->ch2 != -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	SHORT $LN77@xmlXPathCo

; 13341:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN77@xmlXPathCo:

; 13342: 	    CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN78@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN78@xmlXPathCo:

; 13343: 	    valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 13344: 		ctxt->context->node));
; 13345:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN79@xmlXPathCo:

; 13346:         case XPATH_OP_COLLECT:{
; 13347:                 if (op->ch1 == -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	jne	SHORT $LN80@xmlXPathCo

; 13348:                     return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN80@xmlXPathCo:

; 13349: 
; 13350:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13351: 		CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN81@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN81@xmlXPathCo:

; 13352: 
; 13353:                 total += xmlXPathNodeCollectAndTest(ctxt, op, NULL, NULL, 0);

	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNodeCollectAndTest
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13354:                 return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN82@xmlXPathCo:

; 13355:             }
; 13356:         case XPATH_OP_VALUE:
; 13357:             valuePush(ctxt,

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheObjectCopy
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 13358:                       xmlXPathCacheObjectCopy(ctxt->context,
; 13359: 			(xmlXPathObjectPtr) op->value4));
; 13360:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN83@xmlXPathCo:

; 13361:         case XPATH_OP_VARIABLE:{
; 13362: 		xmlXPathObjectPtr val;
; 13363: 
; 13364:                 if (op->ch1 != -1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN84@xmlXPathCo

; 13365:                     total +=

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN84@xmlXPathCo:

; 13366:                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
; 13367:                 if (op->value5 == NULL) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN85@xmlXPathCo

; 13368: 		    val = xmlXPathVariableLookup(ctxt->context, op->value4);

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathVariableLookup
	add	esp, 8
	mov	DWORD PTR _val$37[ebp], eax

; 13369: 		    if (val == NULL)

	cmp	DWORD PTR _val$37[ebp], 0
	jne	SHORT $LN87@xmlXPathCo

; 13370: 			XP_ERROR0(XPATH_UNDEF_VARIABLE_ERROR);

	push	5
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN87@xmlXPathCo:

; 13371:                     valuePush(ctxt, val);

	mov	eax, DWORD PTR _val$37[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 13372: 		} else {

	jmp	$LN86@xmlXPathCo
$LN85@xmlXPathCo:

; 13373:                     const xmlChar *URI;
; 13374: 
; 13375:                     URI = xmlXPathNsLookup(ctxt->context, op->value5);

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathNsLookup
	add	esp, 8
	mov	DWORD PTR _URI$36[ebp], eax

; 13376:                     if (URI == NULL) {

	cmp	DWORD PTR _URI$36[ebp], 0
	jne	SHORT $LN88@xmlXPathCo

; 13377:                         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	push	OFFSET ??_C@_0DO@IDAPNIMJ@xmlXPathCompOpEval?3?5variable?5?$CFs@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 13378:             "xmlXPathCompOpEval: variable %s bound to undefined prefix %s\n",
; 13379:                                     (char *) op->value4, (char *)op->value5);
; 13380:                         ctxt->error = XPATH_UNDEF_PREFIX_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 19			; 00000013H

; 13381:                         return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN88@xmlXPathCo:

; 13382:                     }
; 13383: 		    val = xmlXPathVariableLookupNS(ctxt->context,

	mov	ecx, DWORD PTR _URI$36[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathVariableLookupNS
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$37[ebp], eax

; 13384:                                                        op->value4, URI);
; 13385: 		    if (val == NULL)

	cmp	DWORD PTR _val$37[ebp], 0
	jne	SHORT $LN89@xmlXPathCo

; 13386: 			XP_ERROR0(XPATH_UNDEF_VARIABLE_ERROR);

	push	5
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN89@xmlXPathCo:

; 13387:                     valuePush(ctxt, val);

	mov	ecx, DWORD PTR _val$37[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
$LN86@xmlXPathCo:

; 13388:                 }
; 13389:                 return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN90@xmlXPathCo:

; 13390:             }
; 13391:         case XPATH_OP_FUNCTION:{
; 13392:                 xmlXPathFunction func;
; 13393:                 const xmlChar *oldFunc, *oldFuncURI;
; 13394: 		int i;
; 13395:                 int frame;
; 13396: 
; 13397:                 frame = xmlXPathSetFrame(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathSetFrame
	add	esp, 4
	mov	DWORD PTR _frame$31[ebp], eax

; 13398:                 if (op->ch1 != -1) {

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN92@xmlXPathCo

; 13399:                     total +=

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13400:                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
; 13401:                     if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN92@xmlXPathCo

; 13402:                         xmlXPathPopFrame(ctxt, frame);

	mov	ecx, DWORD PTR _frame$31[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathPopFrame
	add	esp, 8

; 13403:                         return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN92@xmlXPathCo:

; 13404:                     }
; 13405:                 }
; 13406: 		if (ctxt->valueNr < ctxt->valueFrame + op->value) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR _op$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], ecx
	jge	SHORT $LN93@xmlXPathCo

; 13407: 		    xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CF@LMIGLEJC@xmlXPathCompOpEval?3?5parameter?5e@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 13408: 			    "xmlXPathCompOpEval: parameter error\n");
; 13409: 		    ctxt->error = XPATH_INVALID_OPERAND;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 10			; 0000000aH

; 13410:                     xmlXPathPopFrame(ctxt, frame);

	mov	ecx, DWORD PTR _frame$31[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathPopFrame
	add	esp, 8

; 13411: 		    return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN93@xmlXPathCo:

; 13412: 		}
; 13413: 		for (i = 0; i < op->value; i++) {

	mov	DWORD PTR _i$32[ebp], 0
	jmp	SHORT $LN6@xmlXPathCo
$LN4@xmlXPathCo:
	mov	eax, DWORD PTR _i$32[ebp]
	add	eax, 1
	mov	DWORD PTR _i$32[ebp], eax
$LN6@xmlXPathCo:
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR _i$32[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jge	SHORT $LN5@xmlXPathCo

; 13414: 		    if (ctxt->valueTab[(ctxt->valueNr - 1) - i] == NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	sub	ecx, 1
	sub	ecx, DWORD PTR _i$32[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+ecx*4], 0
	jne	SHORT $LN94@xmlXPathCo

; 13415: 			xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CF@LMIGLEJC@xmlXPathCompOpEval?3?5parameter?5e@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 13416: 				"xmlXPathCompOpEval: parameter error\n");
; 13417: 			ctxt->error = XPATH_INVALID_OPERAND;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 10			; 0000000aH

; 13418:                         xmlXPathPopFrame(ctxt, frame);

	mov	ecx, DWORD PTR _frame$31[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathPopFrame
	add	esp, 8

; 13419: 			return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN94@xmlXPathCo:

; 13420: 		    }
; 13421:                 }

	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 13422:                 if (op->cache != NULL)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN95@xmlXPathCo

; 13423:                     func = op->cache;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _func$35[ebp], edx
	jmp	$LN96@xmlXPathCo
$LN95@xmlXPathCo:

; 13424:                 else {
; 13425:                     const xmlChar *URI = NULL;

	mov	DWORD PTR _URI$30[ebp], 0

; 13426: 
; 13427:                     if (op->value5 == NULL)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN97@xmlXPathCo

; 13428:                         func =

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathFunctionLookup
	add	esp, 8
	mov	DWORD PTR _func$35[ebp], eax
	jmp	$LN98@xmlXPathCo
$LN97@xmlXPathCo:

; 13429:                             xmlXPathFunctionLookup(ctxt->context,
; 13430:                                                    op->value4);
; 13431:                     else {
; 13432:                         URI = xmlXPathNsLookup(ctxt->context, op->value5);

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathNsLookup
	add	esp, 8
	mov	DWORD PTR _URI$30[ebp], eax

; 13433:                         if (URI == NULL) {

	cmp	DWORD PTR _URI$30[ebp], 0
	jne	SHORT $LN99@xmlXPathCo

; 13434:                             xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	push	OFFSET ??_C@_0DO@MGJDMDIG@xmlXPathCompOpEval?3?5function?5?$CFs@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 13435:             "xmlXPathCompOpEval: function %s bound to undefined prefix %s\n",
; 13436:                                     (char *)op->value4, (char *)op->value5);
; 13437:                             xmlXPathPopFrame(ctxt, frame);

	mov	eax, DWORD PTR _frame$31[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathPopFrame
	add	esp, 8

; 13438:                             ctxt->error = XPATH_UNDEF_PREFIX_ERROR;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 19			; 00000013H

; 13439:                             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN99@xmlXPathCo:

; 13440:                         }
; 13441:                         func = xmlXPathFunctionLookupNS(ctxt->context,

	mov	eax, DWORD PTR _URI$30[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathFunctionLookupNS
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _func$35[ebp], eax
$LN98@xmlXPathCo:

; 13442:                                                         op->value4, URI);
; 13443:                     }
; 13444:                     if (func == NULL) {

	cmp	DWORD PTR _func$35[ebp], 0
	jne	SHORT $LN100@xmlXPathCo

; 13445:                         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	push	OFFSET ??_C@_0CL@KAMILNDJ@xmlXPathCompOpEval?3?5function?5?$CFs@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 13446:                                 "xmlXPathCompOpEval: function %s not found\n",
; 13447:                                         (char *)op->value4);
; 13448:                         XP_ERROR0(XPATH_UNKNOWN_FUNC_ERROR);

	push	9
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN100@xmlXPathCo:

; 13449:                     }
; 13450:                     op->cache = func;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR _func$35[ebp]
	mov	DWORD PTR [ecx+32], edx

; 13451:                     op->cacheURI = (void *) URI;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR _URI$30[ebp]
	mov	DWORD PTR [eax+36], ecx
$LN96@xmlXPathCo:

; 13452:                 }
; 13453:                 oldFunc = ctxt->context->function;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+104]
	mov	DWORD PTR _oldFunc$34[ebp], ecx

; 13454:                 oldFuncURI = ctxt->context->functionURI;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR _oldFuncURI$33[ebp], ecx

; 13455:                 ctxt->context->function = op->value4;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+104], edx

; 13456:                 ctxt->context->functionURI = op->cacheURI;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+108], eax

; 13457:                 func(ctxt, op->value);

	mov	esi, esp
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	DWORD PTR _func$35[ebp]
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 13458:                 ctxt->context->function = oldFunc;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldFunc$34[ebp]
	mov	DWORD PTR [edx+104], eax

; 13459:                 ctxt->context->functionURI = oldFuncURI;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldFuncURI$33[ebp]
	mov	DWORD PTR [edx+108], eax

; 13460:                 xmlXPathPopFrame(ctxt, frame);

	mov	ecx, DWORD PTR _frame$31[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathPopFrame
	add	esp, 8

; 13461:                 return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN101@xmlXPathCo:

; 13462:             }
; 13463:         case XPATH_OP_ARG:
; 13464:             if (op->ch1 != -1) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN103@xmlXPathCo

; 13465:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13466: 	        CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN103@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN103@xmlXPathCo:

; 13467:             }
; 13468:             if (op->ch2 != -1) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	SHORT $LN105@xmlXPathCo

; 13469:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13470: 	        CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN105@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN105@xmlXPathCo:

; 13471: 	    }
; 13472:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN106@xmlXPathCo:

; 13473:         case XPATH_OP_PREDICATE:
; 13474:         case XPATH_OP_FILTER:{
; 13475:                 xmlXPathObjectPtr res;
; 13476:                 xmlXPathObjectPtr obj, tmp;
; 13477:                 xmlNodeSetPtr newset = NULL;

	mov	DWORD PTR _newset$26[ebp], 0

; 13478:                 xmlNodeSetPtr oldset;
; 13479:                 xmlNodePtr oldnode;
; 13480: 		xmlDocPtr oldDoc;
; 13481:                 int oldcs, oldpp;
; 13482:                 int i;
; 13483: 
; 13484:                 /*
; 13485:                  * Optimization for ()[1] selection i.e. the first elem
; 13486:                  */
; 13487:                 if ((op->ch1 != -1) && (op->ch2 != -1) &&
; 13488: #ifdef XP_OPTIMIZED_FILTER_FIRST
; 13489: 		    /*
; 13490: 		    * FILTER TODO: Can we assume that the inner processing
; 13491: 		    *  will result in an ordered list if we have an
; 13492: 		    *  XPATH_OP_FILTER?
; 13493: 		    *  What about an additional field or flag on
; 13494: 		    *  xmlXPathObject like @sorted ? This way we wouln'd need
; 13495: 		    *  to assume anything, so it would be more robust and
; 13496: 		    *  easier to optimize.
; 13497: 		    */
; 13498:                     ((comp->steps[op->ch1].op == XPATH_OP_SORT) || /* 18 */
; 13499: 		     (comp->steps[op->ch1].op == XPATH_OP_FILTER)) && /* 17 */

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	$LN109@xmlXPathCo
	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+8], -1
	je	$LN109@xmlXPathCo
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 17			; 00000011H
	je	SHORT $LN108@xmlXPathCo
	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+ecx], 16			; 00000010H
	jne	$LN109@xmlXPathCo
$LN108@xmlXPathCo:
	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+edx], 11			; 0000000bH
	jne	$LN109@xmlXPathCo

; 13500: #else
; 13501: 		    (comp->steps[op->ch1].op == XPATH_OP_SORT) &&
; 13502: #endif
; 13503:                     (comp->steps[op->ch2].op == XPATH_OP_VALUE)) { /* 12 */
; 13504:                     xmlXPathObjectPtr val;
; 13505: 
; 13506:                     val = comp->steps[op->ch2].value4;

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+8], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax+24]
	mov	DWORD PTR _val$19[ebp], eax

; 13507:                     if ((val != NULL) && (val->type == XPATH_NUMBER) &&

	cmp	DWORD PTR _val$19[ebp], 0
	je	$LN109@xmlXPathCo
	mov	ecx, DWORD PTR _val$19[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	$LN109@xmlXPathCo
	mov	edx, DWORD PTR _val$19[ebp]
	movsd	xmm0, QWORD PTR [edx+16]
	ucomisd	xmm0, QWORD PTR __real@3ff0000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	$LN109@xmlXPathCo

; 13508:                         (val->floatval == 1.0)) {
; 13509:                         xmlNodePtr first = NULL;

	mov	DWORD PTR _first$18[ebp], 0

; 13510: 
; 13511:                         total +=

	lea	eax, DWORD PTR _first$18[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEvalFirst
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13512:                             xmlXPathCompOpEvalFirst(ctxt,
; 13513:                                                     &comp->steps[op->ch1],
; 13514:                                                     &first);
; 13515: 			CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN110@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN110@xmlXPathCo:

; 13516:                         /*
; 13517:                          * The nodeset should be in document order,
; 13518:                          * Keep only the first value
; 13519:                          */
; 13520:                         if ((ctxt->value != NULL) &&
; 13521:                             (ctxt->value->type == XPATH_NODESET) &&
; 13522:                             (ctxt->value->nodesetval != NULL) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN111@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 1
	jne	SHORT $LN111@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN111@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 1
	jle	SHORT $LN111@xmlXPathCo

; 13523:                             (ctxt->value->nodesetval->nodeNr > 1))
; 13524:                             xmlXPathNodeSetClearFromPos(ctxt->value->nodesetval,

	push	1
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetClearFromPos
	add	esp, 12					; 0000000cH
$LN111@xmlXPathCo:

; 13525:                                                         1, 1);
; 13526:                         return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN109@xmlXPathCo:

; 13527:                     }
; 13528:                 }
; 13529:                 /*
; 13530:                  * Optimization for ()[last()] selection i.e. the last elem
; 13531:                  */
; 13532:                 if ((op->ch1 != -1) && (op->ch2 != -1) &&
; 13533:                     (comp->steps[op->ch1].op == XPATH_OP_SORT) &&

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+4], -1
	je	$LN113@xmlXPathCo
	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	$LN113@xmlXPathCo
	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+edx], 17			; 00000011H
	jne	$LN113@xmlXPathCo
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+8], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+eax], 17			; 00000011H
	jne	$LN113@xmlXPathCo

; 13534:                     (comp->steps[op->ch2].op == XPATH_OP_SORT)) {
; 13535:                     int f = comp->steps[op->ch2].ch1;

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+8], 40
	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR _f$17[ebp], ecx

; 13536: 
; 13537:                     if ((f != -1) &&
; 13538:                         (comp->steps[f].op == XPATH_OP_FUNCTION) &&
; 13539:                         (comp->steps[f].value5 == NULL) &&
; 13540:                         (comp->steps[f].value == 0) &&
; 13541:                         (comp->steps[f].value4 != NULL) &&

	cmp	DWORD PTR _f$17[ebp], -1
	je	$LN113@xmlXPathCo
	imul	edx, DWORD PTR _f$17[ebp], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+edx], 13			; 0000000dH
	jne	$LN113@xmlXPathCo
	imul	edx, DWORD PTR _f$17[ebp], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+edx+28], 0
	jne	$LN113@xmlXPathCo
	imul	edx, DWORD PTR _f$17[ebp], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+edx+12], 0
	jne	$LN113@xmlXPathCo
	imul	edx, DWORD PTR _f$17[ebp], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+edx+24], 0
	je	$LN113@xmlXPathCo
	push	OFFSET ??_C@_04PLGBGIDD@last@
	imul	edx, DWORD PTR _f$17[ebp], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx+24]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN113@xmlXPathCo

; 13542:                         (xmlStrEqual
; 13543:                          (comp->steps[f].value4, BAD_CAST "last"))) {
; 13544:                         xmlNodePtr last = NULL;

	mov	DWORD PTR _last$16[ebp], 0

; 13545: 
; 13546:                         total +=

	lea	eax, DWORD PTR _last$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEvalLast
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13547:                             xmlXPathCompOpEvalLast(ctxt,
; 13548:                                                    &comp->steps[op->ch1],
; 13549:                                                    &last);
; 13550: 			CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN114@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN114@xmlXPathCo:

; 13551:                         /*
; 13552:                          * The nodeset should be in document order,
; 13553:                          * Keep only the last value
; 13554:                          */
; 13555:                         if ((ctxt->value != NULL) &&
; 13556:                             (ctxt->value->type == XPATH_NODESET) &&
; 13557:                             (ctxt->value->nodesetval != NULL) &&
; 13558:                             (ctxt->value->nodesetval->nodeTab != NULL) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN115@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 1
	jne	SHORT $LN115@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN115@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN115@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 1
	jle	SHORT $LN115@xmlXPathCo

; 13559:                             (ctxt->value->nodesetval->nodeNr > 1))
; 13560:                             xmlXPathNodeSetKeepLast(ctxt->value->nodesetval);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetKeepLast
	add	esp, 4
$LN115@xmlXPathCo:

; 13561:                         return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN113@xmlXPathCo:

; 13562:                     }
; 13563:                 }
; 13564: 		/*
; 13565: 		* Process inner predicates first.
; 13566: 		* Example "index[parent::book][1]":
; 13567: 		* ...
; 13568: 		*   PREDICATE   <-- we are here "[1]"
; 13569: 		*     PREDICATE <-- process "[parent::book]" first
; 13570: 		*       SORT
; 13571: 		*         COLLECT  'parent' 'name' 'node' book
; 13572: 		*           NODE
; 13573: 		*     ELEM Object is a number : 1
; 13574: 		*/
; 13575:                 if (op->ch1 != -1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+4], -1
	je	SHORT $LN116@xmlXPathCo

; 13576:                     total +=

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN116@xmlXPathCo:

; 13577:                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
; 13578: 		CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN117@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN117@xmlXPathCo:

; 13579:                 if (op->ch2 == -1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+8], -1
	jne	SHORT $LN118@xmlXPathCo

; 13580:                     return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN118@xmlXPathCo:

; 13581:                 if (ctxt->value == NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN119@xmlXPathCo

; 13582:                     return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN119@xmlXPathCo:

; 13583: 
; 13584: #ifdef LIBXML_XPTR_ENABLED
; 13585:                 /*
; 13586:                  * Hum are we filtering the result of an XPointer expression
; 13587:                  */
; 13588:                 if (ctxt->value->type == XPATH_LOCATIONSET) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 7
	jne	$LN120@xmlXPathCo

; 13589:                     xmlLocationSetPtr newlocset = NULL;

	mov	DWORD PTR _newlocset$15[ebp], 0

; 13590:                     xmlLocationSetPtr oldlocset;
; 13591: 
; 13592:                     /*
; 13593:                      * Extract the old locset, and then evaluate the result of the
; 13594:                      * expression for all the element in the locset. use it to grow
; 13595:                      * up a new locset.
; 13596:                      */
; 13597:                     CHECK_TYPE0(XPATH_LOCATIONSET);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN122@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 7
	je	SHORT $LN121@xmlXPathCo
$LN122@xmlXPathCo:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN121@xmlXPathCo:

; 13598: 
; 13599:                     if ((ctxt->value->user == NULL) ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN124@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN123@xmlXPathCo
$LN124@xmlXPathCo:

; 13600:                         (((xmlLocationSetPtr) ctxt->value->user)->locNr == 0))
; 13601:                         return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN123@xmlXPathCo:

; 13602: 
; 13603:                     obj = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$28[ebp], eax

; 13604:                     oldlocset = obj->user;

	mov	ecx, DWORD PTR _obj$28[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _oldlocset$14[ebp], edx

; 13605:                     oldnode = ctxt->context->node;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _oldnode$24[ebp], edx

; 13606:                     oldcs = ctxt->context->contextSize;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _oldcs$22[ebp], edx

; 13607:                     oldpp = ctxt->context->proximityPosition;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _oldpp$21[ebp], edx

; 13608: 
; 13609:                     newlocset = xmlXPtrLocationSetCreate(NULL);

	push	0
	call	_xmlXPtrLocationSetCreate
	add	esp, 4
	mov	DWORD PTR _newlocset$15[ebp], eax

; 13610: 
; 13611:                     for (i = 0; i < oldlocset->locNr; i++) {

	mov	DWORD PTR _i$20[ebp], 0
	jmp	SHORT $LN9@xmlXPathCo
$LN7@xmlXPathCo:
	mov	eax, DWORD PTR _i$20[ebp]
	add	eax, 1
	mov	DWORD PTR _i$20[ebp], eax
$LN9@xmlXPathCo:
	mov	ecx, DWORD PTR _oldlocset$14[ebp]
	mov	edx, DWORD PTR _i$20[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN8@xmlXPathCo

; 13612:                         /*
; 13613:                          * Run the evaluation with a node list made of a
; 13614:                          * single item in the nodelocset.
; 13615:                          */
; 13616:                         ctxt->context->node = oldlocset->locTab[i]->user;

	mov	eax, DWORD PTR _oldlocset$14[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$20[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+4], eax

; 13617:                         ctxt->context->contextSize = oldlocset->locNr;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldlocset$14[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+68], ecx

; 13618:                         ctxt->context->proximityPosition = i + 1;

	mov	edx, DWORD PTR _i$20[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+72], edx

; 13619: 			tmp = xmlXPathCacheNewNodeSet(ctxt->context,

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	mov	DWORD PTR _tmp$27[ebp], eax

; 13620: 			    ctxt->context->node);
; 13621:                         valuePush(ctxt, tmp);

	mov	ecx, DWORD PTR _tmp$27[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 13622: 
; 13623:                         if (op->ch2 != -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	SHORT $LN125@xmlXPathCo

; 13624:                             total +=

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN125@xmlXPathCo:

; 13625:                                 xmlXPathCompOpEval(ctxt,
; 13626:                                                    &comp->steps[op->ch2]);
; 13627: 			if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN126@xmlXPathCo

; 13628:                             xmlXPtrFreeLocationSet(newlocset);

	mov	eax, DWORD PTR _newlocset$15[ebp]
	push	eax
	call	_xmlXPtrFreeLocationSet
	add	esp, 4

; 13629:                             goto filter_xptr_error;

	jmp	$filter_xptr_error$182
$LN126@xmlXPathCo:

; 13630: 			}
; 13631: 
; 13632:                         /*
; 13633:                          * The result of the evaluation need to be tested to
; 13634:                          * decided whether the filter succeeded or not
; 13635:                          */
; 13636:                         res = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$29[ebp], eax

; 13637:                         if (xmlXPathEvaluatePredicateResult(ctxt, res)) {

	mov	edx, DWORD PTR _res$29[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathEvaluatePredicateResult
	add	esp, 8
	test	eax, eax
	je	SHORT $LN127@xmlXPathCo

; 13638:                             xmlXPtrLocationSetAdd(newlocset,

	mov	ecx, DWORD PTR _oldlocset$14[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$20[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_xmlXPathObjectCopy
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _newlocset$15[ebp]
	push	edx
	call	_xmlXPtrLocationSetAdd
	add	esp, 8
$LN127@xmlXPathCo:

; 13639:                                                   xmlXPathObjectCopy
; 13640:                                                   (oldlocset->locTab[i]));
; 13641:                         }
; 13642: 
; 13643:                         /*
; 13644:                          * Cleanup
; 13645:                          */
; 13646:                         if (res != NULL) {

	cmp	DWORD PTR _res$29[ebp], 0
	je	SHORT $LN128@xmlXPathCo

; 13647: 			    xmlXPathReleaseObject(ctxt->context, res);

	mov	eax, DWORD PTR _res$29[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN128@xmlXPathCo:

; 13648: 			}
; 13649:                         if (ctxt->value == tmp) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _tmp$27[ebp]
	jne	SHORT $LN129@xmlXPathCo

; 13650:                             res = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$29[ebp], eax

; 13651: 			    xmlXPathReleaseObject(ctxt->context, res);

	mov	eax, DWORD PTR _res$29[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN129@xmlXPathCo:

; 13652:                         }
; 13653:                     }

	jmp	$LN7@xmlXPathCo
$LN8@xmlXPathCo:

; 13654: 
; 13655:                     /*
; 13656:                      * The result is used as the new evaluation locset.
; 13657:                      */
; 13658:                     valuePush(ctxt, xmlXPtrWrapLocationSet(newlocset));

	mov	eax, DWORD PTR _newlocset$15[ebp]
	push	eax
	call	_xmlXPtrWrapLocationSet
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8
$filter_xptr_error$182:

; 13659: filter_xptr_error:
; 13660: 		    xmlXPathReleaseObject(ctxt->context, obj);

	mov	edx, DWORD PTR _obj$28[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13661:                     ctxt->context->node = oldnode;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _oldnode$24[ebp]
	mov	DWORD PTR [eax+4], ecx

; 13662:                     ctxt->context->contextSize = oldcs;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _oldcs$22[ebp]
	mov	DWORD PTR [eax+68], ecx

; 13663:                     ctxt->context->proximityPosition = oldpp;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _oldpp$21[ebp]
	mov	DWORD PTR [eax+72], ecx

; 13664:                     return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN120@xmlXPathCo:

; 13665:                 }
; 13666: #endif /* LIBXML_XPTR_ENABLED */
; 13667: 
; 13668:                 /*
; 13669:                  * Extract the old set, and then evaluate the result of the
; 13670:                  * expression for all the element in the set. use it to grow
; 13671:                  * up a new set.
; 13672:                  */
; 13673:                 CHECK_TYPE0(XPATH_NODESET);

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN131@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN130@xmlXPathCo
$LN131@xmlXPathCo:
	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN130@xmlXPathCo:

; 13674: 
; 13675:                 if ((ctxt->value->nodesetval != NULL) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+4], 0
	je	$LN132@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 0
	je	$LN132@xmlXPathCo

; 13676:                     (ctxt->value->nodesetval->nodeNr != 0)) {
; 13677:                     obj = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$28[ebp], eax

; 13678:                     oldset = obj->nodesetval;

	mov	eax, DWORD PTR _obj$28[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _oldset$25[ebp], ecx

; 13679:                     oldnode = ctxt->context->node;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _oldnode$24[ebp], ecx

; 13680:                     oldDoc = ctxt->context->doc;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _oldDoc$23[ebp], ecx

; 13681:                     oldcs = ctxt->context->contextSize;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _oldcs$22[ebp], ecx

; 13682:                     oldpp = ctxt->context->proximityPosition;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _oldpp$21[ebp], ecx

; 13683: 		    tmp = NULL;

	mov	DWORD PTR _tmp$27[ebp], 0

; 13684:                     /*
; 13685:                      * Initialize the new set.
; 13686: 		     * Also set the xpath document in case things like
; 13687: 		     * key() evaluation are attempted on the predicate
; 13688:                      */
; 13689:                     newset = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _newset$26[ebp], eax

; 13690: 		    /*
; 13691: 		    * SPEC XPath 1.0:
; 13692: 		    *  "For each node in the node-set to be filtered, the
; 13693: 		    *  PredicateExpr is evaluated with that node as the
; 13694: 		    *  context node, with the number of nodes in the
; 13695: 		    *  node-set as the context size, and with the proximity
; 13696: 		    *  position of the node in the node-set with respect to
; 13697: 		    *  the axis as the context position;"
; 13698: 		    * @oldset is the node-set" to be filtered.
; 13699: 		    *
; 13700: 		    * SPEC XPath 1.0:
; 13701: 		    *  "only predicates change the context position and
; 13702: 		    *  context size (see [2.4 Predicates])."
; 13703: 		    * Example:
; 13704: 		    *   node-set  context pos
; 13705: 		    *    nA         1
; 13706: 		    *    nB         2
; 13707: 		    *    nC         3
; 13708: 		    *   After applying predicate [position() > 1] :
; 13709: 		    *   node-set  context pos
; 13710: 		    *    nB         1
; 13711: 		    *    nC         2
; 13712: 		    *
; 13713: 		    * removed the first node in the node-set, then
; 13714: 		    * the context position of the
; 13715: 		    */
; 13716:                     for (i = 0; i < oldset->nodeNr; i++) {

	mov	DWORD PTR _i$20[ebp], 0
	jmp	SHORT $LN12@xmlXPathCo
$LN10@xmlXPathCo:
	mov	edx, DWORD PTR _i$20[ebp]
	add	edx, 1
	mov	DWORD PTR _i$20[ebp], edx
$LN12@xmlXPathCo:
	mov	eax, DWORD PTR _oldset$25[ebp]
	mov	ecx, DWORD PTR _i$20[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN11@xmlXPathCo

; 13717:                         /*
; 13718:                          * Run the evaluation with a node list made of
; 13719:                          * a single item in the nodeset.
; 13720:                          */
; 13721:                         ctxt->context->node = oldset->nodeTab[i];

	mov	edx, DWORD PTR _oldset$25[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$20[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+4], eax

; 13722: 			if ((oldset->nodeTab[i]->type != XML_NAMESPACE_DECL) &&

	mov	ecx, DWORD PTR _oldset$25[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$20[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	je	SHORT $LN133@xmlXPathCo
	mov	edx, DWORD PTR _oldset$25[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$20[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN133@xmlXPathCo

; 13723: 			    (oldset->nodeTab[i]->doc != NULL))
; 13724: 		            ctxt->context->doc = oldset->nodeTab[i]->doc;

	mov	eax, DWORD PTR _oldset$25[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$20[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax+32]
	mov	DWORD PTR [edx], eax
$LN133@xmlXPathCo:

; 13725: 			if (tmp == NULL) {

	cmp	DWORD PTR _tmp$27[ebp], 0
	jne	SHORT $LN134@xmlXPathCo

; 13726: 			    tmp = xmlXPathCacheNewNodeSet(ctxt->context,

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	mov	DWORD PTR _tmp$27[ebp], eax

; 13727: 				ctxt->context->node);
; 13728: 			} else {

	jmp	SHORT $LN136@xmlXPathCo
$LN134@xmlXPathCo:

; 13729: 			    if (xmlXPathNodeSetAddUnique(tmp->nodesetval,
; 13730: 				               ctxt->context->node) < 0) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _tmp$27[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN136@xmlXPathCo

; 13731: 				ctxt->error = XPATH_MEMORY_ERROR;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 15			; 0000000fH
$LN136@xmlXPathCo:

; 13732: 			    }
; 13733: 			}
; 13734:                         valuePush(ctxt, tmp);

	mov	eax, DWORD PTR _tmp$27[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 13735:                         ctxt->context->contextSize = oldset->nodeNr;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _oldset$25[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+68], edx

; 13736:                         ctxt->context->proximityPosition = i + 1;

	mov	eax, DWORD PTR _i$20[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+72], eax

; 13737: 			/*
; 13738: 			* Evaluate the predicate against the context node.
; 13739: 			* Can/should we optimize position() predicates
; 13740: 			* here (e.g. "[1]")?
; 13741: 			*/
; 13742:                         if (op->ch2 != -1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+8], -1
	je	SHORT $LN137@xmlXPathCo

; 13743:                             total +=

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+8], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN137@xmlXPathCo:

; 13744:                                 xmlXPathCompOpEval(ctxt,
; 13745:                                                    &comp->steps[op->ch2]);
; 13746: 			if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN138@xmlXPathCo

; 13747: 			    xmlXPathFreeNodeSet(newset);

	mov	eax, DWORD PTR _newset$26[ebp]
	push	eax
	call	_xmlXPathFreeNodeSet
	add	esp, 4

; 13748:                             goto filter_error;

	jmp	$filter_error$183
$LN138@xmlXPathCo:

; 13749: 			}
; 13750: 
; 13751:                         /*
; 13752:                          * The result of the evaluation needs to be tested to
; 13753:                          * decide whether the filter succeeded or not
; 13754:                          */
; 13755: 			/*
; 13756: 			* OPTIMIZE TODO: Can we use
; 13757: 			* xmlXPathNodeSetAdd*Unique()* instead?
; 13758: 			*/
; 13759:                         res = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$29[ebp], eax

; 13760:                         if (xmlXPathEvaluatePredicateResult(ctxt, res)) {

	mov	edx, DWORD PTR _res$29[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathEvaluatePredicateResult
	add	esp, 8
	test	eax, eax
	je	SHORT $LN140@xmlXPathCo

; 13761:                             if (xmlXPathNodeSetAdd(newset, oldset->nodeTab[i])
; 13762: 			        < 0)

	mov	ecx, DWORD PTR _oldset$25[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$20[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	mov	edx, DWORD PTR _newset$26[ebp]
	push	edx
	call	_xmlXPathNodeSetAdd
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN140@xmlXPathCo

; 13763: 				ctxt->error = XPATH_MEMORY_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH
$LN140@xmlXPathCo:

; 13764:                         }
; 13765: 
; 13766:                         /*
; 13767:                          * Cleanup
; 13768:                          */
; 13769:                         if (res != NULL) {

	cmp	DWORD PTR _res$29[ebp], 0
	je	SHORT $LN141@xmlXPathCo

; 13770: 			    xmlXPathReleaseObject(ctxt->context, res);

	mov	ecx, DWORD PTR _res$29[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN141@xmlXPathCo:

; 13771: 			}
; 13772:                         if (ctxt->value == tmp) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR _tmp$27[ebp]
	jne	SHORT $LN142@xmlXPathCo

; 13773:                             valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4

; 13774: 			    xmlXPathNodeSetClear(tmp->nodesetval, 1);

	push	1
	mov	ecx, DWORD PTR _tmp$27[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetClear
	add	esp, 8

; 13775: 			    /*
; 13776: 			    * Don't free the temporary nodeset
; 13777: 			    * in order to avoid massive recreation inside this
; 13778: 			    * loop.
; 13779: 			    */
; 13780:                         } else

	jmp	SHORT $LN143@xmlXPathCo
$LN142@xmlXPathCo:

; 13781: 			    tmp = NULL;

	mov	DWORD PTR _tmp$27[ebp], 0
$LN143@xmlXPathCo:

; 13782:                     }

	jmp	$LN10@xmlXPathCo
$LN11@xmlXPathCo:

; 13783: 		    if (tmp != NULL)

	cmp	DWORD PTR _tmp$27[ebp], 0
	je	SHORT $LN144@xmlXPathCo

; 13784: 			xmlXPathReleaseObject(ctxt->context, tmp);

	mov	eax, DWORD PTR _tmp$27[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN144@xmlXPathCo:

; 13785:                     /*
; 13786:                      * The result is used as the new evaluation set.
; 13787:                      */
; 13788: 		    valuePush(ctxt,

	mov	eax, DWORD PTR _newset$26[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheWrapNodeSet
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
$filter_error$183:

; 13789: 			xmlXPathCacheWrapNodeSet(ctxt->context, newset));
; 13790: filter_error:
; 13791: 		    xmlXPathReleaseObject(ctxt->context, obj);

	mov	ecx, DWORD PTR _obj$28[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13792: 		    ctxt->context->node = oldnode;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldnode$24[ebp]
	mov	DWORD PTR [edx+4], eax

; 13793: 		    ctxt->context->doc = oldDoc;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldDoc$23[ebp]
	mov	DWORD PTR [edx], eax

; 13794:                     ctxt->context->contextSize = oldcs;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldcs$22[ebp]
	mov	DWORD PTR [edx+68], eax

; 13795:                     ctxt->context->proximityPosition = oldpp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldpp$21[ebp]
	mov	DWORD PTR [edx+72], eax
$LN132@xmlXPathCo:

; 13796:                 }
; 13797:                 return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN145@xmlXPathCo:

; 13798:             }
; 13799:         case XPATH_OP_SORT:
; 13800:             if (op->ch1 != -1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN146@xmlXPathCo

; 13801:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN146@xmlXPathCo:

; 13802: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN147@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN147@xmlXPathCo:

; 13803:             if ((ctxt->value != NULL) &&
; 13804:                 (ctxt->value->type == XPATH_NODESET) &&
; 13805:                 (ctxt->value->nodesetval != NULL) &&

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN148@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN148@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN148@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 1
	jle	SHORT $LN148@xmlXPathCo

; 13806: 		(ctxt->value->nodesetval->nodeNr > 1))
; 13807: 	    {
; 13808:                 xmlXPathNodeSetSort(ctxt->value->nodesetval);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetSort
	add	esp, 4
$LN148@xmlXPathCo:

; 13809: 	    }
; 13810:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN149@xmlXPathCo:

; 13811: #ifdef LIBXML_XPTR_ENABLED
; 13812:         case XPATH_OP_RANGETO:{
; 13813:                 xmlXPathObjectPtr range;
; 13814:                 xmlXPathObjectPtr res, obj;
; 13815:                 xmlXPathObjectPtr tmp;
; 13816:                 xmlLocationSetPtr newlocset = NULL;

	mov	DWORD PTR _newlocset$9[ebp], 0

; 13817: 		    xmlLocationSetPtr oldlocset;
; 13818:                 xmlNodeSetPtr oldset;
; 13819:                 xmlNodePtr oldnode = ctxt->context->node;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _oldnode$6[ebp], edx

; 13820:                 int oldcs = ctxt->context->contextSize;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _oldcs$5[ebp], edx

; 13821:                 int oldpp = ctxt->context->proximityPosition;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+72]
	mov	DWORD PTR _oldpp$4[ebp], edx

; 13822:                 int i, j;
; 13823: 
; 13824:                 if (op->ch1 != -1) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN151@xmlXPathCo

; 13825:                     total +=

	mov	ecx, DWORD PTR _op$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 13826:                         xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);
; 13827:                     CHECK_ERROR0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN151@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN151@xmlXPathCo:

; 13828:                 }
; 13829:                 if (ctxt->value == NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN152@xmlXPathCo

; 13830:                     XP_ERROR0(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN152@xmlXPathCo:

; 13831:                 }
; 13832:                 if (op->ch2 == -1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+8], -1
	jne	SHORT $LN153@xmlXPathCo

; 13833:                     return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN153@xmlXPathCo:

; 13834: 
; 13835:                 if (ctxt->value->type == XPATH_LOCATIONSET) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 7
	jne	$LN154@xmlXPathCo

; 13836:                     /*
; 13837:                      * Extract the old locset, and then evaluate the result of the
; 13838:                      * expression for all the element in the locset. use it to grow
; 13839:                      * up a new locset.
; 13840:                      */
; 13841:                     CHECK_TYPE0(XPATH_LOCATIONSET);

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN157@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 7
	je	SHORT $LN156@xmlXPathCo
$LN157@xmlXPathCo:
	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN156@xmlXPathCo:

; 13842: 
; 13843:                     if ((ctxt->value->user == NULL) ||

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN159@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN158@xmlXPathCo
$LN159@xmlXPathCo:

; 13844:                         (((xmlLocationSetPtr) ctxt->value->user)->locNr == 0))
; 13845:                         return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN158@xmlXPathCo:

; 13846: 
; 13847:                     obj = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$11[ebp], eax

; 13848:                     oldlocset = obj->user;

	mov	eax, DWORD PTR _obj$11[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _oldlocset$8[ebp], ecx

; 13849: 
; 13850:                     newlocset = xmlXPtrLocationSetCreate(NULL);

	push	0
	call	_xmlXPtrLocationSetCreate
	add	esp, 4
	mov	DWORD PTR _newlocset$9[ebp], eax

; 13851: 
; 13852:                     for (i = 0; i < oldlocset->locNr; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN15@xmlXPathCo
$LN13@xmlXPathCo:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN15@xmlXPathCo:
	mov	eax, DWORD PTR _oldlocset$8[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN14@xmlXPathCo

; 13853:                         /*
; 13854:                          * Run the evaluation with a node list made of a
; 13855:                          * single item in the nodelocset.
; 13856:                          */
; 13857:                         ctxt->context->node = oldlocset->locTab[i]->user;

	mov	edx, DWORD PTR _oldlocset$8[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+4], edx

; 13858:                         ctxt->context->contextSize = oldlocset->locNr;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _oldlocset$8[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+68], eax

; 13859:                         ctxt->context->proximityPosition = i + 1;

	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+72], ecx

; 13860: 			tmp = xmlXPathCacheNewNodeSet(ctxt->context,

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	mov	DWORD PTR _tmp$10[ebp], eax

; 13861: 			    ctxt->context->node);
; 13862:                         valuePush(ctxt, tmp);

	mov	eax, DWORD PTR _tmp$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 13863: 
; 13864:                         if (op->ch2 != -1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+8], -1
	je	SHORT $LN160@xmlXPathCo

; 13865:                             total +=

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+8], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN160@xmlXPathCo:

; 13866:                                 xmlXPathCompOpEval(ctxt,
; 13867:                                                    &comp->steps[op->ch2]);
; 13868: 			if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN161@xmlXPathCo

; 13869:                             xmlXPtrFreeLocationSet(newlocset);

	mov	edx, DWORD PTR _newlocset$9[ebp]
	push	edx
	call	_xmlXPtrFreeLocationSet
	add	esp, 4

; 13870:                             goto rangeto_error;

	jmp	$rangeto_error$184
$LN161@xmlXPathCo:

; 13871: 			}
; 13872: 
; 13873:                         res = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$12[ebp], eax

; 13874: 			if (res->type == XPATH_LOCATIONSET) {

	mov	ecx, DWORD PTR _res$12[ebp]
	cmp	DWORD PTR [ecx], 7
	jne	$LN162@xmlXPathCo

; 13875: 			    xmlLocationSetPtr rloc =

	mov	edx, DWORD PTR _res$12[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _rloc$1[ebp], eax

; 13876: 			        (xmlLocationSetPtr)res->user;
; 13877: 			    for (j=0; j<rloc->locNr; j++) {

	mov	DWORD PTR _j$2[ebp], 0
	jmp	SHORT $LN18@xmlXPathCo
$LN16@xmlXPathCo:
	mov	ecx, DWORD PTR _j$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$2[ebp], ecx
$LN18@xmlXPathCo:
	mov	edx, DWORD PTR _rloc$1[ebp]
	mov	eax, DWORD PTR _j$2[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	$LN17@xmlXPathCo

; 13878: 			        range = xmlXPtrNewRange(

	mov	ecx, DWORD PTR _rloc$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _j$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _rloc$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _j$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _oldlocset$8[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _oldlocset$8[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$3[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlXPtrNewRange
	add	esp, 16					; 00000010H
	mov	DWORD PTR _range$13[ebp], eax

; 13879: 				  oldlocset->locTab[i]->user,
; 13880: 				  oldlocset->locTab[i]->index,
; 13881: 				  rloc->locTab[j]->user2,
; 13882: 				  rloc->locTab[j]->index2);
; 13883: 				if (range != NULL) {

	cmp	DWORD PTR _range$13[ebp], 0
	je	SHORT $LN164@xmlXPathCo

; 13884: 				    xmlXPtrLocationSetAdd(newlocset, range);

	mov	eax, DWORD PTR _range$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _newlocset$9[ebp]
	push	ecx
	call	_xmlXPtrLocationSetAdd
	add	esp, 8
$LN164@xmlXPathCo:

; 13885: 				}
; 13886: 			    }

	jmp	$LN16@xmlXPathCo
$LN17@xmlXPathCo:

; 13887: 			} else {

	jmp	SHORT $LN165@xmlXPathCo
$LN162@xmlXPathCo:

; 13888: 			    range = xmlXPtrNewRangeNodeObject(

	mov	edx, DWORD PTR _res$12[ebp]
	push	edx
	mov	eax, DWORD PTR _oldlocset$8[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_xmlXPtrNewRangeNodeObject
	add	esp, 8
	mov	DWORD PTR _range$13[ebp], eax

; 13889: 				(xmlNodePtr)oldlocset->locTab[i]->user, res);
; 13890:                             if (range != NULL) {

	cmp	DWORD PTR _range$13[ebp], 0
	je	SHORT $LN165@xmlXPathCo

; 13891:                                 xmlXPtrLocationSetAdd(newlocset,range);

	mov	edx, DWORD PTR _range$13[ebp]
	push	edx
	mov	eax, DWORD PTR _newlocset$9[ebp]
	push	eax
	call	_xmlXPtrLocationSetAdd
	add	esp, 8
$LN165@xmlXPathCo:

; 13892: 			    }
; 13893:                         }
; 13894: 
; 13895:                         /*
; 13896:                          * Cleanup
; 13897:                          */
; 13898:                         if (res != NULL) {

	cmp	DWORD PTR _res$12[ebp], 0
	je	SHORT $LN166@xmlXPathCo

; 13899: 			    xmlXPathReleaseObject(ctxt->context, res);

	mov	ecx, DWORD PTR _res$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN166@xmlXPathCo:

; 13900: 			}
; 13901:                         if (ctxt->value == tmp) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	edx, DWORD PTR _tmp$10[ebp]
	jne	SHORT $LN167@xmlXPathCo

; 13902:                             res = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$12[ebp], eax

; 13903: 			    xmlXPathReleaseObject(ctxt->context, res);

	mov	ecx, DWORD PTR _res$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN167@xmlXPathCo:

; 13904:                         }
; 13905:                     }

	jmp	$LN13@xmlXPathCo
$LN14@xmlXPathCo:

; 13906: 		} else {	/* Not a location set */

	jmp	$LN20@xmlXPathCo
$LN154@xmlXPathCo:

; 13907:                     CHECK_TYPE0(XPATH_NODESET);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN169@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN168@xmlXPathCo
$LN169@xmlXPathCo:
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN168@xmlXPathCo:

; 13908:                     obj = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$11[ebp], eax

; 13909:                     oldset = obj->nodesetval;

	mov	eax, DWORD PTR _obj$11[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _oldset$7[ebp], ecx

; 13910: 
; 13911:                     newlocset = xmlXPtrLocationSetCreate(NULL);

	push	0
	call	_xmlXPtrLocationSetCreate
	add	esp, 4
	mov	DWORD PTR _newlocset$9[ebp], eax

; 13912: 
; 13913:                     if (oldset != NULL) {

	cmp	DWORD PTR _oldset$7[ebp], 0
	je	$LN20@xmlXPathCo

; 13914:                         for (i = 0; i < oldset->nodeNr; i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN21@xmlXPathCo
$LN19@xmlXPathCo:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN21@xmlXPathCo:
	mov	eax, DWORD PTR _oldset$7[ebp]
	mov	ecx, DWORD PTR _i$3[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN20@xmlXPathCo

; 13915:                             /*
; 13916:                              * Run the evaluation with a node list made of a single item
; 13917:                              * in the nodeset.
; 13918:                              */
; 13919:                             ctxt->context->node = oldset->nodeTab[i];

	mov	edx, DWORD PTR _oldset$7[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR [edx+4], eax

; 13920: 			    /*
; 13921: 			    * OPTIMIZE TODO: Avoid recreation for every iteration.
; 13922: 			    */
; 13923: 			    tmp = xmlXPathCacheNewNodeSet(ctxt->context,

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	mov	DWORD PTR _tmp$10[ebp], eax

; 13924: 				ctxt->context->node);
; 13925:                             valuePush(ctxt, tmp);

	mov	eax, DWORD PTR _tmp$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 13926: 
; 13927:                             if (op->ch2 != -1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+8], -1
	je	SHORT $LN171@xmlXPathCo

; 13928:                                 total +=

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+8], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN171@xmlXPathCo:

; 13929:                                     xmlXPathCompOpEval(ctxt,
; 13930:                                                    &comp->steps[op->ch2]);
; 13931: 			    if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN172@xmlXPathCo

; 13932:                                 xmlXPtrFreeLocationSet(newlocset);

	mov	edx, DWORD PTR _newlocset$9[ebp]
	push	edx
	call	_xmlXPtrFreeLocationSet
	add	esp, 4

; 13933:                                 goto rangeto_error;

	jmp	$rangeto_error$184
$LN172@xmlXPathCo:

; 13934: 			    }
; 13935: 
; 13936:                             res = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$12[ebp], eax

; 13937:                             range =

	mov	ecx, DWORD PTR _res$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldset$7[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$3[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_xmlXPtrNewRangeNodeObject
	add	esp, 8
	mov	DWORD PTR _range$13[ebp], eax

; 13938:                                 xmlXPtrNewRangeNodeObject(oldset->nodeTab[i],
; 13939:                                                       res);
; 13940:                             if (range != NULL) {

	cmp	DWORD PTR _range$13[ebp], 0
	je	SHORT $LN173@xmlXPathCo

; 13941:                                 xmlXPtrLocationSetAdd(newlocset, range);

	mov	eax, DWORD PTR _range$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _newlocset$9[ebp]
	push	ecx
	call	_xmlXPtrLocationSetAdd
	add	esp, 8
$LN173@xmlXPathCo:

; 13942:                             }
; 13943: 
; 13944:                             /*
; 13945:                              * Cleanup
; 13946:                              */
; 13947:                             if (res != NULL) {

	cmp	DWORD PTR _res$12[ebp], 0
	je	SHORT $LN174@xmlXPathCo

; 13948: 				xmlXPathReleaseObject(ctxt->context, res);

	mov	edx, DWORD PTR _res$12[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN174@xmlXPathCo:

; 13949: 			    }
; 13950:                             if (ctxt->value == tmp) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	eax, DWORD PTR _tmp$10[ebp]
	jne	SHORT $LN175@xmlXPathCo

; 13951:                                 res = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$12[ebp], eax

; 13952: 				xmlXPathReleaseObject(ctxt->context, res);

	mov	edx, DWORD PTR _res$12[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN175@xmlXPathCo:

; 13953:                             }
; 13954:                         }

	jmp	$LN19@xmlXPathCo
$LN20@xmlXPathCo:

; 13955:                     }
; 13956:                 }
; 13957: 
; 13958:                 /*
; 13959:                  * The result is used as the new evaluation set.
; 13960:                  */
; 13961:                 valuePush(ctxt, xmlXPtrWrapLocationSet(newlocset));

	mov	edx, DWORD PTR _newlocset$9[ebp]
	push	edx
	call	_xmlXPtrWrapLocationSet
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
$rangeto_error$184:

; 13962: rangeto_error:
; 13963: 		xmlXPathReleaseObject(ctxt->context, obj);

	mov	ecx, DWORD PTR _obj$11[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 13964:                 ctxt->context->node = oldnode;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldnode$6[ebp]
	mov	DWORD PTR [edx+4], eax

; 13965:                 ctxt->context->contextSize = oldcs;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldcs$5[ebp]
	mov	DWORD PTR [edx+68], eax

; 13966:                 ctxt->context->proximityPosition = oldpp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _oldpp$4[ebp]
	mov	DWORD PTR [edx+72], eax

; 13967:                 return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	SHORT $LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 13968:             }
; 13969: #endif /* LIBXML_XPTR_ENABLED */
; 13970:     }
; 13971:     xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0CJ@OFCEKGJC@XPath?3?5unknown?5precompiled?5oper@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 13972:                     "XPath: unknown precompiled operation %d\n", op->op);
; 13973:     ctxt->error = XPATH_INVALID_OPERAND;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 10			; 0000000aH

; 13974:     return (total);

	mov	eax, DWORD PTR _total$[ebp]
$LN1@xmlXPathCo:

; 13975: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN180@xmlXPathCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN180@xmlXPathCo:
	DD	2
	DD	$LN179@xmlXPathCo
$LN179@xmlXPathCo:
	DD	-108					; ffffff94H
	DD	4
	DD	$LN177@xmlXPathCo
	DD	-124					; ffffff84H
	DD	4
	DD	$LN178@xmlXPathCo
$LN178@xmlXPathCo:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN177@xmlXPathCo:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
	npad	1
$LN181@xmlXPathCo:
	DD	$LN23@xmlXPathCo
	DD	$LN24@xmlXPathCo
	DD	$LN30@xmlXPathCo
	DD	$LN36@xmlXPathCo
	DD	$LN41@xmlXPathCo
	DD	$LN44@xmlXPathCo
	DD	$LN58@xmlXPathCo
	DD	$LN66@xmlXPathCo
	DD	$LN73@xmlXPathCo
	DD	$LN74@xmlXPathCo
	DD	$LN79@xmlXPathCo
	DD	$LN82@xmlXPathCo
	DD	$LN83@xmlXPathCo
	DD	$LN90@xmlXPathCo
	DD	$LN101@xmlXPathCo
	DD	$LN106@xmlXPathCo
	DD	$LN106@xmlXPathCo
	DD	$LN145@xmlXPathCo
	DD	$LN149@xmlXPathCo
_xmlXPathCompOpEval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompStep
_TEXT	SEGMENT
tv455 = -104						; size = 4
tv401 = -100						; size = 4
tv374 = -96						; size = 4
tv337 = -92						; size = 4
tv321 = -88						; size = 4
tv291 = -84						; size = 4
tv265 = -80						; size = 4
tv249 = -76						; size = 4
tv211 = -72						; size = 4
tv185 = -68						; size = 4
tv159 = -64						; size = 4
tv89 = -60						; size = 4
_op1$1 = -56						; size = 4
_type$2 = -48						; size = 4
_axis$3 = -40						; size = 4
_test$4 = -32						; size = 4
_prefix$5 = -20						; size = 4
_name$6 = -12						; size = 4
_op2$ = -8						; size = 4
_rangeto$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompStep PROC					; COMDAT

; 11308: xmlXPathCompStep(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-104]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 11309: #ifdef LIBXML_XPTR_ENABLED
; 11310:     int rangeto = 0;

	mov	DWORD PTR _rangeto$[ebp], 0

; 11311:     int op2 = -1;

	mov	DWORD PTR _op2$[ebp], -1
$LN2@xmlXPathCo:

; 11312: #endif
; 11313: 
; 11314:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN20@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN21@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN20@xmlXPathCo
$LN21@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathCo
$LN20@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN63@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv89[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN64@xmlXPathCo
$LN63@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv89[ebp], eax
$LN64@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 11315:     if ((CUR == '.') && (NXT(1) == '.')) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 46					; 0000002eH
	jne	$LN22@xmlXPathCo
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 46					; 0000002eH
	jne	$LN22@xmlXPathCo

; 11316: 	SKIP(2);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@xmlXPathCo:

; 11317: 	SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN24@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN25@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN24@xmlXPathCo
$LN25@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN5@xmlXPathCo
$LN24@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN65@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN66@xmlXPathCo
$LN65@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv159[ebp], edx
$LN66@xmlXPathCo:
	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 11318: 	PUSH_LONG_EXPR(XPATH_OP_COLLECT, AXIS_PARENT,

	push	0
	push	0
	push	0
	push	1
	push	10					; 0000000aH
	push	10					; 0000000aH
	push	-1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
	jmp	$LN1@xmlXPathCo
$LN22@xmlXPathCo:

; 11319: 		    NODE_TEST_TYPE, NODE_TYPE_NODE, NULL, NULL);
; 11320:     } else if (CUR == '.') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 46					; 0000002eH
	jne	$LN26@xmlXPathCo

; 11321: 	NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN67@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv185[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN6@xmlXPathCo
$LN67@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv185[ebp], edx
$LN6@xmlXPathCo:

; 11322: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN28@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN29@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN28@xmlXPathCo
$LN29@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN28@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN69@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv211[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN70@xmlXPathCo
$LN69@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv211[ebp], eax
$LN70@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 11323:     } else {

	jmp	$LN1@xmlXPathCo
$LN26@xmlXPathCo:

; 11324: 	xmlChar *name = NULL;

	mov	DWORD PTR _name$6[ebp], 0

; 11325: 	const xmlChar *prefix = NULL;

	mov	DWORD PTR _prefix$5[ebp], 0

; 11326: 	xmlXPathTestVal test = (xmlXPathTestVal) 0;

	mov	DWORD PTR _test$4[ebp], 0

; 11327: 	xmlXPathAxisVal axis = (xmlXPathAxisVal) 0;

	mov	DWORD PTR _axis$3[ebp], 0

; 11328: 	xmlXPathTypeVal type = (xmlXPathTypeVal) 0;

	mov	DWORD PTR _type$2[ebp], 0

; 11329: 	int op1;
; 11330: 
; 11331: 	/*
; 11332: 	 * The modification needed for XPointer change to the production
; 11333: 	 */
; 11334: #ifdef LIBXML_XPTR_ENABLED
; 11335: 	if (ctxt->xptr) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN30@xmlXPathCo

; 11336: 	    name = xmlXPathParseNCName(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathParseNCName
	add	esp, 4
	mov	DWORD PTR _name$6[ebp], eax

; 11337: 	    if ((name != NULL) && (xmlStrEqual(name, BAD_CAST "range-to"))) {

	cmp	DWORD PTR _name$6[ebp], 0
	je	$LN30@xmlXPathCo
	push	OFFSET ??_C@_08KHINJAEH@range?9to@
	mov	eax, DWORD PTR _name$6[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN30@xmlXPathCo

; 11338:                 op2 = ctxt->comp->last;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _op2$[ebp], eax

; 11339: 		xmlFree(name);

	mov	esi, esp
	mov	ecx, DWORD PTR _name$6[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@xmlXPathCo:

; 11340: 		SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN32@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN33@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN32@xmlXPathCo
$LN33@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN32@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN71@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv249[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN72@xmlXPathCo
$LN71@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv249[ebp], edx
$LN72@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 11341: 		if (CUR != '(') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 40					; 00000028H
	je	SHORT $LN34@xmlXPathCo

; 11342: 		    XP_ERROR(XPATH_EXPR_ERROR);

	push	7
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN34@xmlXPathCo:

; 11343: 		}
; 11344: 		NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN73@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv265[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN10@xmlXPathCo
$LN73@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv265[ebp], ecx
$LN10@xmlXPathCo:

; 11345: 		SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN35@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN36@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN35@xmlXPathCo
$LN36@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN11@xmlXPathCo
$LN35@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN75@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv291[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN76@xmlXPathCo
$LN75@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv291[ebp], edx
$LN76@xmlXPathCo:
	jmp	SHORT $LN10@xmlXPathCo
$LN11@xmlXPathCo:

; 11346: 
; 11347: 		xmlXPathCompileExpr(ctxt, 1);

	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompileExpr
	add	esp, 8

; 11348: 		/* PUSH_BINARY_EXPR(XPATH_OP_RANGETO, op2, ctxt->comp->last, 0, 0); */
; 11349: 		CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN12@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN12@xmlXPathCo:

; 11350: 
; 11351: 		SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN38@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN39@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN38@xmlXPathCo
$LN39@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN13@xmlXPathCo
$LN38@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN77@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv321[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN78@xmlXPathCo
$LN77@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv321[ebp], edx
$LN78@xmlXPathCo:
	jmp	SHORT $LN12@xmlXPathCo
$LN13@xmlXPathCo:

; 11352: 		if (CUR != ')') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 41					; 00000029H
	je	SHORT $LN40@xmlXPathCo

; 11353: 		    XP_ERROR(XPATH_EXPR_ERROR);

	push	7
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN40@xmlXPathCo:

; 11354: 		}
; 11355: 		NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN79@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv337[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN80@xmlXPathCo
$LN79@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv337[ebp], ecx
$LN80@xmlXPathCo:

; 11356: 		rangeto = 1;

	mov	DWORD PTR _rangeto$[ebp], 1

; 11357: 		goto eval_predicates;

	jmp	$eval_predicates$92
$LN30@xmlXPathCo:

; 11358: 	    }
; 11359: 	}
; 11360: #endif
; 11361: 	if (CUR == '*') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN41@xmlXPathCo

; 11362: 	    axis = AXIS_CHILD;

	mov	DWORD PTR _axis$3[ebp], 4

; 11363: 	} else {

	jmp	$LN42@xmlXPathCo
$LN41@xmlXPathCo:

; 11364: 	    if (name == NULL)

	cmp	DWORD PTR _name$6[ebp], 0
	jne	SHORT $LN43@xmlXPathCo

; 11365: 		name = xmlXPathParseNCName(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathParseNCName
	add	esp, 4
	mov	DWORD PTR _name$6[ebp], eax
$LN43@xmlXPathCo:

; 11366: 	    if (name != NULL) {

	cmp	DWORD PTR _name$6[ebp], 0
	je	$LN44@xmlXPathCo

; 11367: 		axis = xmlXPathIsAxisName(name);

	mov	eax, DWORD PTR _name$6[ebp]
	push	eax
	call	_xmlXPathIsAxisName
	add	esp, 4
	mov	DWORD PTR _axis$3[ebp], eax

; 11368: 		if (axis != 0) {

	cmp	DWORD PTR _axis$3[ebp], 0
	je	$LN46@xmlXPathCo
$LN14@xmlXPathCo:

; 11369: 		    SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN48@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN49@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN48@xmlXPathCo
$LN49@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN15@xmlXPathCo
$LN48@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN81@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv374[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN82@xmlXPathCo
$LN81@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv374[ebp], ecx
$LN82@xmlXPathCo:
	jmp	SHORT $LN14@xmlXPathCo
$LN15@xmlXPathCo:

; 11370: 		    if ((CUR == ':') && (NXT(1) == ':')) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 58					; 0000003aH
	jne	SHORT $LN50@xmlXPathCo
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 58					; 0000003aH
	jne	SHORT $LN50@xmlXPathCo

; 11371: 			SKIP(2);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx

; 11372: 			xmlFree(name);

	mov	esi, esp
	mov	eax, DWORD PTR _name$6[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 11373: 			name = NULL;

	mov	DWORD PTR _name$6[ebp], 0

; 11374: 		    } else {

	jmp	SHORT $LN51@xmlXPathCo
$LN50@xmlXPathCo:

; 11375: 			/* an element name can conflict with an axis one :-\ */
; 11376: 			axis = AXIS_CHILD;

	mov	DWORD PTR _axis$3[ebp], 4
$LN51@xmlXPathCo:

; 11377: 		    }
; 11378: 		} else {

	jmp	SHORT $LN47@xmlXPathCo
$LN46@xmlXPathCo:

; 11379: 		    axis = AXIS_CHILD;

	mov	DWORD PTR _axis$3[ebp], 4
$LN47@xmlXPathCo:

; 11380: 		}

	jmp	SHORT $LN42@xmlXPathCo
$LN44@xmlXPathCo:

; 11381: 	    } else if (CUR == '@') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN52@xmlXPathCo

; 11382: 		NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN83@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv401[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN84@xmlXPathCo
$LN83@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv401[ebp], ecx
$LN84@xmlXPathCo:

; 11383: 		axis = AXIS_ATTRIBUTE;

	mov	DWORD PTR _axis$3[ebp], 3

; 11384: 	    } else {

	jmp	SHORT $LN42@xmlXPathCo
$LN52@xmlXPathCo:

; 11385: 		axis = AXIS_CHILD;

	mov	DWORD PTR _axis$3[ebp], 4
$LN42@xmlXPathCo:

; 11386: 	    }
; 11387: 	}
; 11388: 
; 11389:         if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN54@xmlXPathCo

; 11390:             xmlFree(name);

	mov	esi, esp
	mov	eax, DWORD PTR _name$6[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 11391:             return;

	jmp	$LN1@xmlXPathCo
$LN54@xmlXPathCo:

; 11392:         }
; 11393: 
; 11394: 	name = xmlXPathCompNodeTest(ctxt, &test, &type, &prefix, name);

	mov	ecx, DWORD PTR _name$6[ebp]
	push	ecx
	lea	edx, DWORD PTR _prefix$5[ebp]
	push	edx
	lea	eax, DWORD PTR _type$2[ebp]
	push	eax
	lea	ecx, DWORD PTR _test$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompNodeTest
	add	esp, 20					; 00000014H
	mov	DWORD PTR _name$6[ebp], eax

; 11395: 	if (test == 0)

	cmp	DWORD PTR _test$4[ebp], 0
	jne	SHORT $LN55@xmlXPathCo

; 11396: 	    return;

	jmp	$LN1@xmlXPathCo
$LN55@xmlXPathCo:

; 11397: 
; 11398:         if ((prefix != NULL) && (ctxt->context != NULL) &&

	cmp	DWORD PTR _prefix$5[ebp], 0
	je	SHORT $eval_predicates$92
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $eval_predicates$92
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+196]
	and	eax, 1
	je	SHORT $eval_predicates$92

; 11399: 	    (ctxt->context->flags & XML_XPATH_CHECKNS)) {
; 11400: 	    if (xmlXPathNsLookup(ctxt->context, prefix) == NULL) {

	mov	ecx, DWORD PTR _prefix$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathNsLookup
	add	esp, 8
	test	eax, eax
	jne	SHORT $eval_predicates$92

; 11401: 		xmlXPathErr(ctxt, XPATH_UNDEF_PREFIX_ERROR);

	push	19					; 00000013H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
$eval_predicates$92:

; 11402: 	    }
; 11403: 	}
; 11404: #ifdef DEBUG_STEP
; 11405: 	xmlGenericError(xmlGenericErrorContext,
; 11406: 		"Basis : computing new set\n");
; 11407: #endif
; 11408: 
; 11409: #ifdef DEBUG_STEP
; 11410: 	xmlGenericError(xmlGenericErrorContext, "Basis : ");
; 11411: 	if (ctxt->value == NULL)
; 11412: 	    xmlGenericError(xmlGenericErrorContext, "no value\n");
; 11413: 	else if (ctxt->value->nodesetval == NULL)
; 11414: 	    xmlGenericError(xmlGenericErrorContext, "Empty\n");
; 11415: 	else
; 11416: 	    xmlGenericErrorContextNodeSet(stdout, ctxt->value->nodesetval);
; 11417: #endif
; 11418: 
; 11419: #ifdef LIBXML_XPTR_ENABLED
; 11420: eval_predicates:
; 11421: #endif
; 11422: 	op1 = ctxt->comp->last;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _op1$1[ebp], ecx

; 11423: 	ctxt->comp->last = -1;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [eax+12], -1
$LN16@xmlXPathCo:

; 11424: 
; 11425: 	SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN58@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN59@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN58@xmlXPathCo
$LN59@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN18@xmlXPathCo
$LN58@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN85@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv455[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN86@xmlXPathCo
$LN85@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv455[ebp], ecx
$LN86@xmlXPathCo:
	jmp	SHORT $LN16@xmlXPathCo
$LN18@xmlXPathCo:

; 11426: 	while (CUR == '[') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $LN19@xmlXPathCo

; 11427: 	    xmlXPathCompPredicate(ctxt, 0);

	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompPredicate
	add	esp, 8

; 11428: 	}

	jmp	SHORT $LN18@xmlXPathCo
$LN19@xmlXPathCo:

; 11429: 
; 11430: #ifdef LIBXML_XPTR_ENABLED
; 11431: 	if (rangeto) {

	cmp	DWORD PTR _rangeto$[ebp], 0
	je	SHORT $LN60@xmlXPathCo

; 11432: 	    PUSH_BINARY_EXPR(XPATH_OP_RANGETO, op2, op1, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	18					; 00000012H
	mov	eax, DWORD PTR _op1$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _op2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H

; 11433: 	} else

	jmp	SHORT $LN1@xmlXPathCo
$LN60@xmlXPathCo:

; 11434: #endif
; 11435: 	    PUSH_FULL_EXPR(XPATH_OP_COLLECT, op1, ctxt->comp->last, axis,

	mov	ecx, DWORD PTR _name$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$5[ebp]
	push	edx
	mov	eax, DWORD PTR _type$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _test$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _axis$3[ebp]
	push	edx
	push	10					; 0000000aH
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _op1$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN1@xmlXPathCo:

; 11436: 			   test, type, (void *)prefix, (void *)name);
; 11437: 
; 11438:     }
; 11439: #ifdef DEBUG_STEP
; 11440:     xmlGenericError(xmlGenericErrorContext, "Step : ");
; 11441:     if (ctxt->value == NULL)
; 11442: 	xmlGenericError(xmlGenericErrorContext, "no value\n");
; 11443:     else if (ctxt->value->nodesetval == NULL)
; 11444: 	xmlGenericError(xmlGenericErrorContext, "Empty\n");
; 11445:     else
; 11446: 	xmlGenericErrorContextNodeSet(xmlGenericErrorContext,
; 11447: 		ctxt->value->nodesetval);
; 11448: #endif
; 11449: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN91@xmlXPathCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 104				; 00000068H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN91@xmlXPathCo:
	DD	3
	DD	$LN90@xmlXPathCo
$LN90@xmlXPathCo:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN87@xmlXPathCo
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN88@xmlXPathCo
	DD	-48					; ffffffd0H
	DD	4
	DD	$LN89@xmlXPathCo
$LN89@xmlXPathCo:
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	0
$LN88@xmlXPathCo:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN87@xmlXPathCo:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlXPathCompStep ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathIsAxisName
_TEXT	SEGMENT
tv67 = -8						; size = 4
_ret$ = -4						; size = 4
_name$ = 8						; size = 4
_xmlXPathIsAxisName PROC				; COMDAT

; 11228: xmlXPathIsAxisName(const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 11229:     xmlXPathAxisVal ret = (xmlXPathAxisVal) 0;

	mov	DWORD PTR _ret$[ebp], 0

; 11230:     switch (name[0]) {

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 97					; 00000061H
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 18			; 00000012H
	ja	$LN2@xmlXPathIs
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN25@xmlXPathIs[edx]
	jmp	DWORD PTR $LN26@xmlXPathIs[eax*4]
$LN4@xmlXPathIs:

; 11231: 	case 'a':
; 11232: 	    if (xmlStrEqual(name, BAD_CAST "ancestor"))

	push	OFFSET ??_C@_08HBEFDOBD@ancestor@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@xmlXPathIs

; 11233: 		ret = AXIS_ANCESTOR;

	mov	DWORD PTR _ret$[ebp], 1
$LN5@xmlXPathIs:

; 11234: 	    if (xmlStrEqual(name, BAD_CAST "ancestor-or-self"))

	push	OFFSET ??_C@_0BB@OLBPNJCF@ancestor?9or?9self@
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@xmlXPathIs

; 11235: 		ret = AXIS_ANCESTOR_OR_SELF;

	mov	DWORD PTR _ret$[ebp], 2
$LN6@xmlXPathIs:

; 11236: 	    if (xmlStrEqual(name, BAD_CAST "attribute"))

	push	OFFSET ??_C@_09HGIEBAJ@attribute@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@xmlXPathIs

; 11237: 		ret = AXIS_ATTRIBUTE;

	mov	DWORD PTR _ret$[ebp], 3
$LN7@xmlXPathIs:

; 11238: 	    break;

	jmp	$LN2@xmlXPathIs
$LN8@xmlXPathIs:

; 11239: 	case 'c':
; 11240: 	    if (xmlStrEqual(name, BAD_CAST "child"))

	push	OFFSET ??_C@_05GPGNDLEK@child@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@xmlXPathIs

; 11241: 		ret = AXIS_CHILD;

	mov	DWORD PTR _ret$[ebp], 4
$LN9@xmlXPathIs:

; 11242: 	    break;

	jmp	$LN2@xmlXPathIs
$LN10@xmlXPathIs:

; 11243: 	case 'd':
; 11244: 	    if (xmlStrEqual(name, BAD_CAST "descendant"))

	push	OFFSET ??_C@_0L@NJLDCKIO@descendant@
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@xmlXPathIs

; 11245: 		ret = AXIS_DESCENDANT;

	mov	DWORD PTR _ret$[ebp], 5
$LN11@xmlXPathIs:

; 11246: 	    if (xmlStrEqual(name, BAD_CAST "descendant-or-self"))

	push	OFFSET ??_C@_0BD@EPJHOOIL@descendant?9or?9self@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@xmlXPathIs

; 11247: 		ret = AXIS_DESCENDANT_OR_SELF;

	mov	DWORD PTR _ret$[ebp], 6
$LN12@xmlXPathIs:

; 11248: 	    break;

	jmp	$LN2@xmlXPathIs
$LN13@xmlXPathIs:

; 11249: 	case 'f':
; 11250: 	    if (xmlStrEqual(name, BAD_CAST "following"))

	push	OFFSET ??_C@_09BEIPBMDN@following@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@xmlXPathIs

; 11251: 		ret = AXIS_FOLLOWING;

	mov	DWORD PTR _ret$[ebp], 7
$LN14@xmlXPathIs:

; 11252: 	    if (xmlStrEqual(name, BAD_CAST "following-sibling"))

	push	OFFSET ??_C@_0BC@LMFKEKDG@following?9sibling@
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlXPathIs

; 11253: 		ret = AXIS_FOLLOWING_SIBLING;

	mov	DWORD PTR _ret$[ebp], 8
$LN15@xmlXPathIs:

; 11254: 	    break;

	jmp	$LN2@xmlXPathIs
$LN16@xmlXPathIs:

; 11255: 	case 'n':
; 11256: 	    if (xmlStrEqual(name, BAD_CAST "namespace"))

	push	OFFSET ??_C@_09KPMGAFNI@namespace@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN17@xmlXPathIs

; 11257: 		ret = AXIS_NAMESPACE;

	mov	DWORD PTR _ret$[ebp], 9
$LN17@xmlXPathIs:

; 11258: 	    break;

	jmp	SHORT $LN2@xmlXPathIs
$LN18@xmlXPathIs:

; 11259: 	case 'p':
; 11260: 	    if (xmlStrEqual(name, BAD_CAST "parent"))

	push	OFFSET ??_C@_06MLKDMCBD@parent@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@xmlXPathIs

; 11261: 		ret = AXIS_PARENT;

	mov	DWORD PTR _ret$[ebp], 10		; 0000000aH
$LN19@xmlXPathIs:

; 11262: 	    if (xmlStrEqual(name, BAD_CAST "preceding"))

	push	OFFSET ??_C@_09MGMONEC@preceding@
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@xmlXPathIs

; 11263: 		ret = AXIS_PRECEDING;

	mov	DWORD PTR _ret$[ebp], 11		; 0000000bH
$LN20@xmlXPathIs:

; 11264: 	    if (xmlStrEqual(name, BAD_CAST "preceding-sibling"))

	push	OFFSET ??_C@_0BC@MLGDENAI@preceding?9sibling@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@xmlXPathIs

; 11265: 		ret = AXIS_PRECEDING_SIBLING;

	mov	DWORD PTR _ret$[ebp], 12		; 0000000cH
$LN21@xmlXPathIs:

; 11266: 	    break;

	jmp	SHORT $LN2@xmlXPathIs
$LN22@xmlXPathIs:

; 11267: 	case 's':
; 11268: 	    if (xmlStrEqual(name, BAD_CAST "self"))

	push	OFFSET ??_C@_04PJDNGLKJ@self@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN2@xmlXPathIs

; 11269: 		ret = AXIS_SELF;

	mov	DWORD PTR _ret$[ebp], 13		; 0000000dH
$LN2@xmlXPathIs:

; 11270: 	    break;
; 11271:     }
; 11272:     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]

; 11273: }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@xmlXPathIs:
	DD	$LN4@xmlXPathIs
	DD	$LN8@xmlXPathIs
	DD	$LN10@xmlXPathIs
	DD	$LN13@xmlXPathIs
	DD	$LN16@xmlXPathIs
	DD	$LN18@xmlXPathIs
	DD	$LN22@xmlXPathIs
	DD	$LN2@xmlXPathIs
$LN25@xmlXPathIs:
	DB	0
	DB	7
	DB	1
	DB	2
	DB	7
	DB	3
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	4
	DB	7
	DB	5
	DB	7
	DB	7
	DB	6
_xmlXPathIsAxisName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompNodeTest
_TEXT	SEGMENT
tv338 = -44						; size = 4
tv324 = -40						; size = 4
tv309 = -36						; size = 4
tv291 = -32						; size = 4
tv254 = -28						; size = 4
tv208 = -24						; size = 4
tv194 = -20						; size = 4
tv168 = -16						; size = 4
tv145 = -12						; size = 4
tv130 = -8						; size = 4
_blanks$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_test$ = 12						; size = 4
_type$ = 16						; size = 4
_prefix$ = 20						; size = 4
_name$ = 24						; size = 4
_xmlXPathCompNodeTest PROC				; COMDAT

; 11095: 		     xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 11096:     int blanks;
; 11097: 
; 11098:     if ((test == NULL) || (type == NULL) || (prefix == NULL)) {

	cmp	DWORD PTR _test$[ebp], 0
	je	SHORT $LN11@xmlXPathCo
	cmp	DWORD PTR _type$[ebp], 0
	je	SHORT $LN11@xmlXPathCo
	cmp	DWORD PTR _prefix$[ebp], 0
	jne	SHORT $LN10@xmlXPathCo
$LN11@xmlXPathCo:

; 11099: 	STRANGE;

	mov	esi, esp
	push	11099					; 00002b5bH
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BJ@DADKHPPP@Internal?5error?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 11100: 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN10@xmlXPathCo:

; 11101:     }
; 11102:     *type = (xmlXPathTypeVal) 0;

	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx], 0

; 11103:     *test = (xmlXPathTestVal) 0;

	mov	eax, DWORD PTR _test$[ebp]
	mov	DWORD PTR [eax], 0

; 11104:     *prefix = NULL;

	mov	ecx, DWORD PTR _prefix$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@xmlXPathCo:

; 11105:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN13@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN12@xmlXPathCo
$LN13@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathCo
$LN12@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN43@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN44@xmlXPathCo
$LN43@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv130[ebp], edx
$LN44@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 11106: 
; 11107:     if ((name == NULL) && (CUR == '*')) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN14@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN14@xmlXPathCo

; 11108: 	/*
; 11109: 	 * All elements
; 11110: 	 */
; 11111: 	NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN45@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv145[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN46@xmlXPathCo
$LN45@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv145[ebp], eax
$LN46@xmlXPathCo:

; 11112: 	*test = NODE_TEST_ALL;

	mov	ecx, DWORD PTR _test$[ebp]
	mov	DWORD PTR [ecx], 3

; 11113: 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN14@xmlXPathCo:

; 11114:     }
; 11115: 
; 11116:     if (name == NULL)

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN15@xmlXPathCo

; 11117: 	name = xmlXPathParseNCName(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathParseNCName
	add	esp, 4
	mov	DWORD PTR _name$[ebp], eax
$LN15@xmlXPathCo:

; 11118:     if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN16@xmlXPathCo

; 11119: 	XP_ERRORNULL(XPATH_EXPR_ERROR);

	push	7
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN16@xmlXPathCo:

; 11120:     }
; 11121: 
; 11122:     blanks = IS_BLANK_CH(CUR);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN48@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN47@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN48@xmlXPathCo
$LN47@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN48@xmlXPathCo
	mov	DWORD PTR tv168[ebp], 0
	jmp	SHORT $LN49@xmlXPathCo
$LN48@xmlXPathCo:
	mov	DWORD PTR tv168[ebp], 1
$LN49@xmlXPathCo:
	mov	ecx, DWORD PTR tv168[ebp]
	mov	DWORD PTR _blanks$[ebp], ecx
$LN4@xmlXPathCo:

; 11123:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN17@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN18@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN17@xmlXPathCo
$LN18@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN5@xmlXPathCo
$LN17@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN50@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv194[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN51@xmlXPathCo
$LN50@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv194[ebp], edx
$LN51@xmlXPathCo:
	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 11124:     if (CUR == '(') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 40					; 00000028H
	jne	$LN19@xmlXPathCo

; 11125: 	NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN52@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv208[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN53@xmlXPathCo
$LN52@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv208[ebp], eax
$LN53@xmlXPathCo:

; 11126: 	/*
; 11127: 	 * NodeType or PI search
; 11128: 	 */
; 11129: 	if (xmlStrEqual(name, BAD_CAST "comment"))

	push	OFFSET ??_C@_07GJGNEJFD@comment@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@xmlXPathCo

; 11130: 	    *type = NODE_TYPE_COMMENT;

	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx], 8
	jmp	$LN21@xmlXPathCo
$LN20@xmlXPathCo:

; 11131: 	else if (xmlStrEqual(name, BAD_CAST "node"))

	push	OFFSET ??_C@_04CLMONKIF@node@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@xmlXPathCo

; 11132: 	    *type = NODE_TYPE_NODE;

	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [ecx], 0
	jmp	SHORT $LN21@xmlXPathCo
$LN22@xmlXPathCo:

; 11133: 	else if (xmlStrEqual(name, BAD_CAST "processing-instruction"))

	push	OFFSET ??_C@_0BH@NNLCFMHO@processing?9instruction@
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN24@xmlXPathCo

; 11134: 	    *type = NODE_TYPE_PI;

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax], 7
	jmp	SHORT $LN21@xmlXPathCo
$LN24@xmlXPathCo:

; 11135: 	else if (xmlStrEqual(name, BAD_CAST "text"))

	push	OFFSET ??_C@_04CIMGMMMG@text@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN26@xmlXPathCo

; 11136: 	    *type = NODE_TYPE_TEXT;

	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx], 3
	jmp	SHORT $LN21@xmlXPathCo
$LN26@xmlXPathCo:

; 11137: 	else {
; 11138: 	    if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN28@xmlXPathCo

; 11139: 		xmlFree(name);

	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN28@xmlXPathCo:

; 11140: 	    XP_ERRORNULL(XPATH_EXPR_ERROR);

	push	7
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN21@xmlXPathCo:

; 11141: 	}
; 11142: 
; 11143: 	*test = NODE_TEST_TYPE;

	mov	edx, DWORD PTR _test$[ebp]
	mov	DWORD PTR [edx], 1
$LN6@xmlXPathCo:

; 11144: 
; 11145: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN29@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN30@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN29@xmlXPathCo
$LN30@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN29@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN54@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv254[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN55@xmlXPathCo
$LN54@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv254[ebp], eax
$LN55@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 11146: 	if (*type == NODE_TYPE_PI) {

	mov	ecx, DWORD PTR _type$[ebp]
	cmp	DWORD PTR [ecx], 7
	jne	$LN31@xmlXPathCo

; 11147: 	    /*
; 11148: 	     * Specific case: search a PI by name.
; 11149: 	     */
; 11150: 	    if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN32@xmlXPathCo

; 11151: 		xmlFree(name);

	mov	esi, esp
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@xmlXPathCo:

; 11152: 	    name = NULL;

	mov	DWORD PTR _name$[ebp], 0

; 11153: 	    if (CUR != ')') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 41					; 00000029H
	je	$LN31@xmlXPathCo

; 11154: 		name = xmlXPathParseLiteral(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathParseLiteral
	add	esp, 4
	mov	DWORD PTR _name$[ebp], eax

; 11155: 		CHECK_ERROR NULL;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN34@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN34@xmlXPathCo:

; 11156: 		*test = NODE_TEST_PI;

	mov	edx, DWORD PTR _test$[ebp]
	mov	DWORD PTR [edx], 2
$LN8@xmlXPathCo:

; 11157: 		SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN35@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN36@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN35@xmlXPathCo
$LN36@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN31@xmlXPathCo
$LN35@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN56@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv291[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN57@xmlXPathCo
$LN56@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv291[ebp], eax
$LN57@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN31@xmlXPathCo:

; 11158: 	    }
; 11159: 	}
; 11160: 	if (CUR != ')') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 41					; 00000029H
	je	SHORT $LN37@xmlXPathCo

; 11161: 	    if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN38@xmlXPathCo

; 11162: 		xmlFree(name);

	mov	esi, esp
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@xmlXPathCo:

; 11163: 	    XP_ERRORNULL(XPATH_UNCLOSED_ERROR);

	push	8
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN37@xmlXPathCo:

; 11164: 	}
; 11165: 	NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN58@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv309[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN59@xmlXPathCo
$LN58@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv309[ebp], eax
$LN59@xmlXPathCo:

; 11166: 	return(name);

	mov	eax, DWORD PTR _name$[ebp]
	jmp	$LN1@xmlXPathCo
$LN19@xmlXPathCo:

; 11167:     }
; 11168:     *test = NODE_TEST_NAME;

	mov	ecx, DWORD PTR _test$[ebp]
	mov	DWORD PTR [ecx], 5

; 11169:     if ((!blanks) && (CUR == ':')) {

	cmp	DWORD PTR _blanks$[ebp], 0
	jne	$LN39@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 58					; 0000003aH
	jne	$LN39@xmlXPathCo

; 11170: 	NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN60@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv324[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN61@xmlXPathCo
$LN60@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv324[ebp], edx
$LN61@xmlXPathCo:

; 11171: 
; 11172: 	/*
; 11173: 	 * Since currently the parser context don't have a
; 11174: 	 * namespace list associated:
; 11175: 	 * The namespace name for this prefix can be computed
; 11176: 	 * only at evaluation time. The compilation is done
; 11177: 	 * outside of any context.
; 11178: 	 */
; 11179: #if 0
; 11180: 	*prefix = xmlXPathNsLookup(ctxt->context, name);
; 11181: 	if (name != NULL)
; 11182: 	    xmlFree(name);
; 11183: 	if (*prefix == NULL) {
; 11184: 	    XP_ERROR0(XPATH_UNDEF_PREFIX_ERROR);
; 11185: 	}
; 11186: #else
; 11187: 	*prefix = name;

	mov	eax, DWORD PTR _prefix$[ebp]
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [eax], ecx

; 11188: #endif
; 11189: 
; 11190: 	if (CUR == '*') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 42					; 0000002aH
	jne	SHORT $LN40@xmlXPathCo

; 11191: 	    /*
; 11192: 	     * All elements
; 11193: 	     */
; 11194: 	    NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN62@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv338[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN63@xmlXPathCo
$LN62@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv338[ebp], edx
$LN63@xmlXPathCo:

; 11195: 	    *test = NODE_TEST_ALL;

	mov	eax, DWORD PTR _test$[ebp]
	mov	DWORD PTR [eax], 3

; 11196: 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCo
$LN40@xmlXPathCo:

; 11197: 	}
; 11198: 
; 11199: 	name = xmlXPathParseNCName(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathParseNCName
	add	esp, 4
	mov	DWORD PTR _name$[ebp], eax

; 11200: 	if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN39@xmlXPathCo

; 11201: 	    XP_ERRORNULL(XPATH_EXPR_ERROR);

	push	7
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCo
$LN39@xmlXPathCo:

; 11202: 	}
; 11203:     }
; 11204:     return(name);

	mov	eax, DWORD PTR _name$[ebp]
$LN1@xmlXPathCo:

; 11205: }

	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompNodeTest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompAndExpr
_TEXT	SEGMENT
tv210 = -16						; size = 4
tv169 = -12						; size = 4
tv92 = -8						; size = 4
_op1$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompAndExpr PROC				; COMDAT

; 10971: xmlXPathCompAndExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10972:     xmlXPathCompEqualityExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompEqualityExpr
	add	esp, 4

; 10973:     CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 10974:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN11@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathCo
$LN11@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN19@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN20@xmlXPathCo
$LN19@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv92[ebp], edx
$LN20@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN4@xmlXPathCo:

; 10975:     while ((CUR == 'a') && (NXT(1) == 'n') && (NXT(2) == 'd')) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 97					; 00000061H
	jne	$LN1@xmlXPathCo
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 110				; 0000006eH
	jne	$LN1@xmlXPathCo
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 100				; 00000064H
	jne	$LN1@xmlXPathCo

; 10976: 	int op1 = ctxt->comp->last;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _op1$1[ebp], ecx

; 10977:         SKIP(3);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 3
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@xmlXPathCo:

; 10978: 	SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN13@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN14@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN13@xmlXPathCo
$LN14@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN13@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN21@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv169[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN22@xmlXPathCo
$LN21@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv169[ebp], edx
$LN22@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10979:         xmlXPathCompEqualityExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompEqualityExpr
	add	esp, 4

; 10980: 	CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN15@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN15@xmlXPathCo:

; 10981: 	PUSH_BINARY_EXPR(XPATH_OP_AND, op1, ctxt->comp->last, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _op1$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN8@xmlXPathCo:

; 10982: 	SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN16@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN17@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN16@xmlXPathCo
$LN17@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN16@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN23@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv210[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN24@xmlXPathCo
$LN23@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv210[ebp], edx
$LN24@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 10983:     }

	jmp	$LN4@xmlXPathCo
$LN1@xmlXPathCo:

; 10984: }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompAndExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompEqualityExpr
_TEXT	SEGMENT
tv231 = -28						; size = 4
tv190 = -24						; size = 4
tv164 = -20						; size = 4
tv153 = -16						; size = 4
tv92 = -12						; size = 4
_op1$1 = -8						; size = 4
_eq$2 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompEqualityExpr PROC				; COMDAT

; 10940: xmlXPathCompEqualityExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10941:     xmlXPathCompRelationalExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompRelationalExpr
	add	esp, 4

; 10942:     CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 10943:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN11@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathCo
$LN11@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN23@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN24@xmlXPathCo
$LN23@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv92[ebp], edx
$LN24@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN4@xmlXPathCo:

; 10944:     while ((CUR == '=') || ((CUR == '!') && (NXT(1) == '='))) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 61					; 0000003dH
	je	SHORT $LN13@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 33					; 00000021H
	jne	$LN1@xmlXPathCo
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 61					; 0000003dH
	jne	$LN1@xmlXPathCo
$LN13@xmlXPathCo:

; 10945: 	int eq;
; 10946: 	int op1 = ctxt->comp->last;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _op1$1[ebp], eax

; 10947: 
; 10948:         if (CUR == '=') eq = 1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN14@xmlXPathCo
	mov	DWORD PTR _eq$2[ebp], 1
	jmp	SHORT $LN15@xmlXPathCo
$LN14@xmlXPathCo:

; 10949: 	else eq = 0;

	mov	DWORD PTR _eq$2[ebp], 0
$LN15@xmlXPathCo:

; 10950: 	NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN25@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv153[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN26@xmlXPathCo
$LN25@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv153[ebp], ecx
$LN26@xmlXPathCo:

; 10951: 	if (!eq) NEXT;

	cmp	DWORD PTR _eq$2[ebp], 0
	jne	SHORT $LN6@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN27@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv164[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN6@xmlXPathCo
$LN27@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv164[ebp], edx
$LN6@xmlXPathCo:

; 10952: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN17@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN18@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN17@xmlXPathCo
$LN18@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN17@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN29@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv190[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN30@xmlXPathCo
$LN29@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv190[ebp], eax
$LN30@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10953:         xmlXPathCompRelationalExpr(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompRelationalExpr
	add	esp, 4

; 10954: 	CHECK_ERROR;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN19@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN19@xmlXPathCo:

; 10955: 	PUSH_BINARY_EXPR(XPATH_OP_EQUAL, op1, ctxt->comp->last, eq, 0);

	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _eq$2[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _op1$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN8@xmlXPathCo:

; 10956: 	SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN20@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN21@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN20@xmlXPathCo
$LN21@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN20@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN31@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv231[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN32@xmlXPathCo
$LN31@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv231[ebp], ecx
$LN32@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 10957:     }

	jmp	$LN4@xmlXPathCo
$LN1@xmlXPathCo:

; 10958: }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompEqualityExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompRelationalExpr
_TEXT	SEGMENT
tv249 = -32						; size = 4
tv208 = -28						; size = 4
tv182 = -24						; size = 4
tv171 = -20						; size = 4
tv92 = -16						; size = 4
_op1$1 = -12						; size = 4
_strict$2 = -8						; size = 4
_inf$3 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompRelationalExpr PROC			; COMDAT

; 10898: xmlXPathCompRelationalExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10899:     xmlXPathCompAdditiveExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompAdditiveExpr
	add	esp, 4

; 10900:     CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 10901:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN11@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathCo
$LN11@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN26@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN27@xmlXPathCo
$LN26@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv92[ebp], edx
$LN27@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN4@xmlXPathCo:

; 10902:     while ((CUR == '<') ||
; 10903:            (CUR == '>') ||
; 10904:            ((CUR == '<') && (NXT(1) == '=')) ||

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 60					; 0000003cH
	je	SHORT $LN13@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 62					; 0000003eH
	je	SHORT $LN13@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 60					; 0000003cH
	jne	SHORT $LN14@xmlXPathCo
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 61					; 0000003dH
	je	SHORT $LN13@xmlXPathCo
$LN14@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 62					; 0000003eH
	jne	$LN1@xmlXPathCo
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 61					; 0000003dH
	jne	$LN1@xmlXPathCo
$LN13@xmlXPathCo:

; 10905:            ((CUR == '>') && (NXT(1) == '='))) {
; 10906: 	int inf, strict;
; 10907: 	int op1 = ctxt->comp->last;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _op1$1[ebp], ecx

; 10908: 
; 10909:         if (CUR == '<') inf = 1;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 60					; 0000003cH
	jne	SHORT $LN15@xmlXPathCo
	mov	DWORD PTR _inf$3[ebp], 1
	jmp	SHORT $LN16@xmlXPathCo
$LN15@xmlXPathCo:

; 10910: 	else inf = 0;

	mov	DWORD PTR _inf$3[ebp], 0
$LN16@xmlXPathCo:

; 10911: 	if (NXT(1) == '=') strict = 0;

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 61					; 0000003dH
	jne	SHORT $LN17@xmlXPathCo
	mov	DWORD PTR _strict$2[ebp], 0
	jmp	SHORT $LN18@xmlXPathCo
$LN17@xmlXPathCo:

; 10912: 	else strict = 1;

	mov	DWORD PTR _strict$2[ebp], 1
$LN18@xmlXPathCo:

; 10913: 	NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN28@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv171[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN29@xmlXPathCo
$LN28@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv171[ebp], eax
$LN29@xmlXPathCo:

; 10914: 	if (!strict) NEXT;

	cmp	DWORD PTR _strict$2[ebp], 0
	jne	SHORT $LN6@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN30@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv182[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN6@xmlXPathCo
$LN30@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv182[ebp], ecx
$LN6@xmlXPathCo:

; 10915: 	SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN20@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN21@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN20@xmlXPathCo
$LN21@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN20@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN32@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv208[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN33@xmlXPathCo
$LN32@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv208[ebp], edx
$LN33@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10916:         xmlXPathCompAdditiveExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompAdditiveExpr
	add	esp, 4

; 10917: 	CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN22@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN22@xmlXPathCo:

; 10918: 	PUSH_BINARY_EXPR(XPATH_OP_CMP, op1, ctxt->comp->last, inf, strict);

	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _strict$2[ebp]
	push	edx
	mov	eax, DWORD PTR _inf$3[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _op1$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN8@xmlXPathCo:

; 10919: 	SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN23@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN24@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN23@xmlXPathCo
$LN24@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN23@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN34@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv249[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN35@xmlXPathCo
$LN34@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv249[ebp], ecx
$LN35@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 10920:     }

	jmp	$LN4@xmlXPathCo
$LN1@xmlXPathCo:

; 10921: }

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompRelationalExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompAdditiveExpr
_TEXT	SEGMENT
tv215 = -24						; size = 4
tv174 = -20						; size = 4
tv148 = -16						; size = 4
tv92 = -12						; size = 4
_op1$1 = -8						; size = 4
_plus$2 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompAdditiveExpr PROC				; COMDAT

; 10859: xmlXPathCompAdditiveExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10860: 
; 10861:     xmlXPathCompMultiplicativeExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompMultiplicativeExpr
	add	esp, 4

; 10862:     CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 10863:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN11@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathCo
$LN11@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN22@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN23@xmlXPathCo
$LN22@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv92[ebp], edx
$LN23@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN4@xmlXPathCo:

; 10864:     while ((CUR == '+') || (CUR == '-')) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 43					; 0000002bH
	je	SHORT $LN13@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	jne	$LN1@xmlXPathCo
$LN13@xmlXPathCo:

; 10865: 	int plus;
; 10866: 	int op1 = ctxt->comp->last;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _op1$1[ebp], edx

; 10867: 
; 10868:         if (CUR == '+') plus = 1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 43					; 0000002bH
	jne	SHORT $LN14@xmlXPathCo
	mov	DWORD PTR _plus$2[ebp], 1
	jmp	SHORT $LN15@xmlXPathCo
$LN14@xmlXPathCo:

; 10869: 	else plus = 0;

	mov	DWORD PTR _plus$2[ebp], 0
$LN15@xmlXPathCo:

; 10870: 	NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN24@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv148[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN6@xmlXPathCo
$LN24@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv148[ebp], eax
$LN6@xmlXPathCo:

; 10871: 	SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN16@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN17@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN16@xmlXPathCo
$LN17@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN16@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN26@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv174[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN27@xmlXPathCo
$LN26@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv174[ebp], ecx
$LN27@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10872:         xmlXPathCompMultiplicativeExpr(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompMultiplicativeExpr
	add	esp, 4

; 10873: 	CHECK_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN18@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN18@xmlXPathCo:

; 10874: 	PUSH_BINARY_EXPR(XPATH_OP_PLUS, op1, ctxt->comp->last, plus, 0);

	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _plus$2[ebp]
	push	ecx
	push	5
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _op1$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN8@xmlXPathCo:

; 10875: 	SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN19@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN20@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN19@xmlXPathCo
$LN20@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN19@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN28@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv215[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN29@xmlXPathCo
$LN28@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv215[ebp], edx
$LN29@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 10876:     }

	jmp	$LN4@xmlXPathCo
$LN1@xmlXPathCo:

; 10877: }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompAdditiveExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompMultiplicativeExpr
_TEXT	SEGMENT
tv253 = -24						; size = 4
tv212 = -20						; size = 4
tv172 = -16						; size = 4
tv92 = -12						; size = 4
_op1$1 = -8						; size = 4
_op$2 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompMultiplicativeExpr PROC			; COMDAT

; 10819: xmlXPathCompMultiplicativeExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10820:     xmlXPathCompUnaryExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompUnaryExpr
	add	esp, 4

; 10821:     CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 10822:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN11@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathCo
$LN11@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN26@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN27@xmlXPathCo
$LN26@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv92[ebp], edx
$LN27@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN4@xmlXPathCo:

; 10823:     while ((CUR == '*') ||
; 10824:            ((CUR == 'd') && (NXT(1) == 'i') && (NXT(2) == 'v')) ||

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 42					; 0000002aH
	je	SHORT $LN13@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 100				; 00000064H
	jne	SHORT $LN14@xmlXPathCo
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 105				; 00000069H
	jne	SHORT $LN14@xmlXPathCo
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 118				; 00000076H
	je	SHORT $LN13@xmlXPathCo
$LN14@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 109				; 0000006dH
	jne	$LN1@xmlXPathCo
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 111				; 0000006fH
	jne	$LN1@xmlXPathCo
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 100				; 00000064H
	jne	$LN1@xmlXPathCo
$LN13@xmlXPathCo:

; 10825:            ((CUR == 'm') && (NXT(1) == 'o') && (NXT(2) == 'd'))) {
; 10826: 	int op = -1;

	mov	DWORD PTR _op$2[ebp], -1

; 10827: 	int op1 = ctxt->comp->last;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _op1$1[ebp], eax

; 10828: 
; 10829:         if (CUR == '*') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN15@xmlXPathCo

; 10830: 	    op = 0;

	mov	DWORD PTR _op$2[ebp], 0

; 10831: 	    NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN28@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv172[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN29@xmlXPathCo
$LN28@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv172[ebp], ecx
$LN29@xmlXPathCo:

; 10832: 	} else if (CUR == 'd') {

	jmp	SHORT $LN6@xmlXPathCo
$LN15@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 100				; 00000064H
	jne	SHORT $LN17@xmlXPathCo

; 10833: 	    op = 1;

	mov	DWORD PTR _op$2[ebp], 1

; 10834: 	    SKIP(3);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 3
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN6@xmlXPathCo
$LN17@xmlXPathCo:

; 10835: 	} else if (CUR == 'm') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 109				; 0000006dH
	jne	SHORT $LN6@xmlXPathCo

; 10836: 	    op = 2;

	mov	DWORD PTR _op$2[ebp], 2

; 10837: 	    SKIP(3);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 3
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
$LN6@xmlXPathCo:

; 10838: 	}
; 10839: 	SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN20@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN21@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN20@xmlXPathCo
$LN21@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN20@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN30@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv212[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN31@xmlXPathCo
$LN30@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv212[ebp], edx
$LN31@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10840:         xmlXPathCompUnaryExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompUnaryExpr
	add	esp, 4

; 10841: 	CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN22@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN22@xmlXPathCo:

; 10842: 	PUSH_BINARY_EXPR(XPATH_OP_MULT, op1, ctxt->comp->last, op, 0);

	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _op$2[ebp]
	push	edx
	push	6
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _op1$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN8@xmlXPathCo:

; 10843: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN23@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN24@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN23@xmlXPathCo
$LN24@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN23@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN32@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv253[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN33@xmlXPathCo
$LN32@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv253[ebp], eax
$LN33@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 10844:     }

	jmp	$LN4@xmlXPathCo
$LN1@xmlXPathCo:

; 10845: }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompMultiplicativeExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompUnaryExpr
_TEXT	SEGMENT
tv162 = -20						; size = 4
tv136 = -16						; size = 4
tv89 = -12						; size = 4
_found$ = -8						; size = 4
_minus$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompUnaryExpr PROC				; COMDAT

; 10783: xmlXPathCompUnaryExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10784:     int minus = 0;

	mov	DWORD PTR _minus$[ebp], 0

; 10785:     int found = 0;

	mov	DWORD PTR _found$[ebp], 0
$LN2@xmlXPathCo:

; 10786: 
; 10787:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN8@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN9@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathCo
$LN8@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN17@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv89[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN18@xmlXPathCo
$LN17@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv89[ebp], eax
$LN18@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN4@xmlXPathCo:

; 10788:     while (CUR == '-') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	$LN5@xmlXPathCo

; 10789:         minus = 1 - minus;

	mov	ecx, 1
	sub	ecx, DWORD PTR _minus$[ebp]
	mov	DWORD PTR _minus$[ebp], ecx

; 10790: 	found = 1;

	mov	DWORD PTR _found$[ebp], 1

; 10791: 	NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN19@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN6@xmlXPathCo
$LN19@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv136[ebp], edx
$LN6@xmlXPathCo:

; 10792: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN10@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN11@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN10@xmlXPathCo
$LN11@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN10@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN21@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv162[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN22@xmlXPathCo
$LN21@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv162[ebp], eax
$LN22@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10793:     }

	jmp	$LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 10794: 
; 10795:     xmlXPathCompUnionExpr(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompUnionExpr
	add	esp, 4

; 10796:     CHECK_ERROR;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN12@xmlXPathCo
	jmp	SHORT $LN1@xmlXPathCo
$LN12@xmlXPathCo:

; 10797:     if (found) {

	cmp	DWORD PTR _found$[ebp], 0
	je	SHORT $LN1@xmlXPathCo

; 10798: 	if (minus)

	cmp	DWORD PTR _minus$[ebp], 0
	je	SHORT $LN14@xmlXPathCo

; 10799: 	    PUSH_UNARY_EXPR(XPATH_OP_PLUS, ctxt->comp->last, 2, 0);

	push	0
	push	0
	push	0
	push	0
	push	2
	push	5
	push	-1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
	jmp	SHORT $LN1@xmlXPathCo
$LN14@xmlXPathCo:

; 10800: 	else
; 10801: 	    PUSH_UNARY_EXPR(XPATH_OP_PLUS, ctxt->comp->last, 3, 0);

	push	0
	push	0
	push	0
	push	0
	push	3
	push	5
	push	-1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN1@xmlXPathCo:

; 10802:     }
; 10803: }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompUnaryExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompUnionExpr
_TEXT	SEGMENT
tv215 = -20						; size = 4
tv176 = -16						; size = 4
tv150 = -12						; size = 4
tv92 = -8						; size = 4
_op1$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompUnionExpr PROC				; COMDAT

; 10754: xmlXPathCompUnionExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10755:     xmlXPathCompPathExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompPathExpr
	add	esp, 4

; 10756:     CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 10757:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN11@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathCo
$LN11@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN18@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN19@xmlXPathCo
$LN18@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv92[ebp], edx
$LN19@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN4@xmlXPathCo:

; 10758:     while (CUR == '|') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 124				; 0000007cH
	jne	$LN1@xmlXPathCo

; 10759: 	int op1 = ctxt->comp->last;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _op1$1[ebp], edx

; 10760: 	PUSH_LEAVE_EXPR(XPATH_OP_NODE, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	9
	push	-1
	push	-1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H

; 10761: 
; 10762: 	NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN20@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv150[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN6@xmlXPathCo
$LN20@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv150[ebp], edx
$LN6@xmlXPathCo:

; 10763: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN13@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN14@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN13@xmlXPathCo
$LN14@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN13@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN22@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv176[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN23@xmlXPathCo
$LN22@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv176[ebp], eax
$LN23@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10764: 	xmlXPathCompPathExpr(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompPathExpr
	add	esp, 4

; 10765: 
; 10766: 	PUSH_BINARY_EXPR(XPATH_OP_UNION, op1, ctxt->comp->last, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	7
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _op1$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN8@xmlXPathCo:

; 10767: 
; 10768: 	SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN15@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN16@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN15@xmlXPathCo
$LN16@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN15@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN24@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv215[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN25@xmlXPathCo
$LN24@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv215[ebp], edx
$LN25@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 10769:     }

	jmp	$LN4@xmlXPathCo
$LN1@xmlXPathCo:

; 10770: }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompUnionExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompPathExpr
_TEXT	SEGMENT
tv401 = -28						; size = 4
tv357 = -24						; size = 4
tv201 = -20						; size = 4
tv89 = -16						; size = 4
_len$1 = -12						; size = 4
_name$ = -8						; size = 4
_lc$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompPathExpr PROC				; COMDAT

; 10598: xmlXPathCompPathExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10599:     int lc = 1;           /* Should we branch to LocationPath ?         */

	mov	DWORD PTR _lc$[ebp], 1

; 10600:     xmlChar *name = NULL; /* we may have to preparse a name to find out */

	mov	DWORD PTR _name$[ebp], 0
$LN2@xmlXPathCo:

; 10601: 
; 10602:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN12@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN13@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN12@xmlXPathCo
$LN13@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathCo
$LN12@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN65@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv89[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN66@xmlXPathCo
$LN65@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv89[ebp], eax
$LN66@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 10603:     if ((CUR == '$') || (CUR == '(') ||
; 10604: 	(IS_ASCII_DIGIT(CUR)) ||
; 10605:         (CUR == '\'') || (CUR == '"') ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 36					; 00000024H
	je	SHORT $LN16@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 40					; 00000028H
	je	SHORT $LN16@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN17@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN16@xmlXPathCo
$LN17@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 39					; 00000027H
	je	SHORT $LN16@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 34					; 00000022H
	je	SHORT $LN16@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN14@xmlXPathCo
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN14@xmlXPathCo
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 57					; 00000039H
	jg	SHORT $LN14@xmlXPathCo
$LN16@xmlXPathCo:

; 10606: 	(CUR == '.' && IS_ASCII_DIGIT(NXT(1)))) {
; 10607: 	lc = 0;

	mov	DWORD PTR _lc$[ebp], 0
	jmp	$LN15@xmlXPathCo
$LN14@xmlXPathCo:

; 10608:     } else if (CUR == '*') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN18@xmlXPathCo

; 10609: 	/* relative or absolute location path */
; 10610: 	lc = 1;

	mov	DWORD PTR _lc$[ebp], 1
	jmp	$LN15@xmlXPathCo
$LN18@xmlXPathCo:

; 10611:     } else if (CUR == '/') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN20@xmlXPathCo

; 10612: 	/* relative or absolute location path */
; 10613: 	lc = 1;

	mov	DWORD PTR _lc$[ebp], 1
	jmp	$LN15@xmlXPathCo
$LN20@xmlXPathCo:

; 10614:     } else if (CUR == '@') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 64					; 00000040H
	jne	SHORT $LN22@xmlXPathCo

; 10615: 	/* relative abbreviated attribute location path */
; 10616: 	lc = 1;

	mov	DWORD PTR _lc$[ebp], 1
	jmp	$LN15@xmlXPathCo
$LN22@xmlXPathCo:

; 10617:     } else if (CUR == '.') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	jne	SHORT $LN4@xmlXPathCo

; 10618: 	/* relative abbreviated attribute location path */
; 10619: 	lc = 1;

	mov	DWORD PTR _lc$[ebp], 1

; 10620:     } else {

	jmp	$LN15@xmlXPathCo
$LN4@xmlXPathCo:

; 10621: 	/*
; 10622: 	 * Problem is finding if we have a name here whether it's:
; 10623: 	 *   - a nodetype
; 10624: 	 *   - a function call in which case it's followed by '('
; 10625: 	 *   - an axis in which case it's followed by ':'
; 10626: 	 *   - a element name
; 10627: 	 * We do an a priori analysis here rather than having to
; 10628: 	 * maintain parsed token content through the recursive function
; 10629: 	 * calls. This looks uglier but makes the code easier to
; 10630: 	 * read/write/debug.
; 10631: 	 */
; 10632: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN26@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN27@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN26@xmlXPathCo
$LN27@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN5@xmlXPathCo
$LN26@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN67@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv201[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN68@xmlXPathCo
$LN67@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv201[ebp], eax
$LN68@xmlXPathCo:
	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 10633: 	name = xmlXPathScanName(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathScanName
	add	esp, 4
	mov	DWORD PTR _name$[ebp], eax

; 10634: 	if ((name != NULL) && (xmlStrstr(name, (xmlChar *) "::") != NULL)) {

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN28@xmlXPathCo
	push	OFFSET ??_C@_02MOLJINC@?3?3@
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrstr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN28@xmlXPathCo

; 10635: #ifdef DEBUG_STEP
; 10636: 	    xmlGenericError(xmlGenericErrorContext,
; 10637: 		    "PathExpr: Axis\n");
; 10638: #endif
; 10639: 	    lc = 1;

	mov	DWORD PTR _lc$[ebp], 1

; 10640: 	    xmlFree(name);

	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN15@xmlXPathCo
$LN28@xmlXPathCo:

; 10641: 	} else if (name != NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	je	$LN30@xmlXPathCo

; 10642: 	    int len =xmlStrlen(name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrlen
	add	esp, 4
	mov	DWORD PTR _len$1[ebp], eax
$LN6@xmlXPathCo:

; 10643: 
; 10644: 
; 10645: 	    while (NXT(len) != 0) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _len$1[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	test	edx, edx
	je	$LN7@xmlXPathCo

; 10646: 		if (NXT(len) == '/') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _len$1[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN32@xmlXPathCo

; 10647: 		    /* element name */
; 10648: #ifdef DEBUG_STEP
; 10649: 		    xmlGenericError(xmlGenericErrorContext,
; 10650: 			    "PathExpr: AbbrRelLocation\n");
; 10651: #endif
; 10652: 		    lc = 1;

	mov	DWORD PTR _lc$[ebp], 1

; 10653: 		    break;

	jmp	$LN7@xmlXPathCo
	jmp	$LN33@xmlXPathCo
$LN32@xmlXPathCo:

; 10654: 		} else if (IS_BLANK_CH(NXT(len))) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _len$1[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN36@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _len$1[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	cmp	edx, 9
	jl	SHORT $LN37@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _len$1[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN36@xmlXPathCo
$LN37@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _len$1[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN34@xmlXPathCo
$LN36@xmlXPathCo:

; 10655: 		    /* ignore blanks */
; 10656: 		    ;
; 10657: 		} else if (NXT(len) == ':') {

	jmp	$LN33@xmlXPathCo
$LN34@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _len$1[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	cmp	edx, 58					; 0000003aH
	jne	SHORT $LN38@xmlXPathCo

; 10658: #ifdef DEBUG_STEP
; 10659: 		    xmlGenericError(xmlGenericErrorContext,
; 10660: 			    "PathExpr: AbbrRelLocation\n");
; 10661: #endif
; 10662: 		    lc = 1;

	mov	DWORD PTR _lc$[ebp], 1

; 10663: 		    break;

	jmp	$LN7@xmlXPathCo
	jmp	$LN33@xmlXPathCo
$LN38@xmlXPathCo:

; 10664: 		} else if ((NXT(len) == '(')) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _len$1[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 40					; 00000028H
	jne	SHORT $LN40@xmlXPathCo

; 10665: 		    /* Node Type or Function */
; 10666: 		    if (xmlXPathIsNodeType(name)) {

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlXPathIsNodeType
	add	esp, 4
	test	eax, eax
	je	SHORT $LN42@xmlXPathCo

; 10667: #ifdef DEBUG_STEP
; 10668: 		        xmlGenericError(xmlGenericErrorContext,
; 10669: 				"PathExpr: Type search\n");
; 10670: #endif
; 10671: 			lc = 1;

	mov	DWORD PTR _lc$[ebp], 1
	jmp	SHORT $LN43@xmlXPathCo
$LN42@xmlXPathCo:

; 10672: #ifdef LIBXML_XPTR_ENABLED
; 10673:                     } else if (ctxt->xptr &&

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN44@xmlXPathCo
	push	OFFSET ??_C@_08KHINJAEH@range?9to@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN44@xmlXPathCo

; 10674:                                xmlStrEqual(name, BAD_CAST "range-to")) {
; 10675:                         lc = 1;

	mov	DWORD PTR _lc$[ebp], 1

; 10676: #endif
; 10677: 		    } else {

	jmp	SHORT $LN43@xmlXPathCo
$LN44@xmlXPathCo:

; 10678: #ifdef DEBUG_STEP
; 10679: 		        xmlGenericError(xmlGenericErrorContext,
; 10680: 				"PathExpr: function call\n");
; 10681: #endif
; 10682: 			lc = 0;

	mov	DWORD PTR _lc$[ebp], 0
$LN43@xmlXPathCo:

; 10683: 		    }
; 10684:                     break;

	jmp	SHORT $LN7@xmlXPathCo
	jmp	SHORT $LN33@xmlXPathCo
$LN40@xmlXPathCo:

; 10685: 		} else if ((NXT(len) == '[')) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _len$1[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	cmp	ecx, 91					; 0000005bH
	jne	SHORT $LN46@xmlXPathCo

; 10686: 		    /* element name */
; 10687: #ifdef DEBUG_STEP
; 10688: 		    xmlGenericError(xmlGenericErrorContext,
; 10689: 			    "PathExpr: AbbrRelLocation\n");
; 10690: #endif
; 10691: 		    lc = 1;

	mov	DWORD PTR _lc$[ebp], 1

; 10692: 		    break;

	jmp	SHORT $LN7@xmlXPathCo
	jmp	SHORT $LN33@xmlXPathCo
$LN46@xmlXPathCo:

; 10693: 		} else if ((NXT(len) == '<') || (NXT(len) == '>') ||

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _len$1[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	cmp	edx, 60					; 0000003cH
	je	SHORT $LN50@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _len$1[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	cmp	eax, 62					; 0000003eH
	je	SHORT $LN50@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _len$1[ebp]
	movzx	ecx, BYTE PTR [edx+eax]
	cmp	ecx, 61					; 0000003dH
	jne	SHORT $LN48@xmlXPathCo
$LN50@xmlXPathCo:

; 10694: 			   (NXT(len) == '=')) {
; 10695: 		    lc = 1;

	mov	DWORD PTR _lc$[ebp], 1

; 10696: 		    break;

	jmp	SHORT $LN7@xmlXPathCo

; 10697: 		} else {

	jmp	SHORT $LN33@xmlXPathCo
$LN48@xmlXPathCo:

; 10698: 		    lc = 1;

	mov	DWORD PTR _lc$[ebp], 1

; 10699: 		    break;

	jmp	SHORT $LN7@xmlXPathCo
$LN33@xmlXPathCo:

; 10700: 		}
; 10701: 		len++;

	mov	edx, DWORD PTR _len$1[ebp]
	add	edx, 1
	mov	DWORD PTR _len$1[ebp], edx

; 10702: 	    }

	jmp	$LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10703: 	    if (NXT(len) == 0) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _len$1[ebp]
	movzx	eax, BYTE PTR [ecx+edx]
	test	eax, eax
	jne	SHORT $LN51@xmlXPathCo

; 10704: #ifdef DEBUG_STEP
; 10705: 		xmlGenericError(xmlGenericErrorContext,
; 10706: 			"PathExpr: AbbrRelLocation\n");
; 10707: #endif
; 10708: 		/* element name */
; 10709: 		lc = 1;

	mov	DWORD PTR _lc$[ebp], 1
$LN51@xmlXPathCo:

; 10710: 	    }
; 10711: 	    xmlFree(name);

	mov	esi, esp
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10712: 	} else {

	jmp	SHORT $LN15@xmlXPathCo
$LN30@xmlXPathCo:

; 10713: 	    /* make sure all cases are covered explicitly */
; 10714: 	    XP_ERROR(XPATH_EXPR_ERROR);

	push	7
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN15@xmlXPathCo:

; 10715: 	}
; 10716:     }
; 10717: 
; 10718:     if (lc) {

	cmp	DWORD PTR _lc$[ebp], 0
	je	SHORT $LN52@xmlXPathCo

; 10719: 	if (CUR == '/') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN54@xmlXPathCo

; 10720: 	    PUSH_LEAVE_EXPR(XPATH_OP_ROOT, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	8
	push	-1
	push	-1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H

; 10721: 	} else {

	jmp	SHORT $LN55@xmlXPathCo
$LN54@xmlXPathCo:

; 10722: 	    PUSH_LEAVE_EXPR(XPATH_OP_NODE, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	9
	push	-1
	push	-1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN55@xmlXPathCo:

; 10723: 	}
; 10724: 	xmlXPathCompLocationPath(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompLocationPath
	add	esp, 4

; 10725:     } else {

	jmp	$LN10@xmlXPathCo
$LN52@xmlXPathCo:

; 10726: 	xmlXPathCompFilterExpr(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompFilterExpr
	add	esp, 4

; 10727: 	CHECK_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN56@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN56@xmlXPathCo:

; 10728: 	if ((CUR == '/') && (NXT(1) == '/')) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	$LN57@xmlXPathCo
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 47					; 0000002fH
	jne	$LN57@xmlXPathCo

; 10729: 	    SKIP(2);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
$LN8@xmlXPathCo:

; 10730: 	    SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN59@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN60@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN59@xmlXPathCo
$LN60@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN59@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN69@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv357[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN70@xmlXPathCo
$LN69@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv357[ebp], edx
$LN70@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 10731: 
; 10732: 	    PUSH_LONG_EXPR(XPATH_OP_COLLECT, AXIS_DESCENDANT_OR_SELF,

	push	0
	push	0
	push	0
	push	1
	push	6
	push	10					; 0000000aH
	push	-1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H

; 10733: 		    NODE_TEST_TYPE, NODE_TYPE_NODE, NULL, NULL);
; 10734: 
; 10735: 	    xmlXPathCompRelativeLocationPath(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompRelativeLocationPath
	add	esp, 4
	jmp	SHORT $LN10@xmlXPathCo
$LN57@xmlXPathCo:

; 10736: 	} else if (CUR == '/') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN10@xmlXPathCo

; 10737: 	    xmlXPathCompRelativeLocationPath(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompRelativeLocationPath
	add	esp, 4
$LN10@xmlXPathCo:

; 10738: 	}
; 10739:     }
; 10740:     SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN62@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN63@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN62@xmlXPathCo
$LN63@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN1@xmlXPathCo
$LN62@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN71@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv401[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN72@xmlXPathCo
$LN71@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv401[ebp], ecx
$LN72@xmlXPathCo:
	jmp	SHORT $LN10@xmlXPathCo
$LN1@xmlXPathCo:

; 10741: }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompPathExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathScanName
_TEXT	SEGMENT
tv183 = -80						; size = 4
tv182 = -76						; size = 4
tv175 = -72						; size = 4
tv165 = -68						; size = 4
tv164 = -64						; size = 4
tv155 = -60						; size = 4
tv156 = -56						; size = 4
tv147 = -52						; size = 4
tv146 = -48						; size = 4
tv93 = -44						; size = 4
tv94 = -40						; size = 4
tv85 = -36						; size = 4
tv84 = -32						; size = 4
_ret$ = -28						; size = 4
_cur$ = -24						; size = 4
_c$ = -20						; size = 4
_l$ = -12						; size = 4
_len$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathScanName PROC					; COMDAT

; 10549: xmlXPathScanName(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10550:     int len = 0, l;

	mov	DWORD PTR _len$[ebp], 0

; 10551:     int c;
; 10552:     const xmlChar *cur;
; 10553:     xmlChar *ret;
; 10554: 
; 10555:     cur = ctxt->cur;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx

; 10556: 
; 10557:     c = CUR_CHAR(l);

	lea	edx, DWORD PTR _l$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCurrentChar
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax

; 10558:     if ((c == ' ') || (c == '>') || (c == '/') || /* accelerators */

	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	je	$LN5@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 62			; 0000003eH
	je	$LN5@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 47			; 0000002fH
	je	$LN5@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN14@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN8@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	SHORT $LN10@xmlXPathSc
$LN8@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN9@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	SHORT $LN10@xmlXPathSc
$LN9@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN11@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 214			; 000000d6H
	jle	SHORT $LN10@xmlXPathSc
$LN11@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 216			; 000000d8H
	jl	SHORT $LN12@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 246			; 000000f6H
	jle	SHORT $LN10@xmlXPathSc
$LN12@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 248			; 000000f8H
	jge	SHORT $LN10@xmlXPathSc
	mov	DWORD PTR tv84[ebp], 0
	jmp	SHORT $LN13@xmlXPathSc
$LN10@xmlXPathSc:
	mov	DWORD PTR tv84[ebp], 1
$LN13@xmlXPathSc:
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR tv85[ebp], ecx
	jmp	SHORT $LN15@xmlXPathSc
$LN14@xmlXPathSc:
	push	OFFSET _xmlIsBaseCharGroup
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv85[ebp], eax
$LN15@xmlXPathSc:
	cmp	DWORD PTR tv85[ebp], 0
	jne	SHORT $LN2@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN20@xmlXPathSc
	mov	DWORD PTR tv94[ebp], 0
	jmp	SHORT $LN21@xmlXPathSc
$LN20@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 19968		; 00004e00H
	jl	SHORT $LN16@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 40869		; 00009fa5H
	jle	SHORT $LN17@xmlXPathSc
$LN16@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 12295		; 00003007H
	je	SHORT $LN17@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 12321		; 00003021H
	jl	SHORT $LN18@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 12329		; 00003029H
	jle	SHORT $LN17@xmlXPathSc
$LN18@xmlXPathSc:
	mov	DWORD PTR tv93[ebp], 0
	jmp	SHORT $LN19@xmlXPathSc
$LN17@xmlXPathSc:
	mov	DWORD PTR tv93[ebp], 1
$LN19@xmlXPathSc:
	mov	eax, DWORD PTR tv93[ebp]
	mov	DWORD PTR tv94[ebp], eax
$LN21@xmlXPathSc:
	cmp	DWORD PTR tv94[ebp], 0
	jne	SHORT $LN2@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 95			; 0000005fH
	je	SHORT $LN2@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	je	SHORT $LN2@xmlXPathSc
$LN5@xmlXPathSc:

; 10559: 	(!IS_LETTER(c) && (c != '_') &&
; 10560:          (c != ':'))) {
; 10561: 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathSc
$LN2@xmlXPathSc:

; 10562:     }
; 10563: 
; 10564:     while ((c != ' ') && (c != '>') && (c != '/') && /* test bigname.xml */

	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	je	$LN3@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 62			; 0000003eH
	je	$LN3@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 47			; 0000002fH
	je	$LN3@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN28@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN22@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	SHORT $LN24@xmlXPathSc
$LN22@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN23@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	SHORT $LN24@xmlXPathSc
$LN23@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN25@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 214			; 000000d6H
	jle	SHORT $LN24@xmlXPathSc
$LN25@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 216			; 000000d8H
	jl	SHORT $LN26@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 246			; 000000f6H
	jle	SHORT $LN24@xmlXPathSc
$LN26@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 248			; 000000f8H
	jge	SHORT $LN24@xmlXPathSc
	mov	DWORD PTR tv146[ebp], 0
	jmp	SHORT $LN27@xmlXPathSc
$LN24@xmlXPathSc:
	mov	DWORD PTR tv146[ebp], 1
$LN27@xmlXPathSc:
	mov	ecx, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv147[ebp], ecx
	jmp	SHORT $LN29@xmlXPathSc
$LN28@xmlXPathSc:
	push	OFFSET _xmlIsBaseCharGroup
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv147[ebp], eax
$LN29@xmlXPathSc:
	cmp	DWORD PTR tv147[ebp], 0
	jne	$LN6@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN34@xmlXPathSc
	mov	DWORD PTR tv156[ebp], 0
	jmp	SHORT $LN35@xmlXPathSc
$LN34@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 19968		; 00004e00H
	jl	SHORT $LN30@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 40869		; 00009fa5H
	jle	SHORT $LN31@xmlXPathSc
$LN30@xmlXPathSc:
	cmp	DWORD PTR _c$[ebp], 12295		; 00003007H
	je	SHORT $LN31@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 12321		; 00003021H
	jl	SHORT $LN32@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 12329		; 00003029H
	jle	SHORT $LN31@xmlXPathSc
$LN32@xmlXPathSc:
	mov	DWORD PTR tv155[ebp], 0
	jmp	SHORT $LN33@xmlXPathSc
$LN31@xmlXPathSc:
	mov	DWORD PTR tv155[ebp], 1
$LN33@xmlXPathSc:
	mov	eax, DWORD PTR tv155[ebp]
	mov	DWORD PTR tv156[ebp], eax
$LN35@xmlXPathSc:
	cmp	DWORD PTR tv156[ebp], 0
	jne	$LN6@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN38@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 48			; 00000030H
	jl	SHORT $LN36@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 57			; 00000039H
	jg	SHORT $LN36@xmlXPathSc
	mov	DWORD PTR tv164[ebp], 1
	jmp	SHORT $LN37@xmlXPathSc
$LN36@xmlXPathSc:
	mov	DWORD PTR tv164[ebp], 0
$LN37@xmlXPathSc:
	mov	ecx, DWORD PTR tv164[ebp]
	mov	DWORD PTR tv165[ebp], ecx
	jmp	SHORT $LN39@xmlXPathSc
$LN38@xmlXPathSc:
	push	OFFSET _xmlIsDigitGroup
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv165[ebp], eax
$LN39@xmlXPathSc:
	cmp	DWORD PTR tv165[ebp], 0
	jne	$LN6@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 46			; 0000002eH
	je	$LN6@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 45			; 0000002dH
	je	SHORT $LN6@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 95			; 0000005fH
	je	SHORT $LN6@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	je	SHORT $LN6@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN40@xmlXPathSc
	mov	DWORD PTR tv175[ebp], 0
	jmp	SHORT $LN41@xmlXPathSc
$LN40@xmlXPathSc:
	push	OFFSET _xmlIsCombiningGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv175[ebp], eax
$LN41@xmlXPathSc:
	cmp	DWORD PTR tv175[ebp], 0
	jne	SHORT $LN6@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN44@xmlXPathSc
	cmp	DWORD PTR _c$[ebp], 183			; 000000b7H
	jne	SHORT $LN42@xmlXPathSc
	mov	DWORD PTR tv182[ebp], 1
	jmp	SHORT $LN43@xmlXPathSc
$LN42@xmlXPathSc:
	mov	DWORD PTR tv182[ebp], 0
$LN43@xmlXPathSc:
	mov	ecx, DWORD PTR tv182[ebp]
	mov	DWORD PTR tv183[ebp], ecx
	jmp	SHORT $LN45@xmlXPathSc
$LN44@xmlXPathSc:
	push	OFFSET _xmlIsExtenderGroup
	mov	edx, DWORD PTR _c$[ebp]
	push	edx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv183[ebp], eax
$LN45@xmlXPathSc:
	cmp	DWORD PTR tv183[ebp], 0
	je	SHORT $LN3@xmlXPathSc
$LN6@xmlXPathSc:

; 10565: 	   ((IS_LETTER(c)) || (IS_DIGIT(c)) ||
; 10566:             (c == '.') || (c == '-') ||
; 10567: 	    (c == '_') || (c == ':') ||
; 10568: 	    (IS_COMBINING(c)) ||
; 10569: 	    (IS_EXTENDER(c)))) {
; 10570: 	len += l;

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR _len$[ebp], eax

; 10571: 	NEXTL(l);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx

; 10572: 	c = CUR_CHAR(l);

	lea	ecx, DWORD PTR _l$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCurrentChar
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax

; 10573:     }

	jmp	$LN2@xmlXPathSc
$LN3@xmlXPathSc:

; 10574:     ret = xmlStrndup(cur, ctxt->cur - cur);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 10575:     ctxt->cur = cur;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], ecx

; 10576:     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathSc:

; 10577: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@xmlXPathSc
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN48@xmlXPathSc:
	DD	1
	DD	$LN47@xmlXPathSc
$LN47@xmlXPathSc:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN46@xmlXPathSc
$LN46@xmlXPathSc:
	DB	108					; 0000006cH
	DB	0
_xmlXPathScanName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompFilterExpr
_TEXT	SEGMENT
tv156 = -8						; size = 4
tv92 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompFilterExpr PROC				; COMDAT

; 10518: xmlXPathCompFilterExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10519:     xmlXPathCompPrimaryExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompPrimaryExpr
	add	esp, 4

; 10520:     CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 10521:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN9@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN10@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN9@xmlXPathCo
$LN10@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathCo
$LN9@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN14@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN15@xmlXPathCo
$LN14@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv92[ebp], edx
$LN15@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN4@xmlXPathCo:

; 10522: 
; 10523:     while (CUR == '[') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 91					; 0000005bH
	jne	SHORT $LN1@xmlXPathCo

; 10524: 	xmlXPathCompPredicate(ctxt, 1);

	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompPredicate
	add	esp, 8
$LN6@xmlXPathCo:

; 10525: 	SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN11@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN11@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN16@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv156[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN17@xmlXPathCo
$LN16@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv156[ebp], ecx
$LN17@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10526:     }

	jmp	SHORT $LN4@xmlXPathCo
$LN1@xmlXPathCo:

; 10527: 
; 10528: 
; 10529: }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompFilterExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompPrimaryExpr
_TEXT	SEGMENT
tv271 = -24						; size = 4
tv212 = -20						; size = 4
tv186 = -16						; size = 4
tv166 = -12						; size = 4
tv140 = -8						; size = 4
tv89 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompPrimaryExpr PROC				; COMDAT

; 10479: xmlXPathCompPrimaryExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@xmlXPathCo:

; 10480:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN10@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN11@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN10@xmlXPathCo
$LN11@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathCo
$LN10@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN32@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv89[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN33@xmlXPathCo
$LN32@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv89[ebp], eax
$LN33@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 10481:     if (CUR == '$') xmlXPathCompVariableReference(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 36					; 00000024H
	jne	SHORT $LN12@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompVariableReference
	add	esp, 4
	jmp	$LN8@xmlXPathCo
$LN12@xmlXPathCo:

; 10482:     else if (CUR == '(') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 40					; 00000028H
	jne	$LN14@xmlXPathCo

; 10483: 	NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN34@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv140[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN4@xmlXPathCo
$LN34@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv140[ebp], edx
$LN4@xmlXPathCo:

; 10484: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN16@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN17@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN16@xmlXPathCo
$LN17@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN5@xmlXPathCo
$LN16@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN36@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv166[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN37@xmlXPathCo
$LN36@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv166[ebp], eax
$LN37@xmlXPathCo:
	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 10485: 	xmlXPathCompileExpr(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompileExpr
	add	esp, 8

; 10486: 	CHECK_ERROR;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN18@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN18@xmlXPathCo:

; 10487: 	if (CUR != ')') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 41					; 00000029H
	je	SHORT $LN19@xmlXPathCo

; 10488: 	    XP_ERROR(XPATH_EXPR_ERROR);

	push	7
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN19@xmlXPathCo:

; 10489: 	}
; 10490: 	NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN38@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv186[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN6@xmlXPathCo
$LN38@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv186[ebp], ecx
$LN6@xmlXPathCo:

; 10491: 	SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN20@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN21@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN20@xmlXPathCo
$LN21@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN20@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN40@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv212[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN41@xmlXPathCo
$LN40@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv212[ebp], edx
$LN41@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10492:     } else if (IS_ASCII_DIGIT(CUR) || (CUR == '.' && IS_ASCII_DIGIT(NXT(1)))) {

	jmp	$LN8@xmlXPathCo
$LN14@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN25@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 57					; 00000039H
	jle	SHORT $LN24@xmlXPathCo
$LN25@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	jne	SHORT $LN22@xmlXPathCo
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN22@xmlXPathCo
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN22@xmlXPathCo
$LN24@xmlXPathCo:

; 10493: 	xmlXPathCompNumber(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompNumber
	add	esp, 4
	jmp	SHORT $LN8@xmlXPathCo
$LN22@xmlXPathCo:

; 10494:     } else if ((CUR == '\'') || (CUR == '"')) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 39					; 00000027H
	je	SHORT $LN28@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 34					; 00000022H
	jne	SHORT $LN26@xmlXPathCo
$LN28@xmlXPathCo:

; 10495: 	xmlXPathCompLiteral(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompLiteral
	add	esp, 4

; 10496:     } else {

	jmp	SHORT $LN8@xmlXPathCo
$LN26@xmlXPathCo:

; 10497: 	xmlXPathCompFunctionCall(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompFunctionCall
	add	esp, 4
$LN8@xmlXPathCo:

; 10498:     }
; 10499:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN29@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN30@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN29@xmlXPathCo
$LN30@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN1@xmlXPathCo
$LN29@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN42@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv271[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN43@xmlXPathCo
$LN42@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv271[ebp], edx
$LN43@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN1@xmlXPathCo:

; 10500: }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompPrimaryExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompFunctionCall
_TEXT	SEGMENT
tv310 = -56						; size = 4
tv284 = -52						; size = 4
tv262 = -48						; size = 4
tv236 = -44						; size = 4
tv172 = -40						; size = 4
tv146 = -36						; size = 4
tv128 = -32						; size = 4
_op1$1 = -28						; size = 4
_sort$ = -24						; size = 4
_nbargs$ = -20						; size = 4
_prefix$ = -12						; size = 4
_name$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompFunctionCall PROC				; COMDAT

; 10400: xmlXPathCompFunctionCall(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10401:     xmlChar *name;
; 10402:     xmlChar *prefix;
; 10403:     int nbargs = 0;

	mov	DWORD PTR _nbargs$[ebp], 0

; 10404:     int sort = 1;

	mov	DWORD PTR _sort$[ebp], 1

; 10405: 
; 10406:     name = xmlXPathParseQName(ctxt, &prefix);

	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathParseQName
	add	esp, 8
	mov	DWORD PTR _name$[ebp], eax

; 10407:     if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@xmlXPathCo

; 10408: 	xmlFree(prefix);

	mov	esi, esp
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10409: 	XP_ERROR(XPATH_EXPR_ERROR);

	push	7
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 10410:     }
; 10411:     SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN13@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN14@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN13@xmlXPathCo
$LN14@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathCo
$LN13@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN28@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv128[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN29@xmlXPathCo
$LN28@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv128[ebp], ecx
$LN29@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 10412: #ifdef DEBUG_EXPR
; 10413:     if (prefix == NULL)
; 10414: 	xmlGenericError(xmlGenericErrorContext, "Calling function %s\n",
; 10415: 			name);
; 10416:     else
; 10417: 	xmlGenericError(xmlGenericErrorContext, "Calling function %s:%s\n",
; 10418: 			prefix, name);
; 10419: #endif
; 10420: 
; 10421:     if (CUR != '(') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 40					; 00000028H
	je	SHORT $LN15@xmlXPathCo

; 10422: 	xmlFree(name);

	mov	esi, esp
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10423: 	xmlFree(prefix);

	mov	esi, esp
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10424: 	XP_ERROR(XPATH_EXPR_ERROR);

	push	7
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN15@xmlXPathCo:

; 10425:     }
; 10426:     NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN30@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv146[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN4@xmlXPathCo
$LN30@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv146[ebp], edx
$LN4@xmlXPathCo:

; 10427:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN16@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN17@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN16@xmlXPathCo
$LN17@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN5@xmlXPathCo
$LN16@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN32@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv172[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN33@xmlXPathCo
$LN32@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv172[ebp], eax
$LN33@xmlXPathCo:
	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 10428: 
; 10429:     /*
; 10430:     * Optimization for count(): we don't need the node-set to be sorted.
; 10431:     */
; 10432:     if ((prefix == NULL) && (name[0] == 'c') &&

	cmp	DWORD PTR _prefix$[ebp], 0
	jne	SHORT $LN18@xmlXPathCo
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _name$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 99					; 00000063H
	jne	SHORT $LN18@xmlXPathCo
	push	OFFSET ??_C@_05IOMEMJEC@count@
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@xmlXPathCo

; 10433: 	xmlStrEqual(name, BAD_CAST "count"))
; 10434:     {
; 10435: 	sort = 0;

	mov	DWORD PTR _sort$[ebp], 0
$LN18@xmlXPathCo:

; 10436:     }
; 10437:     ctxt->comp->last = -1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+12], -1

; 10438:     if (CUR != ')') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 41					; 00000029H
	je	$LN19@xmlXPathCo
$LN6@xmlXPathCo:

; 10439: 	while (CUR != 0) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN19@xmlXPathCo

; 10440: 	    int op1 = ctxt->comp->last;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _op1$1[ebp], ecx

; 10441: 	    ctxt->comp->last = -1;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [eax+12], -1

; 10442: 	    xmlXPathCompileExpr(ctxt, sort);

	mov	ecx, DWORD PTR _sort$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompileExpr
	add	esp, 8

; 10443: 	    if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN20@xmlXPathCo

; 10444: 		xmlFree(name);

	mov	esi, esp
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10445: 		xmlFree(prefix);

	mov	esi, esp
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10446: 		return;

	jmp	$LN1@xmlXPathCo
$LN20@xmlXPathCo:

; 10447: 	    }
; 10448: 	    PUSH_BINARY_EXPR(XPATH_OP_ARG, op1, ctxt->comp->last, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	14					; 0000000eH
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _op1$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H

; 10449: 	    nbargs++;

	mov	eax, DWORD PTR _nbargs$[ebp]
	add	eax, 1
	mov	DWORD PTR _nbargs$[ebp], eax

; 10450: 	    if (CUR == ')') break;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 41					; 00000029H
	jne	SHORT $LN21@xmlXPathCo
	jmp	$LN19@xmlXPathCo
$LN21@xmlXPathCo:

; 10451: 	    if (CUR != ',') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN22@xmlXPathCo

; 10452: 		xmlFree(name);

	mov	esi, esp
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10453: 		xmlFree(prefix);

	mov	esi, esp
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10454: 		XP_ERROR(XPATH_EXPR_ERROR);

	push	7
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN22@xmlXPathCo:

; 10455: 	    }
; 10456: 	    NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN34@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv236[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN8@xmlXPathCo
$LN34@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv236[ebp], ecx
$LN8@xmlXPathCo:

; 10457: 	    SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN23@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN24@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN23@xmlXPathCo
$LN24@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN23@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN36@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv262[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN37@xmlXPathCo
$LN36@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv262[ebp], edx
$LN37@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 10458: 	}

	jmp	$LN6@xmlXPathCo
$LN19@xmlXPathCo:

; 10459:     }
; 10460:     PUSH_LONG_EXPR(XPATH_OP_FUNCTION, nbargs, 0, 0,

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _nbargs$[ebp]
	push	edx
	push	13					; 0000000dH
	push	-1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H

; 10461: 	           name, prefix);
; 10462:     NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN38@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv284[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN10@xmlXPathCo
$LN38@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv284[ebp], edx
$LN10@xmlXPathCo:

; 10463:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN25@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN26@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN25@xmlXPathCo
$LN26@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN1@xmlXPathCo
$LN25@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN40@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv310[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN41@xmlXPathCo
$LN40@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv310[ebp], eax
$LN41@xmlXPathCo:
	jmp	SHORT $LN10@xmlXPathCo
$LN1@xmlXPathCo:

; 10464: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@xmlXPathCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN44@xmlXPathCo:
	DD	1
	DD	$LN43@xmlXPathCo
$LN43@xmlXPathCo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN42@xmlXPathCo
$LN42@xmlXPathCo:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlXPathCompFunctionCall ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompVariableReference
_TEXT	SEGMENT
tv184 = -28						; size = 4
tv137 = -24						; size = 4
tv89 = -20						; size = 4
_prefix$ = -12						; size = 4
_name$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompVariableReference PROC			; COMDAT

; 10337: xmlXPathCompVariableReference(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@xmlXPathCo:

; 10338:     xmlChar *name;
; 10339:     xmlChar *prefix;
; 10340: 
; 10341:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN6@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN7@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathCo
$LN6@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN14@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv89[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN15@xmlXPathCo
$LN14@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv89[ebp], eax
$LN15@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 10342:     if (CUR != '$') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 36					; 00000024H
	je	SHORT $LN8@xmlXPathCo

; 10343: 	XP_ERROR(XPATH_VARIABLE_REF_ERROR);

	push	4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN8@xmlXPathCo:

; 10344:     }
; 10345:     NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN16@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv137[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN17@xmlXPathCo
$LN16@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv137[ebp], edx
$LN17@xmlXPathCo:

; 10346:     name = xmlXPathParseQName(ctxt, &prefix);

	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathParseQName
	add	esp, 8
	mov	DWORD PTR _name$[ebp], eax

; 10347:     if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN9@xmlXPathCo

; 10348:         xmlFree(prefix);

	mov	esi, esp
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 10349: 	XP_ERROR(XPATH_VARIABLE_REF_ERROR);

	push	4
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN9@xmlXPathCo:

; 10350:     }
; 10351:     ctxt->comp->last = -1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+12], -1

; 10352:     PUSH_LONG_EXPR(XPATH_OP_VARIABLE, 0, 0, 0,

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	push	12					; 0000000cH
	push	-1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN4@xmlXPathCo:

; 10353: 	           name, prefix);
; 10354:     SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN10@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN11@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN10@xmlXPathCo
$LN11@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN5@xmlXPathCo
$LN10@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN18@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv184[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN19@xmlXPathCo
$LN18@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv184[ebp], ecx
$LN19@xmlXPathCo:
	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 10355:     if ((ctxt->context != NULL) && (ctxt->context->flags & XML_XPATH_NOVAR)) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN1@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+196]
	and	edx, 2
	je	SHORT $LN1@xmlXPathCo

; 10356: 	XP_ERROR(XPATH_FORBID_VARIABLE_ERROR);

	push	24					; 00000018H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
$LN1@xmlXPathCo:

; 10357:     }
; 10358: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@xmlXPathCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN22@xmlXPathCo:
	DD	1
	DD	$LN21@xmlXPathCo
$LN21@xmlXPathCo:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN20@xmlXPathCo
$LN20@xmlXPathCo:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlXPathCompVariableReference ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompLiteral
_TEXT	SEGMENT
tv251 = -32						; size = 4
tv218 = -28						; size = 4
tv187 = -24						; size = 4
tv173 = -20						; size = 4
tv140 = -16						; size = 4
tv77 = -12						; size = 4
_ret$ = -8						; size = 4
_q$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompLiteral PROC				; COMDAT

; 10284: xmlXPathCompLiteral(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10285:     const xmlChar *q;
; 10286:     xmlChar *ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 10287: 
; 10288:     if (CUR == '"') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 34					; 00000022H
	jne	$LN6@xmlXPathCo

; 10289:         NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN22@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv77[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN23@xmlXPathCo
$LN22@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv77[ebp], eax
$LN23@xmlXPathCo:

; 10290: 	q = CUR_PTR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _q$[ebp], edx
$LN2@xmlXPathCo:

; 10291: 	while ((IS_CHAR_CH(CUR)) && (CUR != '"'))

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN9@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN8@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jl	SHORT $LN3@xmlXPathCo
$LN8@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 34					; 00000022H
	je	SHORT $LN3@xmlXPathCo

; 10292: 	    NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN24@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv140[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN25@xmlXPathCo
$LN24@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv140[ebp], eax
$LN25@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 10293: 	if (!IS_CHAR_CH(CUR)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN10@xmlXPathCo
$LN12@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN10@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN10@xmlXPathCo

; 10294: 	    XP_ERROR(XPATH_UNFINISHED_LITERAL_ERROR);

	push	2
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo

; 10295: 	} else {

	jmp	SHORT $LN11@xmlXPathCo
$LN10@xmlXPathCo:

; 10296: 	    ret = xmlStrndup(q, CUR_PTR - q);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 10297: 	    NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN26@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv173[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN11@xmlXPathCo
$LN26@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv173[ebp], edx
$LN11@xmlXPathCo:

; 10298:         }

	jmp	$LN7@xmlXPathCo
$LN6@xmlXPathCo:

; 10299:     } else if (CUR == '\'') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 39					; 00000027H
	jne	$LN13@xmlXPathCo

; 10300:         NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN28@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv187[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN29@xmlXPathCo
$LN28@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv187[ebp], eax
$LN29@xmlXPathCo:

; 10301: 	q = CUR_PTR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _q$[ebp], edx
$LN4@xmlXPathCo:

; 10302: 	while ((IS_CHAR_CH(CUR)) && (CUR != '\''))

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN16@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN15@xmlXPathCo
$LN16@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN15@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jl	SHORT $LN5@xmlXPathCo
$LN15@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 39					; 00000027H
	je	SHORT $LN5@xmlXPathCo

; 10303: 	    NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN30@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv218[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN31@xmlXPathCo
$LN30@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv218[ebp], eax
$LN31@xmlXPathCo:
	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 10304: 	if (!IS_CHAR_CH(CUR)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN19@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN17@xmlXPathCo
$LN19@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN17@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN17@xmlXPathCo

; 10305: 	    XP_ERROR(XPATH_UNFINISHED_LITERAL_ERROR);

	push	2
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo

; 10306: 	} else {

	jmp	SHORT $LN18@xmlXPathCo
$LN17@xmlXPathCo:

; 10307: 	    ret = xmlStrndup(q, CUR_PTR - q);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 10308: 	    NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN32@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv251[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN18@xmlXPathCo
$LN32@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv251[ebp], edx
$LN18@xmlXPathCo:

; 10309:         }
; 10310:     } else {

	jmp	SHORT $LN7@xmlXPathCo
$LN13@xmlXPathCo:

; 10311: 	XP_ERROR(XPATH_START_LITERAL_ERROR);

	push	3
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCo
$LN7@xmlXPathCo:

; 10312:     }
; 10313:     if (ret == NULL) return;

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN20@xmlXPathCo
	jmp	SHORT $LN1@xmlXPathCo
$LN20@xmlXPathCo:

; 10314:     PUSH_LONG_EXPR(XPATH_OP_VALUE, XPATH_STRING, 0, 0,

	push	0
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	push	0
	push	0
	push	4
	push	11					; 0000000bH
	push	-1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H

; 10315: 	           xmlXPathCacheNewString(ctxt->context, ret), NULL);
; 10316:     xmlFree(ret);

	mov	esi, esp
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathCo:

; 10317: }

	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompLiteral ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathParseLiteral
_TEXT	SEGMENT
tv251 = -32						; size = 4
tv218 = -28						; size = 4
tv187 = -24						; size = 4
tv173 = -20						; size = 4
tv140 = -16						; size = 4
tv77 = -12						; size = 4
_ret$ = -8						; size = 4
_q$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathParseLiteral PROC				; COMDAT

; 10240: xmlXPathParseLiteral(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10241:     const xmlChar *q;
; 10242:     xmlChar *ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 10243: 
; 10244:     if (CUR == '"') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 34					; 00000022H
	jne	$LN6@xmlXPathPa

; 10245:         NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN21@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv77[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN22@xmlXPathPa
$LN21@xmlXPathPa:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv77[ebp], eax
$LN22@xmlXPathPa:

; 10246: 	q = CUR_PTR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _q$[ebp], edx
$LN2@xmlXPathPa:

; 10247: 	while ((IS_CHAR_CH(CUR)) && (CUR != '"'))

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN9@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN8@xmlXPathPa
$LN9@xmlXPathPa:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN8@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jl	SHORT $LN3@xmlXPathPa
$LN8@xmlXPathPa:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 34					; 00000022H
	je	SHORT $LN3@xmlXPathPa

; 10248: 	    NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN23@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv140[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN24@xmlXPathPa
$LN23@xmlXPathPa:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv140[ebp], eax
$LN24@xmlXPathPa:
	jmp	SHORT $LN2@xmlXPathPa
$LN3@xmlXPathPa:

; 10249: 	if (!IS_CHAR_CH(CUR)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN12@xmlXPathPa
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN10@xmlXPathPa
$LN12@xmlXPathPa:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN10@xmlXPathPa
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN10@xmlXPathPa

; 10250: 	    XP_ERRORNULL(XPATH_UNFINISHED_LITERAL_ERROR);

	push	2
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathPa

; 10251: 	} else {

	jmp	SHORT $LN11@xmlXPathPa
$LN10@xmlXPathPa:

; 10252: 	    ret = xmlStrndup(q, CUR_PTR - q);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 10253: 	    NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN25@xmlXPathPa
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv173[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN11@xmlXPathPa
$LN25@xmlXPathPa:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv173[ebp], edx
$LN11@xmlXPathPa:

; 10254:         }

	jmp	$LN7@xmlXPathPa
$LN6@xmlXPathPa:

; 10255:     } else if (CUR == '\'') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 39					; 00000027H
	jne	$LN13@xmlXPathPa

; 10256:         NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN27@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv187[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN28@xmlXPathPa
$LN27@xmlXPathPa:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv187[ebp], eax
$LN28@xmlXPathPa:

; 10257: 	q = CUR_PTR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _q$[ebp], edx
$LN4@xmlXPathPa:

; 10258: 	while ((IS_CHAR_CH(CUR)) && (CUR != '\''))

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN16@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN15@xmlXPathPa
$LN16@xmlXPathPa:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN15@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jl	SHORT $LN5@xmlXPathPa
$LN15@xmlXPathPa:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 39					; 00000027H
	je	SHORT $LN5@xmlXPathPa

; 10259: 	    NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN29@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv218[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN30@xmlXPathPa
$LN29@xmlXPathPa:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv218[ebp], eax
$LN30@xmlXPathPa:
	jmp	SHORT $LN4@xmlXPathPa
$LN5@xmlXPathPa:

; 10260: 	if (!IS_CHAR_CH(CUR)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN19@xmlXPathPa
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN17@xmlXPathPa
$LN19@xmlXPathPa:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN17@xmlXPathPa
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN17@xmlXPathPa

; 10261: 	    XP_ERRORNULL(XPATH_UNFINISHED_LITERAL_ERROR);

	push	2
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPa

; 10262: 	} else {

	jmp	SHORT $LN18@xmlXPathPa
$LN17@xmlXPathPa:

; 10263: 	    ret = xmlStrndup(q, CUR_PTR - q);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _q$[ebp]
	push	eax
	mov	ecx, DWORD PTR _q$[ebp]
	push	ecx
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 10264: 	    NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN31@xmlXPathPa
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv251[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN18@xmlXPathPa
$LN31@xmlXPathPa:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv251[ebp], edx
$LN18@xmlXPathPa:

; 10265:         }
; 10266:     } else {

	jmp	SHORT $LN7@xmlXPathPa
$LN13@xmlXPathPa:

; 10267: 	XP_ERRORNULL(XPATH_START_LITERAL_ERROR);

	push	3
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPa
$LN7@xmlXPathPa:

; 10268:     }
; 10269:     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathPa:

; 10270: }

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathParseLiteral ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompNumber
_TEXT	SEGMENT
tv299 = -76						; size = 4
tv274 = -72						; size = 4
tv260 = -68						; size = 4
tv246 = -64						; size = 4
tv228 = -60						; size = 4
tv204 = -56						; size = 4
tv176 = -52						; size = 4
tv150 = -48						; size = 4
tv136 = -44						; size = 4
_fraction$1 = -40					; size = 8
_max$2 = -32						; size = 4
_frac$3 = -28						; size = 4
_v$4 = -24						; size = 4
_is_exponent_negative$ = -20				; size = 4
_exponent$ = -16					; size = 4
_ok$ = -12						; size = 4
_ret$ = -8						; size = 8
_ctxt$ = 8						; size = 4
_xmlXPathCompNumber PROC				; COMDAT

; 10147: {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10148:     double ret = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _ret$[ebp], xmm0

; 10149:     int ok = 0;

	mov	DWORD PTR _ok$[ebp], 0

; 10150:     int exponent = 0;

	mov	DWORD PTR _exponent$[ebp], 0

; 10151:     int is_exponent_negative = 0;

	mov	DWORD PTR _is_exponent_negative$[ebp], 0

; 10152: #ifdef __GNUC__
; 10153:     unsigned long tmp = 0;
; 10154:     double temp;
; 10155: #endif
; 10156: 
; 10157:     CHECK_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN12@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN12@xmlXPathCo:

; 10158:     if ((CUR != '.') && ((CUR < '0') || (CUR > '9'))) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN13@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN14@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN13@xmlXPathCo
$LN14@xmlXPathCo:

; 10159:         XP_ERROR(XPATH_NUMBER_ERROR);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN13@xmlXPathCo:

; 10160:     }
; 10161: #ifdef __GNUC__
; 10162:     /*
; 10163:      * tmp/temp is a workaround against a gcc compiler bug
; 10164:      * http://veillard.com/gcc.bug
; 10165:      */
; 10166:     ret = 0;
; 10167:     while ((CUR >= '0') && (CUR <= '9')) {
; 10168: 	ret = ret * 10;
; 10169: 	tmp = (CUR - '0');
; 10170:         ok = 1;
; 10171:         NEXT;
; 10172: 	temp = (double) tmp;
; 10173: 	ret = ret + temp;
; 10174:     }
; 10175: #else
; 10176:     ret = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _ret$[ebp], xmm0
$LN2@xmlXPathCo:

; 10177:     while ((CUR >= '0') && (CUR <= '9')) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN3@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN3@xmlXPathCo

; 10178: 	ret = ret * 10 + (CUR - '0');

	movsd	xmm0, QWORD PTR _ret$[ebp]
	mulsd	xmm0, QWORD PTR __real@4024000000000000
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	cvtsi2sd xmm1, ecx
	addsd	xmm0, xmm1
	movsd	QWORD PTR _ret$[ebp], xmm0

; 10179: 	ok = 1;

	mov	DWORD PTR _ok$[ebp], 1

; 10180: 	NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN26@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv136[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN27@xmlXPathCo
$LN26@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv136[ebp], edx
$LN27@xmlXPathCo:

; 10181:     }

	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 10182: #endif
; 10183:     if (CUR == '.') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	jne	$LN9@xmlXPathCo

; 10184: 	int v, frac = 0, max;

	mov	DWORD PTR _frac$3[ebp], 0

; 10185: 	double fraction = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _fraction$1[ebp], xmm0

; 10186: 
; 10187:         NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN28@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv150[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN29@xmlXPathCo
$LN28@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv150[ebp], eax
$LN29@xmlXPathCo:

; 10188:         if (((CUR < '0') || (CUR > '9')) && (!ok)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN17@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN16@xmlXPathCo
$LN17@xmlXPathCo:
	cmp	DWORD PTR _ok$[ebp], 0
	jne	SHORT $LN16@xmlXPathCo

; 10189:             XP_ERROR(XPATH_NUMBER_ERROR);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN16@xmlXPathCo:

; 10190:         }
; 10191:         while (CUR == '0') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jne	SHORT $LN5@xmlXPathCo

; 10192:             frac = frac + 1;

	mov	edx, DWORD PTR _frac$3[ebp]
	add	edx, 1
	mov	DWORD PTR _frac$3[ebp], edx

; 10193:             NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN30@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv176[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN31@xmlXPathCo
$LN30@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv176[ebp], eax
$LN31@xmlXPathCo:

; 10194:         }

	jmp	SHORT $LN16@xmlXPathCo
$LN5@xmlXPathCo:

; 10195:         max = frac + MAX_FRAC;

	mov	ecx, DWORD PTR _frac$3[ebp]
	add	ecx, 20					; 00000014H
	mov	DWORD PTR _max$2[ebp], ecx
$LN6@xmlXPathCo:

; 10196:         while ((CUR >= '0') && (CUR <= '9') && (frac < max)) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN7@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN7@xmlXPathCo
	mov	edx, DWORD PTR _frac$3[ebp]
	cmp	edx, DWORD PTR _max$2[ebp]
	jge	SHORT $LN7@xmlXPathCo

; 10197: 	    v = (CUR - '0');

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	sub	edx, 48					; 00000030H
	mov	DWORD PTR _v$4[ebp], edx

; 10198: 	    fraction = fraction * 10 + v;

	movsd	xmm0, QWORD PTR _fraction$1[ebp]
	mulsd	xmm0, QWORD PTR __real@4024000000000000
	cvtsi2sd xmm1, DWORD PTR _v$4[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _fraction$1[ebp], xmm0

; 10199: 	    frac = frac + 1;

	mov	eax, DWORD PTR _frac$3[ebp]
	add	eax, 1
	mov	DWORD PTR _frac$3[ebp], eax

; 10200:             NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN32@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv204[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN33@xmlXPathCo
$LN32@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv204[ebp], ecx
$LN33@xmlXPathCo:

; 10201:         }

	jmp	$LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 10202:         fraction /= pow(10.0, frac);

	movsd	xmm0, QWORD PTR __real@4024000000000000
	cvtsi2sd xmm1, DWORD PTR _frac$3[ebp]
	call	__libm_sse2_pow_precise
	movsd	xmm1, QWORD PTR _fraction$1[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _fraction$1[ebp], xmm1

; 10203:         ret = ret + fraction;

	movsd	xmm0, QWORD PTR _ret$[ebp]
	addsd	xmm0, QWORD PTR _fraction$1[ebp]
	movsd	QWORD PTR _ret$[ebp], xmm0
$LN8@xmlXPathCo:

; 10204:         while ((CUR >= '0') && (CUR <= '9'))

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN9@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN9@xmlXPathCo

; 10205:             NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN34@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv228[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN35@xmlXPathCo
$LN34@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv228[ebp], edx
$LN35@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 10206:     }
; 10207:     if ((CUR == 'e') || (CUR == 'E')) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 101				; 00000065H
	je	SHORT $LN19@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 69					; 00000045H
	jne	$LN18@xmlXPathCo
$LN19@xmlXPathCo:

; 10208:         NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN36@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv246[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN37@xmlXPathCo
$LN36@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv246[ebp], eax
$LN37@xmlXPathCo:

; 10209:         if (CUR == '-') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN20@xmlXPathCo

; 10210:             is_exponent_negative = 1;

	mov	DWORD PTR _is_exponent_negative$[ebp], 1

; 10211:             NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN38@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv260[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN39@xmlXPathCo
$LN38@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv260[ebp], ecx
$LN39@xmlXPathCo:

; 10212:         } else if (CUR == '+') {

	jmp	SHORT $LN41@xmlXPathCo
$LN20@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 43					; 0000002bH
	jne	SHORT $LN41@xmlXPathCo

; 10213: 	    NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN40@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv274[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN41@xmlXPathCo
$LN40@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv274[ebp], edx
$LN41@xmlXPathCo:

; 10214: 	}
; 10215:         while ((CUR >= '0') && (CUR <= '9')) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN11@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 57					; 00000039H
	jg	SHORT $LN11@xmlXPathCo

; 10216:             if (exponent < 1000000)

	cmp	DWORD PTR _exponent$[ebp], 1000000	; 000f4240H
	jge	SHORT $LN23@xmlXPathCo

; 10217:                 exponent = exponent * 10 + (CUR - '0');

	imul	eax, DWORD PTR _exponent$[ebp], 10
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	ecx, BYTE PTR [edx]
	lea	edx, DWORD PTR [eax+ecx-48]
	mov	DWORD PTR _exponent$[ebp], edx
$LN23@xmlXPathCo:

; 10218:             NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN42@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv299[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN43@xmlXPathCo
$LN42@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv299[ebp], eax
$LN43@xmlXPathCo:

; 10219:         }

	jmp	SHORT $LN41@xmlXPathCo
$LN11@xmlXPathCo:

; 10220:         if (is_exponent_negative)

	cmp	DWORD PTR _is_exponent_negative$[ebp], 0
	je	SHORT $LN24@xmlXPathCo

; 10221:             exponent = -exponent;

	mov	ecx, DWORD PTR _exponent$[ebp]
	neg	ecx
	mov	DWORD PTR _exponent$[ebp], ecx
$LN24@xmlXPathCo:

; 10222:         ret *= pow(10.0, (double) exponent);

	movsd	xmm0, QWORD PTR __real@4024000000000000
	cvtsi2sd xmm1, DWORD PTR _exponent$[ebp]
	call	__libm_sse2_pow_precise
	mulsd	xmm0, QWORD PTR _ret$[ebp]
	movsd	QWORD PTR _ret$[ebp], xmm0
$LN18@xmlXPathCo:

; 10223:     }
; 10224:     PUSH_LONG_EXPR(XPATH_OP_VALUE, XPATH_NUMBER, 0, 0,

	push	0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _ret$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	push	0
	push	0
	push	3
	push	11					; 0000000bH
	push	-1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN1@xmlXPathCo:

; 10225:                    xmlXPathCacheNewFloat(ctxt->context, ret), NULL);
; 10226: }

	pop	edi
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathParseQName
_TEXT	SEGMENT
tv80 = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_prefix$ = 12						; size = 4
_xmlXPathParseQName PROC				; COMDAT

; 9891 : xmlXPathParseQName(xmlXPathParserContextPtr ctxt, xmlChar **prefix) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9892 :     xmlChar *ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 9893 : 
; 9894 :     *prefix = NULL;

	mov	eax, DWORD PTR _prefix$[ebp]
	mov	DWORD PTR [eax], 0

; 9895 :     ret = xmlXPathParseNCName(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathParseNCName
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 9896 :     if (ret && CUR == ':') {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN2@xmlXPathPa
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 58					; 0000003aH
	jne	SHORT $LN2@xmlXPathPa

; 9897 :         *prefix = ret;

	mov	edx, DWORD PTR _prefix$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], eax

; 9898 : 	NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN4@xmlXPathPa
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv80[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN5@xmlXPathPa
$LN4@xmlXPathPa:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv80[ebp], ecx
$LN5@xmlXPathPa:

; 9899 : 	ret = xmlXPathParseNCName(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathParseNCName
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
$LN2@xmlXPathPa:

; 9900 :     }
; 9901 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]

; 9902 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathParseQName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCurrentChar
_TEXT	SEGMENT
tv184 = -24						; size = 4
tv186 = -20						; size = 4
tv185 = -16						; size = 4
_cur$ = -12						; size = 4
_val$ = -8						; size = 4
_c$ = -1						; size = 1
_ctxt$ = 8						; size = 4
_len$ = 12						; size = 4
_xmlXPathCurrentChar PROC				; COMDAT

; 9751 : xmlXPathCurrentChar(xmlXPathParserContextPtr ctxt, int *len) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9752 :     unsigned char c;
; 9753 :     unsigned int val;
; 9754 :     const xmlChar *cur;
; 9755 : 
; 9756 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathCu

; 9757 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCu
$LN2@xmlXPathCu:

; 9758 :     cur = ctxt->cur;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx

; 9759 : 
; 9760 :     /*
; 9761 :      * We are supposed to handle UTF8, check it's valid
; 9762 :      * From rfc2044: encoding of the Unicode values on UTF-8:
; 9763 :      *
; 9764 :      * UCS-4 range (hex.)           UTF-8 octet sequence (binary)
; 9765 :      * 0000 0000-0000 007F   0xxxxxxx
; 9766 :      * 0000 0080-0000 07FF   110xxxxx 10xxxxxx
; 9767 :      * 0000 0800-0000 FFFF   1110xxxx 10xxxxxx 10xxxxxx
; 9768 :      *
; 9769 :      * Check for the 0x110000 limit too
; 9770 :      */
; 9771 :     c = *cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$[ebp], al

; 9772 :     if (c & 0x80) {

	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 128				; 00000080H
	je	$LN3@xmlXPathCu

; 9773 : 	if ((cur[1] & 0xc0) != 0x80)

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	and	ecx, 192				; 000000c0H
	cmp	ecx, 128				; 00000080H
	je	SHORT $LN5@xmlXPathCu

; 9774 : 	    goto encoding_error;

	jmp	$encoding_error$25
$LN5@xmlXPathCu:

; 9775 : 	if ((c & 0xe0) == 0xe0) {

	movzx	edx, BYTE PTR _c$[ebp]
	and	edx, 224				; 000000e0H
	cmp	edx, 224				; 000000e0H
	jne	$LN6@xmlXPathCu

; 9776 : 
; 9777 : 	    if ((cur[2] & 0xc0) != 0x80)

	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	and	edx, 192				; 000000c0H
	cmp	edx, 128				; 00000080H
	je	SHORT $LN8@xmlXPathCu

; 9778 : 		goto encoding_error;

	jmp	$encoding_error$25
$LN8@xmlXPathCu:

; 9779 : 	    if ((c & 0xf0) == 0xf0) {

	movzx	eax, BYTE PTR _c$[ebp]
	and	eax, 240				; 000000f0H
	cmp	eax, 240				; 000000f0H
	jne	$LN9@xmlXPathCu

; 9780 : 		if (((c & 0xf8) != 0xf0) ||

	movzx	ecx, BYTE PTR _c$[ebp]
	and	ecx, 248				; 000000f8H
	cmp	ecx, 240				; 000000f0H
	jne	SHORT $LN12@xmlXPathCu
	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	and	edx, 192				; 000000c0H
	cmp	edx, 128				; 00000080H
	je	SHORT $LN11@xmlXPathCu
$LN12@xmlXPathCu:

; 9781 : 		    ((cur[3] & 0xc0) != 0x80))
; 9782 : 		    goto encoding_error;

	jmp	$encoding_error$25
$LN11@xmlXPathCu:

; 9783 : 		/* 4-byte code */
; 9784 : 		*len = 4;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 4

; 9785 : 		val = (cur[0] & 0x7) << 18;

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	and	ecx, 7
	shl	ecx, 18					; 00000012H
	mov	DWORD PTR _val$[ebp], ecx

; 9786 : 		val |= (cur[1] & 0x3f) << 12;

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	and	ecx, 63					; 0000003fH
	shl	ecx, 12					; 0000000cH
	or	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _val$[ebp], ecx

; 9787 : 		val |= (cur[2] & 0x3f) << 6;

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	and	ecx, 63					; 0000003fH
	shl	ecx, 6
	or	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _val$[ebp], ecx

; 9788 : 		val |= cur[3] & 0x3f;

	mov	edx, 1
	imul	eax, edx, 3
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	and	edx, 63					; 0000003fH
	or	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _val$[ebp], edx

; 9789 : 	    } else {

	jmp	SHORT $LN10@xmlXPathCu
$LN9@xmlXPathCu:

; 9790 : 	      /* 3-byte code */
; 9791 : 		*len = 3;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 3

; 9792 : 		val = (cur[0] & 0xf) << 12;

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	and	ecx, 15					; 0000000fH
	shl	ecx, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], ecx

; 9793 : 		val |= (cur[1] & 0x3f) << 6;

	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	and	ecx, 63					; 0000003fH
	shl	ecx, 6
	or	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _val$[ebp], ecx

; 9794 : 		val |= cur[2] & 0x3f;

	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	and	ecx, 63					; 0000003fH
	or	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _val$[ebp], ecx
$LN10@xmlXPathCu:

; 9795 : 	    }
; 9796 : 	} else {

	jmp	SHORT $LN7@xmlXPathCu
$LN6@xmlXPathCu:

; 9797 : 	  /* 2-byte code */
; 9798 : 	    *len = 2;

	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx], 2

; 9799 : 	    val = (cur[0] & 0x1f) << 6;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	and	eax, 31					; 0000001fH
	shl	eax, 6
	mov	DWORD PTR _val$[ebp], eax

; 9800 : 	    val |= cur[1] & 0x3f;

	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	and	eax, 63					; 0000003fH
	or	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _val$[ebp], eax
$LN7@xmlXPathCu:

; 9801 : 	}
; 9802 : 	if (!IS_CHAR(val)) {

	cmp	DWORD PTR _val$[ebp], 256		; 00000100H
	jae	SHORT $LN23@xmlXPathCu
	cmp	DWORD PTR _val$[ebp], 9
	jb	SHORT $LN15@xmlXPathCu
	cmp	DWORD PTR _val$[ebp], 10		; 0000000aH
	jbe	SHORT $LN16@xmlXPathCu
$LN15@xmlXPathCu:
	cmp	DWORD PTR _val$[ebp], 13		; 0000000dH
	je	SHORT $LN16@xmlXPathCu
	cmp	DWORD PTR _val$[ebp], 32		; 00000020H
	jae	SHORT $LN16@xmlXPathCu
	mov	DWORD PTR tv185[ebp], 0
	jmp	SHORT $LN22@xmlXPathCu
$LN16@xmlXPathCu:
	mov	DWORD PTR tv185[ebp], 1
$LN22@xmlXPathCu:
	mov	ecx, DWORD PTR tv185[ebp]
	mov	DWORD PTR tv186[ebp], ecx
	jmp	SHORT $LN24@xmlXPathCu
$LN23@xmlXPathCu:
	cmp	DWORD PTR _val$[ebp], 256		; 00000100H
	jb	SHORT $LN17@xmlXPathCu
	cmp	DWORD PTR _val$[ebp], 55295		; 0000d7ffH
	jbe	SHORT $LN19@xmlXPathCu
$LN17@xmlXPathCu:
	cmp	DWORD PTR _val$[ebp], 57344		; 0000e000H
	jb	SHORT $LN18@xmlXPathCu
	cmp	DWORD PTR _val$[ebp], 65533		; 0000fffdH
	jbe	SHORT $LN19@xmlXPathCu
$LN18@xmlXPathCu:
	cmp	DWORD PTR _val$[ebp], 65536		; 00010000H
	jb	SHORT $LN20@xmlXPathCu
	cmp	DWORD PTR _val$[ebp], 1114111		; 0010ffffH
	jbe	SHORT $LN19@xmlXPathCu
$LN20@xmlXPathCu:
	mov	DWORD PTR tv184[ebp], 0
	jmp	SHORT $LN21@xmlXPathCu
$LN19@xmlXPathCu:
	mov	DWORD PTR tv184[ebp], 1
$LN21@xmlXPathCu:
	mov	edx, DWORD PTR tv184[ebp]
	mov	DWORD PTR tv186[ebp], edx
$LN24@xmlXPathCu:
	cmp	DWORD PTR tv186[ebp], 0
	jne	SHORT $LN13@xmlXPathCu

; 9803 : 	    XP_ERROR0(XPATH_INVALID_CHAR_ERROR);

	push	21					; 00000015H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCu
$LN13@xmlXPathCu:

; 9804 : 	}
; 9805 : 	return(val);

	mov	eax, DWORD PTR _val$[ebp]
	jmp	SHORT $LN1@xmlXPathCu

; 9806 :     } else {

	jmp	SHORT $encoding_error$25
$LN3@xmlXPathCu:

; 9807 : 	/* 1-byte code */
; 9808 : 	*len = 1;

	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx], 1

; 9809 : 	return((int) *cur);

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	jmp	SHORT $LN1@xmlXPathCu
$encoding_error$25:

; 9810 :     }
; 9811 : encoding_error:
; 9812 :     /*
; 9813 :      * If we detect an UTF8 error that probably means that the
; 9814 :      * input encoding didn't get properly advertised in the
; 9815 :      * declaration header. Report the error and switch the encoding
; 9816 :      * to ISO-Latin-1 (if you don't like this policy, just declare the
; 9817 :      * encoding !)
; 9818 :      */
; 9819 :     *len = 0;

	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax], 0

; 9820 :     XP_ERROR0(XPATH_ENCODING_ERROR);

	push	20					; 00000014H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
$LN1@xmlXPathCu:

; 9821 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCurrentChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathParseNameComplex
_TEXT	SEGMENT
tv271 = -232						; size = 4
tv270 = -228						; size = 4
tv263 = -224						; size = 4
tv252 = -220						; size = 4
tv251 = -216						; size = 4
tv242 = -212						; size = 4
tv243 = -208						; size = 4
tv234 = -204						; size = 4
tv233 = -200						; size = 4
tv188 = -196						; size = 4
tv187 = -192						; size = 4
tv180 = -188						; size = 4
tv169 = -184						; size = 4
tv168 = -180						; size = 4
tv159 = -176						; size = 4
tv160 = -172						; size = 4
tv151 = -168						; size = 4
tv150 = -164						; size = 4
tv128 = -160						; size = 4
tv129 = -156						; size = 4
tv88 = -152						; size = 4
tv87 = -148						; size = 4
_max$1 = -144						; size = 4
_buffer$2 = -140					; size = 4
_c$ = -136						; size = 4
_l$ = -128						; size = 4
_len$ = -120						; size = 4
_buf$ = -112						; size = 105
_ctxt$ = 8						; size = 4
_qualified$ = 12					; size = 4
_xmlXPathParseNameComplex PROC				; COMDAT

; 9954 : xmlXPathParseNameComplex(xmlXPathParserContextPtr ctxt, int qualified) {

	push	ebp
	mov	ebp, esp
	sub	esp, 232				; 000000e8H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9955 :     xmlChar buf[XML_MAX_NAMELEN + 5];
; 9956 :     int len = 0, l;

	mov	DWORD PTR _len$[ebp], 0

; 9957 :     int c;
; 9958 : 
; 9959 :     /*
; 9960 :      * Handler for more complex cases
; 9961 :      */
; 9962 :     c = CUR_CHAR(l);

	lea	eax, DWORD PTR _l$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCurrentChar
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax

; 9963 :     if ((c == ' ') || (c == '>') || (c == '/') || /* accelerators */
; 9964 :         (c == '[') || (c == ']') || (c == '@') || /* accelerators */
; 9965 :         (c == '*') || /* accelerators */

	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	je	$LN7@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 62			; 0000003eH
	je	$LN7@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 47			; 0000002fH
	je	$LN7@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 91			; 0000005bH
	je	$LN7@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 93			; 0000005dH
	je	$LN7@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 64			; 00000040H
	je	$LN7@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 42			; 0000002aH
	je	$LN7@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	$LN31@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN25@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	SHORT $LN27@xmlXPathPa
$LN25@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN26@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	SHORT $LN27@xmlXPathPa
$LN26@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN28@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 214			; 000000d6H
	jle	SHORT $LN27@xmlXPathPa
$LN28@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 216			; 000000d8H
	jl	SHORT $LN29@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 246			; 000000f6H
	jle	SHORT $LN27@xmlXPathPa
$LN29@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 248			; 000000f8H
	jge	SHORT $LN27@xmlXPathPa
	mov	DWORD PTR tv87[ebp], 0
	jmp	SHORT $LN30@xmlXPathPa
$LN27@xmlXPathPa:
	mov	DWORD PTR tv87[ebp], 1
$LN30@xmlXPathPa:
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR tv88[ebp], edx
	jmp	SHORT $LN32@xmlXPathPa
$LN31@xmlXPathPa:
	push	OFFSET _xmlIsBaseCharGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv88[ebp], eax
$LN32@xmlXPathPa:
	cmp	DWORD PTR tv88[ebp], 0
	jne	$LN2@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN37@xmlXPathPa
	mov	DWORD PTR tv129[ebp], 0
	jmp	SHORT $LN38@xmlXPathPa
$LN37@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 19968		; 00004e00H
	jl	SHORT $LN33@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 40869		; 00009fa5H
	jle	SHORT $LN34@xmlXPathPa
$LN33@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 12295		; 00003007H
	je	SHORT $LN34@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 12321		; 00003021H
	jl	SHORT $LN35@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 12329		; 00003029H
	jle	SHORT $LN34@xmlXPathPa
$LN35@xmlXPathPa:
	mov	DWORD PTR tv128[ebp], 0
	jmp	SHORT $LN36@xmlXPathPa
$LN34@xmlXPathPa:
	mov	DWORD PTR tv128[ebp], 1
$LN36@xmlXPathPa:
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR tv129[ebp], ecx
$LN38@xmlXPathPa:
	cmp	DWORD PTR tv129[ebp], 0
	jne	SHORT $LN2@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 95			; 0000005fH
	je	SHORT $LN2@xmlXPathPa
	cmp	DWORD PTR _qualified$[ebp], 0
	je	SHORT $LN7@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	je	SHORT $LN2@xmlXPathPa
$LN7@xmlXPathPa:

; 9966 : 	(!IS_LETTER(c) && (c != '_') &&
; 9967 :          ((!qualified) || (c != ':')))) {
; 9968 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathPa
$LN2@xmlXPathPa:

; 9969 :     }
; 9970 : 
; 9971 :     while ((c != ' ') && (c != '>') && (c != '/') && /* test bigname.xml */

	cmp	DWORD PTR _c$[ebp], 32			; 00000020H
	je	$LN3@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 62			; 0000003eH
	je	$LN3@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 47			; 0000002fH
	je	$LN3@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	$LN45@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN39@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	SHORT $LN41@xmlXPathPa
$LN39@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN40@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	SHORT $LN41@xmlXPathPa
$LN40@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN42@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 214			; 000000d6H
	jle	SHORT $LN41@xmlXPathPa
$LN42@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 216			; 000000d8H
	jl	SHORT $LN43@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 246			; 000000f6H
	jle	SHORT $LN41@xmlXPathPa
$LN43@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 248			; 000000f8H
	jge	SHORT $LN41@xmlXPathPa
	mov	DWORD PTR tv150[ebp], 0
	jmp	SHORT $LN44@xmlXPathPa
$LN41@xmlXPathPa:
	mov	DWORD PTR tv150[ebp], 1
$LN44@xmlXPathPa:
	mov	edx, DWORD PTR tv150[ebp]
	mov	DWORD PTR tv151[ebp], edx
	jmp	SHORT $LN46@xmlXPathPa
$LN45@xmlXPathPa:
	push	OFFSET _xmlIsBaseCharGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv151[ebp], eax
$LN46@xmlXPathPa:
	cmp	DWORD PTR tv151[ebp], 0
	jne	$LN9@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN51@xmlXPathPa
	mov	DWORD PTR tv160[ebp], 0
	jmp	SHORT $LN52@xmlXPathPa
$LN51@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 19968		; 00004e00H
	jl	SHORT $LN47@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 40869		; 00009fa5H
	jle	SHORT $LN48@xmlXPathPa
$LN47@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 12295		; 00003007H
	je	SHORT $LN48@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 12321		; 00003021H
	jl	SHORT $LN49@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 12329		; 00003029H
	jle	SHORT $LN48@xmlXPathPa
$LN49@xmlXPathPa:
	mov	DWORD PTR tv159[ebp], 0
	jmp	SHORT $LN50@xmlXPathPa
$LN48@xmlXPathPa:
	mov	DWORD PTR tv159[ebp], 1
$LN50@xmlXPathPa:
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv160[ebp], ecx
$LN52@xmlXPathPa:
	cmp	DWORD PTR tv160[ebp], 0
	jne	$LN9@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN55@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 48			; 00000030H
	jl	SHORT $LN53@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 57			; 00000039H
	jg	SHORT $LN53@xmlXPathPa
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN54@xmlXPathPa
$LN53@xmlXPathPa:
	mov	DWORD PTR tv168[ebp], 0
$LN54@xmlXPathPa:
	mov	edx, DWORD PTR tv168[ebp]
	mov	DWORD PTR tv169[ebp], edx
	jmp	SHORT $LN56@xmlXPathPa
$LN55@xmlXPathPa:
	push	OFFSET _xmlIsDigitGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv169[ebp], eax
$LN56@xmlXPathPa:
	cmp	DWORD PTR tv169[ebp], 0
	jne	$LN9@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 46			; 0000002eH
	je	$LN9@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 45			; 0000002dH
	je	$LN9@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 95			; 0000005fH
	je	$LN9@xmlXPathPa
	cmp	DWORD PTR _qualified$[ebp], 0
	je	SHORT $LN10@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	je	$LN9@xmlXPathPa
$LN10@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN57@xmlXPathPa
	mov	DWORD PTR tv180[ebp], 0
	jmp	SHORT $LN58@xmlXPathPa
$LN57@xmlXPathPa:
	push	OFFSET _xmlIsCombiningGroup
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv180[ebp], eax
$LN58@xmlXPathPa:
	cmp	DWORD PTR tv180[ebp], 0
	jne	SHORT $LN9@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN61@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 183			; 000000b7H
	jne	SHORT $LN59@xmlXPathPa
	mov	DWORD PTR tv187[ebp], 1
	jmp	SHORT $LN60@xmlXPathPa
$LN59@xmlXPathPa:
	mov	DWORD PTR tv187[ebp], 0
$LN60@xmlXPathPa:
	mov	edx, DWORD PTR tv187[ebp]
	mov	DWORD PTR tv188[ebp], edx
	jmp	SHORT $LN62@xmlXPathPa
$LN61@xmlXPathPa:
	push	OFFSET _xmlIsExtenderGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv188[ebp], eax
$LN62@xmlXPathPa:
	cmp	DWORD PTR tv188[ebp], 0
	je	$LN3@xmlXPathPa
$LN9@xmlXPathPa:

; 9972 : 	   ((IS_LETTER(c)) || (IS_DIGIT(c)) ||
; 9973 :             (c == '.') || (c == '-') ||
; 9974 : 	    (c == '_') || ((qualified) && (c == ':')) ||
; 9975 : 	    (IS_COMBINING(c)) ||
; 9976 : 	    (IS_EXTENDER(c)))) {
; 9977 : 	COPY_BUF(l,buf,len,c);

	cmp	DWORD PTR _l$[ebp], 1
	jne	SHORT $LN11@xmlXPathPa
	mov	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR _buf$[ebp+ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	jmp	SHORT $LN12@xmlXPathPa
$LN11@xmlXPathPa:
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	lea	eax, DWORD PTR _buf$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _l$[ebp]
	push	ecx
	call	_xmlCopyChar
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN12@xmlXPathPa:

; 9978 : 	NEXTL(l);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _l$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax

; 9979 : 	c = CUR_CHAR(l);

	lea	edx, DWORD PTR _l$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCurrentChar
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax

; 9980 : 	if (len >= XML_MAX_NAMELEN) {

	cmp	DWORD PTR _len$[ebp], 100		; 00000064H
	jl	$LN13@xmlXPathPa

; 9981 : 	    /*
; 9982 : 	     * Okay someone managed to make a huge name, so he's ready to pay
; 9983 : 	     * for the processing speed.
; 9984 : 	     */
; 9985 : 	    xmlChar *buffer;
; 9986 : 	    int max = len * 2;

	mov	ecx, DWORD PTR _len$[ebp]
	shl	ecx, 1
	mov	DWORD PTR _max$1[ebp], ecx

; 9987 : 
; 9988 :             if (len > XML_MAX_NAME_LENGTH) {

	cmp	DWORD PTR _len$[ebp], 50000		; 0000c350H
	jle	SHORT $LN14@xmlXPathPa

; 9989 :                 XP_ERRORNULL(XPATH_EXPR_ERROR);

	push	7
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathPa
$LN14@xmlXPathPa:

; 9990 :             }
; 9991 : 	    buffer = (xmlChar *) xmlMallocAtomic(max * sizeof(xmlChar));

	mov	esi, esp
	mov	eax, DWORD PTR _max$1[ebp]
	push	eax
	call	DWORD PTR _xmlMallocAtomic
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$2[ebp], eax

; 9992 : 	    if (buffer == NULL) {

	cmp	DWORD PTR _buffer$2[ebp], 0
	jne	SHORT $LN15@xmlXPathPa

; 9993 : 		XP_ERRORNULL(XPATH_MEMORY_ERROR);

	push	15					; 0000000fH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathPa
$LN15@xmlXPathPa:

; 9994 : 	    }
; 9995 : 	    memcpy(buffer, buf, len);

	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$2[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@xmlXPathPa:

; 9996 : 	    while ((IS_LETTER(c)) || (IS_DIGIT(c)) || /* test bigname.xml */
; 9997 : 		   (c == '.') || (c == '-') ||
; 9998 : 		   (c == '_') || ((qualified) && (c == ':')) ||
; 9999 : 		   (IS_COMBINING(c)) ||

	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	$LN69@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN63@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	SHORT $LN65@xmlXPathPa
$LN63@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN64@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	SHORT $LN65@xmlXPathPa
$LN64@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN66@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 214			; 000000d6H
	jle	SHORT $LN65@xmlXPathPa
$LN66@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 216			; 000000d8H
	jl	SHORT $LN67@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 246			; 000000f6H
	jle	SHORT $LN65@xmlXPathPa
$LN67@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 248			; 000000f8H
	jge	SHORT $LN65@xmlXPathPa
	mov	DWORD PTR tv233[ebp], 0
	jmp	SHORT $LN68@xmlXPathPa
$LN65@xmlXPathPa:
	mov	DWORD PTR tv233[ebp], 1
$LN68@xmlXPathPa:
	mov	edx, DWORD PTR tv233[ebp]
	mov	DWORD PTR tv234[ebp], edx
	jmp	SHORT $LN70@xmlXPathPa
$LN69@xmlXPathPa:
	push	OFFSET _xmlIsBaseCharGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv234[ebp], eax
$LN70@xmlXPathPa:
	cmp	DWORD PTR tv234[ebp], 0
	jne	$LN16@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN75@xmlXPathPa
	mov	DWORD PTR tv243[ebp], 0
	jmp	SHORT $LN76@xmlXPathPa
$LN75@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 19968		; 00004e00H
	jl	SHORT $LN71@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 40869		; 00009fa5H
	jle	SHORT $LN72@xmlXPathPa
$LN71@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 12295		; 00003007H
	je	SHORT $LN72@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 12321		; 00003021H
	jl	SHORT $LN73@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 12329		; 00003029H
	jle	SHORT $LN72@xmlXPathPa
$LN73@xmlXPathPa:
	mov	DWORD PTR tv242[ebp], 0
	jmp	SHORT $LN74@xmlXPathPa
$LN72@xmlXPathPa:
	mov	DWORD PTR tv242[ebp], 1
$LN74@xmlXPathPa:
	mov	ecx, DWORD PTR tv242[ebp]
	mov	DWORD PTR tv243[ebp], ecx
$LN76@xmlXPathPa:
	cmp	DWORD PTR tv243[ebp], 0
	jne	$LN16@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN79@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 48			; 00000030H
	jl	SHORT $LN77@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 57			; 00000039H
	jg	SHORT $LN77@xmlXPathPa
	mov	DWORD PTR tv251[ebp], 1
	jmp	SHORT $LN78@xmlXPathPa
$LN77@xmlXPathPa:
	mov	DWORD PTR tv251[ebp], 0
$LN78@xmlXPathPa:
	mov	edx, DWORD PTR tv251[ebp]
	mov	DWORD PTR tv252[ebp], edx
	jmp	SHORT $LN80@xmlXPathPa
$LN79@xmlXPathPa:
	push	OFFSET _xmlIsDigitGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv252[ebp], eax
$LN80@xmlXPathPa:
	cmp	DWORD PTR tv252[ebp], 0
	jne	$LN16@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 46			; 0000002eH
	je	$LN16@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 45			; 0000002dH
	je	$LN16@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 95			; 0000005fH
	je	$LN16@xmlXPathPa
	cmp	DWORD PTR _qualified$[ebp], 0
	je	SHORT $LN17@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	je	$LN16@xmlXPathPa
$LN17@xmlXPathPa:
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN81@xmlXPathPa
	mov	DWORD PTR tv263[ebp], 0
	jmp	SHORT $LN82@xmlXPathPa
$LN81@xmlXPathPa:
	push	OFFSET _xmlIsCombiningGroup
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv263[ebp], eax
$LN82@xmlXPathPa:
	cmp	DWORD PTR tv263[ebp], 0
	jne	SHORT $LN16@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN85@xmlXPathPa
	cmp	DWORD PTR _c$[ebp], 183			; 000000b7H
	jne	SHORT $LN83@xmlXPathPa
	mov	DWORD PTR tv270[ebp], 1
	jmp	SHORT $LN84@xmlXPathPa
$LN83@xmlXPathPa:
	mov	DWORD PTR tv270[ebp], 0
$LN84@xmlXPathPa:
	mov	edx, DWORD PTR tv270[ebp]
	mov	DWORD PTR tv271[ebp], edx
	jmp	SHORT $LN86@xmlXPathPa
$LN85@xmlXPathPa:
	push	OFFSET _xmlIsExtenderGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv271[ebp], eax
$LN86@xmlXPathPa:
	cmp	DWORD PTR tv271[ebp], 0
	je	$LN5@xmlXPathPa
$LN16@xmlXPathPa:

; 10000: 		   (IS_EXTENDER(c))) {
; 10001: 		if (len + 10 > max) {

	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 10					; 0000000aH
	cmp	ecx, DWORD PTR _max$1[ebp]
	jle	SHORT $LN18@xmlXPathPa

; 10002:                     if (max > XML_MAX_NAME_LENGTH) {

	cmp	DWORD PTR _max$1[ebp], 50000		; 0000c350H
	jle	SHORT $LN19@xmlXPathPa

; 10003:                         XP_ERRORNULL(XPATH_EXPR_ERROR);

	push	7
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathPa
$LN19@xmlXPathPa:

; 10004:                     }
; 10005: 		    max *= 2;

	mov	eax, DWORD PTR _max$1[ebp]
	shl	eax, 1
	mov	DWORD PTR _max$1[ebp], eax

; 10006: 		    buffer = (xmlChar *) xmlRealloc(buffer,

	mov	esi, esp
	mov	ecx, DWORD PTR _max$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$2[ebp]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$2[ebp], eax

; 10007: 			                            max * sizeof(xmlChar));
; 10008: 		    if (buffer == NULL) {

	cmp	DWORD PTR _buffer$2[ebp], 0
	jne	SHORT $LN18@xmlXPathPa

; 10009: 			XP_ERRORNULL(XPATH_MEMORY_ERROR);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathPa
$LN18@xmlXPathPa:

; 10010: 		    }
; 10011: 		}
; 10012: 		COPY_BUF(l,buffer,len,c);

	cmp	DWORD PTR _l$[ebp], 1
	jne	SHORT $LN21@xmlXPathPa
	mov	ecx, DWORD PTR _buffer$2[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
	jmp	SHORT $LN22@xmlXPathPa
$LN21@xmlXPathPa:
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$2[ebp]
	add	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _l$[ebp]
	push	eax
	call	_xmlCopyChar
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _len$[ebp], eax
$LN22@xmlXPathPa:

; 10013: 		NEXTL(l);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _l$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx

; 10014: 		c = CUR_CHAR(l);

	lea	ecx, DWORD PTR _l$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCurrentChar
	add	esp, 8
	mov	DWORD PTR _c$[ebp], eax

; 10015: 	    }

	jmp	$LN4@xmlXPathPa
$LN5@xmlXPathPa:

; 10016: 	    buffer[len] = 0;

	mov	eax, DWORD PTR _buffer$2[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR [eax], 0

; 10017: 	    return(buffer);

	mov	eax, DWORD PTR _buffer$2[ebp]
	jmp	SHORT $LN1@xmlXPathPa
$LN13@xmlXPathPa:

; 10018: 	}
; 10019:     }

	jmp	$LN2@xmlXPathPa
$LN3@xmlXPathPa:

; 10020:     if (len == 0)

	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN23@xmlXPathPa

; 10021: 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPa
$LN23@xmlXPathPa:

; 10022:     return(xmlStrndup(buf, len));

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlStrndup
	add	esp, 8
$LN1@xmlXPathPa:

; 10023: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN90@xmlXPathPa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN90@xmlXPathPa:
	DD	2
	DD	$LN89@xmlXPathPa
$LN89@xmlXPathPa:
	DD	-112					; ffffff90H
	DD	105					; 00000069H
	DD	$LN87@xmlXPathPa
	DD	-128					; ffffff80H
	DD	4
	DD	$LN88@xmlXPathPa
$LN88@xmlXPathPa:
	DB	108					; 0000006cH
	DB	0
$LN87@xmlXPathPa:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_xmlXPathParseNameComplex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompRelativeLocationPath
_TEXT	SEGMENT
tv362 = -36						; size = 4
tv335 = -32						; size = 4
tv309 = -28						; size = 4
tv282 = -24						; size = 4
tv240 = -20						; size = 4
tv211 = -16						; size = 4
tv185 = -12						; size = 4
tv159 = -8						; size = 4
tv89 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompRelativeLocationPath PROC			; COMDAT

; 11464: (xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@xmlXPathCo:

; 11465:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN18@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN19@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN18@xmlXPathCo
$LN19@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathCo
$LN18@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN40@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv89[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN41@xmlXPathCo
$LN40@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv89[ebp], eax
$LN41@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 11466:     if ((CUR == '/') && (NXT(1) == '/')) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	$LN20@xmlXPathCo
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 47					; 0000002fH
	jne	$LN20@xmlXPathCo

; 11467: 	SKIP(2);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
$LN4@xmlXPathCo:

; 11468: 	SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN22@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN23@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN22@xmlXPathCo
$LN23@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN5@xmlXPathCo
$LN22@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN42@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv159[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN43@xmlXPathCo
$LN42@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv159[ebp], edx
$LN43@xmlXPathCo:
	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 11469: 	PUSH_LONG_EXPR(XPATH_OP_COLLECT, AXIS_DESCENDANT_OR_SELF,

	push	0
	push	0
	push	0
	push	1
	push	6
	push	10					; 0000000aH
	push	-1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
	jmp	$LN21@xmlXPathCo
$LN20@xmlXPathCo:

; 11470: 		         NODE_TEST_TYPE, NODE_TYPE_NODE, NULL, NULL);
; 11471:     } else if (CUR == '/') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	$LN21@xmlXPathCo

; 11472: 	    NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN44@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv185[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN6@xmlXPathCo
$LN44@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv185[ebp], edx
$LN6@xmlXPathCo:

; 11473: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN25@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN26@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN25@xmlXPathCo
$LN26@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN21@xmlXPathCo
$LN25@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN46@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv211[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN47@xmlXPathCo
$LN46@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv211[ebp], eax
$LN47@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN21@xmlXPathCo:

; 11474:     }
; 11475:     xmlXPathCompStep(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompStep
	add	esp, 4

; 11476:     CHECK_ERROR;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN8@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN8@xmlXPathCo:

; 11477:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN28@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN29@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN28@xmlXPathCo
$LN29@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN10@xmlXPathCo
$LN28@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN48@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv240[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN49@xmlXPathCo
$LN48@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv240[ebp], eax
$LN49@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN10@xmlXPathCo:

; 11478:     while (CUR == '/') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	$LN1@xmlXPathCo

; 11479: 	if ((CUR == '/') && (NXT(1) == '/')) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	$LN30@xmlXPathCo
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax+ecx]
	cmp	ecx, 47					; 0000002fH
	jne	$LN30@xmlXPathCo

; 11480: 	    SKIP(2);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 2
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
$LN12@xmlXPathCo:

; 11481: 	    SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN32@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN33@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN32@xmlXPathCo
$LN33@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN13@xmlXPathCo
$LN32@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN50@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv282[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN51@xmlXPathCo
$LN50@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv282[ebp], edx
$LN51@xmlXPathCo:
	jmp	SHORT $LN12@xmlXPathCo
$LN13@xmlXPathCo:

; 11482: 	    PUSH_LONG_EXPR(XPATH_OP_COLLECT, AXIS_DESCENDANT_OR_SELF,

	push	0
	push	0
	push	0
	push	1
	push	6
	push	10					; 0000000aH
	push	-1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H

; 11483: 			     NODE_TEST_TYPE, NODE_TYPE_NODE, NULL, NULL);
; 11484: 	    xmlXPathCompStep(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompStep
	add	esp, 4
	jmp	$LN16@xmlXPathCo
$LN30@xmlXPathCo:

; 11485: 	} else if (CUR == '/') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 47					; 0000002fH
	jne	$LN16@xmlXPathCo

; 11486: 	    NEXT;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN52@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv309[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN14@xmlXPathCo
$LN52@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv309[ebp], eax
$LN14@xmlXPathCo:

; 11487: 	    SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN35@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN36@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN35@xmlXPathCo
$LN36@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN15@xmlXPathCo
$LN35@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN54@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv335[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN55@xmlXPathCo
$LN54@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv335[ebp], ecx
$LN55@xmlXPathCo:
	jmp	SHORT $LN14@xmlXPathCo
$LN15@xmlXPathCo:

; 11488: 	    xmlXPathCompStep(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompStep
	add	esp, 4
$LN16@xmlXPathCo:

; 11489: 	}
; 11490: 	SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN37@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN38@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN37@xmlXPathCo
$LN38@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN17@xmlXPathCo
$LN37@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN56@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv362[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN57@xmlXPathCo
$LN56@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv362[ebp], eax
$LN57@xmlXPathCo:
	jmp	SHORT $LN16@xmlXPathCo
$LN17@xmlXPathCo:

; 11491:     }

	jmp	$LN10@xmlXPathCo
$LN1@xmlXPathCo:

; 11492: }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompRelativeLocationPath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompLocationPath
_TEXT	SEGMENT
tv221 = -16						; size = 4
tv195 = -12						; size = 4
tv168 = -8						; size = 4
tv89 = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathCompLocationPath PROC				; COMDAT

; 11516: xmlXPathCompLocationPath(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@xmlXPathCo:

; 11517:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN10@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN11@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN10@xmlXPathCo
$LN11@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathCo
$LN10@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN27@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv89[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN28@xmlXPathCo
$LN27@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv89[ebp], eax
$LN28@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 11518:     if (CUR != '/') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN4@xmlXPathCo

; 11519:         xmlXPathCompRelativeLocationPath(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompRelativeLocationPath
	add	esp, 4

; 11520:     } else {

	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:

; 11521: 	while (CUR == '/') {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	$LN1@xmlXPathCo

; 11522: 	    if ((CUR == '/') && (NXT(1) == '/')) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 47					; 0000002fH
	jne	$LN14@xmlXPathCo
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx+edx]
	cmp	edx, 47					; 0000002fH
	jne	$LN14@xmlXPathCo

; 11523: 		SKIP(2);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 2
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
$LN6@xmlXPathCo:

; 11524: 		SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN16@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN17@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN16@xmlXPathCo
$LN17@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN16@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN29@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv168[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN30@xmlXPathCo
$LN29@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv168[ebp], eax
$LN30@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 11525: 		PUSH_LONG_EXPR(XPATH_OP_COLLECT, AXIS_DESCENDANT_OR_SELF,

	push	0
	push	0
	push	0
	push	1
	push	6
	push	10					; 0000000aH
	push	-1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H

; 11526: 			     NODE_TEST_TYPE, NODE_TYPE_NODE, NULL, NULL);
; 11527: 		xmlXPathCompRelativeLocationPath(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompRelativeLocationPath
	add	esp, 4
	jmp	$LN15@xmlXPathCo
$LN14@xmlXPathCo:

; 11528: 	    } else if (CUR == '/') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 47					; 0000002fH
	jne	$LN15@xmlXPathCo

; 11529: 		NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN31@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv195[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN8@xmlXPathCo
$LN31@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv195[ebp], ecx
$LN8@xmlXPathCo:

; 11530: 		SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN19@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN20@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN19@xmlXPathCo
$LN20@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN19@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN33@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv221[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN34@xmlXPathCo
$LN33@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv221[ebp], edx
$LN34@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 11531: 		if ((CUR != 0 ) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN15@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN23@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 90					; 0000005aH
	jle	SHORT $LN22@xmlXPathCo
$LN23@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 97					; 00000061H
	jl	SHORT $LN24@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 122				; 0000007aH
	jle	SHORT $LN22@xmlXPathCo
$LN24@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 95					; 0000005fH
	je	SHORT $LN22@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	je	SHORT $LN22@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 64					; 00000040H
	je	SHORT $LN22@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 42					; 0000002aH
	jne	SHORT $LN15@xmlXPathCo
$LN22@xmlXPathCo:

; 11532: 		    ((IS_ASCII_LETTER(CUR)) || (CUR == '_') || (CUR == '.') ||
; 11533: 		     (CUR == '@') || (CUR == '*')))
; 11534: 		    xmlXPathCompRelativeLocationPath(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompRelativeLocationPath
	add	esp, 4
$LN15@xmlXPathCo:

; 11535: 	    }
; 11536: 	    CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN25@xmlXPathCo
	jmp	SHORT $LN1@xmlXPathCo
$LN25@xmlXPathCo:

; 11537: 	}

	jmp	$LN4@xmlXPathCo
$LN1@xmlXPathCo:

; 11538:     }
; 11539: }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompLocationPath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompPredicate
_TEXT	SEGMENT
tv241 = -24						; size = 4
tv215 = -20						; size = 4
tv165 = -16						; size = 4
tv139 = -12						; size = 4
tv91 = -8						; size = 4
_op1$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_filter$ = 12						; size = 4
_xmlXPathCompPredicate PROC				; COMDAT

; 11032: xmlXPathCompPredicate(xmlXPathParserContextPtr ctxt, int filter) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 11033:     int op1 = ctxt->comp->last;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _op1$[ebp], edx
$LN2@xmlXPathCo:

; 11034: 
; 11035:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN8@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN9@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathCo
$LN8@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN22@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv91[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN23@xmlXPathCo
$LN22@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv91[ebp], eax
$LN23@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 11036:     if (CUR != '[') {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 91					; 0000005bH
	je	SHORT $LN10@xmlXPathCo

; 11037: 	XP_ERROR(XPATH_INVALID_PREDICATE_ERROR);

	push	6
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN10@xmlXPathCo:

; 11038:     }
; 11039:     NEXT;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN24@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv139[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN4@xmlXPathCo
$LN24@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv139[ebp], edx
$LN4@xmlXPathCo:

; 11040:     SKIP_BLANKS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN11@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN5@xmlXPathCo
$LN11@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN26@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv165[ebp], ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN27@xmlXPathCo
$LN26@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv165[ebp], eax
$LN27@xmlXPathCo:
	jmp	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 11041: 
; 11042:     ctxt->comp->last = -1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [edx+12], -1

; 11043:     /*
; 11044:     * This call to xmlXPathCompileExpr() will deactivate sorting
; 11045:     * of the predicate result.
; 11046:     * TODO: Sorting is still activated for filters, since I'm not
; 11047:     *  sure if needed. Normally sorting should not be needed, since
; 11048:     *  a filter can only diminish the number of items in a sequence,
; 11049:     *  but won't change its order; so if the initial sequence is sorted,
; 11050:     *  subsequent sorting is not needed.
; 11051:     */
; 11052:     if (! filter)

	cmp	DWORD PTR _filter$[ebp], 0
	jne	SHORT $LN13@xmlXPathCo

; 11053: 	xmlXPathCompileExpr(ctxt, 0);

	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompileExpr
	add	esp, 8
	jmp	SHORT $LN14@xmlXPathCo
$LN13@xmlXPathCo:

; 11054:     else
; 11055: 	xmlXPathCompileExpr(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompileExpr
	add	esp, 8
$LN14@xmlXPathCo:

; 11056:     CHECK_ERROR;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN15@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN15@xmlXPathCo:

; 11057: 
; 11058:     if (CUR != ']') {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 93					; 0000005dH
	je	SHORT $LN16@xmlXPathCo

; 11059: 	XP_ERROR(XPATH_INVALID_PREDICATE_ERROR);

	push	6
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN16@xmlXPathCo:

; 11060:     }
; 11061: 
; 11062:     if (filter)

	cmp	DWORD PTR _filter$[ebp], 0
	je	SHORT $LN17@xmlXPathCo

; 11063: 	PUSH_BINARY_EXPR(XPATH_OP_FILTER, op1, ctxt->comp->last, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _op1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
	jmp	SHORT $LN18@xmlXPathCo
$LN17@xmlXPathCo:

; 11064:     else
; 11065: 	PUSH_BINARY_EXPR(XPATH_OP_PREDICATE, op1, ctxt->comp->last, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _op1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN18@xmlXPathCo:

; 11066: 
; 11067:     NEXT;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN28@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv215[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN6@xmlXPathCo
$LN28@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv215[ebp], ecx
$LN6@xmlXPathCo:

; 11068:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN19@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN20@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN19@xmlXPathCo
$LN20@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN1@xmlXPathCo
$LN19@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN30@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv241[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN31@xmlXPathCo
$LN30@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv241[ebp], edx
$LN31@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN1@xmlXPathCo:

; 11069: }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompPredicate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompileExpr
_TEXT	SEGMENT
tv205 = -16						; size = 4
tv164 = -12						; size = 4
tv92 = -8						; size = 4
_op1$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_sort$ = 12						; size = 4
_xmlXPathCompileExpr PROC				; COMDAT

; 10997: xmlXPathCompileExpr(xmlXPathParserContextPtr ctxt, int sort) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10998:     xmlXPathCompAndExpr(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompAndExpr
	add	esp, 4

; 10999:     CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN2@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 11000:     SKIP_BLANKS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN11@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathCo
$LN11@xmlXPathCo:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN20@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv92[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
	jmp	SHORT $LN21@xmlXPathCo
$LN20@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv92[ebp], edx
$LN21@xmlXPathCo:
	jmp	SHORT $LN2@xmlXPathCo
$LN4@xmlXPathCo:

; 11001:     while ((CUR == 'o') && (NXT(1) == 'r')) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 111				; 0000006fH
	jne	$LN5@xmlXPathCo
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx+eax]
	cmp	eax, 114				; 00000072H
	jne	$LN5@xmlXPathCo

; 11002: 	int op1 = ctxt->comp->last;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _op1$1[ebp], eax

; 11003:         SKIP(2);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 2
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax], edx
$LN6@xmlXPathCo:

; 11004: 	SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN13@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN14@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN13@xmlXPathCo
$LN14@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN7@xmlXPathCo
$LN13@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN22@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv164[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN23@xmlXPathCo
$LN22@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv164[ebp], ecx
$LN23@xmlXPathCo:
	jmp	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:

; 11005:         xmlXPathCompAndExpr(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompAndExpr
	add	esp, 4

; 11006: 	CHECK_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN15@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN15@xmlXPathCo:

; 11007: 	PUSH_BINARY_EXPR(XPATH_OP_OR, op1, ctxt->comp->last, 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	2
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _op1$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN8@xmlXPathCo:

; 11008: 	SKIP_BLANKS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN16@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN17@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN16@xmlXPathCo
$LN17@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathCo
$LN16@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN24@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv205[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx], ecx
	jmp	SHORT $LN25@xmlXPathCo
$LN24@xmlXPathCo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv205[ebp], ecx
$LN25@xmlXPathCo:
	jmp	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 11009:     }

	jmp	$LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 11010:     if ((sort) && (ctxt->comp->steps[ctxt->comp->last].op != XPATH_OP_VALUE)) {

	cmp	DWORD PTR _sort$[ebp], 0
	je	SHORT $LN1@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	imul	ecx, DWORD PTR [edx+12], 40
	mov	edx, DWORD PTR [eax+8]
	cmp	DWORD PTR [edx+ecx], 11			; 0000000bH
	je	SHORT $LN1@xmlXPathCo

; 11011: 	/* more ops could be optimized too */
; 11012: 	/*
; 11013: 	* This is the main place to eliminate sorting for
; 11014: 	* operations which don't require a sorted node-set.
; 11015: 	* E.g. count().
; 11016: 	*/
; 11017: 	PUSH_UNARY_EXPR(XPATH_OP_SORT, ctxt->comp->last , 0, 0);

	push	0
	push	0
	push	0
	push	0
	push	0
	push	17					; 00000011H
	push	-1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlXPathCompExprAdd
	add	esp, 36					; 00000024H
$LN1@xmlXPathCo:

; 11018:     }
; 11019: }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompileExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNameFunction
_TEXT	SEGMENT
tv143 = -16						; size = 4
_fullname$1 = -12					; size = 4
_i$2 = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathNameFunction PROC				; COMDAT

; 8841 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8842 :     xmlXPathObjectPtr cur;
; 8843 : 
; 8844 :     if (nargs == 0) {

	cmp	DWORD PTR _nargs$[ebp], 0
	jne	SHORT $LN4@xmlXPathNa

; 8845 : 	valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8846 : 	    ctxt->context->node));
; 8847 :         nargs = 1;

	mov	DWORD PTR _nargs$[ebp], 1
$LN4@xmlXPathNa:

; 8848 :     }
; 8849 : 
; 8850 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN5@xmlXPathNa
	jmp	$LN1@xmlXPathNa
$LN5@xmlXPathNa:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN6@xmlXPathNa
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNa
$LN6@xmlXPathNa:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN7@xmlXPathNa
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNa
$LN7@xmlXPathNa:

; 8851 :     if ((ctxt->value == NULL) ||

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN9@xmlXPathNa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN8@xmlXPathNa
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 9
	je	SHORT $LN8@xmlXPathNa
$LN9@xmlXPathNa:

; 8852 :         ((ctxt->value->type != XPATH_NODESET) &&
; 8853 :          (ctxt->value->type != XPATH_XSLT_TREE)))
; 8854 :         XP_ERROR(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNa
$LN8@xmlXPathNa:

; 8855 :     cur = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 8856 : 
; 8857 :     if ((cur->nodesetval == NULL) || (cur->nodesetval->nodeNr == 0)) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN12@xmlXPathNa
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN10@xmlXPathNa
$LN12@xmlXPathNa:

; 8858 :         valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewCString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8859 :     } else {

	jmp	$LN11@xmlXPathNa
$LN10@xmlXPathNa:

; 8860 :         int i = 0;              /* Should be first in document order !!!!! */

	mov	DWORD PTR _i$2[ebp], 0

; 8861 : 
; 8862 :         switch (cur->nodesetval->nodeTab[i]->type) {

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv143[ebp], edx
	cmp	DWORD PTR tv143[ebp], 0
	jle	$LN21@xmlXPathNa
	cmp	DWORD PTR tv143[ebp], 2
	jle	SHORT $LN13@xmlXPathNa
	jmp	$LN21@xmlXPathNa
$LN13@xmlXPathNa:

; 8863 :             case XML_ELEMENT_NODE:
; 8864 :             case XML_ATTRIBUTE_NODE:
; 8865 : 		if (cur->nodesetval->nodeTab[i]->name[0] == ' ')

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR [ecx+8]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN14@xmlXPathNa

; 8866 : 		    valuePush(ctxt,

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewCString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
	jmp	$LN15@xmlXPathNa
$LN14@xmlXPathNa:

; 8867 : 			xmlXPathCacheNewCString(ctxt->context, ""));
; 8868 : 		else if ((cur->nodesetval->nodeTab[i]->ns == NULL) ||

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN18@xmlXPathNa
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN16@xmlXPathNa
$LN18@xmlXPathNa:

; 8869 :                          (cur->nodesetval->nodeTab[i]->ns->prefix == NULL)) {
; 8870 : 		    valuePush(ctxt,

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 8871 : 		        xmlXPathCacheNewString(ctxt->context,
; 8872 : 			    cur->nodesetval->nodeTab[i]->name));
; 8873 : 		} else {

	jmp	$LN15@xmlXPathNa
$LN16@xmlXPathNa:

; 8874 : 		    xmlChar *fullname;
; 8875 : 
; 8876 : 		    fullname = xmlBuildQName(cur->nodesetval->nodeTab[i]->name,

	push	0
	push	0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$1[ebp], eax

; 8877 : 				     cur->nodesetval->nodeTab[i]->ns->prefix,
; 8878 : 				     NULL, 0);
; 8879 : 		    if (fullname == cur->nodesetval->nodeTab[i]->name)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR _fullname$1[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN19@xmlXPathNa

; 8880 : 			fullname = xmlStrdup(cur->nodesetval->nodeTab[i]->name);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _fullname$1[ebp], eax
$LN19@xmlXPathNa:

; 8881 : 		    if (fullname == NULL) {

	cmp	DWORD PTR _fullname$1[ebp], 0
	jne	SHORT $LN20@xmlXPathNa

; 8882 : 			XP_ERROR(XPATH_MEMORY_ERROR);

	push	15					; 0000000fH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathNa
$LN20@xmlXPathNa:

; 8883 : 		    }
; 8884 : 		    valuePush(ctxt, xmlXPathCacheWrapString(

	mov	ecx, DWORD PTR _fullname$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheWrapString
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8
$LN15@xmlXPathNa:

; 8885 : 			ctxt->context, fullname));
; 8886 :                 }
; 8887 :                 break;

	jmp	SHORT $LN11@xmlXPathNa
$LN21@xmlXPathNa:

; 8888 :             default:
; 8889 : 		valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 8890 : 		    cur->nodesetval->nodeTab[i]));
; 8891 :                 xmlXPathLocalNameFunction(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathLocalNameFunction
	add	esp, 8
$LN11@xmlXPathNa:

; 8892 :         }
; 8893 :     }
; 8894 :     xmlXPathReleaseObject(ctxt->context, cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathNa:

; 8895 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNameFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathGetElementsByIds
_TEXT	SEGMENT
_elem$ = -20						; size = 4
_attr$ = -16						; size = 4
_ID$ = -12						; size = 4
_cur$ = -8						; size = 4
_ret$ = -4						; size = 4
_doc$ = 8						; size = 4
_ids$ = 12						; size = 4
_xmlXPathGetElementsByIds PROC				; COMDAT

; 8600 : xmlXPathGetElementsByIds (xmlDocPtr doc, const xmlChar *ids) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8601 :     xmlNodeSetPtr ret;
; 8602 :     const xmlChar *cur = ids;

	mov	eax, DWORD PTR _ids$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 8603 :     xmlChar *ID;
; 8604 :     xmlAttrPtr attr;
; 8605 :     xmlNodePtr elem = NULL;

	mov	DWORD PTR _elem$[ebp], 0

; 8606 : 
; 8607 :     if (ids == NULL) return(NULL);

	cmp	DWORD PTR _ids$[ebp], 0
	jne	SHORT $LN10@xmlXPathGe
	xor	eax, eax
	jmp	$LN1@xmlXPathGe
$LN10@xmlXPathGe:

; 8608 : 
; 8609 :     ret = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 8610 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathGe

; 8611 :         return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathGe
$LN2@xmlXPathGe:

; 8612 : 
; 8613 :     while (IS_BLANK_CH(*cur)) cur++;

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN12@xmlXPathGe
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN13@xmlXPathGe
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN12@xmlXPathGe
$LN13@xmlXPathGe:
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN4@xmlXPathGe
$LN12@xmlXPathGe:
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN2@xmlXPathGe
$LN4@xmlXPathGe:

; 8614 :     while (*cur != 0) {

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN5@xmlXPathGe
$LN6@xmlXPathGe:

; 8615 : 	while ((!IS_BLANK_CH(*cur)) && (*cur != 0))

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN7@xmlXPathGe
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN14@xmlXPathGe
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN7@xmlXPathGe
$LN14@xmlXPathGe:
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN7@xmlXPathGe
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN7@xmlXPathGe

; 8616 : 	    cur++;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN6@xmlXPathGe
$LN7@xmlXPathGe:

; 8617 : 
; 8618 :         ID = xmlStrndup(ids, cur - ids);

	mov	edx, DWORD PTR _cur$[ebp]
	sub	edx, DWORD PTR _ids$[ebp]
	push	edx
	mov	eax, DWORD PTR _ids$[ebp]
	push	eax
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _ID$[ebp], eax

; 8619 : 	if (ID != NULL) {

	cmp	DWORD PTR _ID$[ebp], 0
	je	SHORT $LN8@xmlXPathGe

; 8620 : 	    /*
; 8621 : 	     * We used to check the fact that the value passed
; 8622 : 	     * was an NCName, but this generated much troubles for
; 8623 : 	     * me and Aleksey Sanin, people blatantly violated that
; 8624 : 	     * constaint, like Visa3D spec.
; 8625 : 	     * if (xmlValidateNCName(ID, 1) == 0)
; 8626 : 	     */
; 8627 : 	    attr = xmlGetID(doc, ID);

	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlGetID
	add	esp, 8
	mov	DWORD PTR _attr$[ebp], eax

; 8628 : 	    if (attr != NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN16@xmlXPathGe

; 8629 : 		if (attr->type == XML_ATTRIBUTE_NODE)

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+4], 2
	jne	SHORT $LN17@xmlXPathGe

; 8630 : 		    elem = attr->parent;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _elem$[ebp], edx
	jmp	SHORT $LN18@xmlXPathGe
$LN17@xmlXPathGe:

; 8631 : 		else if (attr->type == XML_ELEMENT_NODE)

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN19@xmlXPathGe

; 8632 : 		    elem = (xmlNodePtr) attr;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR _elem$[ebp], ecx
	jmp	SHORT $LN18@xmlXPathGe
$LN19@xmlXPathGe:

; 8633 : 		else
; 8634 : 		    elem = NULL;

	mov	DWORD PTR _elem$[ebp], 0
$LN18@xmlXPathGe:

; 8635 : 		if (elem != NULL)

	cmp	DWORD PTR _elem$[ebp], 0
	je	SHORT $LN16@xmlXPathGe

; 8636 : 		    xmlXPathNodeSetAdd(ret, elem);

	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlXPathNodeSetAdd
	add	esp, 8
$LN16@xmlXPathGe:

; 8637 : 	    }
; 8638 : 	    xmlFree(ID);

	mov	esi, esp
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@xmlXPathGe:

; 8639 : 	}
; 8640 : 
; 8641 : 	while (IS_BLANK_CH(*cur)) cur++;

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN22@xmlXPathGe
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN23@xmlXPathGe
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN22@xmlXPathGe
$LN23@xmlXPathGe:
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN9@xmlXPathGe
$LN22@xmlXPathGe:
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN8@xmlXPathGe
$LN9@xmlXPathGe:

; 8642 : 	ids = cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _ids$[ebp], edx

; 8643 :     }

	jmp	$LN4@xmlXPathGe
$LN5@xmlXPathGe:

; 8644 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathGe:

; 8645 : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathGetElementsByIds ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextPrecedingInternal
_TEXT	SEGMENT
_ns$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextPrecedingInternal PROC			; COMDAT

; 8351 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8352 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN7@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN6@xmlXPathNe
$LN7@xmlXPathNe:
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 8353 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN8@xmlXPathNe

; 8354 :         cur = ctxt->context->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _cur$[ebp], eax

; 8355 :         if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN9@xmlXPathNe

; 8356 :             return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN9@xmlXPathNe:

; 8357 :         if (cur->type == XML_ATTRIBUTE_NODE) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN10@xmlXPathNe

; 8358 :             cur = cur->parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN11@xmlXPathNe
$LN10@xmlXPathNe:

; 8359 :         } else if (cur->type == XML_NAMESPACE_DECL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN11@xmlXPathNe

; 8360 :             xmlNsPtr ns = (xmlNsPtr) cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _ns$1[ebp], edx

; 8361 : 
; 8362 :             if ((ns->next == NULL) ||

	mov	eax, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN14@xmlXPathNe
	mov	ecx, DWORD PTR _ns$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN13@xmlXPathNe
$LN14@xmlXPathNe:

; 8363 :                 (ns->next->type == XML_NAMESPACE_DECL))
; 8364 :                 return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN13@xmlXPathNe:

; 8365 :             cur = (xmlNodePtr) ns->next;

	mov	eax, DWORD PTR _ns$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN11@xmlXPathNe:

; 8366 :         }
; 8367 :         ctxt->ancestor = cur->parent;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+40], ecx
$LN8@xmlXPathNe:

; 8368 :     }
; 8369 :     if (cur->type == XML_NAMESPACE_DECL)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN15@xmlXPathNe

; 8370 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN15@xmlXPathNe:

; 8371 :     if ((cur->prev != NULL) && (cur->prev->type == XML_DTD_NODE))

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@xmlXPathNe
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+4], 14			; 0000000eH
	jne	SHORT $LN2@xmlXPathNe

; 8372 : 	cur = cur->prev;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@xmlXPathNe:

; 8373 :     while (cur->prev == NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN3@xmlXPathNe

; 8374 :         cur = cur->parent;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cur$[ebp], ecx

; 8375 :         if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN17@xmlXPathNe

; 8376 :             return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN17@xmlXPathNe:

; 8377 :         if (cur == ctxt->context->doc->children)

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN18@xmlXPathNe

; 8378 :             return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN18@xmlXPathNe:

; 8379 :         if (cur != ctxt->ancestor)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR [eax+40]
	je	SHORT $LN19@xmlXPathNe

; 8380 :             return (cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN1@xmlXPathNe
$LN19@xmlXPathNe:

; 8381 :         ctxt->ancestor = cur->parent;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+40], ecx

; 8382 :     }

	jmp	SHORT $LN2@xmlXPathNe
$LN3@xmlXPathNe:

; 8383 :     cur = cur->prev;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _cur$[ebp], eax
$LN4@xmlXPathNe:

; 8384 :     while (cur->last != NULL)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@xmlXPathNe

; 8385 :         cur = cur->last;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN4@xmlXPathNe
$LN5@xmlXPathNe:

; 8386 :     return (cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlXPathNe:

; 8387 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNextPrecedingInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathIsAncestor
_TEXT	SEGMENT
_ancestor$ = 8						; size = 4
_node$ = 12						; size = 4
_xmlXPathIsAncestor PROC				; COMDAT

; 8265 : xmlXPathIsAncestor(xmlNodePtr ancestor, xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8266 :     if ((ancestor == NULL) || (node == NULL)) return(0);

	cmp	DWORD PTR _ancestor$[ebp], 0
	je	SHORT $LN5@xmlXPathIs
	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN4@xmlXPathIs
$LN5@xmlXPathIs:
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathIs
$LN4@xmlXPathIs:

; 8267 :     if (node->type == XML_NAMESPACE_DECL)

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlXPathIs

; 8268 :         return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathIs
$LN6@xmlXPathIs:

; 8269 :     if (ancestor->type == XML_NAMESPACE_DECL)

	mov	ecx, DWORD PTR _ancestor$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN7@xmlXPathIs

; 8270 :         return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathIs
$LN7@xmlXPathIs:

; 8271 :     /* nodes need to be in the same document */
; 8272 :     if (ancestor->doc != node->doc) return(0);

	mov	edx, DWORD PTR _ancestor$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+32]
	je	SHORT $LN8@xmlXPathIs
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathIs
$LN8@xmlXPathIs:

; 8273 :     /* avoid searching if ancestor or node is the root node */
; 8274 :     if (ancestor == (xmlNodePtr) node->doc) return(1);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR _ancestor$[ebp]
	cmp	eax, DWORD PTR [edx+32]
	jne	SHORT $LN9@xmlXPathIs
	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathIs
$LN9@xmlXPathIs:

; 8275 :     if (node == (xmlNodePtr) ancestor->doc) return(0);

	mov	ecx, DWORD PTR _ancestor$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	cmp	edx, DWORD PTR [ecx+32]
	jne	SHORT $LN2@xmlXPathIs
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathIs
$LN2@xmlXPathIs:

; 8276 :     while (node->parent != NULL) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@xmlXPathIs

; 8277 :         if (node->parent == ancestor)

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _ancestor$[ebp]
	jne	SHORT $LN11@xmlXPathIs

; 8278 :             return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathIs
$LN11@xmlXPathIs:

; 8279 : 	node = node->parent;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _node$[ebp], ecx

; 8280 :     }

	jmp	SHORT $LN2@xmlXPathIs
$LN3@xmlXPathIs:

; 8281 :     return(0);

	xor	eax, eax
$LN1@xmlXPathIs:

; 8282 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathIsAncestor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextChildElement
_TEXT	SEGMENT
tv86 = -8						; size = 4
tv72 = -4						; size = 4
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextChildElement PROC				; COMDAT

; 7709 : xmlXPathNextChildElement(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7710 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN13@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN12@xmlXPathNe
$LN13@xmlXPathNe:
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN12@xmlXPathNe:

; 7711 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	$LN14@xmlXPathNe

; 7712 : 	cur = ctxt->context->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _cur$[ebp], eax

; 7713 : 	if (cur == NULL) return(NULL);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN15@xmlXPathNe
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN15@xmlXPathNe:

; 7714 : 	/*
; 7715 : 	* Get the first element child.
; 7716 : 	*/
; 7717 : 	switch (cur->type) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv72[ebp], edx
	mov	eax, DWORD PTR tv72[ebp]
	sub	eax, 1
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 20			; 00000014H
	ja	SHORT $LN21@xmlXPathNe
	mov	ecx, DWORD PTR tv72[ebp]
	movzx	edx, BYTE PTR $LN28@xmlXPathNe[ecx]
	jmp	DWORD PTR $LN30@xmlXPathNe[edx*4]
$LN16@xmlXPathNe:

; 7718 :             case XML_ELEMENT_NODE:
; 7719 : 	    case XML_DOCUMENT_FRAG_NODE:
; 7720 : 	    case XML_ENTITY_REF_NODE: /* URGENT TODO: entify-refs as well? */
; 7721 :             case XML_ENTITY_NODE:
; 7722 : 		cur = cur->children;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 7723 : 		if (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN17@xmlXPathNe

; 7724 : 		    if (cur->type == XML_ELEMENT_NODE)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN6@xmlXPathNe

; 7725 : 			return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	$LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 7726 : 		    do {
; 7727 : 			cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx

; 7728 : 		    } while ((cur != NULL) &&

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN5@xmlXPathNe
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN6@xmlXPathNe
$LN5@xmlXPathNe:

; 7729 : 			(cur->type != XML_ELEMENT_NODE));
; 7730 : 		    return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	$LN1@xmlXPathNe
$LN17@xmlXPathNe:

; 7731 : 		}
; 7732 : 		return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN20@xmlXPathNe:

; 7733 :             case XML_DOCUMENT_NODE:
; 7734 :             case XML_HTML_DOCUMENT_NODE:
; 7735 : #ifdef LIBXML_DOCB_ENABLED
; 7736 : 	    case XML_DOCB_DOCUMENT_NODE:
; 7737 : #endif
; 7738 : 		return(xmlDocGetRootElement((xmlDocPtr) cur));

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_xmlDocGetRootElement
	add	esp, 4
	jmp	SHORT $LN1@xmlXPathNe
$LN21@xmlXPathNe:

; 7739 : 	    default:
; 7740 : 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe

; 7741 : 	}
; 7742 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN14@xmlXPathNe:

; 7743 :     }
; 7744 :     /*
; 7745 :     * Get the next sibling element node.
; 7746 :     */
; 7747 :     switch (cur->type) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv86[ebp], edx
	mov	eax, DWORD PTR tv86[ebp]
	sub	eax, 1
	mov	DWORD PTR tv86[ebp], eax
	cmp	DWORD PTR tv86[ebp], 19			; 00000013H
	ja	SHORT $LN23@xmlXPathNe
	mov	ecx, DWORD PTR tv86[ebp]
	movzx	edx, BYTE PTR $LN29@xmlXPathNe[ecx]
	jmp	DWORD PTR $LN31@xmlXPathNe[edx*4]
$LN22@xmlXPathNe:

; 7748 : 	case XML_ELEMENT_NODE:
; 7749 : 	case XML_TEXT_NODE:
; 7750 : 	case XML_ENTITY_REF_NODE:
; 7751 : 	case XML_ENTITY_NODE:
; 7752 : 	case XML_CDATA_SECTION_NODE:
; 7753 : 	case XML_PI_NODE:
; 7754 : 	case XML_COMMENT_NODE:
; 7755 : 	case XML_XINCLUDE_END:
; 7756 : 	    break;

	jmp	SHORT $LN7@xmlXPathNe
$LN23@xmlXPathNe:

; 7757 : 	/* case XML_DTD_NODE: */ /* URGENT TODO: DTD-node as well? */
; 7758 : 	default:
; 7759 : 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN7@xmlXPathNe:

; 7760 :     }
; 7761 :     if (cur->next != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN24@xmlXPathNe

; 7762 : 	if (cur->next->type == XML_ELEMENT_NODE)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN25@xmlXPathNe

; 7763 : 	    return(cur->next);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [eax+24]
	jmp	SHORT $LN1@xmlXPathNe
$LN25@xmlXPathNe:

; 7764 : 	cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx
$LN11@xmlXPathNe:

; 7765 : 	do {
; 7766 : 	    cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx

; 7767 : 	} while ((cur != NULL) && (cur->type != XML_ELEMENT_NODE));

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN10@xmlXPathNe
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN11@xmlXPathNe
$LN10@xmlXPathNe:

; 7768 : 	return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN1@xmlXPathNe
$LN24@xmlXPathNe:

; 7769 :     }
; 7770 :     return(NULL);

	xor	eax, eax
$LN1@xmlXPathNe:

; 7771 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN30@xmlXPathNe:
	DD	$LN16@xmlXPathNe
	DD	$LN20@xmlXPathNe
	DD	$LN21@xmlXPathNe
$LN28@xmlXPathNe:
	DB	0
	DB	2
	DB	2
	DB	2
	DB	0
	DB	0
	DB	2
	DB	2
	DB	1
	DB	2
	DB	0
	DB	2
	DB	1
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
	npad	3
$LN31@xmlXPathNe:
	DD	$LN22@xmlXPathNe
	DD	$LN23@xmlXPathNe
$LN29@xmlXPathNe:
	DB	0
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_xmlXPathNextChildElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEqualValuesCommon
_TEXT	SEGMENT
tv260 = -48						; size = 4
tv205 = -44						; size = 4
tv195 = -40						; size = 4
tv185 = -36						; size = 4
tv135 = -32						; size = 4
tv129 = -28						; size = 4
tv87 = -24						; size = 4
tv77 = -20						; size = 4
tv71 = -16						; size = 4
tv67 = -12						; size = 4
tv65 = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_arg1$ = 12						; size = 4
_arg2$ = 16						; size = 4
_xmlXPathEqualValuesCommon PROC				; COMDAT

; 6971 :   xmlXPathObjectPtr arg1, xmlXPathObjectPtr arg2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6972 :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6973 :     /*
; 6974 :      *At this point we are assured neither arg1 nor arg2
; 6975 :      *is a nodeset, so we can just pick the appropriate routine.
; 6976 :      */
; 6977 :     switch (arg1->type) {

	mov	eax, DWORD PTR _arg1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	mov	edx, DWORD PTR tv65[ebp]
	sub	edx, 2
	mov	DWORD PTR tv65[ebp], edx
	cmp	DWORD PTR tv65[ebp], 6
	ja	$LN2@xmlXPathEq
	mov	eax, DWORD PTR tv65[ebp]
	jmp	DWORD PTR $LN93@xmlXPathEq[eax*4]

; 6978 :         case XPATH_UNDEFINED:
; 6979 : #ifdef DEBUG_EXPR
; 6980 : 	    xmlGenericError(xmlGenericErrorContext,
; 6981 : 		    "Equal: undefined\n");
; 6982 : #endif
; 6983 : 	    break;

	jmp	$LN2@xmlXPathEq
$LN11@xmlXPathEq:

; 6984 :         case XPATH_BOOLEAN:
; 6985 : 	    switch (arg2->type) {

	mov	ecx, DWORD PTR _arg2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv67[ebp], edx
	mov	eax, DWORD PTR tv67[ebp]
	sub	eax, 2
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 6
	ja	$LN4@xmlXPathEq
	mov	ecx, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN94@xmlXPathEq[ecx*4]

; 6986 : 	        case XPATH_UNDEFINED:
; 6987 : #ifdef DEBUG_EXPR
; 6988 : 		    xmlGenericError(xmlGenericErrorContext,
; 6989 : 			    "Equal: undefined\n");
; 6990 : #endif
; 6991 : 		    break;

	jmp	$LN4@xmlXPathEq
$LN13@xmlXPathEq:

; 6992 : 		case XPATH_BOOLEAN:
; 6993 : #ifdef DEBUG_EXPR
; 6994 : 		    xmlGenericError(xmlGenericErrorContext,
; 6995 : 			    "Equal: %d boolean %d \n",
; 6996 : 			    arg1->boolval, arg2->boolval);
; 6997 : #endif
; 6998 : 		    ret = (arg1->boolval == arg2->boolval);

	mov	edx, DWORD PTR _arg1$[ebp]
	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN79@xmlXPathEq
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN80@xmlXPathEq
$LN79@xmlXPathEq:
	mov	DWORD PTR tv71[ebp], 0
$LN80@xmlXPathEq:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 6999 : 		    break;

	jmp	$LN4@xmlXPathEq
$LN14@xmlXPathEq:

; 7000 : 		case XPATH_NUMBER:
; 7001 : 		    ret = (arg1->boolval ==

	mov	eax, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathCastNumberToBoolean
	add	esp, 8
	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN81@xmlXPathEq
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN82@xmlXPathEq
$LN81@xmlXPathEq:
	mov	DWORD PTR tv77[ebp], 0
$LN82@xmlXPathEq:
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 7002 : 			   xmlXPathCastNumberToBoolean(arg2->floatval));
; 7003 : 		    break;

	jmp	SHORT $LN4@xmlXPathEq
$LN15@xmlXPathEq:

; 7004 : 		case XPATH_STRING:
; 7005 : 		    if ((arg2->stringval == NULL) ||

	mov	eax, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN18@xmlXPathEq
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	movzx	edx, BYTE PTR [ecx+edx]
	test	edx, edx
	jne	SHORT $LN16@xmlXPathEq
$LN18@xmlXPathEq:

; 7006 : 			(arg2->stringval[0] == 0)) ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
	jmp	SHORT $LN17@xmlXPathEq
$LN16@xmlXPathEq:

; 7007 : 		    else
; 7008 : 			ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
$LN17@xmlXPathEq:

; 7009 : 		    ret = (arg1->boolval == ret);

	mov	eax, DWORD PTR _arg1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _ret$[ebp]
	jne	SHORT $LN83@xmlXPathEq
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN84@xmlXPathEq
$LN83@xmlXPathEq:
	mov	DWORD PTR tv87[ebp], 0
$LN84@xmlXPathEq:
	mov	edx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 7010 : 		    break;

	jmp	SHORT $LN4@xmlXPathEq
$LN19@xmlXPathEq:

; 7011 : 		case XPATH_USERS:
; 7012 : 		case XPATH_POINT:
; 7013 : 		case XPATH_RANGE:
; 7014 : 		case XPATH_LOCATIONSET:
; 7015 : 		    TODO

	mov	esi, esp
	push	7015					; 00001b67H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlXPathEq:

; 7016 : 		    break;
; 7017 : 		case XPATH_NODESET:
; 7018 : 		case XPATH_XSLT_TREE:
; 7019 : 		    break;
; 7020 : 	    }
; 7021 : 	    break;

	jmp	$LN2@xmlXPathEq
$LN21@xmlXPathEq:

; 7022 :         case XPATH_NUMBER:
; 7023 : 	    switch (arg2->type) {

	mov	edx, DWORD PTR _arg2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv129[ebp], eax
	mov	ecx, DWORD PTR tv129[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv129[ebp], ecx
	cmp	DWORD PTR tv129[ebp], 6
	ja	$LN6@xmlXPathEq
	mov	edx, DWORD PTR tv129[ebp]
	jmp	DWORD PTR $LN95@xmlXPathEq[edx*4]

; 7024 : 	        case XPATH_UNDEFINED:
; 7025 : #ifdef DEBUG_EXPR
; 7026 : 		    xmlGenericError(xmlGenericErrorContext,
; 7027 : 			    "Equal: undefined\n");
; 7028 : #endif
; 7029 : 		    break;

	jmp	$LN6@xmlXPathEq
$LN23@xmlXPathEq:

; 7030 : 		case XPATH_BOOLEAN:
; 7031 : 		    ret = (arg2->boolval==

	mov	eax, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathCastNumberToBoolean
	add	esp, 8
	mov	ecx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jne	SHORT $LN85@xmlXPathEq
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN86@xmlXPathEq
$LN85@xmlXPathEq:
	mov	DWORD PTR tv135[ebp], 0
$LN86@xmlXPathEq:
	mov	edx, DWORD PTR tv135[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 7032 : 			   xmlXPathCastNumberToBoolean(arg1->floatval));
; 7033 : 		    break;

	jmp	$LN6@xmlXPathEq
$LN24@xmlXPathEq:

; 7034 : 		case XPATH_STRING:
; 7035 : 		    valuePush(ctxt, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 7036 : 		    xmlXPathNumberFunction(ctxt, 1);

	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathNumberFunction
	add	esp, 8

; 7037 : 		    arg2 = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax
$LN25@xmlXPathEq:

; 7038 :                     /* Falls through. */
; 7039 : 		case XPATH_NUMBER:
; 7040 : 		    /* Hand check NaN and Infinity equalities */
; 7041 : 		    if (xmlXPathIsNaN(arg1->floatval) ||

	mov	ecx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN28@xmlXPathEq
	mov	edx, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	je	SHORT $LN26@xmlXPathEq
$LN28@xmlXPathEq:

; 7042 : 			    xmlXPathIsNaN(arg2->floatval)) {
; 7043 : 		        ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
	jmp	$LN42@xmlXPathEq
$LN26@xmlXPathEq:

; 7044 : 		    } else if (xmlXPathIsInf(arg1->floatval) == 1) {

	mov	eax, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN29@xmlXPathEq

; 7045 : 		        if (xmlXPathIsInf(arg2->floatval) == 1)

	mov	ecx, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN31@xmlXPathEq

; 7046 : 			    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN32@xmlXPathEq
$LN31@xmlXPathEq:

; 7047 : 			else
; 7048 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN32@xmlXPathEq:

; 7049 : 		    } else if (xmlXPathIsInf(arg1->floatval) == -1) {

	jmp	$LN42@xmlXPathEq
$LN29@xmlXPathEq:
	mov	edx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN33@xmlXPathEq

; 7050 : 			if (xmlXPathIsInf(arg2->floatval) == -1)

	mov	eax, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN35@xmlXPathEq

; 7051 : 			    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN36@xmlXPathEq
$LN35@xmlXPathEq:

; 7052 : 			else
; 7053 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN36@xmlXPathEq:

; 7054 : 		    } else if (xmlXPathIsInf(arg2->floatval) == 1) {

	jmp	$LN42@xmlXPathEq
$LN33@xmlXPathEq:
	mov	ecx, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN37@xmlXPathEq

; 7055 : 			if (xmlXPathIsInf(arg1->floatval) == 1)

	mov	edx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN39@xmlXPathEq

; 7056 : 			    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN40@xmlXPathEq
$LN39@xmlXPathEq:

; 7057 : 			else
; 7058 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN40@xmlXPathEq:

; 7059 : 		    } else if (xmlXPathIsInf(arg2->floatval) == -1) {

	jmp	SHORT $LN42@xmlXPathEq
$LN37@xmlXPathEq:
	mov	eax, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN41@xmlXPathEq

; 7060 : 			if (xmlXPathIsInf(arg1->floatval) == -1)

	mov	ecx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN43@xmlXPathEq

; 7061 : 			    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN44@xmlXPathEq
$LN43@xmlXPathEq:

; 7062 : 			else
; 7063 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN44@xmlXPathEq:

; 7064 : 		    } else {

	jmp	SHORT $LN42@xmlXPathEq
$LN41@xmlXPathEq:

; 7065 : 		        ret = (arg1->floatval == arg2->floatval);

	mov	edx, DWORD PTR _arg1$[ebp]
	mov	eax, DWORD PTR _arg2$[ebp]
	movsd	xmm0, QWORD PTR [edx+16]
	ucomisd	xmm0, QWORD PTR [eax+16]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN87@xmlXPathEq
	mov	DWORD PTR tv185[ebp], 1
	jmp	SHORT $LN88@xmlXPathEq
$LN87@xmlXPathEq:
	mov	DWORD PTR tv185[ebp], 0
$LN88@xmlXPathEq:
	mov	ecx, DWORD PTR tv185[ebp]
	mov	DWORD PTR _ret$[ebp], ecx
$LN42@xmlXPathEq:

; 7066 : 		    }
; 7067 : 		    break;

	jmp	SHORT $LN6@xmlXPathEq
$LN45@xmlXPathEq:

; 7068 : 		case XPATH_USERS:
; 7069 : 		case XPATH_POINT:
; 7070 : 		case XPATH_RANGE:
; 7071 : 		case XPATH_LOCATIONSET:
; 7072 : 		    TODO

	mov	esi, esp
	push	7072					; 00001ba0H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlXPathEq:

; 7073 : 		    break;
; 7074 : 		case XPATH_NODESET:
; 7075 : 		case XPATH_XSLT_TREE:
; 7076 : 		    break;
; 7077 : 	    }
; 7078 : 	    break;

	jmp	$LN2@xmlXPathEq
$LN47@xmlXPathEq:

; 7079 :         case XPATH_STRING:
; 7080 : 	    switch (arg2->type) {

	mov	ecx, DWORD PTR _arg2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv195[ebp], edx
	mov	eax, DWORD PTR tv195[ebp]
	sub	eax, 2
	mov	DWORD PTR tv195[ebp], eax
	cmp	DWORD PTR tv195[ebp], 6
	ja	$LN8@xmlXPathEq
	mov	ecx, DWORD PTR tv195[ebp]
	jmp	DWORD PTR $LN96@xmlXPathEq[ecx*4]

; 7081 : 	        case XPATH_UNDEFINED:
; 7082 : #ifdef DEBUG_EXPR
; 7083 : 		    xmlGenericError(xmlGenericErrorContext,
; 7084 : 			    "Equal: undefined\n");
; 7085 : #endif
; 7086 : 		    break;

	jmp	$LN8@xmlXPathEq
$LN49@xmlXPathEq:

; 7087 : 		case XPATH_BOOLEAN:
; 7088 : 		    if ((arg1->stringval == NULL) ||

	mov	edx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN52@xmlXPathEq
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _arg1$[ebp]
	mov	eax, DWORD PTR [edx+24]
	movzx	ecx, BYTE PTR [eax+ecx]
	test	ecx, ecx
	jne	SHORT $LN50@xmlXPathEq
$LN52@xmlXPathEq:

; 7089 : 			(arg1->stringval[0] == 0)) ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
	jmp	SHORT $LN51@xmlXPathEq
$LN50@xmlXPathEq:

; 7090 : 		    else
; 7091 : 			ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
$LN51@xmlXPathEq:

; 7092 : 		    ret = (arg2->boolval == ret);

	mov	edx, DWORD PTR _arg2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _ret$[ebp]
	jne	SHORT $LN89@xmlXPathEq
	mov	DWORD PTR tv205[ebp], 1
	jmp	SHORT $LN90@xmlXPathEq
$LN89@xmlXPathEq:
	mov	DWORD PTR tv205[ebp], 0
$LN90@xmlXPathEq:
	mov	ecx, DWORD PTR tv205[ebp]
	mov	DWORD PTR _ret$[ebp], ecx

; 7093 : 		    break;

	jmp	$LN8@xmlXPathEq
$LN53@xmlXPathEq:

; 7094 : 		case XPATH_STRING:
; 7095 : 		    ret = xmlStrEqual(arg1->stringval, arg2->stringval);

	mov	edx, DWORD PTR _arg2$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 7096 : 		    break;

	jmp	$LN8@xmlXPathEq
$LN54@xmlXPathEq:

; 7097 : 		case XPATH_NUMBER:
; 7098 : 		    valuePush(ctxt, arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 7099 : 		    xmlXPathNumberFunction(ctxt, 1);

	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathNumberFunction
	add	esp, 8

; 7100 : 		    arg1 = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg1$[ebp], eax

; 7101 : 		    /* Hand check NaN and Infinity equalities */
; 7102 : 		    if (xmlXPathIsNaN(arg1->floatval) ||

	mov	ecx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN57@xmlXPathEq
	mov	edx, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	je	SHORT $LN55@xmlXPathEq
$LN57@xmlXPathEq:

; 7103 : 			    xmlXPathIsNaN(arg2->floatval)) {
; 7104 : 		        ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
	jmp	$LN71@xmlXPathEq
$LN55@xmlXPathEq:

; 7105 : 		    } else if (xmlXPathIsInf(arg1->floatval) == 1) {

	mov	eax, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN58@xmlXPathEq

; 7106 : 			if (xmlXPathIsInf(arg2->floatval) == 1)

	mov	ecx, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN60@xmlXPathEq

; 7107 : 			    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN61@xmlXPathEq
$LN60@xmlXPathEq:

; 7108 : 			else
; 7109 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN61@xmlXPathEq:

; 7110 : 		    } else if (xmlXPathIsInf(arg1->floatval) == -1) {

	jmp	$LN71@xmlXPathEq
$LN58@xmlXPathEq:
	mov	edx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN62@xmlXPathEq

; 7111 : 			if (xmlXPathIsInf(arg2->floatval) == -1)

	mov	eax, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN64@xmlXPathEq

; 7112 : 			    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN65@xmlXPathEq
$LN64@xmlXPathEq:

; 7113 : 			else
; 7114 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN65@xmlXPathEq:

; 7115 : 		    } else if (xmlXPathIsInf(arg2->floatval) == 1) {

	jmp	$LN71@xmlXPathEq
$LN62@xmlXPathEq:
	mov	ecx, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN66@xmlXPathEq

; 7116 : 			if (xmlXPathIsInf(arg1->floatval) == 1)

	mov	edx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN68@xmlXPathEq

; 7117 : 			    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN69@xmlXPathEq
$LN68@xmlXPathEq:

; 7118 : 			else
; 7119 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN69@xmlXPathEq:

; 7120 : 		    } else if (xmlXPathIsInf(arg2->floatval) == -1) {

	jmp	SHORT $LN71@xmlXPathEq
$LN66@xmlXPathEq:
	mov	eax, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN70@xmlXPathEq

; 7121 : 			if (xmlXPathIsInf(arg1->floatval) == -1)

	mov	ecx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, -1
	jne	SHORT $LN72@xmlXPathEq

; 7122 : 			    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN73@xmlXPathEq
$LN72@xmlXPathEq:

; 7123 : 			else
; 7124 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN73@xmlXPathEq:

; 7125 : 		    } else {

	jmp	SHORT $LN71@xmlXPathEq
$LN70@xmlXPathEq:

; 7126 : 		        ret = (arg1->floatval == arg2->floatval);

	mov	edx, DWORD PTR _arg1$[ebp]
	mov	eax, DWORD PTR _arg2$[ebp]
	movsd	xmm0, QWORD PTR [edx+16]
	ucomisd	xmm0, QWORD PTR [eax+16]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN91@xmlXPathEq
	mov	DWORD PTR tv260[ebp], 1
	jmp	SHORT $LN92@xmlXPathEq
$LN91@xmlXPathEq:
	mov	DWORD PTR tv260[ebp], 0
$LN92@xmlXPathEq:
	mov	ecx, DWORD PTR tv260[ebp]
	mov	DWORD PTR _ret$[ebp], ecx
$LN71@xmlXPathEq:

; 7127 : 		    }
; 7128 : 		    break;

	jmp	SHORT $LN8@xmlXPathEq
$LN74@xmlXPathEq:

; 7129 : 		case XPATH_USERS:
; 7130 : 		case XPATH_POINT:
; 7131 : 		case XPATH_RANGE:
; 7132 : 		case XPATH_LOCATIONSET:
; 7133 : 		    TODO

	mov	esi, esp
	push	7133					; 00001bddH
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@xmlXPathEq:

; 7134 : 		    break;
; 7135 : 		case XPATH_NODESET:
; 7136 : 		case XPATH_XSLT_TREE:
; 7137 : 		    break;
; 7138 : 	    }
; 7139 : 	    break;

	jmp	SHORT $LN2@xmlXPathEq
$LN76@xmlXPathEq:

; 7140 :         case XPATH_USERS:
; 7141 : 	case XPATH_POINT:
; 7142 : 	case XPATH_RANGE:
; 7143 : 	case XPATH_LOCATIONSET:
; 7144 : 	    TODO

	mov	esi, esp
	push	7144					; 00001be8H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlXPathEq:

; 7145 : 	    break;
; 7146 : 	case XPATH_NODESET:
; 7147 : 	case XPATH_XSLT_TREE:
; 7148 : 	    break;
; 7149 :     }
; 7150 :     xmlXPathReleaseObject(ctxt->context, arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7151 :     xmlXPathReleaseObject(ctxt->context, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7152 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]

; 7153 : }

	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN93@xmlXPathEq:
	DD	$LN11@xmlXPathEq
	DD	$LN21@xmlXPathEq
	DD	$LN47@xmlXPathEq
	DD	$LN76@xmlXPathEq
	DD	$LN76@xmlXPathEq
	DD	$LN76@xmlXPathEq
	DD	$LN76@xmlXPathEq
$LN94@xmlXPathEq:
	DD	$LN13@xmlXPathEq
	DD	$LN14@xmlXPathEq
	DD	$LN15@xmlXPathEq
	DD	$LN19@xmlXPathEq
	DD	$LN19@xmlXPathEq
	DD	$LN19@xmlXPathEq
	DD	$LN19@xmlXPathEq
$LN95@xmlXPathEq:
	DD	$LN23@xmlXPathEq
	DD	$LN25@xmlXPathEq
	DD	$LN24@xmlXPathEq
	DD	$LN45@xmlXPathEq
	DD	$LN45@xmlXPathEq
	DD	$LN45@xmlXPathEq
	DD	$LN45@xmlXPathEq
$LN96@xmlXPathEq:
	DD	$LN49@xmlXPathEq
	DD	$LN54@xmlXPathEq
	DD	$LN53@xmlXPathEq
	DD	$LN74@xmlXPathEq
	DD	$LN74@xmlXPathEq
	DD	$LN74@xmlXPathEq
	DD	$LN74@xmlXPathEq
_xmlXPathEqualValuesCommon ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEqualNodeSets
_TEXT	SEGMENT
_ns2$ = -36						; size = 4
_ns1$ = -32						; size = 4
_ret$ = -28						; size = 4
_values2$ = -24						; size = 4
_values1$ = -20						; size = 4
_hashs2$ = -16						; size = 4
_hashs1$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_arg1$ = 8						; size = 4
_arg2$ = 12						; size = 4
_neq$ = 16						; size = 4
_xmlXPathEqualNodeSets PROC				; COMDAT

; 6870 : xmlXPathEqualNodeSets(xmlXPathObjectPtr arg1, xmlXPathObjectPtr arg2, int neq) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6871 :     int i, j;
; 6872 :     unsigned int *hashs1;
; 6873 :     unsigned int *hashs2;
; 6874 :     xmlChar **values1;
; 6875 :     xmlChar **values2;
; 6876 :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6877 :     xmlNodeSetPtr ns1;
; 6878 :     xmlNodeSetPtr ns2;
; 6879 : 
; 6880 :     if ((arg1 == NULL) ||

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN21@xmlXPathEq
	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN20@xmlXPathEq
	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN20@xmlXPathEq
$LN21@xmlXPathEq:

; 6881 : 	((arg1->type != XPATH_NODESET) && (arg1->type != XPATH_XSLT_TREE)))
; 6882 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN20@xmlXPathEq:

; 6883 :     if ((arg2 == NULL) ||

	cmp	DWORD PTR _arg2$[ebp], 0
	je	SHORT $LN23@xmlXPathEq
	mov	edx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN22@xmlXPathEq
	mov	eax, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [eax], 9
	je	SHORT $LN22@xmlXPathEq
$LN23@xmlXPathEq:

; 6884 : 	((arg2->type != XPATH_NODESET) && (arg2->type != XPATH_XSLT_TREE)))
; 6885 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN22@xmlXPathEq:

; 6886 : 
; 6887 :     ns1 = arg1->nodesetval;

	mov	ecx, DWORD PTR _arg1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ns1$[ebp], edx

; 6888 :     ns2 = arg2->nodesetval;

	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ns2$[ebp], ecx

; 6889 : 
; 6890 :     if ((ns1 == NULL) || (ns1->nodeNr <= 0))

	cmp	DWORD PTR _ns1$[ebp], 0
	je	SHORT $LN25@xmlXPathEq
	mov	edx, DWORD PTR _ns1$[ebp]
	cmp	DWORD PTR [edx], 0
	jg	SHORT $LN24@xmlXPathEq
$LN25@xmlXPathEq:

; 6891 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN24@xmlXPathEq:

; 6892 :     if ((ns2 == NULL) || (ns2->nodeNr <= 0))

	cmp	DWORD PTR _ns2$[ebp], 0
	je	SHORT $LN27@xmlXPathEq
	mov	eax, DWORD PTR _ns2$[ebp]
	cmp	DWORD PTR [eax], 0
	jg	SHORT $LN26@xmlXPathEq
$LN27@xmlXPathEq:

; 6893 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN26@xmlXPathEq:

; 6894 : 
; 6895 :     /*
; 6896 :      * for equal, check if there is a node pertaining to both sets
; 6897 :      */
; 6898 :     if (neq == 0)

	cmp	DWORD PTR _neq$[ebp], 0
	jne	SHORT $LN28@xmlXPathEq

; 6899 : 	for (i = 0;i < ns1->nodeNr;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathEq
$LN2@xmlXPathEq:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathEq:
	mov	edx, DWORD PTR _ns1$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN28@xmlXPathEq

; 6900 : 	    for (j = 0;j < ns2->nodeNr;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@xmlXPathEq
$LN5@xmlXPathEq:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN7@xmlXPathEq:
	mov	edx, DWORD PTR _ns2$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN6@xmlXPathEq

; 6901 : 		if (ns1->nodeTab[i] == ns2->nodeTab[j])

	mov	ecx, DWORD PTR _ns1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ns2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [edx+eax*4]
	cmp	edx, DWORD PTR [ecx+esi*4]
	jne	SHORT $LN29@xmlXPathEq

; 6902 : 		    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathEq
$LN29@xmlXPathEq:
	jmp	SHORT $LN5@xmlXPathEq
$LN6@xmlXPathEq:

; 6903 : 
; 6904 :     values1 = (xmlChar **) xmlMalloc(ns1->nodeNr * sizeof(xmlChar *));

	jmp	SHORT $LN2@xmlXPathEq
$LN28@xmlXPathEq:
	mov	eax, DWORD PTR _ns1$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _values1$[ebp], eax

; 6905 :     if (values1 == NULL) {

	cmp	DWORD PTR _values1$[ebp], 0
	jne	SHORT $LN30@xmlXPathEq

; 6906 :         xmlXPathErrMemory(NULL, "comparing nodesets\n");

	push	OFFSET ??_C@_0BE@EIMBPOMM@comparing?5nodesets?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 6907 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN30@xmlXPathEq:

; 6908 :     }
; 6909 :     hashs1 = (unsigned int *) xmlMalloc(ns1->nodeNr * sizeof(unsigned int));

	mov	edx, DWORD PTR _ns1$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 2
	mov	esi, esp
	push	eax
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hashs1$[ebp], eax

; 6910 :     if (hashs1 == NULL) {

	cmp	DWORD PTR _hashs1$[ebp], 0
	jne	SHORT $LN31@xmlXPathEq

; 6911 :         xmlXPathErrMemory(NULL, "comparing nodesets\n");

	push	OFFSET ??_C@_0BE@EIMBPOMM@comparing?5nodesets?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 6912 : 	xmlFree(values1);

	mov	esi, esp
	mov	ecx, DWORD PTR _values1$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6913 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN31@xmlXPathEq:

; 6914 :     }
; 6915 :     memset(values1, 0, ns1->nodeNr * sizeof(xmlChar *));

	mov	edx, DWORD PTR _ns1$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _values1$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 6916 :     values2 = (xmlChar **) xmlMalloc(ns2->nodeNr * sizeof(xmlChar *));

	mov	edx, DWORD PTR _ns2$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 2
	mov	esi, esp
	push	eax
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _values2$[ebp], eax

; 6917 :     if (values2 == NULL) {

	cmp	DWORD PTR _values2$[ebp], 0
	jne	SHORT $LN32@xmlXPathEq

; 6918 :         xmlXPathErrMemory(NULL, "comparing nodesets\n");

	push	OFFSET ??_C@_0BE@EIMBPOMM@comparing?5nodesets?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 6919 : 	xmlFree(hashs1);

	mov	esi, esp
	mov	ecx, DWORD PTR _hashs1$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6920 : 	xmlFree(values1);

	mov	esi, esp
	mov	edx, DWORD PTR _values1$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6921 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN32@xmlXPathEq:

; 6922 :     }
; 6923 :     hashs2 = (unsigned int *) xmlMalloc(ns2->nodeNr * sizeof(unsigned int));

	mov	eax, DWORD PTR _ns2$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hashs2$[ebp], eax

; 6924 :     if (hashs2 == NULL) {

	cmp	DWORD PTR _hashs2$[ebp], 0
	jne	SHORT $LN33@xmlXPathEq

; 6925 :         xmlXPathErrMemory(NULL, "comparing nodesets\n");

	push	OFFSET ??_C@_0BE@EIMBPOMM@comparing?5nodesets?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 6926 : 	xmlFree(hashs1);

	mov	esi, esp
	mov	edx, DWORD PTR _hashs1$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6927 : 	xmlFree(values1);

	mov	esi, esp
	mov	eax, DWORD PTR _values1$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6928 : 	xmlFree(values2);

	mov	esi, esp
	mov	ecx, DWORD PTR _values2$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6929 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN33@xmlXPathEq:

; 6930 :     }
; 6931 :     memset(values2, 0, ns2->nodeNr * sizeof(xmlChar *));

	mov	edx, DWORD PTR _ns2$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _values2$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 6932 :     for (i = 0;i < ns1->nodeNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@xmlXPathEq
$LN8@xmlXPathEq:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN10@xmlXPathEq:
	mov	eax, DWORD PTR _ns1$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN9@xmlXPathEq

; 6933 : 	hashs1[i] = xmlXPathNodeValHash(ns1->nodeTab[i]);

	mov	edx, DWORD PTR _ns1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_xmlXPathNodeValHash
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _hashs1$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 6934 : 	for (j = 0;j < ns2->nodeNr;j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN13@xmlXPathEq
$LN11@xmlXPathEq:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN13@xmlXPathEq:
	mov	ecx, DWORD PTR _ns2$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN12@xmlXPathEq

; 6935 : 	    if (i == 0)

	cmp	DWORD PTR _i$[ebp], 0
	jne	SHORT $LN34@xmlXPathEq

; 6936 : 		hashs2[j] = xmlXPathNodeValHash(ns2->nodeTab[j]);

	mov	eax, DWORD PTR _ns2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_xmlXPathNodeValHash
	add	esp, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _hashs2$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN34@xmlXPathEq:

; 6937 : 	    if (hashs1[i] != hashs2[j]) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _hashs1$[ebp]
	mov	edx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _hashs2$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4]
	cmp	eax, DWORD PTR [esi+edx*4]
	je	SHORT $LN35@xmlXPathEq

; 6938 : 		if (neq) {

	cmp	DWORD PTR _neq$[ebp], 0
	je	SHORT $LN37@xmlXPathEq

; 6939 : 		    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 6940 : 		    break;

	jmp	$LN12@xmlXPathEq
$LN37@xmlXPathEq:

; 6941 : 		}
; 6942 : 	    }

	jmp	SHORT $LN36@xmlXPathEq
$LN35@xmlXPathEq:

; 6943 : 	    else {
; 6944 : 		if (values1[i] == NULL)

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _values1$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	jne	SHORT $LN38@xmlXPathEq

; 6945 : 		    values1[i] = xmlNodeGetContent(ns1->nodeTab[i]);

	mov	eax, DWORD PTR _ns1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_xmlNodeGetContent
	add	esp, 4
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _values1$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN38@xmlXPathEq:

; 6946 : 		if (values2[j] == NULL)

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _values2$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	jne	SHORT $LN39@xmlXPathEq

; 6947 : 		    values2[j] = xmlNodeGetContent(ns2->nodeTab[j]);

	mov	edx, DWORD PTR _ns2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_xmlNodeGetContent
	add	esp, 4
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _values2$[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
$LN39@xmlXPathEq:

; 6948 : 		ret = xmlStrEqual(values1[i], values2[j]) ^ neq;

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _values2$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _values1$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	xor	eax, DWORD PTR _neq$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 6949 : 		if (ret)

	je	SHORT $LN36@xmlXPathEq

; 6950 : 		    break;

	jmp	SHORT $LN12@xmlXPathEq
$LN36@xmlXPathEq:

; 6951 : 	    }
; 6952 : 	}

	jmp	$LN11@xmlXPathEq
$LN12@xmlXPathEq:

; 6953 : 	if (ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN41@xmlXPathEq

; 6954 : 	    break;

	jmp	SHORT $LN9@xmlXPathEq
$LN41@xmlXPathEq:

; 6955 :     }

	jmp	$LN8@xmlXPathEq
$LN9@xmlXPathEq:

; 6956 :     for (i = 0;i < ns1->nodeNr;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN16@xmlXPathEq
$LN14@xmlXPathEq:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN16@xmlXPathEq:
	mov	ecx, DWORD PTR _ns1$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN15@xmlXPathEq

; 6957 : 	if (values1[i] != NULL)

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _values1$[ebp]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN42@xmlXPathEq

; 6958 : 	    xmlFree(values1[i]);

	mov	esi, esp
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _values1$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN42@xmlXPathEq:
	jmp	SHORT $LN14@xmlXPathEq
$LN15@xmlXPathEq:

; 6959 :     for (j = 0;j < ns2->nodeNr;j++)

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN19@xmlXPathEq
$LN17@xmlXPathEq:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN19@xmlXPathEq:
	mov	eax, DWORD PTR _ns2$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN18@xmlXPathEq

; 6960 : 	if (values2[j] != NULL)

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _values2$[ebp]
	cmp	DWORD PTR [eax+edx*4], 0
	je	SHORT $LN43@xmlXPathEq

; 6961 : 	    xmlFree(values2[j]);

	mov	esi, esp
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _values2$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN43@xmlXPathEq:
	jmp	SHORT $LN17@xmlXPathEq
$LN18@xmlXPathEq:

; 6962 :     xmlFree(values1);

	mov	esi, esp
	mov	ecx, DWORD PTR _values1$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6963 :     xmlFree(values2);

	mov	esi, esp
	mov	edx, DWORD PTR _values2$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6964 :     xmlFree(hashs1);

	mov	esi, esp
	mov	eax, DWORD PTR _hashs1$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6965 :     xmlFree(hashs2);

	mov	esi, esp
	mov	ecx, DWORD PTR _hashs2$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6966 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathEq:

; 6967 : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathEqualNodeSets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEqualNodeSetFloat
_TEXT	SEGMENT
_v$ = -28						; size = 8
_val$ = -20						; size = 4
_str2$ = -16						; size = 4
_ns$ = -12						; size = 4
_ret$ = -8						; size = 4
_i$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_arg$ = 12						; size = 4
_f$ = 16						; size = 8
_neq$ = 24						; size = 4
_xmlXPathEqualNodeSetFloat PROC				; COMDAT

; 6810 :     xmlXPathObjectPtr arg, double f, int neq) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6811 :   int i, ret=0;

	mov	DWORD PTR _ret$[ebp], 0

; 6812 :   xmlNodeSetPtr ns;
; 6813 :   xmlChar *str2;
; 6814 :   xmlXPathObjectPtr val;
; 6815 :   double v;
; 6816 : 
; 6817 :     if ((arg == NULL) ||

	cmp	DWORD PTR _arg$[ebp], 0
	je	SHORT $LN6@xmlXPathEq
	mov	eax, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN5@xmlXPathEq
	mov	ecx, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN5@xmlXPathEq
$LN6@xmlXPathEq:

; 6818 : 	((arg->type != XPATH_NODESET) && (arg->type != XPATH_XSLT_TREE)))
; 6819 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN5@xmlXPathEq:

; 6820 : 
; 6821 :     ns = arg->nodesetval;

	mov	edx, DWORD PTR _arg$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _ns$[ebp], eax

; 6822 :     if (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN3@xmlXPathEq

; 6823 : 	for (i=0;i<ns->nodeNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathEq
$LN2@xmlXPathEq:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathEq:
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	$LN3@xmlXPathEq

; 6824 : 	    str2 = xmlXPathCastNodeToString(ns->nodeTab[i]);

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_xmlXPathCastNodeToString
	add	esp, 4
	mov	DWORD PTR _str2$[ebp], eax

; 6825 : 	    if (str2 != NULL) {

	cmp	DWORD PTR _str2$[ebp], 0
	je	$LN14@xmlXPathEq

; 6826 : 		valuePush(ctxt, xmlXPathCacheNewString(ctxt->context, str2));

	mov	edx, DWORD PTR _str2$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 6827 : 		xmlFree(str2);

	mov	esi, esp
	mov	eax, DWORD PTR _str2$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6828 : 		xmlXPathNumberFunction(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNumberFunction
	add	esp, 8

; 6829 : 		val = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _val$[ebp], eax

; 6830 : 		v = val->floatval;

	mov	eax, DWORD PTR _val$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR _v$[ebp], xmm0

; 6831 : 		xmlXPathReleaseObject(ctxt->context, val);

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject

; 6832 : 		if (!xmlXPathIsNaN(v)) {

	movsd	xmm0, QWORD PTR _v$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@xmlXPathEq

; 6833 : 		    if ((!neq) && (v==f)) {

	cmp	DWORD PTR _neq$[ebp], 0
	jne	SHORT $LN11@xmlXPathEq
	movsd	xmm0, QWORD PTR _v$[ebp]
	ucomisd	xmm0, QWORD PTR _f$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN11@xmlXPathEq

; 6834 : 			ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 6835 : 			break;

	jmp	SHORT $LN3@xmlXPathEq
	jmp	SHORT $LN13@xmlXPathEq
$LN11@xmlXPathEq:

; 6836 : 		    } else if ((neq) && (v!=f)) {

	cmp	DWORD PTR _neq$[ebp], 0
	je	SHORT $LN13@xmlXPathEq
	movsd	xmm0, QWORD PTR _v$[ebp]
	ucomisd	xmm0, QWORD PTR _f$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN13@xmlXPathEq

; 6837 : 			ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 6838 : 			break;

	jmp	SHORT $LN3@xmlXPathEq
$LN13@xmlXPathEq:

; 6839 : 		    }
; 6840 : 		} else {	/* NaN is unequal to any value */

	jmp	SHORT $LN14@xmlXPathEq
$LN9@xmlXPathEq:

; 6841 : 		    if (neq)

	cmp	DWORD PTR _neq$[ebp], 0
	je	SHORT $LN14@xmlXPathEq

; 6842 : 			ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
$LN14@xmlXPathEq:

; 6843 : 		}
; 6844 : 	    }
; 6845 : 	}

	jmp	$LN2@xmlXPathEq
$LN3@xmlXPathEq:

; 6846 :     }
; 6847 : 
; 6848 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathEq:

; 6849 : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathEqualNodeSetFloat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEqualNodeSetString
_TEXT	SEGMENT
_hash$ = -16						; size = 4
_str2$ = -12						; size = 4
_ns$ = -8						; size = 4
_i$ = -4						; size = 4
_arg$ = 8						; size = 4
_str$ = 12						; size = 4
_neq$ = 16						; size = 4
_xmlXPathEqualNodeSetString PROC			; COMDAT

; 6751 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6752 :     int i;
; 6753 :     xmlNodeSetPtr ns;
; 6754 :     xmlChar *str2;
; 6755 :     unsigned int hash;
; 6756 : 
; 6757 :     if ((str == NULL) || (arg == NULL) ||

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN6@xmlXPathEq
	cmp	DWORD PTR _arg$[ebp], 0
	je	SHORT $LN6@xmlXPathEq
	mov	eax, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN5@xmlXPathEq
	mov	ecx, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN5@xmlXPathEq
$LN6@xmlXPathEq:

; 6758 :         ((arg->type != XPATH_NODESET) && (arg->type != XPATH_XSLT_TREE)))
; 6759 :         return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN5@xmlXPathEq:

; 6760 :     ns = arg->nodesetval;

	mov	edx, DWORD PTR _arg$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _ns$[ebp], eax

; 6761 :     /*
; 6762 :      * A NULL nodeset compared with a string is always false
; 6763 :      * (since there is no node equal, and no node not equal)
; 6764 :      */
; 6765 :     if ((ns == NULL) || (ns->nodeNr <= 0) )

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN8@xmlXPathEq
	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx], 0
	jg	SHORT $LN7@xmlXPathEq
$LN8@xmlXPathEq:

; 6766 :         return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN7@xmlXPathEq:

; 6767 :     hash = xmlXPathStringHash(str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_xmlXPathStringHash
	add	esp, 4
	mov	DWORD PTR _hash$[ebp], eax

; 6768 :     for (i = 0; i < ns->nodeNr; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathEq
$LN2@xmlXPathEq:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathEq:
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN3@xmlXPathEq

; 6769 :         if (xmlXPathNodeValHash(ns->nodeTab[i]) == hash) {

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_xmlXPathNodeValHash
	add	esp, 4
	cmp	eax, DWORD PTR _hash$[ebp]
	jne	$LN9@xmlXPathEq

; 6770 :             str2 = xmlNodeGetContent(ns->nodeTab[i]);

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_xmlNodeGetContent
	add	esp, 4
	mov	DWORD PTR _str2$[ebp], eax

; 6771 :             if ((str2 != NULL) && (xmlStrEqual(str, str2))) {

	cmp	DWORD PTR _str2$[ebp], 0
	je	SHORT $LN11@xmlXPathEq
	mov	edx, DWORD PTR _str2$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@xmlXPathEq

; 6772 :                 xmlFree(str2);

	mov	esi, esp
	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6773 : 		if (neq)

	cmp	DWORD PTR _neq$[ebp], 0
	je	SHORT $LN13@xmlXPathEq

; 6774 : 		    continue;

	jmp	$LN2@xmlXPathEq
$LN13@xmlXPathEq:

; 6775 :                 return (1);

	mov	eax, 1
	jmp	$LN1@xmlXPathEq
	jmp	SHORT $LN12@xmlXPathEq
$LN11@xmlXPathEq:

; 6776 : 	    } else if ((str2 == NULL) && (xmlStrEqual(str, BAD_CAST ""))) {

	cmp	DWORD PTR _str2$[ebp], 0
	jne	SHORT $LN14@xmlXPathEq
	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@xmlXPathEq

; 6777 : 		if (neq)

	cmp	DWORD PTR _neq$[ebp], 0
	je	SHORT $LN16@xmlXPathEq

; 6778 : 		    continue;

	jmp	$LN2@xmlXPathEq
$LN16@xmlXPathEq:

; 6779 :                 return (1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathEq
	jmp	SHORT $LN12@xmlXPathEq
$LN14@xmlXPathEq:

; 6780 :             } else if (neq) {

	cmp	DWORD PTR _neq$[ebp], 0
	je	SHORT $LN12@xmlXPathEq

; 6781 : 		if (str2 != NULL)

	cmp	DWORD PTR _str2$[ebp], 0
	je	SHORT $LN18@xmlXPathEq

; 6782 : 		    xmlFree(str2);

	mov	esi, esp
	mov	eax, DWORD PTR _str2$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@xmlXPathEq:

; 6783 : 		return (1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathEq
$LN12@xmlXPathEq:

; 6784 : 	    }
; 6785 :             if (str2 != NULL)

	cmp	DWORD PTR _str2$[ebp], 0
	je	SHORT $LN19@xmlXPathEq

; 6786 :                 xmlFree(str2);

	mov	esi, esp
	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@xmlXPathEq:

; 6787 :         } else if (neq)

	jmp	SHORT $LN10@xmlXPathEq
$LN9@xmlXPathEq:
	cmp	DWORD PTR _neq$[ebp], 0
	je	SHORT $LN10@xmlXPathEq

; 6788 : 	    return (1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathEq
$LN10@xmlXPathEq:

; 6789 :     }

	jmp	$LN2@xmlXPathEq
$LN3@xmlXPathEq:

; 6790 :     return (0);

	xor	eax, eax
$LN1@xmlXPathEq:

; 6791 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathEqualNodeSetString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompareNodeSetValue
_TEXT	SEGMENT
tv71 = -4						; size = 4
_ctxt$ = 8						; size = 4
_inf$ = 12						; size = 4
_strict$ = 16						; size = 4
_arg$ = 20						; size = 4
_val$ = 24						; size = 4
_xmlXPathCompareNodeSetValue PROC			; COMDAT

; 6705 : 	                    xmlXPathObjectPtr arg, xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6706 :     if ((val == NULL) || (arg == NULL) ||

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN5@xmlXPathCo
	cmp	DWORD PTR _arg$[ebp], 0
	je	SHORT $LN5@xmlXPathCo
	mov	eax, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN4@xmlXPathCo
	mov	ecx, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 6707 : 	((arg->type != XPATH_NODESET) && (arg->type != XPATH_XSLT_TREE)))
; 6708 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:

; 6709 : 
; 6710 :     switch(val->type) {

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv71[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 8
	ja	$LN10@xmlXPathCo
	mov	edx, DWORD PTR tv71[ebp]
	jmp	DWORD PTR $LN12@xmlXPathCo[edx*4]
$LN6@xmlXPathCo:

; 6711 :         case XPATH_NUMBER:
; 6712 : 	    return(xmlXPathCompareNodeSetFloat(ctxt, inf, strict, arg, val));

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strict$[ebp]
	push	edx
	mov	eax, DWORD PTR _inf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompareNodeSetFloat
	add	esp, 20					; 00000014H
	jmp	$LN1@xmlXPathCo
$LN7@xmlXPathCo:

; 6713 :         case XPATH_NODESET:
; 6714 :         case XPATH_XSLT_TREE:
; 6715 : 	    return(xmlXPathCompareNodeSets(inf, strict, arg, val));

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strict$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inf$[ebp]
	push	edx
	call	_xmlXPathCompareNodeSets
	add	esp, 16					; 00000010H
	jmp	$LN1@xmlXPathCo
$LN8@xmlXPathCo:

; 6716 :         case XPATH_STRING:
; 6717 : 	    return(xmlXPathCompareNodeSetString(ctxt, inf, strict, arg, val));

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strict$[ebp]
	push	edx
	mov	eax, DWORD PTR _inf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompareNodeSetString
	add	esp, 20					; 00000014H
	jmp	$LN1@xmlXPathCo
$LN9@xmlXPathCo:

; 6718 :         case XPATH_BOOLEAN:
; 6719 : 	    valuePush(ctxt, arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 6720 : 	    xmlXPathBooleanFunction(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathBooleanFunction
	add	esp, 8

; 6721 : 	    valuePush(ctxt, val);

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 6722 : 	    return(xmlXPathCompareValues(ctxt, inf, strict));

	mov	ecx, DWORD PTR _strict$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inf$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompareValues
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlXPathCo
$LN10@xmlXPathCo:

; 6723 : 	default:
; 6724 :             xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0EL@MECKCKJO@xmlXPathCompareNodeSetValue?3?5Ca@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6725 :                     "xmlXPathCompareNodeSetValue: Can't compare node set "
; 6726 :                     "and object of type %d\n",
; 6727 :                     val->type);
; 6728 :             xmlXPathReleaseObject(ctxt->context, arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6729 :             xmlXPathReleaseObject(ctxt->context, val);

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6730 :             XP_ERROR0(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCo

; 6731 :     }
; 6732 :     return(0);

	xor	eax, eax
$LN1@xmlXPathCo:

; 6733 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@xmlXPathCo:
	DD	$LN7@xmlXPathCo
	DD	$LN9@xmlXPathCo
	DD	$LN6@xmlXPathCo
	DD	$LN8@xmlXPathCo
	DD	$LN10@xmlXPathCo
	DD	$LN10@xmlXPathCo
	DD	$LN10@xmlXPathCo
	DD	$LN10@xmlXPathCo
	DD	$LN7@xmlXPathCo
_xmlXPathCompareNodeSetValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompareNodeSets
_TEXT	SEGMENT
tv180 = -52						; size = 4
tv174 = -48						; size = 4
tv168 = -44						; size = 4
tv162 = -40						; size = 4
_ns2$ = -36						; size = 4
_ns1$ = -32						; size = 4
_ret$ = -28						; size = 4
_values2$ = -24						; size = 4
_val1$ = -20						; size = 8
_init$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_inf$ = 8						; size = 4
_strict$ = 12						; size = 4
_arg1$ = 16						; size = 4
_arg2$ = 20						; size = 4
_xmlXPathCompareNodeSets PROC				; COMDAT

; 6610 : 	                xmlXPathObjectPtr arg1, xmlXPathObjectPtr arg2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6611 :     int i, j, init = 0;

	mov	DWORD PTR _init$[ebp], 0

; 6612 :     double val1;
; 6613 :     double *values2;
; 6614 :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6615 :     xmlNodeSetPtr ns1;
; 6616 :     xmlNodeSetPtr ns2;
; 6617 : 
; 6618 :     if ((arg1 == NULL) ||

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN9@xmlXPathCo
	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN8@xmlXPathCo
	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 6619 : 	((arg1->type != XPATH_NODESET) && (arg1->type != XPATH_XSLT_TREE))) {
; 6620 : 	xmlXPathFreeObject(arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 6621 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN8@xmlXPathCo:

; 6622 :     }
; 6623 :     if ((arg2 == NULL) ||

	cmp	DWORD PTR _arg2$[ebp], 0
	je	SHORT $LN11@xmlXPathCo
	mov	eax, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN10@xmlXPathCo
	mov	ecx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN10@xmlXPathCo
$LN11@xmlXPathCo:

; 6624 : 	((arg2->type != XPATH_NODESET) && (arg2->type != XPATH_XSLT_TREE))) {
; 6625 : 	xmlXPathFreeObject(arg1);

	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 6626 : 	xmlXPathFreeObject(arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	call	_xmlXPathFreeObject
	add	esp, 4

; 6627 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN10@xmlXPathCo:

; 6628 :     }
; 6629 : 
; 6630 :     ns1 = arg1->nodesetval;

	mov	ecx, DWORD PTR _arg1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ns1$[ebp], edx

; 6631 :     ns2 = arg2->nodesetval;

	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ns2$[ebp], ecx

; 6632 : 
; 6633 :     if ((ns1 == NULL) || (ns1->nodeNr <= 0)) {

	cmp	DWORD PTR _ns1$[ebp], 0
	je	SHORT $LN13@xmlXPathCo
	mov	edx, DWORD PTR _ns1$[ebp]
	cmp	DWORD PTR [edx], 0
	jg	SHORT $LN12@xmlXPathCo
$LN13@xmlXPathCo:

; 6634 : 	xmlXPathFreeObject(arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	call	_xmlXPathFreeObject
	add	esp, 4

; 6635 : 	xmlXPathFreeObject(arg2);

	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	call	_xmlXPathFreeObject
	add	esp, 4

; 6636 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN12@xmlXPathCo:

; 6637 :     }
; 6638 :     if ((ns2 == NULL) || (ns2->nodeNr <= 0)) {

	cmp	DWORD PTR _ns2$[ebp], 0
	je	SHORT $LN15@xmlXPathCo
	mov	edx, DWORD PTR _ns2$[ebp]
	cmp	DWORD PTR [edx], 0
	jg	SHORT $LN14@xmlXPathCo
$LN15@xmlXPathCo:

; 6639 : 	xmlXPathFreeObject(arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	call	_xmlXPathFreeObject
	add	esp, 4

; 6640 : 	xmlXPathFreeObject(arg2);

	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	call	_xmlXPathFreeObject
	add	esp, 4

; 6641 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN14@xmlXPathCo:

; 6642 :     }
; 6643 : 
; 6644 :     values2 = (double *) xmlMalloc(ns2->nodeNr * sizeof(double));

	mov	edx, DWORD PTR _ns2$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 3
	mov	esi, esp
	push	eax
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _values2$[ebp], eax

; 6645 :     if (values2 == NULL) {

	cmp	DWORD PTR _values2$[ebp], 0
	jne	SHORT $LN16@xmlXPathCo

; 6646 :         xmlXPathErrMemory(NULL, "comparing nodesets\n");

	push	OFFSET ??_C@_0BE@EIMBPOMM@comparing?5nodesets?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 6647 : 	xmlXPathFreeObject(arg1);

	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	call	_xmlXPathFreeObject
	add	esp, 4

; 6648 : 	xmlXPathFreeObject(arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 6649 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN16@xmlXPathCo:

; 6650 :     }
; 6651 :     for (i = 0;i < ns1->nodeNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathCo
$LN2@xmlXPathCo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathCo:
	mov	ecx, DWORD PTR _ns1$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN3@xmlXPathCo

; 6652 : 	val1 = xmlXPathCastNodeToNumber(ns1->nodeTab[i]);

	mov	eax, DWORD PTR _ns1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_xmlXPathCastNodeToNumber
	add	esp, 4
	fstp	QWORD PTR _val1$[ebp]

; 6653 : 	if (xmlXPathIsNaN(val1))

	sub	esp, 8
	movsd	xmm0, QWORD PTR _val1$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	je	SHORT $LN17@xmlXPathCo

; 6654 : 	    continue;

	jmp	SHORT $LN2@xmlXPathCo
$LN17@xmlXPathCo:

; 6655 : 	for (j = 0;j < ns2->nodeNr;j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@xmlXPathCo
$LN5@xmlXPathCo:
	mov	ecx, DWORD PTR _j$[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$[ebp], ecx
$LN7@xmlXPathCo:
	mov	edx, DWORD PTR _ns2$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	$LN6@xmlXPathCo

; 6656 : 	    if (init == 0) {

	cmp	DWORD PTR _init$[ebp], 0
	jne	SHORT $LN18@xmlXPathCo

; 6657 : 		values2[j] = xmlXPathCastNodeToNumber(ns2->nodeTab[j]);

	mov	ecx, DWORD PTR _ns2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_xmlXPathCastNodeToNumber
	add	esp, 4
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _values2$[ebp]
	fstp	QWORD PTR [eax+edx*8]
$LN18@xmlXPathCo:

; 6658 : 	    }
; 6659 : 	    if (xmlXPathIsNaN(values2[j]))

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _values2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+ecx*8]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@xmlXPathCo

; 6660 : 		continue;

	jmp	SHORT $LN5@xmlXPathCo
$LN19@xmlXPathCo:

; 6661 : 	    if (inf && strict)

	cmp	DWORD PTR _inf$[ebp], 0
	je	SHORT $LN20@xmlXPathCo
	cmp	DWORD PTR _strict$[ebp], 0
	je	SHORT $LN20@xmlXPathCo

; 6662 : 		ret = (val1 < values2[j]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _values2$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	comisd	xmm0, QWORD PTR _val1$[ebp]
	jbe	SHORT $LN30@xmlXPathCo
	mov	DWORD PTR tv162[ebp], 1
	jmp	SHORT $LN31@xmlXPathCo
$LN30@xmlXPathCo:
	mov	DWORD PTR tv162[ebp], 0
$LN31@xmlXPathCo:
	mov	edx, DWORD PTR tv162[ebp]
	mov	DWORD PTR _ret$[ebp], edx
	jmp	$LN26@xmlXPathCo
$LN20@xmlXPathCo:

; 6663 : 	    else if (inf && !strict)

	cmp	DWORD PTR _inf$[ebp], 0
	je	SHORT $LN22@xmlXPathCo
	cmp	DWORD PTR _strict$[ebp], 0
	jne	SHORT $LN22@xmlXPathCo

; 6664 : 		ret = (val1 <= values2[j]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _values2$[ebp]
	movsd	xmm0, QWORD PTR [ecx+eax*8]
	comisd	xmm0, QWORD PTR _val1$[ebp]
	jb	SHORT $LN32@xmlXPathCo
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN33@xmlXPathCo
$LN32@xmlXPathCo:
	mov	DWORD PTR tv168[ebp], 0
$LN33@xmlXPathCo:
	mov	edx, DWORD PTR tv168[ebp]
	mov	DWORD PTR _ret$[ebp], edx
	jmp	SHORT $LN26@xmlXPathCo
$LN22@xmlXPathCo:

; 6665 : 	    else if (!inf && strict)

	cmp	DWORD PTR _inf$[ebp], 0
	jne	SHORT $LN24@xmlXPathCo
	cmp	DWORD PTR _strict$[ebp], 0
	je	SHORT $LN24@xmlXPathCo

; 6666 : 		ret = (val1 > values2[j]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _values2$[ebp]
	movsd	xmm0, QWORD PTR _val1$[ebp]
	comisd	xmm0, QWORD PTR [ecx+eax*8]
	jbe	SHORT $LN34@xmlXPathCo
	mov	DWORD PTR tv174[ebp], 1
	jmp	SHORT $LN35@xmlXPathCo
$LN34@xmlXPathCo:
	mov	DWORD PTR tv174[ebp], 0
$LN35@xmlXPathCo:
	mov	edx, DWORD PTR tv174[ebp]
	mov	DWORD PTR _ret$[ebp], edx
	jmp	SHORT $LN26@xmlXPathCo
$LN24@xmlXPathCo:

; 6667 : 	    else if (!inf && !strict)

	cmp	DWORD PTR _inf$[ebp], 0
	jne	SHORT $LN26@xmlXPathCo
	cmp	DWORD PTR _strict$[ebp], 0
	jne	SHORT $LN26@xmlXPathCo

; 6668 : 		ret = (val1 >= values2[j]);

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _values2$[ebp]
	movsd	xmm0, QWORD PTR _val1$[ebp]
	comisd	xmm0, QWORD PTR [ecx+eax*8]
	jb	SHORT $LN36@xmlXPathCo
	mov	DWORD PTR tv180[ebp], 1
	jmp	SHORT $LN37@xmlXPathCo
$LN36@xmlXPathCo:
	mov	DWORD PTR tv180[ebp], 0
$LN37@xmlXPathCo:
	mov	edx, DWORD PTR tv180[ebp]
	mov	DWORD PTR _ret$[ebp], edx
$LN26@xmlXPathCo:

; 6669 : 	    if (ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN27@xmlXPathCo

; 6670 : 		break;

	jmp	SHORT $LN6@xmlXPathCo
$LN27@xmlXPathCo:

; 6671 : 	}

	jmp	$LN5@xmlXPathCo
$LN6@xmlXPathCo:

; 6672 : 	if (ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN28@xmlXPathCo

; 6673 : 	    break;

	jmp	SHORT $LN3@xmlXPathCo
$LN28@xmlXPathCo:

; 6674 : 	init = 1;

	mov	DWORD PTR _init$[ebp], 1

; 6675 :     }

	jmp	$LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 6676 :     xmlFree(values2);

	mov	esi, esp
	mov	eax, DWORD PTR _values2$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6677 :     xmlXPathFreeObject(arg1);

	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	call	_xmlXPathFreeObject
	add	esp, 4

; 6678 :     xmlXPathFreeObject(arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 6679 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCo:

; 6680 : }

	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompareNodeSets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompareNodeSetString
_TEXT	SEGMENT
_str2$ = -16						; size = 4
_ns$ = -12						; size = 4
_ret$ = -8						; size = 4
_i$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_inf$ = 12						; size = 4
_strict$ = 16						; size = 4
_arg$ = 20						; size = 4
_s$ = 24						; size = 4
_xmlXPathCompareNodeSetString PROC			; COMDAT

; 6549 : 	                    xmlXPathObjectPtr arg, xmlXPathObjectPtr s) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6550 :     int i, ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6551 :     xmlNodeSetPtr ns;
; 6552 :     xmlChar *str2;
; 6553 : 
; 6554 :     if ((s == NULL) || (arg == NULL) ||

	cmp	DWORD PTR _s$[ebp], 0
	je	SHORT $LN6@xmlXPathCo
	cmp	DWORD PTR _arg$[ebp], 0
	je	SHORT $LN6@xmlXPathCo
	mov	eax, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN5@xmlXPathCo
	mov	ecx, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN5@xmlXPathCo
$LN6@xmlXPathCo:

; 6555 : 	((arg->type != XPATH_NODESET) && (arg->type != XPATH_XSLT_TREE))) {
; 6556 : 	xmlXPathReleaseObject(ctxt->context, arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6557 : 	xmlXPathReleaseObject(ctxt->context, s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6558 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN5@xmlXPathCo:

; 6559 :     }
; 6560 :     ns = arg->nodesetval;

	mov	edx, DWORD PTR _arg$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _ns$[ebp], eax

; 6561 :     if (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN7@xmlXPathCo

; 6562 : 	for (i = 0;i < ns->nodeNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathCo
$LN2@xmlXPathCo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathCo:
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	$LN7@xmlXPathCo

; 6563 : 	     str2 = xmlXPathCastNodeToString(ns->nodeTab[i]);

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_xmlXPathCastNodeToString
	add	esp, 4
	mov	DWORD PTR _str2$[ebp], eax

; 6564 : 	     if (str2 != NULL) {

	cmp	DWORD PTR _str2$[ebp], 0
	je	SHORT $LN8@xmlXPathCo

; 6565 : 		 valuePush(ctxt,

	mov	edx, DWORD PTR _str2$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 6566 : 			   xmlXPathCacheNewString(ctxt->context, str2));
; 6567 : 		 xmlFree(str2);

	mov	esi, esp
	mov	eax, DWORD PTR _str2$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6568 : 		 valuePush(ctxt, xmlXPathCacheObjectCopy(ctxt->context, s));

	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheObjectCopy
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 6569 : 		 ret = xmlXPathCompareValues(ctxt, inf, strict);

	mov	edx, DWORD PTR _strict$[ebp]
	push	edx
	mov	eax, DWORD PTR _inf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompareValues
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 6570 : 		 if (ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN8@xmlXPathCo

; 6571 : 		     break;

	jmp	SHORT $LN7@xmlXPathCo
$LN8@xmlXPathCo:

; 6572 : 	     }
; 6573 : 	}

	jmp	$LN2@xmlXPathCo
$LN7@xmlXPathCo:

; 6574 :     }
; 6575 :     xmlXPathReleaseObject(ctxt->context, arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6576 :     xmlXPathReleaseObject(ctxt->context, s);

	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6577 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCo:

; 6578 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompareNodeSetString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompareNodeSetFloat
_TEXT	SEGMENT
_str2$ = -16						; size = 4
_ns$ = -12						; size = 4
_ret$ = -8						; size = 4
_i$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_inf$ = 12						; size = 4
_strict$ = 16						; size = 4
_arg$ = 20						; size = 4
_f$ = 24						; size = 4
_xmlXPathCompareNodeSetFloat PROC			; COMDAT

; 6494 : 	                    xmlXPathObjectPtr arg, xmlXPathObjectPtr f) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6495 :     int i, ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6496 :     xmlNodeSetPtr ns;
; 6497 :     xmlChar *str2;
; 6498 : 
; 6499 :     if ((f == NULL) || (arg == NULL) ||

	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN6@xmlXPathCo
	cmp	DWORD PTR _arg$[ebp], 0
	je	SHORT $LN6@xmlXPathCo
	mov	eax, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN5@xmlXPathCo
	mov	ecx, DWORD PTR _arg$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN5@xmlXPathCo
$LN6@xmlXPathCo:

; 6500 : 	((arg->type != XPATH_NODESET) && (arg->type != XPATH_XSLT_TREE))) {
; 6501 : 	xmlXPathReleaseObject(ctxt->context, arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6502 : 	xmlXPathReleaseObject(ctxt->context, f);

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6503 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN5@xmlXPathCo:

; 6504 :     }
; 6505 :     ns = arg->nodesetval;

	mov	edx, DWORD PTR _arg$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _ns$[ebp], eax

; 6506 :     if (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN7@xmlXPathCo

; 6507 : 	for (i = 0;i < ns->nodeNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathCo
$LN2@xmlXPathCo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathCo:
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	$LN7@xmlXPathCo

; 6508 : 	     str2 = xmlXPathCastNodeToString(ns->nodeTab[i]);

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_xmlXPathCastNodeToString
	add	esp, 4
	mov	DWORD PTR _str2$[ebp], eax

; 6509 : 	     if (str2 != NULL) {

	cmp	DWORD PTR _str2$[ebp], 0
	je	$LN8@xmlXPathCo

; 6510 : 		 valuePush(ctxt,

	mov	edx, DWORD PTR _str2$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 6511 : 			   xmlXPathCacheNewString(ctxt->context, str2));
; 6512 : 		 xmlFree(str2);

	mov	esi, esp
	mov	eax, DWORD PTR _str2$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6513 : 		 xmlXPathNumberFunction(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNumberFunction
	add	esp, 8

; 6514 : 		 valuePush(ctxt, xmlXPathCacheObjectCopy(ctxt->context, f));

	mov	edx, DWORD PTR _f$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheObjectCopy
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 6515 : 		 ret = xmlXPathCompareValues(ctxt, inf, strict);

	mov	eax, DWORD PTR _strict$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompareValues
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 6516 : 		 if (ret)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN8@xmlXPathCo

; 6517 : 		     break;

	jmp	SHORT $LN7@xmlXPathCo
$LN8@xmlXPathCo:

; 6518 : 	     }
; 6519 : 	}

	jmp	$LN2@xmlXPathCo
$LN7@xmlXPathCo:

; 6520 :     }
; 6521 :     xmlXPathReleaseObject(ctxt->context, arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6522 :     xmlXPathReleaseObject(ctxt->context, f);

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 6523 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCo:

; 6524 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompareNodeSetFloat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathStringHash
_TEXT	SEGMENT
_string$ = 8						; size = 4
_xmlXPathStringHash PROC				; COMDAT

; 6461 : xmlXPathStringHash(const xmlChar * string) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6462 :     if (string == NULL)

	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN2@xmlXPathSt

; 6463 : 	return((unsigned int) 0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathSt
$LN2@xmlXPathSt:

; 6464 :     if (string[0] == 0)

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _string$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN3@xmlXPathSt

; 6465 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathSt
$LN3@xmlXPathSt:

; 6466 :     return(((unsigned int) string[0]) +

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _string$[ebp]
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _string$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 8
	add	eax, ecx
$LN1@xmlXPathSt:

; 6467 : 	   (((unsigned int) string[1]) << 8));
; 6468 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathStringHash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeValHash
_TEXT	SEGMENT
tv140 = -24						; size = 4
tv73 = -20						; size = 4
_ret$ = -16						; size = 4
_tmp$ = -12						; size = 4
_string$ = -8						; size = 4
_len$ = -4						; size = 4
_node$ = 8						; size = 4
_xmlXPathNodeValHash PROC				; COMDAT

; 6346 : xmlXPathNodeValHash(xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6347 :     int len = 2;

	mov	DWORD PTR _len$[ebp], 2

; 6348 :     const xmlChar * string = NULL;

	mov	DWORD PTR _string$[ebp], 0

; 6349 :     xmlNodePtr tmp = NULL;

	mov	DWORD PTR _tmp$[ebp], 0

; 6350 :     unsigned int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6351 : 
; 6352 :     if (node == NULL)

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN11@xmlXPathNo

; 6353 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN11@xmlXPathNo:

; 6354 : 
; 6355 :     if (node->type == XML_DOCUMENT_NODE) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 9
	jne	SHORT $LN12@xmlXPathNo

; 6356 : 	tmp = xmlDocGetRootElement((xmlDocPtr) node);

	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	call	_xmlDocGetRootElement
	add	esp, 4
	mov	DWORD PTR _tmp$[ebp], eax

; 6357 : 	if (tmp == NULL)

	cmp	DWORD PTR _tmp$[ebp], 0
	jne	SHORT $LN13@xmlXPathNo

; 6358 : 	    node = node->children;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN14@xmlXPathNo
$LN13@xmlXPathNo:

; 6359 : 	else
; 6360 : 	    node = tmp;

	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _node$[ebp], ecx
$LN14@xmlXPathNo:

; 6361 : 
; 6362 : 	if (node == NULL)

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN12@xmlXPathNo

; 6363 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN12@xmlXPathNo:

; 6364 :     }
; 6365 : 
; 6366 :     switch (node->type) {

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv73[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 17			; 00000011H
	ja	$LN24@xmlXPathNo
	mov	edx, DWORD PTR tv73[ebp]
	movzx	eax, BYTE PTR $LN41@xmlXPathNo[edx]
	jmp	DWORD PTR $LN42@xmlXPathNo[eax*4]
$LN16@xmlXPathNo:

; 6367 : 	case XML_COMMENT_NODE:
; 6368 : 	case XML_PI_NODE:
; 6369 : 	case XML_CDATA_SECTION_NODE:
; 6370 : 	case XML_TEXT_NODE:
; 6371 : 	    string = node->content;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _string$[ebp], edx

; 6372 : 	    if (string == NULL)

	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN17@xmlXPathNo

; 6373 : 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN17@xmlXPathNo:

; 6374 : 	    if (string[0] == 0)

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _string$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN18@xmlXPathNo

; 6375 : 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN18@xmlXPathNo:

; 6376 : 	    return(((unsigned int) string[0]) +

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _string$[ebp]
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _string$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 8
	add	eax, ecx
	jmp	$LN1@xmlXPathNo
$LN19@xmlXPathNo:

; 6377 : 		   (((unsigned int) string[1]) << 8));
; 6378 : 	case XML_NAMESPACE_DECL:
; 6379 : 	    string = ((xmlNsPtr)node)->href;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _string$[ebp], eax

; 6380 : 	    if (string == NULL)

	cmp	DWORD PTR _string$[ebp], 0
	jne	SHORT $LN20@xmlXPathNo

; 6381 : 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN20@xmlXPathNo:

; 6382 : 	    if (string[0] == 0)

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _string$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN21@xmlXPathNo

; 6383 : 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN21@xmlXPathNo:

; 6384 : 	    return(((unsigned int) string[0]) +

	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _string$[ebp]
	movzx	eax, BYTE PTR [ecx+eax]
	mov	edx, 1
	shl	edx, 0
	mov	ecx, DWORD PTR _string$[ebp]
	movzx	edx, BYTE PTR [ecx+edx]
	shl	edx, 8
	add	eax, edx
	jmp	$LN1@xmlXPathNo
$LN22@xmlXPathNo:

; 6385 : 		   (((unsigned int) string[1]) << 8));
; 6386 : 	case XML_ATTRIBUTE_NODE:
; 6387 : 	    tmp = ((xmlAttrPtr) node)->children;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _tmp$[ebp], ecx

; 6388 : 	    break;

	jmp	SHORT $LN4@xmlXPathNo
$LN23@xmlXPathNo:

; 6389 : 	case XML_ELEMENT_NODE:
; 6390 : 	    tmp = node->children;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _tmp$[ebp], eax

; 6391 : 	    break;

	jmp	SHORT $LN4@xmlXPathNo
$LN24@xmlXPathNo:

; 6392 : 	default:
; 6393 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN4@xmlXPathNo:

; 6394 :     }
; 6395 :     while (tmp != NULL) {

	cmp	DWORD PTR _tmp$[ebp], 0
	je	$LN5@xmlXPathNo

; 6396 : 	switch (tmp->type) {

	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv140[ebp], edx
	cmp	DWORD PTR tv140[ebp], 3
	jl	SHORT $LN26@xmlXPathNo
	cmp	DWORD PTR tv140[ebp], 4
	jle	SHORT $LN25@xmlXPathNo
	jmp	SHORT $LN26@xmlXPathNo
$LN25@xmlXPathNo:

; 6397 : 	    case XML_CDATA_SECTION_NODE:
; 6398 : 	    case XML_TEXT_NODE:
; 6399 : 		string = tmp->content;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _string$[ebp], ecx

; 6400 : 		break;

	jmp	SHORT $LN6@xmlXPathNo
$LN26@xmlXPathNo:

; 6401 : 	    default:
; 6402 :                 string = NULL;

	mov	DWORD PTR _string$[ebp], 0
$LN6@xmlXPathNo:

; 6403 : 		break;
; 6404 : 	}
; 6405 : 	if ((string != NULL) && (string[0] != 0)) {

	cmp	DWORD PTR _string$[ebp], 0
	je	$LN27@xmlXPathNo
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _string$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN27@xmlXPathNo

; 6406 : 	    if (len == 1) {

	cmp	DWORD PTR _len$[ebp], 1
	jne	SHORT $LN28@xmlXPathNo

; 6407 : 		return(ret + (((unsigned int) string[0]) << 8));

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _string$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	shl	eax, 8
	add	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathNo
$LN28@xmlXPathNo:

; 6408 : 	    }
; 6409 : 	    if (string[1] == 0) {

	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _string$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN29@xmlXPathNo

; 6410 : 		len = 1;

	mov	DWORD PTR _len$[ebp], 1

; 6411 : 		ret = (unsigned int) string[0];

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _string$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	mov	DWORD PTR _ret$[ebp], eax

; 6412 : 	    } else {

	jmp	SHORT $LN27@xmlXPathNo
$LN29@xmlXPathNo:

; 6413 : 		return(((unsigned int) string[0]) +

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _string$[ebp]
	movzx	eax, BYTE PTR [eax+edx]
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _string$[ebp]
	movzx	ecx, BYTE PTR [edx+ecx]
	shl	ecx, 8
	add	eax, ecx
	jmp	$LN1@xmlXPathNo
$LN27@xmlXPathNo:

; 6414 : 		       (((unsigned int) string[1]) << 8));
; 6415 : 	    }
; 6416 : 	}
; 6417 : 	/*
; 6418 : 	 * Skip to next node
; 6419 : 	 */
; 6420 : 	if ((tmp->children != NULL) && (tmp->type != XML_DTD_NODE)) {

	mov	edx, DWORD PTR _tmp$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN31@xmlXPathNo
	mov	eax, DWORD PTR _tmp$[ebp]
	cmp	DWORD PTR [eax+4], 14			; 0000000eH
	je	SHORT $LN31@xmlXPathNo

; 6421 : 	    if (tmp->children->type != XML_ENTITY_DECL) {

	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 17			; 00000011H
	je	SHORT $LN31@xmlXPathNo

; 6422 : 		tmp = tmp->children;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _tmp$[ebp], ecx

; 6423 : 		continue;

	jmp	$LN4@xmlXPathNo
$LN31@xmlXPathNo:

; 6424 : 	    }
; 6425 : 	}
; 6426 : 	if (tmp == node)

	mov	edx, DWORD PTR _tmp$[ebp]
	cmp	edx, DWORD PTR _node$[ebp]
	jne	SHORT $LN33@xmlXPathNo

; 6427 : 	    break;

	jmp	SHORT $LN5@xmlXPathNo
$LN33@xmlXPathNo:

; 6428 : 
; 6429 : 	if (tmp->next != NULL) {

	mov	eax, DWORD PTR _tmp$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN10@xmlXPathNo

; 6430 : 	    tmp = tmp->next;

	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _tmp$[ebp], edx

; 6431 : 	    continue;

	jmp	$LN4@xmlXPathNo
$LN10@xmlXPathNo:

; 6432 : 	}
; 6433 : 
; 6434 : 	do {
; 6435 : 	    tmp = tmp->parent;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _tmp$[ebp], ecx

; 6436 : 	    if (tmp == NULL)

	cmp	DWORD PTR _tmp$[ebp], 0
	jne	SHORT $LN35@xmlXPathNo

; 6437 : 		break;

	jmp	SHORT $LN9@xmlXPathNo
$LN35@xmlXPathNo:

; 6438 : 	    if (tmp == node) {

	mov	edx, DWORD PTR _tmp$[ebp]
	cmp	edx, DWORD PTR _node$[ebp]
	jne	SHORT $LN36@xmlXPathNo

; 6439 : 		tmp = NULL;

	mov	DWORD PTR _tmp$[ebp], 0

; 6440 : 		break;

	jmp	SHORT $LN9@xmlXPathNo
$LN36@xmlXPathNo:

; 6441 : 	    }
; 6442 : 	    if (tmp->next != NULL) {

	mov	eax, DWORD PTR _tmp$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN8@xmlXPathNo

; 6443 : 		tmp = tmp->next;

	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _tmp$[ebp], edx

; 6444 : 		break;

	jmp	SHORT $LN9@xmlXPathNo
$LN8@xmlXPathNo:

; 6445 : 	    }
; 6446 : 	} while (tmp != NULL);

	cmp	DWORD PTR _tmp$[ebp], 0
	jne	SHORT $LN10@xmlXPathNo
$LN9@xmlXPathNo:

; 6447 :     }

	jmp	$LN4@xmlXPathNo
$LN5@xmlXPathNo:

; 6448 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNo:

; 6449 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN42@xmlXPathNo:
	DD	$LN23@xmlXPathNo
	DD	$LN22@xmlXPathNo
	DD	$LN16@xmlXPathNo
	DD	$LN19@xmlXPathNo
	DD	$LN24@xmlXPathNo
$LN41@xmlXPathNo:
	DB	0
	DB	1
	DB	2
	DB	2
	DB	4
	DB	4
	DB	2
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_xmlXPathNodeValHash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompParserContext
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_comp$ = 8						; size = 4
_ctxt$ = 12						; size = 4
_xmlXPathCompParserContext PROC				; COMDAT

; 6270 : xmlXPathCompParserContext(xmlXPathCompExprPtr comp, xmlXPathContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6271 :     xmlXPathParserContextPtr ret;
; 6272 : 
; 6273 :     ret = (xmlXPathParserContextPtr) xmlMalloc(sizeof(xmlXPathParserContext));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 6274 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathCo

; 6275 :         xmlXPathErrMemory(ctxt, "creating evaluation context\n");

	push	OFFSET ??_C@_0BN@DLELJOPA@creating?5evaluation?5context?6@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErrMemory
	add	esp, 8

; 6276 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 6277 :     }
; 6278 :     memset(ret, 0 , (size_t) sizeof(xmlXPathParserContext));

	push	48					; 00000030H
	push	0
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 6279 : 
; 6280 :     /* Allocate the value stack */
; 6281 :     ret->valueTab = (xmlXPathObjectPtr *)

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+28], eax

; 6282 :                      xmlMalloc(10 * sizeof(xmlXPathObjectPtr));
; 6283 :     if (ret->valueTab == NULL) {

	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN3@xmlXPathCo

; 6284 : 	xmlFree(ret);

	mov	esi, esp
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6285 : 	xmlXPathErrMemory(ctxt, "creating evaluation context\n");

	push	OFFSET ??_C@_0BN@DLELJOPA@creating?5evaluation?5context?6@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErrMemory
	add	esp, 8

; 6286 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCo
$LN3@xmlXPathCo:

; 6287 :     }
; 6288 :     ret->valueNr = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+20], 0

; 6289 :     ret->valueMax = 10;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], 10			; 0000000aH

; 6290 :     ret->value = NULL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+16], 0

; 6291 :     ret->valueFrame = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+44], 0

; 6292 : 
; 6293 :     ret->context = ctxt;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 6294 :     ret->comp = comp;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 6295 : 
; 6296 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCo:

; 6297 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompParserContext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetKeepLast
_TEXT	SEGMENT
_node$ = -8						; size = 4
_i$ = -4						; size = 4
_set$ = 8						; size = 4
_xmlXPathNodeSetKeepLast PROC				; COMDAT

; 4243 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4244 :     int i;
; 4245 :     xmlNodePtr node;
; 4246 : 
; 4247 :     if ((set == NULL) || (set->nodeNr <= 1))

	cmp	DWORD PTR _set$[ebp], 0
	je	SHORT $LN6@xmlXPathNo
	mov	eax, DWORD PTR _set$[ebp]
	cmp	DWORD PTR [eax], 1
	jg	SHORT $LN5@xmlXPathNo
$LN6@xmlXPathNo:

; 4248 : 	return;

	jmp	SHORT $LN1@xmlXPathNo
$LN5@xmlXPathNo:

; 4249 :     for (i = 0; i < set->nodeNr - 1; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathNo:
	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN3@xmlXPathNo

; 4250 :         node = set->nodeTab[i];

	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _node$[ebp], ecx

; 4251 :         if ((node != NULL) &&

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN7@xmlXPathNo
	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN7@xmlXPathNo

; 4252 :             (node->type == XML_NAMESPACE_DECL))
; 4253 :             xmlXPathNodeSetFreeNs((xmlNsPtr) node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4
$LN7@xmlXPathNo:

; 4254 :     }

	jmp	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 4255 :     set->nodeTab[0] = set->nodeTab[set->nodeNr-1];

	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, 4
	imul	eax, eax, 0
	mov	esi, DWORD PTR _set$[ebp]
	mov	esi, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [ecx+edx*4-4]
	mov	DWORD PTR [eax+esi], ecx

; 4256 :     set->nodeNr = 1;

	mov	edx, DWORD PTR _set$[ebp]
	mov	DWORD PTR [edx], 1
$LN1@xmlXPathNo:

; 4257 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetKeepLast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetClear
_TEXT	SEGMENT
_set$ = 8						; size = 4
_hasNsNodes$ = 12					; size = 4
_xmlXPathNodeSetClear PROC				; COMDAT

; 4229 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4230 :     xmlXPathNodeSetClearFromPos(set, 0, hasNsNodes);

	mov	eax, DWORD PTR _hasNsNodes$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _set$[ebp]
	push	ecx
	call	_xmlXPathNodeSetClearFromPos
	add	esp, 12					; 0000000cH

; 4231 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNodeSetClear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetClearFromPos
_TEXT	SEGMENT
_node$1 = -8						; size = 4
_i$2 = -4						; size = 4
_set$ = 8						; size = 4
_pos$ = 12						; size = 4
_hasNsNodes$ = 16					; size = 4
_xmlXPathNodeSetClearFromPos PROC			; COMDAT

; 4202 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4203 :     if ((set == NULL) || (pos >= set->nodeNr))

	cmp	DWORD PTR _set$[ebp], 0
	je	SHORT $LN7@xmlXPathNo
	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN5@xmlXPathNo
$LN7@xmlXPathNo:

; 4204 : 	return;

	jmp	SHORT $LN1@xmlXPathNo
	jmp	SHORT $LN6@xmlXPathNo
$LN5@xmlXPathNo:

; 4205 :     else if ((hasNsNodes)) {

	cmp	DWORD PTR _hasNsNodes$[ebp], 0
	je	SHORT $LN6@xmlXPathNo

; 4206 : 	int i;
; 4207 : 	xmlNodePtr node;
; 4208 : 
; 4209 : 	for (i = pos; i < set->nodeNr; i++) {

	mov	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _i$2[ebp], edx
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@xmlXPathNo:
	mov	ecx, DWORD PTR _set$[ebp]
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN6@xmlXPathNo

; 4210 : 	    node = set->nodeTab[i];

	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _node$1[ebp], eax

; 4211 : 	    if ((node != NULL) &&

	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN9@xmlXPathNo
	mov	ecx, DWORD PTR _node$1[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN9@xmlXPathNo

; 4212 : 		(node->type == XML_NAMESPACE_DECL))
; 4213 : 		xmlXPathNodeSetFreeNs((xmlNsPtr) node);

	mov	edx, DWORD PTR _node$1[ebp]
	push	edx
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4
$LN9@xmlXPathNo:

; 4214 : 	}

	jmp	SHORT $LN2@xmlXPathNo
$LN6@xmlXPathNo:

; 4215 :     }
; 4216 :     set->nodeNr = pos;

	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR [eax], ecx
$LN1@xmlXPathNo:

; 4217 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetClearFromPos ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetMergeAndClearNoDupls
_TEXT	SEGMENT
_temp$1 = -12						; size = 4
_n2$2 = -8						; size = 4
_i$3 = -4						; size = 4
_set1$ = 8						; size = 4
_set2$ = 12						; size = 4
_hasNullEntries$ = 16					; size = 4
_xmlXPathNodeSetMergeAndClearNoDupls PROC		; COMDAT

; 4047 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4048 :     if (set2 == NULL)

	cmp	DWORD PTR _set2$[ebp], 0
	jne	SHORT $LN5@xmlXPathNo

; 4049 : 	return(set1);

	mov	eax, DWORD PTR _set1$[ebp]
	jmp	$LN1@xmlXPathNo
$LN5@xmlXPathNo:

; 4050 :     if ((set1 == NULL) && (hasNullEntries == 0)) {

	cmp	DWORD PTR _set1$[ebp], 0
	jne	SHORT $LN6@xmlXPathNo
	cmp	DWORD PTR _hasNullEntries$[ebp], 0
	jne	SHORT $LN6@xmlXPathNo

; 4051 : 	/*
; 4052 : 	* Note that doing a memcpy of the list, namespace nodes are
; 4053 : 	* just assigned to set1, since set2 is cleared anyway.
; 4054 : 	*/
; 4055 : 	set1 = xmlXPathNodeSetCreateSize(set2->nodeNr);

	mov	eax, DWORD PTR _set2$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlXPathNodeSetCreateSize
	add	esp, 4
	mov	DWORD PTR _set1$[ebp], eax

; 4056 : 	if (set1 == NULL)

	cmp	DWORD PTR _set1$[ebp], 0
	jne	SHORT $LN8@xmlXPathNo

; 4057 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN8@xmlXPathNo:

; 4058 : 	if (set2->nodeNr != 0) {

	mov	edx, DWORD PTR _set2$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@xmlXPathNo

; 4059 : 	    memcpy(set1->nodeTab, set2->nodeTab,

	mov	eax, DWORD PTR _set2$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _set2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _set1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 4060 : 		set2->nodeNr * sizeof(xmlNodePtr));
; 4061 : 	    set1->nodeNr = set2->nodeNr;

	mov	eax, DWORD PTR _set1$[ebp]
	mov	ecx, DWORD PTR _set2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN9@xmlXPathNo:

; 4062 : 	}
; 4063 :     } else {

	jmp	$LN7@xmlXPathNo
$LN6@xmlXPathNo:

; 4064 : 	int i;
; 4065 : 	xmlNodePtr n2;
; 4066 : 
; 4067 : 	if (set1 == NULL)

	cmp	DWORD PTR _set1$[ebp], 0
	jne	SHORT $LN10@xmlXPathNo

; 4068 : 	    set1 = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _set1$[ebp], eax
$LN10@xmlXPathNo:

; 4069 :         if (set1 == NULL)

	cmp	DWORD PTR _set1$[ebp], 0
	jne	SHORT $LN11@xmlXPathNo

; 4070 :             return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN11@xmlXPathNo:

; 4071 : 
; 4072 : 	for (i = 0;i < set2->nodeNr;i++) {

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN4@xmlXPathNo:
	mov	ecx, DWORD PTR _set2$[ebp]
	mov	edx, DWORD PTR _i$3[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	$LN7@xmlXPathNo

; 4073 : 	    n2 = set2->nodeTab[i];

	mov	eax, DWORD PTR _set2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$3[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _n2$2[ebp], eax

; 4074 : 	    /*
; 4075 : 	    * Skip NULLed entries.
; 4076 : 	    */
; 4077 : 	    if (n2 == NULL)

	cmp	DWORD PTR _n2$2[ebp], 0
	jne	SHORT $LN12@xmlXPathNo

; 4078 : 		continue;

	jmp	SHORT $LN2@xmlXPathNo
$LN12@xmlXPathNo:

; 4079 : 	    if (set1->nodeMax == 0) {

	mov	ecx, DWORD PTR _set1$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN13@xmlXPathNo

; 4080 : 		set1->nodeTab = (xmlNodePtr *) xmlMalloc(

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _set1$[ebp]
	mov	DWORD PTR [edx+8], eax

; 4081 : 		    XML_NODESET_DEFAULT * sizeof(xmlNodePtr));
; 4082 : 		if (set1->nodeTab == NULL) {

	mov	eax, DWORD PTR _set1$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN15@xmlXPathNo

; 4083 : 		    xmlXPathErrMemory(NULL, "merging nodeset\n");

	push	OFFSET ??_C@_0BB@IMBJKAMG@merging?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 4084 : 		    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN15@xmlXPathNo:

; 4085 : 		}
; 4086 : 		memset(set1->nodeTab, 0,

	xor	ecx, ecx
	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx

; 4087 : 		    XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
; 4088 : 		set1->nodeMax = XML_NODESET_DEFAULT;

	mov	ecx, DWORD PTR _set1$[ebp]
	mov	DWORD PTR [ecx+4], 10			; 0000000aH
	jmp	$LN14@xmlXPathNo
$LN13@xmlXPathNo:

; 4089 : 	    } else if (set1->nodeNr >= set1->nodeMax) {

	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR _set1$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+4]
	jl	SHORT $LN14@xmlXPathNo

; 4090 : 		xmlNodePtr *temp;
; 4091 : 
; 4092 :                 if (set1->nodeMax >= XPATH_MAX_NODESET_LENGTH) {

	mov	edx, DWORD PTR _set1$[ebp]
	cmp	DWORD PTR [edx+4], 10000000		; 00989680H
	jl	SHORT $LN17@xmlXPathNo

; 4093 :                     xmlXPathErrMemory(NULL, "merging nodeset hit limit\n");

	push	OFFSET ??_C@_0BL@DBOLJGCN@merging?5nodeset?5hit?5limit?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 4094 :                     return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN17@xmlXPathNo:

; 4095 :                 }
; 4096 : 		temp = (xmlNodePtr *) xmlRealloc(

	mov	eax, DWORD PTR _set1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _temp$1[ebp], eax

; 4097 : 		    set1->nodeTab, set1->nodeMax * 2 * sizeof(xmlNodePtr));
; 4098 : 		if (temp == NULL) {

	cmp	DWORD PTR _temp$1[ebp], 0
	jne	SHORT $LN18@xmlXPathNo

; 4099 : 		    xmlXPathErrMemory(NULL, "merging nodeset\n");

	push	OFFSET ??_C@_0BB@IMBJKAMG@merging?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 4100 : 		    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNo
$LN18@xmlXPathNo:

; 4101 : 		}
; 4102 : 		set1->nodeTab = temp;

	mov	ecx, DWORD PTR _set1$[ebp]
	mov	edx, DWORD PTR _temp$1[ebp]
	mov	DWORD PTR [ecx+8], edx

; 4103 : 		set1->nodeMax *= 2;

	mov	eax, DWORD PTR _set1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	mov	edx, DWORD PTR _set1$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN14@xmlXPathNo:

; 4104 : 	    }
; 4105 : 	    set1->nodeTab[set1->nodeNr++] = n2;

	mov	eax, DWORD PTR _set1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _n2$2[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _set1$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _set1$[ebp]
	mov	DWORD PTR [edx], ecx

; 4106 : 	}

	jmp	$LN2@xmlXPathNo
$LN7@xmlXPathNo:

; 4107 :     }
; 4108 :     set2->nodeNr = 0;

	mov	eax, DWORD PTR _set2$[ebp]
	mov	DWORD PTR [eax], 0

; 4109 :     return(set1);

	mov	eax, DWORD PTR _set1$[ebp]
$LN1@xmlXPathNo:

; 4110 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetMergeAndClearNoDupls ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetMergeAndClear
_TEXT	SEGMENT
_temp$1 = -24						; size = 4
_n2$2 = -20						; size = 4
_n1$3 = -16						; size = 4
_initNbSet1$4 = -12					; size = 4
_j$5 = -8						; size = 4
_i$6 = -4						; size = 4
_set1$ = 8						; size = 4
_set2$ = 12						; size = 4
_hasNullEntries$ = 16					; size = 4
_xmlXPathNodeSetMergeAndClear PROC			; COMDAT

; 3940 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3941 :     if ((set1 == NULL) && (hasNullEntries == 0)) {

	cmp	DWORD PTR _set1$[ebp], 0
	jne	SHORT $LN8@xmlXPathNo
	cmp	DWORD PTR _hasNullEntries$[ebp], 0
	jne	SHORT $LN8@xmlXPathNo

; 3942 : 	/*
; 3943 : 	* Note that doing a memcpy of the list, namespace nodes are
; 3944 : 	* just assigned to set1, since set2 is cleared anyway.
; 3945 : 	*/
; 3946 : 	set1 = xmlXPathNodeSetCreateSize(set2->nodeNr);

	mov	eax, DWORD PTR _set2$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlXPathNodeSetCreateSize
	add	esp, 4
	mov	DWORD PTR _set1$[ebp], eax

; 3947 : 	if (set1 == NULL)

	cmp	DWORD PTR _set1$[ebp], 0
	jne	SHORT $LN10@xmlXPathNo

; 3948 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN10@xmlXPathNo:

; 3949 : 	if (set2->nodeNr != 0) {

	mov	edx, DWORD PTR _set2$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN11@xmlXPathNo

; 3950 : 	    memcpy(set1->nodeTab, set2->nodeTab,

	mov	eax, DWORD PTR _set2$[ebp]
	mov	ecx, DWORD PTR [eax]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _set2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _set1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 3951 : 		set2->nodeNr * sizeof(xmlNodePtr));
; 3952 : 	    set1->nodeNr = set2->nodeNr;

	mov	eax, DWORD PTR _set1$[ebp]
	mov	ecx, DWORD PTR _set2$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
$LN11@xmlXPathNo:

; 3953 : 	}
; 3954 :     } else {

	jmp	$LN9@xmlXPathNo
$LN8@xmlXPathNo:

; 3955 : 	int i, j, initNbSet1;
; 3956 : 	xmlNodePtr n1, n2;
; 3957 : 
; 3958 : 	if (set1 == NULL)

	cmp	DWORD PTR _set1$[ebp], 0
	jne	SHORT $LN12@xmlXPathNo

; 3959 :             set1 = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _set1$[ebp], eax
$LN12@xmlXPathNo:

; 3960 :         if (set1 == NULL)

	cmp	DWORD PTR _set1$[ebp], 0
	jne	SHORT $LN13@xmlXPathNo

; 3961 :             return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN13@xmlXPathNo:

; 3962 : 
; 3963 : 	initNbSet1 = set1->nodeNr;

	mov	eax, DWORD PTR _set1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _initNbSet1$4[ebp], ecx

; 3964 : 	for (i = 0;i < set2->nodeNr;i++) {

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	edx, DWORD PTR _i$6[ebp]
	add	edx, 1
	mov	DWORD PTR _i$6[ebp], edx
$LN4@xmlXPathNo:
	mov	eax, DWORD PTR _set2$[ebp]
	mov	ecx, DWORD PTR _i$6[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN9@xmlXPathNo

; 3965 : 	    n2 = set2->nodeTab[i];

	mov	edx, DWORD PTR _set2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$6[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _n2$2[ebp], edx

; 3966 : 	    /*
; 3967 : 	    * Skip NULLed entries.
; 3968 : 	    */
; 3969 : 	    if (n2 == NULL)

	cmp	DWORD PTR _n2$2[ebp], 0
	jne	SHORT $LN14@xmlXPathNo

; 3970 : 		continue;

	jmp	SHORT $LN2@xmlXPathNo
$LN14@xmlXPathNo:

; 3971 : 	    /*
; 3972 : 	    * Skip duplicates.
; 3973 : 	    */
; 3974 : 	    for (j = 0; j < initNbSet1; j++) {

	mov	DWORD PTR _j$5[ebp], 0
	jmp	SHORT $LN7@xmlXPathNo
$LN5@xmlXPathNo:
	mov	eax, DWORD PTR _j$5[ebp]
	add	eax, 1
	mov	DWORD PTR _j$5[ebp], eax
$LN7@xmlXPathNo:
	mov	ecx, DWORD PTR _j$5[ebp]
	cmp	ecx, DWORD PTR _initNbSet1$4[ebp]
	jge	SHORT $LN6@xmlXPathNo

; 3975 : 		n1 = set1->nodeTab[j];

	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _j$5[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _n1$3[ebp], edx

; 3976 : 		if (n1 == n2) {

	mov	eax, DWORD PTR _n1$3[ebp]
	cmp	eax, DWORD PTR _n2$2[ebp]
	jne	SHORT $LN15@xmlXPathNo

; 3977 : 		    goto skip_node;

	jmp	$skip_node$26
	jmp	SHORT $LN16@xmlXPathNo
$LN15@xmlXPathNo:

; 3978 : 		} else if ((n1->type == XML_NAMESPACE_DECL) &&

	mov	ecx, DWORD PTR _n1$3[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN16@xmlXPathNo
	mov	edx, DWORD PTR _n2$2[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN16@xmlXPathNo

; 3979 : 		    (n2->type == XML_NAMESPACE_DECL))
; 3980 : 		{
; 3981 : 		    if ((((xmlNsPtr) n1)->next == ((xmlNsPtr) n2)->next) &&

	mov	eax, DWORD PTR _n1$3[ebp]
	mov	ecx, DWORD PTR _n2$2[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN16@xmlXPathNo
	mov	eax, DWORD PTR _n2$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _n1$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@xmlXPathNo

; 3982 : 			(xmlStrEqual(((xmlNsPtr) n1)->prefix,
; 3983 : 			((xmlNsPtr) n2)->prefix)))
; 3984 : 		    {
; 3985 : 			/*
; 3986 : 			* Free the namespace node.
; 3987 : 			*/
; 3988 : 			set2->nodeTab[i] = NULL;

	mov	ecx, DWORD PTR _set2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$6[ebp]
	mov	DWORD PTR [edx+eax*4], 0

; 3989 : 			xmlXPathNodeSetFreeNs((xmlNsPtr) n2);

	mov	ecx, DWORD PTR _n2$2[ebp]
	push	ecx
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4

; 3990 : 			goto skip_node;

	jmp	$skip_node$26
$LN16@xmlXPathNo:

; 3991 : 		    }
; 3992 : 		}
; 3993 : 	    }

	jmp	$LN5@xmlXPathNo
$LN6@xmlXPathNo:

; 3994 : 	    /*
; 3995 : 	    * grow the nodeTab if needed
; 3996 : 	    */
; 3997 : 	    if (set1->nodeMax == 0) {

	mov	edx, DWORD PTR _set1$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN19@xmlXPathNo

; 3998 : 		set1->nodeTab = (xmlNodePtr *) xmlMalloc(

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _set1$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 3999 : 		    XML_NODESET_DEFAULT * sizeof(xmlNodePtr));
; 4000 : 		if (set1->nodeTab == NULL) {

	mov	edx, DWORD PTR _set1$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN21@xmlXPathNo

; 4001 : 		    xmlXPathErrMemory(NULL, "merging nodeset\n");

	push	OFFSET ??_C@_0BB@IMBJKAMG@merging?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 4002 : 		    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN21@xmlXPathNo:

; 4003 : 		}
; 4004 : 		memset(set1->nodeTab, 0,

	xor	eax, eax
	mov	ecx, DWORD PTR _set1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], eax
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], eax
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR [edx+28], eax
	mov	DWORD PTR [edx+32], eax
	mov	DWORD PTR [edx+36], eax

; 4005 : 		    XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
; 4006 : 		set1->nodeMax = XML_NODESET_DEFAULT;

	mov	eax, DWORD PTR _set1$[ebp]
	mov	DWORD PTR [eax+4], 10			; 0000000aH
	jmp	$LN20@xmlXPathNo
$LN19@xmlXPathNo:

; 4007 : 	    } else if (set1->nodeNr >= set1->nodeMax) {

	mov	ecx, DWORD PTR _set1$[ebp]
	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+4]
	jl	SHORT $LN20@xmlXPathNo

; 4008 : 		xmlNodePtr *temp;
; 4009 : 
; 4010 :                 if (set1->nodeMax >= XPATH_MAX_NODESET_LENGTH) {

	mov	ecx, DWORD PTR _set1$[ebp]
	cmp	DWORD PTR [ecx+4], 10000000		; 00989680H
	jl	SHORT $LN23@xmlXPathNo

; 4011 :                     xmlXPathErrMemory(NULL, "merging nodeset hit limit\n");

	push	OFFSET ??_C@_0BL@DBOLJGCN@merging?5nodeset?5hit?5limit?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 4012 :                     return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN23@xmlXPathNo:

; 4013 :                 }
; 4014 : 		temp = (xmlNodePtr *) xmlRealloc(

	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 1
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _set1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _temp$1[ebp], eax

; 4015 : 		    set1->nodeTab, set1->nodeMax * 2 * sizeof(xmlNodePtr));
; 4016 : 		if (temp == NULL) {

	cmp	DWORD PTR _temp$1[ebp], 0
	jne	SHORT $LN24@xmlXPathNo

; 4017 : 		    xmlXPathErrMemory(NULL, "merging nodeset\n");

	push	OFFSET ??_C@_0BB@IMBJKAMG@merging?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 4018 : 		    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNo
$LN24@xmlXPathNo:

; 4019 : 		}
; 4020 : 		set1->nodeTab = temp;

	mov	eax, DWORD PTR _set1$[ebp]
	mov	ecx, DWORD PTR _temp$1[ebp]
	mov	DWORD PTR [eax+8], ecx

; 4021 : 		set1->nodeMax *= 2;

	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 1
	mov	ecx, DWORD PTR _set1$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN20@xmlXPathNo:

; 4022 : 	    }
; 4023 : 	    set1->nodeTab[set1->nodeNr++] = n2;

	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _set1$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _n2$2[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _set1$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _set1$[ebp]
	mov	DWORD PTR [ecx], eax
$skip_node$26:

; 4024 : skip_node:
; 4025 : 	    {}
; 4026 : 	}

	jmp	$LN2@xmlXPathNo
$LN9@xmlXPathNo:

; 4027 :     }
; 4028 :     set2->nodeNr = 0;

	mov	edx, DWORD PTR _set2$[ebp]
	mov	DWORD PTR [edx], 0

; 4029 :     return(set1);

	mov	eax, DWORD PTR _set1$[ebp]
$LN1@xmlXPathNo:

; 4030 : }

	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetMergeAndClear ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetCreateSize
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_size$ = 8						; size = 4
_xmlXPathNodeSetCreateSize PROC				; COMDAT

; 3567 : xmlXPathNodeSetCreateSize(int size) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3568 :     xmlNodeSetPtr ret;
; 3569 : 
; 3570 :     ret = (xmlNodeSetPtr) xmlMalloc(sizeof(xmlNodeSet));

	mov	esi, esp
	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 3571 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNo

; 3572 :         xmlXPathErrMemory(NULL, "creating nodeset\n");

	push	OFFSET ??_C@_0BC@LBLPMNCN@creating?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3573 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN2@xmlXPathNo:

; 3574 :     }
; 3575 :     memset(ret, 0 , (size_t) sizeof(xmlNodeSet));

	xor	eax, eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 3576 :     if (size < XML_NODESET_DEFAULT)

	cmp	DWORD PTR _size$[ebp], 10		; 0000000aH
	jge	SHORT $LN3@xmlXPathNo

; 3577 : 	size = XML_NODESET_DEFAULT;

	mov	DWORD PTR _size$[ebp], 10		; 0000000aH
$LN3@xmlXPathNo:

; 3578 :     ret->nodeTab = (xmlNodePtr *) xmlMalloc(size * sizeof(xmlNodePtr));

	mov	edx, DWORD PTR _size$[ebp]
	shl	edx, 2
	mov	esi, esp
	push	edx
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 3579 :     if (ret->nodeTab == NULL) {

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN4@xmlXPathNo

; 3580 : 	xmlXPathErrMemory(NULL, "creating nodeset\n");

	push	OFFSET ??_C@_0BC@LBLPMNCN@creating?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3581 : 	xmlFree(ret);

	mov	esi, esp
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3582 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNo
$LN4@xmlXPathNo:

; 3583 :     }
; 3584 :     memset(ret->nodeTab, 0 , size * (size_t) sizeof(xmlNodePtr));

	mov	ecx, DWORD PTR _size$[ebp]
	shl	ecx, 2
	push	ecx
	push	0
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 3585 :     ret->nodeMax = size;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 3586 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNo:

; 3587 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetCreateSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetDupNs
_TEXT	SEGMENT
_cur$ = -4						; size = 4
_node$ = 8						; size = 4
_ns$ = 12						; size = 4
_xmlXPathNodeSetDupNs PROC				; COMDAT

; 3470 : xmlXPathNodeSetDupNs(xmlNodePtr node, xmlNsPtr ns) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3471 :     xmlNsPtr cur;
; 3472 : 
; 3473 :     if ((ns == NULL) || (ns->type != XML_NAMESPACE_DECL))

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlXPathNo
	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	je	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 3474 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN2@xmlXPathNo:

; 3475 :     if ((node == NULL) || (node->type == XML_NAMESPACE_DECL))

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN5@xmlXPathNo
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN4@xmlXPathNo
$LN5@xmlXPathNo:

; 3476 : 	return((xmlNodePtr) ns);

	mov	eax, DWORD PTR _ns$[ebp]
	jmp	$LN1@xmlXPathNo
$LN4@xmlXPathNo:

; 3477 : 
; 3478 :     /*
; 3479 :      * Allocate a new Namespace and fill the fields.
; 3480 :      */
; 3481 :     cur = (xmlNsPtr) xmlMalloc(sizeof(xmlNs));

	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur$[ebp], eax

; 3482 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN6@xmlXPathNo

; 3483 :         xmlXPathErrMemory(NULL, "duplicating namespace\n");

	push	OFFSET ??_C@_0BH@EHGBBAJH@duplicating?5namespace?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3484 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNo
$LN6@xmlXPathNo:

; 3485 :     }
; 3486 :     memset(cur, 0, sizeof(xmlNs));

	xor	edx, edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], edx

; 3487 :     cur->type = XML_NAMESPACE_DECL;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], 18			; 00000012H

; 3488 :     if (ns->href != NULL)

	mov	edx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN7@xmlXPathNo

; 3489 : 	cur->href = xmlStrdup(ns->href);

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN7@xmlXPathNo:

; 3490 :     if (ns->prefix != NULL)

	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN8@xmlXPathNo

; 3491 : 	cur->prefix = xmlStrdup(ns->prefix);

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN8@xmlXPathNo:

; 3492 :     cur->next = (xmlNsPtr) node;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx], eax

; 3493 :     return((xmlNodePtr) cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlXPathNo:

; 3494 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetDupNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFormatNumber
_TEXT	SEGMENT
tv208 = -144						; size = 4
tv313 = -137						; size = 1
tv310 = -136						; size = 4
tv307 = -132						; size = 4
tv204 = -128						; size = 4
tv203 = -124						; size = 4
tv66 = -120						; size = 4
_size$1 = -116						; size = 4
_absolute_value$2 = -112				; size = 8
_after_fraction$3 = -104				; size = 4
_ptr$4 = -100						; size = 4
_fraction_place$5 = -96					; size = 4
_integer_place$6 = -92					; size = 4
_work$7 = -84						; size = 28
_value$8 = -52						; size = 4
_cur$9 = -48						; size = 4
_ptr$10 = -44						; size = 4
_work$11 = -36						; size = 30
_number$ = 8						; size = 8
_buffer$ = 16						; size = 4
_buffersize$ = 20					; size = 4
_xmlXPathFormatNumber PROC				; COMDAT

; 3089 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3090 :     switch (xmlXPathIsInf(number)) {

	sub	esp, 8
	movsd	xmm0, QWORD PTR _number$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], -1
	je	SHORT $LN19@xmlXPathFo
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN17@xmlXPathFo
	jmp	SHORT $LN21@xmlXPathFo
$LN17@xmlXPathFo:

; 3091 :     case 1:
; 3092 : 	if (buffersize > (int)sizeof("Infinity"))

	cmp	DWORD PTR _buffersize$[ebp], 9
	jle	SHORT $LN18@xmlXPathFo

; 3093 : 	    snprintf(buffer, buffersize, "Infinity");

	push	OFFSET ??_C@_08KEBCLIFP@Infinity@
	mov	eax, DWORD PTR _buffersize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_snprintf
	add	esp, 12					; 0000000cH
$LN18@xmlXPathFo:

; 3094 : 	break;

	jmp	$LN2@xmlXPathFo
$LN19@xmlXPathFo:

; 3095 :     case -1:
; 3096 : 	if (buffersize > (int)sizeof("-Infinity"))

	cmp	DWORD PTR _buffersize$[ebp], 10		; 0000000aH
	jle	SHORT $LN20@xmlXPathFo

; 3097 : 	    snprintf(buffer, buffersize, "-Infinity");

	push	OFFSET ??_C@_09BLDCEMOH@?9Infinity@
	mov	edx, DWORD PTR _buffersize$[ebp]
	push	edx
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	_snprintf
	add	esp, 12					; 0000000cH
$LN20@xmlXPathFo:

; 3098 : 	break;

	jmp	$LN2@xmlXPathFo
$LN21@xmlXPathFo:

; 3099 :     default:
; 3100 : 	if (xmlXPathIsNaN(number)) {

	sub	esp, 8
	movsd	xmm0, QWORD PTR _number$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@xmlXPathFo

; 3101 : 	    if (buffersize > (int)sizeof("NaN"))

	cmp	DWORD PTR _buffersize$[ebp], 4
	jle	SHORT $LN24@xmlXPathFo

; 3102 : 		snprintf(buffer, buffersize, "NaN");

	push	OFFSET ??_C@_03ICJPMMHB@NaN@
	mov	ecx, DWORD PTR _buffersize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_snprintf
	add	esp, 12					; 0000000cH
$LN24@xmlXPathFo:

; 3103 : 	} else if (number == 0) {

	jmp	$LN28@xmlXPathFo
$LN22@xmlXPathFo:
	movsd	xmm0, QWORD PTR _number$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN25@xmlXPathFo

; 3104 :             /* Omit sign for negative zero. */
; 3105 : 	    snprintf(buffer, buffersize, "0");

	push	OFFSET ??_C@_01GBGANLPD@0@
	mov	eax, DWORD PTR _buffersize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_snprintf
	add	esp, 12					; 0000000cH
	jmp	$LN28@xmlXPathFo
$LN25@xmlXPathFo:

; 3106 : 	} else if ((number > INT_MIN) && (number < INT_MAX) &&

	movsd	xmm0, QWORD PTR _number$[ebp]
	comisd	xmm0, QWORD PTR __real@c1e0000000000000
	jbe	$LN27@xmlXPathFo
	movsd	xmm0, QWORD PTR __real@41dfffffffc00000
	comisd	xmm0, QWORD PTR _number$[ebp]
	jbe	$LN27@xmlXPathFo
	cvttsd2si edx, QWORD PTR _number$[ebp]
	cvtsi2sd xmm0, edx
	movsd	xmm1, QWORD PTR _number$[ebp]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	$LN27@xmlXPathFo

; 3107 :                    (number == (int) number)) {
; 3108 : 	    char work[30];
; 3109 : 	    char *ptr, *cur;
; 3110 : 	    int value = (int) number;

	cvttsd2si eax, QWORD PTR _number$[ebp]
	mov	DWORD PTR _value$8[ebp], eax

; 3111 : 
; 3112 :             ptr = &buffer[0];

	mov	ecx, 1
	imul	edx, ecx, 0
	add	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _ptr$10[ebp], edx

; 3113 : 	    if (value == 0) {

	cmp	DWORD PTR _value$8[ebp], 0
	jne	SHORT $LN29@xmlXPathFo

; 3114 : 		*ptr++ = '0';

	mov	eax, DWORD PTR _ptr$10[ebp]
	mov	BYTE PTR [eax], 48			; 00000030H
	mov	ecx, DWORD PTR _ptr$10[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$10[ebp], ecx

; 3115 : 	    } else {

	jmp	SHORT $LN5@xmlXPathFo
$LN29@xmlXPathFo:

; 3116 : 		snprintf(work, 29, "%d", value);

	mov	edx, DWORD PTR _value$8[ebp]
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd@
	push	29					; 0000001dH
	lea	eax, DWORD PTR _work$11[ebp]
	push	eax
	call	_snprintf
	add	esp, 16					; 00000010H

; 3117 : 		cur = &work[0];

	mov	ecx, 1
	imul	edx, ecx, 0
	lea	eax, DWORD PTR _work$11[ebp+edx]
	mov	DWORD PTR _cur$9[ebp], eax
$LN4@xmlXPathFo:

; 3118 : 		while ((*cur) && (ptr - buffer < buffersize)) {

	mov	ecx, DWORD PTR _cur$9[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN5@xmlXPathFo
	mov	eax, DWORD PTR _ptr$10[ebp]
	sub	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _buffersize$[ebp]
	jge	SHORT $LN5@xmlXPathFo

; 3119 : 		    *ptr++ = *cur++;

	mov	ecx, DWORD PTR _ptr$10[ebp]
	mov	edx, DWORD PTR _cur$9[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _ptr$10[ebp]
	add	ecx, 1
	mov	DWORD PTR _ptr$10[ebp], ecx
	mov	edx, DWORD PTR _cur$9[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$9[ebp], edx

; 3120 : 		}

	jmp	SHORT $LN4@xmlXPathFo
$LN5@xmlXPathFo:

; 3121 : 	    }
; 3122 : 	    if (ptr - buffer < buffersize) {

	mov	eax, DWORD PTR _ptr$10[ebp]
	sub	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _buffersize$[ebp]
	jge	SHORT $LN31@xmlXPathFo

; 3123 : 		*ptr = 0;

	mov	ecx, DWORD PTR _ptr$10[ebp]
	mov	BYTE PTR [ecx], 0
	jmp	SHORT $LN33@xmlXPathFo
$LN31@xmlXPathFo:

; 3124 : 	    } else if (buffersize > 0) {

	cmp	DWORD PTR _buffersize$[ebp], 0
	jle	SHORT $LN33@xmlXPathFo

; 3125 : 		ptr--;

	mov	edx, DWORD PTR _ptr$10[ebp]
	sub	edx, 1
	mov	DWORD PTR _ptr$10[ebp], edx

; 3126 : 		*ptr = 0;

	mov	eax, DWORD PTR _ptr$10[ebp]
	mov	BYTE PTR [eax], 0
$LN33@xmlXPathFo:

; 3127 : 	    }
; 3128 : 	} else {

	jmp	$LN28@xmlXPathFo
$LN27@xmlXPathFo:

; 3129 : 	    /*
; 3130 : 	      For the dimension of work,
; 3131 : 	          DBL_DIG is number of significant digits
; 3132 : 		  EXPONENT is only needed for "scientific notation"
; 3133 : 	          3 is sign, decimal point, and terminating zero
; 3134 : 		  LOWER_DOUBLE_EXP is max number of leading zeroes in fraction
; 3135 : 	      Note that this dimension is slightly (a few characters)
; 3136 : 	      larger than actually necessary.
; 3137 : 	    */
; 3138 : 	    char work[DBL_DIG + EXPONENT_DIGITS + 3 + LOWER_DOUBLE_EXP];
; 3139 : 	    int integer_place, fraction_place;
; 3140 : 	    char *ptr;
; 3141 : 	    char *after_fraction;
; 3142 : 	    double absolute_value;
; 3143 : 	    int size;
; 3144 : 
; 3145 : 	    absolute_value = fabs(number);

	movsd	xmm0, QWORD PTR _number$[ebp]
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	QWORD PTR _absolute_value$2[ebp], xmm0

; 3146 : 
; 3147 : 	    /*
; 3148 : 	     * First choose format - scientific or regular floating point.
; 3149 : 	     * In either case, result is in work, and after_fraction points
; 3150 : 	     * just past the fractional part.
; 3151 : 	    */
; 3152 : 	    if ( ((absolute_value > UPPER_DOUBLE) ||
; 3153 : 		  (absolute_value < LOWER_DOUBLE)) &&

	movsd	xmm0, QWORD PTR _absolute_value$2[ebp]
	comisd	xmm0, QWORD PTR __real@41cdcd6500000000
	ja	SHORT $LN36@xmlXPathFo
	movsd	xmm0, QWORD PTR __real@3ee4f8b588e368f1
	comisd	xmm0, QWORD PTR _absolute_value$2[ebp]
	jbe	SHORT $LN34@xmlXPathFo
$LN36@xmlXPathFo:
	movsd	xmm0, QWORD PTR _absolute_value$2[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN34@xmlXPathFo

; 3154 : 		 (absolute_value != 0.0) ) {
; 3155 : 		/* Use scientific notation */
; 3156 : 		integer_place = DBL_DIG + EXPONENT_DIGITS + 1;

	mov	DWORD PTR _integer_place$6[ebp], 21	; 00000015H

; 3157 : 		fraction_place = DBL_DIG - 1;

	mov	DWORD PTR _fraction_place$5[ebp], 14	; 0000000eH

; 3158 : 		size = snprintf(work, sizeof(work),"%*.*e",

	sub	esp, 8
	movsd	xmm0, QWORD PTR _number$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _fraction_place$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _integer_place$6[ebp]
	push	edx
	push	OFFSET ??_C@_05PPJAHJKF@?$CF?$CK?4?$CKe@
	push	28					; 0000001cH
	lea	eax, DWORD PTR _work$7[ebp]
	push	eax
	call	_snprintf
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _size$1[ebp], eax
$LN6@xmlXPathFo:

; 3159 : 			 integer_place, fraction_place, number);
; 3160 : 		while ((size > 0) && (work[size] != 'e')) size--;

	cmp	DWORD PTR _size$1[ebp], 0
	jle	SHORT $LN7@xmlXPathFo
	mov	ecx, DWORD PTR _size$1[ebp]
	movsx	edx, BYTE PTR _work$7[ebp+ecx]
	cmp	edx, 101				; 00000065H
	je	SHORT $LN7@xmlXPathFo
	mov	eax, DWORD PTR _size$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$1[ebp], eax
	jmp	SHORT $LN6@xmlXPathFo
$LN7@xmlXPathFo:

; 3161 : 
; 3162 : 	    }

	jmp	SHORT $LN35@xmlXPathFo
$LN34@xmlXPathFo:

; 3163 : 	    else {
; 3164 : 		/* Use regular notation */
; 3165 : 		if (absolute_value > 0.0) {

	movsd	xmm0, QWORD PTR _absolute_value$2[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN37@xmlXPathFo

; 3166 : 		    integer_place = (int)log10(absolute_value);

	movsd	xmm0, QWORD PTR _absolute_value$2[ebp]
	call	__libm_sse2_log10_precise
	cvttsd2si ecx, xmm0
	mov	DWORD PTR _integer_place$6[ebp], ecx

; 3167 : 		    if (integer_place > 0)

	cmp	DWORD PTR _integer_place$6[ebp], 0
	jle	SHORT $LN39@xmlXPathFo

; 3168 : 		        fraction_place = DBL_DIG - integer_place - 1;

	mov	edx, 15					; 0000000fH
	sub	edx, DWORD PTR _integer_place$6[ebp]
	sub	edx, 1
	mov	DWORD PTR _fraction_place$5[ebp], edx
	jmp	SHORT $LN40@xmlXPathFo
$LN39@xmlXPathFo:

; 3169 : 		    else
; 3170 : 		        fraction_place = DBL_DIG - integer_place;

	mov	eax, 15					; 0000000fH
	sub	eax, DWORD PTR _integer_place$6[ebp]
	mov	DWORD PTR _fraction_place$5[ebp], eax
$LN40@xmlXPathFo:

; 3171 : 		} else {

	jmp	SHORT $LN38@xmlXPathFo
$LN37@xmlXPathFo:

; 3172 : 		    fraction_place = 1;

	mov	DWORD PTR _fraction_place$5[ebp], 1
$LN38@xmlXPathFo:

; 3173 : 		}
; 3174 : 		size = snprintf(work, sizeof(work), "%0.*f",

	sub	esp, 8
	movsd	xmm0, QWORD PTR _number$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _fraction_place$5[ebp]
	push	ecx
	push	OFFSET ??_C@_05POONKFEF@?$CF0?4?$CKf@
	push	28					; 0000001cH
	lea	edx, DWORD PTR _work$7[ebp]
	push	edx
	call	_snprintf
	add	esp, 24					; 00000018H
	mov	DWORD PTR _size$1[ebp], eax
$LN35@xmlXPathFo:

; 3175 : 				fraction_place, number);
; 3176 : 	    }
; 3177 : 
; 3178 : 	    /* Remove leading spaces sometimes inserted by snprintf */
; 3179 : 	    while (work[0] == ' ') {

	mov	eax, 1
	imul	ecx, eax, 0
	movsx	edx, BYTE PTR _work$7[ebp+ecx]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN9@xmlXPathFo

; 3180 : 	        for (ptr = &work[0];(ptr[0] = ptr[1]);ptr++);

	mov	eax, 1
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _work$7[ebp+ecx]
	mov	DWORD PTR _ptr$4[ebp], edx
	jmp	SHORT $LN12@xmlXPathFo
$LN10@xmlXPathFo:
	mov	eax, DWORD PTR _ptr$4[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$4[ebp], eax
$LN12@xmlXPathFo:
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, 1
	imul	eax, edx, 0
	mov	edx, DWORD PTR _ptr$4[ebp]
	mov	esi, DWORD PTR _ptr$4[ebp]
	mov	cl, BYTE PTR [esi+ecx]
	mov	BYTE PTR [edx+eax], cl
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ptr$4[ebp]
	movsx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN11@xmlXPathFo
	jmp	SHORT $LN10@xmlXPathFo
$LN11@xmlXPathFo:

; 3181 : 		size--;

	mov	eax, DWORD PTR _size$1[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$1[ebp], eax

; 3182 : 	    }

	jmp	SHORT $LN35@xmlXPathFo
$LN9@xmlXPathFo:

; 3183 : 
; 3184 : 	    /* Remove fractional trailing zeroes */
; 3185 : 	    after_fraction = work + size;

	mov	ecx, DWORD PTR _size$1[ebp]
	lea	edx, DWORD PTR _work$7[ebp+ecx]
	mov	DWORD PTR _after_fraction$3[ebp], edx

; 3186 : 	    ptr = after_fraction;

	mov	eax, DWORD PTR _after_fraction$3[ebp]
	mov	DWORD PTR _ptr$4[ebp], eax
$LN13@xmlXPathFo:

; 3187 : 	    while (*(--ptr) == '0')

	mov	ecx, DWORD PTR _ptr$4[ebp]
	sub	ecx, 1
	mov	DWORD PTR _ptr$4[ebp], ecx
	mov	edx, DWORD PTR _ptr$4[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN14@xmlXPathFo

; 3188 : 		;

	jmp	SHORT $LN13@xmlXPathFo
$LN14@xmlXPathFo:

; 3189 : 	    if (*ptr != '.')

	mov	ecx, DWORD PTR _ptr$4[ebp]
	movsx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	je	SHORT $LN41@xmlXPathFo

; 3190 : 	        ptr++;

	mov	eax, DWORD PTR _ptr$4[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$4[ebp], eax
$LN41@xmlXPathFo:

; 3191 : 	    while ((*ptr++ = *after_fraction++) != 0);

	mov	ecx, DWORD PTR _ptr$4[ebp]
	mov	edx, DWORD PTR _after_fraction$3[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _ptr$4[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv203[ebp], edx
	mov	eax, DWORD PTR _ptr$4[ebp]
	add	eax, 1
	mov	DWORD PTR _ptr$4[ebp], eax
	mov	ecx, DWORD PTR _after_fraction$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _after_fraction$3[ebp], ecx
	cmp	DWORD PTR tv203[ebp], 0
	je	SHORT $LN44@xmlXPathFo
	mov	DWORD PTR tv204[ebp], 1
	jmp	SHORT $LN45@xmlXPathFo
$LN44@xmlXPathFo:
	mov	DWORD PTR tv204[ebp], 0
$LN45@xmlXPathFo:
	cmp	DWORD PTR tv204[ebp], 0
	je	SHORT $LN16@xmlXPathFo
	jmp	SHORT $LN41@xmlXPathFo
$LN16@xmlXPathFo:

; 3192 : 
; 3193 : 	    /* Finally copy result back to caller */
; 3194 : 	    size = strlen(work) + 1;

	lea	edx, DWORD PTR _work$7[ebp]
	mov	DWORD PTR tv307[ebp], edx
	mov	eax, DWORD PTR tv307[ebp]
	add	eax, 1
	mov	DWORD PTR tv310[ebp], eax
$LL46@xmlXPathFo:
	mov	ecx, DWORD PTR tv307[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv313[ebp], dl
	add	DWORD PTR tv307[ebp], 1
	cmp	BYTE PTR tv313[ebp], 0
	jne	SHORT $LL46@xmlXPathFo
	mov	eax, DWORD PTR tv307[ebp]
	sub	eax, DWORD PTR tv310[ebp]
	mov	DWORD PTR tv208[ebp], eax
	mov	ecx, DWORD PTR tv208[ebp]
	add	ecx, 1
	mov	DWORD PTR _size$1[ebp], ecx

; 3195 : 	    if (size > buffersize) {

	mov	edx, DWORD PTR _size$1[ebp]
	cmp	edx, DWORD PTR _buffersize$[ebp]
	jle	SHORT $LN42@xmlXPathFo

; 3196 : 		work[buffersize - 1] = 0;

	mov	eax, DWORD PTR _buffersize$[ebp]
	mov	BYTE PTR _work$7[ebp+eax-1], 0

; 3197 : 		size = buffersize;

	mov	ecx, DWORD PTR _buffersize$[ebp]
	mov	DWORD PTR _size$1[ebp], ecx
$LN42@xmlXPathFo:

; 3198 : 	    }
; 3199 : 	    memmove(buffer, work, size);

	mov	edx, DWORD PTR _size$1[ebp]
	push	edx
	lea	eax, DWORD PTR _work$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_memmove
	add	esp, 12					; 0000000cH
$LN28@xmlXPathFo:
$LN2@xmlXPathFo:

; 3200 : 	}
; 3201 : 	break;
; 3202 :     }
; 3203 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN50@xmlXPathFo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 144				; 00000090H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN50@xmlXPathFo:
	DD	2
	DD	$LN49@xmlXPathFo
$LN49@xmlXPathFo:
	DD	-36					; ffffffdcH
	DD	30					; 0000001eH
	DD	$LN47@xmlXPathFo
	DD	-84					; ffffffacH
	DD	28					; 0000001cH
	DD	$LN48@xmlXPathFo
$LN48@xmlXPathFo:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	0
$LN47@xmlXPathFo:
	DB	119					; 00000077H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	107					; 0000006bH
	DB	0
_xmlXPathFormatNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathPopFrame
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_frame$ = 12						; size = 4
_xmlXPathPopFrame PROC					; COMDAT

; 2801 : xmlXPathPopFrame(xmlXPathParserContextPtr ctxt, int frame) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2802 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathPo

; 2803 :         return;

	jmp	SHORT $LN1@xmlXPathPo
$LN2@xmlXPathPo:

; 2804 :     if (ctxt->valueNr < ctxt->valueFrame) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN3@xmlXPathPo

; 2805 :         xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);

	push	23					; 00000017H
	push	2805					; 00000af5H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPatherror
	add	esp, 16					; 00000010H
$LN3@xmlXPathPo:

; 2806 :     }
; 2807 :     ctxt->valueFrame = frame;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _frame$[ebp]
	mov	DWORD PTR [ecx+44], edx
$LN1@xmlXPathPo:

; 2808 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathPopFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathSetFrame
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathSetFrame PROC					; COMDAT

; 2783 : xmlXPathSetFrame(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2784 :     int ret;
; 2785 : 
; 2786 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathSe

; 2787 :         return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathSe
$LN2@xmlXPathSe:

; 2788 :     ret = ctxt->valueFrame;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _ret$[ebp], ecx

; 2789 :     ctxt->valueFrame = ctxt->valueNr;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+44], ecx

; 2790 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathSe:

; 2791 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathSetFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheConvertNumber
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheConvertNumber PROC			; COMDAT

; 2756 : xmlXPathCacheConvertNumber(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2757 :     xmlXPathObjectPtr ret;
; 2758 : 
; 2759 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN2@xmlXPathCa

; 2760 : 	return(xmlXPathCacheNewFloat(ctxt, 0.0));

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 2761 :     if (val->type == XPATH_NUMBER)

	mov	ecx, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	SHORT $LN3@xmlXPathCa

; 2762 : 	return(val);

	mov	eax, DWORD PTR _val$[ebp]
	jmp	SHORT $LN1@xmlXPathCa
$LN3@xmlXPathCa:

; 2763 :     ret = xmlXPathCacheNewFloat(ctxt, xmlXPathCastToNumber(val));

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlXPathCastToNumber
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 2764 :     xmlXPathReleaseObject(ctxt, val);

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 2765 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCa:

; 2766 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheConvertNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheConvertBoolean
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheConvertBoolean PROC			; COMDAT

; 2732 : xmlXPathCacheConvertBoolean(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2733 :     xmlXPathObjectPtr ret;
; 2734 : 
; 2735 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN2@xmlXPathCa

; 2736 : 	return(xmlXPathCacheNewBoolean(ctxt, 0));

	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 2737 :     if (val->type == XPATH_BOOLEAN)

	mov	ecx, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [ecx], 2
	jne	SHORT $LN3@xmlXPathCa

; 2738 : 	return(val);

	mov	eax, DWORD PTR _val$[ebp]
	jmp	SHORT $LN1@xmlXPathCa
$LN3@xmlXPathCa:

; 2739 :     ret = xmlXPathCacheNewBoolean(ctxt, xmlXPathCastToBoolean(val));

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlXPathCastToBoolean
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 2740 :     xmlXPathReleaseObject(ctxt, val);

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 2741 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCa:

; 2742 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheConvertBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheObjectCopy
_TEXT	SEGMENT
tv69 = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheObjectCopy PROC				; COMDAT

; 2698 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2699 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN4@xmlXPathCa

; 2700 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathCa
$LN4@xmlXPathCa:

; 2701 : 
; 2702 :     if (XP_HAS_CACHE(ctxt)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN2@xmlXPathCa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	$LN2@xmlXPathCa

; 2703 : 	switch (val->type) {

	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv69[ebp], edx
	mov	eax, DWORD PTR tv69[ebp]
	sub	eax, 1
	mov	DWORD PTR tv69[ebp], eax
	cmp	DWORD PTR tv69[ebp], 3
	ja	SHORT $LN10@xmlXPathCa
	mov	ecx, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN12@xmlXPathCa[ecx*4]
$LN6@xmlXPathCa:

; 2704 : 	    case XPATH_NODESET:
; 2705 : 		return(xmlXPathCacheWrapNodeSet(ctxt,

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	call	_xmlXPathNodeSetMerge
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCacheWrapNodeSet
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCa
$LN7@xmlXPathCa:

; 2706 : 		    xmlXPathNodeSetMerge(NULL, val->nodesetval)));
; 2707 : 	    case XPATH_STRING:
; 2708 : 		return(xmlXPathCacheNewString(ctxt, val->stringval));

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCacheNewString
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCa
$LN8@xmlXPathCa:

; 2709 : 	    case XPATH_BOOLEAN:
; 2710 : 		return(xmlXPathCacheNewBoolean(ctxt, val->boolval));

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCa
$LN9@xmlXPathCa:

; 2711 : 	    case XPATH_NUMBER:
; 2712 : 		return(xmlXPathCacheNewFloat(ctxt, val->floatval));

	mov	edx, DWORD PTR _val$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlXPathCa
$LN10@xmlXPathCa:
$LN2@xmlXPathCa:

; 2713 : 	    default:
; 2714 : 		break;
; 2715 : 	}
; 2716 :     }
; 2717 :     return(xmlXPathObjectCopy(val));

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_xmlXPathObjectCopy
	add	esp, 4
$LN1@xmlXPathCa:

; 2718 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@xmlXPathCa:
	DD	$LN6@xmlXPathCa
	DD	$LN8@xmlXPathCa
	DD	$LN9@xmlXPathCa
	DD	$LN7@xmlXPathCa
_xmlXPathCacheObjectCopy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheConvertString
_TEXT	SEGMENT
tv69 = -8						; size = 4
_res$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheConvertString PROC			; COMDAT

; 2649 : xmlXPathCacheConvertString(xmlXPathContextPtr ctxt, xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2650 :     xmlChar *res = NULL;

	mov	DWORD PTR _res$[ebp], 0

; 2651 : 
; 2652 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN4@xmlXPathCa

; 2653 : 	return(xmlXPathCacheNewCString(ctxt, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCacheNewCString
	add	esp, 8
	jmp	$LN1@xmlXPathCa
$LN4@xmlXPathCa:

; 2654 : 
; 2655 :     switch (val->type) {

	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv69[ebp], edx
	mov	eax, DWORD PTR tv69[ebp]
	sub	eax, 1
	mov	DWORD PTR tv69[ebp], eax
	cmp	DWORD PTR tv69[ebp], 8
	ja	$LN2@xmlXPathCa
	mov	ecx, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN13@xmlXPathCa[ecx*4]

; 2656 :     case XPATH_UNDEFINED:
; 2657 : #ifdef DEBUG_EXPR
; 2658 : 	xmlGenericError(xmlGenericErrorContext, "STRING: undefined\n");
; 2659 : #endif
; 2660 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN6@xmlXPathCa:

; 2661 :     case XPATH_NODESET:
; 2662 :     case XPATH_XSLT_TREE:
; 2663 : 	res = xmlXPathCastNodeSetToString(val->nodesetval);

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathCastNodeSetToString
	add	esp, 4
	mov	DWORD PTR _res$[ebp], eax

; 2664 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN7@xmlXPathCa:

; 2665 :     case XPATH_STRING:
; 2666 : 	return(val);

	mov	eax, DWORD PTR _val$[ebp]
	jmp	$LN1@xmlXPathCa
$LN8@xmlXPathCa:

; 2667 :     case XPATH_BOOLEAN:
; 2668 : 	res = xmlXPathCastBooleanToString(val->boolval);

	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlXPathCastBooleanToString
	add	esp, 4
	mov	DWORD PTR _res$[ebp], eax

; 2669 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN9@xmlXPathCa:

; 2670 :     case XPATH_NUMBER:
; 2671 : 	res = xmlXPathCastNumberToString(val->floatval);

	mov	eax, DWORD PTR _val$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathCastNumberToString
	add	esp, 8
	mov	DWORD PTR _res$[ebp], eax

; 2672 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN10@xmlXPathCa:

; 2673 :     case XPATH_USERS:
; 2674 :     case XPATH_POINT:
; 2675 :     case XPATH_RANGE:
; 2676 :     case XPATH_LOCATIONSET:
; 2677 : 	TODO;

	mov	esi, esp
	push	2677					; 00000a75H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlXPathCa:

; 2678 : 	break;
; 2679 :     }
; 2680 :     xmlXPathReleaseObject(ctxt, val);

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 2681 :     if (res == NULL)

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN11@xmlXPathCa

; 2682 : 	return(xmlXPathCacheNewCString(ctxt, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCacheNewCString
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCa
$LN11@xmlXPathCa:

; 2683 :     return(xmlXPathCacheWrapString(ctxt, res));

	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCacheWrapString
	add	esp, 8
$LN1@xmlXPathCa:

; 2684 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@xmlXPathCa:
	DD	$LN6@xmlXPathCa
	DD	$LN8@xmlXPathCa
	DD	$LN9@xmlXPathCa
	DD	$LN7@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN6@xmlXPathCa
_xmlXPathCacheConvertString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheNewFloat
_TEXT	SEGMENT
tv95 = -20						; size = 4
tv79 = -16						; size = 4
_ret$1 = -12						; size = 4
_ret$2 = -8						; size = 4
_cache$3 = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 8
_xmlXPathCacheNewFloat PROC				; COMDAT

; 2600 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2601 :      if ((ctxt != NULL) && (ctxt->cache)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN5@xmlXPathCa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	$LN5@xmlXPathCa

; 2602 : 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR _cache$3[ebp], edx

; 2603 : 
; 2604 : 	if ((cache->numberObjs != NULL) &&

	mov	eax, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@xmlXPathCa
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@xmlXPathCa

; 2605 : 	    (cache->numberObjs->number != 0))
; 2606 : 	{
; 2607 : 	    xmlXPathObjectPtr ret;
; 2608 : 
; 2609 : 	    ret = (xmlXPathObjectPtr)

	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv79[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$2[ebp], ecx

; 2610 : 		cache->numberObjs->items[--cache->numberObjs->number];
; 2611 : 	    ret->type = XPATH_NUMBER;

	mov	edx, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [edx], 3

; 2612 : 	    ret->floatval = val;

	mov	eax, DWORD PTR _ret$2[ebp]
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [eax+16], xmm0

; 2613 : #ifdef XP_DEBUG_OBJ_USAGE
; 2614 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_NUMBER);
; 2615 : #endif
; 2616 : 	    return(ret);

	mov	eax, DWORD PTR _ret$2[ebp]
	jmp	SHORT $LN1@xmlXPathCa
	jmp	SHORT $LN5@xmlXPathCa
$LN3@xmlXPathCa:

; 2617 : 	} else if ((cache->miscObjs != NULL) &&

	mov	ecx, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@xmlXPathCa
	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@xmlXPathCa

; 2618 : 	    (cache->miscObjs->number != 0))
; 2619 : 	{
; 2620 : 	    xmlXPathObjectPtr ret;
; 2621 : 
; 2622 : 	    ret = (xmlXPathObjectPtr)

	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR tv95[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv95[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _ret$1[ebp], edx

; 2623 : 		cache->miscObjs->items[--cache->miscObjs->number];
; 2624 : 
; 2625 : 	    ret->type = XPATH_NUMBER;

	mov	eax, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [eax], 3

; 2626 : 	    ret->floatval = val;

	mov	ecx, DWORD PTR _ret$1[ebp]
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [ecx+16], xmm0

; 2627 : #ifdef XP_DEBUG_OBJ_USAGE
; 2628 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_NUMBER);
; 2629 : #endif
; 2630 : 	    return(ret);

	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlXPathCa
$LN5@xmlXPathCa:

; 2631 : 	}
; 2632 :     }
; 2633 :     return(xmlXPathNewFloat(val));

	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathNewFloat
	add	esp, 8
$LN1@xmlXPathCa:

; 2634 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheNewFloat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheNewBoolean
_TEXT	SEGMENT
tv135 = -28						; size = 4
tv129 = -24						; size = 4
tv85 = -20						; size = 4
tv79 = -16						; size = 4
_ret$1 = -12						; size = 4
_ret$2 = -8						; size = 4
_cache$3 = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheNewBoolean PROC				; COMDAT

; 2552 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2553 :     if ((ctxt != NULL) && (ctxt->cache)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN2@xmlXPathCa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	$LN2@xmlXPathCa

; 2554 : 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR _cache$3[ebp], edx

; 2555 : 
; 2556 : 	if ((cache->booleanObjs != NULL) &&

	mov	eax, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@xmlXPathCa
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@xmlXPathCa

; 2557 : 	    (cache->booleanObjs->number != 0))
; 2558 : 	{
; 2559 : 	    xmlXPathObjectPtr ret;
; 2560 : 
; 2561 : 	    ret = (xmlXPathObjectPtr)

	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv79[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$2[ebp], ecx

; 2562 : 		cache->booleanObjs->items[--cache->booleanObjs->number];
; 2563 : 	    ret->type = XPATH_BOOLEAN;

	mov	edx, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [edx], 2

; 2564 : 	    ret->boolval = (val != 0);

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN7@xmlXPathCa
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN8@xmlXPathCa
$LN7@xmlXPathCa:
	mov	DWORD PTR tv85[ebp], 0
$LN8@xmlXPathCa:
	mov	eax, DWORD PTR _ret$2[ebp]
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2565 : #ifdef XP_DEBUG_OBJ_USAGE
; 2566 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_BOOLEAN);
; 2567 : #endif
; 2568 : 	    return(ret);

	mov	eax, DWORD PTR _ret$2[ebp]
	jmp	SHORT $LN1@xmlXPathCa
	jmp	SHORT $LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 2569 : 	} else if ((cache->miscObjs != NULL) &&

	mov	edx, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN2@xmlXPathCa
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@xmlXPathCa

; 2570 : 	    (cache->miscObjs->number != 0))
; 2571 : 	{
; 2572 : 	    xmlXPathObjectPtr ret;
; 2573 : 
; 2574 : 	    ret = (xmlXPathObjectPtr)

	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv129[ebp], ecx
	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR tv129[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _ret$1[ebp], eax

; 2575 : 		cache->miscObjs->items[--cache->miscObjs->number];
; 2576 : 
; 2577 : 	    ret->type = XPATH_BOOLEAN;

	mov	ecx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [ecx], 2

; 2578 : 	    ret->boolval = (val != 0);

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN9@xmlXPathCa
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN10@xmlXPathCa
$LN9@xmlXPathCa:
	mov	DWORD PTR tv135[ebp], 0
$LN10@xmlXPathCa:
	mov	edx, DWORD PTR _ret$1[ebp]
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR [edx+8], eax

; 2579 : #ifdef XP_DEBUG_OBJ_USAGE
; 2580 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_BOOLEAN);
; 2581 : #endif
; 2582 : 	    return(ret);

	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 2583 : 	}
; 2584 :     }
; 2585 :     return(xmlXPathNewBoolean(val));

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_xmlXPathNewBoolean
	add	esp, 4
$LN1@xmlXPathCa:

; 2586 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheNewBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheNewString
_TEXT	SEGMENT
tv133 = -20						; size = 4
tv79 = -16						; size = 4
_ret$1 = -12						; size = 4
_ret$2 = -8						; size = 4
_cache$3 = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheNewString PROC				; COMDAT

; 2498 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2499 :     if ((ctxt != NULL) && (ctxt->cache)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN2@xmlXPathCa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	$LN2@xmlXPathCa

; 2500 : 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR _cache$3[ebp], edx

; 2501 : 
; 2502 : 	if ((cache->stringObjs != NULL) &&

	mov	eax, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@xmlXPathCa
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@xmlXPathCa

; 2503 : 	    (cache->stringObjs->number != 0))
; 2504 : 	{
; 2505 : 	    xmlXPathObjectPtr ret;
; 2506 : 
; 2507 : 	    ret = (xmlXPathObjectPtr)

	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv79[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$2[ebp], ecx

; 2508 : 		cache->stringObjs->items[--cache->stringObjs->number];
; 2509 : 	    ret->type = XPATH_STRING;

	mov	edx, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [edx], 4

; 2510 : 	    if (val != NULL)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN5@xmlXPathCa

; 2511 : 		ret->stringval = xmlStrdup(val);

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [ecx+24], eax
	jmp	SHORT $LN6@xmlXPathCa
$LN5@xmlXPathCa:

; 2512 : 	    else
; 2513 : 		ret->stringval = xmlStrdup((const xmlChar *)"");

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [edx+24], eax
$LN6@xmlXPathCa:

; 2514 : #ifdef XP_DEBUG_OBJ_USAGE
; 2515 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_STRING);
; 2516 : #endif
; 2517 : 	    return(ret);

	mov	eax, DWORD PTR _ret$2[ebp]
	jmp	$LN1@xmlXPathCa
	jmp	SHORT $LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 2518 : 	} else if ((cache->miscObjs != NULL) &&

	mov	eax, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@xmlXPathCa
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN2@xmlXPathCa

; 2519 : 	    (cache->miscObjs->number != 0))
; 2520 : 	{
; 2521 : 	    xmlXPathObjectPtr ret;
; 2522 : 
; 2523 : 	    ret = (xmlXPathObjectPtr)

	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv133[ebp], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv133[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$1[ebp], ecx

; 2524 : 		cache->miscObjs->items[--cache->miscObjs->number];
; 2525 : 
; 2526 : 	    ret->type = XPATH_STRING;

	mov	edx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [edx], 4

; 2527 : 	    if (val != NULL)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN8@xmlXPathCa

; 2528 : 		ret->stringval = xmlStrdup(val);

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [ecx+24], eax
	jmp	SHORT $LN9@xmlXPathCa
$LN8@xmlXPathCa:

; 2529 : 	    else
; 2530 : 		ret->stringval = xmlStrdup((const xmlChar *)"");

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [edx+24], eax
$LN9@xmlXPathCa:

; 2531 : #ifdef XP_DEBUG_OBJ_USAGE
; 2532 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_STRING);
; 2533 : #endif
; 2534 : 	    return(ret);

	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 2535 : 	}
; 2536 :     }
; 2537 :     return(xmlXPathNewString(val));

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_xmlXPathNewString
	add	esp, 4
$LN1@xmlXPathCa:

; 2538 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheNewString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheNewCString
_TEXT	SEGMENT
tv129 = -20						; size = 4
tv79 = -16						; size = 4
_ret$1 = -12						; size = 4
_ret$2 = -8						; size = 4
_cache$3 = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheNewCString PROC				; COMDAT

; 2449 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2450 :     if ((ctxt != NULL) && (ctxt->cache)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN2@xmlXPathCa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	$LN2@xmlXPathCa

; 2451 : 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR _cache$3[ebp], edx

; 2452 : 
; 2453 : 	if ((cache->stringObjs != NULL) &&

	mov	eax, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@xmlXPathCa
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@xmlXPathCa

; 2454 : 	    (cache->stringObjs->number != 0))
; 2455 : 	{
; 2456 : 	    xmlXPathObjectPtr ret;
; 2457 : 
; 2458 : 	    ret = (xmlXPathObjectPtr)

	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv79[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$2[ebp], ecx

; 2459 : 		cache->stringObjs->items[--cache->stringObjs->number];
; 2460 : 
; 2461 : 	    ret->type = XPATH_STRING;

	mov	edx, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [edx], 4

; 2462 : 	    ret->stringval = xmlStrdup(BAD_CAST val);

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [ecx+24], eax

; 2463 : #ifdef XP_DEBUG_OBJ_USAGE
; 2464 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_STRING);
; 2465 : #endif
; 2466 : 	    return(ret);

	mov	eax, DWORD PTR _ret$2[ebp]
	jmp	SHORT $LN1@xmlXPathCa
	jmp	SHORT $LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 2467 : 	} else if ((cache->miscObjs != NULL) &&

	mov	edx, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN2@xmlXPathCa
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@xmlXPathCa

; 2468 : 	    (cache->miscObjs->number != 0))
; 2469 : 	{
; 2470 : 	    xmlXPathObjectPtr ret;
; 2471 : 
; 2472 : 	    ret = (xmlXPathObjectPtr)

	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv129[ebp], ecx
	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR tv129[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR tv129[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _ret$1[ebp], eax

; 2473 : 		cache->miscObjs->items[--cache->miscObjs->number];
; 2474 : 
; 2475 : 	    ret->type = XPATH_STRING;

	mov	ecx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [ecx], 4

; 2476 : 	    ret->stringval = xmlStrdup(BAD_CAST val);

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [ecx+24], eax

; 2477 : #ifdef XP_DEBUG_OBJ_USAGE
; 2478 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_STRING);
; 2479 : #endif
; 2480 : 	    return(ret);

	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 2481 : 	}
; 2482 :     }
; 2483 :     return(xmlXPathNewCString(val));

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlXPathNewCString
	add	esp, 4
$LN1@xmlXPathCa:

; 2484 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheNewCString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheNewNodeSet
_TEXT	SEGMENT
tv142 = -20						; size = 4
tv79 = -16						; size = 4
_ret$1 = -12						; size = 4
_ret$2 = -8						; size = 4
_cache$3 = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheNewNodeSet PROC				; COMDAT

; 2380 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2381 :     if ((ctxt != NULL) && (ctxt->cache)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN2@xmlXPathCa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	$LN2@xmlXPathCa

; 2382 : 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR _cache$3[ebp], edx

; 2383 : 
; 2384 : 	if ((cache->nodesetObjs != NULL) &&

	mov	eax, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [eax], 0
	je	$LN3@xmlXPathCa
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 0
	je	$LN3@xmlXPathCa

; 2385 : 	    (cache->nodesetObjs->number != 0))
; 2386 : 	{
; 2387 : 	    xmlXPathObjectPtr ret;
; 2388 : 	    /*
; 2389 : 	    * Use the nodset-cache.
; 2390 : 	    */
; 2391 : 	    ret = (xmlXPathObjectPtr)

	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv79[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$2[ebp], ecx

; 2392 : 		cache->nodesetObjs->items[--cache->nodesetObjs->number];
; 2393 : 	    ret->type = XPATH_NODESET;

	mov	edx, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [edx], 1

; 2394 : 	    ret->boolval = 0;

	mov	eax, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [eax+8], 0

; 2395 : 	    if (val) {

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN5@xmlXPathCa

; 2396 : 		if ((ret->nodesetval->nodeMax == 0) ||

	mov	ecx, DWORD PTR _ret$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN8@xmlXPathCa
	mov	eax, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlXPathCa
$LN8@xmlXPathCa:

; 2397 : 		    (val->type == XML_NAMESPACE_DECL))
; 2398 : 		{
; 2399 : 		    xmlXPathNodeSetAddUnique(ret->nodesetval, val);

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8

; 2400 : 		} else {

	jmp	SHORT $LN5@xmlXPathCa
$LN6@xmlXPathCa:

; 2401 : 		    ret->nodesetval->nodeTab[0] = val;

	mov	ecx, DWORD PTR _ret$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 2402 : 		    ret->nodesetval->nodeNr = 1;

	mov	ecx, DWORD PTR _ret$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx], 1
$LN5@xmlXPathCa:

; 2403 : 		}
; 2404 : 	    }
; 2405 : #ifdef XP_DEBUG_OBJ_USAGE
; 2406 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_NODESET);
; 2407 : #endif
; 2408 : 	    return(ret);

	mov	eax, DWORD PTR _ret$2[ebp]
	jmp	$LN1@xmlXPathCa
	jmp	$LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 2409 : 	} else if ((cache->miscObjs != NULL) &&

	mov	eax, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN2@xmlXPathCa
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN2@xmlXPathCa

; 2410 : 	    (cache->miscObjs->number != 0))
; 2411 : 	{
; 2412 : 	    xmlXPathObjectPtr ret;
; 2413 : 	    /*
; 2414 : 	    * Fallback to misc-cache.
; 2415 : 	    */
; 2416 : 
; 2417 : 	    ret = (xmlXPathObjectPtr)

	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv142[ebp], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR tv142[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv142[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$1[ebp], ecx

; 2418 : 		cache->miscObjs->items[--cache->miscObjs->number];
; 2419 : 
; 2420 : 	    ret->type = XPATH_NODESET;

	mov	edx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [edx], 1

; 2421 : 	    ret->boolval = 0;

	mov	eax, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [eax+8], 0

; 2422 : 	    ret->nodesetval = xmlXPathNodeSetCreate(val);

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	edx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [edx+4], eax

; 2423 : 	    if (ret->nodesetval == NULL) {

	mov	eax, DWORD PTR _ret$1[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN10@xmlXPathCa

; 2424 : 		ctxt->lastError.domain = XML_FROM_XPATH;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+136], 12			; 0000000cH

; 2425 : 		ctxt->lastError.code = XML_ERR_NO_MEMORY;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+140], 2

; 2426 : 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCa
$LN10@xmlXPathCa:

; 2427 : 	    }
; 2428 : #ifdef XP_DEBUG_OBJ_USAGE
; 2429 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_NODESET);
; 2430 : #endif
; 2431 : 	    return(ret);

	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 2432 : 	}
; 2433 :     }
; 2434 :     return(xmlXPathNewNodeSet(val));

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_xmlXPathNewNodeSet
	add	esp, 4
$LN1@xmlXPathCa:

; 2435 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheNewNodeSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheWrapString
_TEXT	SEGMENT
tv95 = -20						; size = 4
tv79 = -16						; size = 4
_ret$1 = -12						; size = 4
_ret$2 = -8						; size = 4
_cache$3 = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheWrapString PROC				; COMDAT

; 2328 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2329 :     if ((ctxt != NULL) && (ctxt->cache != NULL)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN2@xmlXPathCa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	$LN2@xmlXPathCa

; 2330 : 	xmlXPathContextCachePtr cache = (xmlXPathContextCachePtr) ctxt->cache;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR _cache$3[ebp], edx

; 2331 : 
; 2332 : 	if ((cache->stringObjs != NULL) &&

	mov	eax, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@xmlXPathCa
	mov	ecx, DWORD PTR _cache$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN3@xmlXPathCa

; 2333 : 	    (cache->stringObjs->number != 0))
; 2334 : 	{
; 2335 : 
; 2336 : 	    xmlXPathObjectPtr ret;
; 2337 : 
; 2338 : 	    ret = (xmlXPathObjectPtr)

	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv79[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$2[ebp], ecx

; 2339 : 		cache->stringObjs->items[--cache->stringObjs->number];
; 2340 : 	    ret->type = XPATH_STRING;

	mov	edx, DWORD PTR _ret$2[ebp]
	mov	DWORD PTR [edx], 4

; 2341 : 	    ret->stringval = val;

	mov	eax, DWORD PTR _ret$2[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 2342 : #ifdef XP_DEBUG_OBJ_USAGE
; 2343 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_STRING);
; 2344 : #endif
; 2345 : 	    return(ret);

	mov	eax, DWORD PTR _ret$2[ebp]
	jmp	SHORT $LN1@xmlXPathCa
	jmp	SHORT $LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 2346 : 	} else if ((cache->miscObjs != NULL) &&

	mov	edx, DWORD PTR _cache$3[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN2@xmlXPathCa
	mov	eax, DWORD PTR _cache$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@xmlXPathCa

; 2347 : 	    (cache->miscObjs->number != 0))
; 2348 : 	{
; 2349 : 	    xmlXPathObjectPtr ret;
; 2350 : 	    /*
; 2351 : 	    * Fallback to misc-cache.
; 2352 : 	    */
; 2353 : 	    ret = (xmlXPathObjectPtr)

	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv95[ebp], ecx
	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR tv95[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	edx, DWORD PTR _cache$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR tv95[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _ret$1[ebp], eax

; 2354 : 		cache->miscObjs->items[--cache->miscObjs->number];
; 2355 : 
; 2356 : 	    ret->type = XPATH_STRING;

	mov	ecx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [ecx], 4

; 2357 : 	    ret->stringval = val;

	mov	edx, DWORD PTR _ret$1[ebp]
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR [edx+24], eax

; 2358 : #ifdef XP_DEBUG_OBJ_USAGE
; 2359 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_STRING);
; 2360 : #endif
; 2361 : 	    return(ret);

	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 2362 : 	}
; 2363 :     }
; 2364 :     return(xmlXPathWrapString(val));

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_xmlXPathWrapString
	add	esp, 4
$LN1@xmlXPathCa:

; 2365 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheWrapString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheWrapNodeSet
_TEXT	SEGMENT
tv79 = -12						; size = 4
_ret$1 = -8						; size = 4
_cache$2 = -4						; size = 4
_ctxt$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathCacheWrapNodeSet PROC				; COMDAT

; 2291 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2292 :     if ((ctxt != NULL) && (ctxt->cache != NULL)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlXPathCa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	SHORT $LN2@xmlXPathCa

; 2293 : 	xmlXPathContextCachePtr cache =

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR _cache$2[ebp], edx

; 2294 : 	    (xmlXPathContextCachePtr) ctxt->cache;
; 2295 : 
; 2296 : 	if ((cache->miscObjs != NULL) &&

	mov	eax, DWORD PTR _cache$2[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@xmlXPathCa
	mov	ecx, DWORD PTR _cache$2[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN2@xmlXPathCa

; 2297 : 	    (cache->miscObjs->number != 0))
; 2298 : 	{
; 2299 : 	    xmlXPathObjectPtr ret;
; 2300 : 
; 2301 : 	    ret = (xmlXPathObjectPtr)

	mov	eax, DWORD PTR _cache$2[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	mov	DWORD PTR tv79[ebp], edx
	mov	eax, DWORD PTR _cache$2[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR tv79[ebp]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR _cache$2[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv79[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$1[ebp], ecx

; 2302 : 		cache->miscObjs->items[--cache->miscObjs->number];
; 2303 : 	    ret->type = XPATH_NODESET;

	mov	edx, DWORD PTR _ret$1[ebp]
	mov	DWORD PTR [edx], 1

; 2304 : 	    ret->nodesetval = val;

	mov	eax, DWORD PTR _ret$1[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 2305 : #ifdef XP_DEBUG_OBJ_USAGE
; 2306 : 	    xmlXPathDebugObjUsageRequested(ctxt, XPATH_NODESET);
; 2307 : #endif
; 2308 : 	    return(ret);

	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 2309 : 	}
; 2310 :     }
; 2311 : 
; 2312 :     return(xmlXPathWrapNodeSet(val));

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlXPathWrapNodeSet
	add	esp, 4
$LN1@xmlXPathCa:

; 2313 : 
; 2314 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheWrapNodeSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFreeCache
_TEXT	SEGMENT
_cache$ = 8						; size = 4
_xmlXPathFreeCache PROC					; COMDAT

; 2208 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2209 :     if (cache == NULL)

	cmp	DWORD PTR _cache$[ebp], 0
	jne	SHORT $LN2@xmlXPathFr

; 2210 : 	return;

	jmp	$LN1@xmlXPathFr
$LN2@xmlXPathFr:

; 2211 :     if (cache->nodesetObjs)

	mov	eax, DWORD PTR _cache$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlXPathFr

; 2212 : 	xmlXPathCacheFreeObjectList(cache->nodesetObjs);

	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_xmlXPathCacheFreeObjectList
	add	esp, 4
$LN3@xmlXPathFr:

; 2213 :     if (cache->stringObjs)

	mov	eax, DWORD PTR _cache$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@xmlXPathFr

; 2214 : 	xmlXPathCacheFreeObjectList(cache->stringObjs);

	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathCacheFreeObjectList
	add	esp, 4
$LN4@xmlXPathFr:

; 2215 :     if (cache->booleanObjs)

	mov	eax, DWORD PTR _cache$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@xmlXPathFr

; 2216 : 	xmlXPathCacheFreeObjectList(cache->booleanObjs);

	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlXPathCacheFreeObjectList
	add	esp, 4
$LN5@xmlXPathFr:

; 2217 :     if (cache->numberObjs)

	mov	eax, DWORD PTR _cache$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN6@xmlXPathFr

; 2218 : 	xmlXPathCacheFreeObjectList(cache->numberObjs);

	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheFreeObjectList
	add	esp, 4
$LN6@xmlXPathFr:

; 2219 :     if (cache->miscObjs)

	mov	eax, DWORD PTR _cache$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@xmlXPathFr

; 2220 : 	xmlXPathCacheFreeObjectList(cache->miscObjs);

	mov	ecx, DWORD PTR _cache$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlXPathCacheFreeObjectList
	add	esp, 4
$LN7@xmlXPathFr:

; 2221 :     xmlFree(cache);

	mov	esi, esp
	mov	eax, DWORD PTR _cache$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathFr:

; 2222 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathFreeCache ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCacheFreeObjectList
_TEXT	SEGMENT
_obj$ = -8						; size = 4
_i$ = -4						; size = 4
_list$ = 8						; size = 4
_xmlXPathCacheFreeObjectList PROC			; COMDAT

; 2180 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2181 :     int i;
; 2182 :     xmlXPathObjectPtr obj;
; 2183 : 
; 2184 :     if (list == NULL)

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN5@xmlXPathCa

; 2185 : 	return;

	jmp	$LN1@xmlXPathCa
$LN5@xmlXPathCa:

; 2186 : 
; 2187 :     for (i = 0; i < list->number; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathCa
$LN2@xmlXPathCa:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathCa:
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN3@xmlXPathCa

; 2188 : 	obj = list->items[i];

	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _obj$[ebp], eax

; 2189 : 	/*
; 2190 : 	* Note that it is already assured that we don't need to
; 2191 : 	* look out for namespace nodes in the node-set.
; 2192 : 	*/
; 2193 : 	if (obj->nodesetval != NULL) {

	mov	ecx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN6@xmlXPathCa

; 2194 : 	    if (obj->nodesetval->nodeTab != NULL)

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@xmlXPathCa

; 2195 : 		xmlFree(obj->nodesetval->nodeTab);

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	esi, esp
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@xmlXPathCa:

; 2196 : 	    xmlFree(obj->nodesetval);

	mov	esi, esp
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlXPathCa:

; 2197 : 	}
; 2198 : 	xmlFree(obj);

	mov	esi, esp
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2199 : #ifdef XP_DEBUG_OBJ_USAGE
; 2200 : 	xmlXPathDebugObjCounterAll--;
; 2201 : #endif
; 2202 :     }

	jmp	$LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 2203 :     xmlPointerListFree(list);

	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_xmlPointerListFree
	add	esp, 4
$LN1@xmlXPathCa:

; 2204 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCacheFreeObjectList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewCache
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_xmlXPathNewCache PROC					; COMDAT

; 2161 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2162 :     xmlXPathContextCachePtr ret;
; 2163 : 
; 2164 :     ret = (xmlXPathContextCachePtr) xmlMalloc(sizeof(xmlXPathContextCache));

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 2165 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 2166 :         xmlXPathErrMemory(NULL, "creating object cache\n");

	push	OFFSET ??_C@_0BH@LJLEGFLD@creating?5object?5cache?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 2167 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 2168 :     }
; 2169 :     memset(ret, 0 , (size_t) sizeof(xmlXPathContextCache));

	xor	eax, eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], eax
	mov	DWORD PTR [ecx+32], eax
	mov	DWORD PTR [ecx+36], eax

; 2170 :     ret->maxNodeset = 100;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+20], 100			; 00000064H

; 2171 :     ret->maxString = 100;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+24], 100			; 00000064H

; 2172 :     ret->maxBoolean = 100;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+28], 100			; 00000064H

; 2173 :     ret->maxNumber = 100;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+32], 100			; 00000064H

; 2174 :     ret->maxMisc = 100;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+36], 100			; 00000064H

; 2175 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNe:

; 2176 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewCache ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDebugDumpStepOp
_TEXT	SEGMENT
tv259 = -172						; size = 4
tv213 = -168						; size = 4
tv182 = -164						; size = 4
tv88 = -160						; size = 4
_name$1 = -156						; size = 4
_prefix$2 = -152					; size = 4
_nbargs$3 = -148					; size = 4
_name$4 = -144						; size = 4
_prefix$5 = -140					; size = 4
_object$6 = -136					; size = 4
_name$7 = -132						; size = 4
_prefix$8 = -128					; size = 4
_type$9 = -124						; size = 4
_test$10 = -120						; size = 4
_axis$11 = -116						; size = 4
_shift$ = -108						; size = 100
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_comp$ = 12						; size = 4
_op$ = 16						; size = 4
_depth$ = 20						; size = 4
_xmlXPathDebugDumpStepOp PROC				; COMDAT

; 1470 : 	                     xmlXPathStepOpPtr op, int depth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	edi
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1471 :     int i;
; 1472 :     char shift[100];
; 1473 : 
; 1474 :     for (i = 0;((i < depth) && (i < 25));i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDe
$LN2@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathDe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN3@xmlXPathDe
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jge	SHORT $LN3@xmlXPathDe

; 1475 :         shift[2 * i] = shift[2 * i + 1] = ' ';

	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2+1], 32	; 00000020H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+eax*2], 32		; 00000020H
	jmp	SHORT $LN2@xmlXPathDe
$LN3@xmlXPathDe:

; 1476 :     shift[2 * i] = shift[2 * i + 1] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+ecx*2+1], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2], 0

; 1477 : 
; 1478 :     fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1479 :     if (op == NULL) {

	cmp	DWORD PTR _op$[ebp], 0
	jne	SHORT $LN13@xmlXPathDe

; 1480 : 	fprintf(output, "Step is NULL\n");

	push	OFFSET ??_C@_0O@IEEDPMEL@Step?5is?5NULL?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1481 : 	return;

	jmp	$LN1@xmlXPathDe
$LN13@xmlXPathDe:

; 1482 :     }
; 1483 :     switch (op->op) {

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv88[ebp], ecx
	cmp	DWORD PTR tv88[ebp], 18			; 00000012H
	ja	$LN78@xmlXPathDe
	mov	edx, DWORD PTR tv88[ebp]
	jmp	DWORD PTR $LN85@xmlXPathDe[edx*4]
$LN14@xmlXPathDe:

; 1484 :         case XPATH_OP_END:
; 1485 : 	    fprintf(output, "END"); break;

	push	OFFSET ??_C@_03JMGAKCCH@END@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	$LN5@xmlXPathDe
$LN15@xmlXPathDe:

; 1486 :         case XPATH_OP_AND:
; 1487 : 	    fprintf(output, "AND"); break;

	push	OFFSET ??_C@_03BDACDFHA@AND@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	$LN5@xmlXPathDe
$LN16@xmlXPathDe:

; 1488 :         case XPATH_OP_OR:
; 1489 : 	    fprintf(output, "OR"); break;

	push	OFFSET ??_C@_02PDPFNDMG@OR@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	$LN5@xmlXPathDe
$LN17@xmlXPathDe:

; 1490 :         case XPATH_OP_EQUAL:
; 1491 : 	     if (op->value)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN18@xmlXPathDe

; 1492 : 		 fprintf(output, "EQUAL =");

	push	OFFSET ??_C@_07MELFAPHK@EQUAL?5?$DN@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN19@xmlXPathDe
$LN18@xmlXPathDe:

; 1493 : 	     else
; 1494 : 		 fprintf(output, "EQUAL !=");

	push	OFFSET ??_C@_08MPMADPIH@EQUAL?5?$CB?$DN@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
$LN19@xmlXPathDe:

; 1495 : 	     break;

	jmp	$LN5@xmlXPathDe
$LN20@xmlXPathDe:

; 1496 :         case XPATH_OP_CMP:
; 1497 : 	     if (op->value)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN21@xmlXPathDe

; 1498 : 		 fprintf(output, "CMP <");

	push	OFFSET ??_C@_05OHCBIKNL@CMP?5?$DM@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN22@xmlXPathDe
$LN21@xmlXPathDe:

; 1499 : 	     else
; 1500 : 		 fprintf(output, "CMP >");

	push	OFFSET ??_C@_05NFBHOIFJ@CMP?5?$DO@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
$LN22@xmlXPathDe:

; 1501 : 	     if (!op->value2)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN23@xmlXPathDe

; 1502 : 		 fprintf(output, "=");

	push	OFFSET ??_C@_01NEMOKFLO@?$DN@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
$LN23@xmlXPathDe:

; 1503 : 	     break;

	jmp	$LN5@xmlXPathDe
$LN24@xmlXPathDe:

; 1504 :         case XPATH_OP_PLUS:
; 1505 : 	     if (op->value == 0)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN25@xmlXPathDe

; 1506 : 		 fprintf(output, "PLUS -");

	push	OFFSET ??_C@_06IPAPPNJ@PLUS?5?9@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN26@xmlXPathDe
$LN25@xmlXPathDe:

; 1507 : 	     else if (op->value == 1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+12], 1
	jne	SHORT $LN27@xmlXPathDe

; 1508 : 		 fprintf(output, "PLUS +");

	push	OFFSET ??_C@_06FOKKFIFP@PLUS?5?$CL@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN26@xmlXPathDe
$LN27@xmlXPathDe:

; 1509 : 	     else if (op->value == 2)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+12], 2
	jne	SHORT $LN29@xmlXPathDe

; 1510 : 		 fprintf(output, "PLUS unary -");

	push	OFFSET ??_C@_0N@GEIAIOPG@PLUS?5unary?5?9@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN26@xmlXPathDe
$LN29@xmlXPathDe:

; 1511 : 	     else if (op->value == 3)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+12], 3
	jne	SHORT $LN26@xmlXPathDe

; 1512 : 		 fprintf(output, "PLUS unary - -");

	push	OFFSET ??_C@_0P@FAIBJAJD@PLUS?5unary?5?9?5?9@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
$LN26@xmlXPathDe:

; 1513 : 	     break;

	jmp	$LN5@xmlXPathDe
$LN32@xmlXPathDe:

; 1514 :         case XPATH_OP_MULT:
; 1515 : 	     if (op->value == 0)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN33@xmlXPathDe

; 1516 : 		 fprintf(output, "MULT *");

	push	OFFSET ??_C@_06JFEGAKAJ@MULT?5?$CK@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN34@xmlXPathDe
$LN33@xmlXPathDe:

; 1517 : 	     else if (op->value == 1)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+12], 1
	jne	SHORT $LN35@xmlXPathDe

; 1518 : 		 fprintf(output, "MULT div");

	push	OFFSET ??_C@_08HELPMGMA@MULT?5div@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN34@xmlXPathDe
$LN35@xmlXPathDe:

; 1519 : 	     else
; 1520 : 		 fprintf(output, "MULT mod");

	push	OFFSET ??_C@_08HFMOIFCL@MULT?5mod@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
$LN34@xmlXPathDe:

; 1521 : 	     break;

	jmp	$LN5@xmlXPathDe
$LN37@xmlXPathDe:

; 1522 :         case XPATH_OP_UNION:
; 1523 : 	     fprintf(output, "UNION"); break;

	push	OFFSET ??_C@_05GJNJOPB@UNION@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	$LN5@xmlXPathDe
$LN38@xmlXPathDe:

; 1524 :         case XPATH_OP_ROOT:
; 1525 : 	     fprintf(output, "ROOT"); break;

	push	OFFSET ??_C@_04BNGIIOIP@ROOT@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	$LN5@xmlXPathDe
$LN39@xmlXPathDe:

; 1526 :         case XPATH_OP_NODE:
; 1527 : 	     fprintf(output, "NODE"); break;

	push	OFFSET ??_C@_04OHPEDIPN@NODE@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	$LN5@xmlXPathDe
$LN40@xmlXPathDe:

; 1528 :         case XPATH_OP_SORT:
; 1529 : 	     fprintf(output, "SORT"); break;

	push	OFFSET ??_C@_04DEPGJHBM@SORT@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	$LN5@xmlXPathDe
$LN41@xmlXPathDe:

; 1530 :         case XPATH_OP_COLLECT: {
; 1531 : 	    xmlXPathAxisVal axis = (xmlXPathAxisVal)op->value;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _axis$11[ebp], edx

; 1532 : 	    xmlXPathTestVal test = (xmlXPathTestVal)op->value2;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _test$10[ebp], ecx

; 1533 : 	    xmlXPathTypeVal type = (xmlXPathTypeVal)op->value3;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _type$9[ebp], eax

; 1534 : 	    const xmlChar *prefix = op->value4;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _prefix$8[ebp], edx

; 1535 : 	    const xmlChar *name = op->value5;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _name$7[ebp], ecx

; 1536 : 
; 1537 : 	    fprintf(output, "COLLECT ");

	push	OFFSET ??_C@_08BCOGFDOM@COLLECT?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1538 : 	    switch (axis) {

	mov	eax, DWORD PTR _axis$11[ebp]
	mov	DWORD PTR tv182[ebp], eax
	mov	ecx, DWORD PTR tv182[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv182[ebp], ecx
	cmp	DWORD PTR tv182[ebp], 12		; 0000000cH
	ja	$LN7@xmlXPathDe
	mov	edx, DWORD PTR tv182[ebp]
	jmp	DWORD PTR $LN86@xmlXPathDe[edx*4]
$LN42@xmlXPathDe:

; 1539 : 		case AXIS_ANCESTOR:
; 1540 : 		    fprintf(output, " 'ancestors' "); break;

	push	OFFSET ??_C@_0O@CBBIECFC@?5?8ancestors?8?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	$LN7@xmlXPathDe
$LN43@xmlXPathDe:

; 1541 : 		case AXIS_ANCESTOR_OR_SELF:
; 1542 : 		    fprintf(output, " 'ancestors-or-self' "); break;

	push	OFFSET ??_C@_0BG@IJDLJMNP@?5?8ancestors?9or?9self?8?5@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	$LN7@xmlXPathDe
$LN44@xmlXPathDe:

; 1543 : 		case AXIS_ATTRIBUTE:
; 1544 : 		    fprintf(output, " 'attributes' "); break;

	push	OFFSET ??_C@_0P@IMBNHOPA@?5?8attributes?8?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	$LN7@xmlXPathDe
$LN45@xmlXPathDe:

; 1545 : 		case AXIS_CHILD:
; 1546 : 		    fprintf(output, " 'child' "); break;

	push	OFFSET ??_C@_09DMHOAOKE@?5?8child?8?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	$LN7@xmlXPathDe
$LN46@xmlXPathDe:

; 1547 : 		case AXIS_DESCENDANT:
; 1548 : 		    fprintf(output, " 'descendant' "); break;

	push	OFFSET ??_C@_0P@COPGHIIE@?5?8descendant?8?5@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	$LN7@xmlXPathDe
$LN47@xmlXPathDe:

; 1549 : 		case AXIS_DESCENDANT_OR_SELF:
; 1550 : 		    fprintf(output, " 'descendant-or-self' "); break;

	push	OFFSET ??_C@_0BH@OLEEPEHL@?5?8descendant?9or?9self?8?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	$LN7@xmlXPathDe
$LN48@xmlXPathDe:

; 1551 : 		case AXIS_FOLLOWING:
; 1552 : 		    fprintf(output, " 'following' "); break;

	push	OFFSET ??_C@_0O@HPGIPOGE@?5?8following?8?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN7@xmlXPathDe
$LN49@xmlXPathDe:

; 1553 : 		case AXIS_FOLLOWING_SIBLING:
; 1554 : 		    fprintf(output, " 'following-siblings' "); break;

	push	OFFSET ??_C@_0BH@KMMFLMJK@?5?8following?9siblings?8?5@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN7@xmlXPathDe
$LN50@xmlXPathDe:

; 1555 : 		case AXIS_NAMESPACE:
; 1556 : 		    fprintf(output, " 'namespace' "); break;

	push	OFFSET ??_C@_0O@DIAKOKEE@?5?8namespace?8?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN7@xmlXPathDe
$LN51@xmlXPathDe:

; 1557 : 		case AXIS_PARENT:
; 1558 : 		    fprintf(output, " 'parent' "); break;

	push	OFFSET ??_C@_0L@BKJAGPFG@?5?8parent?8?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN7@xmlXPathDe
$LN52@xmlXPathDe:

; 1559 : 		case AXIS_PRECEDING:
; 1560 : 		    fprintf(output, " 'preceding' "); break;

	push	OFFSET ??_C@_0O@BNHFEBDE@?5?8preceding?8?5@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN7@xmlXPathDe
$LN53@xmlXPathDe:

; 1561 : 		case AXIS_PRECEDING_SIBLING:
; 1562 : 		    fprintf(output, " 'preceding-sibling' "); break;

	push	OFFSET ??_C@_0BG@LJHOBDKP@?5?8preceding?9sibling?8?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN7@xmlXPathDe
$LN54@xmlXPathDe:

; 1563 : 		case AXIS_SELF:
; 1564 : 		    fprintf(output, " 'self' "); break;

	push	OFFSET ??_C@_08HAEBALG@?5?8self?8?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
$LN7@xmlXPathDe:

; 1565 : 	    }
; 1566 : 	    switch (test) {

	mov	ecx, DWORD PTR _test$10[ebp]
	mov	DWORD PTR tv213[ebp], ecx
	cmp	DWORD PTR tv213[ebp], 5
	ja	SHORT $LN9@xmlXPathDe
	mov	edx, DWORD PTR tv213[ebp]
	jmp	DWORD PTR $LN87@xmlXPathDe[edx*4]
$LN55@xmlXPathDe:

; 1567 :                 case NODE_TEST_NONE:
; 1568 : 		    fprintf(output, "'none' "); break;

	push	OFFSET ??_C@_07MJDJHLDE@?8none?8?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN9@xmlXPathDe
$LN56@xmlXPathDe:

; 1569 :                 case NODE_TEST_TYPE:
; 1570 : 		    fprintf(output, "'type' "); break;

	push	OFFSET ??_C@_07MIHANB@?8type?8?5@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN9@xmlXPathDe
$LN57@xmlXPathDe:

; 1571 :                 case NODE_TEST_PI:
; 1572 : 		    fprintf(output, "'PI' "); break;

	push	OFFSET ??_C@_05CCBNMHGJ@?8PI?8?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN9@xmlXPathDe
$LN58@xmlXPathDe:

; 1573 :                 case NODE_TEST_ALL:
; 1574 : 		    fprintf(output, "'all' "); break;

	push	OFFSET ??_C@_06COJFFNFM@?8all?8?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN9@xmlXPathDe
$LN59@xmlXPathDe:

; 1575 :                 case NODE_TEST_NS:
; 1576 : 		    fprintf(output, "'namespace' "); break;

	push	OFFSET ??_C@_0N@CLKBKNNJ@?8namespace?8?5@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN9@xmlXPathDe
$LN60@xmlXPathDe:

; 1577 :                 case NODE_TEST_NAME:
; 1578 : 		    fprintf(output, "'name' "); break;

	push	OFFSET ??_C@_07LEJDGAJE@?8name?8?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
$LN9@xmlXPathDe:

; 1579 : 	    }
; 1580 : 	    switch (type) {

	mov	eax, DWORD PTR _type$9[ebp]
	mov	DWORD PTR tv259[ebp], eax
	cmp	DWORD PTR tv259[ebp], 8
	ja	SHORT $LN11@xmlXPathDe
	mov	ecx, DWORD PTR tv259[ebp]
	jmp	DWORD PTR $LN88@xmlXPathDe[ecx*4]
$LN61@xmlXPathDe:

; 1581 :                 case NODE_TYPE_NODE:
; 1582 : 		    fprintf(output, "'node' "); break;

	push	OFFSET ??_C@_07IDIJGDJF@?8node?8?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN11@xmlXPathDe
$LN62@xmlXPathDe:

; 1583 :                 case NODE_TYPE_COMMENT:
; 1584 : 		    fprintf(output, "'comment' "); break;

	push	OFFSET ??_C@_0L@BBLKKJMH@?8comment?8?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN11@xmlXPathDe
$LN63@xmlXPathDe:

; 1585 :                 case NODE_TYPE_TEXT:
; 1586 : 		    fprintf(output, "'text' "); break;

	push	OFFSET ??_C@_07KMAJMJAK@?8text?8?5@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN11@xmlXPathDe
$LN64@xmlXPathDe:

; 1587 :                 case NODE_TYPE_PI:
; 1588 : 		    fprintf(output, "'PI' "); break;

	push	OFFSET ??_C@_05CCBNMHGJ@?8PI?8?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
$LN11@xmlXPathDe:

; 1589 : 	    }
; 1590 : 	    if (prefix != NULL)

	cmp	DWORD PTR _prefix$8[ebp], 0
	je	SHORT $LN65@xmlXPathDe

; 1591 : 		fprintf(output, "%s:", prefix);

	mov	eax, DWORD PTR _prefix$8[ebp]
	push	eax
	push	OFFSET ??_C@_03DKEJHHJP@?$CFs?3@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN65@xmlXPathDe:

; 1592 : 	    if (name != NULL)

	cmp	DWORD PTR _name$7[ebp], 0
	je	SHORT $LN66@xmlXPathDe

; 1593 : 		fprintf(output, "%s", (const char *) name);

	mov	edx, DWORD PTR _name$7[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN66@xmlXPathDe:

; 1594 : 	    break;

	jmp	$LN5@xmlXPathDe
$LN67@xmlXPathDe:

; 1595 : 
; 1596 :         }
; 1597 : 	case XPATH_OP_VALUE: {
; 1598 : 	    xmlXPathObjectPtr object = (xmlXPathObjectPtr) op->value4;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _object$6[ebp], edx

; 1599 : 
; 1600 : 	    fprintf(output, "ELEM ");

	push	OFFSET ??_C@_05MNKHOCPF@ELEM?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8

; 1601 : 	    xmlXPathDebugDumpObject(output, object, 0);

	push	0
	mov	ecx, DWORD PTR _object$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_xmlXPathDebugDumpObject
	add	esp, 12					; 0000000cH

; 1602 : 	    goto finish;

	jmp	$finish$89
$LN68@xmlXPathDe:

; 1603 : 	}
; 1604 : 	case XPATH_OP_VARIABLE: {
; 1605 : 	    const xmlChar *prefix = op->value5;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _prefix$5[ebp], ecx

; 1606 : 	    const xmlChar *name = op->value4;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _name$4[ebp], eax

; 1607 : 
; 1608 : 	    if (prefix != NULL)

	cmp	DWORD PTR _prefix$5[ebp], 0
	je	SHORT $LN69@xmlXPathDe

; 1609 : 		fprintf(output, "VARIABLE %s:%s", prefix, name);

	mov	ecx, DWORD PTR _name$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$5[ebp]
	push	edx
	push	OFFSET ??_C@_0P@MLBLHJNB@VARIABLE?5?$CFs?3?$CFs@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
	jmp	SHORT $LN70@xmlXPathDe
$LN69@xmlXPathDe:

; 1610 : 	    else
; 1611 : 		fprintf(output, "VARIABLE %s", name);

	mov	ecx, DWORD PTR _name$4[ebp]
	push	ecx
	push	OFFSET ??_C@_0M@MLPGFJHH@VARIABLE?5?$CFs@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN70@xmlXPathDe:

; 1612 : 	    break;

	jmp	$LN5@xmlXPathDe
$LN71@xmlXPathDe:

; 1613 : 	}
; 1614 : 	case XPATH_OP_FUNCTION: {
; 1615 : 	    int nbargs = op->value;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _nbargs$3[ebp], ecx

; 1616 : 	    const xmlChar *prefix = op->value5;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _prefix$2[ebp], eax

; 1617 : 	    const xmlChar *name = op->value4;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _name$1[ebp], edx

; 1618 : 
; 1619 : 	    if (prefix != NULL)

	cmp	DWORD PTR _prefix$2[ebp], 0
	je	SHORT $LN72@xmlXPathDe

; 1620 : 		fprintf(output, "FUNCTION %s:%s(%d args)",

	mov	eax, DWORD PTR _nbargs$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$2[ebp]
	push	edx
	push	OFFSET ??_C@_0BI@JIAOIFFJ@FUNCTION?5?$CFs?3?$CFs?$CI?$CFd?5args?$CJ@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 20					; 00000014H
	jmp	SHORT $LN73@xmlXPathDe
$LN72@xmlXPathDe:

; 1621 : 			prefix, name, nbargs);
; 1622 : 	    else
; 1623 : 		fprintf(output, "FUNCTION %s(%d args)", name, nbargs);

	mov	ecx, DWORD PTR _nbargs$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$1[ebp]
	push	edx
	push	OFFSET ??_C@_0BF@LKMAOONC@FUNCTION?5?$CFs?$CI?$CFd?5args?$CJ@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
$LN73@xmlXPathDe:

; 1624 : 	    break;

	jmp	SHORT $LN5@xmlXPathDe
$LN74@xmlXPathDe:

; 1625 : 	}
; 1626 :         case XPATH_OP_ARG: fprintf(output, "ARG"); break;

	push	OFFSET ??_C@_03CNBDDMKH@ARG@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN5@xmlXPathDe
$LN75@xmlXPathDe:

; 1627 :         case XPATH_OP_PREDICATE: fprintf(output, "PREDICATE"); break;

	push	OFFSET ??_C@_09NKOLJOJL@PREDICATE@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN5@xmlXPathDe
$LN76@xmlXPathDe:

; 1628 :         case XPATH_OP_FILTER: fprintf(output, "FILTER"); break;

	push	OFFSET ??_C@_06EKKPGGCG@FILTER@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN5@xmlXPathDe
$LN77@xmlXPathDe:

; 1629 : #ifdef LIBXML_XPTR_ENABLED
; 1630 :         case XPATH_OP_RANGETO: fprintf(output, "RANGETO"); break;

	push	OFFSET ??_C@_07LNDIAM@RANGETO@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN5@xmlXPathDe
$LN78@xmlXPathDe:

; 1631 : #endif
; 1632 : 	default:
; 1633 :         fprintf(output, "UNKNOWN %d\n", op->op); return;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET ??_C@_0M@BEEHJFLN@UNKNOWN?5?$CFd?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlXPathDe
$LN5@xmlXPathDe:

; 1634 :     }
; 1635 :     fprintf(output, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
$finish$89:

; 1636 : finish:
; 1637 :     if (op->ch1 >= 0)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jl	SHORT $LN79@xmlXPathDe

; 1638 : 	xmlXPathDebugDumpStepOp(output, comp, &comp->steps[op->ch1], depth + 1);

	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _comp$[ebp]
	push	edx
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_xmlXPathDebugDumpStepOp
	add	esp, 16					; 00000010H
$LN79@xmlXPathDe:

; 1639 :     if (op->ch2 >= 0)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jl	SHORT $LN1@xmlXPathDe

; 1640 : 	xmlXPathDebugDumpStepOp(output, comp, &comp->steps[op->ch2], depth + 1);

	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+8], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _comp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_xmlXPathDebugDumpStepOp
	add	esp, 16					; 00000010H
$LN1@xmlXPathDe:

; 1641 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN84@xmlXPathDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 172				; 000000acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN84@xmlXPathDe:
	DD	1
	DD	$LN83@xmlXPathDe
$LN83@xmlXPathDe:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN82@xmlXPathDe
$LN82@xmlXPathDe:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
	npad	2
$LN85@xmlXPathDe:
	DD	$LN14@xmlXPathDe
	DD	$LN15@xmlXPathDe
	DD	$LN16@xmlXPathDe
	DD	$LN17@xmlXPathDe
	DD	$LN20@xmlXPathDe
	DD	$LN24@xmlXPathDe
	DD	$LN32@xmlXPathDe
	DD	$LN37@xmlXPathDe
	DD	$LN38@xmlXPathDe
	DD	$LN39@xmlXPathDe
	DD	$LN41@xmlXPathDe
	DD	$LN67@xmlXPathDe
	DD	$LN68@xmlXPathDe
	DD	$LN71@xmlXPathDe
	DD	$LN74@xmlXPathDe
	DD	$LN75@xmlXPathDe
	DD	$LN76@xmlXPathDe
	DD	$LN40@xmlXPathDe
	DD	$LN77@xmlXPathDe
$LN86@xmlXPathDe:
	DD	$LN42@xmlXPathDe
	DD	$LN43@xmlXPathDe
	DD	$LN44@xmlXPathDe
	DD	$LN45@xmlXPathDe
	DD	$LN46@xmlXPathDe
	DD	$LN47@xmlXPathDe
	DD	$LN48@xmlXPathDe
	DD	$LN49@xmlXPathDe
	DD	$LN50@xmlXPathDe
	DD	$LN51@xmlXPathDe
	DD	$LN52@xmlXPathDe
	DD	$LN53@xmlXPathDe
	DD	$LN54@xmlXPathDe
$LN87@xmlXPathDe:
	DD	$LN55@xmlXPathDe
	DD	$LN56@xmlXPathDe
	DD	$LN57@xmlXPathDe
	DD	$LN58@xmlXPathDe
	DD	$LN59@xmlXPathDe
	DD	$LN60@xmlXPathDe
$LN88@xmlXPathDe:
	DD	$LN61@xmlXPathDe
	DD	$LN11@xmlXPathDe
	DD	$LN11@xmlXPathDe
	DD	$LN63@xmlXPathDe
	DD	$LN11@xmlXPathDe
	DD	$LN11@xmlXPathDe
	DD	$LN11@xmlXPathDe
	DD	$LN64@xmlXPathDe
	DD	$LN62@xmlXPathDe
_xmlXPathDebugDumpStepOp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDebugDumpLocationSet
_TEXT	SEGMENT
_shift$ = -108						; size = 100
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_cur$ = 12						; size = 4
_depth$ = 16						; size = 4
_xmlXPathDebugDumpLocationSet PROC			; COMDAT

; 1331 : xmlXPathDebugDumpLocationSet(FILE *output, xmlLocationSetPtr cur, int depth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1332 :     int i;
; 1333 :     char shift[100];
; 1334 : 
; 1335 :     for (i = 0;((i < depth) && (i < 25));i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDe
$LN2@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathDe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN3@xmlXPathDe
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jge	SHORT $LN3@xmlXPathDe

; 1336 :         shift[2 * i] = shift[2 * i + 1] = ' ';

	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2+1], 32	; 00000020H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+eax*2], 32		; 00000020H
	jmp	SHORT $LN2@xmlXPathDe
$LN3@xmlXPathDe:

; 1337 :     shift[2 * i] = shift[2 * i + 1] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+ecx*2+1], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2], 0

; 1338 : 
; 1339 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN8@xmlXPathDe

; 1340 : 	fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1341 : 	fprintf(output, "LocationSet is NULL !\n");

	push	OFFSET ??_C@_0BH@OMGEHPOG@LocationSet?5is?5NULL?5?$CB?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1342 : 	return;

	jmp	SHORT $LN1@xmlXPathDe
$LN8@xmlXPathDe:

; 1343 : 
; 1344 :     }
; 1345 : 
; 1346 :     for (i = 0;i < cur->locNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@xmlXPathDe
$LN5@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@xmlXPathDe:
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN1@xmlXPathDe

; 1347 : 	fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1348 :         fprintf(output, "%d : ", i + 1);

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_05GJKEPAIO@?$CFd?5?3?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1349 : 	xmlXPathDebugDumpObject(output, cur->locTab[i], depth + 1);

	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_xmlXPathDebugDumpObject
	add	esp, 12					; 0000000cH

; 1350 :     }

	jmp	SHORT $LN5@xmlXPathDe
$LN1@xmlXPathDe:

; 1351 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@xmlXPathDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@xmlXPathDe:
	DD	1
	DD	$LN11@xmlXPathDe
$LN11@xmlXPathDe:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN10@xmlXPathDe
$LN10@xmlXPathDe:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
_xmlXPathDebugDumpLocationSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDebugDumpValueTree
_TEXT	SEGMENT
_shift$ = -108						; size = 100
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_cur$ = 12						; size = 4
_depth$ = 16						; size = 4
_xmlXPathDebugDumpValueTree PROC			; COMDAT

; 1310 : xmlXPathDebugDumpValueTree(FILE *output, xmlNodeSetPtr cur, int depth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1311 :     int i;
; 1312 :     char shift[100];
; 1313 : 
; 1314 :     for (i = 0;((i < depth) && (i < 25));i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDe
$LN2@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathDe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN3@xmlXPathDe
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jge	SHORT $LN3@xmlXPathDe

; 1315 :         shift[2 * i] = shift[2 * i + 1] = ' ';

	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2+1], 32	; 00000020H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+eax*2], 32		; 00000020H
	jmp	SHORT $LN2@xmlXPathDe
$LN3@xmlXPathDe:

; 1316 :     shift[2 * i] = shift[2 * i + 1] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+ecx*2+1], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2], 0

; 1317 : 
; 1318 :     if ((cur == NULL) || (cur->nodeNr == 0) || (cur->nodeTab[0] == NULL)) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@xmlXPathDe
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@xmlXPathDe
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [edx+ecx], 0
	jne	SHORT $LN5@xmlXPathDe
$LN6@xmlXPathDe:

; 1319 : 	fprintf(output, "%s", shift);

	lea	edx, DWORD PTR _shift$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1320 : 	fprintf(output, "Value Tree is NULL !\n");

	push	OFFSET ??_C@_0BG@ODIPEGMA@Value?5Tree?5is?5NULL?5?$CB?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8

; 1321 : 	return;

	jmp	SHORT $LN1@xmlXPathDe
$LN5@xmlXPathDe:

; 1322 : 
; 1323 :     }
; 1324 : 
; 1325 :     fprintf(output, "%s", shift);

	lea	edx, DWORD PTR _shift$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1326 :     fprintf(output, "%d", i + 1);

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	push	ecx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1327 :     xmlXPathDebugDumpNodeList(output, cur->nodeTab[0]->children, depth + 1);

	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_xmlXPathDebugDumpNodeList
	add	esp, 12					; 0000000cH
$LN1@xmlXPathDe:

; 1328 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@xmlXPathDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@xmlXPathDe:
	DD	1
	DD	$LN9@xmlXPathDe
$LN9@xmlXPathDe:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN8@xmlXPathDe
$LN8@xmlXPathDe:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
_xmlXPathDebugDumpValueTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDebugDumpNodeSet
_TEXT	SEGMENT
_shift$ = -108						; size = 100
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_cur$ = 12						; size = 4
_depth$ = 16						; size = 4
_xmlXPathDebugDumpNodeSet PROC				; COMDAT

; 1284 : xmlXPathDebugDumpNodeSet(FILE *output, xmlNodeSetPtr cur, int depth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1285 :     int i;
; 1286 :     char shift[100];
; 1287 : 
; 1288 :     for (i = 0;((i < depth) && (i < 25));i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDe
$LN2@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathDe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN3@xmlXPathDe
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jge	SHORT $LN3@xmlXPathDe

; 1289 :         shift[2 * i] = shift[2 * i + 1] = ' ';

	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2+1], 32	; 00000020H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+eax*2], 32		; 00000020H
	jmp	SHORT $LN2@xmlXPathDe
$LN3@xmlXPathDe:

; 1290 :     shift[2 * i] = shift[2 * i + 1] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+ecx*2+1], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2], 0

; 1291 : 
; 1292 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN8@xmlXPathDe

; 1293 : 	fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1294 : 	fprintf(output, "NodeSet is NULL !\n");

	push	OFFSET ??_C@_0BD@CEACDENF@NodeSet?5is?5NULL?5?$CB?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1295 : 	return;

	jmp	$LN1@xmlXPathDe
$LN8@xmlXPathDe:

; 1296 : 
; 1297 :     }
; 1298 : 
; 1299 :     if (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN1@xmlXPathDe

; 1300 : 	fprintf(output, "Set contains %d nodes:\n", cur->nodeNr);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	OFFSET ??_C@_0BI@CGJHGOLK@Set?5contains?5?$CFd?5nodes?3?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1301 : 	for (i = 0;i < cur->nodeNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@xmlXPathDe
$LN5@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@xmlXPathDe:
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN1@xmlXPathDe

; 1302 : 	    fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1303 : 	    fprintf(output, "%d", i + 1);

	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	push	edx
	push	OFFSET ??_C@_02DPKJAMEF@?$CFd@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1304 : 	    xmlXPathDebugDumpNode(output, cur->nodeTab[i], depth + 1);

	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_xmlXPathDebugDumpNode
	add	esp, 12					; 0000000cH

; 1305 : 	}

	jmp	SHORT $LN5@xmlXPathDe
$LN1@xmlXPathDe:

; 1306 :     }
; 1307 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@xmlXPathDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@xmlXPathDe:
	DD	1
	DD	$LN12@xmlXPathDe
$LN12@xmlXPathDe:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN11@xmlXPathDe
$LN11@xmlXPathDe:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
_xmlXPathDebugDumpNodeSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDebugDumpNodeList
_TEXT	SEGMENT
_shift$ = -112						; size = 100
_i$ = -8						; size = 4
_tmp$ = -4						; size = 4
_output$ = 8						; size = 4
_cur$ = 12						; size = 4
_depth$ = 16						; size = 4
_xmlXPathDebugDumpNodeList PROC				; COMDAT

; 1261 : xmlXPathDebugDumpNodeList(FILE *output, xmlNodePtr cur, int depth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1262 :     xmlNodePtr tmp;
; 1263 :     int i;
; 1264 :     char shift[100];
; 1265 : 
; 1266 :     for (i = 0;((i < depth) && (i < 25));i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDe
$LN2@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathDe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN3@xmlXPathDe
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jge	SHORT $LN3@xmlXPathDe

; 1267 :         shift[2 * i] = shift[2 * i + 1] = ' ';

	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2+1], 32	; 00000020H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+eax*2], 32		; 00000020H
	jmp	SHORT $LN2@xmlXPathDe
$LN3@xmlXPathDe:

; 1268 :     shift[2 * i] = shift[2 * i + 1] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+ecx*2+1], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2], 0

; 1269 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN5@xmlXPathDe

; 1270 : 	fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1271 : 	fprintf(output, "Node is NULL !\n");

	push	OFFSET ??_C@_0BA@OKLFJGHE@Node?5is?5NULL?5?$CB?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1272 : 	return;

	jmp	SHORT $LN1@xmlXPathDe
$LN5@xmlXPathDe:

; 1273 : 
; 1274 :     }
; 1275 : 
; 1276 :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN1@xmlXPathDe

; 1277 : 	tmp = cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _tmp$[ebp], eax

; 1278 : 	cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx

; 1279 : 	xmlDebugDumpOneNode(output, tmp, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp$[ebp]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_xmlDebugDumpOneNode
	add	esp, 12					; 0000000cH

; 1280 :     }

	jmp	SHORT $LN5@xmlXPathDe
$LN1@xmlXPathDe:

; 1281 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@xmlXPathDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN11@xmlXPathDe:
	DD	1
	DD	$LN10@xmlXPathDe
$LN10@xmlXPathDe:
	DD	-112					; ffffff90H
	DD	100					; 00000064H
	DD	$LN9@xmlXPathDe
$LN9@xmlXPathDe:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
_xmlXPathDebugDumpNodeList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDebugDumpNode
_TEXT	SEGMENT
_shift$ = -108						; size = 100
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_cur$ = 12						; size = 4
_depth$ = 16						; size = 4
_xmlXPathDebugDumpNode PROC				; COMDAT

; 1237 : xmlXPathDebugDumpNode(FILE *output, xmlNodePtr cur, int depth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1238 :     int i;
; 1239 :     char shift[100];
; 1240 : 
; 1241 :     for (i = 0;((i < depth) && (i < 25));i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDe
$LN2@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathDe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN3@xmlXPathDe
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jge	SHORT $LN3@xmlXPathDe

; 1242 :         shift[2 * i] = shift[2 * i + 1] = ' ';

	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2+1], 32	; 00000020H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+eax*2], 32		; 00000020H
	jmp	SHORT $LN2@xmlXPathDe
$LN3@xmlXPathDe:

; 1243 :     shift[2 * i] = shift[2 * i + 1] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+ecx*2+1], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2], 0

; 1244 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN5@xmlXPathDe

; 1245 : 	fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1246 : 	fprintf(output, "Node is NULL !\n");

	push	OFFSET ??_C@_0BA@OKLFJGHE@Node?5is?5NULL?5?$CB?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1247 : 	return;

	jmp	SHORT $LN1@xmlXPathDe
$LN5@xmlXPathDe:

; 1248 : 
; 1249 :     }
; 1250 : 
; 1251 :     if ((cur->type == XML_DOCUMENT_NODE) ||

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 9
	je	SHORT $LN8@xmlXPathDe
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 13			; 0000000dH
	jne	SHORT $LN6@xmlXPathDe
$LN8@xmlXPathDe:

; 1252 : 	     (cur->type == XML_HTML_DOCUMENT_NODE)) {
; 1253 : 	fprintf(output, "%s", shift);

	lea	edx, DWORD PTR _shift$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1254 : 	fprintf(output, " /\n");

	push	OFFSET ??_C@_03LHHHGGIK@?5?1?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathDe
$LN6@xmlXPathDe:

; 1255 :     } else if (cur->type == XML_ATTRIBUTE_NODE)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN9@xmlXPathDe

; 1256 : 	xmlDebugDumpAttr(output, (xmlAttrPtr)cur, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_xmlDebugDumpAttr
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlXPathDe
$LN9@xmlXPathDe:

; 1257 :     else
; 1258 : 	xmlDebugDumpOneNode(output, cur, depth);

	mov	eax, DWORD PTR _depth$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_xmlDebugDumpOneNode
	add	esp, 12					; 0000000cH
$LN1@xmlXPathDe:

; 1259 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@xmlXPathDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@xmlXPathDe:
	DD	1
	DD	$LN13@xmlXPathDe
$LN13@xmlXPathDe:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN12@xmlXPathDe
$LN12@xmlXPathDe:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
_xmlXPathDebugDumpNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompSwap
_TEXT	SEGMENT
_tmp$ = -4						; size = 4
_op$ = 8						; size = 4
_xmlXPathCompSwap PROC					; COMDAT

; 1137 : xmlXPathCompSwap(xmlXPathStepOpPtr op) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1138 :     int tmp;
; 1139 : 
; 1140 : #ifndef LIBXML_THREAD_ENABLED
; 1141 :     /*
; 1142 :      * Since this manipulates possibly shared variables, this is
; 1143 :      * disabled if one detects that the library is used in a multithreaded
; 1144 :      * application
; 1145 :      */
; 1146 :     if (xmlXPathDisableOptimizer)
; 1147 : 	return;
; 1148 : #endif
; 1149 : 
; 1150 :     tmp = op->ch1;

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmp$[ebp], ecx

; 1151 :     op->ch1 = op->ch2;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+4], ecx

; 1152 :     op->ch2 = tmp;

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1153 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompSwap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompExprAdd
_TEXT	SEGMENT
tv209 = -8						; size = 4
_real$1 = -4						; size = 4
_comp$ = 8						; size = 4
_ch1$ = 12						; size = 4
_ch2$ = 16						; size = 4
_op$ = 20						; size = 4
_value$ = 24						; size = 4
_value2$ = 28						; size = 4
_value3$ = 32						; size = 4
_value4$ = 36						; size = 4
_value5$ = 40						; size = 4
_xmlXPathCompExprAdd PROC				; COMDAT

; 1081 :    int value2, int value3, void *value4, void *value5) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1082 :     if (comp->nbStep >= comp->maxStep) {

	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jl	$LN2@xmlXPathCo

; 1083 : 	xmlXPathStepOp *real;
; 1084 : 
; 1085 :         if (comp->maxStep >= XPATH_MAX_STEPS) {

	mov	eax, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [eax+4], 1000000		; 000f4240H
	jl	SHORT $LN3@xmlXPathCo

; 1086 : 	    xmlXPathErrMemory(NULL, "adding step\n");

	push	OFFSET ??_C@_0N@GHHFFDFC@adding?5step?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 1087 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCo
$LN3@xmlXPathCo:

; 1088 :         }
; 1089 : 	comp->maxStep *= 2;

	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 1
	mov	eax, DWORD PTR _comp$[ebp]
	mov	DWORD PTR [eax+4], edx

; 1090 : 	real = (xmlXPathStepOp *) xmlRealloc(comp->steps,

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _real$1[ebp], eax

; 1091 : 		                      comp->maxStep * sizeof(xmlXPathStepOp));
; 1092 : 	if (real == NULL) {

	cmp	DWORD PTR _real$1[ebp], 0
	jne	SHORT $LN4@xmlXPathCo

; 1093 : 	    comp->maxStep /= 2;

	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 1094 : 	    xmlXPathErrMemory(NULL, "adding step\n");

	push	OFFSET ??_C@_0N@GHHFFDFC@adding?5step?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 1095 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:

; 1096 : 	}
; 1097 : 	comp->steps = real;

	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR _real$1[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@xmlXPathCo:

; 1098 :     }
; 1099 :     comp->last = comp->nbStep;

	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+12], eax

; 1100 :     comp->steps[comp->nbStep].ch1 = ch1;

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _ch1$[ebp]
	mov	DWORD PTR [ecx+edx+4], eax

; 1101 :     comp->steps[comp->nbStep].ch2 = ch2;

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _ch2$[ebp]
	mov	DWORD PTR [ecx+edx+8], eax

; 1102 :     comp->steps[comp->nbStep].op = op;

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _op$[ebp]
	mov	DWORD PTR [ecx+edx], eax

; 1103 :     comp->steps[comp->nbStep].value = value;

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+edx+12], eax

; 1104 :     comp->steps[comp->nbStep].value2 = value2;

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _value2$[ebp]
	mov	DWORD PTR [ecx+edx+16], eax

; 1105 :     comp->steps[comp->nbStep].value3 = value3;

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _value3$[ebp]
	mov	DWORD PTR [ecx+edx+20], eax

; 1106 :     if ((comp->dict != NULL) &&

	mov	ecx, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	$LN5@xmlXPathCo
	cmp	DWORD PTR _op$[ebp], 13			; 0000000dH
	je	SHORT $LN7@xmlXPathCo
	cmp	DWORD PTR _op$[ebp], 12			; 0000000cH
	je	SHORT $LN7@xmlXPathCo
	cmp	DWORD PTR _op$[ebp], 10			; 0000000aH
	jne	$LN5@xmlXPathCo
$LN7@xmlXPathCo:

; 1107 :         ((op == XPATH_OP_FUNCTION) || (op == XPATH_OP_VARIABLE) ||
; 1108 : 	 (op == XPATH_OP_COLLECT))) {
; 1109 :         if (value4 != NULL) {

	cmp	DWORD PTR _value4$[ebp], 0
	je	SHORT $LN8@xmlXPathCo

; 1110 : 	    comp->steps[comp->nbStep].value4 = (xmlChar *)

	push	-1
	mov	edx, DWORD PTR _value4$[ebp]
	push	edx
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _comp$[ebp]
	imul	ecx, DWORD PTR [edx], 40
	mov	edx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [edx+ecx+24], eax

; 1111 : 	        (void *)xmlDictLookup(comp->dict, value4, -1);
; 1112 : 	    xmlFree(value4);

	mov	esi, esp
	mov	eax, DWORD PTR _value4$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1113 : 	} else

	jmp	SHORT $LN9@xmlXPathCo
$LN8@xmlXPathCo:

; 1114 : 	    comp->steps[comp->nbStep].value4 = NULL;

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+edx+24], 0
$LN9@xmlXPathCo:

; 1115 :         if (value5 != NULL) {

	cmp	DWORD PTR _value5$[ebp], 0
	je	SHORT $LN10@xmlXPathCo

; 1116 : 	    comp->steps[comp->nbStep].value5 = (xmlChar *)

	push	-1
	mov	edx, DWORD PTR _value5$[ebp]
	push	edx
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _comp$[ebp]
	imul	ecx, DWORD PTR [edx], 40
	mov	edx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [edx+ecx+28], eax

; 1117 : 	        (void *)xmlDictLookup(comp->dict, value5, -1);
; 1118 : 	    xmlFree(value5);

	mov	esi, esp
	mov	eax, DWORD PTR _value5$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1119 : 	} else

	jmp	SHORT $LN11@xmlXPathCo
$LN10@xmlXPathCo:

; 1120 : 	    comp->steps[comp->nbStep].value5 = NULL;

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx], 40
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+edx+28], 0
$LN11@xmlXPathCo:

; 1121 :     } else {

	jmp	SHORT $LN6@xmlXPathCo
$LN5@xmlXPathCo:

; 1122 : 	comp->steps[comp->nbStep].value4 = value4;

	mov	edx, DWORD PTR _comp$[ebp]
	imul	eax, DWORD PTR [edx], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _value4$[ebp]
	mov	DWORD PTR [edx+eax+24], ecx

; 1123 : 	comp->steps[comp->nbStep].value5 = value5;

	mov	edx, DWORD PTR _comp$[ebp]
	imul	eax, DWORD PTR [edx], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _value5$[ebp]
	mov	DWORD PTR [edx+eax+28], ecx
$LN6@xmlXPathCo:

; 1124 :     }
; 1125 :     comp->steps[comp->nbStep].cache = NULL;

	mov	edx, DWORD PTR _comp$[ebp]
	imul	eax, DWORD PTR [edx], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+eax+32], 0

; 1126 :     return(comp->nbStep++);

	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv209[ebp], ecx
	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR tv209[ebp]
$LN1@xmlXPathCo:

; 1127 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompExprAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewCompExpr
_TEXT	SEGMENT
_cur$ = -4						; size = 4
_xmlXPathNewCompExpr PROC				; COMDAT

; 980  : xmlXPathNewCompExpr(void) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 981  :     xmlXPathCompExprPtr cur;
; 982  : 
; 983  :     cur = (xmlXPathCompExprPtr) xmlMalloc(sizeof(xmlXPathCompExpr));

	mov	esi, esp
	push	28					; 0000001cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur$[ebp], eax

; 984  :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 985  :         xmlXPathErrMemory(NULL, "allocating component\n");

	push	OFFSET ??_C@_0BG@OMFEJMIL@allocating?5component?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 986  : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 987  :     }
; 988  :     memset(cur, 0, sizeof(xmlXPathCompExpr));

	xor	eax, eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax
	mov	DWORD PTR [ecx+24], eax

; 989  :     cur->maxStep = 10;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], 10			; 0000000aH

; 990  :     cur->nbStep = 0;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], 0

; 991  :     cur->steps = (xmlXPathStepOp *) xmlMalloc(cur->maxStep *

	mov	ecx, DWORD PTR _cur$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	mov	esi, esp
	push	edx
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 992  : 	                                   sizeof(xmlXPathStepOp));
; 993  :     if (cur->steps == NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN3@xmlXPathNe

; 994  :         xmlXPathErrMemory(NULL, "allocating steps\n");

	push	OFFSET ??_C@_0BC@EIFELMJ@allocating?5steps?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 995  : 	xmlFree(cur);

	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 996  : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN3@xmlXPathNe:

; 997  :     }
; 998  :     memset(cur->steps, 0, cur->maxStep * sizeof(xmlXPathStepOp));

	mov	ecx, DWORD PTR _cur$[ebp]
	imul	edx, DWORD PTR [ecx+4], 40
	push	edx
	push	0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 999  :     cur->last = -1;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+12], -1

; 1000 : #ifdef DEBUG_EVAL_COUNTS
; 1001 :     cur->nb = 0;
; 1002 : #endif
; 1003 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlXPathNe:

; 1004 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewCompExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFreeObjectEntry
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlXPathFreeObjectEntry PROC				; COMDAT

; 5524 : xmlXPathFreeObjectEntry(void *obj, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5525 :     xmlXPathFreeObject((xmlXPathObjectPtr) obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	_xmlXPathFreeObject
	add	esp, 4

; 5526 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathFreeObjectEntry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompOpEvalToBoolean
_TEXT	SEGMENT
tv65 = -12						; size = 4
_res$1 = -8						; size = 4
_resObj$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_op$ = 12						; size = 4
_isPredicate$ = 16					; size = 4
_xmlXPathCompOpEvalToBoolean PROC			; COMDAT

; 13989: {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 13990:     xmlXPathObjectPtr resObj = NULL;

	mov	DWORD PTR _resObj$[ebp], 0
$start$25:

; 13991: 
; 13992: start:
; 13993:     /* comp = ctxt->comp; */
; 13994:     switch (op->op) {

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv65[ebp], ecx
	cmp	DWORD PTR tv65[ebp], 17			; 00000011H
	ja	$LN14@xmlXPathCo
	mov	edx, DWORD PTR tv65[ebp]
	movzx	eax, BYTE PTR $LN23@xmlXPathCo[edx]
	jmp	DWORD PTR $LN24@xmlXPathCo[eax*4]
$LN4@xmlXPathCo:

; 13995:         case XPATH_OP_END:
; 13996:             return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN5@xmlXPathCo:

; 13997: 	case XPATH_OP_VALUE:
; 13998: 	    resObj = (xmlXPathObjectPtr) op->value4;

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _resObj$[ebp], edx

; 13999: 	    if (isPredicate)

	cmp	DWORD PTR _isPredicate$[ebp], 0
	je	SHORT $LN6@xmlXPathCo

; 14000: 		return(xmlXPathEvaluatePredicateResult(ctxt, resObj));

	mov	eax, DWORD PTR _resObj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathEvaluatePredicateResult
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN6@xmlXPathCo:

; 14001: 	    return(xmlXPathCastToBoolean(resObj));

	mov	edx, DWORD PTR _resObj$[ebp]
	push	edx
	call	_xmlXPathCastToBoolean
	add	esp, 4
	jmp	$LN1@xmlXPathCo
$LN7@xmlXPathCo:

; 14002: 	case XPATH_OP_SORT:
; 14003: 	    /*
; 14004: 	    * We don't need sorting for boolean results. Skip this one.
; 14005: 	    */
; 14006:             if (op->ch1 != -1) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+4], -1
	je	SHORT $LN8@xmlXPathCo

; 14007: 		op = &ctxt->comp->steps[op->ch1];

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _op$[ebp], ecx

; 14008: 		goto start;

	jmp	SHORT $start$25
$LN8@xmlXPathCo:

; 14009: 	    }
; 14010: 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN9@xmlXPathCo:

; 14011: 	case XPATH_OP_COLLECT:
; 14012: 	    if (op->ch1 == -1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+4], -1
	jne	SHORT $LN10@xmlXPathCo

; 14013: 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN10@xmlXPathCo:

; 14014: 
; 14015:             xmlXPathCompOpEval(ctxt, &ctxt->comp->steps[op->ch1]);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompOpEval
	add	esp, 8

; 14016: 	    if (ctxt->error != XPATH_EXPRESSION_OK)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN11@xmlXPathCo

; 14017: 		return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCo
$LN11@xmlXPathCo:

; 14018: 
; 14019:             xmlXPathNodeCollectAndTest(ctxt, op, NULL, NULL, 1);

	push	1
	push	0
	push	0
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNodeCollectAndTest
	add	esp, 20					; 00000014H

; 14020: 	    if (ctxt->error != XPATH_EXPRESSION_OK)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN12@xmlXPathCo

; 14021: 		return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCo
$LN12@xmlXPathCo:

; 14022: 
; 14023: 	    resObj = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _resObj$[ebp], eax

; 14024: 	    if (resObj == NULL)

	cmp	DWORD PTR _resObj$[ebp], 0
	jne	SHORT $LN13@xmlXPathCo

; 14025: 		return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCo
$LN13@xmlXPathCo:

; 14026: 	    break;

	jmp	SHORT $LN2@xmlXPathCo
$LN14@xmlXPathCo:

; 14027: 	default:
; 14028: 	    /*
; 14029: 	    * Fallback to call xmlXPathCompOpEval().
; 14030: 	    */
; 14031: 	    xmlXPathCompOpEval(ctxt, op);

	mov	ecx, DWORD PTR _op$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8

; 14032: 	    if (ctxt->error != XPATH_EXPRESSION_OK)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN15@xmlXPathCo

; 14033: 		return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathCo
$LN15@xmlXPathCo:

; 14034: 
; 14035: 	    resObj = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _resObj$[ebp], eax

; 14036: 	    if (resObj == NULL)

	cmp	DWORD PTR _resObj$[ebp], 0
	jne	SHORT $LN2@xmlXPathCo

; 14037: 		return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 14038: 	    break;
; 14039:     }
; 14040: 
; 14041:     if (resObj) {

	cmp	DWORD PTR _resObj$[ebp], 0
	je	SHORT $LN17@xmlXPathCo

; 14042: 	int res;
; 14043: 
; 14044: 	if (resObj->type == XPATH_BOOLEAN) {

	mov	edx, DWORD PTR _resObj$[ebp]
	cmp	DWORD PTR [edx], 2
	jne	SHORT $LN18@xmlXPathCo

; 14045: 	    res = resObj->boolval;

	mov	eax, DWORD PTR _resObj$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _res$1[ebp], ecx
	jmp	SHORT $LN19@xmlXPathCo
$LN18@xmlXPathCo:

; 14046: 	} else if (isPredicate) {

	cmp	DWORD PTR _isPredicate$[ebp], 0
	je	SHORT $LN20@xmlXPathCo

; 14047: 	    /*
; 14048: 	    * For predicates a result of type "number" is handled
; 14049: 	    * differently:
; 14050: 	    * SPEC XPath 1.0:
; 14051: 	    * "If the result is a number, the result will be converted
; 14052: 	    *  to true if the number is equal to the context position
; 14053: 	    *  and will be converted to false otherwise;"
; 14054: 	    */
; 14055: 	    res = xmlXPathEvaluatePredicateResult(ctxt, resObj);

	mov	edx, DWORD PTR _resObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathEvaluatePredicateResult
	add	esp, 8
	mov	DWORD PTR _res$1[ebp], eax

; 14056: 	} else {

	jmp	SHORT $LN19@xmlXPathCo
$LN20@xmlXPathCo:

; 14057: 	    res = xmlXPathCastToBoolean(resObj);

	mov	ecx, DWORD PTR _resObj$[ebp]
	push	ecx
	call	_xmlXPathCastToBoolean
	add	esp, 4
	mov	DWORD PTR _res$1[ebp], eax
$LN19@xmlXPathCo:

; 14058: 	}
; 14059: 	xmlXPathReleaseObject(ctxt->context, resObj);

	mov	edx, DWORD PTR _resObj$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 14060: 	return(res);

	mov	eax, DWORD PTR _res$1[ebp]
	jmp	SHORT $LN1@xmlXPathCo
$LN17@xmlXPathCo:

; 14061:     }
; 14062: 
; 14063:     return(0);

	xor	eax, eax
$LN1@xmlXPathCo:

; 14064: }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN24@xmlXPathCo:
	DD	$LN4@xmlXPathCo
	DD	$LN9@xmlXPathCo
	DD	$LN5@xmlXPathCo
	DD	$LN7@xmlXPathCo
	DD	$LN14@xmlXPathCo
$LN23@xmlXPathCo:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
_xmlXPathCompOpEvalToBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompOpEvalFirst
_TEXT	SEGMENT
tv68 = -24						; size = 4
_arg2$ = -20						; size = 4
_arg1$ = -16						; size = 4
_comp$ = -12						; size = 4
_cur$ = -8						; size = 4
_total$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_op$ = 12						; size = 4
_first$ = 16						; size = 4
_xmlXPathCompOpEvalFirst PROC				; COMDAT

; 12715: {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 12716:     int total = 0, cur;

	mov	DWORD PTR _total$[ebp], 0

; 12717:     xmlXPathCompExprPtr comp;
; 12718:     xmlXPathObjectPtr arg1, arg2;
; 12719: 
; 12720:     CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:

; 12721:     comp = ctxt->comp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _comp$[ebp], edx

; 12722:     switch (op->op) {

	mov	eax, DWORD PTR _op$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 17			; 00000011H
	ja	$LN29@xmlXPathCo
	mov	edx, DWORD PTR tv68[ebp]
	movzx	eax, BYTE PTR $LN31@xmlXPathCo[edx]
	jmp	DWORD PTR $LN32@xmlXPathCo[eax*4]
$LN5@xmlXPathCo:

; 12723:         case XPATH_OP_END:
; 12724:             return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN6@xmlXPathCo:

; 12725:         case XPATH_OP_UNION:
; 12726:             total =

	mov	ecx, DWORD PTR _first$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	imul	eax, DWORD PTR [edx+4], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEvalFirst
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _total$[ebp], eax

; 12727:                 xmlXPathCompOpEvalFirst(ctxt, &comp->steps[op->ch1],
; 12728:                                         first);
; 12729: 	    CHECK_ERROR0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN7@xmlXPathCo:

; 12730:             if ((ctxt->value != NULL)
; 12731:                 && (ctxt->value->type == XPATH_NODESET)
; 12732:                 && (ctxt->value->nodesetval != NULL)
; 12733:                 && (ctxt->value->nodesetval->nodeNr >= 1)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN8@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN8@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN8@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 1
	jl	SHORT $LN8@xmlXPathCo

; 12734:                 /*
; 12735:                  * limit tree traversing to first node in the result
; 12736:                  */
; 12737: 		/*
; 12738: 		* OPTIMIZE TODO: This implicitely sorts
; 12739: 		*  the result, even if not needed. E.g. if the argument
; 12740: 		*  of the count() function, no sorting is needed.
; 12741: 		* OPTIMIZE TODO: How do we know if the node-list wasn't
; 12742: 		*  aready sorted?
; 12743: 		*/
; 12744: 		if (ctxt->value->nodesetval->nodeNr > 1)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 1
	jle	SHORT $LN9@xmlXPathCo

; 12745: 		    xmlXPathNodeSetSort(ctxt->value->nodesetval);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetSort
	add	esp, 4
$LN9@xmlXPathCo:

; 12746:                 *first = ctxt->value->nodesetval->nodeTab[0];

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _first$[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax], ecx
$LN8@xmlXPathCo:

; 12747:             }
; 12748:             cur =

	mov	edx, DWORD PTR _first$[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+8], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEvalFirst
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur$[ebp], eax

; 12749:                 xmlXPathCompOpEvalFirst(ctxt, &comp->steps[op->ch2],
; 12750:                                         first);
; 12751: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN10@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN10@xmlXPathCo:

; 12752: 
; 12753:             arg2 = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax

; 12754:             arg1 = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg1$[ebp], eax

; 12755:             if ((arg1 == NULL) || (arg1->type != XPATH_NODESET) ||
; 12756:                 (arg2 == NULL) || (arg2->type != XPATH_NODESET)) {

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN12@xmlXPathCo
	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 1
	jne	SHORT $LN12@xmlXPathCo
	cmp	DWORD PTR _arg2$[ebp], 0
	je	SHORT $LN12@xmlXPathCo
	mov	edx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN11@xmlXPathCo
$LN12@xmlXPathCo:

; 12757: 	        xmlXPathReleaseObject(ctxt->context, arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12758: 	        xmlXPathReleaseObject(ctxt->context, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12759:                 XP_ERROR0(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN11@xmlXPathCo:

; 12760:             }
; 12761: 
; 12762:             arg1->nodesetval = xmlXPathNodeSetMerge(arg1->nodesetval,

	mov	ecx, DWORD PTR _arg2$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathNodeSetMerge
	add	esp, 8
	mov	edx, DWORD PTR _arg1$[ebp]
	mov	DWORD PTR [edx+4], eax

; 12763:                                                     arg2->nodesetval);
; 12764:             valuePush(ctxt, arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 12765: 	    xmlXPathReleaseObject(ctxt->context, arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 12766:             /* optimizer */
; 12767: 	    if (total > cur)

	mov	edx, DWORD PTR _total$[ebp]
	cmp	edx, DWORD PTR _cur$[ebp]
	jle	SHORT $LN13@xmlXPathCo

; 12768: 		xmlXPathCompSwap(op);

	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	call	_xmlXPathCompSwap
	add	esp, 4
$LN13@xmlXPathCo:

; 12769:             return (total + cur);

	mov	eax, DWORD PTR _total$[ebp]
	add	eax, DWORD PTR _cur$[ebp]
	jmp	$LN1@xmlXPathCo
$LN14@xmlXPathCo:

; 12770:         case XPATH_OP_ROOT:
; 12771:             xmlXPathRoot(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRoot
	add	esp, 4

; 12772:             return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN15@xmlXPathCo:

; 12773:         case XPATH_OP_NODE:
; 12774:             if (op->ch1 != -1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+4], -1
	je	SHORT $LN16@xmlXPathCo

; 12775:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN16@xmlXPathCo:

; 12776: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN17@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN17@xmlXPathCo:

; 12777:             if (op->ch2 != -1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+8], -1
	je	SHORT $LN18@xmlXPathCo

; 12778:                 total += xmlXPathCompOpEval(ctxt, &comp->steps[op->ch2]);

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+8], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN18@xmlXPathCo:

; 12779: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN19@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN19@xmlXPathCo:

; 12780: 	    valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 12781: 		ctxt->context->node));
; 12782:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN20@xmlXPathCo:

; 12783:         case XPATH_OP_COLLECT:{
; 12784:                 if (op->ch1 == -1)

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+4], -1
	jne	SHORT $LN21@xmlXPathCo

; 12785:                     return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN21@xmlXPathCo:

; 12786: 
; 12787:                 total = xmlXPathCompOpEval(ctxt, &comp->steps[op->ch1]);

	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEval
	add	esp, 8
	mov	DWORD PTR _total$[ebp], eax

; 12788: 		CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN22@xmlXPathCo
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN22@xmlXPathCo:

; 12789: 
; 12790:                 total += xmlXPathNodeCollectAndTest(ctxt, op, first, NULL, 0);

	push	0
	push	0
	mov	edx, DWORD PTR _first$[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNodeCollectAndTest
	add	esp, 20					; 00000014H
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 12791:                 return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	$LN1@xmlXPathCo
$LN23@xmlXPathCo:

; 12792:             }
; 12793:         case XPATH_OP_VALUE:
; 12794:             valuePush(ctxt,

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheObjectCopy
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 12795:                       xmlXPathCacheObjectCopy(ctxt->context,
; 12796: 			(xmlXPathObjectPtr) op->value4));
; 12797:             return (0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN24@xmlXPathCo:

; 12798:         case XPATH_OP_SORT:
; 12799:             if (op->ch1 != -1)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx+4], -1
	je	SHORT $LN25@xmlXPathCo

; 12800:                 total +=

	mov	edx, DWORD PTR _first$[ebp]
	push	edx
	mov	eax, DWORD PTR _op$[ebp]
	imul	ecx, DWORD PTR [eax+4], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEvalFirst
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax
$LN25@xmlXPathCo:

; 12801:                     xmlXPathCompOpEvalFirst(ctxt, &comp->steps[op->ch1],
; 12802:                                             first);
; 12803: 	    CHECK_ERROR0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN26@xmlXPathCo
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCo
$LN26@xmlXPathCo:

; 12804:             if ((ctxt->value != NULL)
; 12805:                 && (ctxt->value->type == XPATH_NODESET)
; 12806:                 && (ctxt->value->nodesetval != NULL)
; 12807: 		&& (ctxt->value->nodesetval->nodeNr > 1))

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN27@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 1
	jne	SHORT $LN27@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN27@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax], 1
	jle	SHORT $LN27@xmlXPathCo

; 12808:                 xmlXPathNodeSetSort(ctxt->value->nodesetval);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathNodeSetSort
	add	esp, 4
$LN27@xmlXPathCo:

; 12809:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	SHORT $LN1@xmlXPathCo
$LN28@xmlXPathCo:

; 12810: #ifdef XP_OPTIMIZED_FILTER_FIRST
; 12811: 	case XPATH_OP_FILTER:
; 12812:                 total += xmlXPathCompOpEvalFilterFirst(ctxt, op, first);

	mov	ecx, DWORD PTR _first$[ebp]
	push	ecx
	mov	edx, DWORD PTR _op$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompOpEvalFilterFirst
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR _total$[ebp], eax

; 12813:             return (total);

	mov	eax, DWORD PTR _total$[ebp]
	jmp	SHORT $LN1@xmlXPathCo
$LN29@xmlXPathCo:

; 12814: #endif
; 12815:         default:
; 12816:             return (xmlXPathCompOpEval(ctxt, op));

	mov	ecx, DWORD PTR _op$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathCompOpEval
	add	esp, 8
$LN1@xmlXPathCo:

; 12817:     }
; 12818: }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN32@xmlXPathCo:
	DD	$LN5@xmlXPathCo
	DD	$LN6@xmlXPathCo
	DD	$LN14@xmlXPathCo
	DD	$LN15@xmlXPathCo
	DD	$LN20@xmlXPathCo
	DD	$LN23@xmlXPathCo
	DD	$LN28@xmlXPathCo
	DD	$LN24@xmlXPathCo
	DD	$LN29@xmlXPathCo
$LN31@xmlXPathCo:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	7
_xmlXPathCompOpEvalFirst ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathReleaseObject
_TEXT	SEGMENT
tv71 = -20						; size = 4
_node$1 = -16						; size = 4
_i$2 = -12						; size = 4
_tmpset$3 = -8						; size = 4
_cache$4 = -4						; size = 4
_ctxt$ = 8						; size = 4
_obj$ = 12						; size = 4
_xmlXPathReleaseObject PROC				; COMDAT

; 5537 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5538 : #define XP_CACHE_ADD(sl, o) if (sl == NULL) { \
; 5539 : 	sl = xmlPointerListCreate(10); if (sl == NULL) goto free_obj; } \
; 5540 :     if (xmlPointerListAddSize(sl, obj, 0) == -1) goto free_obj;
; 5541 : 
; 5542 : #define XP_CACHE_WANTS(sl, n) ((sl == NULL) || ((sl)->number < n))
; 5543 : 
; 5544 :     if (obj == NULL)

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN7@xmlXPathRe

; 5545 : 	return;

	jmp	$LN1@xmlXPathRe
$LN7@xmlXPathRe:

; 5546 :     if ((ctxt == NULL) || (ctxt->cache == NULL)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN10@xmlXPathRe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	jne	SHORT $LN8@xmlXPathRe
$LN10@xmlXPathRe:

; 5547 : 	 xmlXPathFreeObject(obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	_xmlXPathFreeObject
	add	esp, 4

; 5548 :     } else {

	jmp	$LN1@xmlXPathRe
$LN8@xmlXPathRe:

; 5549 : 	xmlXPathContextCachePtr cache =

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+200]
	mov	DWORD PTR _cache$4[ebp], eax

; 5550 : 	    (xmlXPathContextCachePtr) ctxt->cache;
; 5551 : 
; 5552 : 	switch (obj->type) {

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv71[ebp], edx
	mov	eax, DWORD PTR tv71[ebp]
	sub	eax, 1
	mov	DWORD PTR tv71[ebp], eax
	cmp	DWORD PTR tv71[ebp], 8
	ja	$LN42@xmlXPathRe
	mov	ecx, DWORD PTR tv71[ebp]
	jmp	DWORD PTR $LN58@xmlXPathRe[ecx*4]
$LN11@xmlXPathRe:

; 5553 : 	    case XPATH_NODESET:
; 5554 : 	    case XPATH_XSLT_TREE:
; 5555 : 		if (obj->nodesetval != NULL) {

	mov	edx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	$LN12@xmlXPathRe

; 5556 : 		    if (obj->boolval) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN13@xmlXPathRe

; 5557 : 			/*
; 5558 : 			* It looks like the @boolval is used for
; 5559 : 			* evaluation if this an XSLT Result Tree Fragment.
; 5560 : 			* TODO: Check if this assumption is correct.
; 5561 : 			*/
; 5562 : 			obj->type = XPATH_XSLT_TREE; /* just for debugging */

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx], 9

; 5563 : 			xmlXPathFreeValueTree(obj->nodesetval);

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathFreeValueTree
	add	esp, 4

; 5564 : 			obj->nodesetval = NULL;

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+4], 0
	jmp	$LN12@xmlXPathRe
$LN13@xmlXPathRe:

; 5565 : 		    } else if ((obj->nodesetval->nodeMax <= 40) &&

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+4], 40			; 00000028H
	jg	SHORT $LN15@xmlXPathRe
	mov	ecx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN17@xmlXPathRe
	mov	edx, DWORD PTR _cache$4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+20]
	jge	SHORT $LN15@xmlXPathRe
$LN17@xmlXPathRe:

; 5566 : 			(XP_CACHE_WANTS(cache->nodesetObjs,
; 5567 : 					cache->maxNodeset)))
; 5568 : 		    {
; 5569 : 			XP_CACHE_ADD(cache->nodesetObjs, obj);

	mov	eax, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN18@xmlXPathRe
	push	10					; 0000000aH
	call	_xmlPointerListCreate
	add	esp, 4
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN18@xmlXPathRe
	jmp	$free_obj$59
$LN18@xmlXPathRe:
	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_xmlPointerListAddSize
	add	esp, 12					; 0000000cH
	cmp	eax, -1
	jne	SHORT $LN20@xmlXPathRe
	jmp	$free_obj$59
$LN20@xmlXPathRe:

; 5570 : 			goto obj_cached;

	jmp	$obj_cached$60

; 5571 : 		    } else {

	jmp	SHORT $LN12@xmlXPathRe
$LN15@xmlXPathRe:

; 5572 : 			xmlXPathFreeNodeSet(obj->nodesetval);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathFreeNodeSet
	add	esp, 4

; 5573 : 			obj->nodesetval = NULL;

	mov	edx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN12@xmlXPathRe:

; 5574 : 		    }
; 5575 : 		}
; 5576 : 		break;

	jmp	$LN2@xmlXPathRe
$LN21@xmlXPathRe:

; 5577 : 	    case XPATH_STRING:
; 5578 : 		if (obj->stringval != NULL)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN22@xmlXPathRe

; 5579 : 		    xmlFree(obj->stringval);

	mov	esi, esp
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@xmlXPathRe:

; 5580 : 
; 5581 : 		if (XP_CACHE_WANTS(cache->stringObjs, cache->maxString)) {

	mov	eax, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN24@xmlXPathRe
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _cache$4[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+24]
	jge	SHORT $LN23@xmlXPathRe
$LN24@xmlXPathRe:

; 5582 : 		    XP_CACHE_ADD(cache->stringObjs, obj);

	mov	edx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN25@xmlXPathRe
	push	10					; 0000000aH
	call	_xmlPointerListCreate
	add	esp, 4
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	edx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN25@xmlXPathRe
	jmp	$free_obj$59
$LN25@xmlXPathRe:
	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlPointerListAddSize
	add	esp, 12					; 0000000cH
	cmp	eax, -1
	jne	SHORT $LN27@xmlXPathRe
	jmp	$free_obj$59
$LN27@xmlXPathRe:

; 5583 : 		    goto obj_cached;

	jmp	$obj_cached$60
$LN23@xmlXPathRe:

; 5584 : 		}
; 5585 : 		break;

	jmp	$LN2@xmlXPathRe
$LN28@xmlXPathRe:

; 5586 : 	    case XPATH_BOOLEAN:
; 5587 : 		if (XP_CACHE_WANTS(cache->booleanObjs, cache->maxBoolean)) {

	mov	eax, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN30@xmlXPathRe
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _cache$4[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+28]
	jge	SHORT $LN29@xmlXPathRe
$LN30@xmlXPathRe:

; 5588 : 		    XP_CACHE_ADD(cache->booleanObjs, obj);

	mov	edx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN31@xmlXPathRe
	push	10					; 0000000aH
	call	_xmlPointerListCreate
	add	esp, 4
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN31@xmlXPathRe
	jmp	$free_obj$59
$LN31@xmlXPathRe:
	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlPointerListAddSize
	add	esp, 12					; 0000000cH
	cmp	eax, -1
	jne	SHORT $LN33@xmlXPathRe
	jmp	$free_obj$59
$LN33@xmlXPathRe:

; 5589 : 		    goto obj_cached;

	jmp	$obj_cached$60
$LN29@xmlXPathRe:

; 5590 : 		}
; 5591 : 		break;

	jmp	$LN2@xmlXPathRe
$LN34@xmlXPathRe:

; 5592 : 	    case XPATH_NUMBER:
; 5593 : 		if (XP_CACHE_WANTS(cache->numberObjs, cache->maxNumber)) {

	mov	eax, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN36@xmlXPathRe
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _cache$4[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+32]
	jge	SHORT $LN35@xmlXPathRe
$LN36@xmlXPathRe:

; 5594 : 		    XP_CACHE_ADD(cache->numberObjs, obj);

	mov	edx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN37@xmlXPathRe
	push	10					; 0000000aH
	call	_xmlPointerListCreate
	add	esp, 4
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN37@xmlXPathRe
	jmp	$free_obj$59
$LN37@xmlXPathRe:
	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlPointerListAddSize
	add	esp, 12					; 0000000cH
	cmp	eax, -1
	jne	SHORT $LN39@xmlXPathRe
	jmp	$free_obj$59
$LN39@xmlXPathRe:

; 5595 : 		    goto obj_cached;

	jmp	$obj_cached$60
$LN35@xmlXPathRe:

; 5596 : 		}
; 5597 : 		break;

	jmp	SHORT $LN2@xmlXPathRe
$LN40@xmlXPathRe:

; 5598 : #ifdef LIBXML_XPTR_ENABLED
; 5599 : 	    case XPATH_LOCATIONSET:
; 5600 : 		if (obj->user != NULL) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN41@xmlXPathRe

; 5601 : 		    xmlXPtrFreeLocationSet(obj->user);

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlXPtrFreeLocationSet
	add	esp, 4
$LN41@xmlXPathRe:

; 5602 : 		}
; 5603 : 		goto free_obj;

	jmp	$free_obj$59
$LN42@xmlXPathRe:

; 5604 : #endif
; 5605 : 	    default:
; 5606 : 		goto free_obj;

	jmp	$free_obj$59
$LN2@xmlXPathRe:

; 5607 : 	}
; 5608 : 
; 5609 : 	/*
; 5610 : 	* Fallback to adding to the misc-objects slot.
; 5611 : 	*/
; 5612 : 	if (XP_CACHE_WANTS(cache->miscObjs, cache->maxMisc)) {

	mov	eax, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN45@xmlXPathRe
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _cache$4[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+36]
	jge	SHORT $LN43@xmlXPathRe
$LN45@xmlXPathRe:

; 5613 : 	    XP_CACHE_ADD(cache->miscObjs, obj);

	mov	edx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN46@xmlXPathRe
	push	10					; 0000000aH
	call	_xmlPointerListCreate
	add	esp, 4
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _cache$4[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN46@xmlXPathRe
	jmp	$free_obj$59
$LN46@xmlXPathRe:
	push	0
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cache$4[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlPointerListAddSize
	add	esp, 12					; 0000000cH
	cmp	eax, -1
	jne	SHORT $LN48@xmlXPathRe
	jmp	$free_obj$59
$LN48@xmlXPathRe:

; 5614 : 	} else

	jmp	SHORT $obj_cached$60
$LN43@xmlXPathRe:

; 5615 : 	    goto free_obj;

	jmp	$free_obj$59
$obj_cached$60:

; 5616 : 
; 5617 : obj_cached:
; 5618 : 
; 5619 : #ifdef XP_DEBUG_OBJ_USAGE
; 5620 : 	xmlXPathDebugObjUsageReleased(ctxt, obj->type);
; 5621 : #endif
; 5622 : 
; 5623 : 	if (obj->nodesetval != NULL) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN49@xmlXPathRe

; 5624 : 	    xmlNodeSetPtr tmpset = obj->nodesetval;

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _tmpset$3[ebp], edx

; 5625 : 
; 5626 : 	    /*
; 5627 : 	    * TODO: Due to those nasty ns-nodes, we need to traverse
; 5628 : 	    *  the list and free the ns-nodes.
; 5629 : 	    * URGENT TODO: Check if it's actually slowing things down.
; 5630 : 	    *  Maybe we shouldn't try to preserve the list.
; 5631 : 	    */
; 5632 : 	    if (tmpset->nodeNr > 1) {

	mov	eax, DWORD PTR _tmpset$3[ebp]
	cmp	DWORD PTR [eax], 1
	jle	SHORT $LN51@xmlXPathRe

; 5633 : 		int i;
; 5634 : 		xmlNodePtr node;
; 5635 : 
; 5636 : 		for (i = 0; i < tmpset->nodeNr; i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN6@xmlXPathRe
$LN4@xmlXPathRe:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN6@xmlXPathRe:
	mov	edx, DWORD PTR _tmpset$3[ebp]
	mov	eax, DWORD PTR _i$2[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN5@xmlXPathRe

; 5637 : 		    node = tmpset->nodeTab[i];

	mov	ecx, DWORD PTR _tmpset$3[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _node$1[ebp], ecx

; 5638 : 		    if ((node != NULL) &&

	cmp	DWORD PTR _node$1[ebp], 0
	je	SHORT $LN53@xmlXPathRe
	mov	edx, DWORD PTR _node$1[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN53@xmlXPathRe

; 5639 : 			(node->type == XML_NAMESPACE_DECL))
; 5640 : 		    {
; 5641 : 			xmlXPathNodeSetFreeNs((xmlNsPtr) node);

	mov	eax, DWORD PTR _node$1[ebp]
	push	eax
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4
$LN53@xmlXPathRe:

; 5642 : 		    }
; 5643 : 		}

	jmp	SHORT $LN4@xmlXPathRe
$LN5@xmlXPathRe:

; 5644 : 	    } else if (tmpset->nodeNr == 1) {

	jmp	SHORT $LN52@xmlXPathRe
$LN51@xmlXPathRe:
	mov	ecx, DWORD PTR _tmpset$3[ebp]
	cmp	DWORD PTR [ecx], 1
	jne	SHORT $LN52@xmlXPathRe

; 5645 : 		if ((tmpset->nodeTab[0] != NULL) &&

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tmpset$3[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [eax+edx], 0
	je	SHORT $LN52@xmlXPathRe
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _tmpset$3[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+ecx]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN52@xmlXPathRe

; 5646 : 		    (tmpset->nodeTab[0]->type == XML_NAMESPACE_DECL))
; 5647 : 		    xmlXPathNodeSetFreeNs((xmlNsPtr) tmpset->nodeTab[0]);

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _tmpset$3[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+eax]
	push	eax
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4
$LN52@xmlXPathRe:

; 5648 : 	    }
; 5649 : 	    tmpset->nodeNr = 0;

	mov	ecx, DWORD PTR _tmpset$3[ebp]
	mov	DWORD PTR [ecx], 0

; 5650 : 	    memset(obj, 0, sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 5651 : 	    obj->nodesetval = tmpset;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR _tmpset$3[ebp]
	mov	DWORD PTR [eax+4], ecx

; 5652 : 	} else

	jmp	SHORT $LN50@xmlXPathRe
$LN49@xmlXPathRe:

; 5653 : 	    memset(obj, 0, sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
$LN50@xmlXPathRe:

; 5654 : 
; 5655 : 	return;

	jmp	SHORT $LN1@xmlXPathRe
$free_obj$59:

; 5656 : 
; 5657 : free_obj:
; 5658 : 	/*
; 5659 : 	* Cache is full; free the object.
; 5660 : 	*/
; 5661 : 	if (obj->nodesetval != NULL)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN56@xmlXPathRe

; 5662 : 	    xmlXPathFreeNodeSet(obj->nodesetval);

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathFreeNodeSet
	add	esp, 4
$LN56@xmlXPathRe:

; 5663 : #ifdef XP_DEBUG_OBJ_USAGE
; 5664 : 	xmlXPathDebugObjUsageReleased(NULL, obj->type);
; 5665 : #endif
; 5666 : 	xmlFree(obj);

	mov	esi, esp
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathRe:

; 5667 :     }
; 5668 :     return;
; 5669 : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN58@xmlXPathRe:
	DD	$LN11@xmlXPathRe
	DD	$LN28@xmlXPathRe
	DD	$LN34@xmlXPathRe
	DD	$LN21@xmlXPathRe
	DD	$LN42@xmlXPathRe
	DD	$LN42@xmlXPathRe
	DD	$LN40@xmlXPathRe
	DD	$LN42@xmlXPathRe
	DD	$LN11@xmlXPathRe
_xmlXPathReleaseObject ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFreeValueTree
_TEXT	SEGMENT
_i$ = -4						; size = 4
_obj$ = 8						; size = 4
_xmlXPathFreeValueTree PROC				; COMDAT

; 4267 : xmlXPathFreeValueTree(xmlNodeSetPtr obj) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4268 :     int i;
; 4269 : 
; 4270 :     if (obj == NULL) return;

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN5@xmlXPathFr
	jmp	$LN1@xmlXPathFr
$LN5@xmlXPathFr:

; 4271 : 
; 4272 :     if (obj->nodeTab != NULL) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN6@xmlXPathFr

; 4273 : 	for (i = 0;i < obj->nodeNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathFr
$LN2@xmlXPathFr:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathFr:
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@xmlXPathFr

; 4274 : 	    if (obj->nodeTab[i] != NULL) {

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN7@xmlXPathFr

; 4275 : 		if (obj->nodeTab[i]->type == XML_NAMESPACE_DECL) {

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN8@xmlXPathFr

; 4276 : 		    xmlXPathNodeSetFreeNs((xmlNsPtr) obj->nodeTab[i]);

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4

; 4277 : 		} else {

	jmp	SHORT $LN7@xmlXPathFr
$LN8@xmlXPathFr:

; 4278 : 		    xmlFreeNodeList(obj->nodeTab[i]);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_xmlFreeNodeList
	add	esp, 4
$LN7@xmlXPathFr:

; 4279 : 		}
; 4280 : 	    }
; 4281 : 	}

	jmp	SHORT $LN2@xmlXPathFr
$LN3@xmlXPathFr:

; 4282 : 	xmlFree(obj->nodeTab);

	mov	esi, esp
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlXPathFr:

; 4283 :     }
; 4284 :     xmlFree(obj);

	mov	esi, esp
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathFr:

; 4285 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathFreeValueTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlPointerListFree
_TEXT	SEGMENT
_list$ = 8						; size = 4
_xmlPointerListFree PROC				; COMDAT

; 842  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 843  :     if (list == NULL)

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN2@xmlPointer

; 844  : 	return;

	jmp	SHORT $LN1@xmlPointer
$LN2@xmlPointer:

; 845  :     if (list->items != NULL)

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlPointer

; 846  : 	xmlFree(list->items);

	mov	esi, esp
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlPointer:

; 847  :     xmlFree(list);

	mov	esi, esp
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlPointer:

; 848  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlPointerListFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlPointerListCreate
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_initialSize$ = 8					; size = 4
_xmlPointerListCreate PROC				; COMDAT

; 817  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 818  :     xmlPointerListPtr ret;
; 819  : 
; 820  :     ret = xmlMalloc(sizeof(xmlPointerList));

	mov	esi, esp
	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 821  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlPointer

; 822  : 	xmlXPathErrMemory(NULL,

	push	OFFSET ??_C@_0CH@GLHDGMAA@xmlPointerListCreate?3?5allocatin@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 823  : 	    "xmlPointerListCreate: allocating item\n");
; 824  : 	return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlPointer
$LN2@xmlPointer:

; 825  :     }
; 826  :     memset(ret, 0, sizeof(xmlPointerList));

	xor	eax, eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 827  :     if (initialSize > 0) {

	cmp	DWORD PTR _initialSize$[ebp], 0
	jle	SHORT $LN3@xmlPointer

; 828  : 	xmlPointerListAddSize(ret, NULL, initialSize);

	mov	edx, DWORD PTR _initialSize$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlPointerListAddSize
	add	esp, 12					; 0000000cH

; 829  : 	ret->number = 0;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN3@xmlPointer:

; 830  :     }
; 831  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlPointer:

; 832  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlPointerListCreate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlPointerListAddSize
_TEXT	SEGMENT
_list$ = 8						; size = 4
_item$ = 12						; size = 4
_initialSize$ = 16					; size = 4
_xmlPointerListAddSize PROC				; COMDAT

; 776  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 777  :     if (list->items == NULL) {

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@xmlPointer

; 778  : 	if (initialSize <= 0)

	cmp	DWORD PTR _initialSize$[ebp], 0
	jg	SHORT $LN4@xmlPointer

; 779  : 	    initialSize = 1;

	mov	DWORD PTR _initialSize$[ebp], 1
$LN4@xmlPointer:

; 780  : 	list->items = (void **) xmlMalloc(initialSize * sizeof(void *));

	mov	ecx, DWORD PTR _initialSize$[ebp]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [edx], eax

; 781  : 	if (list->items == NULL) {

	mov	eax, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN5@xmlPointer

; 782  : 	    xmlXPathErrMemory(NULL,

	push	OFFSET ??_C@_0CH@GLHDGMAA@xmlPointerListCreate?3?5allocatin@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 783  : 		"xmlPointerListCreate: allocating item\n");
; 784  : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlPointer
$LN5@xmlPointer:

; 785  : 	}
; 786  : 	list->number = 0;

	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 787  : 	list->size = initialSize;

	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR _initialSize$[ebp]
	mov	DWORD PTR [edx+8], eax
	jmp	$LN3@xmlPointer
$LN2@xmlPointer:

; 788  :     } else if (list->size <= list->number) {

	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+4]
	jg	SHORT $LN3@xmlPointer

; 789  :         if (list->size > 50000000) {

	mov	ecx, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [ecx+8], 50000000		; 02faf080H
	jle	SHORT $LN7@xmlPointer

; 790  : 	    xmlXPathErrMemory(NULL,

	push	OFFSET ??_C@_0CL@LEBBNDKO@xmlPointerListAddSize?3?5re?9alloc@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 791  : 		"xmlPointerListAddSize: re-allocating item\n");
; 792  :             return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlPointer
$LN7@xmlPointer:

; 793  :         }
; 794  : 	list->size *= 2;

	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 1
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 795  : 	list->items = (void **) xmlRealloc(list->items,

	mov	edx, DWORD PTR _list$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _list$[ebp]
	mov	DWORD PTR [ecx], eax

; 796  : 	    list->size * sizeof(void *));
; 797  : 	if (list->items == NULL) {

	mov	edx, DWORD PTR _list$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN3@xmlPointer

; 798  : 	    xmlXPathErrMemory(NULL,

	push	OFFSET ??_C@_0CL@LEBBNDKO@xmlPointerListAddSize?3?5re?9alloc@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 799  : 		"xmlPointerListAddSize: re-allocating item\n");
; 800  : 	    list->size = 0;

	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+8], 0

; 801  : 	    return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlPointer
$LN3@xmlPointer:

; 802  : 	}
; 803  :     }
; 804  :     list->items[list->number++] = item;

	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _list$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	ecx, DWORD PTR _list$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR [eax+4], edx

; 805  :     return(0);

	xor	eax, eax
$LN1@xmlPointer:

; 806  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlPointerListAddSize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathPErrMemory
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_extra$ = 12						; size = 4
_xmlXPathPErrMemory PROC				; COMDAT

; 668  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 669  :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathPE

; 670  : 	xmlXPathErrMemory(NULL, extra);

	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathPE
$LN2@xmlXPathPE:

; 671  :     else {
; 672  : 	ctxt->error = XPATH_MEMORY_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH

; 673  : 	xmlXPathErrMemory(ctxt->context, extra);

	mov	edx, DWORD PTR _extra$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathErrMemory
	add	esp, 8
$LN1@xmlXPathPE:

; 674  :     }
; 675  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathPErrMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathErrMemory
_TEXT	SEGMENT
_buf$1 = -204						; size = 200
_ctxt$ = 8						; size = 4
_extra$ = 12						; size = 4
_xmlXPathErrMemory PROC					; COMDAT

; 626  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 627  :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN2@xmlXPathEr

; 628  :         if (extra) {

	cmp	DWORD PTR _extra$[ebp], 0
	je	SHORT $LN4@xmlXPathEr

; 629  :             xmlChar buf[200];
; 630  : 
; 631  :             xmlStrPrintf(buf, 200,

	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	200					; 000000c8H
	lea	ecx, DWORD PTR _buf$1[ebp]
	push	ecx
	call	_xmlStrPrintf
	add	esp, 16					; 00000010H

; 632  :                          "Memory allocation failed : %s\n",
; 633  :                          extra);
; 634  :             ctxt->lastError.message = (char *) xmlStrdup(buf);

	lea	edx, DWORD PTR _buf$1[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+144], eax

; 635  :         } else {

	jmp	SHORT $LN5@xmlXPathEr
$LN4@xmlXPathEr:

; 636  :             ctxt->lastError.message = (char *)

	push	OFFSET ??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+144], eax
$LN5@xmlXPathEr:

; 637  : 	       xmlStrdup(BAD_CAST "Memory allocation failed\n");
; 638  :         }
; 639  :         ctxt->lastError.domain = XML_FROM_XPATH;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+136], 12			; 0000000cH

; 640  :         ctxt->lastError.code = XML_ERR_NO_MEMORY;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+140], 2

; 641  : 	if (ctxt->error != NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+132], 0
	je	SHORT $LN6@xmlXPathEr

; 642  : 	    ctxt->error(ctxt->userData, &ctxt->lastError);

	mov	eax, DWORD PTR _ctxt$[ebp]
	add	eax, 136				; 00000088H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlXPathEr:

; 643  :     } else {

	jmp	SHORT $LN1@xmlXPathEr
$LN2@xmlXPathEr:

; 644  :         if (extra)

	cmp	DWORD PTR _extra$[ebp], 0
	je	SHORT $LN7@xmlXPathEr

; 645  :             __xmlRaiseError(NULL, NULL, NULL,

	mov	edx, DWORD PTR _extra$[ebp]
	push	edx
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	0
	push	0
	push	3
	push	2
	push	12					; 0000000cH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
	jmp	SHORT $LN1@xmlXPathEr
$LN7@xmlXPathEr:

; 646  :                             NULL, NULL, XML_FROM_XPATH,
; 647  :                             XML_ERR_NO_MEMORY, XML_ERR_FATAL, NULL, 0,
; 648  :                             extra, NULL, NULL, 0, 0,
; 649  :                             "Memory allocation failed : %s\n", extra);
; 650  :         else
; 651  :             __xmlRaiseError(NULL, NULL, NULL,

	push	OFFSET ??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	2
	push	12					; 0000000cH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 64					; 00000040H
$LN1@xmlXPathEr:

; 652  :                             NULL, NULL, XML_FROM_XPATH,
; 653  :                             XML_ERR_NO_MEMORY, XML_ERR_FATAL, NULL, 0,
; 654  :                             NULL, NULL, NULL, 0, 0,
; 655  :                             "Memory allocation failed\n");
; 656  :     }
; 657  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@xmlXPathEr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@xmlXPathEr:
	DD	1
	DD	$LN11@xmlXPathEr
$LN11@xmlXPathEr:
	DD	-204					; ffffff34H
	DD	200					; 000000c8H
	DD	$LN10@xmlXPathEr
$LN10@xmlXPathEr:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_xmlXPathErrMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _PUSH_NEXT
_TEXT	SEGMENT
_run$ = -8						; size = 4
_len$ = -4						; size = 4
_dst$ = 8						; size = 4
_size$ = 12						; size = 4
_store$ = 16						; size = 4
_minrun$ = 20						; size = 4
_run_stack$ = 24					; size = 4
_stack_curr$ = 28					; size = 4
_curr$ = 32						; size = 4
_PUSH_NEXT PROC						; COMDAT

; 493  :                               size_t *curr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 494  :   size_t len = COUNT_RUN(dst, *curr, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_libxml_domnode_count_run
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _len$[ebp], eax

; 495  :   size_t run = minrun;

	mov	ecx, DWORD PTR _minrun$[ebp]
	mov	DWORD PTR _run$[ebp], ecx

; 496  : 
; 497  :   if (run > size - *curr) {

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR [edx]
	cmp	DWORD PTR _run$[ebp], eax
	jbe	SHORT $LN4@PUSH_NEXT

; 498  :     run = size - *curr;

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _run$[ebp], edx
$LN4@PUSH_NEXT:

; 499  :   }
; 500  : 
; 501  :   if (run > len) {

	mov	eax, DWORD PTR _run$[ebp]
	cmp	eax, DWORD PTR _len$[ebp]
	jbe	SHORT $LN5@PUSH_NEXT

; 502  :     BINARY_INSERTION_SORT_START(&dst[*curr], len, run);

	mov	ecx, DWORD PTR _run$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _dst$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_libxml_domnode_binary_insertion_sort_start
	add	esp, 12					; 0000000cH

; 503  :     len = run;

	mov	ecx, DWORD PTR _run$[ebp]
	mov	DWORD PTR _len$[ebp], ecx
$LN5@PUSH_NEXT:

; 504  :   }
; 505  : 
; 506  :   run_stack[*stack_curr].start = *curr;

	mov	edx, DWORD PTR _stack_curr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _run_stack$[ebp]
	mov	edx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	DWORD PTR [ecx+eax*8], edx

; 507  :   run_stack[*stack_curr].length = len;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _run_stack$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+ecx*8+4], eax

; 508  :   (*stack_curr)++;

	mov	ecx, DWORD PTR _stack_curr$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 1
	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	DWORD PTR [eax], edx

; 509  :   *curr += len;

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _curr$[ebp]
	mov	DWORD PTR [eax], edx

; 510  : 
; 511  :   if (*curr == size) {

	mov	ecx, DWORD PTR _curr$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _size$[ebp]
	jne	$LN6@PUSH_NEXT
$LN2@PUSH_NEXT:

; 512  :     /* finish up */
; 513  :     while (*stack_curr > 1) {

	mov	eax, DWORD PTR _stack_curr$[ebp]
	cmp	DWORD PTR [eax], 1
	jbe	SHORT $LN3@PUSH_NEXT

; 514  :       TIM_SORT_MERGE(dst, run_stack, *stack_curr, store);

	mov	ecx, DWORD PTR _store$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stack_curr$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _run_stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_libxml_domnode_tim_sort_merge
	add	esp, 16					; 00000010H

; 515  :       run_stack[*stack_curr - 2].length += run_stack[*stack_curr - 1].length;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _stack_curr$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _run_stack$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*8-12]
	mov	edx, DWORD PTR _run_stack$[ebp]
	add	ecx, DWORD PTR [edx+eax*8-4]
	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	eax, DWORD PTR _run_stack$[ebp]
	mov	DWORD PTR [eax+edx*8-12], ecx

; 516  :       (*stack_curr)--;

	mov	ecx, DWORD PTR _stack_curr$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	DWORD PTR [eax], edx

; 517  :     }

	jmp	SHORT $LN2@PUSH_NEXT
$LN3@PUSH_NEXT:

; 518  : 
; 519  :     if (store->storage != NULL) {

	mov	ecx, DWORD PTR _store$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN7@PUSH_NEXT

; 520  :       free(store->storage);

	mov	esi, esp
	mov	edx, DWORD PTR _store$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 521  :       store->storage = NULL;

	mov	ecx, DWORD PTR _store$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN7@PUSH_NEXT:

; 522  :     }
; 523  : 
; 524  :     return 0;

	xor	eax, eax
	jmp	SHORT $LN1@PUSH_NEXT
$LN6@PUSH_NEXT:

; 525  :   }
; 526  : 
; 527  :   return 1;

	mov	eax, 1
$LN1@PUSH_NEXT:

; 528  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_PUSH_NEXT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _libxml_domnode_tim_sort_collapse
_TEXT	SEGMENT
tv171 = -40						; size = 4
tv169 = -36						; size = 4
tv165 = -32						; size = 4
_CD$1 = -28						; size = 4
_BCD$2 = -24						; size = 4
_ABC$3 = -20						; size = 4
_D$4 = -16						; size = 4
_C$5 = -12						; size = 4
_B$6 = -8						; size = 4
_A$7 = -4						; size = 4
_dst$ = 8						; size = 4
_stack$ = 12						; size = 4
_stack_curr$ = 16					; size = 4
_store$ = 20						; size = 4
_size$ = 24						; size = 4
_libxml_domnode_tim_sort_collapse PROC			; COMDAT

; 424  :                              TEMP_STORAGE_T *store, const size_t size) {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4
$LN2@libxml_dom:

; 425  :   while (1) {

	mov	eax, 1
	test	eax, eax
	je	$LN3@libxml_dom

; 426  :     size_t A, B, C, D;
; 427  :     int ABC, BCD, CD;
; 428  : 
; 429  :     /* if the stack only has one thing on it, we are done with the collapse */
; 430  :     if (stack_curr <= 1) {

	cmp	DWORD PTR _stack_curr$[ebp], 1
	jg	SHORT $LN4@libxml_dom

; 431  :       break;

	jmp	$LN3@libxml_dom
$LN4@libxml_dom:

; 432  :     }
; 433  : 
; 434  :     /* if this is the last merge, just do it */
; 435  :     if ((stack_curr == 2) && (stack[0].length + stack[1].length == size)) {

	cmp	DWORD PTR _stack_curr$[ebp], 2
	jne	SHORT $LN5@libxml_dom
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+edx+4]
	mov	ecx, DWORD PTR _stack$[ebp]
	add	edx, DWORD PTR [ecx+eax+4]
	cmp	edx, DWORD PTR _size$[ebp]
	jne	SHORT $LN5@libxml_dom

; 436  :       TIM_SORT_MERGE(dst, stack, stack_curr, store);

	mov	edx, DWORD PTR _store$[ebp]
	push	edx
	mov	eax, DWORD PTR _stack_curr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_libxml_domnode_tim_sort_merge
	add	esp, 16					; 00000010H

; 437  :       stack[0].length += stack[1].length;

	mov	eax, 8
	imul	ecx, eax, 0
	mov	edx, 8
	shl	edx, 0
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	eax, DWORD PTR _stack$[ebp]
	add	ecx, DWORD PTR [eax+edx+4]
	mov	edx, 8
	imul	eax, edx, 0
	mov	edx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [edx+eax+4], ecx

; 438  :       stack_curr--;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _stack_curr$[ebp], eax

; 439  :       break;

	jmp	$LN3@libxml_dom

; 440  :     }

	jmp	$LN6@libxml_dom
$LN5@libxml_dom:

; 441  :     /* check if the invariant is off for a stack of 2 elements */
; 442  :     else if ((stack_curr == 2) && (stack[0].length <= stack[1].length)) {

	cmp	DWORD PTR _stack_curr$[ebp], 2
	jne	SHORT $LN7@libxml_dom
	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	esi, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+edx+4]
	cmp	edx, DWORD PTR [esi+eax+4]
	ja	SHORT $LN7@libxml_dom

; 443  :       TIM_SORT_MERGE(dst, stack, stack_curr, store);

	mov	eax, DWORD PTR _store$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stack_curr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _stack$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_libxml_domnode_tim_sort_merge
	add	esp, 16					; 00000010H

; 444  :       stack[0].length += stack[1].length;

	mov	ecx, 8
	imul	edx, ecx, 0
	mov	eax, 8
	shl	eax, 0
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+edx+4]
	mov	ecx, DWORD PTR _stack$[ebp]
	add	edx, DWORD PTR [ecx+eax+4]
	mov	eax, 8
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [eax+ecx+4], edx

; 445  :       stack_curr--;

	mov	ecx, DWORD PTR _stack_curr$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _stack_curr$[ebp], ecx

; 446  :       break;

	jmp	$LN3@libxml_dom
	jmp	SHORT $LN6@libxml_dom
$LN7@libxml_dom:

; 447  :     } else if (stack_curr == 2) {

	cmp	DWORD PTR _stack_curr$[ebp], 2
	jne	SHORT $LN6@libxml_dom

; 448  :       break;

	jmp	$LN3@libxml_dom
$LN6@libxml_dom:

; 449  :     }
; 450  : 
; 451  :     B = stack[stack_curr - 3].length;

	mov	edx, DWORD PTR _stack_curr$[ebp]
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-20]
	mov	DWORD PTR _B$6[ebp], ecx

; 452  :     C = stack[stack_curr - 2].length;

	mov	edx, DWORD PTR _stack_curr$[ebp]
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-12]
	mov	DWORD PTR _C$5[ebp], ecx

; 453  :     D = stack[stack_curr - 1].length;

	mov	edx, DWORD PTR _stack_curr$[ebp]
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-4]
	mov	DWORD PTR _D$4[ebp], ecx

; 454  : 
; 455  :     if (stack_curr >= 4) {

	cmp	DWORD PTR _stack_curr$[ebp], 4
	jl	SHORT $LN10@libxml_dom

; 456  :       A = stack[stack_curr - 4].length;

	mov	edx, DWORD PTR _stack_curr$[ebp]
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-28]
	mov	DWORD PTR _A$7[ebp], ecx

; 457  :       ABC = (A <= B + C);

	mov	edx, DWORD PTR _B$6[ebp]
	add	edx, DWORD PTR _C$5[ebp]
	cmp	DWORD PTR _A$7[ebp], edx
	ja	SHORT $LN16@libxml_dom
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN17@libxml_dom
$LN16@libxml_dom:
	mov	DWORD PTR tv165[ebp], 0
$LN17@libxml_dom:
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR _ABC$3[ebp], eax

; 458  :     } else {

	jmp	SHORT $LN11@libxml_dom
$LN10@libxml_dom:

; 459  :       ABC = 0;

	mov	DWORD PTR _ABC$3[ebp], 0
$LN11@libxml_dom:

; 460  :     }
; 461  : 
; 462  :     BCD = (B <= C + D) || ABC;

	mov	ecx, DWORD PTR _C$5[ebp]
	add	ecx, DWORD PTR _D$4[ebp]
	cmp	DWORD PTR _B$6[ebp], ecx
	jbe	SHORT $LN18@libxml_dom
	cmp	DWORD PTR _ABC$3[ebp], 0
	jne	SHORT $LN18@libxml_dom
	mov	DWORD PTR tv169[ebp], 0
	jmp	SHORT $LN19@libxml_dom
$LN18@libxml_dom:
	mov	DWORD PTR tv169[ebp], 1
$LN19@libxml_dom:
	mov	edx, DWORD PTR tv169[ebp]
	mov	DWORD PTR _BCD$2[ebp], edx

; 463  :     CD = (C <= D);

	mov	eax, DWORD PTR _C$5[ebp]
	cmp	eax, DWORD PTR _D$4[ebp]
	ja	SHORT $LN20@libxml_dom
	mov	DWORD PTR tv171[ebp], 1
	jmp	SHORT $LN21@libxml_dom
$LN20@libxml_dom:
	mov	DWORD PTR tv171[ebp], 0
$LN21@libxml_dom:
	mov	ecx, DWORD PTR tv171[ebp]
	mov	DWORD PTR _CD$1[ebp], ecx

; 464  : 
; 465  :     /* Both invariants are good */
; 466  :     if (!BCD && !CD) {

	cmp	DWORD PTR _BCD$2[ebp], 0
	jne	SHORT $LN12@libxml_dom
	cmp	DWORD PTR _CD$1[ebp], 0
	jne	SHORT $LN12@libxml_dom

; 467  :       break;

	jmp	$LN3@libxml_dom
$LN12@libxml_dom:

; 468  :     }
; 469  : 
; 470  :     /* left merge */
; 471  :     if (BCD && !CD) {

	cmp	DWORD PTR _BCD$2[ebp], 0
	je	SHORT $LN13@libxml_dom
	cmp	DWORD PTR _CD$1[ebp], 0
	jne	SHORT $LN13@libxml_dom

; 472  :       TIM_SORT_MERGE(dst, stack, stack_curr - 1, store);

	mov	edx, DWORD PTR _store$[ebp]
	push	edx
	mov	eax, DWORD PTR _stack_curr$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_libxml_domnode_tim_sort_merge
	add	esp, 16					; 00000010H

; 473  :       stack[stack_curr - 3].length += stack[stack_curr - 2].length;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-20]
	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	add	edx, DWORD PTR [ecx+eax*8-12]
	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [ecx+eax*8-20], edx

; 474  :       stack[stack_curr - 2] = stack[stack_curr - 1];

	mov	edx, DWORD PTR _stack_curr$[ebp]
	mov	eax, DWORD PTR _stack$[ebp]
	mov	ecx, DWORD PTR [eax+edx*8-8]
	mov	edx, DWORD PTR [eax+edx*8-4]
	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	esi, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [esi+eax*8-16], ecx
	mov	DWORD PTR [esi+eax*8-12], edx

; 475  :       stack_curr--;

	mov	ecx, DWORD PTR _stack_curr$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _stack_curr$[ebp], ecx

; 476  :     } else {

	jmp	SHORT $LN14@libxml_dom
$LN13@libxml_dom:

; 477  :       /* right merge */
; 478  :       TIM_SORT_MERGE(dst, stack, stack_curr, store);

	mov	edx, DWORD PTR _store$[ebp]
	push	edx
	mov	eax, DWORD PTR _stack_curr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_libxml_domnode_tim_sort_merge
	add	esp, 16					; 00000010H

; 479  :       stack[stack_curr - 2].length += stack[stack_curr - 1].length;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-12]
	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	add	edx, DWORD PTR [ecx+eax*8-4]
	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	DWORD PTR [ecx+eax*8-12], edx

; 480  :       stack_curr--;

	mov	edx, DWORD PTR _stack_curr$[ebp]
	sub	edx, 1
	mov	DWORD PTR _stack_curr$[ebp], edx
$LN14@libxml_dom:

; 481  :     }
; 482  :   }

	jmp	$LN2@libxml_dom
$LN3@libxml_dom:

; 483  : 
; 484  :   return stack_curr;

	mov	eax, DWORD PTR _stack_curr$[ebp]

; 485  : }

	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_libxml_domnode_tim_sort_collapse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _libxml_domnode_tim_sort_merge
_TEXT	SEGMENT
tv167 = -44						; size = 4
tv166 = -40						; size = 4
tv165 = -36						; size = 4
tv77 = -32						; size = 4
_k$ = -28						; size = 4
_j$ = -24						; size = 4
_i$ = -20						; size = 4
_storage$ = -16						; size = 4
_curr$ = -12						; size = 4
_B$ = -8						; size = 4
_A$ = -4						; size = 4
_dst$ = 8						; size = 4
_stack$ = 12						; size = 4
_stack_curr$ = 16					; size = 4
_store$ = 20						; size = 4
_libxml_domnode_tim_sort_merge PROC			; COMDAT

; 372  :                            TEMP_STORAGE_T *store) {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 373  :   const size_t A = stack[stack_curr - 2].length;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-12]
	mov	DWORD PTR _A$[ebp], edx

; 374  :   const size_t B = stack[stack_curr - 1].length;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-4]
	mov	DWORD PTR _B$[ebp], edx

; 375  :   const size_t curr = stack[stack_curr - 2].start;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-16]
	mov	DWORD PTR _curr$[ebp], edx

; 376  :   SORT_TYPE *storage;
; 377  :   size_t i, j, k;
; 378  :   TIM_SORT_RESIZE(store, MIN(A, B));

	mov	eax, DWORD PTR _A$[ebp]
	cmp	eax, DWORD PTR _B$[ebp]
	jae	SHORT $LN22@libxml_dom
	mov	ecx, DWORD PTR _A$[ebp]
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN23@libxml_dom
$LN22@libxml_dom:
	mov	edx, DWORD PTR _B$[ebp]
	mov	DWORD PTR tv77[ebp], edx
$LN23@libxml_dom:
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	mov	ecx, DWORD PTR _store$[ebp]
	push	ecx
	call	_libxml_domnode_tim_sort_resize
	add	esp, 8

; 379  :   storage = store->storage;

	mov	edx, DWORD PTR _store$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _storage$[ebp], eax

; 380  : 
; 381  :   /* left merge */
; 382  :   if (A < B) {

	mov	ecx, DWORD PTR _A$[ebp]
	cmp	ecx, DWORD PTR _B$[ebp]
	jae	$LN7@libxml_dom

; 383  :     memcpy(storage, &dst[curr], A * sizeof(SORT_TYPE));

	mov	edx, DWORD PTR _A$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _curr$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _storage$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 384  :     i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 385  :     j = curr + A;

	mov	ecx, DWORD PTR _curr$[ebp]
	add	ecx, DWORD PTR _A$[ebp]
	mov	DWORD PTR _j$[ebp], ecx

; 386  : 
; 387  :     for (k = curr; k < curr + A + B; k++) {

	mov	edx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR _k$[ebp], edx
	jmp	SHORT $LN4@libxml_dom
$LN2@libxml_dom:
	mov	eax, DWORD PTR _k$[ebp]
	add	eax, 1
	mov	DWORD PTR _k$[ebp], eax
$LN4@libxml_dom:
	mov	ecx, DWORD PTR _curr$[ebp]
	add	ecx, DWORD PTR _A$[ebp]
	add	ecx, DWORD PTR _B$[ebp]
	cmp	DWORD PTR _k$[ebp], ecx
	jae	$LN3@libxml_dom

; 388  :       if ((i < A) && (j < curr + A + B)) {

	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _A$[ebp]
	jae	SHORT $LN9@libxml_dom
	mov	eax, DWORD PTR _curr$[ebp]
	add	eax, DWORD PTR _A$[ebp]
	add	eax, DWORD PTR _B$[ebp]
	cmp	DWORD PTR _j$[ebp], eax
	jae	SHORT $LN9@libxml_dom

; 389  :         if (SORT_CMP(storage[i], dst[j]) <= 0) {

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _storage$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_wrap_cmp
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN11@libxml_dom

; 390  :           dst[k] = storage[i++];

	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _storage$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 391  :         } else {

	jmp	SHORT $LN12@libxml_dom
$LN11@libxml_dom:

; 392  :           dst[k] = dst[j++];

	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN12@libxml_dom:

; 393  :         }

	jmp	SHORT $LN10@libxml_dom
$LN9@libxml_dom:

; 394  :       } else if (i < A) {

	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _A$[ebp]
	jae	SHORT $LN13@libxml_dom

; 395  :         dst[k] = storage[i++];

	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _storage$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 396  :       } else {

	jmp	SHORT $LN10@libxml_dom
$LN13@libxml_dom:

; 397  :         break;

	jmp	SHORT $LN3@libxml_dom
$LN10@libxml_dom:

; 398  :       }
; 399  :     }

	jmp	$LN2@libxml_dom
$LN3@libxml_dom:

; 400  :   } else {

	jmp	$LN1@libxml_dom
$LN7@libxml_dom:

; 401  :     /* right merge */
; 402  :     memcpy(storage, &dst[curr + A], B * sizeof(SORT_TYPE));

	mov	edx, DWORD PTR _B$[ebp]
	shl	edx, 2
	push	edx
	mov	eax, DWORD PTR _curr$[ebp]
	add	eax, DWORD PTR _A$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _storage$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 403  :     i = B;

	mov	ecx, DWORD PTR _B$[ebp]
	mov	DWORD PTR _i$[ebp], ecx

; 404  :     j = curr + A;

	mov	edx, DWORD PTR _curr$[ebp]
	add	edx, DWORD PTR _A$[ebp]
	mov	DWORD PTR _j$[ebp], edx

; 405  :     k = curr + A + B;

	mov	eax, DWORD PTR _curr$[ebp]
	add	eax, DWORD PTR _A$[ebp]
	add	eax, DWORD PTR _B$[ebp]
	mov	DWORD PTR _k$[ebp], eax
$LN5@libxml_dom:

; 406  : 
; 407  :     while (k-- > curr) {

	mov	ecx, DWORD PTR _k$[ebp]
	mov	DWORD PTR tv165[ebp], ecx
	mov	edx, DWORD PTR _curr$[ebp]
	mov	DWORD PTR tv166[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	sub	eax, 1
	mov	DWORD PTR _k$[ebp], eax
	mov	ecx, DWORD PTR tv165[ebp]
	cmp	ecx, DWORD PTR tv166[ebp]
	jbe	SHORT $LN24@libxml_dom
	mov	DWORD PTR tv167[ebp], 1
	jmp	SHORT $LN25@libxml_dom
$LN24@libxml_dom:
	mov	DWORD PTR tv167[ebp], 0
$LN25@libxml_dom:
	cmp	DWORD PTR tv167[ebp], 0
	je	$LN1@libxml_dom

; 408  :       if ((i > 0) && (j > curr)) {

	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN15@libxml_dom
	mov	edx, DWORD PTR _j$[ebp]
	cmp	edx, DWORD PTR _curr$[ebp]
	jbe	SHORT $LN15@libxml_dom

; 409  :         if (SORT_CMP(dst[j - 1], storage[i - 1]) > 0) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _storage$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	push	edx
	call	_wrap_cmp
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN17@libxml_dom

; 410  :           dst[k] = dst[--j];

	mov	eax, DWORD PTR _j$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$[ebp], eax
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR _j$[ebp]
	mov	esi, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax

; 411  :         } else {

	jmp	SHORT $LN18@libxml_dom
$LN17@libxml_dom:

; 412  :           dst[k] = storage[--i];

	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _storage$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4]
	mov	DWORD PTR [eax+edx*4], ecx
$LN18@libxml_dom:

; 413  :         }

	jmp	SHORT $LN16@libxml_dom
$LN15@libxml_dom:

; 414  :       } else if (i > 0) {

	cmp	DWORD PTR _i$[ebp], 0
	jbe	SHORT $LN19@libxml_dom

; 415  :         dst[k] = storage[--i];

	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _storage$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4], edx

; 416  :       } else {

	jmp	SHORT $LN16@libxml_dom
$LN19@libxml_dom:

; 417  :         break;

	jmp	SHORT $LN1@libxml_dom
$LN16@libxml_dom:

; 418  :       }
; 419  :     }

	jmp	$LN5@libxml_dom
$LN1@libxml_dom:

; 420  :   }
; 421  : }

	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_libxml_domnode_tim_sort_merge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _libxml_domnode_tim_sort_resize
_TEXT	SEGMENT
_tempstore$1 = -4					; size = 4
_store$ = 8						; size = 4
_new_size$ = 12						; size = 4
_libxml_domnode_tim_sort_resize PROC			; COMDAT

; 356  : static void TIM_SORT_RESIZE(TEMP_STORAGE_T *store, const size_t new_size) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 357  :   if (store->alloc < new_size) {

	mov	eax, DWORD PTR _store$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _new_size$[ebp]
	jae	SHORT $LN4@libxml_dom

; 358  :     SORT_TYPE *tempstore = (SORT_TYPE *)realloc(store->storage, new_size * sizeof(SORT_TYPE));

	mov	edx, DWORD PTR _new_size$[ebp]
	shl	edx, 2
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _store$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__realloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tempstore$1[ebp], eax

; 359  : 
; 360  :     if (tempstore == NULL) {

	cmp	DWORD PTR _tempstore$1[ebp], 0
	jne	SHORT $LN3@libxml_dom

; 361  :       fprintf(stderr, "Error allocating temporary storage for tim sort: need %lu bytes",

	mov	edx, DWORD PTR _new_size$[ebp]
	shl	edx, 2
	push	edx
	push	OFFSET ??_C@_0EA@JENGBCEE@Error?5allocating?5temporary?5stor@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 362  :               (unsigned long)(sizeof(SORT_TYPE) * new_size));
; 363  :       exit(1);

	mov	esi, esp
	push	1
	call	DWORD PTR __imp__exit
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@libxml_dom:

; 364  :     }
; 365  : 
; 366  :     store->storage = tempstore;

	mov	eax, DWORD PTR _store$[ebp]
	mov	ecx, DWORD PTR _tempstore$1[ebp]
	mov	DWORD PTR [eax+4], ecx

; 367  :     store->alloc = new_size;

	mov	edx, DWORD PTR _store$[ebp]
	mov	eax, DWORD PTR _new_size$[ebp]
	mov	DWORD PTR [edx], eax
$LN4@libxml_dom:

; 368  :   }
; 369  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_libxml_domnode_tim_sort_resize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _libxml_domnode_check_invariant
_TEXT	SEGMENT
_B1$1 = -20						; size = 4
_A1$2 = -16						; size = 4
_C$ = -12						; size = 4
_B$ = -8						; size = 4
_A$ = -4						; size = 4
_stack$ = 8						; size = 4
_stack_curr$ = 12					; size = 4
_libxml_domnode_check_invariant PROC			; COMDAT

; 322  : static int CHECK_INVARIANT(TIM_SORT_RUN_T *stack, const int stack_curr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 323  :   size_t A, B, C;
; 324  : 
; 325  :   if (stack_curr < 2) {

	cmp	DWORD PTR _stack_curr$[ebp], 2
	jge	SHORT $LN2@libxml_dom

; 326  :     return 1;

	mov	eax, 1
	jmp	SHORT $LN1@libxml_dom
$LN2@libxml_dom:

; 327  :   }
; 328  : 
; 329  :   if (stack_curr == 2) {

	cmp	DWORD PTR _stack_curr$[ebp], 2
	jne	SHORT $LN3@libxml_dom

; 330  :     const size_t A1 = stack[stack_curr - 2].length;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-12]
	mov	DWORD PTR _A1$2[ebp], edx

; 331  :     const size_t B1 = stack[stack_curr - 1].length;

	mov	eax, DWORD PTR _stack_curr$[ebp]
	mov	ecx, DWORD PTR _stack$[ebp]
	mov	edx, DWORD PTR [ecx+eax*8-4]
	mov	DWORD PTR _B1$1[ebp], edx

; 332  : 
; 333  :     if (A1 <= B1) {

	mov	eax, DWORD PTR _A1$2[ebp]
	cmp	eax, DWORD PTR _B1$1[ebp]
	ja	SHORT $LN4@libxml_dom

; 334  :       return 0;

	xor	eax, eax
	jmp	SHORT $LN1@libxml_dom
$LN4@libxml_dom:

; 335  :     }
; 336  : 
; 337  :     return 1;

	mov	eax, 1
	jmp	SHORT $LN1@libxml_dom
$LN3@libxml_dom:

; 338  :   }
; 339  : 
; 340  :   A = stack[stack_curr - 3].length;

	mov	ecx, DWORD PTR _stack_curr$[ebp]
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8-20]
	mov	DWORD PTR _A$[ebp], eax

; 341  :   B = stack[stack_curr - 2].length;

	mov	ecx, DWORD PTR _stack_curr$[ebp]
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8-12]
	mov	DWORD PTR _B$[ebp], eax

; 342  :   C = stack[stack_curr - 1].length;

	mov	ecx, DWORD PTR _stack_curr$[ebp]
	mov	edx, DWORD PTR _stack$[ebp]
	mov	eax, DWORD PTR [edx+ecx*8-4]
	mov	DWORD PTR _C$[ebp], eax

; 343  : 
; 344  :   if ((A <= B + C) || (B <= C)) {

	mov	ecx, DWORD PTR _B$[ebp]
	add	ecx, DWORD PTR _C$[ebp]
	cmp	DWORD PTR _A$[ebp], ecx
	jbe	SHORT $LN6@libxml_dom
	mov	edx, DWORD PTR _B$[ebp]
	cmp	edx, DWORD PTR _C$[ebp]
	ja	SHORT $LN5@libxml_dom
$LN6@libxml_dom:

; 345  :     return 0;

	xor	eax, eax
	jmp	SHORT $LN1@libxml_dom
$LN5@libxml_dom:

; 346  :   }
; 347  : 
; 348  :   return 1;

	mov	eax, 1
$LN1@libxml_dom:

; 349  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_libxml_domnode_check_invariant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _libxml_domnode_count_run
_TEXT	SEGMENT
___SORT_SWAP_t$1 = -20					; size = 4
_end$ = -16						; size = 4
_start$ = -12						; size = 4
___SORT_SWAP_t$2 = -8					; size = 4
_curr$ = -4						; size = 4
_dst$ = 8						; size = 4
_start$ = 12						; size = 4
_size$ = 16						; size = 4
_libxml_domnode_count_run PROC				; COMDAT

; 270  : static size_t COUNT_RUN(SORT_TYPE *dst, const size_t start, const size_t size) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 271  :   size_t curr;
; 272  : 
; 273  :   if (size - start == 1) {

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	cmp	eax, 1
	jne	SHORT $LN6@libxml_dom

; 274  :     return 1;

	mov	eax, 1
	jmp	$LN1@libxml_dom
$LN6@libxml_dom:

; 275  :   }
; 276  : 
; 277  :   if (start >= size - 2) {

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 2
	cmp	DWORD PTR _start$[ebp], ecx
	jb	SHORT $LN7@libxml_dom

; 278  :     if (SORT_CMP(dst[size - 2], dst[size - 1]) > 0) {

	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4-4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4-8]
	push	ecx
	call	_wrap_cmp
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN8@libxml_dom

; 279  :       SORT_SWAP(dst[size - 2], dst[size - 1]);

	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4-8]
	mov	DWORD PTR ___SORT_SWAP_t$2[ebp], ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	esi, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4-4]
	mov	DWORD PTR [eax+edx*4-8], ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR ___SORT_SWAP_t$2[ebp]
	mov	DWORD PTR [eax+edx*4-4], ecx
$LN8@libxml_dom:

; 280  :     }
; 281  : 
; 282  :     return 2;

	mov	eax, 2
	jmp	$LN1@libxml_dom
$LN7@libxml_dom:

; 283  :   }
; 284  : 
; 285  :   curr = start + 2;

	mov	edx, DWORD PTR _start$[ebp]
	add	edx, 2
	mov	DWORD PTR _curr$[ebp], edx

; 286  : 
; 287  :   if (SORT_CMP(dst[start], dst[start + 1]) <= 0) {

	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _start$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_wrap_cmp
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN4@libxml_dom
$LN2@libxml_dom:

; 288  :     /* increasing run */
; 289  :     while (1) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN3@libxml_dom

; 290  :       if (curr == size - 1) {

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _curr$[ebp], ecx
	jne	SHORT $LN11@libxml_dom

; 291  :         break;

	jmp	SHORT $LN3@libxml_dom
$LN11@libxml_dom:

; 292  :       }
; 293  : 
; 294  :       if (SORT_CMP(dst[curr - 1], dst[curr]) > 0) {

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4-4]
	push	ecx
	call	_wrap_cmp
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN12@libxml_dom

; 295  :         break;

	jmp	SHORT $LN3@libxml_dom
$LN12@libxml_dom:

; 296  :       }
; 297  : 
; 298  :       curr++;

	mov	edx, DWORD PTR _curr$[ebp]
	add	edx, 1
	mov	DWORD PTR _curr$[ebp], edx

; 299  :     }

	jmp	SHORT $LN2@libxml_dom
$LN3@libxml_dom:

; 300  : 
; 301  :     return curr - start;

	mov	eax, DWORD PTR _curr$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
	jmp	$LN1@libxml_dom

; 302  :   } else {

	jmp	$LN1@libxml_dom
$LN4@libxml_dom:

; 303  :     /* decreasing run */
; 304  :     while (1) {

	mov	eax, 1
	test	eax, eax
	je	SHORT $LN5@libxml_dom

; 305  :       if (curr == size - 1) {

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _curr$[ebp], ecx
	jne	SHORT $LN13@libxml_dom

; 306  :         break;

	jmp	SHORT $LN5@libxml_dom
$LN13@libxml_dom:

; 307  :       }
; 308  : 
; 309  :       if (SORT_CMP(dst[curr - 1], dst[curr]) <= 0) {

	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _curr$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4-4]
	push	ecx
	call	_wrap_cmp
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN14@libxml_dom

; 310  :         break;

	jmp	SHORT $LN5@libxml_dom
$LN14@libxml_dom:

; 311  :       }
; 312  : 
; 313  :       curr++;

	mov	edx, DWORD PTR _curr$[ebp]
	add	edx, 1
	mov	DWORD PTR _curr$[ebp], edx

; 314  :     }

	jmp	SHORT $LN4@libxml_dom
$LN5@libxml_dom:

; 315  : 
; 316  :     /* reverse in-place */
; 317  :     REVERSE_ELEMENTS(dst, start, curr - 1);

	mov	eax, DWORD PTR _curr$[ebp]
	sub	eax, 1
	mov	DWORD PTR _end$[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp]
	mov	DWORD PTR _start$[ebp], ecx
$LN17@libxml_dom:

; 259  :   while (1) {

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN16@libxml_dom

; 260  :     if (start >= end) {

	mov	eax, DWORD PTR _start$[ebp]
	cmp	eax, DWORD PTR _end$[ebp]
	jb	SHORT $LN19@libxml_dom

; 261  :       return;

	jmp	SHORT $LN16@libxml_dom
$LN19@libxml_dom:

; 262  :     }
; 263  : 
; 264  :     SORT_SWAP(dst[start], dst[end]);

	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR ___SORT_SWAP_t$1[ebp], eax
	mov	ecx, DWORD PTR _start$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR _end$[ebp]
	mov	esi, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _end$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR ___SORT_SWAP_t$1[ebp]
	mov	DWORD PTR [edx+ecx*4], eax

; 265  :     start++;

	mov	ecx, DWORD PTR _start$[ebp]
	add	ecx, 1
	mov	DWORD PTR _start$[ebp], ecx

; 266  :     end--;

	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, 1
	mov	DWORD PTR _end$[ebp], edx

; 267  :   }

	jmp	SHORT $LN17@libxml_dom
$LN16@libxml_dom:

; 318  :     return curr - start;

	mov	eax, DWORD PTR _curr$[ebp]
	sub	eax, DWORD PTR _start$[ebp]
$LN1@libxml_dom:

; 319  :   }
; 320  : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_libxml_domnode_count_run ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _libxml_domnode_binary_insertion_sort_start
_TEXT	SEGMENT
_location$1 = -16					; size = 4
_x$2 = -12						; size = 4
_j$3 = -8						; size = 4
_i$ = -4						; size = 4
_dst$ = 8						; size = 4
_start$ = 12						; size = 4
_size$ = 16						; size = 4
_libxml_domnode_binary_insertion_sort_start PROC	; COMDAT

; 217  : static void BINARY_INSERTION_SORT_START(SORT_TYPE *dst, const size_t start, const size_t size) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 218  :   size_t i;
; 219  : 
; 220  :   for (i = start; i < size; i++) {

	mov	eax, DWORD PTR _start$[ebp]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN4@libxml_dom
$LN2@libxml_dom:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@libxml_dom:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	$LN1@libxml_dom

; 221  :     size_t j;
; 222  :     SORT_TYPE x;
; 223  :     size_t location;
; 224  : 
; 225  :     /* If this entry is already correct, just move along */
; 226  :     if (SORT_CMP(dst[i - 1], dst[i]) <= 0) {

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4-4]
	push	edx
	call	_wrap_cmp
	add	esp, 8
	test	eax, eax
	jg	SHORT $LN8@libxml_dom

; 227  :       continue;

	jmp	SHORT $LN2@libxml_dom
$LN8@libxml_dom:

; 228  :     }
; 229  : 
; 230  :     /* Else we need to find the right place, shift everything over, and squeeze in */
; 231  :     x = dst[i];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _x$2[ebp], edx

; 232  :     location = BINARY_INSERTION_FIND(dst, x, i);

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_libxml_domnode_binary_insertion_find
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _location$1[ebp], eax

; 233  : 
; 234  :     for (j = i - 1; j >= location; j--) {

	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _j$3[ebp], eax
	jmp	SHORT $LN7@libxml_dom
$LN5@libxml_dom:
	mov	ecx, DWORD PTR _j$3[ebp]
	sub	ecx, 1
	mov	DWORD PTR _j$3[ebp], ecx
$LN7@libxml_dom:
	mov	edx, DWORD PTR _j$3[ebp]
	cmp	edx, DWORD PTR _location$1[ebp]
	jb	SHORT $LN6@libxml_dom

; 235  :       dst[j + 1] = dst[j];

	mov	eax, DWORD PTR _j$3[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR _j$3[ebp]
	mov	esi, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [esi+edx*4]
	mov	DWORD PTR [ecx+eax*4+4], edx

; 236  : 
; 237  :       if (j == 0) { /* check edge case because j is unsigned */

	cmp	DWORD PTR _j$3[ebp], 0
	jne	SHORT $LN9@libxml_dom

; 238  :         break;

	jmp	SHORT $LN6@libxml_dom
$LN9@libxml_dom:

; 239  :       }
; 240  :     }

	jmp	SHORT $LN5@libxml_dom
$LN6@libxml_dom:

; 241  : 
; 242  :     dst[location] = x;

	mov	eax, DWORD PTR _location$1[ebp]
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR _x$2[ebp]
	mov	DWORD PTR [ecx+eax*4], edx

; 243  :   }

	jmp	$LN2@libxml_dom
$LN1@libxml_dom:

; 244  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_libxml_domnode_binary_insertion_sort_start ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _libxml_domnode_binary_insertion_find
_TEXT	SEGMENT
_val$1 = -20						; size = 4
_cx$ = -16						; size = 4
_r$ = -12						; size = 4
_c$ = -8						; size = 4
_l$ = -4						; size = 4
_dst$ = 8						; size = 4
_x$ = 12						; size = 4
_size$ = 16						; size = 4
_libxml_domnode_binary_insertion_find PROC		; COMDAT

; 178  :     const size_t size) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 179  :   size_t l, c, r;
; 180  :   SORT_TYPE cx;
; 181  :   l = 0;

	mov	DWORD PTR _l$[ebp], 0

; 182  :   r = size - 1;

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _r$[ebp], eax

; 183  :   c = r >> 1;

	mov	ecx, DWORD PTR _r$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _c$[ebp], ecx

; 184  : 
; 185  :   /* check for out of bounds at the beginning. */
; 186  :   if (SORT_CMP(x, dst[0]) < 0) {

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	push	edx
	mov	eax, DWORD PTR _x$[ebp]
	push	eax
	call	_wrap_cmp
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN4@libxml_dom

; 187  :     return 0;

	xor	eax, eax
	jmp	$LN1@libxml_dom
	jmp	SHORT $LN5@libxml_dom
$LN4@libxml_dom:

; 188  :   } else if (SORT_CMP(x, dst[r]) > 0) {

	mov	ecx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_wrap_cmp
	add	esp, 8
	test	eax, eax
	jle	SHORT $LN5@libxml_dom

; 189  :     return r;

	mov	eax, DWORD PTR _r$[ebp]
	jmp	SHORT $LN1@libxml_dom
$LN5@libxml_dom:

; 190  :   }
; 191  : 
; 192  :   cx = dst[c];

	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _cx$[ebp], ecx
$LN2@libxml_dom:

; 193  : 
; 194  :   while (1) {

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN1@libxml_dom

; 195  :     const int val = SORT_CMP(x, cx);

	mov	eax, DWORD PTR _cx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_wrap_cmp
	add	esp, 8
	mov	DWORD PTR _val$1[ebp], eax

; 196  : 
; 197  :     if (val < 0) {

	cmp	DWORD PTR _val$1[ebp], 0
	jge	SHORT $LN7@libxml_dom

; 198  :       if (c - l <= 1) {

	mov	edx, DWORD PTR _c$[ebp]
	sub	edx, DWORD PTR _l$[ebp]
	cmp	edx, 1
	ja	SHORT $LN9@libxml_dom

; 199  :         return c;

	mov	eax, DWORD PTR _c$[ebp]
	jmp	SHORT $LN1@libxml_dom
$LN9@libxml_dom:

; 200  :       }
; 201  : 
; 202  :       r = c;

	mov	eax, DWORD PTR _c$[ebp]
	mov	DWORD PTR _r$[ebp], eax

; 203  :     } else { /* allow = for stability. The binary search favors the right. */

	jmp	SHORT $LN8@libxml_dom
$LN7@libxml_dom:

; 204  :       if (r - c <= 1) {

	mov	ecx, DWORD PTR _r$[ebp]
	sub	ecx, DWORD PTR _c$[ebp]
	cmp	ecx, 1
	ja	SHORT $LN10@libxml_dom

; 205  :         return c + 1;

	mov	eax, DWORD PTR _c$[ebp]
	add	eax, 1
	jmp	SHORT $LN1@libxml_dom
$LN10@libxml_dom:

; 206  :       }
; 207  : 
; 208  :       l = c;

	mov	edx, DWORD PTR _c$[ebp]
	mov	DWORD PTR _l$[ebp], edx
$LN8@libxml_dom:

; 209  :     }
; 210  : 
; 211  :     c = l + ((r - l) >> 1);

	mov	eax, DWORD PTR _r$[ebp]
	sub	eax, DWORD PTR _l$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR _l$[ebp]
	mov	DWORD PTR _c$[ebp], eax

; 212  :     cx = dst[c];

	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR _dst$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _cx$[ebp], eax

; 213  :   }

	jmp	SHORT $LN2@libxml_dom
$LN1@libxml_dom:

; 214  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_libxml_domnode_binary_insertion_find ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _libxml_domnode_tim_sort
_TEXT	SEGMENT
_curr$ = -1064						; size = 4
_stack_curr$ = -1060					; size = 4
_run_stack$ = -1052					; size = 1024
_store$ = -24						; size = 4
__store$ = -16						; size = 8
_minrun$ = -4						; size = 4
_dst$ = 8						; size = 4
_size$ = 12						; size = 4
_libxml_domnode_tim_sort PROC				; COMDAT

; 530  : void TIM_SORT(SORT_TYPE *dst, const size_t size) {

	push	ebp
	mov	ebp, esp
	sub	esp, 1064				; 00000428H
	push	edi
	lea	edi, DWORD PTR [ebp-1064]
	mov	ecx, 266				; 0000010aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 531  :   size_t minrun;
; 532  :   TEMP_STORAGE_T _store, *store;
; 533  :   TIM_SORT_RUN_T run_stack[TIM_SORT_STACK_SIZE];
; 534  :   size_t stack_curr = 0;

	mov	DWORD PTR _stack_curr$[ebp], 0

; 535  :   size_t curr = 0;

	mov	DWORD PTR _curr$[ebp], 0

; 536  : 
; 537  :   /* don't bother sorting an array of size 1 */
; 538  :   if (size <= 1) {

	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN4@libxml_dom

; 539  :     return;

	jmp	$LN1@libxml_dom
$LN4@libxml_dom:

; 540  :   }
; 541  : 
; 542  :   if (size < 64) {

	cmp	DWORD PTR _size$[ebp], 64		; 00000040H
	jae	SHORT $LN5@libxml_dom

; 543  :     BINARY_INSERTION_SORT(dst, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_libxml_domnode_binary_insertion_sort
	add	esp, 8

; 544  :     return;

	jmp	$LN1@libxml_dom
$LN5@libxml_dom:

; 545  :   }
; 546  : 
; 547  :   /* compute the minimum run length */
; 548  :   minrun = compute_minrun(size);

	mov	edx, DWORD PTR _size$[ebp]
	xor	eax, eax
	push	eax
	push	edx
	call	_compute_minrun
	add	esp, 8
	mov	DWORD PTR _minrun$[ebp], eax

; 549  :   /* temporary storage for merges */
; 550  :   store = &_store;

	lea	ecx, DWORD PTR __store$[ebp]
	mov	DWORD PTR _store$[ebp], ecx

; 551  :   store->alloc = 0;

	mov	edx, DWORD PTR _store$[ebp]
	mov	DWORD PTR [edx], 0

; 552  :   store->storage = NULL;

	mov	eax, DWORD PTR _store$[ebp]
	mov	DWORD PTR [eax+4], 0

; 553  : 
; 554  :   if (!PUSH_NEXT(dst, size, store, minrun, run_stack, &stack_curr, &curr)) {

	lea	ecx, DWORD PTR _curr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _stack_curr$[ebp]
	push	edx
	lea	eax, DWORD PTR _run_stack$[ebp]
	push	eax
	mov	ecx, DWORD PTR _minrun$[ebp]
	push	ecx
	mov	edx, DWORD PTR _store$[ebp]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_PUSH_NEXT
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN6@libxml_dom

; 555  :     return;

	jmp	$LN1@libxml_dom
$LN6@libxml_dom:

; 556  :   }
; 557  : 
; 558  :   if (!PUSH_NEXT(dst, size, store, minrun, run_stack, &stack_curr, &curr)) {

	lea	edx, DWORD PTR _curr$[ebp]
	push	edx
	lea	eax, DWORD PTR _stack_curr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _run_stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _minrun$[ebp]
	push	edx
	mov	eax, DWORD PTR _store$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_PUSH_NEXT
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN7@libxml_dom

; 559  :     return;

	jmp	$LN1@libxml_dom
$LN7@libxml_dom:

; 560  :   }
; 561  : 
; 562  :   if (!PUSH_NEXT(dst, size, store, minrun, run_stack, &stack_curr, &curr)) {

	lea	eax, DWORD PTR _curr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stack_curr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _run_stack$[ebp]
	push	edx
	mov	eax, DWORD PTR _minrun$[ebp]
	push	eax
	mov	ecx, DWORD PTR _store$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_PUSH_NEXT
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN2@libxml_dom

; 563  :     return;

	jmp	$LN1@libxml_dom
$LN2@libxml_dom:

; 564  :   }
; 565  : 
; 566  :   while (1) {

	mov	ecx, 1
	test	ecx, ecx
	je	SHORT $LN1@libxml_dom

; 567  :     if (!CHECK_INVARIANT(run_stack, stack_curr)) {

	mov	edx, DWORD PTR _stack_curr$[ebp]
	push	edx
	lea	eax, DWORD PTR _run_stack$[ebp]
	push	eax
	call	_libxml_domnode_check_invariant
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@libxml_dom

; 568  :       stack_curr = TIM_SORT_COLLAPSE(dst, run_stack, stack_curr, store, size);

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _store$[ebp]
	push	edx
	mov	eax, DWORD PTR _stack_curr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _run_stack$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dst$[ebp]
	push	edx
	call	_libxml_domnode_tim_sort_collapse
	add	esp, 20					; 00000014H
	mov	DWORD PTR _stack_curr$[ebp], eax

; 569  :       continue;

	jmp	SHORT $LN2@libxml_dom
$LN9@libxml_dom:

; 570  :     }
; 571  : 
; 572  :     if (!PUSH_NEXT(dst, size, store, minrun, run_stack, &stack_curr, &curr)) {

	lea	eax, DWORD PTR _curr$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stack_curr$[ebp]
	push	ecx
	lea	edx, DWORD PTR _run_stack$[ebp]
	push	edx
	mov	eax, DWORD PTR _minrun$[ebp]
	push	eax
	mov	ecx, DWORD PTR _store$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _dst$[ebp]
	push	eax
	call	_PUSH_NEXT
	add	esp, 28					; 0000001cH
	test	eax, eax
	jne	SHORT $LN10@libxml_dom

; 573  :       return;

	jmp	SHORT $LN1@libxml_dom
$LN10@libxml_dom:

; 574  :     }
; 575  :   }

	jmp	$LN2@libxml_dom
$LN1@libxml_dom:

; 576  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN53@libxml_dom
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 1064				; 00000428H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN53@libxml_dom:
	DD	2
	DD	$LN52@libxml_dom
$LN52@libxml_dom:
	DD	-16					; fffffff0H
	DD	8
	DD	$LN50@libxml_dom
	DD	-1052					; fffffbe4H
	DD	1024					; 00000400H
	DD	$LN51@libxml_dom
$LN51@libxml_dom:
	DB	114					; 00000072H
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN50@libxml_dom:
	DB	95					; 0000005fH
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	0
_libxml_domnode_tim_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _libxml_domnode_binary_insertion_sort
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_size$ = 12						; size = 4
_libxml_domnode_binary_insertion_sort PROC		; COMDAT

; 247  : void BINARY_INSERTION_SORT(SORT_TYPE *dst, const size_t size) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 248  :   /* don't bother sorting an array of size <= 1 */
; 249  :   if (size <= 1) {

	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN2@libxml_dom

; 250  :     return;

	jmp	SHORT $LN1@libxml_dom
$LN2@libxml_dom:

; 251  :   }
; 252  : 
; 253  :   BINARY_INSERTION_SORT_START(dst, 1, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _dst$[ebp]
	push	ecx
	call	_libxml_domnode_binary_insertion_sort_start
	add	esp, 12					; 0000000cH
$LN1@libxml_dom:

; 254  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_libxml_domnode_binary_insertion_sort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _clzll
_TEXT	SEGMENT
_n$ = -4						; size = 4
_x$ = 8							; size = 8
_clzll	PROC						; COMDAT

; 84   : static int clzll(uint64_t x) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 85   :   int n;
; 86   : 
; 87   :   if (x == 0) {

	mov	eax, DWORD PTR _x$[ebp]
	or	eax, DWORD PTR _x$[ebp+4]
	jne	SHORT $LN2@clzll

; 88   :     return 64;

	mov	eax, 64					; 00000040H
	jmp	$LN1@clzll
$LN2@clzll:

; 89   :   }
; 90   : 
; 91   :   n = 0;

	mov	DWORD PTR _n$[ebp], 0

; 92   : 
; 93   :   if (x <= 0x00000000FFFFFFFFL) {

	cmp	DWORD PTR _x$[ebp+4], 0
	ja	SHORT $LN3@clzll
	jb	SHORT $LN10@clzll
	cmp	DWORD PTR _x$[ebp], -1
	ja	SHORT $LN3@clzll
$LN10@clzll:

; 94   :     n = n + 32;

	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 32					; 00000020H
	mov	DWORD PTR _n$[ebp], ecx

; 95   :     x = x << 32;

	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _x$[ebp+4]
	mov	cl, 32					; 00000020H
	call	__allshl
	mov	DWORD PTR _x$[ebp], eax
	mov	DWORD PTR _x$[ebp+4], edx
$LN3@clzll:

; 96   :   }
; 97   : 
; 98   :   if (x <= 0x0000FFFFFFFFFFFFL) {

	cmp	DWORD PTR _x$[ebp+4], 65535		; 0000ffffH
	ja	SHORT $LN4@clzll
	jb	SHORT $LN11@clzll
	cmp	DWORD PTR _x$[ebp], -1
	ja	SHORT $LN4@clzll
$LN11@clzll:

; 99   :     n = n + 16;

	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _n$[ebp], edx

; 100  :     x = x << 16;

	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _x$[ebp+4]
	mov	cl, 16					; 00000010H
	call	__allshl
	mov	DWORD PTR _x$[ebp], eax
	mov	DWORD PTR _x$[ebp+4], edx
$LN4@clzll:

; 101  :   }
; 102  : 
; 103  :   if (x <= 0x00FFFFFFFFFFFFFFL) {

	cmp	DWORD PTR _x$[ebp+4], 16777215		; 00ffffffH
	ja	SHORT $LN5@clzll
	jb	SHORT $LN12@clzll
	cmp	DWORD PTR _x$[ebp], -1
	ja	SHORT $LN5@clzll
$LN12@clzll:

; 104  :     n = n + 8;

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 8
	mov	DWORD PTR _n$[ebp], eax

; 105  :     x = x << 8;

	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _x$[ebp+4]
	mov	cl, 8
	call	__allshl
	mov	DWORD PTR _x$[ebp], eax
	mov	DWORD PTR _x$[ebp+4], edx
$LN5@clzll:

; 106  :   }
; 107  : 
; 108  :   if (x <= 0x0FFFFFFFFFFFFFFFL) {

	cmp	DWORD PTR _x$[ebp+4], 268435455		; 0fffffffH
	ja	SHORT $LN6@clzll
	jb	SHORT $LN13@clzll
	cmp	DWORD PTR _x$[ebp], -1
	ja	SHORT $LN6@clzll
$LN13@clzll:

; 109  :     n = n + 4;

	mov	ecx, DWORD PTR _n$[ebp]
	add	ecx, 4
	mov	DWORD PTR _n$[ebp], ecx

; 110  :     x = x << 4;

	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _x$[ebp+4]
	mov	cl, 4
	call	__allshl
	mov	DWORD PTR _x$[ebp], eax
	mov	DWORD PTR _x$[ebp+4], edx
$LN6@clzll:

; 111  :   }
; 112  : 
; 113  :   if (x <= 0x3FFFFFFFFFFFFFFFL) {

	cmp	DWORD PTR _x$[ebp+4], 1073741823	; 3fffffffH
	ja	SHORT $LN7@clzll
	jb	SHORT $LN14@clzll
	cmp	DWORD PTR _x$[ebp], -1
	ja	SHORT $LN7@clzll
$LN14@clzll:

; 114  :     n = n + 2;

	mov	edx, DWORD PTR _n$[ebp]
	add	edx, 2
	mov	DWORD PTR _n$[ebp], edx

; 115  :     x = x << 2;

	mov	eax, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _x$[ebp+4]
	mov	cl, 2
	call	__allshl
	mov	DWORD PTR _x$[ebp], eax
	mov	DWORD PTR _x$[ebp+4], edx
$LN7@clzll:

; 116  :   }
; 117  : 
; 118  :   if (x <= 0x7FFFFFFFFFFFFFFFL) {

	cmp	DWORD PTR _x$[ebp+4], 2147483647	; 7fffffffH
	ja	SHORT $LN8@clzll
	jb	SHORT $LN15@clzll
	cmp	DWORD PTR _x$[ebp], -1
	ja	SHORT $LN8@clzll
$LN15@clzll:

; 119  :     n = n + 1;

	mov	eax, DWORD PTR _n$[ebp]
	add	eax, 1
	mov	DWORD PTR _n$[ebp], eax
$LN8@clzll:

; 120  :   }
; 121  : 
; 122  :   return n;

	mov	eax, DWORD PTR _n$[ebp]
$LN1@clzll:

; 123  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_clzll	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\timsort.h
;	COMDAT _compute_minrun
_TEXT	SEGMENT
tv143 = -32						; size = 8
tv68 = -24						; size = 4
_mask$ = -20						; size = 8
_minrun$ = -12						; size = 4
_shift$ = -8						; size = 4
_top_bit$ = -4						; size = 4
_size$ = 8						; size = 8
_compute_minrun PROC					; COMDAT

; 129  : static __inline int compute_minrun(const uint64_t size) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __C4BA4707_timsort@h
	call	@__CheckForDebuggerJustMyCode@4

; 130  :   const int top_bit = 64 - CLZ(size);

	mov	eax, DWORD PTR _size$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	_clzll
	add	esp, 8
	mov	edx, 64					; 00000040H
	sub	edx, eax
	mov	DWORD PTR _top_bit$[ebp], edx

; 131  :   const int shift = MAX(top_bit, 6) - 6;

	cmp	DWORD PTR _top_bit$[ebp], 6
	jle	SHORT $LN4@compute_mi
	mov	eax, DWORD PTR _top_bit$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN5@compute_mi
$LN4@compute_mi:
	mov	DWORD PTR tv68[ebp], 6
$LN5@compute_mi:
	mov	ecx, DWORD PTR tv68[ebp]
	sub	ecx, 6
	mov	DWORD PTR _shift$[ebp], ecx

; 132  :   const int minrun = size >> shift;

	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _size$[ebp+4]
	mov	ecx, DWORD PTR _shift$[ebp]
	call	__aullshr
	mov	DWORD PTR _minrun$[ebp], eax

; 133  :   const uint64_t mask = (1ULL << shift) - 1;

	mov	eax, 1
	xor	edx, edx
	mov	ecx, DWORD PTR _shift$[ebp]
	call	__allshl
	sub	eax, 1
	sbb	edx, 0
	mov	DWORD PTR _mask$[ebp], eax
	mov	DWORD PTR _mask$[ebp+4], edx

; 134  : 
; 135  :   if (mask & size) {

	mov	edx, DWORD PTR _mask$[ebp]
	and	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _mask$[ebp+4]
	and	eax, DWORD PTR _size$[ebp+4]
	mov	DWORD PTR tv143[ebp], edx
	mov	DWORD PTR tv143[ebp+4], eax
	mov	ecx, DWORD PTR tv143[ebp]
	or	ecx, DWORD PTR tv143[ebp+4]
	je	SHORT $LN2@compute_mi

; 136  :     return minrun + 1;

	mov	eax, DWORD PTR _minrun$[ebp]
	add	eax, 1
	jmp	SHORT $LN1@compute_mi
$LN2@compute_mi:

; 137  :   }
; 138  : 
; 139  :   return minrun;

	mov	eax, DWORD PTR _minrun$[ebp]
$LN1@compute_mi:

; 140  : }

	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_compute_minrun ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _wrap_cmp
_TEXT	SEGMENT
tv69 = -8						; size = 4
_res$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_wrap_cmp PROC						; COMDAT

; 457  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 458  :         int res = xmlXPathCmpNodesExt(x, y);

	mov	eax, DWORD PTR _y$[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$[ebp]
	push	ecx
	call	_xmlXPathCmpNodesExt
	add	esp, 8
	mov	DWORD PTR _res$[ebp], eax

; 459  :         return res == -2 ? res : -res;

	cmp	DWORD PTR _res$[ebp], -2		; fffffffeH
	jne	SHORT $LN3@wrap_cmp
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR tv69[ebp], edx
	jmp	SHORT $LN4@wrap_cmp
$LN3@wrap_cmp:
	mov	eax, DWORD PTR _res$[ebp]
	neg	eax
	mov	DWORD PTR tv69[ebp], eax
$LN4@wrap_cmp:
	mov	eax, DWORD PTR tv69[ebp]

; 460  :     }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_wrap_cmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCmpNodesExt
_TEXT	SEGMENT
tv135 = -52						; size = 4
tv68 = -48						; size = 4
_l2$ = -44						; size = 4
_l1$ = -40						; size = 4
_root$ = -36						; size = 4
_cur$ = -32						; size = 4
_miscNode2$ = -28					; size = 4
_miscNode1$ = -24					; size = 4
_precedence2$ = -20					; size = 4
_precedence1$ = -16					; size = 4
_misc$ = -12						; size = 4
_depth2$ = -8						; size = 4
_depth1$ = -4						; size = 4
_node1$ = 8						; size = 4
_node2$ = 12						; size = 4
_xmlXPathCmpNodesExt PROC				; COMDAT

; 158  : xmlXPathCmpNodesExt(xmlNodePtr node1, xmlNodePtr node2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 159  :     int depth1, depth2;
; 160  :     int misc = 0, precedence1 = 0, precedence2 = 0;

	mov	DWORD PTR _misc$[ebp], 0
	mov	DWORD PTR _precedence1$[ebp], 0
	mov	DWORD PTR _precedence2$[ebp], 0

; 161  :     xmlNodePtr miscNode1 = NULL, miscNode2 = NULL;

	mov	DWORD PTR _miscNode1$[ebp], 0
	mov	DWORD PTR _miscNode2$[ebp], 0

; 162  :     xmlNodePtr cur, root;
; 163  :     ptrdiff_t l1, l2;
; 164  : 
; 165  :     if ((node1 == NULL) || (node2 == NULL))

	cmp	DWORD PTR _node1$[ebp], 0
	je	SHORT $LN34@xmlXPathCm
	cmp	DWORD PTR _node2$[ebp], 0
	jne	SHORT $LN33@xmlXPathCm
$LN34@xmlXPathCm:

; 166  : 	return(-2);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@xmlXPathCm
$LN33@xmlXPathCm:

; 167  : 
; 168  :     if (node1 == node2)

	mov	eax, DWORD PTR _node1$[ebp]
	cmp	eax, DWORD PTR _node2$[ebp]
	jne	SHORT $LN35@xmlXPathCm

; 169  : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCm
$LN35@xmlXPathCm:

; 170  : 
; 171  :     /*
; 172  :      * a couple of optimizations which will avoid computations in most cases
; 173  :      */
; 174  :     switch (node1->type) {

	mov	ecx, DWORD PTR _node1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv68[ebp], edx
	mov	eax, DWORD PTR tv68[ebp]
	sub	eax, 1
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 17			; 00000011H
	ja	$LN2@xmlXPathCm
	mov	ecx, DWORD PTR tv68[ebp]
	movzx	edx, BYTE PTR $LN94@xmlXPathCm[ecx]
	jmp	DWORD PTR $LN96@xmlXPathCm[edx*4]
$LN36@xmlXPathCm:

; 175  : 	case XML_ELEMENT_NODE:
; 176  : 	    if (node2->type == XML_ELEMENT_NODE) {

	mov	eax, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN37@xmlXPathCm

; 177  : 		if ((0 > (ptrdiff_t) node1->content) &&
; 178  : 		    (0 > (ptrdiff_t) node2->content) &&

	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jge	SHORT $LN38@xmlXPathCm
	mov	edx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jge	SHORT $LN38@xmlXPathCm
	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+32]
	jne	SHORT $LN38@xmlXPathCm

; 179  : 		    (node1->doc == node2->doc))
; 180  : 		{
; 181  : 		    l1 = -((ptrdiff_t) node1->content);

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	neg	ecx
	mov	DWORD PTR _l1$[ebp], ecx

; 182  : 		    l2 = -((ptrdiff_t) node2->content);

	mov	edx, DWORD PTR _node2$[ebp]
	mov	eax, DWORD PTR [edx+40]
	neg	eax
	mov	DWORD PTR _l2$[ebp], eax

; 183  : 		    if (l1 < l2)

	mov	ecx, DWORD PTR _l1$[ebp]
	cmp	ecx, DWORD PTR _l2$[ebp]
	jge	SHORT $LN40@xmlXPathCm

; 184  : 			return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN40@xmlXPathCm:

; 185  : 		    if (l1 > l2)

	mov	edx, DWORD PTR _l1$[ebp]
	cmp	edx, DWORD PTR _l2$[ebp]
	jle	SHORT $LN41@xmlXPathCm

; 186  : 			return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN41@xmlXPathCm:

; 187  : 		} else

	jmp	SHORT $LN37@xmlXPathCm
$LN38@xmlXPathCm:

; 188  : 		    goto turtle_comparison;

	jmp	$turtle_comparison$98
$LN37@xmlXPathCm:

; 189  : 	    }
; 190  : 	    break;

	jmp	$LN2@xmlXPathCm
$LN42@xmlXPathCm:

; 191  : 	case XML_ATTRIBUTE_NODE:
; 192  : 	    precedence1 = 1; /* element is owner */

	mov	DWORD PTR _precedence1$[ebp], 1

; 193  : 	    miscNode1 = node1;

	mov	eax, DWORD PTR _node1$[ebp]
	mov	DWORD PTR _miscNode1$[ebp], eax

; 194  : 	    node1 = node1->parent;

	mov	ecx, DWORD PTR _node1$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _node1$[ebp], edx

; 195  : 	    misc = 1;

	mov	DWORD PTR _misc$[ebp], 1

; 196  : 	    break;

	jmp	$LN2@xmlXPathCm
$LN43@xmlXPathCm:

; 197  : 	case XML_TEXT_NODE:
; 198  : 	case XML_CDATA_SECTION_NODE:
; 199  : 	case XML_COMMENT_NODE:
; 200  : 	case XML_PI_NODE: {
; 201  : 	    miscNode1 = node1;

	mov	eax, DWORD PTR _node1$[ebp]
	mov	DWORD PTR _miscNode1$[ebp], eax

; 202  : 	    /*
; 203  : 	    * Find nearest element node.
; 204  : 	    */
; 205  : 	    if (node1->prev != NULL) {

	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN44@xmlXPathCm
$LN6@xmlXPathCm:

; 206  : 		do {
; 207  : 		    node1 = node1->prev;

	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _node1$[ebp], eax

; 208  : 		    if (node1->type == XML_ELEMENT_NODE) {

	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN46@xmlXPathCm

; 209  : 			precedence1 = 3; /* element in prev-sibl axis */

	mov	DWORD PTR _precedence1$[ebp], 3

; 210  : 			break;

	jmp	SHORT $LN5@xmlXPathCm
$LN46@xmlXPathCm:

; 211  : 		    }
; 212  : 		    if (node1->prev == NULL) {

	mov	edx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN4@xmlXPathCm

; 213  : 			precedence1 = 2; /* element is parent */

	mov	DWORD PTR _precedence1$[ebp], 2

; 214  : 			/*
; 215  : 			* URGENT TODO: Are there any cases, where the
; 216  : 			* parent of such a node is not an element node?
; 217  : 			*/
; 218  : 			node1 = node1->parent;

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _node1$[ebp], ecx

; 219  : 			break;

	jmp	SHORT $LN5@xmlXPathCm
$LN4@xmlXPathCm:

; 220  : 		    }
; 221  : 		} while (1);

	mov	edx, 1
	test	edx, edx
	jne	SHORT $LN6@xmlXPathCm
$LN5@xmlXPathCm:

; 222  : 	    } else {

	jmp	SHORT $LN45@xmlXPathCm
$LN44@xmlXPathCm:

; 223  : 		precedence1 = 2; /* element is parent */

	mov	DWORD PTR _precedence1$[ebp], 2

; 224  : 		node1 = node1->parent;

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _node1$[ebp], ecx
$LN45@xmlXPathCm:

; 225  : 	    }
; 226  : 	    if ((node1 == NULL) || (node1->type != XML_ELEMENT_NODE) ||

	cmp	DWORD PTR _node1$[ebp], 0
	je	SHORT $LN50@xmlXPathCm
	mov	edx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN50@xmlXPathCm
	mov	eax, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jl	SHORT $LN48@xmlXPathCm
$LN50@xmlXPathCm:

; 227  : 		(0 <= (ptrdiff_t) node1->content)) {
; 228  : 		/*
; 229  : 		* Fallback for whatever case.
; 230  : 		*/
; 231  : 		node1 = miscNode1;

	mov	ecx, DWORD PTR _miscNode1$[ebp]
	mov	DWORD PTR _node1$[ebp], ecx

; 232  : 		precedence1 = 0;

	mov	DWORD PTR _precedence1$[ebp], 0

; 233  : 	    } else

	jmp	SHORT $LN49@xmlXPathCm
$LN48@xmlXPathCm:

; 234  : 		misc = 1;

	mov	DWORD PTR _misc$[ebp], 1
$LN49@xmlXPathCm:

; 235  : 	}
; 236  : 	    break;

	jmp	SHORT $LN2@xmlXPathCm
$LN51@xmlXPathCm:

; 237  : 	case XML_NAMESPACE_DECL:
; 238  : 	    /*
; 239  : 	    * TODO: why do we return 1 for namespace nodes?
; 240  : 	    */
; 241  : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN2@xmlXPathCm:

; 242  : 	default:
; 243  : 	    break;
; 244  :     }
; 245  :     switch (node2->type) {

	mov	edx, DWORD PTR _node2$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv135[ebp], eax
	mov	ecx, DWORD PTR tv135[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv135[ebp], ecx
	cmp	DWORD PTR tv135[ebp], 16		; 00000010H
	ja	$LN7@xmlXPathCm
	mov	edx, DWORD PTR tv135[ebp]
	movzx	eax, BYTE PTR $LN95@xmlXPathCm[edx]
	jmp	DWORD PTR $LN97@xmlXPathCm[eax*4]

; 246  : 	case XML_ELEMENT_NODE:
; 247  : 	    break;

	jmp	$LN7@xmlXPathCm
$LN54@xmlXPathCm:

; 248  : 	case XML_ATTRIBUTE_NODE:
; 249  : 	    precedence2 = 1; /* element is owner */

	mov	DWORD PTR _precedence2$[ebp], 1

; 250  : 	    miscNode2 = node2;

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	DWORD PTR _miscNode2$[ebp], ecx

; 251  : 	    node2 = node2->parent;

	mov	edx, DWORD PTR _node2$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _node2$[ebp], eax

; 252  : 	    misc = 1;

	mov	DWORD PTR _misc$[ebp], 1

; 253  : 	    break;

	jmp	$LN7@xmlXPathCm
$LN55@xmlXPathCm:

; 254  : 	case XML_TEXT_NODE:
; 255  : 	case XML_CDATA_SECTION_NODE:
; 256  : 	case XML_COMMENT_NODE:
; 257  : 	case XML_PI_NODE: {
; 258  : 	    miscNode2 = node2;

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	DWORD PTR _miscNode2$[ebp], ecx

; 259  : 	    if (node2->prev != NULL) {

	mov	edx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN56@xmlXPathCm
$LN11@xmlXPathCm:

; 260  : 		do {
; 261  : 		    node2 = node2->prev;

	mov	eax, DWORD PTR _node2$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _node2$[ebp], ecx

; 262  : 		    if (node2->type == XML_ELEMENT_NODE) {

	mov	edx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN58@xmlXPathCm

; 263  : 			precedence2 = 3; /* element in prev-sibl axis */

	mov	DWORD PTR _precedence2$[ebp], 3

; 264  : 			break;

	jmp	SHORT $LN10@xmlXPathCm
$LN58@xmlXPathCm:

; 265  : 		    }
; 266  : 		    if (node2->prev == NULL) {

	mov	eax, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN9@xmlXPathCm

; 267  : 			precedence2 = 2; /* element is parent */

	mov	DWORD PTR _precedence2$[ebp], 2

; 268  : 			node2 = node2->parent;

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _node2$[ebp], edx

; 269  : 			break;

	jmp	SHORT $LN10@xmlXPathCm
$LN9@xmlXPathCm:

; 270  : 		    }
; 271  : 		} while (1);

	mov	eax, 1
	test	eax, eax
	jne	SHORT $LN11@xmlXPathCm
$LN10@xmlXPathCm:

; 272  : 	    } else {

	jmp	SHORT $LN57@xmlXPathCm
$LN56@xmlXPathCm:

; 273  : 		precedence2 = 2; /* element is parent */

	mov	DWORD PTR _precedence2$[ebp], 2

; 274  : 		node2 = node2->parent;

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _node2$[ebp], edx
$LN57@xmlXPathCm:

; 275  : 	    }
; 276  : 	    if ((node2 == NULL) || (node2->type != XML_ELEMENT_NODE) ||

	cmp	DWORD PTR _node2$[ebp], 0
	je	SHORT $LN62@xmlXPathCm
	mov	eax, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN62@xmlXPathCm
	mov	ecx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jl	SHORT $LN60@xmlXPathCm
$LN62@xmlXPathCm:

; 277  : 		(0 <= (ptrdiff_t) node2->content))
; 278  : 	    {
; 279  : 		node2 = miscNode2;

	mov	edx, DWORD PTR _miscNode2$[ebp]
	mov	DWORD PTR _node2$[ebp], edx

; 280  : 		precedence2 = 0;

	mov	DWORD PTR _precedence2$[ebp], 0

; 281  : 	    } else

	jmp	SHORT $LN61@xmlXPathCm
$LN60@xmlXPathCm:

; 282  : 		misc = 1;

	mov	DWORD PTR _misc$[ebp], 1
$LN61@xmlXPathCm:

; 283  : 	}
; 284  : 	    break;

	jmp	SHORT $LN7@xmlXPathCm
$LN63@xmlXPathCm:

; 285  : 	case XML_NAMESPACE_DECL:
; 286  : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN7@xmlXPathCm:

; 287  : 	default:
; 288  : 	    break;
; 289  :     }
; 290  :     if (misc) {

	cmp	DWORD PTR _misc$[ebp], 0
	je	$LN65@xmlXPathCm

; 291  : 	if (node1 == node2) {

	mov	eax, DWORD PTR _node1$[ebp]
	cmp	eax, DWORD PTR _node2$[ebp]
	jne	SHORT $LN66@xmlXPathCm

; 292  : 	    if (precedence1 == precedence2) {

	mov	ecx, DWORD PTR _precedence1$[ebp]
	cmp	ecx, DWORD PTR _precedence2$[ebp]
	jne	SHORT $LN67@xmlXPathCm

; 293  : 		/*
; 294  : 		* The ugly case; but normally there aren't many
; 295  : 		* adjacent non-element nodes around.
; 296  : 		*/
; 297  : 		cur = miscNode2->prev;

	mov	edx, DWORD PTR _miscNode2$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _cur$[ebp], eax
$LN12@xmlXPathCm:

; 298  : 		while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN13@xmlXPathCm

; 299  : 		    if (cur == miscNode1)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _miscNode1$[ebp]
	jne	SHORT $LN69@xmlXPathCm

; 300  : 			return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN69@xmlXPathCm:

; 301  : 		    if (cur->type == XML_ELEMENT_NODE)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN70@xmlXPathCm

; 302  : 			return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN70@xmlXPathCm:

; 303  : 		    cur = cur->prev;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _cur$[ebp], ecx

; 304  : 		}

	jmp	SHORT $LN12@xmlXPathCm
$LN13@xmlXPathCm:

; 305  : 		return (-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm

; 306  : 	    } else {

	jmp	SHORT $LN66@xmlXPathCm
$LN67@xmlXPathCm:

; 307  : 		/*
; 308  : 		* Evaluate based on higher precedence wrt to the element.
; 309  : 		* TODO: This assumes attributes are sorted before content.
; 310  : 		*   Is this 100% correct?
; 311  : 		*/
; 312  : 		if (precedence1 < precedence2)

	mov	edx, DWORD PTR _precedence1$[ebp]
	cmp	edx, DWORD PTR _precedence2$[ebp]
	jge	SHORT $LN71@xmlXPathCm

; 313  : 		    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
	jmp	SHORT $LN66@xmlXPathCm
$LN71@xmlXPathCm:

; 314  : 		else
; 315  : 		    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN66@xmlXPathCm:

; 316  : 	    }
; 317  : 	}
; 318  : 	/*
; 319  : 	* Special case: One of the helper-elements is contained by the other.
; 320  : 	* <foo>
; 321  : 	*   <node2>
; 322  : 	*     <node1>Text-1(precedence1 == 2)</node1>
; 323  : 	*   </node2>
; 324  : 	*   Text-6(precedence2 == 3)
; 325  : 	* </foo>
; 326  : 	*/
; 327  : 	if ((precedence2 == 3) && (precedence1 > 1)) {

	cmp	DWORD PTR _precedence2$[ebp], 3
	jne	SHORT $LN73@xmlXPathCm
	cmp	DWORD PTR _precedence1$[ebp], 1
	jle	SHORT $LN73@xmlXPathCm

; 328  : 	    cur = node1->parent;

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cur$[ebp], ecx
$LN14@xmlXPathCm:

; 329  : 	    while (cur) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN73@xmlXPathCm

; 330  : 		if (cur == node2)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _node2$[ebp]
	jne	SHORT $LN74@xmlXPathCm

; 331  : 		    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN74@xmlXPathCm:

; 332  : 		cur = cur->parent;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cur$[ebp], ecx

; 333  : 	    }

	jmp	SHORT $LN14@xmlXPathCm
$LN73@xmlXPathCm:

; 334  : 	}
; 335  : 	if ((precedence1 == 3) && (precedence2 > 1)) {

	cmp	DWORD PTR _precedence1$[ebp], 3
	jne	SHORT $LN65@xmlXPathCm
	cmp	DWORD PTR _precedence2$[ebp], 1
	jle	SHORT $LN65@xmlXPathCm

; 336  : 	    cur = node2->parent;

	mov	edx, DWORD PTR _node2$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax
$LN16@xmlXPathCm:

; 337  : 	    while (cur) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN65@xmlXPathCm

; 338  : 		if (cur == node1)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _node1$[ebp]
	jne	SHORT $LN76@xmlXPathCm

; 339  : 		    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN76@xmlXPathCm:

; 340  : 		cur = cur->parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax

; 341  : 	    }

	jmp	SHORT $LN16@xmlXPathCm
$LN65@xmlXPathCm:

; 342  : 	}
; 343  :     }
; 344  : 
; 345  :     /*
; 346  :      * Speedup using document order if availble.
; 347  :      */
; 348  :     if ((node1->type == XML_ELEMENT_NODE) &&
; 349  : 	(node2->type == XML_ELEMENT_NODE) &&
; 350  : 	(0 > (ptrdiff_t) node1->content) &&
; 351  : 	(0 > (ptrdiff_t) node2->content) &&

	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $turtle_comparison$98
	mov	edx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $turtle_comparison$98
	mov	eax, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jge	SHORT $turtle_comparison$98
	mov	ecx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jge	SHORT $turtle_comparison$98
	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR _node2$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+32]
	jne	SHORT $turtle_comparison$98

; 352  : 	(node1->doc == node2->doc)) {
; 353  : 
; 354  : 	l1 = -((ptrdiff_t) node1->content);

	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR [edx+40]
	neg	eax
	mov	DWORD PTR _l1$[ebp], eax

; 355  : 	l2 = -((ptrdiff_t) node2->content);

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	neg	edx
	mov	DWORD PTR _l2$[ebp], edx

; 356  : 	if (l1 < l2)

	mov	eax, DWORD PTR _l1$[ebp]
	cmp	eax, DWORD PTR _l2$[ebp]
	jge	SHORT $LN78@xmlXPathCm

; 357  : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN78@xmlXPathCm:

; 358  : 	if (l1 > l2)

	mov	ecx, DWORD PTR _l1$[ebp]
	cmp	ecx, DWORD PTR _l2$[ebp]
	jle	SHORT $turtle_comparison$98

; 359  : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$turtle_comparison$98:

; 360  :     }
; 361  : 
; 362  : turtle_comparison:
; 363  : 
; 364  :     if (node1 == node2->prev)

	mov	edx, DWORD PTR _node2$[ebp]
	mov	eax, DWORD PTR _node1$[ebp]
	cmp	eax, DWORD PTR [edx+28]
	jne	SHORT $LN80@xmlXPathCm

; 365  : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN80@xmlXPathCm:

; 366  :     if (node1 == node2->next)

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR _node1$[ebp]
	cmp	edx, DWORD PTR [ecx+24]
	jne	SHORT $LN81@xmlXPathCm

; 367  : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN81@xmlXPathCm:

; 368  :     /*
; 369  :      * compute depth to root
; 370  :      */
; 371  :     for (depth2 = 0, cur = node2; cur->parent != NULL; cur = cur->parent) {

	mov	DWORD PTR _depth2$[ebp], 0
	mov	eax, DWORD PTR _node2$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN20@xmlXPathCm
$LN18@xmlXPathCm:
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _cur$[ebp], edx
$LN20@xmlXPathCm:
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN19@xmlXPathCm

; 372  : 	if (cur->parent == node1)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	edx, DWORD PTR _node1$[ebp]
	jne	SHORT $LN82@xmlXPathCm

; 373  : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN82@xmlXPathCm:

; 374  : 	depth2++;

	mov	eax, DWORD PTR _depth2$[ebp]
	add	eax, 1
	mov	DWORD PTR _depth2$[ebp], eax

; 375  :     }

	jmp	SHORT $LN18@xmlXPathCm
$LN19@xmlXPathCm:

; 376  :     root = cur;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _root$[ebp], ecx

; 377  :     for (depth1 = 0, cur = node1; cur->parent != NULL; cur = cur->parent) {

	mov	DWORD PTR _depth1$[ebp], 0
	mov	edx, DWORD PTR _node1$[ebp]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN23@xmlXPathCm
$LN21@xmlXPathCm:
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cur$[ebp], ecx
$LN23@xmlXPathCm:
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN22@xmlXPathCm

; 378  : 	if (cur->parent == node2)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _node2$[ebp]
	jne	SHORT $LN83@xmlXPathCm

; 379  : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN83@xmlXPathCm:

; 380  : 	depth1++;

	mov	edx, DWORD PTR _depth1$[ebp]
	add	edx, 1
	mov	DWORD PTR _depth1$[ebp], edx

; 381  :     }

	jmp	SHORT $LN21@xmlXPathCm
$LN22@xmlXPathCm:

; 382  :     /*
; 383  :      * Distinct document (or distinct entities :-( ) case.
; 384  :      */
; 385  :     if (root != cur) {

	mov	eax, DWORD PTR _root$[ebp]
	cmp	eax, DWORD PTR _cur$[ebp]
	je	SHORT $LN24@xmlXPathCm

; 386  : 	return(-2);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@xmlXPathCm
$LN24@xmlXPathCm:

; 387  :     }
; 388  :     /*
; 389  :      * get the nearest common ancestor.
; 390  :      */
; 391  :     while (depth1 > depth2) {

	mov	ecx, DWORD PTR _depth1$[ebp]
	cmp	ecx, DWORD PTR _depth2$[ebp]
	jle	SHORT $LN26@xmlXPathCm

; 392  : 	depth1--;

	mov	edx, DWORD PTR _depth1$[ebp]
	sub	edx, 1
	mov	DWORD PTR _depth1$[ebp], edx

; 393  : 	node1 = node1->parent;

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _node1$[ebp], ecx

; 394  :     }

	jmp	SHORT $LN24@xmlXPathCm
$LN26@xmlXPathCm:

; 395  :     while (depth2 > depth1) {

	mov	edx, DWORD PTR _depth2$[ebp]
	cmp	edx, DWORD PTR _depth1$[ebp]
	jle	SHORT $LN28@xmlXPathCm

; 396  : 	depth2--;

	mov	eax, DWORD PTR _depth2$[ebp]
	sub	eax, 1
	mov	DWORD PTR _depth2$[ebp], eax

; 397  : 	node2 = node2->parent;

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _node2$[ebp], edx

; 398  :     }

	jmp	SHORT $LN26@xmlXPathCm
$LN28@xmlXPathCm:

; 399  :     while (node1->parent != node2->parent) {

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+20]
	je	SHORT $LN29@xmlXPathCm

; 400  : 	node1 = node1->parent;

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _node1$[ebp], ecx

; 401  : 	node2 = node2->parent;

	mov	edx, DWORD PTR _node2$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _node2$[ebp], eax

; 402  : 	/* should not happen but just in case ... */
; 403  : 	if ((node1 == NULL) || (node2 == NULL))

	cmp	DWORD PTR _node1$[ebp], 0
	je	SHORT $LN86@xmlXPathCm
	cmp	DWORD PTR _node2$[ebp], 0
	jne	SHORT $LN85@xmlXPathCm
$LN86@xmlXPathCm:

; 404  : 	    return(-2);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@xmlXPathCm
$LN85@xmlXPathCm:

; 405  :     }

	jmp	SHORT $LN28@xmlXPathCm
$LN29@xmlXPathCm:

; 406  :     /*
; 407  :      * Find who's first.
; 408  :      */
; 409  :     if (node1 == node2->prev)

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR _node1$[ebp]
	cmp	edx, DWORD PTR [ecx+28]
	jne	SHORT $LN87@xmlXPathCm

; 410  : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN87@xmlXPathCm:

; 411  :     if (node1 == node2->next)

	mov	eax, DWORD PTR _node2$[ebp]
	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	ecx, DWORD PTR [eax+24]
	jne	SHORT $LN88@xmlXPathCm

; 412  : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN88@xmlXPathCm:

; 413  :     /*
; 414  :      * Speedup using document order if availble.
; 415  :      */
; 416  :     if ((node1->type == XML_ELEMENT_NODE) &&
; 417  : 	(node2->type == XML_ELEMENT_NODE) &&
; 418  : 	(0 > (ptrdiff_t) node1->content) &&
; 419  : 	(0 > (ptrdiff_t) node2->content) &&

	mov	edx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN89@xmlXPathCm
	mov	eax, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN89@xmlXPathCm
	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jge	SHORT $LN89@xmlXPathCm
	mov	edx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jge	SHORT $LN89@xmlXPathCm
	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx+32]
	jne	SHORT $LN89@xmlXPathCm

; 420  : 	(node1->doc == node2->doc)) {
; 421  : 
; 422  : 	l1 = -((ptrdiff_t) node1->content);

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	neg	ecx
	mov	DWORD PTR _l1$[ebp], ecx

; 423  : 	l2 = -((ptrdiff_t) node2->content);

	mov	edx, DWORD PTR _node2$[ebp]
	mov	eax, DWORD PTR [edx+40]
	neg	eax
	mov	DWORD PTR _l2$[ebp], eax

; 424  : 	if (l1 < l2)

	mov	ecx, DWORD PTR _l1$[ebp]
	cmp	ecx, DWORD PTR _l2$[ebp]
	jge	SHORT $LN90@xmlXPathCm

; 425  : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathCm
$LN90@xmlXPathCm:

; 426  : 	if (l1 > l2)

	mov	edx, DWORD PTR _l1$[ebp]
	cmp	edx, DWORD PTR _l2$[ebp]
	jle	SHORT $LN89@xmlXPathCm

; 427  : 	    return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathCm
$LN89@xmlXPathCm:

; 428  :     }
; 429  : 
; 430  :     for (cur = node1->next;cur != NULL;cur = cur->next)

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN32@xmlXPathCm
$LN30@xmlXPathCm:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
$LN32@xmlXPathCm:
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN31@xmlXPathCm

; 431  : 	if (cur == node2)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _node2$[ebp]
	jne	SHORT $LN92@xmlXPathCm

; 432  : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathCm
$LN92@xmlXPathCm:
	jmp	SHORT $LN30@xmlXPathCm
$LN31@xmlXPathCm:

; 433  :     return(-1); /* assume there is no sibling list corruption */

	or	eax, -1
$LN1@xmlXPathCm:

; 434  : }

	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN96@xmlXPathCm:
	DD	$LN36@xmlXPathCm
	DD	$LN42@xmlXPathCm
	DD	$LN43@xmlXPathCm
	DD	$LN51@xmlXPathCm
	DD	$LN2@xmlXPathCm
$LN94@xmlXPathCm:
	DB	0
	DB	1
	DB	2
	DB	2
	DB	4
	DB	4
	DB	2
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
	npad	2
$LN97@xmlXPathCm:
	DD	$LN54@xmlXPathCm
	DD	$LN55@xmlXPathCm
	DD	$LN63@xmlXPathCm
	DD	$LN7@xmlXPathCm
$LN95@xmlXPathCm:
	DB	0
	DB	1
	DB	1
	DB	3
	DB	3
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
_xmlXPathCmpNodesExt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetFreeNs
_TEXT	SEGMENT
_ns$ = 8						; size = 4
_xmlXPathNodeSetFreeNs PROC				; COMDAT

; 3505 : xmlXPathNodeSetFreeNs(xmlNsPtr ns) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3506 :     if ((ns == NULL) || (ns->type != XML_NAMESPACE_DECL))

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlXPathNo
	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	je	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 3507 : 	return;

	jmp	SHORT $LN1@xmlXPathNo
$LN2@xmlXPathNo:

; 3508 : 
; 3509 :     if ((ns->next != NULL) && (ns->next->type != XML_NAMESPACE_DECL)) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@xmlXPathNo
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	je	SHORT $LN1@xmlXPathNo

; 3510 : 	if (ns->href != NULL)

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN5@xmlXPathNo

; 3511 : 	    xmlFree((xmlChar *)ns->href);

	mov	esi, esp
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlXPathNo:

; 3512 : 	if (ns->prefix != NULL)

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN6@xmlXPathNo

; 3513 : 	    xmlFree((xmlChar *)ns->prefix);

	mov	esi, esp
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlXPathNo:

; 3514 : 	xmlFree(ns);

	mov	esi, esp
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathNo:

; 3515 :     }
; 3516 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNodeSetFreeNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathBooleanFunction
_TEXT	SEGMENT
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathBooleanFunction PROC				; COMDAT

; 9480 : xmlXPathBooleanFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9481 :     xmlXPathObjectPtr cur;
; 9482 : 
; 9483 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathBo
	jmp	$LN1@xmlXPathBo
$LN2@xmlXPathBo:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN3@xmlXPathBo
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathBo
$LN3@xmlXPathBo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN4@xmlXPathBo
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathBo
$LN4@xmlXPathBo:

; 9484 :     cur = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 9485 :     if (cur == NULL) XP_ERROR(XPATH_INVALID_OPERAND);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN5@xmlXPathBo
	push	10					; 0000000aH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathBo
$LN5@xmlXPathBo:

; 9486 :     cur = xmlXPathCacheConvertBoolean(ctxt->context, cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheConvertBoolean
	add	esp, 8
	mov	DWORD PTR _cur$[ebp], eax

; 9487 :     valuePush(ctxt, cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
$LN1@xmlXPathBo:

; 9488 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathBooleanFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRoundFunction
_TEXT	SEGMENT
_rounded$1 = -16					; size = 8
_f$ = -8						; size = 8
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathRoundFunction PROC				; COMDAT

; 9700 : xmlXPathRoundFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9701 :     double f;
; 9702 : 
; 9703 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathRo
	jmp	$LN9@xmlXPathRo
$LN2@xmlXPathRo:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN3@xmlXPathRo
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN9@xmlXPathRo
$LN3@xmlXPathRo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN4@xmlXPathRo
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN9@xmlXPathRo
$LN4@xmlXPathRo:

; 9704 :     CAST_TO_NUMBER;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@xmlXPathRo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN5@xmlXPathRo
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN5@xmlXPathRo:

; 9705 :     CHECK_TYPE(XPATH_NUMBER);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@xmlXPathRo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN6@xmlXPathRo
$LN7@xmlXPathRo:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN9@xmlXPathRo
$LN6@xmlXPathRo:

; 9706 : 
; 9707 :     f = ctxt->value->floatval;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR _f$[ebp], xmm0

; 9708 : 
; 9709 :     if ((f >= -0.5) && (f < 0.5)) {

	movsd	xmm0, QWORD PTR _f$[ebp]
	comisd	xmm0, QWORD PTR __real@bfe0000000000000
	jb	SHORT $LN8@xmlXPathRo
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	comisd	xmm0, QWORD PTR _f$[ebp]
	jbe	SHORT $LN8@xmlXPathRo

; 9710 :         /* Handles negative zero. */
; 9711 :         ctxt->value->floatval *= 0.0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [ecx+16]
	mulsd	xmm0, QWORD PTR __real@0000000000000000
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movsd	QWORD PTR [eax+16], xmm0

; 9712 :     }

	jmp	SHORT $LN9@xmlXPathRo
$LN8@xmlXPathRo:

; 9713 :     else {
; 9714 :         double rounded = floor(f);

	sub	esp, 8
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _f$[ebp+4]
	mov	DWORD PTR [esp], ecx
	mov	DWORD PTR [esp+4], edx
	call	_floor
	add	esp, 8
	fstp	QWORD PTR _rounded$1[ebp]

; 9715 :         if (f - rounded >= 0.5)

	movsd	xmm0, QWORD PTR _f$[ebp]
	subsd	xmm0, QWORD PTR _rounded$1[ebp]
	comisd	xmm0, QWORD PTR __real@3fe0000000000000
	jb	SHORT $LN10@xmlXPathRo

; 9716 :             rounded += 1.0;

	movsd	xmm0, QWORD PTR _rounded$1[ebp]
	addsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _rounded$1[ebp], xmm0
$LN10@xmlXPathRo:

; 9717 :         ctxt->value->floatval = rounded;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR _rounded$1[ebp]
	movsd	QWORD PTR [ecx+16], xmm0
$LN9@xmlXPathRo:

; 9718 :     }
; 9719 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathRoundFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCeilingFunction
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathCeilingFunction PROC				; COMDAT

; 9680 : xmlXPathCeilingFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9681 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathCe
	jmp	$LN1@xmlXPathCe
$LN2@xmlXPathCe:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN3@xmlXPathCe
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCe
$LN3@xmlXPathCe:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN4@xmlXPathCe
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCe
$LN4@xmlXPathCe:

; 9682 :     CAST_TO_NUMBER;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@xmlXPathCe
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN5@xmlXPathCe
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN5@xmlXPathCe:

; 9683 :     CHECK_TYPE(XPATH_NUMBER);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@xmlXPathCe
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN6@xmlXPathCe
$LN7@xmlXPathCe:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCe
$LN6@xmlXPathCe:

; 9684 : 
; 9685 :     ctxt->value->floatval = ceil(ctxt->value->floatval);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	esp, 8
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [esp], eax
	mov	DWORD PTR [esp+4], ecx
	call	_ceil
	add	esp, 8
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fstp	QWORD PTR [eax+16]
$LN1@xmlXPathCe:

; 9686 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathCeilingFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFloorFunction
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathFloorFunction PROC				; COMDAT

; 9661 : xmlXPathFloorFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9662 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathFl
	jmp	$LN1@xmlXPathFl
$LN2@xmlXPathFl:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN3@xmlXPathFl
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathFl
$LN3@xmlXPathFl:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN4@xmlXPathFl
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathFl
$LN4@xmlXPathFl:

; 9663 :     CAST_TO_NUMBER;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@xmlXPathFl
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN5@xmlXPathFl
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN5@xmlXPathFl:

; 9664 :     CHECK_TYPE(XPATH_NUMBER);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@xmlXPathFl
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN6@xmlXPathFl
$LN7@xmlXPathFl:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathFl
$LN6@xmlXPathFl:

; 9665 : 
; 9666 :     ctxt->value->floatval = floor(ctxt->value->floatval);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	esp, 8
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [esp], eax
	mov	DWORD PTR [esp+4], ecx
	call	_floor
	add	esp, 8
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	fstp	QWORD PTR [eax+16]
$LN1@xmlXPathFl:

; 9667 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathFloorFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathSumFunction
_TEXT	SEGMENT
tv173 = -24						; size = 8
_res$ = -16						; size = 8
_i$ = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathSumFunction PROC				; COMDAT

; 9629 : xmlXPathSumFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9630 :     xmlXPathObjectPtr cur;
; 9631 :     int i;
; 9632 :     double res = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _res$[ebp], xmm0

; 9633 : 
; 9634 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN5@xmlXPathSu
	jmp	$LN1@xmlXPathSu
$LN5@xmlXPathSu:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN6@xmlXPathSu
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN6@xmlXPathSu:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN7@xmlXPathSu
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN7@xmlXPathSu:

; 9635 :     if ((ctxt->value == NULL) ||

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN9@xmlXPathSu
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN8@xmlXPathSu
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 9
	je	SHORT $LN8@xmlXPathSu
$LN9@xmlXPathSu:

; 9636 : 	((ctxt->value->type != XPATH_NODESET) &&
; 9637 : 	 (ctxt->value->type != XPATH_XSLT_TREE)))
; 9638 : 	XP_ERROR(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN8@xmlXPathSu:

; 9639 :     cur = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 9640 : 
; 9641 :     if ((cur->nodesetval != NULL) && (cur->nodesetval->nodeNr != 0)) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@xmlXPathSu
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@xmlXPathSu

; 9642 : 	for (i = 0; i < cur->nodesetval->nodeNr; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathSu
$LN2@xmlXPathSu:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathSu:
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@xmlXPathSu

; 9643 : 	    res += xmlXPathCastNodeToNumber(cur->nodesetval->nodeTab[i]);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_xmlXPathCastNodeToNumber
	add	esp, 4
	fstp	QWORD PTR tv173[ebp]
	movsd	xmm0, QWORD PTR tv173[ebp]
	addsd	xmm0, QWORD PTR _res$[ebp]
	movsd	QWORD PTR _res$[ebp], xmm0

; 9644 : 	}

	jmp	SHORT $LN2@xmlXPathSu
$LN3@xmlXPathSu:

; 9645 :     }
; 9646 :     valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, res));

	sub	esp, 8
	movsd	xmm0, QWORD PTR _res$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 9647 :     xmlXPathReleaseObject(ctxt->context, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathSu:

; 9648 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathSumFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNumberFunction
_TEXT	SEGMENT
_content$1 = -16					; size = 4
_res$ = -12						; size = 8
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathNumberFunction PROC				; COMDAT

; 9595 : xmlXPathNumberFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9596 :     xmlXPathObjectPtr cur;
; 9597 :     double res;
; 9598 : 
; 9599 :     if (ctxt == NULL) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathNu
	jmp	$LN1@xmlXPathNu
$LN2@xmlXPathNu:

; 9600 :     if (nargs == 0) {

	cmp	DWORD PTR _nargs$[ebp], 0
	jne	$LN3@xmlXPathNu

; 9601 : 	if (ctxt->context->node == NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN4@xmlXPathNu

; 9602 : 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, 0.0));

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 9603 : 	} else {

	jmp	SHORT $LN5@xmlXPathNu
$LN4@xmlXPathNu:

; 9604 : 	    xmlChar* content = xmlNodeGetContent(ctxt->context->node);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlNodeGetContent
	add	esp, 4
	mov	DWORD PTR _content$1[ebp], eax

; 9605 : 
; 9606 : 	    res = xmlXPathStringEvalNumber(content);

	mov	edx, DWORD PTR _content$1[ebp]
	push	edx
	call	_xmlXPathStringEvalNumber
	add	esp, 4
	fstp	QWORD PTR _res$[ebp]

; 9607 : 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, res));

	sub	esp, 8
	movsd	xmm0, QWORD PTR _res$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 9608 : 	    xmlFree(content);

	mov	esi, esp
	mov	eax, DWORD PTR _content$1[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlXPathNu:

; 9609 : 	}
; 9610 : 	return;

	jmp	SHORT $LN1@xmlXPathNu
$LN3@xmlXPathNu:

; 9611 :     }
; 9612 : 
; 9613 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN6@xmlXPathNu
	jmp	SHORT $LN1@xmlXPathNu
$LN6@xmlXPathNu:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN7@xmlXPathNu
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathNu
$LN7@xmlXPathNu:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+44]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+20], eax
	jge	SHORT $LN8@xmlXPathNu
	push	23					; 00000017H
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathNu
$LN8@xmlXPathNu:

; 9614 :     cur = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 9615 :     valuePush(ctxt, xmlXPathCacheConvertNumber(ctxt->context, cur));

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheConvertNumber
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8
$LN1@xmlXPathNu:

; 9616 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNumberFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathLangFunction
_TEXT	SEGMENT
_i$ = -20						; size = 4
_ret$ = -16						; size = 4
_lang$ = -12						; size = 4
_theLang$ = -8						; size = 4
_val$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathLangFunction PROC				; COMDAT

; 9558 : xmlXPathLangFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9559 :     xmlXPathObjectPtr val = NULL;

	mov	DWORD PTR _val$[ebp], 0

; 9560 :     const xmlChar *theLang = NULL;

	mov	DWORD PTR _theLang$[ebp], 0

; 9561 :     const xmlChar *lang;
; 9562 :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 9563 :     int i;
; 9564 : 
; 9565 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN5@xmlXPathLa
	jmp	$LN1@xmlXPathLa
$LN5@xmlXPathLa:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN6@xmlXPathLa
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathLa
$LN6@xmlXPathLa:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN7@xmlXPathLa
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathLa
$LN7@xmlXPathLa:

; 9566 :     CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN8@xmlXPathLa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN8@xmlXPathLa
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN8@xmlXPathLa:

; 9567 :     CHECK_TYPE(XPATH_STRING);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN10@xmlXPathLa
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN9@xmlXPathLa
$LN10@xmlXPathLa:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathLa
$LN9@xmlXPathLa:

; 9568 :     val = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _val$[ebp], eax

; 9569 :     lang = val->stringval;

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _lang$[ebp], eax

; 9570 :     theLang = xmlNodeGetLang(ctxt->context->node);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlNodeGetLang
	add	esp, 4
	mov	DWORD PTR _theLang$[ebp], eax

; 9571 :     if ((theLang != NULL) && (lang != NULL)) {

	cmp	DWORD PTR _theLang$[ebp], 0
	je	$not_equal$17
	cmp	DWORD PTR _lang$[ebp], 0
	je	$not_equal$17

; 9572 :         for (i = 0;lang[i] != 0;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathLa
$LN2@xmlXPathLa:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathLa:
	mov	edx, DWORD PTR _lang$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN3@xmlXPathLa

; 9573 : 	    if (toupper(lang[i]) != toupper(theLang[i]))

	mov	ecx, DWORD PTR _lang$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	esi, esp
	push	edx
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	esi, eax
	mov	eax, DWORD PTR _theLang$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movzx	ecx, BYTE PTR [eax]
	mov	edi, esp
	push	ecx
	call	DWORD PTR __imp__toupper
	add	esp, 4
	cmp	edi, esp
	call	__RTC_CheckEsp
	cmp	esi, eax
	je	SHORT $LN12@xmlXPathLa

; 9574 : 	        goto not_equal;

	jmp	SHORT $not_equal$17
$LN12@xmlXPathLa:
	jmp	SHORT $LN2@xmlXPathLa
$LN3@xmlXPathLa:

; 9575 : 	if ((theLang[i] == 0) || (theLang[i] == '-'))

	mov	edx, DWORD PTR _theLang$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN14@xmlXPathLa
	mov	ecx, DWORD PTR _theLang$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	jne	SHORT $not_equal$17
$LN14@xmlXPathLa:

; 9576 : 	    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
$not_equal$17:

; 9577 :     }
; 9578 : not_equal:
; 9579 :     if (theLang != NULL)

	cmp	DWORD PTR _theLang$[ebp], 0
	je	SHORT $LN15@xmlXPathLa

; 9580 : 	xmlFree((void *)theLang);

	mov	esi, esp
	mov	eax, DWORD PTR _theLang$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@xmlXPathLa:

; 9581 : 
; 9582 :     xmlXPathReleaseObject(ctxt->context, val);

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9583 :     valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, ret));

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8
$LN1@xmlXPathLa:

; 9584 : }

	pop	edi
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathLangFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFalseFunction
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathFalseFunction PROC				; COMDAT

; 9531 : xmlXPathFalseFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9532 :     CHECK_ARITY(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathFa
	jmp	SHORT $LN1@xmlXPathFa
$LN2@xmlXPathFa:
	cmp	DWORD PTR _nargs$[ebp], 0
	je	SHORT $LN3@xmlXPathFa
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathFa
$LN3@xmlXPathFa:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+44]
	jge	SHORT $LN4@xmlXPathFa
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathFa
$LN4@xmlXPathFa:

; 9533 :     valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 0));

	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8
$LN1@xmlXPathFa:

; 9534 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathFalseFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathTrueFunction
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathTrueFunction PROC				; COMDAT

; 9517 : xmlXPathTrueFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9518 :     CHECK_ARITY(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathTr
	jmp	SHORT $LN1@xmlXPathTr
$LN2@xmlXPathTr:
	cmp	DWORD PTR _nargs$[ebp], 0
	je	SHORT $LN3@xmlXPathTr
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathTr
$LN3@xmlXPathTr:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+44]
	jge	SHORT $LN4@xmlXPathTr
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathTr
$LN4@xmlXPathTr:

; 9519 :     valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 1));

	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8
$LN1@xmlXPathTr:

; 9520 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathTrueFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNotFunction
_TEXT	SEGMENT
tv93 = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathNotFunction PROC				; COMDAT

; 9501 : xmlXPathNotFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9502 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathNo
	jmp	$LN1@xmlXPathNo
$LN2@xmlXPathNo:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN3@xmlXPathNo
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNo
$LN3@xmlXPathNo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN4@xmlXPathNo
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathNo
$LN4@xmlXPathNo:

; 9503 :     CAST_TO_BOOLEAN;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 2
	je	SHORT $LN5@xmlXPathNo
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathBooleanFunction
	add	esp, 8
$LN5@xmlXPathNo:

; 9504 :     CHECK_TYPE(XPATH_BOOLEAN);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 2
	je	SHORT $LN6@xmlXPathNo
$LN7@xmlXPathNo:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathNo
$LN6@xmlXPathNo:

; 9505 :     ctxt->value->boolval = ! ctxt->value->boolval;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN9@xmlXPathNo
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN10@xmlXPathNo
$LN9@xmlXPathNo:
	mov	DWORD PTR tv93[ebp], 0
$LN10@xmlXPathNo:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR tv93[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@xmlXPathNo:

; 9506 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNotFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathTranslateFunction
_TEXT	SEGMENT
tv184 = -44						; size = 4
tv183 = -40						; size = 4
_cptr$ = -36						; size = 4
_point$ = -32						; size = 4
_ch$ = -25						; size = 1
_max$ = -24						; size = 4
_offset$ = -20						; size = 4
_target$ = -16						; size = 4
_to$ = -12						; size = 4
_from$ = -8						; size = 4
_str$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathTranslateFunction PROC				; COMDAT

; 9402 : xmlXPathTranslateFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9403 :     xmlXPathObjectPtr str;
; 9404 :     xmlXPathObjectPtr from;
; 9405 :     xmlXPathObjectPtr to;
; 9406 :     xmlBufPtr target;
; 9407 :     int offset, max;
; 9408 :     xmlChar ch;
; 9409 :     const xmlChar *point;
; 9410 :     xmlChar *cptr;
; 9411 : 
; 9412 :     CHECK_ARITY(3);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN7@xmlXPathTr
	jmp	$LN1@xmlXPathTr
$LN7@xmlXPathTr:
	cmp	DWORD PTR _nargs$[ebp], 3
	je	SHORT $LN8@xmlXPathTr
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathTr
$LN8@xmlXPathTr:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 3
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN9@xmlXPathTr
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathTr
$LN9@xmlXPathTr:

; 9413 : 
; 9414 :     CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN10@xmlXPathTr
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN10@xmlXPathTr
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN10@xmlXPathTr:

; 9415 :     to = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _to$[ebp], eax

; 9416 :     CAST_TO_STRING;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN11@xmlXPathTr
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 4
	je	SHORT $LN11@xmlXPathTr
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN11@xmlXPathTr:

; 9417 :     from = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _from$[ebp], eax

; 9418 :     CAST_TO_STRING;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN12@xmlXPathTr
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN12@xmlXPathTr
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathStringFunction
	add	esp, 8
$LN12@xmlXPathTr:

; 9419 :     str = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax

; 9420 : 
; 9421 :     target = xmlBufCreate();

	call	_xmlBufCreate
	mov	DWORD PTR _target$[ebp], eax

; 9422 :     if (target) {

	cmp	DWORD PTR _target$[ebp], 0
	je	$LN13@xmlXPathTr

; 9423 : 	max = xmlUTF8Strlen(to->stringval);

	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlUTF8Strlen
	add	esp, 4
	mov	DWORD PTR _max$[ebp], eax

; 9424 : 	for (cptr = str->stringval; (ch=*cptr); ) {

	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cptr$[ebp], edx
$LN4@xmlXPathTr:
	mov	eax, DWORD PTR _cptr$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _ch$[ebp], cl
	movzx	edx, BYTE PTR _ch$[ebp]
	test	edx, edx
	je	$LN13@xmlXPathTr

; 9425 : 	    offset = xmlUTF8Strloc(from->stringval, cptr);

	mov	eax, DWORD PTR _cptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _from$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlUTF8Strloc
	add	esp, 8
	mov	DWORD PTR _offset$[ebp], eax

; 9426 : 	    if (offset >= 0) {

	cmp	DWORD PTR _offset$[ebp], 0
	jl	SHORT $LN14@xmlXPathTr

; 9427 : 		if (offset < max) {

	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _max$[ebp]
	jge	SHORT $LN16@xmlXPathTr

; 9428 : 		    point = xmlUTF8Strpos(to->stringval, offset);

	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _to$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlUTF8Strpos
	add	esp, 8
	mov	DWORD PTR _point$[ebp], eax

; 9429 : 		    if (point)

	cmp	DWORD PTR _point$[ebp], 0
	je	SHORT $LN16@xmlXPathTr

; 9430 : 			xmlBufAdd(target, point, xmlUTF8Strsize(point, 1));

	push	1
	mov	ecx, DWORD PTR _point$[ebp]
	push	ecx
	call	_xmlUTF8Strsize
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _point$[ebp]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_xmlBufAdd
	add	esp, 12					; 0000000cH
$LN16@xmlXPathTr:

; 9431 : 		}
; 9432 : 	    } else

	jmp	SHORT $LN15@xmlXPathTr
$LN14@xmlXPathTr:

; 9433 : 		xmlBufAdd(target, cptr, xmlUTF8Strsize(cptr, 1));

	push	1
	mov	ecx, DWORD PTR _cptr$[ebp]
	push	ecx
	call	_xmlUTF8Strsize
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _cptr$[ebp]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_xmlBufAdd
	add	esp, 12					; 0000000cH
$LN15@xmlXPathTr:

; 9434 : 
; 9435 : 	    /* Step to next character in input */
; 9436 : 	    cptr++;

	mov	ecx, DWORD PTR _cptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cptr$[ebp], ecx

; 9437 : 	    if ( ch & 0x80 ) {

	movzx	edx, BYTE PTR _ch$[ebp]
	and	edx, 128				; 00000080H
	je	$LN18@xmlXPathTr

; 9438 : 		/* if not simple ascii, verify proper format */
; 9439 : 		if ( (ch & 0xc0) != 0xc0 ) {

	movzx	eax, BYTE PTR _ch$[ebp]
	and	eax, 192				; 000000c0H
	cmp	eax, 192				; 000000c0H
	je	SHORT $LN5@xmlXPathTr

; 9440 : 		    xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0DA@NKGEEAEF@xmlXPathTranslateFunction?3?5Inva@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 9441 : 			"xmlXPathTranslateFunction: Invalid UTF8 string\n");
; 9442 :                     /* not asserting an XPath error is probably better */
; 9443 : 		    break;

	jmp	$LN13@xmlXPathTr
$LN5@xmlXPathTr:

; 9444 : 		}
; 9445 : 		/* then skip over remaining bytes for this char */
; 9446 : 		while ( (ch <<= 1) & 0x80 )

	mov	al, BYTE PTR _ch$[ebp]
	shl	al, 1
	mov	BYTE PTR _ch$[ebp], al
	movzx	ecx, BYTE PTR _ch$[ebp]
	and	ecx, 128				; 00000080H
	je	SHORT $LN6@xmlXPathTr

; 9447 : 		    if ( (*cptr++ & 0xc0) != 0x80 ) {

	mov	edx, DWORD PTR _cptr$[ebp]
	movzx	eax, BYTE PTR [edx]
	and	eax, 192				; 000000c0H
	mov	DWORD PTR tv183[ebp], eax
	mov	ecx, DWORD PTR _cptr$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cptr$[ebp], ecx
	cmp	DWORD PTR tv183[ebp], 128		; 00000080H
	je	SHORT $LN23@xmlXPathTr
	mov	DWORD PTR tv184[ebp], 1
	jmp	SHORT $LN24@xmlXPathTr
$LN23@xmlXPathTr:
	mov	DWORD PTR tv184[ebp], 0
$LN24@xmlXPathTr:
	cmp	DWORD PTR tv184[ebp], 0
	je	SHORT $LN20@xmlXPathTr

; 9448 : 			xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0DA@NKGEEAEF@xmlXPathTranslateFunction?3?5Inva@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 9449 : 			    "xmlXPathTranslateFunction: Invalid UTF8 string\n");
; 9450 :                         /* not asserting an XPath error is probably better */
; 9451 : 			break;

	jmp	SHORT $LN6@xmlXPathTr
$LN20@xmlXPathTr:

; 9452 : 		    }

	jmp	SHORT $LN5@xmlXPathTr
$LN6@xmlXPathTr:

; 9453 : 		if (ch & 0x80) /* must have had error encountered */

	movzx	ecx, BYTE PTR _ch$[ebp]
	and	ecx, 128				; 00000080H
	je	SHORT $LN18@xmlXPathTr

; 9454 : 		    break;

	jmp	SHORT $LN13@xmlXPathTr
$LN18@xmlXPathTr:

; 9455 : 	    }
; 9456 : 	}

	jmp	$LN4@xmlXPathTr
$LN13@xmlXPathTr:

; 9457 :     }
; 9458 :     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,

	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	_xmlBufContent
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 9459 : 	xmlBufContent(target)));
; 9460 :     xmlBufFree(target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_xmlBufFree
	add	esp, 4

; 9461 :     xmlXPathReleaseObject(ctxt->context, str);

	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9462 :     xmlXPathReleaseObject(ctxt->context, from);

	mov	ecx, DWORD PTR _from$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9463 :     xmlXPathReleaseObject(ctxt->context, to);

	mov	ecx, DWORD PTR _to$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathTr:

; 9464 : }

	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathTranslateFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNormalizeFunction
_TEXT	SEGMENT
_blank$ = -17						; size = 1
_target$ = -12						; size = 4
_source$ = -8						; size = 4
_obj$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathNormalizeFunction PROC				; COMDAT

; 9331 : xmlXPathNormalizeFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9332 :   xmlXPathObjectPtr obj = NULL;

	mov	DWORD PTR _obj$[ebp], 0

; 9333 :   xmlChar *source = NULL;

	mov	DWORD PTR _source$[ebp], 0

; 9334 :   xmlBufPtr target;
; 9335 :   xmlChar blank;
; 9336 : 
; 9337 :   if (ctxt == NULL) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN6@xmlXPathNo
	jmp	$LN1@xmlXPathNo
$LN6@xmlXPathNo:

; 9338 :   if (nargs == 0) {

	cmp	DWORD PTR _nargs$[ebp], 0
	jne	SHORT $LN7@xmlXPathNo

; 9339 :     /* Use current context node */
; 9340 :       valuePush(ctxt,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathCastNodeToString
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheWrapString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 9341 : 	  xmlXPathCacheWrapString(ctxt->context,
; 9342 : 	    xmlXPathCastNodeToString(ctxt->context->node)));
; 9343 :     nargs = 1;

	mov	DWORD PTR _nargs$[ebp], 1
$LN7@xmlXPathNo:

; 9344 :   }
; 9345 : 
; 9346 :   CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN8@xmlXPathNo
	jmp	$LN1@xmlXPathNo
$LN8@xmlXPathNo:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN9@xmlXPathNo
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNo
$LN9@xmlXPathNo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN10@xmlXPathNo
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNo
$LN10@xmlXPathNo:

; 9347 :   CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN11@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN11@xmlXPathNo
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN11@xmlXPathNo:

; 9348 :   CHECK_TYPE(XPATH_STRING);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN13@xmlXPathNo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN12@xmlXPathNo
$LN13@xmlXPathNo:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNo
$LN12@xmlXPathNo:

; 9349 :   obj = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 9350 :   source = obj->stringval;

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _source$[ebp], eax

; 9351 : 
; 9352 :   target = xmlBufCreate();

	call	_xmlBufCreate
	mov	DWORD PTR _target$[ebp], eax

; 9353 :   if (target && source) {

	cmp	DWORD PTR _target$[ebp], 0
	je	$LN14@xmlXPathNo
	cmp	DWORD PTR _source$[ebp], 0
	je	$LN14@xmlXPathNo
$LN2@xmlXPathNo:

; 9354 : 
; 9355 :     /* Skip leading whitespaces */
; 9356 :     while (IS_BLANK_CH(*source))

	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN15@xmlXPathNo
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN16@xmlXPathNo
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN15@xmlXPathNo
$LN16@xmlXPathNo:
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathNo
$LN15@xmlXPathNo:

; 9357 :       source++;

	mov	eax, DWORD PTR _source$[ebp]
	add	eax, 1
	mov	DWORD PTR _source$[ebp], eax
	jmp	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 9358 : 
; 9359 :     /* Collapse intermediate whitespaces, and skip trailing whitespaces */
; 9360 :     blank = 0;

	mov	BYTE PTR _blank$[ebp], 0
$LN4@xmlXPathNo:

; 9361 :     while (*source) {

	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN5@xmlXPathNo

; 9362 :       if (IS_BLANK_CH(*source)) {

	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN19@xmlXPathNo
	mov	edx, DWORD PTR _source$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN20@xmlXPathNo
	mov	ecx, DWORD PTR _source$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN19@xmlXPathNo
$LN20@xmlXPathNo:
	mov	eax, DWORD PTR _source$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN17@xmlXPathNo
$LN19@xmlXPathNo:

; 9363 : 	blank = 0x20;

	mov	BYTE PTR _blank$[ebp], 32		; 00000020H

; 9364 :       } else {

	jmp	SHORT $LN18@xmlXPathNo
$LN17@xmlXPathNo:

; 9365 : 	if (blank) {

	movzx	edx, BYTE PTR _blank$[ebp]
	test	edx, edx
	je	SHORT $LN21@xmlXPathNo

; 9366 : 	  xmlBufAdd(target, &blank, 1);

	push	1
	lea	eax, DWORD PTR _blank$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	call	_xmlBufAdd
	add	esp, 12					; 0000000cH

; 9367 : 	  blank = 0;

	mov	BYTE PTR _blank$[ebp], 0
$LN21@xmlXPathNo:

; 9368 : 	}
; 9369 : 	xmlBufAdd(target, source, 1);

	push	1
	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_xmlBufAdd
	add	esp, 12					; 0000000cH
$LN18@xmlXPathNo:

; 9370 :       }
; 9371 :       source++;

	mov	ecx, DWORD PTR _source$[ebp]
	add	ecx, 1
	mov	DWORD PTR _source$[ebp], ecx

; 9372 :     }

	jmp	SHORT $LN4@xmlXPathNo
$LN5@xmlXPathNo:

; 9373 :     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,

	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	_xmlBufContent
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 9374 : 	xmlBufContent(target)));
; 9375 :     xmlBufFree(target);

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_xmlBufFree
	add	esp, 4
$LN14@xmlXPathNo:

; 9376 :   }
; 9377 :   xmlXPathReleaseObject(ctxt->context, obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathNo:

; 9378 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@xmlXPathNo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@xmlXPathNo:
	DD	1
	DD	$LN24@xmlXPathNo
$LN24@xmlXPathNo:
	DD	-17					; ffffffefH
	DD	1
	DD	$LN23@xmlXPathNo
$LN23@xmlXPathNo:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	107					; 0000006bH
	DB	0
_xmlXPathNormalizeFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathSubstringAfterFunction
_TEXT	SEGMENT
_offset$ = -20						; size = 4
_point$ = -16						; size = 4
_target$ = -12						; size = 4
_find$ = -8						; size = 4
_str$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathSubstringAfterFunction PROC			; COMDAT

; 9287 : xmlXPathSubstringAfterFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9288 :   xmlXPathObjectPtr str;
; 9289 :   xmlXPathObjectPtr find;
; 9290 :   xmlBufPtr target;
; 9291 :   const xmlChar *point;
; 9292 :   int offset;
; 9293 : 
; 9294 :   CHECK_ARITY(2);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathSu
	jmp	$LN1@xmlXPathSu
$LN2@xmlXPathSu:
	cmp	DWORD PTR _nargs$[ebp], 2
	je	SHORT $LN3@xmlXPathSu
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN3@xmlXPathSu:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN4@xmlXPathSu
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN4@xmlXPathSu:

; 9295 :   CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@xmlXPathSu
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN5@xmlXPathSu
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN5@xmlXPathSu:

; 9296 :   find = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _find$[ebp], eax

; 9297 :   CAST_TO_STRING;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN6@xmlXPathSu
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 4
	je	SHORT $LN6@xmlXPathSu
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN6@xmlXPathSu:

; 9298 :   str = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax

; 9299 : 
; 9300 :   target = xmlBufCreate();

	call	_xmlBufCreate
	mov	DWORD PTR _target$[ebp], eax

; 9301 :   if (target) {

	cmp	DWORD PTR _target$[ebp], 0
	je	$LN7@xmlXPathSu

; 9302 :     point = xmlStrstr(str->stringval, find->stringval);

	mov	eax, DWORD PTR _find$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrstr
	add	esp, 8
	mov	DWORD PTR _point$[ebp], eax

; 9303 :     if (point) {

	cmp	DWORD PTR _point$[ebp], 0
	je	SHORT $LN8@xmlXPathSu

; 9304 :       offset = (int)(point - str->stringval) + xmlStrlen(find->stringval);

	mov	ecx, DWORD PTR _str$[ebp]
	mov	esi, DWORD PTR _point$[ebp]
	sub	esi, DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _find$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrlen
	add	esp, 4
	add	esi, eax
	mov	DWORD PTR _offset$[ebp], esi

; 9305 :       xmlBufAdd(target, &str->stringval[offset],

	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	sub	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	_xmlBufAdd
	add	esp, 12					; 0000000cH
$LN8@xmlXPathSu:

; 9306 : 		   xmlStrlen(str->stringval) - offset);
; 9307 :     }
; 9308 :     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,

	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_xmlBufContent
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 9309 : 	xmlBufContent(target)));
; 9310 :     xmlBufFree(target);

	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	call	_xmlBufFree
	add	esp, 4
$LN7@xmlXPathSu:

; 9311 :   }
; 9312 :   xmlXPathReleaseObject(ctxt->context, str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9313 :   xmlXPathReleaseObject(ctxt->context, find);

	mov	edx, DWORD PTR _find$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathSu:

; 9314 : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathSubstringAfterFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathSubstringBeforeFunction
_TEXT	SEGMENT
_offset$ = -20						; size = 4
_point$ = -16						; size = 4
_target$ = -12						; size = 4
_find$ = -8						; size = 4
_str$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathSubstringBeforeFunction PROC			; COMDAT

; 9244 : xmlXPathSubstringBeforeFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9245 :   xmlXPathObjectPtr str;
; 9246 :   xmlXPathObjectPtr find;
; 9247 :   xmlBufPtr target;
; 9248 :   const xmlChar *point;
; 9249 :   int offset;
; 9250 : 
; 9251 :   CHECK_ARITY(2);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathSu
	jmp	$LN1@xmlXPathSu
$LN2@xmlXPathSu:
	cmp	DWORD PTR _nargs$[ebp], 2
	je	SHORT $LN3@xmlXPathSu
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN3@xmlXPathSu:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN4@xmlXPathSu
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN4@xmlXPathSu:

; 9252 :   CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@xmlXPathSu
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN5@xmlXPathSu
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN5@xmlXPathSu:

; 9253 :   find = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _find$[ebp], eax

; 9254 :   CAST_TO_STRING;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN6@xmlXPathSu
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 4
	je	SHORT $LN6@xmlXPathSu
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN6@xmlXPathSu:

; 9255 :   str = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax

; 9256 : 
; 9257 :   target = xmlBufCreate();

	call	_xmlBufCreate
	mov	DWORD PTR _target$[ebp], eax

; 9258 :   if (target) {

	cmp	DWORD PTR _target$[ebp], 0
	je	SHORT $LN7@xmlXPathSu

; 9259 :     point = xmlStrstr(str->stringval, find->stringval);

	mov	eax, DWORD PTR _find$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrstr
	add	esp, 8
	mov	DWORD PTR _point$[ebp], eax

; 9260 :     if (point) {

	cmp	DWORD PTR _point$[ebp], 0
	je	SHORT $LN8@xmlXPathSu

; 9261 :       offset = (int)(point - str->stringval);

	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR _point$[ebp]
	sub	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _offset$[ebp], edx

; 9262 :       xmlBufAdd(target, str->stringval, offset);

	mov	eax, DWORD PTR _offset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _target$[ebp]
	push	eax
	call	_xmlBufAdd
	add	esp, 12					; 0000000cH
$LN8@xmlXPathSu:

; 9263 :     }
; 9264 :     valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,

	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	call	_xmlBufContent
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 9265 : 	xmlBufContent(target)));
; 9266 :     xmlBufFree(target);

	mov	edx, DWORD PTR _target$[ebp]
	push	edx
	call	_xmlBufFree
	add	esp, 4
$LN7@xmlXPathSu:

; 9267 :   }
; 9268 :   xmlXPathReleaseObject(ctxt->context, str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9269 :   xmlXPathReleaseObject(ctxt->context, find);

	mov	eax, DWORD PTR _find$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathSu:

; 9270 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathSubstringBeforeFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathSubstringFunction
_TEXT	SEGMENT
_ret$ = -44						; size = 4
_m$ = -40						; size = 4
_l$ = -36						; size = 4
_i$ = -32						; size = 4
_in$ = -28						; size = 8
_le$ = -20						; size = 8
_len$ = -12						; size = 4
_start$ = -8						; size = 4
_str$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathSubstringFunction PROC				; COMDAT

; 9135 : xmlXPathSubstringFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-44]
	mov	ecx, 11					; 0000000bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9136 :     xmlXPathObjectPtr str, start, len;
; 9137 :     double le=0, in;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _le$[ebp], xmm0

; 9138 :     int i, l, m;
; 9139 :     xmlChar *ret;
; 9140 : 
; 9141 :     if (nargs < 2) {

	cmp	DWORD PTR _nargs$[ebp], 2
	jge	SHORT $LN5@xmlXPathSu

; 9142 : 	CHECK_ARITY(2);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN3@xmlXPathSu
	jmp	$LN1@xmlXPathSu
$LN3@xmlXPathSu:
	cmp	DWORD PTR _nargs$[ebp], 2
	je	SHORT $LN4@xmlXPathSu
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN4@xmlXPathSu:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN5@xmlXPathSu
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN5@xmlXPathSu:

; 9143 :     }
; 9144 :     if (nargs > 3) {

	cmp	DWORD PTR _nargs$[ebp], 3
	jle	SHORT $LN9@xmlXPathSu

; 9145 : 	CHECK_ARITY(3);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN7@xmlXPathSu
	jmp	$LN1@xmlXPathSu
$LN7@xmlXPathSu:
	cmp	DWORD PTR _nargs$[ebp], 3
	je	SHORT $LN8@xmlXPathSu
	push	12					; 0000000cH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN8@xmlXPathSu:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 3
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+20], ecx
	jge	SHORT $LN9@xmlXPathSu
	push	23					; 00000017H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN9@xmlXPathSu:

; 9146 :     }
; 9147 :     /*
; 9148 :      * take care of possible last (position) argument
; 9149 :     */
; 9150 :     if (nargs == 3) {

	cmp	DWORD PTR _nargs$[ebp], 3
	jne	SHORT $LN10@xmlXPathSu

; 9151 : 	CAST_TO_NUMBER;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN11@xmlXPathSu
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN11@xmlXPathSu
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN11@xmlXPathSu:

; 9152 : 	CHECK_TYPE(XPATH_NUMBER);

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN13@xmlXPathSu
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN12@xmlXPathSu
$LN13@xmlXPathSu:
	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN12@xmlXPathSu:

; 9153 : 	len = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 9154 : 	le = len->floatval;

	mov	ecx, DWORD PTR _len$[ebp]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR _le$[ebp], xmm0

; 9155 : 	xmlXPathReleaseObject(ctxt->context, len);

	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN10@xmlXPathSu:

; 9156 :     }
; 9157 : 
; 9158 :     CAST_TO_NUMBER;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN14@xmlXPathSu
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN14@xmlXPathSu
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN14@xmlXPathSu:

; 9159 :     CHECK_TYPE(XPATH_NUMBER);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN16@xmlXPathSu
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN15@xmlXPathSu
$LN16@xmlXPathSu:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN15@xmlXPathSu:

; 9160 :     start = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _start$[ebp], eax

; 9161 :     in = start->floatval;

	mov	edx, DWORD PTR _start$[ebp]
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR _in$[ebp], xmm0

; 9162 :     xmlXPathReleaseObject(ctxt->context, start);

	mov	eax, DWORD PTR _start$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9163 :     CAST_TO_STRING;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN17@xmlXPathSu
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN17@xmlXPathSu
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathStringFunction
	add	esp, 8
$LN17@xmlXPathSu:

; 9164 :     CHECK_TYPE(XPATH_STRING);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN19@xmlXPathSu
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 4
	je	SHORT $LN18@xmlXPathSu
$LN19@xmlXPathSu:
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN18@xmlXPathSu:

; 9165 :     str = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax

; 9166 :     m = xmlUTF8Strlen((const unsigned char *)str->stringval);

	mov	eax, DWORD PTR _str$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlUTF8Strlen
	add	esp, 4
	mov	DWORD PTR _m$[ebp], eax

; 9167 : 
; 9168 :     /*
; 9169 :      * If last pos not present, calculate last position
; 9170 :     */
; 9171 :     if (nargs != 3) {

	cmp	DWORD PTR _nargs$[ebp], 3
	je	SHORT $LN21@xmlXPathSu

; 9172 : 	le = (double)m;

	cvtsi2sd xmm0, DWORD PTR _m$[ebp]
	movsd	QWORD PTR _le$[ebp], xmm0

; 9173 : 	if (in < 1.0)

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	comisd	xmm0, QWORD PTR _in$[ebp]
	jbe	SHORT $LN21@xmlXPathSu

; 9174 : 	    in = 1.0;

	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR _in$[ebp], xmm0
$LN21@xmlXPathSu:

; 9175 :     }
; 9176 : 
; 9177 :     /* Need to check for the special cases where either
; 9178 :      * the index is NaN, the length is NaN, or both
; 9179 :      * arguments are infinity (relying on Inf + -Inf = NaN)
; 9180 :      */
; 9181 :     if (!xmlXPathIsInf(in) && !xmlXPathIsNaN(in + le)) {

	sub	esp, 8
	movsd	xmm0, QWORD PTR _in$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	test	eax, eax
	jne	$LN22@xmlXPathSu
	movsd	xmm0, QWORD PTR _in$[ebp]
	addsd	xmm0, QWORD PTR _le$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	jne	$LN22@xmlXPathSu

; 9182 :         /*
; 9183 :          * To meet the requirements of the spec, the arguments
; 9184 : 	 * must be converted to integer format before
; 9185 : 	 * initial index calculations are done
; 9186 :          *
; 9187 :          * First we go to integer form, rounding up
; 9188 : 	 * and checking for special cases
; 9189 :          */
; 9190 :         i = (int) in;

	cvttsd2si edx, QWORD PTR _in$[ebp]
	mov	DWORD PTR _i$[ebp], edx

; 9191 :         if (((double)i)+0.5 <= in) i++;

	cvtsi2sd xmm0, DWORD PTR _i$[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	xmm1, QWORD PTR _in$[ebp]
	comisd	xmm1, xmm0
	jb	SHORT $LN24@xmlXPathSu
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN24@xmlXPathSu:

; 9192 : 
; 9193 : 	if (xmlXPathIsInf(le) == 1) {

	sub	esp, 8
	movsd	xmm0, QWORD PTR _le$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN25@xmlXPathSu

; 9194 : 	    l = m;

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR _l$[ebp], ecx

; 9195 : 	    if (i < 1)

	cmp	DWORD PTR _i$[ebp], 1
	jge	SHORT $LN27@xmlXPathSu

; 9196 : 		i = 1;

	mov	DWORD PTR _i$[ebp], 1
$LN27@xmlXPathSu:

; 9197 : 	}

	jmp	SHORT $LN31@xmlXPathSu
$LN25@xmlXPathSu:

; 9198 : 	else if (xmlXPathIsInf(le) == -1 || le < 0.0)

	sub	esp, 8
	movsd	xmm0, QWORD PTR _le$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	cmp	eax, -1
	je	SHORT $LN30@xmlXPathSu
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR _le$[ebp]
	jbe	SHORT $LN28@xmlXPathSu
$LN30@xmlXPathSu:

; 9199 : 	    l = 0;

	mov	DWORD PTR _l$[ebp], 0
	jmp	SHORT $LN31@xmlXPathSu
$LN28@xmlXPathSu:

; 9200 : 	else {
; 9201 : 	    l = (int) le;

	cvttsd2si edx, QWORD PTR _le$[ebp]
	mov	DWORD PTR _l$[ebp], edx

; 9202 : 	    if (((double)l)+0.5 <= le) l++;

	cvtsi2sd xmm0, DWORD PTR _l$[ebp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	xmm1, QWORD PTR _le$[ebp]
	comisd	xmm1, xmm0
	jb	SHORT $LN31@xmlXPathSu
	mov	eax, DWORD PTR _l$[ebp]
	add	eax, 1
	mov	DWORD PTR _l$[ebp], eax
$LN31@xmlXPathSu:

; 9203 : 	}
; 9204 : 
; 9205 : 	/* Now we normalize inidices */
; 9206 :         i -= 1;

	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 9207 :         l += i;

	mov	edx, DWORD PTR _l$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _l$[ebp], edx

; 9208 :         if (i < 0)

	cmp	DWORD PTR _i$[ebp], 0
	jge	SHORT $LN32@xmlXPathSu

; 9209 :             i = 0;

	mov	DWORD PTR _i$[ebp], 0
$LN32@xmlXPathSu:

; 9210 :         if (l > m)

	mov	eax, DWORD PTR _l$[ebp]
	cmp	eax, DWORD PTR _m$[ebp]
	jle	SHORT $LN33@xmlXPathSu

; 9211 :             l = m;

	mov	ecx, DWORD PTR _m$[ebp]
	mov	DWORD PTR _l$[ebp], ecx
$LN33@xmlXPathSu:

; 9212 : 
; 9213 :         /* number of chars to copy */
; 9214 :         l -= i;

	mov	edx, DWORD PTR _l$[ebp]
	sub	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _l$[ebp], edx

; 9215 : 
; 9216 :         ret = xmlUTF8Strsub(str->stringval, i, l);

	mov	eax, DWORD PTR _l$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlUTF8Strsub
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 9217 :     }

	jmp	SHORT $LN23@xmlXPathSu
$LN22@xmlXPathSu:

; 9218 :     else {
; 9219 :         ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0
$LN23@xmlXPathSu:

; 9220 :     }
; 9221 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN34@xmlXPathSu

; 9222 : 	valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewCString
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
	jmp	SHORT $LN35@xmlXPathSu
$LN34@xmlXPathSu:

; 9223 :     else {
; 9224 : 	valuePush(ctxt, xmlXPathCacheNewString(ctxt->context, ret));

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 9225 : 	xmlFree(ret);

	mov	esi, esp
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN35@xmlXPathSu:

; 9226 :     }
; 9227 :     xmlXPathReleaseObject(ctxt->context, str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathSu:

; 9228 : }

	pop	edi
	pop	esi
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathSubstringFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathStartsWithFunction
_TEXT	SEGMENT
_n$ = -12						; size = 4
_needle$ = -8						; size = 4
_hay$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathStartsWithFunction PROC			; COMDAT

; 9081 : xmlXPathStartsWithFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9082 :     xmlXPathObjectPtr hay, needle;
; 9083 :     int n;
; 9084 : 
; 9085 :     CHECK_ARITY(2);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathSt
	jmp	$LN1@xmlXPathSt
$LN2@xmlXPathSt:
	cmp	DWORD PTR _nargs$[ebp], 2
	je	SHORT $LN3@xmlXPathSt
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSt
$LN3@xmlXPathSt:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN4@xmlXPathSt
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSt
$LN4@xmlXPathSt:

; 9086 :     CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@xmlXPathSt
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN5@xmlXPathSt
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN5@xmlXPathSt:

; 9087 :     CHECK_TYPE(XPATH_STRING);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@xmlXPathSt
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN6@xmlXPathSt
$LN7@xmlXPathSt:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSt
$LN6@xmlXPathSt:

; 9088 :     needle = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _needle$[ebp], eax

; 9089 :     CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN8@xmlXPathSt
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN8@xmlXPathSt
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN8@xmlXPathSt:

; 9090 :     hay = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _hay$[ebp], eax

; 9091 : 
; 9092 :     if ((hay == NULL) || (hay->type != XPATH_STRING)) {

	cmp	DWORD PTR _hay$[ebp], 0
	je	SHORT $LN10@xmlXPathSt
	mov	ecx, DWORD PTR _hay$[ebp]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN9@xmlXPathSt
$LN10@xmlXPathSt:

; 9093 : 	xmlXPathReleaseObject(ctxt->context, hay);

	mov	edx, DWORD PTR _hay$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9094 : 	xmlXPathReleaseObject(ctxt->context, needle);

	mov	edx, DWORD PTR _needle$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9095 : 	XP_ERROR(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSt
$LN9@xmlXPathSt:

; 9096 :     }
; 9097 :     n = xmlStrlen(needle->stringval);

	mov	eax, DWORD PTR _needle$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlStrlen
	add	esp, 4
	mov	DWORD PTR _n$[ebp], eax

; 9098 :     if (xmlStrncmp(hay->stringval, needle->stringval, n))

	mov	edx, DWORD PTR _n$[ebp]
	push	edx
	mov	eax, DWORD PTR _needle$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _hay$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN11@xmlXPathSt

; 9099 :         valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 0));

	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
	jmp	SHORT $LN12@xmlXPathSt
$LN11@xmlXPathSt:

; 9100 :     else
; 9101 :         valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 1));

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
$LN12@xmlXPathSt:

; 9102 :     xmlXPathReleaseObject(ctxt->context, hay);

	mov	ecx, DWORD PTR _hay$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9103 :     xmlXPathReleaseObject(ctxt->context, needle);

	mov	ecx, DWORD PTR _needle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathSt:

; 9104 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathStartsWithFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathContainsFunction
_TEXT	SEGMENT
_needle$ = -8						; size = 4
_hay$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathContainsFunction PROC				; COMDAT

; 9047 : xmlXPathContainsFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9048 :     xmlXPathObjectPtr hay, needle;
; 9049 : 
; 9050 :     CHECK_ARITY(2);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:
	cmp	DWORD PTR _nargs$[ebp], 2
	je	SHORT $LN3@xmlXPathCo
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN3@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN4@xmlXPathCo
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:

; 9051 :     CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN5@xmlXPathCo
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN5@xmlXPathCo:

; 9052 :     CHECK_TYPE(XPATH_STRING);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN6@xmlXPathCo
$LN7@xmlXPathCo:
	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN6@xmlXPathCo:

; 9053 :     needle = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _needle$[ebp], eax

; 9054 :     CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN8@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN8@xmlXPathCo
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN8@xmlXPathCo:

; 9055 :     hay = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _hay$[ebp], eax

; 9056 : 
; 9057 :     if ((hay == NULL) || (hay->type != XPATH_STRING)) {

	cmp	DWORD PTR _hay$[ebp], 0
	je	SHORT $LN10@xmlXPathCo
	mov	ecx, DWORD PTR _hay$[ebp]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN9@xmlXPathCo
$LN10@xmlXPathCo:

; 9058 : 	xmlXPathReleaseObject(ctxt->context, hay);

	mov	edx, DWORD PTR _hay$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9059 : 	xmlXPathReleaseObject(ctxt->context, needle);

	mov	edx, DWORD PTR _needle$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9060 : 	XP_ERROR(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCo
$LN9@xmlXPathCo:

; 9061 :     }
; 9062 :     if (xmlStrstr(hay->stringval, needle->stringval))

	mov	eax, DWORD PTR _needle$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _hay$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrstr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@xmlXPathCo

; 9063 : 	valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 1));

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
	jmp	SHORT $LN12@xmlXPathCo
$LN11@xmlXPathCo:

; 9064 :     else
; 9065 : 	valuePush(ctxt, xmlXPathCacheNewBoolean(ctxt->context, 0));

	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewBoolean
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
$LN12@xmlXPathCo:

; 9066 :     xmlXPathReleaseObject(ctxt->context, hay);

	mov	ecx, DWORD PTR _hay$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9067 :     xmlXPathReleaseObject(ctxt->context, needle);

	mov	ecx, DWORD PTR _needle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathCo:

; 9068 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathContainsFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathConcatFunction
_TEXT	SEGMENT
_tmp$ = -12						; size = 4
_newobj$ = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathConcatFunction PROC				; COMDAT

; 9002 : xmlXPathConcatFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9003 :     xmlXPathObjectPtr cur, newobj;
; 9004 :     xmlChar *tmp;
; 9005 : 
; 9006 :     if (ctxt == NULL) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN4@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:

; 9007 :     if (nargs < 2) {

	cmp	DWORD PTR _nargs$[ebp], 2
	jge	SHORT $LN5@xmlXPathCo

; 9008 : 	CHECK_ARITY(2);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN6@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN6@xmlXPathCo:
	cmp	DWORD PTR _nargs$[ebp], 2
	je	SHORT $LN7@xmlXPathCo
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN7@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN5@xmlXPathCo
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN5@xmlXPathCo:

; 9009 :     }
; 9010 : 
; 9011 :     CAST_TO_STRING;

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN9@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN9@xmlXPathCo
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN9@xmlXPathCo:

; 9012 :     cur = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 9013 :     if ((cur == NULL) || (cur->type != XPATH_STRING)) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN11@xmlXPathCo
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN10@xmlXPathCo
$LN11@xmlXPathCo:

; 9014 : 	xmlXPathReleaseObject(ctxt->context, cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9015 : 	return;

	jmp	$LN1@xmlXPathCo
$LN10@xmlXPathCo:

; 9016 :     }
; 9017 :     nargs--;

	mov	edx, DWORD PTR _nargs$[ebp]
	sub	edx, 1
	mov	DWORD PTR _nargs$[ebp], edx
$LN2@xmlXPathCo:

; 9018 : 
; 9019 :     while (nargs > 0) {

	cmp	DWORD PTR _nargs$[ebp], 0
	jle	$LN3@xmlXPathCo

; 9020 : 	CAST_TO_STRING;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN12@xmlXPathCo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN12@xmlXPathCo
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathStringFunction
	add	esp, 8
$LN12@xmlXPathCo:

; 9021 : 	newobj = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _newobj$[ebp], eax

; 9022 : 	if ((newobj == NULL) || (newobj->type != XPATH_STRING)) {

	cmp	DWORD PTR _newobj$[ebp], 0
	je	SHORT $LN14@xmlXPathCo
	mov	edx, DWORD PTR _newobj$[ebp]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN13@xmlXPathCo
$LN14@xmlXPathCo:

; 9023 : 	    xmlXPathReleaseObject(ctxt->context, newobj);

	mov	eax, DWORD PTR _newobj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9024 : 	    xmlXPathReleaseObject(ctxt->context, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9025 : 	    XP_ERROR(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCo
$LN13@xmlXPathCo:

; 9026 : 	}
; 9027 : 	tmp = xmlStrcat(newobj->stringval, cur->stringval);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _newobj$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _tmp$[ebp], eax

; 9028 : 	newobj->stringval = cur->stringval;

	mov	edx, DWORD PTR _newobj$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx

; 9029 : 	cur->stringval = tmp;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx+24], eax

; 9030 : 	xmlXPathReleaseObject(ctxt->context, newobj);

	mov	ecx, DWORD PTR _newobj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 9031 : 	nargs--;

	mov	ecx, DWORD PTR _nargs$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _nargs$[ebp], ecx

; 9032 :     }

	jmp	$LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 9033 :     valuePush(ctxt, cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
$LN1@xmlXPathCo:

; 9034 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathConcatFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathStringLengthFunction
_TEXT	SEGMENT
_content$1 = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathStringLengthFunction PROC			; COMDAT

; 8965 : xmlXPathStringLengthFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8966 :     xmlXPathObjectPtr cur;
; 8967 : 
; 8968 :     if (nargs == 0) {

	cmp	DWORD PTR _nargs$[ebp], 0
	jne	$LN2@xmlXPathSt

; 8969 :         if ((ctxt == NULL) || (ctxt->context == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN4@xmlXPathSt
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@xmlXPathSt
$LN4@xmlXPathSt:

; 8970 : 	    return;

	jmp	$LN1@xmlXPathSt
$LN3@xmlXPathSt:

; 8971 : 	if (ctxt->context->node == NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN5@xmlXPathSt

; 8972 : 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, 0));

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8973 : 	} else {

	jmp	SHORT $LN6@xmlXPathSt
$LN5@xmlXPathSt:

; 8974 : 	    xmlChar *content;
; 8975 : 
; 8976 : 	    content = xmlXPathCastNodeToString(ctxt->context->node);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathCastNodeToString
	add	esp, 4
	mov	DWORD PTR _content$1[ebp], eax

; 8977 : 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context,

	mov	eax, DWORD PTR _content$1[ebp]
	push	eax
	call	_xmlUTF8Strlen
	add	esp, 4
	cvtsi2sd xmm0, eax
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 8978 : 		xmlUTF8Strlen(content)));
; 8979 : 	    xmlFree(content);

	mov	esi, esp
	mov	ecx, DWORD PTR _content$1[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlXPathSt:

; 8980 : 	}
; 8981 : 	return;

	jmp	$LN1@xmlXPathSt
$LN2@xmlXPathSt:

; 8982 :     }
; 8983 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN7@xmlXPathSt
	jmp	$LN1@xmlXPathSt
$LN7@xmlXPathSt:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN8@xmlXPathSt
	push	12					; 0000000cH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSt
$LN8@xmlXPathSt:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+20], ecx
	jge	SHORT $LN9@xmlXPathSt
	push	23					; 00000017H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSt
$LN9@xmlXPathSt:

; 8984 :     CAST_TO_STRING;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN10@xmlXPathSt
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 4
	je	SHORT $LN10@xmlXPathSt
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathStringFunction
	add	esp, 8
$LN10@xmlXPathSt:

; 8985 :     CHECK_TYPE(XPATH_STRING);

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN12@xmlXPathSt
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN11@xmlXPathSt
$LN12@xmlXPathSt:
	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathSt
$LN11@xmlXPathSt:

; 8986 :     cur = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 8987 :     valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context,

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlUTF8Strlen
	add	esp, 4
	cvtsi2sd xmm0, eax
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8988 : 	xmlUTF8Strlen(cur->stringval)));
; 8989 :     xmlXPathReleaseObject(ctxt->context, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathSt:

; 8990 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathStringLengthFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathStringFunction
_TEXT	SEGMENT
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathStringFunction PROC				; COMDAT

; 8935 : xmlXPathStringFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8936 :     xmlXPathObjectPtr cur;
; 8937 : 
; 8938 :     if (ctxt == NULL) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathSt
	jmp	$LN1@xmlXPathSt
$LN2@xmlXPathSt:

; 8939 :     if (nargs == 0) {

	cmp	DWORD PTR _nargs$[ebp], 0
	jne	SHORT $LN3@xmlXPathSt

; 8940 :     valuePush(ctxt,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathCastNodeToString
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheWrapString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8941 : 	xmlXPathCacheWrapString(ctxt->context,
; 8942 : 	    xmlXPathCastNodeToString(ctxt->context->node)));
; 8943 : 	return;

	jmp	$LN1@xmlXPathSt
$LN3@xmlXPathSt:

; 8944 :     }
; 8945 : 
; 8946 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN4@xmlXPathSt
	jmp	SHORT $LN1@xmlXPathSt
$LN4@xmlXPathSt:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN5@xmlXPathSt
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathSt
$LN5@xmlXPathSt:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN6@xmlXPathSt
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathSt
$LN6@xmlXPathSt:

; 8947 :     cur = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 8948 :     if (cur == NULL) XP_ERROR(XPATH_INVALID_OPERAND);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN7@xmlXPathSt
	push	10					; 0000000aH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathSt
$LN7@xmlXPathSt:

; 8949 :     valuePush(ctxt, xmlXPathCacheConvertString(ctxt->context, cur));

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheConvertString
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8
$LN1@xmlXPathSt:

; 8950 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathStringFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNamespaceURIFunction
_TEXT	SEGMENT
tv144 = -12						; size = 4
_i$1 = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathNamespaceURIFunction PROC			; COMDAT

; 8780 : xmlXPathNamespaceURIFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8781 :     xmlXPathObjectPtr cur;
; 8782 : 
; 8783 :     if (ctxt == NULL) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN4@xmlXPathNa
	jmp	$LN1@xmlXPathNa
$LN4@xmlXPathNa:

; 8784 : 
; 8785 :     if (nargs == 0) {

	cmp	DWORD PTR _nargs$[ebp], 0
	jne	SHORT $LN5@xmlXPathNa

; 8786 : 	valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8787 : 	    ctxt->context->node));
; 8788 : 	nargs = 1;

	mov	DWORD PTR _nargs$[ebp], 1
$LN5@xmlXPathNa:

; 8789 :     }
; 8790 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN6@xmlXPathNa
	jmp	$LN1@xmlXPathNa
$LN6@xmlXPathNa:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN7@xmlXPathNa
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNa
$LN7@xmlXPathNa:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN8@xmlXPathNa
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNa
$LN8@xmlXPathNa:

; 8791 :     if ((ctxt->value == NULL) ||

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN10@xmlXPathNa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN9@xmlXPathNa
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 9
	je	SHORT $LN9@xmlXPathNa
$LN10@xmlXPathNa:

; 8792 : 	((ctxt->value->type != XPATH_NODESET) &&
; 8793 : 	 (ctxt->value->type != XPATH_XSLT_TREE)))
; 8794 : 	XP_ERROR(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathNa
$LN9@xmlXPathNa:

; 8795 :     cur = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 8796 : 
; 8797 :     if ((cur->nodesetval == NULL) || (cur->nodesetval->nodeNr == 0)) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN13@xmlXPathNa
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@xmlXPathNa
$LN13@xmlXPathNa:

; 8798 : 	valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewCString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8799 :     } else {

	jmp	$LN12@xmlXPathNa
$LN11@xmlXPathNa:

; 8800 : 	int i = 0; /* Should be first in document order !!!!! */

	mov	DWORD PTR _i$1[ebp], 0

; 8801 : 	switch (cur->nodesetval->nodeTab[i]->type) {

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv144[ebp], edx
	cmp	DWORD PTR tv144[ebp], 0
	jle	SHORT $LN17@xmlXPathNa
	cmp	DWORD PTR tv144[ebp], 2
	jle	SHORT $LN14@xmlXPathNa
	jmp	SHORT $LN17@xmlXPathNa
$LN14@xmlXPathNa:

; 8802 : 	case XML_ELEMENT_NODE:
; 8803 : 	case XML_ATTRIBUTE_NODE:
; 8804 : 	    if (cur->nodesetval->nodeTab[i]->ns == NULL)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN15@xmlXPathNa

; 8805 : 		valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewCString
	add	esp, 8
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8
	jmp	SHORT $LN16@xmlXPathNa
$LN15@xmlXPathNa:

; 8806 : 	    else
; 8807 : 		valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
$LN16@xmlXPathNa:

; 8808 : 			  cur->nodesetval->nodeTab[i]->ns->href));
; 8809 : 	    break;

	jmp	SHORT $LN12@xmlXPathNa
$LN17@xmlXPathNa:

; 8810 : 	default:
; 8811 : 	    valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewCString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
$LN12@xmlXPathNa:

; 8812 : 	}
; 8813 :     }
; 8814 :     xmlXPathReleaseObject(ctxt->context, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathNa:

; 8815 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNamespaceURIFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathLocalNameFunction
_TEXT	SEGMENT
tv144 = -12						; size = 4
_i$1 = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathLocalNameFunction PROC				; COMDAT

; 8721 : xmlXPathLocalNameFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8722 :     xmlXPathObjectPtr cur;
; 8723 : 
; 8724 :     if (ctxt == NULL) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN4@xmlXPathLo
	jmp	$LN1@xmlXPathLo
$LN4@xmlXPathLo:

; 8725 : 
; 8726 :     if (nargs == 0) {

	cmp	DWORD PTR _nargs$[ebp], 0
	jne	SHORT $LN5@xmlXPathLo

; 8727 : 	valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8728 : 	    ctxt->context->node));
; 8729 : 	nargs = 1;

	mov	DWORD PTR _nargs$[ebp], 1
$LN5@xmlXPathLo:

; 8730 :     }
; 8731 : 
; 8732 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN6@xmlXPathLo
	jmp	$LN1@xmlXPathLo
$LN6@xmlXPathLo:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN7@xmlXPathLo
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathLo
$LN7@xmlXPathLo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN8@xmlXPathLo
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathLo
$LN8@xmlXPathLo:

; 8733 :     if ((ctxt->value == NULL) ||

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN10@xmlXPathLo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN9@xmlXPathLo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 9
	je	SHORT $LN9@xmlXPathLo
$LN10@xmlXPathLo:

; 8734 : 	((ctxt->value->type != XPATH_NODESET) &&
; 8735 : 	 (ctxt->value->type != XPATH_XSLT_TREE)))
; 8736 : 	XP_ERROR(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathLo
$LN9@xmlXPathLo:

; 8737 :     cur = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 8738 : 
; 8739 :     if ((cur->nodesetval == NULL) || (cur->nodesetval->nodeNr == 0)) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN13@xmlXPathLo
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN11@xmlXPathLo
$LN13@xmlXPathLo:

; 8740 : 	valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewCString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8741 :     } else {

	jmp	$LN12@xmlXPathLo
$LN11@xmlXPathLo:

; 8742 : 	int i = 0; /* Should be first in document order !!!!! */

	mov	DWORD PTR _i$1[ebp], 0

; 8743 : 	switch (cur->nodesetval->nodeTab[i]->type) {

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv144[ebp], edx
	mov	eax, DWORD PTR tv144[ebp]
	sub	eax, 1
	mov	DWORD PTR tv144[ebp], eax
	cmp	DWORD PTR tv144[ebp], 17		; 00000011H
	ja	$LN18@xmlXPathLo
	mov	ecx, DWORD PTR tv144[ebp]
	movzx	edx, BYTE PTR $LN20@xmlXPathLo[ecx]
	jmp	DWORD PTR $LN21@xmlXPathLo[edx*4]
$LN14@xmlXPathLo:

; 8744 : 	case XML_ELEMENT_NODE:
; 8745 : 	case XML_ATTRIBUTE_NODE:
; 8746 : 	case XML_PI_NODE:
; 8747 : 	    if (cur->nodesetval->nodeTab[i]->name[0] == ' ')

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR [ecx+8]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN15@xmlXPathLo

; 8748 : 		valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewCString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
	jmp	SHORT $LN16@xmlXPathLo
$LN15@xmlXPathLo:

; 8749 : 	    else
; 8750 : 		valuePush(ctxt,

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
$LN16@xmlXPathLo:

; 8751 : 		      xmlXPathCacheNewString(ctxt->context,
; 8752 : 			cur->nodesetval->nodeTab[i]->name));
; 8753 : 	    break;

	jmp	SHORT $LN12@xmlXPathLo
$LN17@xmlXPathLo:

; 8754 : 	case XML_NAMESPACE_DECL:
; 8755 : 	    valuePush(ctxt, xmlXPathCacheNewString(ctxt->context,

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8756 : 			((xmlNsPtr)cur->nodesetval->nodeTab[i])->prefix));
; 8757 : 	    break;

	jmp	SHORT $LN12@xmlXPathLo
$LN18@xmlXPathLo:

; 8758 : 	default:
; 8759 : 	    valuePush(ctxt, xmlXPathCacheNewCString(ctxt->context, ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewCString
	add	esp, 8
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
$LN12@xmlXPathLo:

; 8760 : 	}
; 8761 :     }
; 8762 :     xmlXPathReleaseObject(ctxt->context, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathLo:

; 8763 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@xmlXPathLo:
	DD	$LN14@xmlXPathLo
	DD	$LN17@xmlXPathLo
	DD	$LN18@xmlXPathLo
$LN20@xmlXPathLo:
	DB	0
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	2
	DB	1
_xmlXPathLocalNameFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathIdFunction
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_ns$2 = -16						; size = 4
_obj$ = -12						; size = 4
_ret$ = -8						; size = 4
_tokens$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathIdFunction PROC				; COMDAT

; 8666 : xmlXPathIdFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8667 :     xmlChar *tokens;
; 8668 :     xmlNodeSetPtr ret;
; 8669 :     xmlXPathObjectPtr obj;
; 8670 : 
; 8671 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN5@xmlXPathId
	jmp	$LN1@xmlXPathId
$LN5@xmlXPathId:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN6@xmlXPathId
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathId
$LN6@xmlXPathId:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN7@xmlXPathId
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathId
$LN7@xmlXPathId:

; 8672 :     obj = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 8673 :     if (obj == NULL) XP_ERROR(XPATH_INVALID_OPERAND);

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN8@xmlXPathId
	push	10					; 0000000aH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathId
$LN8@xmlXPathId:

; 8674 :     if ((obj->type == XPATH_NODESET) || (obj->type == XPATH_XSLT_TREE)) {

	mov	ecx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN10@xmlXPathId
	mov	edx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [edx], 9
	jne	$LN9@xmlXPathId
$LN10@xmlXPathId:

; 8675 : 	xmlNodeSetPtr ns;
; 8676 : 	int i;
; 8677 : 
; 8678 : 	ret = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 8679 :         /*
; 8680 :          * FIXME -- in an out-of-memory condition this will behave badly.
; 8681 :          * The solution is not clear -- we already popped an item from
; 8682 :          * ctxt, so the object is in a corrupt state.
; 8683 :          */
; 8684 : 
; 8685 : 	if (obj->nodesetval != NULL) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN11@xmlXPathId

; 8686 : 	    for (i = 0; i < obj->nodesetval->nodeNr; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@xmlXPathId
$LN2@xmlXPathId:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@xmlXPathId:
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN11@xmlXPathId

; 8687 : 		tokens =

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_xmlXPathCastNodeToString
	add	esp, 4
	mov	DWORD PTR _tokens$[ebp], eax

; 8688 : 		    xmlXPathCastNodeToString(obj->nodesetval->nodeTab[i]);
; 8689 : 		ns = xmlXPathGetElementsByIds(ctxt->context->doc, tokens);

	mov	ecx, DWORD PTR _tokens$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlXPathGetElementsByIds
	add	esp, 8
	mov	DWORD PTR _ns$2[ebp], eax

; 8690 : 		ret = xmlXPathNodeSetMerge(ret, ns);

	mov	edx, DWORD PTR _ns$2[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlXPathNodeSetMerge
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 8691 : 		xmlXPathFreeNodeSet(ns);

	mov	ecx, DWORD PTR _ns$2[ebp]
	push	ecx
	call	_xmlXPathFreeNodeSet
	add	esp, 4

; 8692 : 		if (tokens != NULL)

	cmp	DWORD PTR _tokens$[ebp], 0
	je	SHORT $LN12@xmlXPathId

; 8693 : 		    xmlFree(tokens);

	mov	esi, esp
	mov	edx, DWORD PTR _tokens$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlXPathId:

; 8694 : 	    }

	jmp	$LN2@xmlXPathId
$LN11@xmlXPathId:

; 8695 : 	}
; 8696 : 	xmlXPathReleaseObject(ctxt->context, obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 8697 : 	valuePush(ctxt, xmlXPathCacheWrapNodeSet(ctxt->context, ret));

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheWrapNodeSet
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 8698 : 	return;

	jmp	SHORT $LN1@xmlXPathId
$LN9@xmlXPathId:

; 8699 :     }
; 8700 :     obj = xmlXPathCacheConvertString(ctxt->context, obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheConvertString
	add	esp, 8
	mov	DWORD PTR _obj$[ebp], eax

; 8701 :     ret = xmlXPathGetElementsByIds(ctxt->context->doc, obj->stringval);

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_xmlXPathGetElementsByIds
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 8702 :     valuePush(ctxt, xmlXPathCacheWrapNodeSet(ctxt->context, ret));

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheWrapNodeSet
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 8703 :     xmlXPathReleaseObject(ctxt->context, obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathId:

; 8704 :     return;
; 8705 : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathIdFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCountFunction
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_tmp$2 = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathCountFunction PROC				; COMDAT

; 8553 : xmlXPathCountFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8554 :     xmlXPathObjectPtr cur;
; 8555 : 
; 8556 :     CHECK_ARITY(1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN4@xmlXPathCo
	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:
	cmp	DWORD PTR _nargs$[ebp], 1
	je	SHORT $LN5@xmlXPathCo
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN5@xmlXPathCo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], edx
	jge	SHORT $LN6@xmlXPathCo
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN6@xmlXPathCo:

; 8557 :     if ((ctxt->value == NULL) ||

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN8@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN7@xmlXPathCo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 9
	je	SHORT $LN7@xmlXPathCo
$LN8@xmlXPathCo:

; 8558 : 	((ctxt->value->type != XPATH_NODESET) &&
; 8559 : 	 (ctxt->value->type != XPATH_XSLT_TREE)))
; 8560 : 	XP_ERROR(XPATH_INVALID_TYPE);

	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathCo
$LN7@xmlXPathCo:

; 8561 :     cur = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 8562 : 
; 8563 :     if ((cur == NULL) || (cur->nodesetval == NULL))

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN11@xmlXPathCo
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN9@xmlXPathCo
$LN11@xmlXPathCo:

; 8564 : 	valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, (double) 0));

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
	jmp	$LN16@xmlXPathCo
$LN9@xmlXPathCo:

; 8565 :     else if ((cur->type == XPATH_NODESET) || (cur->type == XPATH_XSLT_TREE)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN14@xmlXPathCo
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx], 9
	jne	SHORT $LN12@xmlXPathCo
$LN14@xmlXPathCo:

; 8566 : 	valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context,

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cvtsi2sd xmm0, DWORD PTR [ecx]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePush
	add	esp, 8

; 8567 : 	    (double) cur->nodesetval->nodeNr));
; 8568 :     } else {

	jmp	$LN16@xmlXPathCo
$LN12@xmlXPathCo:

; 8569 : 	if ((cur->nodesetval->nodeNr != 1) ||

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN17@xmlXPathCo
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN15@xmlXPathCo
$LN17@xmlXPathCo:

; 8570 : 	    (cur->nodesetval->nodeTab == NULL)) {
; 8571 : 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, (double) 0));

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8572 : 	} else {

	jmp	SHORT $LN16@xmlXPathCo
$LN15@xmlXPathCo:

; 8573 : 	    xmlNodePtr tmp;
; 8574 : 	    int i = 0;

	mov	DWORD PTR _i$1[ebp], 0

; 8575 : 
; 8576 : 	    tmp = cur->nodesetval->nodeTab[0];

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _tmp$2[ebp], edx

; 8577 : 	    if ((tmp != NULL) && (tmp->type != XML_NAMESPACE_DECL)) {

	cmp	DWORD PTR _tmp$2[ebp], 0
	je	SHORT $LN3@xmlXPathCo
	mov	eax, DWORD PTR _tmp$2[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	je	SHORT $LN3@xmlXPathCo

; 8578 : 		tmp = tmp->children;

	mov	ecx, DWORD PTR _tmp$2[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _tmp$2[ebp], edx
$LN2@xmlXPathCo:

; 8579 : 		while (tmp != NULL) {

	cmp	DWORD PTR _tmp$2[ebp], 0
	je	SHORT $LN3@xmlXPathCo

; 8580 : 		    tmp = tmp->next;

	mov	eax, DWORD PTR _tmp$2[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _tmp$2[ebp], ecx

; 8581 : 		    i++;

	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx

; 8582 : 		}

	jmp	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:

; 8583 : 	    }
; 8584 : 	    valuePush(ctxt, xmlXPathCacheNewFloat(ctxt->context, (double) i));

	cvtsi2sd xmm0, DWORD PTR _i$1[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8
$LN16@xmlXPathCo:

; 8585 : 	}
; 8586 :     }
; 8587 :     xmlXPathReleaseObject(ctxt->context, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN1@xmlXPathCo:

; 8588 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCountFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathPositionFunction
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathPositionFunction PROC				; COMDAT

; 8529 : xmlXPathPositionFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8530 :     CHECK_ARITY(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathPo
	jmp	SHORT $LN6@xmlXPathPo
$LN2@xmlXPathPo:
	cmp	DWORD PTR _nargs$[ebp], 0
	je	SHORT $LN3@xmlXPathPo
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN6@xmlXPathPo
$LN3@xmlXPathPo:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+44]
	jge	SHORT $LN4@xmlXPathPo
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN6@xmlXPathPo
$LN4@xmlXPathPo:

; 8531 :     if (ctxt->context->proximityPosition >= 0) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax+72], 0
	jl	SHORT $LN5@xmlXPathPo

; 8532 : 	valuePush(ctxt,

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cvtsi2sd xmm0, DWORD PTR [edx+72]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8533 : 	      xmlXPathCacheNewFloat(ctxt->context,
; 8534 : 		(double) ctxt->context->proximityPosition));
; 8535 : #ifdef DEBUG_EXPR
; 8536 : 	xmlGenericError(xmlGenericErrorContext, "position() : %d\n",
; 8537 : 		ctxt->context->proximityPosition);
; 8538 : #endif
; 8539 :     } else {

	jmp	SHORT $LN6@xmlXPathPo
$LN5@xmlXPathPo:

; 8540 : 	XP_ERROR(XPATH_INVALID_CTXT_POSITION);

	push	14					; 0000000eH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
$LN6@xmlXPathPo:

; 8541 :     }
; 8542 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathPositionFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathLastFunction
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_nargs$ = 12						; size = 4
_xmlXPathLastFunction PROC				; COMDAT

; 8502 : xmlXPathLastFunction(xmlXPathParserContextPtr ctxt, int nargs) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8503 :     CHECK_ARITY(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathLa
	jmp	SHORT $LN6@xmlXPathLa
$LN2@xmlXPathLa:
	cmp	DWORD PTR _nargs$[ebp], 0
	je	SHORT $LN3@xmlXPathLa
	push	12					; 0000000cH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN6@xmlXPathLa
$LN3@xmlXPathLa:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+44]
	jge	SHORT $LN4@xmlXPathLa
	push	23					; 00000017H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN6@xmlXPathLa
$LN4@xmlXPathLa:

; 8504 :     if (ctxt->context->contextSize >= 0) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax+68], 0
	jl	SHORT $LN5@xmlXPathLa

; 8505 : 	valuePush(ctxt,

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cvtsi2sd xmm0, DWORD PTR [edx+68]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathCacheNewFloat
	add	esp, 12					; 0000000cH
	push	eax
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePush
	add	esp, 8

; 8506 : 	    xmlXPathCacheNewFloat(ctxt->context,
; 8507 : 		(double) ctxt->context->contextSize));
; 8508 : #ifdef DEBUG_EXPR
; 8509 : 	xmlGenericError(xmlGenericErrorContext,
; 8510 : 		"last() : %d\n", ctxt->context->contextSize);
; 8511 : #endif
; 8512 :     } else {

	jmp	SHORT $LN6@xmlXPathLa
$LN5@xmlXPathLa:

; 8513 : 	XP_ERROR(XPATH_INVALID_CTXT_SIZE);

	push	13					; 0000000dH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
$LN6@xmlXPathLa:

; 8514 :     }
; 8515 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathLastFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextPrecedingSibling
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextPrecedingSibling PROC			; COMDAT

; 8194 : xmlXPathNextPrecedingSibling(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8195 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@xmlXPathNe
$LN3@xmlXPathNe:
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 8196 :     if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+4], 2
	je	SHORT $LN5@xmlXPathNe
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN4@xmlXPathNe
$LN5@xmlXPathNe:

; 8197 : 	(ctxt->context->node->type == XML_NAMESPACE_DECL))
; 8198 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 8199 :     if (cur == (xmlNodePtr) ctxt->context->doc)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN6@xmlXPathNe

; 8200 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 8201 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN7@xmlXPathNe

; 8202 :         return(ctxt->context->node->prev);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+28]
	jmp	SHORT $LN1@xmlXPathNe
$LN7@xmlXPathNe:

; 8203 :     if ((cur->prev != NULL) && (cur->prev->type == XML_DTD_NODE)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN8@xmlXPathNe
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+28]
	cmp	DWORD PTR [eax+4], 14			; 0000000eH
	jne	SHORT $LN8@xmlXPathNe

; 8204 : 	cur = cur->prev;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _cur$[ebp], edx

; 8205 : 	if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN8@xmlXPathNe

; 8206 : 	    return(ctxt->context->node->prev);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+28]
	jmp	SHORT $LN1@xmlXPathNe
$LN8@xmlXPathNe:

; 8207 :     }
; 8208 :     return(cur->prev);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [eax+28]
$LN1@xmlXPathNe:

; 8209 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNextPrecedingSibling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextAncestor
_TEXT	SEGMENT
tv160 = -24						; size = 4
tv74 = -20						; size = 4
_ns$1 = -16						; size = 4
_att$2 = -12						; size = 4
_ns$3 = -8						; size = 4
_tmp$4 = -4						; size = 4
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextAncestor PROC				; COMDAT

; 8026 : xmlXPathNextAncestor(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8027 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN7@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN6@xmlXPathNe
$LN7@xmlXPathNe:
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 8028 :     /*
; 8029 :      * the parent of an attribute or namespace node is the element
; 8030 :      * to which the attribute or namespace node is attached
; 8031 :      * !!!!!!!!!!!!!
; 8032 :      */
; 8033 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	$LN8@xmlXPathNe

; 8034 : 	if (ctxt->context->node == NULL) return(NULL);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@xmlXPathNe
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN9@xmlXPathNe:

; 8035 : 	switch (ctxt->context->node->type) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 20			; 00000014H
	ja	$LN2@xmlXPathNe
	mov	edx, DWORD PTR tv74[ebp]
	movzx	eax, BYTE PTR $LN29@xmlXPathNe[edx]
	jmp	DWORD PTR $LN31@xmlXPathNe[eax*4]
$LN10@xmlXPathNe:

; 8036 :             case XML_ELEMENT_NODE:
; 8037 :             case XML_TEXT_NODE:
; 8038 :             case XML_CDATA_SECTION_NODE:
; 8039 :             case XML_ENTITY_REF_NODE:
; 8040 :             case XML_ENTITY_NODE:
; 8041 :             case XML_PI_NODE:
; 8042 :             case XML_COMMENT_NODE:
; 8043 : 	    case XML_DTD_NODE:
; 8044 : 	    case XML_ELEMENT_DECL:
; 8045 : 	    case XML_ATTRIBUTE_DECL:
; 8046 : 	    case XML_ENTITY_DECL:
; 8047 :             case XML_NOTATION_NODE:
; 8048 : 	    case XML_XINCLUDE_START:
; 8049 : 	    case XML_XINCLUDE_END:
; 8050 : 		if (ctxt->context->node->parent == NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN11@xmlXPathNe

; 8051 : 		    return((xmlNodePtr) ctxt->context->doc);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	jmp	$LN1@xmlXPathNe
$LN11@xmlXPathNe:

; 8052 : 		if ((ctxt->context->node->parent->type == XML_ELEMENT_NODE) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN12@xmlXPathNe
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR [ecx+8]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN13@xmlXPathNe
	push	OFFSET ??_C@_0BC@MHFGEIED@fake?5node?5libxslt@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@xmlXPathNe
$LN13@xmlXPathNe:

; 8053 : 		    ((ctxt->context->node->parent->name[0] == ' ') ||
; 8054 : 		     (xmlStrEqual(ctxt->context->node->parent->name,
; 8055 : 				 BAD_CAST "fake node libxslt"))))
; 8056 : 		    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN12@xmlXPathNe:

; 8057 : 		return(ctxt->context->node->parent);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+20]
	jmp	$LN1@xmlXPathNe
$LN14@xmlXPathNe:

; 8058 :             case XML_ATTRIBUTE_NODE: {
; 8059 : 		xmlAttrPtr tmp = (xmlAttrPtr) ctxt->context->node;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _tmp$4[ebp], ecx

; 8060 : 
; 8061 : 		return(tmp->parent);

	mov	edx, DWORD PTR _tmp$4[ebp]
	mov	eax, DWORD PTR [edx+20]
	jmp	$LN1@xmlXPathNe
$LN15@xmlXPathNe:

; 8062 : 	    }
; 8063 :             case XML_DOCUMENT_NODE:
; 8064 :             case XML_DOCUMENT_TYPE_NODE:
; 8065 :             case XML_DOCUMENT_FRAG_NODE:
; 8066 :             case XML_HTML_DOCUMENT_NODE:
; 8067 : #ifdef LIBXML_DOCB_ENABLED
; 8068 : 	    case XML_DOCB_DOCUMENT_NODE:
; 8069 : #endif
; 8070 :                 return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN16@xmlXPathNe:

; 8071 : 	    case XML_NAMESPACE_DECL: {
; 8072 : 		xmlNsPtr ns = (xmlNsPtr) ctxt->context->node;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ns$3[ebp], edx

; 8073 : 
; 8074 : 		if ((ns->next != NULL) &&

	mov	eax, DWORD PTR _ns$3[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN17@xmlXPathNe
	mov	ecx, DWORD PTR _ns$3[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	je	SHORT $LN17@xmlXPathNe

; 8075 : 		    (ns->next->type != XML_NAMESPACE_DECL))
; 8076 : 		    return((xmlNodePtr) ns->next);

	mov	eax, DWORD PTR _ns$3[ebp]
	mov	eax, DWORD PTR [eax]
	jmp	$LN1@xmlXPathNe
$LN17@xmlXPathNe:

; 8077 : 		/* Bad, how did that namespace end up here ? */
; 8078 :                 return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 8079 : 	    }
; 8080 : 	}
; 8081 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN8@xmlXPathNe:

; 8082 :     }
; 8083 :     if (cur == ctxt->context->doc->children)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN18@xmlXPathNe

; 8084 : 	return((xmlNodePtr) ctxt->context->doc);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	eax, DWORD PTR [eax]
	jmp	$LN1@xmlXPathNe
$LN18@xmlXPathNe:

; 8085 :     if (cur == (xmlNodePtr) ctxt->context->doc)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN19@xmlXPathNe

; 8086 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN19@xmlXPathNe:

; 8087 :     switch (cur->type) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv160[ebp], edx
	mov	eax, DWORD PTR tv160[ebp]
	sub	eax, 1
	mov	DWORD PTR tv160[ebp], eax
	cmp	DWORD PTR tv160[ebp], 20		; 00000014H
	ja	$LN4@xmlXPathNe
	mov	ecx, DWORD PTR tv160[ebp]
	movzx	edx, BYTE PTR $LN30@xmlXPathNe[ecx]
	jmp	DWORD PTR $LN32@xmlXPathNe[edx*4]
$LN20@xmlXPathNe:

; 8088 : 	case XML_ELEMENT_NODE:
; 8089 : 	case XML_TEXT_NODE:
; 8090 : 	case XML_CDATA_SECTION_NODE:
; 8091 : 	case XML_ENTITY_REF_NODE:
; 8092 : 	case XML_ENTITY_NODE:
; 8093 : 	case XML_PI_NODE:
; 8094 : 	case XML_COMMENT_NODE:
; 8095 : 	case XML_NOTATION_NODE:
; 8096 : 	case XML_DTD_NODE:
; 8097 :         case XML_ELEMENT_DECL:
; 8098 :         case XML_ATTRIBUTE_DECL:
; 8099 :         case XML_ENTITY_DECL:
; 8100 : 	case XML_XINCLUDE_START:
; 8101 : 	case XML_XINCLUDE_END:
; 8102 : 	    if (cur->parent == NULL)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN21@xmlXPathNe

; 8103 : 		return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN21@xmlXPathNe:

; 8104 : 	    if ((cur->parent->type == XML_ELEMENT_NODE) &&

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN22@xmlXPathNe
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR [ecx+8]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN23@xmlXPathNe
	push	OFFSET ??_C@_0BC@MHFGEIED@fake?5node?5libxslt@
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN22@xmlXPathNe
$LN23@xmlXPathNe:

; 8105 : 		((cur->parent->name[0] == ' ') ||
; 8106 : 		 (xmlStrEqual(cur->parent->name,
; 8107 : 			      BAD_CAST "fake node libxslt"))))
; 8108 : 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN22@xmlXPathNe:

; 8109 : 	    return(cur->parent);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [eax+20]
	jmp	SHORT $LN1@xmlXPathNe
$LN24@xmlXPathNe:

; 8110 : 	case XML_ATTRIBUTE_NODE: {
; 8111 : 	    xmlAttrPtr att = (xmlAttrPtr) cur;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _att$2[ebp], ecx

; 8112 : 
; 8113 : 	    return(att->parent);

	mov	edx, DWORD PTR _att$2[ebp]
	mov	eax, DWORD PTR [edx+20]
	jmp	SHORT $LN1@xmlXPathNe
$LN25@xmlXPathNe:

; 8114 : 	}
; 8115 : 	case XML_NAMESPACE_DECL: {
; 8116 : 	    xmlNsPtr ns = (xmlNsPtr) cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _ns$1[ebp], eax

; 8117 : 
; 8118 : 	    if ((ns->next != NULL) &&

	mov	ecx, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN26@xmlXPathNe
	mov	edx, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	je	SHORT $LN26@xmlXPathNe

; 8119 : 	        (ns->next->type != XML_NAMESPACE_DECL))
; 8120 : 	        return((xmlNodePtr) ns->next);

	mov	ecx, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [ecx]
	jmp	SHORT $LN1@xmlXPathNe
$LN26@xmlXPathNe:

; 8121 : 	    /* Bad, how did that namespace end up here ? */
; 8122 :             return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN27@xmlXPathNe:

; 8123 : 	}
; 8124 : 	case XML_DOCUMENT_NODE:
; 8125 : 	case XML_DOCUMENT_TYPE_NODE:
; 8126 : 	case XML_DOCUMENT_FRAG_NODE:
; 8127 : 	case XML_HTML_DOCUMENT_NODE:
; 8128 : #ifdef LIBXML_DOCB_ENABLED
; 8129 : 	case XML_DOCB_DOCUMENT_NODE:
; 8130 : #endif
; 8131 : 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 8132 :     }
; 8133 :     return(NULL);

	xor	eax, eax
$LN1@xmlXPathNe:

; 8134 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN31@xmlXPathNe:
	DD	$LN10@xmlXPathNe
	DD	$LN14@xmlXPathNe
	DD	$LN15@xmlXPathNe
	DD	$LN16@xmlXPathNe
$LN29@xmlXPathNe:
	DB	0
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	0
	DB	0
	DB	2
	npad	3
$LN32@xmlXPathNe:
	DD	$LN20@xmlXPathNe
	DD	$LN24@xmlXPathNe
	DD	$LN27@xmlXPathNe
	DD	$LN25@xmlXPathNe
$LN30@xmlXPathNe:
	DB	0
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	0
	DB	0
	DB	2
_xmlXPathNextAncestor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextPreceding
_TEXT	SEGMENT
_ns$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextPreceding PROC				; COMDAT

; 8299 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8300 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN9@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN8@xmlXPathNe
$LN9@xmlXPathNe:
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN8@xmlXPathNe:

; 8301 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN10@xmlXPathNe

; 8302 :         cur = ctxt->context->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _cur$[ebp], eax

; 8303 :         if (cur->type == XML_ATTRIBUTE_NODE) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN11@xmlXPathNe

; 8304 :             cur = cur->parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN10@xmlXPathNe
$LN11@xmlXPathNe:

; 8305 :         } else if (cur->type == XML_NAMESPACE_DECL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN10@xmlXPathNe

; 8306 :             xmlNsPtr ns = (xmlNsPtr) cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _ns$1[ebp], edx

; 8307 : 
; 8308 :             if ((ns->next == NULL) ||

	mov	eax, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN15@xmlXPathNe
	mov	ecx, DWORD PTR _ns$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN14@xmlXPathNe
$LN15@xmlXPathNe:

; 8309 :                 (ns->next->type == XML_NAMESPACE_DECL))
; 8310 :                 return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN14@xmlXPathNe:

; 8311 :             cur = (xmlNodePtr) ns->next;

	mov	eax, DWORD PTR _ns$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _cur$[ebp], ecx
$LN10@xmlXPathNe:

; 8312 :         }
; 8313 :     }
; 8314 :     if ((cur == NULL) || (cur->type == XML_NAMESPACE_DECL))

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN17@xmlXPathNe
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN16@xmlXPathNe
$LN17@xmlXPathNe:

; 8315 : 	return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN16@xmlXPathNe:

; 8316 :     if ((cur->prev != NULL) && (cur->prev->type == XML_DTD_NODE))

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN4@xmlXPathNe
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+4], 14			; 0000000eH
	jne	SHORT $LN4@xmlXPathNe

; 8317 : 	cur = cur->prev;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _cur$[ebp], ecx
$LN4@xmlXPathNe:

; 8318 :     do {
; 8319 :         if (cur->prev != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN19@xmlXPathNe

; 8320 :             for (cur = cur->prev; cur->last != NULL; cur = cur->last) ;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN7@xmlXPathNe
$LN5@xmlXPathNe:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _cur$[ebp], eax
$LN7@xmlXPathNe:
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN6@xmlXPathNe
	jmp	SHORT $LN5@xmlXPathNe
$LN6@xmlXPathNe:

; 8321 :             return (cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN1@xmlXPathNe
$LN19@xmlXPathNe:

; 8322 :         }
; 8323 : 
; 8324 :         cur = cur->parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax

; 8325 :         if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN20@xmlXPathNe

; 8326 :             return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN20@xmlXPathNe:

; 8327 :         if (cur == ctxt->context->doc->children)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR [eax+12]
	jne	SHORT $LN2@xmlXPathNe

; 8328 :             return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 8329 :     } while (xmlXPathIsAncestor(cur, ctxt->context->node));

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlXPathIsAncestor
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@xmlXPathNe

; 8330 :     return (cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlXPathNe:

; 8331 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNextPreceding ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextAttribute
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextAttribute PROC				; COMDAT

; 8441 : xmlXPathNextAttribute(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8442 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@xmlXPathNe
$LN3@xmlXPathNe:
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 8443 :     if (ctxt->context->node == NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN4@xmlXPathNe

; 8444 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 8445 :     if (ctxt->context->node->type != XML_ELEMENT_NODE)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN5@xmlXPathNe

; 8446 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN5@xmlXPathNe:

; 8447 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN6@xmlXPathNe

; 8448 :         if (ctxt->context->node == (xmlNodePtr) ctxt->context->doc)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN7@xmlXPathNe

; 8449 : 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN7@xmlXPathNe:

; 8450 :         return((xmlNodePtr)ctxt->context->node->properties);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+44]
	jmp	SHORT $LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 8451 :     }
; 8452 :     return((xmlNodePtr)cur->next);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
$LN1@xmlXPathNe:

; 8453 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNextAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextNamespace
_TEXT	SEGMENT
tv147 = -4						; size = 4
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextNamespace PROC				; COMDAT

; 8404 : xmlXPathNextNamespace(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8405 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@xmlXPathNe
$LN5@xmlXPathNe:
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 8406 :     if (ctxt->context->node->type != XML_ELEMENT_NODE) return(NULL);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN6@xmlXPathNe
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 8407 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	$LN7@xmlXPathNe

; 8408 :         if (ctxt->context->tmpNsList != NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+120], 0
	je	SHORT $LN8@xmlXPathNe

; 8409 : 	    xmlFree(ctxt->context->tmpNsList);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@xmlXPathNe:

; 8410 : 	ctxt->context->tmpNsList =

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_xmlGetNsList
	add	esp, 8
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+120], eax

; 8411 : 	    xmlGetNsList(ctxt->context->doc, ctxt->context->node);
; 8412 : 	ctxt->context->tmpNsNr = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+124], 0

; 8413 : 	if (ctxt->context->tmpNsList != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN9@xmlXPathNe
$LN2@xmlXPathNe:

; 8414 : 	    while (ctxt->context->tmpNsList[ctxt->context->tmpNsNr] != NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx+124]
	mov	ecx, DWORD PTR [edx+120]
	cmp	DWORD PTR [ecx+eax*4], 0
	je	SHORT $LN9@xmlXPathNe

; 8415 : 		ctxt->context->tmpNsNr++;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+124]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+124], ecx

; 8416 : 	    }

	jmp	SHORT $LN2@xmlXPathNe
$LN9@xmlXPathNe:

; 8417 : 	}
; 8418 : 	return((xmlNodePtr) xmlXPathXMLNamespace);

	mov	eax, DWORD PTR _xmlXPathXMLNamespace
	jmp	SHORT $LN1@xmlXPathNe
$LN7@xmlXPathNe:

; 8419 :     }
; 8420 :     if (ctxt->context->tmpNsNr > 0) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+124], 0
	jle	SHORT $LN10@xmlXPathNe

; 8421 : 	return (xmlNodePtr)ctxt->context->tmpNsList[--ctxt->context->tmpNsNr];

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+124]
	sub	edx, 1
	mov	DWORD PTR tv147[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR tv147[ebp]
	mov	DWORD PTR [ecx+124], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+120]
	mov	eax, DWORD PTR tv147[ebp]
	mov	eax, DWORD PTR [edx+eax*4]
	jmp	SHORT $LN1@xmlXPathNe

; 8422 :     } else {

	jmp	SHORT $LN1@xmlXPathNe
$LN10@xmlXPathNe:

; 8423 : 	if (ctxt->context->tmpNsList != NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+120], 0
	je	SHORT $LN12@xmlXPathNe

; 8424 : 	    xmlFree(ctxt->context->tmpNsList);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlXPathNe:

; 8425 : 	ctxt->context->tmpNsList = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+120], 0

; 8426 : 	return(NULL);

	xor	eax, eax
$LN1@xmlXPathNe:

; 8427 :     }
; 8428 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNextNamespace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextFollowing
_TEXT	SEGMENT
_ns$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextFollowing PROC				; COMDAT

; 8225 : xmlXPathNextFollowing(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8226 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN6@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN5@xmlXPathNe
$LN6@xmlXPathNe:
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN5@xmlXPathNe:

; 8227 :     if ((cur != NULL) && (cur->type  != XML_ATTRIBUTE_NODE) &&
; 8228 :         (cur->type != XML_NAMESPACE_DECL) && (cur->children != NULL))

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN7@xmlXPathNe
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	je	SHORT $LN7@xmlXPathNe
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	je	SHORT $LN7@xmlXPathNe
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN7@xmlXPathNe

; 8229 :         return(cur->children);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	jmp	$LN1@xmlXPathNe
$LN7@xmlXPathNe:

; 8230 : 
; 8231 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN8@xmlXPathNe

; 8232 :         cur = ctxt->context->node;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _cur$[ebp], ecx

; 8233 :         if (cur->type == XML_ATTRIBUTE_NODE) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN9@xmlXPathNe

; 8234 :             cur = cur->parent;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN8@xmlXPathNe
$LN9@xmlXPathNe:

; 8235 :         } else if (cur->type == XML_NAMESPACE_DECL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN8@xmlXPathNe

; 8236 :             xmlNsPtr ns = (xmlNsPtr) cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _ns$1[ebp], eax

; 8237 : 
; 8238 :             if ((ns->next == NULL) ||

	mov	ecx, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN13@xmlXPathNe
	mov	edx, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN12@xmlXPathNe
$LN13@xmlXPathNe:

; 8239 :                 (ns->next->type == XML_NAMESPACE_DECL))
; 8240 :                 return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN12@xmlXPathNe:

; 8241 :             cur = (xmlNodePtr) ns->next;

	mov	ecx, DWORD PTR _ns$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cur$[ebp], edx
$LN8@xmlXPathNe:

; 8242 :         }
; 8243 :     }
; 8244 :     if (cur == NULL) return(NULL) ; /* ERROR */

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN14@xmlXPathNe
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN14@xmlXPathNe:

; 8245 :     if (cur->next != NULL) return(cur->next) ;

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN4@xmlXPathNe
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	jmp	SHORT $LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 8246 :     do {
; 8247 :         cur = cur->parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax

; 8248 :         if (cur == NULL) break;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN16@xmlXPathNe
	jmp	SHORT $LN3@xmlXPathNe
$LN16@xmlXPathNe:

; 8249 :         if (cur == (xmlNodePtr) ctxt->context->doc) return(NULL);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN17@xmlXPathNe
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN17@xmlXPathNe:

; 8250 :         if (cur->next != NULL) return(cur->next);

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN2@xmlXPathNe
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 8251 :     } while (cur != NULL);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN4@xmlXPathNe
$LN3@xmlXPathNe:

; 8252 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlXPathNe:

; 8253 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNextFollowing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextFollowingSibling
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextFollowingSibling PROC			; COMDAT

; 8169 : xmlXPathNextFollowingSibling(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8170 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@xmlXPathNe
$LN3@xmlXPathNe:
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 8171 :     if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+4], 2
	je	SHORT $LN5@xmlXPathNe
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN4@xmlXPathNe
$LN5@xmlXPathNe:

; 8172 : 	(ctxt->context->node->type == XML_NAMESPACE_DECL))
; 8173 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 8174 :     if (cur == (xmlNodePtr) ctxt->context->doc)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN6@xmlXPathNe

; 8175 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 8176 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN7@xmlXPathNe

; 8177 :         return(ctxt->context->node->next);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+24]
	jmp	SHORT $LN1@xmlXPathNe
$LN7@xmlXPathNe:

; 8178 :     return(cur->next);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx+24]
$LN1@xmlXPathNe:

; 8179 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNextFollowingSibling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextAncestorOrSelf
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextAncestorOrSelf PROC			; COMDAT

; 8150 : xmlXPathNextAncestorOrSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8151 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@xmlXPathNe
$LN3@xmlXPathNe:
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 8152 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN4@xmlXPathNe

; 8153 :         return(ctxt->context->node);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 8154 :     return(xmlXPathNextAncestor(ctxt, cur));

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNextAncestor
	add	esp, 8
$LN1@xmlXPathNe:

; 8155 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNextAncestorOrSelf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextParent
_TEXT	SEGMENT
tv74 = -12						; size = 4
_ns$1 = -8						; size = 4
_att$2 = -4						; size = 4
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextParent PROC				; COMDAT

; 7953 : xmlXPathNextParent(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7954 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@xmlXPathNe
$LN5@xmlXPathNe:
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 7955 :     /*
; 7956 :      * the parent of an attribute or namespace node is the element
; 7957 :      * to which the attribute or namespace node is attached
; 7958 :      * Namespace handling !!!
; 7959 :      */
; 7960 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	$LN6@xmlXPathNe

; 7961 : 	if (ctxt->context->node == NULL) return(NULL);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN7@xmlXPathNe
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN7@xmlXPathNe:

; 7962 : 	switch (ctxt->context->node->type) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 20			; 00000014H
	ja	$LN6@xmlXPathNe
	mov	edx, DWORD PTR tv74[ebp]
	movzx	eax, BYTE PTR $LN17@xmlXPathNe[edx]
	jmp	DWORD PTR $LN18@xmlXPathNe[eax*4]
$LN8@xmlXPathNe:

; 7963 :             case XML_ELEMENT_NODE:
; 7964 :             case XML_TEXT_NODE:
; 7965 :             case XML_CDATA_SECTION_NODE:
; 7966 :             case XML_ENTITY_REF_NODE:
; 7967 :             case XML_ENTITY_NODE:
; 7968 :             case XML_PI_NODE:
; 7969 :             case XML_COMMENT_NODE:
; 7970 :             case XML_NOTATION_NODE:
; 7971 :             case XML_DTD_NODE:
; 7972 : 	    case XML_ELEMENT_DECL:
; 7973 : 	    case XML_ATTRIBUTE_DECL:
; 7974 : 	    case XML_XINCLUDE_START:
; 7975 : 	    case XML_XINCLUDE_END:
; 7976 : 	    case XML_ENTITY_DECL:
; 7977 : 		if (ctxt->context->node->parent == NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN9@xmlXPathNe

; 7978 : 		    return((xmlNodePtr) ctxt->context->doc);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	jmp	$LN1@xmlXPathNe
$LN9@xmlXPathNe:

; 7979 : 		if ((ctxt->context->node->parent->type == XML_ELEMENT_NODE) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN10@xmlXPathNe
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR [ecx+8]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN11@xmlXPathNe
	push	OFFSET ??_C@_0BC@MHFGEIED@fake?5node?5libxslt@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@xmlXPathNe
$LN11@xmlXPathNe:

; 7980 : 		    ((ctxt->context->node->parent->name[0] == ' ') ||
; 7981 : 		     (xmlStrEqual(ctxt->context->node->parent->name,
; 7982 : 				 BAD_CAST "fake node libxslt"))))
; 7983 : 		    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN10@xmlXPathNe:

; 7984 : 		return(ctxt->context->node->parent);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+20]
	jmp	SHORT $LN1@xmlXPathNe
$LN12@xmlXPathNe:

; 7985 :             case XML_ATTRIBUTE_NODE: {
; 7986 : 		xmlAttrPtr att = (xmlAttrPtr) ctxt->context->node;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _att$2[ebp], ecx

; 7987 : 
; 7988 : 		return(att->parent);

	mov	edx, DWORD PTR _att$2[ebp]
	mov	eax, DWORD PTR [edx+20]
	jmp	SHORT $LN1@xmlXPathNe
$LN13@xmlXPathNe:

; 7989 : 	    }
; 7990 :             case XML_DOCUMENT_NODE:
; 7991 :             case XML_DOCUMENT_TYPE_NODE:
; 7992 :             case XML_DOCUMENT_FRAG_NODE:
; 7993 :             case XML_HTML_DOCUMENT_NODE:
; 7994 : #ifdef LIBXML_DOCB_ENABLED
; 7995 : 	    case XML_DOCB_DOCUMENT_NODE:
; 7996 : #endif
; 7997 :                 return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN14@xmlXPathNe:

; 7998 : 	    case XML_NAMESPACE_DECL: {
; 7999 : 		xmlNsPtr ns = (xmlNsPtr) ctxt->context->node;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _ns$1[ebp], edx

; 8000 : 
; 8001 : 		if ((ns->next != NULL) &&

	mov	eax, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN15@xmlXPathNe
	mov	ecx, DWORD PTR _ns$1[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	je	SHORT $LN15@xmlXPathNe

; 8002 : 		    (ns->next->type != XML_NAMESPACE_DECL))
; 8003 : 		    return((xmlNodePtr) ns->next);

	mov	eax, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN1@xmlXPathNe
$LN15@xmlXPathNe:

; 8004 :                 return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 8005 : 	    }
; 8006 : 	}
; 8007 :     }
; 8008 :     return(NULL);

	xor	eax, eax
$LN1@xmlXPathNe:

; 8009 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@xmlXPathNe:
	DD	$LN8@xmlXPathNe
	DD	$LN12@xmlXPathNe
	DD	$LN13@xmlXPathNe
	DD	$LN14@xmlXPathNe
$LN17@xmlXPathNe:
	DB	0
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	0
	DB	0
	DB	0
	DB	0
	DB	3
	DB	0
	DB	0
	DB	2
_xmlXPathNextParent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextDescendantOrSelf
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextDescendantOrSelf PROC			; COMDAT

; 7928 : xmlXPathNextDescendantOrSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7929 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@xmlXPathNe
$LN3@xmlXPathNe:
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 7930 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN4@xmlXPathNe

; 7931 :         return(ctxt->context->node);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 7932 : 
; 7933 :     if (ctxt->context->node == NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN5@xmlXPathNe

; 7934 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN5@xmlXPathNe:

; 7935 :     if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+4], 2
	je	SHORT $LN7@xmlXPathNe
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN6@xmlXPathNe
$LN7@xmlXPathNe:

; 7936 :         (ctxt->context->node->type == XML_NAMESPACE_DECL))
; 7937 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 7938 : 
; 7939 :     return(xmlXPathNextDescendant(ctxt, cur));

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathNextDescendant
	add	esp, 8
$LN1@xmlXPathNe:

; 7940 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNextDescendantOrSelf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextDescendant
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextDescendant PROC				; COMDAT

; 7863 : xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7864 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN8@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN7@xmlXPathNe
$LN8@xmlXPathNe:
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN7@xmlXPathNe:

; 7865 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN9@xmlXPathNe

; 7866 : 	if (ctxt->context->node == NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN10@xmlXPathNe

; 7867 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN10@xmlXPathNe:

; 7868 : 	if ((ctxt->context->node->type == XML_ATTRIBUTE_NODE) ||

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+4], 2
	je	SHORT $LN12@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN11@xmlXPathNe
$LN12@xmlXPathNe:

; 7869 : 	    (ctxt->context->node->type == XML_NAMESPACE_DECL))
; 7870 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN11@xmlXPathNe:

; 7871 : 
; 7872 :         if (ctxt->context->node == (xmlNodePtr) ctxt->context->doc)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx+4]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN13@xmlXPathNe

; 7873 : 	    return(ctxt->context->doc->children);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [ecx+12]
	jmp	$LN1@xmlXPathNe
$LN13@xmlXPathNe:

; 7874 :         return(ctxt->context->node->children);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+4]
	mov	eax, DWORD PTR [ecx+12]
	jmp	$LN1@xmlXPathNe
$LN9@xmlXPathNe:

; 7875 :     }
; 7876 : 
; 7877 :     if (cur->type == XML_NAMESPACE_DECL)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN14@xmlXPathNe

; 7878 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN14@xmlXPathNe:

; 7879 :     if (cur->children != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN15@xmlXPathNe

; 7880 : 	/*
; 7881 : 	 * Do not descend on entities declarations
; 7882 : 	 */
; 7883 : 	if (cur->children->type != XML_ENTITY_DECL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 17			; 00000011H
	je	SHORT $LN15@xmlXPathNe

; 7884 : 	    cur = cur->children;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 7885 : 	    /*
; 7886 : 	     * Skip DTDs
; 7887 : 	     */
; 7888 : 	    if (cur->type != XML_DTD_NODE)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 14			; 0000000eH
	je	SHORT $LN15@xmlXPathNe

; 7889 : 		return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	$LN1@xmlXPathNe
$LN15@xmlXPathNe:

; 7890 : 	}
; 7891 :     }
; 7892 : 
; 7893 :     if (cur == ctxt->context->node) return(NULL);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN2@xmlXPathNe
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 7894 : 
; 7895 :     while (cur->next != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN6@xmlXPathNe

; 7896 : 	cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx

; 7897 : 	if ((cur->type != XML_ENTITY_DECL) &&

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 17			; 00000011H
	je	SHORT $LN19@xmlXPathNe
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 14			; 0000000eH
	je	SHORT $LN19@xmlXPathNe

; 7898 : 	    (cur->type != XML_DTD_NODE))
; 7899 : 	    return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN1@xmlXPathNe
$LN19@xmlXPathNe:

; 7900 :     }

	jmp	SHORT $LN2@xmlXPathNe
$LN6@xmlXPathNe:

; 7901 : 
; 7902 :     do {
; 7903 :         cur = cur->parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax

; 7904 : 	if (cur == NULL) break;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN20@xmlXPathNe
	jmp	SHORT $LN5@xmlXPathNe
$LN20@xmlXPathNe:

; 7905 : 	if (cur == ctxt->context->node) return(NULL);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN21@xmlXPathNe
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN21@xmlXPathNe:

; 7906 : 	if (cur->next != NULL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN4@xmlXPathNe

; 7907 : 	    cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax

; 7908 : 	    return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 7909 : 	}
; 7910 :     } while (cur != NULL);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN6@xmlXPathNe
$LN5@xmlXPathNe:

; 7911 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlXPathNe:

; 7912 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNextDescendant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextChild
_TEXT	SEGMENT
tv74 = -4						; size = 4
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextChild PROC					; COMDAT

; 7658 : xmlXPathNextChild(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7659 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@xmlXPathNe
$LN5@xmlXPathNe:
	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 7660 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN6@xmlXPathNe

; 7661 : 	if (ctxt->context->node == NULL) return(NULL);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN7@xmlXPathNe
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN7@xmlXPathNe:

; 7662 : 	switch (ctxt->context->node->type) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv74[ebp], eax
	mov	ecx, DWORD PTR tv74[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv74[ebp], ecx
	cmp	DWORD PTR tv74[ebp], 20			; 00000014H
	ja	SHORT $LN2@xmlXPathNe
	mov	edx, DWORD PTR tv74[ebp]
	movzx	eax, BYTE PTR $LN14@xmlXPathNe[edx]
	jmp	DWORD PTR $LN15@xmlXPathNe[eax*4]
$LN8@xmlXPathNe:

; 7663 :             case XML_ELEMENT_NODE:
; 7664 :             case XML_TEXT_NODE:
; 7665 :             case XML_CDATA_SECTION_NODE:
; 7666 :             case XML_ENTITY_REF_NODE:
; 7667 :             case XML_ENTITY_NODE:
; 7668 :             case XML_PI_NODE:
; 7669 :             case XML_COMMENT_NODE:
; 7670 :             case XML_NOTATION_NODE:
; 7671 :             case XML_DTD_NODE:
; 7672 : 		return(ctxt->context->node->children);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN1@xmlXPathNe
$LN9@xmlXPathNe:

; 7673 :             case XML_DOCUMENT_NODE:
; 7674 :             case XML_DOCUMENT_TYPE_NODE:
; 7675 :             case XML_DOCUMENT_FRAG_NODE:
; 7676 :             case XML_HTML_DOCUMENT_NODE:
; 7677 : #ifdef LIBXML_DOCB_ENABLED
; 7678 : 	    case XML_DOCB_DOCUMENT_NODE:
; 7679 : #endif
; 7680 : 		return(((xmlDocPtr) ctxt->context->node)->children);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	mov	eax, DWORD PTR [eax+12]
	jmp	SHORT $LN1@xmlXPathNe
$LN10@xmlXPathNe:

; 7681 : 	    case XML_ELEMENT_DECL:
; 7682 : 	    case XML_ATTRIBUTE_DECL:
; 7683 : 	    case XML_ENTITY_DECL:
; 7684 :             case XML_ATTRIBUTE_NODE:
; 7685 : 	    case XML_NAMESPACE_DECL:
; 7686 : 	    case XML_XINCLUDE_START:
; 7687 : 	    case XML_XINCLUDE_END:
; 7688 : 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 7689 : 	}
; 7690 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN6@xmlXPathNe:

; 7691 :     }
; 7692 :     if ((cur->type == XML_DOCUMENT_NODE) ||

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 9
	je	SHORT $LN12@xmlXPathNe
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 13			; 0000000dH
	jne	SHORT $LN11@xmlXPathNe
$LN12@xmlXPathNe:

; 7693 :         (cur->type == XML_HTML_DOCUMENT_NODE))
; 7694 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN11@xmlXPathNe:

; 7695 :     return(cur->next);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [eax+24]
$LN1@xmlXPathNe:

; 7696 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN15@xmlXPathNe:
	DD	$LN8@xmlXPathNe
	DD	$LN10@xmlXPathNe
	DD	$LN9@xmlXPathNe
$LN14@xmlXPathNe:
	DB	0
	DB	1
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	2
	DB	2
	DB	2
	DB	0
	DB	2
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	2
_xmlXPathNextChild ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNextSelf
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlXPathNextSelf PROC					; COMDAT

; 7640 : xmlXPathNextSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7641 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathNe
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@xmlXPathNe
$LN3@xmlXPathNe:
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 7642 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN4@xmlXPathNe

; 7643 :         return(ctxt->context->node);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN1@xmlXPathNe
$LN4@xmlXPathNe:

; 7644 :     return(NULL);

	xor	eax, eax
$LN1@xmlXPathNe:

; 7645 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNextSelf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathIsNodeType
_TEXT	SEGMENT
_name$ = 8						; size = 4
_xmlXPathIsNodeType PROC				; COMDAT

; 10374: xmlXPathIsNodeType(const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10375:     if (name == NULL)

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@xmlXPathIs

; 10376: 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathIs
$LN2@xmlXPathIs:

; 10377: 
; 10378:     if (xmlStrEqual(name, BAD_CAST "node"))

	push	OFFSET ??_C@_04CLMONKIF@node@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@xmlXPathIs

; 10379: 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathIs
$LN3@xmlXPathIs:

; 10380:     if (xmlStrEqual(name, BAD_CAST "text"))

	push	OFFSET ??_C@_04CIMGMMMG@text@
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@xmlXPathIs

; 10381: 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathIs
$LN4@xmlXPathIs:

; 10382:     if (xmlStrEqual(name, BAD_CAST "comment"))

	push	OFFSET ??_C@_07GJGNEJFD@comment@
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@xmlXPathIs

; 10383: 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathIs
$LN5@xmlXPathIs:

; 10384:     if (xmlStrEqual(name, BAD_CAST "processing-instruction"))

	push	OFFSET ??_C@_0BH@NNLCFMHO@processing?9instruction@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@xmlXPathIs

; 10385: 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathIs
$LN6@xmlXPathIs:

; 10386:     return(0);

	xor	eax, eax
$LN1@xmlXPathIs:

; 10387: }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathIsNodeType ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathModValues
_TEXT	SEGMENT
_arg2$ = -20						; size = 8
_arg1$ = -12						; size = 8
_arg$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathModValues PROC					; COMDAT

; 7578 : xmlXPathModValues(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7579 :     xmlXPathObjectPtr arg;
; 7580 :     double arg1, arg2;
; 7581 : 
; 7582 :     arg = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg$[ebp], eax

; 7583 :     if (arg == NULL)

	cmp	DWORD PTR _arg$[ebp], 0
	jne	SHORT $LN2@xmlXPathMo

; 7584 : 	XP_ERROR(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN7@xmlXPathMo
$LN2@xmlXPathMo:

; 7585 :     arg2 = xmlXPathCastToNumber(arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	call	_xmlXPathCastToNumber
	add	esp, 4
	fstp	QWORD PTR _arg2$[ebp]

; 7586 :     xmlXPathReleaseObject(ctxt->context, arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7587 :     CAST_TO_NUMBER;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@xmlXPathMo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN3@xmlXPathMo
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN3@xmlXPathMo:

; 7588 :     CHECK_TYPE(XPATH_NUMBER);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@xmlXPathMo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN4@xmlXPathMo
$LN5@xmlXPathMo:
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN7@xmlXPathMo
$LN4@xmlXPathMo:

; 7589 :     arg1 = ctxt->value->floatval;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR _arg1$[ebp], xmm0

; 7590 :     if (arg2 == 0)

	movsd	xmm0, QWORD PTR _arg2$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN6@xmlXPathMo

; 7591 : 	ctxt->value->floatval = NAN;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movsd	xmm0, QWORD PTR __real@fff8000000000000
	movsd	QWORD PTR [edx+16], xmm0
	jmp	SHORT $LN7@xmlXPathMo
$LN6@xmlXPathMo:

; 7592 :     else {
; 7593 : 	ctxt->value->floatval = fmod(arg1, arg2);

	fld	QWORD PTR _arg1$[ebp]
	fld	QWORD PTR _arg2$[ebp]
	call	__CIfmod
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	fstp	QWORD PTR [ecx+16]
$LN7@xmlXPathMo:

; 7594 :     }
; 7595 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathModValues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDivValues
_TEXT	SEGMENT
_val$ = -12						; size = 8
_arg$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathDivValues PROC					; COMDAT

; 7555 : xmlXPathDivValues(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7556 :     xmlXPathObjectPtr arg;
; 7557 :     double val;
; 7558 : 
; 7559 :     arg = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg$[ebp], eax

; 7560 :     if (arg == NULL)

	cmp	DWORD PTR _arg$[ebp], 0
	jne	SHORT $LN2@xmlXPathDi

; 7561 : 	XP_ERROR(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathDi
$LN2@xmlXPathDi:

; 7562 :     val = xmlXPathCastToNumber(arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	call	_xmlXPathCastToNumber
	add	esp, 4
	fstp	QWORD PTR _val$[ebp]

; 7563 :     xmlXPathReleaseObject(ctxt->context, arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7564 :     CAST_TO_NUMBER;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@xmlXPathDi
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN3@xmlXPathDi
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN3@xmlXPathDi:

; 7565 :     CHECK_TYPE(XPATH_NUMBER);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@xmlXPathDi
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN4@xmlXPathDi
$LN5@xmlXPathDi:
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathDi
$LN4@xmlXPathDi:

; 7566 :     ctxt->value->floatval /= val;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movsd	xmm0, QWORD PTR [eax+16]
	divsd	xmm0, QWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movsd	QWORD PTR [edx+16], xmm0
$LN1@xmlXPathDi:

; 7567 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathDivValues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathMultValues
_TEXT	SEGMENT
_val$ = -12						; size = 8
_arg$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathMultValues PROC				; COMDAT

; 7532 : xmlXPathMultValues(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7533 :     xmlXPathObjectPtr arg;
; 7534 :     double val;
; 7535 : 
; 7536 :     arg = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg$[ebp], eax

; 7537 :     if (arg == NULL)

	cmp	DWORD PTR _arg$[ebp], 0
	jne	SHORT $LN2@xmlXPathMu

; 7538 : 	XP_ERROR(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathMu
$LN2@xmlXPathMu:

; 7539 :     val = xmlXPathCastToNumber(arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	call	_xmlXPathCastToNumber
	add	esp, 4
	fstp	QWORD PTR _val$[ebp]

; 7540 :     xmlXPathReleaseObject(ctxt->context, arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7541 :     CAST_TO_NUMBER;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@xmlXPathMu
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN3@xmlXPathMu
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN3@xmlXPathMu:

; 7542 :     CHECK_TYPE(XPATH_NUMBER);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@xmlXPathMu
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN4@xmlXPathMu
$LN5@xmlXPathMu:
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathMu
$LN4@xmlXPathMu:

; 7543 :     ctxt->value->floatval *= val;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movsd	xmm0, QWORD PTR [eax+16]
	mulsd	xmm0, QWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movsd	QWORD PTR [edx+16], xmm0
$LN1@xmlXPathMu:

; 7544 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathMultValues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathSubValues
_TEXT	SEGMENT
_val$ = -12						; size = 8
_arg$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathSubValues PROC					; COMDAT

; 7509 : xmlXPathSubValues(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7510 :     xmlXPathObjectPtr arg;
; 7511 :     double val;
; 7512 : 
; 7513 :     arg = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg$[ebp], eax

; 7514 :     if (arg == NULL)

	cmp	DWORD PTR _arg$[ebp], 0
	jne	SHORT $LN2@xmlXPathSu

; 7515 : 	XP_ERROR(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathSu
$LN2@xmlXPathSu:

; 7516 :     val = xmlXPathCastToNumber(arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	call	_xmlXPathCastToNumber
	add	esp, 4
	fstp	QWORD PTR _val$[ebp]

; 7517 :     xmlXPathReleaseObject(ctxt->context, arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7518 :     CAST_TO_NUMBER;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@xmlXPathSu
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN3@xmlXPathSu
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN3@xmlXPathSu:

; 7519 :     CHECK_TYPE(XPATH_NUMBER);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@xmlXPathSu
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN4@xmlXPathSu
$LN5@xmlXPathSu:
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathSu
$LN4@xmlXPathSu:

; 7520 :     ctxt->value->floatval -= val;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movsd	xmm0, QWORD PTR [eax+16]
	subsd	xmm0, QWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movsd	QWORD PTR [edx+16], xmm0
$LN1@xmlXPathSu:

; 7521 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathSubValues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathAddValues
_TEXT	SEGMENT
_val$ = -12						; size = 8
_arg$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathAddValues PROC					; COMDAT

; 7486 : xmlXPathAddValues(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7487 :     xmlXPathObjectPtr arg;
; 7488 :     double val;
; 7489 : 
; 7490 :     arg = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg$[ebp], eax

; 7491 :     if (arg == NULL)

	cmp	DWORD PTR _arg$[ebp], 0
	jne	SHORT $LN2@xmlXPathAd

; 7492 : 	XP_ERROR(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	$LN1@xmlXPathAd
$LN2@xmlXPathAd:

; 7493 :     val = xmlXPathCastToNumber(arg);

	mov	edx, DWORD PTR _arg$[ebp]
	push	edx
	call	_xmlXPathCastToNumber
	add	esp, 4
	fstp	QWORD PTR _val$[ebp]

; 7494 :     xmlXPathReleaseObject(ctxt->context, arg);

	mov	eax, DWORD PTR _arg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7495 :     CAST_TO_NUMBER;

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@xmlXPathAd
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN3@xmlXPathAd
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN3@xmlXPathAd:

; 7496 :     CHECK_TYPE(XPATH_NUMBER);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN5@xmlXPathAd
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN4@xmlXPathAd
$LN5@xmlXPathAd:
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathAd
$LN4@xmlXPathAd:

; 7497 :     ctxt->value->floatval += val;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movsd	xmm0, QWORD PTR [eax+16]
	addsd	xmm0, QWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	movsd	QWORD PTR [edx+16], xmm0
$LN1@xmlXPathAd:

; 7498 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathAddValues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathValueFlipSign
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_xmlXPathValueFlipSign PROC				; COMDAT

; 7470 : xmlXPathValueFlipSign(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7471 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathVa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@xmlXPathVa
$LN3@xmlXPathVa:
	jmp	SHORT $LN1@xmlXPathVa
$LN2@xmlXPathVa:

; 7472 :     CAST_TO_NUMBER;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN4@xmlXPathVa
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN4@xmlXPathVa
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNumberFunction
	add	esp, 8
$LN4@xmlXPathVa:

; 7473 :     CHECK_TYPE(XPATH_NUMBER);

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN6@xmlXPathVa
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN5@xmlXPathVa
$LN6@xmlXPathVa:
	push	11					; 0000000bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathVa
$LN5@xmlXPathVa:

; 7474 :     ctxt->value->floatval = -ctxt->value->floatval;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	movsd	xmm0, QWORD PTR [ecx+16]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	movsd	QWORD PTR [eax+16], xmm0
$LN1@xmlXPathVa:

; 7475 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathValueFlipSign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompareValues
_TEXT	SEGMENT
tv242 = -40						; size = 4
tv232 = -36						; size = 4
tv220 = -32						; size = 4
tv210 = -28						; size = 4
tv150 = -24						; size = 4
_arg2$ = -20						; size = 4
_arg1$ = -16						; size = 4
_arg2i$ = -12						; size = 4
_arg1i$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_inf$ = 12						; size = 4
_strict$ = 16						; size = 4
_xmlXPathCompareValues PROC				; COMDAT

; 7350 : xmlXPathCompareValues(xmlXPathParserContextPtr ctxt, int inf, int strict) {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7351 :     int ret = 0, arg1i = 0, arg2i = 0;

	mov	DWORD PTR _ret$[ebp], 0
	mov	DWORD PTR _arg1i$[ebp], 0
	mov	DWORD PTR _arg2i$[ebp], 0

; 7352 :     xmlXPathObjectPtr arg1, arg2;
; 7353 : 
; 7354 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathCo
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@xmlXPathCo
$LN3@xmlXPathCo:
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 7355 :     arg2 = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax

; 7356 :     arg1 = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg1$[ebp], eax

; 7357 :     if ((arg1 == NULL) || (arg2 == NULL)) {

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN5@xmlXPathCo
	cmp	DWORD PTR _arg2$[ebp], 0
	jne	SHORT $LN4@xmlXPathCo
$LN5@xmlXPathCo:

; 7358 : 	if (arg1 != NULL)

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN6@xmlXPathCo

; 7359 : 	    xmlXPathReleaseObject(ctxt->context, arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
	jmp	SHORT $LN7@xmlXPathCo
$LN6@xmlXPathCo:

; 7360 : 	else
; 7361 : 	    xmlXPathReleaseObject(ctxt->context, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN7@xmlXPathCo:

; 7362 : 	XP_ERROR0(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:

; 7363 :     }
; 7364 : 
; 7365 :     if ((arg2->type == XPATH_NODESET) || (arg2->type == XPATH_XSLT_TREE) ||
; 7366 :       (arg1->type == XPATH_NODESET) || (arg1->type == XPATH_XSLT_TREE)) {

	mov	ecx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN9@xmlXPathCo
	mov	edx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [edx], 9
	je	SHORT $LN9@xmlXPathCo
	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN9@xmlXPathCo
	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 9
	jne	$LN8@xmlXPathCo
$LN9@xmlXPathCo:

; 7367 : 	/*
; 7368 : 	 * If either argument is a XPATH_NODESET or XPATH_XSLT_TREE the two arguments
; 7369 : 	 * are not freed from within this routine; they will be freed from the
; 7370 : 	 * called routine, e.g. xmlXPathCompareNodeSets or xmlXPathCompareNodeSetValue
; 7371 : 	 */
; 7372 : 	if (((arg2->type == XPATH_NODESET) || (arg2->type == XPATH_XSLT_TREE)) &&

	mov	edx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN12@xmlXPathCo
	mov	eax, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [eax], 9
	jne	SHORT $LN10@xmlXPathCo
$LN12@xmlXPathCo:
	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN13@xmlXPathCo
	mov	edx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [edx], 9
	jne	SHORT $LN10@xmlXPathCo
$LN13@xmlXPathCo:

; 7373 : 	  ((arg1->type == XPATH_NODESET) || (arg1->type == XPATH_XSLT_TREE))){
; 7374 : 	    ret = xmlXPathCompareNodeSets(inf, strict, arg1, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strict$[ebp]
	push	edx
	mov	eax, DWORD PTR _inf$[ebp]
	push	eax
	call	_xmlXPathCompareNodeSets
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 7375 : 	} else {

	jmp	SHORT $LN15@xmlXPathCo
$LN10@xmlXPathCo:

; 7376 : 	    if ((arg1->type == XPATH_NODESET) || (arg1->type == XPATH_XSLT_TREE)) {

	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN16@xmlXPathCo
	mov	edx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [edx], 9
	jne	SHORT $LN14@xmlXPathCo
$LN16@xmlXPathCo:

; 7377 : 		ret = xmlXPathCompareNodeSetValue(ctxt, inf, strict,

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strict$[ebp]
	push	edx
	mov	eax, DWORD PTR _inf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathCompareNodeSetValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 7378 : 			                          arg1, arg2);
; 7379 : 	    } else {

	jmp	SHORT $LN15@xmlXPathCo
$LN14@xmlXPathCo:

; 7380 : 		ret = xmlXPathCompareNodeSetValue(ctxt, !inf, strict,

	cmp	DWORD PTR _inf$[ebp], 0
	jne	SHORT $LN54@xmlXPathCo
	mov	DWORD PTR tv150[ebp], 1
	jmp	SHORT $LN55@xmlXPathCo
$LN54@xmlXPathCo:
	mov	DWORD PTR tv150[ebp], 0
$LN55@xmlXPathCo:
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strict$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv150[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompareNodeSetValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax
$LN15@xmlXPathCo:

; 7381 : 			                          arg2, arg1);
; 7382 : 	    }
; 7383 : 	}
; 7384 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathCo
$LN8@xmlXPathCo:

; 7385 :     }
; 7386 : 
; 7387 :     if (arg1->type != XPATH_NUMBER) {

	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN17@xmlXPathCo

; 7388 : 	valuePush(ctxt, arg1);

	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 7389 : 	xmlXPathNumberFunction(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNumberFunction
	add	esp, 8

; 7390 : 	arg1 = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg1$[ebp], eax
$LN17@xmlXPathCo:

; 7391 :     }
; 7392 :     if (arg1->type != XPATH_NUMBER) {

	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN18@xmlXPathCo

; 7393 : 	xmlXPathFreeObject(arg1);

	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	call	_xmlXPathFreeObject
	add	esp, 4

; 7394 : 	xmlXPathFreeObject(arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 7395 : 	XP_ERROR0(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN18@xmlXPathCo:

; 7396 :     }
; 7397 :     if (arg2->type != XPATH_NUMBER) {

	mov	ecx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN19@xmlXPathCo

; 7398 : 	valuePush(ctxt, arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8

; 7399 : 	xmlXPathNumberFunction(ctxt, 1);

	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathNumberFunction
	add	esp, 8

; 7400 : 	arg2 = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax
$LN19@xmlXPathCo:

; 7401 :     }
; 7402 :     if (arg2->type != XPATH_NUMBER) {

	mov	eax, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN20@xmlXPathCo

; 7403 : 	xmlXPathReleaseObject(ctxt->context, arg1);

	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7404 : 	xmlXPathReleaseObject(ctxt->context, arg2);

	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7405 : 	XP_ERROR0(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathCo
$LN20@xmlXPathCo:

; 7406 :     }
; 7407 :     /*
; 7408 :      * Add tests for infinity and nan
; 7409 :      * => feedback on 3.4 for Inf and NaN
; 7410 :      */
; 7411 :     /* Hand check NaN and Infinity comparisons */
; 7412 :     if (xmlXPathIsNaN(arg1->floatval) || xmlXPathIsNaN(arg2->floatval)) {

	mov	edx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@xmlXPathCo
	mov	eax, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@xmlXPathCo
$LN23@xmlXPathCo:

; 7413 : 	ret=0;

	mov	DWORD PTR _ret$[ebp], 0

; 7414 :     } else {

	jmp	$LN52@xmlXPathCo
$LN21@xmlXPathCo:

; 7415 : 	arg1i=xmlXPathIsInf(arg1->floatval);

	mov	ecx, DWORD PTR _arg1$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	mov	DWORD PTR _arg1i$[ebp], eax

; 7416 : 	arg2i=xmlXPathIsInf(arg2->floatval);

	mov	edx, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	mov	DWORD PTR _arg2i$[ebp], eax

; 7417 : 	if (inf && strict) {

	cmp	DWORD PTR _inf$[ebp], 0
	je	SHORT $LN24@xmlXPathCo
	cmp	DWORD PTR _strict$[ebp], 0
	je	SHORT $LN24@xmlXPathCo

; 7418 : 	    if ((arg1i == -1 && arg2i != -1) ||

	cmp	DWORD PTR _arg1i$[ebp], -1
	jne	SHORT $LN29@xmlXPathCo
	cmp	DWORD PTR _arg2i$[ebp], -1
	jne	SHORT $LN28@xmlXPathCo
$LN29@xmlXPathCo:
	cmp	DWORD PTR _arg2i$[ebp], 1
	jne	SHORT $LN26@xmlXPathCo
	cmp	DWORD PTR _arg1i$[ebp], 1
	je	SHORT $LN26@xmlXPathCo
$LN28@xmlXPathCo:

; 7419 : 		(arg2i == 1 && arg1i != 1)) {
; 7420 : 		ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN31@xmlXPathCo
$LN26@xmlXPathCo:

; 7421 : 	    } else if (arg1i == 0 && arg2i == 0) {

	cmp	DWORD PTR _arg1i$[ebp], 0
	jne	SHORT $LN30@xmlXPathCo
	cmp	DWORD PTR _arg2i$[ebp], 0
	jne	SHORT $LN30@xmlXPathCo

; 7422 : 		ret = (arg1->floatval < arg2->floatval);

	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR _arg1$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR [ecx+16]
	jbe	SHORT $LN56@xmlXPathCo
	mov	DWORD PTR tv210[ebp], 1
	jmp	SHORT $LN57@xmlXPathCo
$LN56@xmlXPathCo:
	mov	DWORD PTR tv210[ebp], 0
$LN57@xmlXPathCo:
	mov	edx, DWORD PTR tv210[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 7423 : 	    } else {

	jmp	SHORT $LN31@xmlXPathCo
$LN30@xmlXPathCo:

; 7424 : 		ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN31@xmlXPathCo:

; 7425 : 	    }
; 7426 : 	}

	jmp	$LN52@xmlXPathCo
$LN24@xmlXPathCo:

; 7427 : 	else if (inf && !strict) {

	cmp	DWORD PTR _inf$[ebp], 0
	je	SHORT $LN32@xmlXPathCo
	cmp	DWORD PTR _strict$[ebp], 0
	jne	SHORT $LN32@xmlXPathCo

; 7428 : 	    if (arg1i == -1 || arg2i == 1) {

	cmp	DWORD PTR _arg1i$[ebp], -1
	je	SHORT $LN36@xmlXPathCo
	cmp	DWORD PTR _arg2i$[ebp], 1
	jne	SHORT $LN34@xmlXPathCo
$LN36@xmlXPathCo:

; 7429 : 		ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN38@xmlXPathCo
$LN34@xmlXPathCo:

; 7430 : 	    } else if (arg1i == 0 && arg2i == 0) {

	cmp	DWORD PTR _arg1i$[ebp], 0
	jne	SHORT $LN37@xmlXPathCo
	cmp	DWORD PTR _arg2i$[ebp], 0
	jne	SHORT $LN37@xmlXPathCo

; 7431 : 		ret = (arg1->floatval <= arg2->floatval);

	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR _arg1$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR [ecx+16]
	jb	SHORT $LN58@xmlXPathCo
	mov	DWORD PTR tv220[ebp], 1
	jmp	SHORT $LN59@xmlXPathCo
$LN58@xmlXPathCo:
	mov	DWORD PTR tv220[ebp], 0
$LN59@xmlXPathCo:
	mov	edx, DWORD PTR tv220[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 7432 : 	    } else {

	jmp	SHORT $LN38@xmlXPathCo
$LN37@xmlXPathCo:

; 7433 : 		ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN38@xmlXPathCo:

; 7434 : 	    }
; 7435 : 	}

	jmp	$LN52@xmlXPathCo
$LN32@xmlXPathCo:

; 7436 : 	else if (!inf && strict) {

	cmp	DWORD PTR _inf$[ebp], 0
	jne	SHORT $LN39@xmlXPathCo
	cmp	DWORD PTR _strict$[ebp], 0
	je	SHORT $LN39@xmlXPathCo

; 7437 : 	    if ((arg1i == 1 && arg2i != 1) ||

	cmp	DWORD PTR _arg1i$[ebp], 1
	jne	SHORT $LN44@xmlXPathCo
	cmp	DWORD PTR _arg2i$[ebp], 1
	jne	SHORT $LN43@xmlXPathCo
$LN44@xmlXPathCo:
	cmp	DWORD PTR _arg2i$[ebp], -1
	jne	SHORT $LN41@xmlXPathCo
	cmp	DWORD PTR _arg1i$[ebp], -1
	je	SHORT $LN41@xmlXPathCo
$LN43@xmlXPathCo:

; 7438 : 		(arg2i == -1 && arg1i != -1)) {
; 7439 : 		ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN46@xmlXPathCo
$LN41@xmlXPathCo:

; 7440 : 	    } else if (arg1i == 0 && arg2i == 0) {

	cmp	DWORD PTR _arg1i$[ebp], 0
	jne	SHORT $LN45@xmlXPathCo
	cmp	DWORD PTR _arg2i$[ebp], 0
	jne	SHORT $LN45@xmlXPathCo

; 7441 : 		ret = (arg1->floatval > arg2->floatval);

	mov	eax, DWORD PTR _arg1$[ebp]
	mov	ecx, DWORD PTR _arg2$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR [ecx+16]
	jbe	SHORT $LN60@xmlXPathCo
	mov	DWORD PTR tv232[ebp], 1
	jmp	SHORT $LN61@xmlXPathCo
$LN60@xmlXPathCo:
	mov	DWORD PTR tv232[ebp], 0
$LN61@xmlXPathCo:
	mov	edx, DWORD PTR tv232[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 7442 : 	    } else {

	jmp	SHORT $LN46@xmlXPathCo
$LN45@xmlXPathCo:

; 7443 : 		ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN46@xmlXPathCo:

; 7444 : 	    }
; 7445 : 	}

	jmp	SHORT $LN52@xmlXPathCo
$LN39@xmlXPathCo:

; 7446 : 	else if (!inf && !strict) {

	cmp	DWORD PTR _inf$[ebp], 0
	jne	SHORT $LN52@xmlXPathCo
	cmp	DWORD PTR _strict$[ebp], 0
	jne	SHORT $LN52@xmlXPathCo

; 7447 : 	    if (arg1i == 1 || arg2i == -1) {

	cmp	DWORD PTR _arg1i$[ebp], 1
	je	SHORT $LN50@xmlXPathCo
	cmp	DWORD PTR _arg2i$[ebp], -1
	jne	SHORT $LN48@xmlXPathCo
$LN50@xmlXPathCo:

; 7448 : 		ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
	jmp	SHORT $LN52@xmlXPathCo
$LN48@xmlXPathCo:

; 7449 : 	    } else if (arg1i == 0 && arg2i == 0) {

	cmp	DWORD PTR _arg1i$[ebp], 0
	jne	SHORT $LN51@xmlXPathCo
	cmp	DWORD PTR _arg2i$[ebp], 0
	jne	SHORT $LN51@xmlXPathCo

; 7450 : 		ret = (arg1->floatval >= arg2->floatval);

	mov	eax, DWORD PTR _arg1$[ebp]
	mov	ecx, DWORD PTR _arg2$[ebp]
	movsd	xmm0, QWORD PTR [eax+16]
	comisd	xmm0, QWORD PTR [ecx+16]
	jb	SHORT $LN62@xmlXPathCo
	mov	DWORD PTR tv242[ebp], 1
	jmp	SHORT $LN63@xmlXPathCo
$LN62@xmlXPathCo:
	mov	DWORD PTR tv242[ebp], 0
$LN63@xmlXPathCo:
	mov	edx, DWORD PTR tv242[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 7451 : 	    } else {

	jmp	SHORT $LN52@xmlXPathCo
$LN51@xmlXPathCo:

; 7452 : 		ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN52@xmlXPathCo:

; 7453 : 	    }
; 7454 : 	}
; 7455 :     }
; 7456 :     xmlXPathReleaseObject(ctxt->context, arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7457 :     xmlXPathReleaseObject(ctxt->context, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7458 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCo:

; 7459 : }

	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCompareValues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNotEqualValues
_TEXT	SEGMENT
tv174 = -28						; size = 4
tv143 = -24						; size = 4
tv131 = -20						; size = 4
_ret$ = -16						; size = 4
_argtmp$ = -12						; size = 4
_arg2$ = -8						; size = 4
_arg1$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathNotEqualValues PROC				; COMDAT

; 7249 : xmlXPathNotEqualValues(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7250 :     xmlXPathObjectPtr arg1, arg2, argtmp;
; 7251 :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 7252 : 
; 7253 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlXPathNo
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@xmlXPathNo
$LN5@xmlXPathNo:
	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN4@xmlXPathNo:

; 7254 :     arg2 = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax

; 7255 :     arg1 = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg1$[ebp], eax

; 7256 :     if ((arg1 == NULL) || (arg2 == NULL)) {

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN7@xmlXPathNo
	cmp	DWORD PTR _arg2$[ebp], 0
	jne	SHORT $LN6@xmlXPathNo
$LN7@xmlXPathNo:

; 7257 : 	if (arg1 != NULL)

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN8@xmlXPathNo

; 7258 : 	    xmlXPathReleaseObject(ctxt->context, arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
	jmp	SHORT $LN9@xmlXPathNo
$LN8@xmlXPathNo:

; 7259 : 	else
; 7260 : 	    xmlXPathReleaseObject(ctxt->context, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN9@xmlXPathNo:

; 7261 : 	XP_ERROR0(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN6@xmlXPathNo:

; 7262 :     }
; 7263 : 
; 7264 :     if (arg1 == arg2) {

	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	ecx, DWORD PTR _arg2$[ebp]
	jne	SHORT $LN10@xmlXPathNo

; 7265 : #ifdef DEBUG_EXPR
; 7266 :         xmlGenericError(xmlGenericErrorContext,
; 7267 : 		"NotEqual: by pointer\n");
; 7268 : #endif
; 7269 : 	xmlXPathReleaseObject(ctxt->context, arg1);

	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7270 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN10@xmlXPathNo:

; 7271 :     }
; 7272 : 
; 7273 :     /*
; 7274 :      *If either argument is a nodeset, it's a 'special case'
; 7275 :      */
; 7276 :     if ((arg2->type == XPATH_NODESET) || (arg2->type == XPATH_XSLT_TREE) ||
; 7277 :       (arg1->type == XPATH_NODESET) || (arg1->type == XPATH_XSLT_TREE)) {

	mov	edx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN12@xmlXPathNo
	mov	eax, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [eax], 9
	je	SHORT $LN12@xmlXPathNo
	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN12@xmlXPathNo
	mov	edx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [edx], 9
	jne	$LN11@xmlXPathNo
$LN12@xmlXPathNo:

; 7278 : 	/*
; 7279 : 	 *Hack it to assure arg1 is the nodeset
; 7280 : 	 */
; 7281 : 	if ((arg1->type != XPATH_NODESET) && (arg1->type != XPATH_XSLT_TREE)) {

	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN13@xmlXPathNo
	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN13@xmlXPathNo

; 7282 : 		argtmp = arg2;

	mov	edx, DWORD PTR _arg2$[ebp]
	mov	DWORD PTR _argtmp$[ebp], edx

; 7283 : 		arg2 = arg1;

	mov	eax, DWORD PTR _arg1$[ebp]
	mov	DWORD PTR _arg2$[ebp], eax

; 7284 : 		arg1 = argtmp;

	mov	ecx, DWORD PTR _argtmp$[ebp]
	mov	DWORD PTR _arg1$[ebp], ecx
$LN13@xmlXPathNo:

; 7285 : 	}
; 7286 : 	switch (arg2->type) {

	mov	edx, DWORD PTR _arg2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv131[ebp], eax
	mov	ecx, DWORD PTR tv131[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv131[ebp], ecx
	cmp	DWORD PTR tv131[ebp], 8
	ja	$LN2@xmlXPathNo
	mov	edx, DWORD PTR tv131[ebp]
	jmp	DWORD PTR $LN28@xmlXPathNo[edx*4]

; 7287 : 	    case XPATH_UNDEFINED:
; 7288 : #ifdef DEBUG_EXPR
; 7289 : 		xmlGenericError(xmlGenericErrorContext,
; 7290 : 			"NotEqual: undefined\n");
; 7291 : #endif
; 7292 : 		break;

	jmp	$LN2@xmlXPathNo
$LN15@xmlXPathNo:

; 7293 : 	    case XPATH_NODESET:
; 7294 : 	    case XPATH_XSLT_TREE:
; 7295 : 		ret = xmlXPathEqualNodeSets(arg1, arg2, 1);

	push	1
	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	call	_xmlXPathEqualNodeSets
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 7296 : 		break;

	jmp	$LN2@xmlXPathNo
$LN16@xmlXPathNo:

; 7297 : 	    case XPATH_BOOLEAN:
; 7298 : 		if ((arg1->nodesetval == NULL) ||

	mov	edx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN19@xmlXPathNo
	mov	eax, DWORD PTR _arg1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN17@xmlXPathNo
$LN19@xmlXPathNo:

; 7299 : 		  (arg1->nodesetval->nodeNr == 0)) ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
	jmp	SHORT $LN18@xmlXPathNo
$LN17@xmlXPathNo:

; 7300 : 		else
; 7301 : 		    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
$LN18@xmlXPathNo:

; 7302 : 		ret = (ret != arg2->boolval);

	mov	edx, DWORD PTR _arg2$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN24@xmlXPathNo
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN25@xmlXPathNo
$LN24@xmlXPathNo:
	mov	DWORD PTR tv143[ebp], 0
$LN25@xmlXPathNo:
	mov	ecx, DWORD PTR tv143[ebp]
	mov	DWORD PTR _ret$[ebp], ecx

; 7303 : 		break;

	jmp	SHORT $LN2@xmlXPathNo
$LN20@xmlXPathNo:

; 7304 : 	    case XPATH_NUMBER:
; 7305 : 		ret = xmlXPathEqualNodeSetFloat(ctxt, arg1, arg2->floatval, 1);

	push	1
	mov	edx, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathEqualNodeSetFloat
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 7306 : 		break;

	jmp	SHORT $LN2@xmlXPathNo
$LN21@xmlXPathNo:

; 7307 : 	    case XPATH_STRING:
; 7308 : 		ret = xmlXPathEqualNodeSetString(arg1, arg2->stringval,1);

	push	1
	mov	edx, DWORD PTR _arg2$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	call	_xmlXPathEqualNodeSetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 7309 : 		break;

	jmp	SHORT $LN2@xmlXPathNo
$LN22@xmlXPathNo:

; 7310 : 	    case XPATH_USERS:
; 7311 : 	    case XPATH_POINT:
; 7312 : 	    case XPATH_RANGE:
; 7313 : 	    case XPATH_LOCATIONSET:
; 7314 : 		TODO

	mov	esi, esp
	push	7314					; 00001c92H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlXPathNo:

; 7315 : 		break;
; 7316 : 	}
; 7317 : 	xmlXPathReleaseObject(ctxt->context, arg1);

	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7318 : 	xmlXPathReleaseObject(ctxt->context, arg2);

	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7319 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN1@xmlXPathNo
$LN11@xmlXPathNo:

; 7320 :     }
; 7321 : 
; 7322 :     return (!xmlXPathEqualValuesCommon(ctxt, arg1, arg2));

	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathEqualValuesCommon
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN26@xmlXPathNo
	mov	DWORD PTR tv174[ebp], 1
	jmp	SHORT $LN27@xmlXPathNo
$LN26@xmlXPathNo:
	mov	DWORD PTR tv174[ebp], 0
$LN27@xmlXPathNo:
	mov	eax, DWORD PTR tv174[ebp]
$LN1@xmlXPathNo:

; 7323 : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@xmlXPathNo:
	DD	$LN15@xmlXPathNo
	DD	$LN16@xmlXPathNo
	DD	$LN20@xmlXPathNo
	DD	$LN21@xmlXPathNo
	DD	$LN22@xmlXPathNo
	DD	$LN22@xmlXPathNo
	DD	$LN22@xmlXPathNo
	DD	$LN22@xmlXPathNo
	DD	$LN15@xmlXPathNo
_xmlXPathNotEqualValues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEqualValues
_TEXT	SEGMENT
tv141 = -24						; size = 4
tv129 = -20						; size = 4
_ret$ = -16						; size = 4
_argtmp$ = -12						; size = 4
_arg2$ = -8						; size = 4
_arg1$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathEqualValues PROC				; COMDAT

; 7164 : xmlXPathEqualValues(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 7165 :     xmlXPathObjectPtr arg1, arg2, argtmp;
; 7166 :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 7167 : 
; 7168 :     if ((ctxt == NULL) || (ctxt->context == NULL)) return(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlXPathEq
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@xmlXPathEq
$LN5@xmlXPathEq:
	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN4@xmlXPathEq:

; 7169 :     arg2 = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg2$[ebp], eax

; 7170 :     arg1 = valuePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _arg1$[ebp], eax

; 7171 :     if ((arg1 == NULL) || (arg2 == NULL)) {

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN7@xmlXPathEq
	cmp	DWORD PTR _arg2$[ebp], 0
	jne	SHORT $LN6@xmlXPathEq
$LN7@xmlXPathEq:

; 7172 : 	if (arg1 != NULL)

	cmp	DWORD PTR _arg1$[ebp], 0
	je	SHORT $LN8@xmlXPathEq

; 7173 : 	    xmlXPathReleaseObject(ctxt->context, arg1);

	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
	jmp	SHORT $LN9@xmlXPathEq
$LN8@xmlXPathEq:

; 7174 : 	else
; 7175 : 	    xmlXPathReleaseObject(ctxt->context, arg2);

	mov	eax, DWORD PTR _arg2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8
$LN9@xmlXPathEq:

; 7176 : 	XP_ERROR0(XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	$LN1@xmlXPathEq
$LN6@xmlXPathEq:

; 7177 :     }
; 7178 : 
; 7179 :     if (arg1 == arg2) {

	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	ecx, DWORD PTR _arg2$[ebp]
	jne	SHORT $LN10@xmlXPathEq

; 7180 : #ifdef DEBUG_EXPR
; 7181 :         xmlGenericError(xmlGenericErrorContext,
; 7182 : 		"Equal: by pointer\n");
; 7183 : #endif
; 7184 : 	xmlXPathFreeObject(arg1);

	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 7185 :         return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathEq
$LN10@xmlXPathEq:

; 7186 :     }
; 7187 : 
; 7188 :     /*
; 7189 :      *If either argument is a nodeset, it's a 'special case'
; 7190 :      */
; 7191 :     if ((arg2->type == XPATH_NODESET) || (arg2->type == XPATH_XSLT_TREE) ||
; 7192 :       (arg1->type == XPATH_NODESET) || (arg1->type == XPATH_XSLT_TREE)) {

	mov	eax, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN12@xmlXPathEq
	mov	ecx, DWORD PTR _arg2$[ebp]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN12@xmlXPathEq
	mov	edx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN12@xmlXPathEq
	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax], 9
	jne	$LN11@xmlXPathEq
$LN12@xmlXPathEq:

; 7193 : 	/*
; 7194 : 	 *Hack it to assure arg1 is the nodeset
; 7195 : 	 */
; 7196 : 	if ((arg1->type != XPATH_NODESET) && (arg1->type != XPATH_XSLT_TREE)) {

	mov	ecx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [ecx], 1
	je	SHORT $LN13@xmlXPathEq
	mov	edx, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [edx], 9
	je	SHORT $LN13@xmlXPathEq

; 7197 : 		argtmp = arg2;

	mov	eax, DWORD PTR _arg2$[ebp]
	mov	DWORD PTR _argtmp$[ebp], eax

; 7198 : 		arg2 = arg1;

	mov	ecx, DWORD PTR _arg1$[ebp]
	mov	DWORD PTR _arg2$[ebp], ecx

; 7199 : 		arg1 = argtmp;

	mov	edx, DWORD PTR _argtmp$[ebp]
	mov	DWORD PTR _arg1$[ebp], edx
$LN13@xmlXPathEq:

; 7200 : 	}
; 7201 : 	switch (arg2->type) {

	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv129[ebp], ecx
	mov	edx, DWORD PTR tv129[ebp]
	sub	edx, 1
	mov	DWORD PTR tv129[ebp], edx
	cmp	DWORD PTR tv129[ebp], 8
	ja	$LN2@xmlXPathEq
	mov	eax, DWORD PTR tv129[ebp]
	jmp	DWORD PTR $LN26@xmlXPathEq[eax*4]

; 7202 : 	    case XPATH_UNDEFINED:
; 7203 : #ifdef DEBUG_EXPR
; 7204 : 		xmlGenericError(xmlGenericErrorContext,
; 7205 : 			"Equal: undefined\n");
; 7206 : #endif
; 7207 : 		break;

	jmp	$LN2@xmlXPathEq
$LN15@xmlXPathEq:

; 7208 : 	    case XPATH_NODESET:
; 7209 : 	    case XPATH_XSLT_TREE:
; 7210 : 		ret = xmlXPathEqualNodeSets(arg1, arg2, 0);

	push	0
	mov	ecx, DWORD PTR _arg2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	call	_xmlXPathEqualNodeSets
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 7211 : 		break;

	jmp	$LN2@xmlXPathEq
$LN16@xmlXPathEq:

; 7212 : 	    case XPATH_BOOLEAN:
; 7213 : 		if ((arg1->nodesetval == NULL) ||

	mov	eax, DWORD PTR _arg1$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN19@xmlXPathEq
	mov	ecx, DWORD PTR _arg1$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN17@xmlXPathEq
$LN19@xmlXPathEq:

; 7214 : 		  (arg1->nodesetval->nodeNr == 0)) ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
	jmp	SHORT $LN18@xmlXPathEq
$LN17@xmlXPathEq:

; 7215 : 		else
; 7216 : 		    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
$LN18@xmlXPathEq:

; 7217 : 		ret = (ret == arg2->boolval);

	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN24@xmlXPathEq
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN25@xmlXPathEq
$LN24@xmlXPathEq:
	mov	DWORD PTR tv141[ebp], 0
$LN25@xmlXPathEq:
	mov	edx, DWORD PTR tv141[ebp]
	mov	DWORD PTR _ret$[ebp], edx

; 7218 : 		break;

	jmp	SHORT $LN2@xmlXPathEq
$LN20@xmlXPathEq:

; 7219 : 	    case XPATH_NUMBER:
; 7220 : 		ret = xmlXPathEqualNodeSetFloat(ctxt, arg1, arg2->floatval, 0);

	push	0
	mov	eax, DWORD PTR _arg2$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _arg1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathEqualNodeSetFloat
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 7221 : 		break;

	jmp	SHORT $LN2@xmlXPathEq
$LN21@xmlXPathEq:

; 7222 : 	    case XPATH_STRING:
; 7223 : 		ret = xmlXPathEqualNodeSetString(arg1, arg2->stringval, 0);

	push	0
	mov	eax, DWORD PTR _arg2$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	call	_xmlXPathEqualNodeSetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 7224 : 		break;

	jmp	SHORT $LN2@xmlXPathEq
$LN22@xmlXPathEq:

; 7225 : 	    case XPATH_USERS:
; 7226 : 	    case XPATH_POINT:
; 7227 : 	    case XPATH_RANGE:
; 7228 : 	    case XPATH_LOCATIONSET:
; 7229 : 		TODO

	mov	esi, esp
	push	7229					; 00001c3dH
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlXPathEq:

; 7230 : 		break;
; 7231 : 	}
; 7232 : 	xmlXPathReleaseObject(ctxt->context, arg1);

	mov	edx, DWORD PTR _arg1$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7233 : 	xmlXPathReleaseObject(ctxt->context, arg2);

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 7234 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN1@xmlXPathEq
$LN11@xmlXPathEq:

; 7235 :     }
; 7236 : 
; 7237 :     return (xmlXPathEqualValuesCommon(ctxt, arg1, arg2));

	mov	edx, DWORD PTR _arg2$[ebp]
	push	edx
	mov	eax, DWORD PTR _arg1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathEqualValuesCommon
	add	esp, 12					; 0000000cH
$LN1@xmlXPathEq:

; 7238 : }

	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@xmlXPathEq:
	DD	$LN15@xmlXPathEq
	DD	$LN16@xmlXPathEq
	DD	$LN20@xmlXPathEq
	DD	$LN21@xmlXPathEq
	DD	$LN22@xmlXPathEq
	DD	$LN22@xmlXPathEq
	DD	$LN22@xmlXPathEq
	DD	$LN22@xmlXPathEq
	DD	$LN15@xmlXPathEq
_xmlXPathEqualValues ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathWrapExternal
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathWrapExternal PROC				; COMDAT

; 5376 : xmlXPathWrapExternal (void *val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5377 :     xmlXPathObjectPtr ret;
; 5378 : 
; 5379 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 5380 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathWr

; 5381 :         xmlXPathErrMemory(NULL, "creating user object\n");

	push	OFFSET ??_C@_0BG@ENIHPAML@creating?5user?5object?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 5382 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathWr
$LN2@xmlXPathWr:

; 5383 :     }
; 5384 :     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 5385 :     ret->type = XPATH_USERS;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 8

; 5386 :     ret->user = val;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR [edx+28], eax

; 5387 : #ifdef XP_DEBUG_OBJ_USAGE
; 5388 :     xmlXPathDebugObjUsageRequested(NULL, XPATH_USERS);
; 5389 : #endif
; 5390 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathWr:

; 5391 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathWrapExternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathWrapNodeSet
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathWrapNodeSet PROC				; COMDAT

; 4427 : xmlXPathWrapNodeSet(xmlNodeSetPtr val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4428 :     xmlXPathObjectPtr ret;
; 4429 : 
; 4430 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 4431 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathWr

; 4432 :         xmlXPathErrMemory(NULL, "creating node set object\n");

	push	OFFSET ??_C@_0BK@DGDFHNNJ@creating?5node?5set?5object?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 4433 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathWr
$LN2@xmlXPathWr:

; 4434 :     }
; 4435 :     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 4436 :     ret->type = XPATH_NODESET;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 1

; 4437 :     ret->nodesetval = val;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR [edx+4], eax

; 4438 : #ifdef XP_DEBUG_OBJ_USAGE
; 4439 :     xmlXPathDebugObjUsageRequested(NULL, XPATH_NODESET);
; 4440 : #endif
; 4441 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathWr:

; 4442 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathWrapNodeSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewNodeSetList
_TEXT	SEGMENT
_i$ = -8						; size = 4
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathNewNodeSetList PROC				; COMDAT

; 4397 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4398 :     xmlXPathObjectPtr ret;
; 4399 :     int i;
; 4400 : 
; 4401 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN5@xmlXPathNe

; 4402 :         ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0
	jmp	SHORT $LN6@xmlXPathNe
$LN5@xmlXPathNe:

; 4403 :     else if (val->nodeTab == NULL)

	mov	eax, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN7@xmlXPathNe

; 4404 :         ret = xmlXPathNewNodeSet(NULL);

	push	0
	call	_xmlXPathNewNodeSet
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN6@xmlXPathNe
$LN7@xmlXPathNe:

; 4405 :     else {
; 4406 :         ret = xmlXPathNewNodeSet(val->nodeTab[0]);

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	call	_xmlXPathNewNodeSet
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4407 :         if (ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN6@xmlXPathNe

; 4408 :             for (i = 1; i < val->nodeNr; ++i) {

	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@xmlXPathNe
$LN2@xmlXPathNe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathNe:
	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN6@xmlXPathNe

; 4409 :                 if (xmlXPathNodeSetAddUnique(ret->nodesetval, val->nodeTab[i])
; 4410 : 		    < 0) break;

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN10@xmlXPathNe
	jmp	SHORT $LN6@xmlXPathNe
$LN10@xmlXPathNe:

; 4411 : 	    }

	jmp	SHORT $LN2@xmlXPathNe
$LN6@xmlXPathNe:

; 4412 : 	}
; 4413 :     }
; 4414 : 
; 4415 :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]

; 4416 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewNodeSetList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetRemove
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathNodeSetRemove PROC				; COMDAT

; 4157 : xmlXPathNodeSetRemove(xmlNodeSetPtr cur, int val) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4158 :     if (cur == NULL) return;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN5@xmlXPathNo
	jmp	$LN1@xmlXPathNo
$LN5@xmlXPathNo:

; 4159 :     if (val >= cur->nodeNr) return;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jl	SHORT $LN6@xmlXPathNo
	jmp	$LN1@xmlXPathNo
$LN6@xmlXPathNo:

; 4160 :     if ((cur->nodeTab[val] != NULL) &&

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN7@xmlXPathNo
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN7@xmlXPathNo

; 4161 : 	(cur->nodeTab[val]->type == XML_NAMESPACE_DECL))
; 4162 : 	xmlXPathNodeSetFreeNs((xmlNsPtr) cur->nodeTab[val]);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	push	eax
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4
$LN7@xmlXPathNo:

; 4163 :     cur->nodeNr--;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	sub	edx, 1
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], edx

; 4164 :     for (;val < cur->nodeNr;val++)

	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	ecx, DWORD PTR _val$[ebp]
	add	ecx, 1
	mov	DWORD PTR _val$[ebp], ecx
$LN4@xmlXPathNo:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _val$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@xmlXPathNo

; 4165 :         cur->nodeTab[val] = cur->nodeTab[val + 1];

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR _val$[ebp]
	mov	esi, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [edx+esi*4+4]
	mov	DWORD PTR [ecx+eax*4], edx
	jmp	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 4166 :     cur->nodeTab[cur->nodeNr] = NULL;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+ecx*4], 0
$LN1@xmlXPathNo:

; 4167 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNodeSetRemove ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetDel
_TEXT	SEGMENT
_i$ = -4						; size = 4
_cur$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathNodeSetDel PROC				; COMDAT

; 4120 : xmlXPathNodeSetDel(xmlNodeSetPtr cur, xmlNodePtr val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4121 :     int i;
; 4122 : 
; 4123 :     if (cur == NULL) return;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN8@xmlXPathNo
	jmp	$LN1@xmlXPathNo
$LN8@xmlXPathNo:

; 4124 :     if (val == NULL) return;

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN9@xmlXPathNo
	jmp	$LN1@xmlXPathNo
$LN9@xmlXPathNo:

; 4125 : 
; 4126 :     /*
; 4127 :      * find node in nodeTab
; 4128 :      */
; 4129 :     for (i = 0;i < cur->nodeNr;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathNo:
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN3@xmlXPathNo

; 4130 :         if (cur->nodeTab[i] == val) break;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _val$[ebp]
	jne	SHORT $LN10@xmlXPathNo
	jmp	SHORT $LN3@xmlXPathNo
$LN10@xmlXPathNo:
	jmp	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 4131 : 
; 4132 :     if (i >= cur->nodeNr) {	/* not found */

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jl	SHORT $LN11@xmlXPathNo

; 4133 : #ifdef DEBUG
; 4134 :         xmlGenericError(xmlGenericErrorContext,
; 4135 : 	        "xmlXPathNodeSetDel: Node %s wasn't found in NodeList\n",
; 4136 : 		val->name);
; 4137 : #endif
; 4138 :         return;

	jmp	$LN1@xmlXPathNo
$LN11@xmlXPathNo:

; 4139 :     }
; 4140 :     if ((cur->nodeTab[i] != NULL) &&

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN12@xmlXPathNo
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN12@xmlXPathNo

; 4141 : 	(cur->nodeTab[i]->type == XML_NAMESPACE_DECL))
; 4142 : 	xmlXPathNodeSetFreeNs((xmlNsPtr) cur->nodeTab[i]);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4
$LN12@xmlXPathNo:

; 4143 :     cur->nodeNr--;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, 1
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], eax

; 4144 :     for (;i < cur->nodeNr;i++)

	jmp	SHORT $LN7@xmlXPathNo
$LN5@xmlXPathNo:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@xmlXPathNo:
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN6@xmlXPathNo

; 4145 :         cur->nodeTab[i] = cur->nodeTab[i + 1];

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [eax+esi*4+4]
	mov	DWORD PTR [edx+ecx*4], eax
	jmp	SHORT $LN5@xmlXPathNo
$LN6@xmlXPathNo:

; 4146 :     cur->nodeTab[cur->nodeNr] = NULL;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+edx*4], 0
$LN1@xmlXPathNo:

; 4147 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetDel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetMerge
_TEXT	SEGMENT
_ns$1 = -32						; size = 4
_temp$2 = -28						; size = 4
_n2$ = -24						; size = 4
_n1$ = -20						; size = 4
_skip$ = -16						; size = 4
_initNr$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_val1$ = 8						; size = 4
_val2$ = 12						; size = 4
_xmlXPathNodeSetMerge PROC				; COMDAT

; 3817 : xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr val2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3818 :     int i, j, initNr, skip;
; 3819 :     xmlNodePtr n1, n2;
; 3820 : 
; 3821 :     if (val2 == NULL) return(val1);

	cmp	DWORD PTR _val2$[ebp], 0
	jne	SHORT $LN8@xmlXPathNo
	mov	eax, DWORD PTR _val1$[ebp]
	jmp	$LN1@xmlXPathNo
$LN8@xmlXPathNo:

; 3822 :     if (val1 == NULL) {

	cmp	DWORD PTR _val1$[ebp], 0
	jne	SHORT $LN9@xmlXPathNo

; 3823 : 	val1 = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _val1$[ebp], eax

; 3824 :     if (val1 == NULL)

	cmp	DWORD PTR _val1$[ebp], 0
	jne	SHORT $LN9@xmlXPathNo

; 3825 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN9@xmlXPathNo:

; 3826 : #if 0
; 3827 : 	/*
; 3828 : 	* TODO: The optimization won't work in every case, since
; 3829 : 	*  those nasty namespace nodes need to be added with
; 3830 : 	*  xmlXPathNodeSetDupNs() to the set; thus a pure
; 3831 : 	*  memcpy is not possible.
; 3832 : 	*  If there was a flag on the nodesetval, indicating that
; 3833 : 	*  some temporary nodes are in, that would be helpfull.
; 3834 : 	*/
; 3835 : 	/*
; 3836 : 	* Optimization: Create an equally sized node-set
; 3837 : 	* and memcpy the content.
; 3838 : 	*/
; 3839 : 	val1 = xmlXPathNodeSetCreateSize(val2->nodeNr);
; 3840 : 	if (val1 == NULL)
; 3841 : 	    return(NULL);
; 3842 : 	if (val2->nodeNr != 0) {
; 3843 : 	    if (val2->nodeNr == 1)
; 3844 : 		*(val1->nodeTab) = *(val2->nodeTab);
; 3845 : 	    else {
; 3846 : 		memcpy(val1->nodeTab, val2->nodeTab,
; 3847 : 		    val2->nodeNr * sizeof(xmlNodePtr));
; 3848 : 	    }
; 3849 : 	    val1->nodeNr = val2->nodeNr;
; 3850 : 	}
; 3851 : 	return(val1);
; 3852 : #endif
; 3853 :     }
; 3854 : 
; 3855 :     /* @@ with_ns to check whether namespace nodes should be looked at @@ */
; 3856 :     initNr = val1->nodeNr;

	mov	eax, DWORD PTR _val1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _initNr$[ebp], ecx

; 3857 : 
; 3858 :     for (i = 0;i < val2->nodeNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@xmlXPathNo:
	mov	eax, DWORD PTR _val2$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	$LN3@xmlXPathNo

; 3859 : 	n2 = val2->nodeTab[i];

	mov	edx, DWORD PTR _val2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _n2$[ebp], edx

; 3860 : 	/*
; 3861 : 	 * check against duplicates
; 3862 : 	 */
; 3863 : 	skip = 0;

	mov	DWORD PTR _skip$[ebp], 0

; 3864 : 	for (j = 0; j < initNr; j++) {

	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN7@xmlXPathNo
$LN5@xmlXPathNo:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN7@xmlXPathNo:
	mov	ecx, DWORD PTR _j$[ebp]
	cmp	ecx, DWORD PTR _initNr$[ebp]
	jge	SHORT $LN6@xmlXPathNo

; 3865 : 	    n1 = val1->nodeTab[j];

	mov	edx, DWORD PTR _val1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _n1$[ebp], edx

; 3866 : 	    if (n1 == n2) {

	mov	eax, DWORD PTR _n1$[ebp]
	cmp	eax, DWORD PTR _n2$[ebp]
	jne	SHORT $LN11@xmlXPathNo

; 3867 : 		skip = 1;

	mov	DWORD PTR _skip$[ebp], 1

; 3868 : 		break;

	jmp	SHORT $LN6@xmlXPathNo
	jmp	SHORT $LN12@xmlXPathNo
$LN11@xmlXPathNo:

; 3869 : 	    } else if ((n1->type == XML_NAMESPACE_DECL) &&

	mov	ecx, DWORD PTR _n1$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN12@xmlXPathNo
	mov	edx, DWORD PTR _n2$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN12@xmlXPathNo

; 3870 : 		       (n2->type == XML_NAMESPACE_DECL)) {
; 3871 : 		if ((((xmlNsPtr) n1)->next == ((xmlNsPtr) n2)->next) &&

	mov	eax, DWORD PTR _n1$[ebp]
	mov	ecx, DWORD PTR _n2$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN12@xmlXPathNo
	mov	eax, DWORD PTR _n2$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _n1$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@xmlXPathNo

; 3872 : 		    (xmlStrEqual(((xmlNsPtr) n1)->prefix,
; 3873 : 			((xmlNsPtr) n2)->prefix)))
; 3874 : 		{
; 3875 : 		    skip = 1;

	mov	DWORD PTR _skip$[ebp], 1

; 3876 : 		    break;

	jmp	SHORT $LN6@xmlXPathNo
$LN12@xmlXPathNo:

; 3877 : 		}
; 3878 : 	    }
; 3879 : 	}

	jmp	SHORT $LN5@xmlXPathNo
$LN6@xmlXPathNo:

; 3880 : 	if (skip)

	cmp	DWORD PTR _skip$[ebp], 0
	je	SHORT $LN15@xmlXPathNo

; 3881 : 	    continue;

	jmp	$LN2@xmlXPathNo
$LN15@xmlXPathNo:

; 3882 : 
; 3883 : 	/*
; 3884 : 	 * grow the nodeTab if needed
; 3885 : 	 */
; 3886 : 	if (val1->nodeMax == 0) {

	mov	ecx, DWORD PTR _val1$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN16@xmlXPathNo

; 3887 : 	    val1->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _val1$[ebp]
	mov	DWORD PTR [edx+8], eax

; 3888 : 						    sizeof(xmlNodePtr));
; 3889 : 	    if (val1->nodeTab == NULL) {

	mov	eax, DWORD PTR _val1$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN18@xmlXPathNo

; 3890 : 	        xmlXPathErrMemory(NULL, "merging nodeset\n");

	push	OFFSET ??_C@_0BB@IMBJKAMG@merging?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3891 : 		return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN18@xmlXPathNo:

; 3892 : 	    }
; 3893 : 	    memset(val1->nodeTab, 0 ,

	xor	ecx, ecx
	mov	edx, DWORD PTR _val1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx

; 3894 : 		   XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
; 3895 : 	    val1->nodeMax = XML_NODESET_DEFAULT;

	mov	ecx, DWORD PTR _val1$[ebp]
	mov	DWORD PTR [ecx+4], 10			; 0000000aH
	jmp	$LN17@xmlXPathNo
$LN16@xmlXPathNo:

; 3896 : 	} else if (val1->nodeNr == val1->nodeMax) {

	mov	edx, DWORD PTR _val1$[ebp]
	mov	eax, DWORD PTR _val1$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN17@xmlXPathNo

; 3897 : 	    xmlNodePtr *temp;
; 3898 : 
; 3899 :             if (val1->nodeMax >= XPATH_MAX_NODESET_LENGTH) {

	mov	edx, DWORD PTR _val1$[ebp]
	cmp	DWORD PTR [edx+4], 10000000		; 00989680H
	jl	SHORT $LN20@xmlXPathNo

; 3900 :                 xmlXPathErrMemory(NULL, "merging nodeset hit limit\n");

	push	OFFSET ??_C@_0BL@DBOLJGCN@merging?5nodeset?5hit?5limit?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3901 :                 return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN20@xmlXPathNo:

; 3902 :             }
; 3903 : 	    temp = (xmlNodePtr *) xmlRealloc(val1->nodeTab, val1->nodeMax * 2 *

	mov	eax, DWORD PTR _val1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _val1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _temp$2[ebp], eax

; 3904 : 					     sizeof(xmlNodePtr));
; 3905 : 	    if (temp == NULL) {

	cmp	DWORD PTR _temp$2[ebp], 0
	jne	SHORT $LN21@xmlXPathNo

; 3906 : 	        xmlXPathErrMemory(NULL, "merging nodeset\n");

	push	OFFSET ??_C@_0BB@IMBJKAMG@merging?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3907 : 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNo
$LN21@xmlXPathNo:

; 3908 : 	    }
; 3909 : 	    val1->nodeTab = temp;

	mov	ecx, DWORD PTR _val1$[ebp]
	mov	edx, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR [ecx+8], edx

; 3910 : 	    val1->nodeMax *= 2;

	mov	eax, DWORD PTR _val1$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	mov	edx, DWORD PTR _val1$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN17@xmlXPathNo:

; 3911 : 	}
; 3912 : 	if (n2->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _n2$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN22@xmlXPathNo

; 3913 : 	    xmlNsPtr ns = (xmlNsPtr) n2;

	mov	ecx, DWORD PTR _n2$[ebp]
	mov	DWORD PTR _ns$1[ebp], ecx

; 3914 : 
; 3915 : 	    val1->nodeTab[val1->nodeNr++] =

	mov	edx, DWORD PTR _ns$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ns$1[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlXPathNodeSetDupNs
	add	esp, 8
	mov	edx, DWORD PTR _val1$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR _val1$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _val1$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _val1$[ebp]
	mov	DWORD PTR [edx], ecx

; 3916 : 		xmlXPathNodeSetDupNs((xmlNodePtr) ns->next, ns);
; 3917 : 	} else

	jmp	SHORT $LN23@xmlXPathNo
$LN22@xmlXPathNo:

; 3918 : 	    val1->nodeTab[val1->nodeNr++] = n2;

	mov	eax, DWORD PTR _val1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _val1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _n2$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _val1$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _val1$[ebp]
	mov	DWORD PTR [edx], ecx
$LN23@xmlXPathNo:

; 3919 :     }

	jmp	$LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 3920 : 
; 3921 :     return(val1);

	mov	eax, DWORD PTR _val1$[ebp]
$LN1@xmlXPathNo:

; 3922 : }

	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetMerge ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisterAllFunctions
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_xmlXPathRegisterAllFunctions PROC			; COMDAT

; 15069: {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 15070:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"boolean",

	push	OFFSET _xmlXPathBooleanFunction
	push	OFFSET ??_C@_07GOBOHMJA@boolean@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15071:                          xmlXPathBooleanFunction);
; 15072:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"ceiling",

	push	OFFSET _xmlXPathCeilingFunction
	push	OFFSET ??_C@_07EANFIDJB@ceiling@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15073:                          xmlXPathCeilingFunction);
; 15074:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"count",

	push	OFFSET _xmlXPathCountFunction
	push	OFFSET ??_C@_05IOMEMJEC@count@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15075:                          xmlXPathCountFunction);
; 15076:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"concat",

	push	OFFSET _xmlXPathConcatFunction
	push	OFFSET ??_C@_06CMLIEHFC@concat@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15077:                          xmlXPathConcatFunction);
; 15078:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"contains",

	push	OFFSET _xmlXPathContainsFunction
	push	OFFSET ??_C@_08JKMOLGCD@contains@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15079:                          xmlXPathContainsFunction);
; 15080:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"id",

	push	OFFSET _xmlXPathIdFunction
	push	OFFSET ??_C@_02EGCJHIOB@id@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15081:                          xmlXPathIdFunction);
; 15082:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"false",

	push	OFFSET _xmlXPathFalseFunction
	push	OFFSET ??_C@_05LAPONLG@false@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15083:                          xmlXPathFalseFunction);
; 15084:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"floor",

	push	OFFSET _xmlXPathFloorFunction
	push	OFFSET ??_C@_05PBJFFIGL@floor@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15085:                          xmlXPathFloorFunction);
; 15086:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"last",

	push	OFFSET _xmlXPathLastFunction
	push	OFFSET ??_C@_04PLGBGIDD@last@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15087:                          xmlXPathLastFunction);
; 15088:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"lang",

	push	OFFSET _xmlXPathLangFunction
	push	OFFSET ??_C@_04IOHABJIC@lang@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15089:                          xmlXPathLangFunction);
; 15090:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"local-name",

	push	OFFSET _xmlXPathLocalNameFunction
	push	OFFSET ??_C@_0L@JNMMKGPH@local?9name@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15091:                          xmlXPathLocalNameFunction);
; 15092:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"not",

	push	OFFSET _xmlXPathNotFunction
	push	OFFSET ??_C@_03NJKJADM@not@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15093:                          xmlXPathNotFunction);
; 15094:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"name",

	push	OFFSET _xmlXPathNameFunction
	push	OFFSET ??_C@_04MEMAJGDJ@name@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15095:                          xmlXPathNameFunction);
; 15096:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"namespace-uri",

	push	OFFSET _xmlXPathNamespaceURIFunction
	push	OFFSET ??_C@_0O@LIBIEKOH@namespace?9uri@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15097:                          xmlXPathNamespaceURIFunction);
; 15098:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"normalize-space",

	push	OFFSET _xmlXPathNormalizeFunction
	push	OFFSET ??_C@_0BA@GMCNNFIH@normalize?9space@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15099:                          xmlXPathNormalizeFunction);
; 15100:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"number",

	push	OFFSET _xmlXPathNumberFunction
	push	OFFSET ??_C@_06EBGNBFIA@number@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15101:                          xmlXPathNumberFunction);
; 15102:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"position",

	push	OFFSET _xmlXPathPositionFunction
	push	OFFSET ??_C@_08OAGMDKAF@position@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15103:                          xmlXPathPositionFunction);
; 15104:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"round",

	push	OFFSET _xmlXPathRoundFunction
	push	OFFSET ??_C@_05MIMAKCN@round@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15105:                          xmlXPathRoundFunction);
; 15106:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"string",

	push	OFFSET _xmlXPathStringFunction
	push	OFFSET ??_C@_06ICGJLFIM@string@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15107:                          xmlXPathStringFunction);
; 15108:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"string-length",

	push	OFFSET _xmlXPathStringLengthFunction
	push	OFFSET ??_C@_0O@NOLAIBIG@string?9length@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15109:                          xmlXPathStringLengthFunction);
; 15110:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"starts-with",

	push	OFFSET _xmlXPathStartsWithFunction
	push	OFFSET ??_C@_0M@MENNCJLJ@starts?9with@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15111:                          xmlXPathStartsWithFunction);
; 15112:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"substring",

	push	OFFSET _xmlXPathSubstringFunction
	push	OFFSET ??_C@_09MJALBNED@substring@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15113:                          xmlXPathSubstringFunction);
; 15114:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"substring-before",

	push	OFFSET _xmlXPathSubstringBeforeFunction
	push	OFFSET ??_C@_0BB@KKJFBMPK@substring?9before@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15115:                          xmlXPathSubstringBeforeFunction);
; 15116:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"substring-after",

	push	OFFSET _xmlXPathSubstringAfterFunction
	push	OFFSET ??_C@_0BA@JEDLCCAF@substring?9after@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15117:                          xmlXPathSubstringAfterFunction);
; 15118:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"sum",

	push	OFFSET _xmlXPathSumFunction
	push	OFFSET ??_C@_03CFFIJAMA@sum@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15119:                          xmlXPathSumFunction);
; 15120:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"true",

	push	OFFSET _xmlXPathTrueFunction
	push	OFFSET ??_C@_04LOAJBDKD@true@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15121:                          xmlXPathTrueFunction);
; 15122:     xmlXPathRegisterFunc(ctxt, (const xmlChar *)"translate",

	push	OFFSET _xmlXPathTranslateFunction
	push	OFFSET ??_C@_09ODNGOEIO@translate@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFunc
	add	esp, 12					; 0000000cH

; 15123:                          xmlXPathTranslateFunction);
; 15124: 
; 15125:     xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"escape-uri",

	push	OFFSET _xmlXPathEscapeUriFunction
	push	OFFSET ??_C@_0CL@DABLMGPH@http?3?1?1www?4w3?4org?12002?108?1xquer@
	push	OFFSET ??_C@_0L@ODIBMOLP@escape?9uri@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisterFuncNS
	add	esp, 16					; 00000010H

; 15126: 	 (const xmlChar *)"http://www.w3.org/2002/08/xquery-functions",
; 15127:                          xmlXPathEscapeUriFunction);
; 15128: }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisterAllFunctions ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEvaluatePredicateResult
_TEXT	SEGMENT
tv93 = -24						; size = 4
tv88 = -20						; size = 4
tv80 = -16						; size = 4
tv74 = -12						; size = 4
tv67 = -8						; size = 4
_ptr$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_res$ = 12						; size = 4
_xmlXPathEvaluatePredicateResult PROC			; COMDAT

; 14439:                                 xmlXPathObjectPtr res) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14440:     if ((ctxt == NULL) || (res == NULL)) return(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlXPathEv
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN4@xmlXPathEv
$LN5@xmlXPathEv:
	xor	eax, eax
	jmp	$LN1@xmlXPathEv
$LN4@xmlXPathEv:

; 14441:     switch (res->type) {

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	sub	edx, 1
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 8
	ja	$LN13@xmlXPathEv
	mov	eax, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN23@xmlXPathEv[eax*4]
$LN6@xmlXPathEv:

; 14442:         case XPATH_BOOLEAN:
; 14443: 	    return(res->boolval);

	mov	ecx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	$LN1@xmlXPathEv
$LN7@xmlXPathEv:

; 14444:         case XPATH_NUMBER:
; 14445: #if defined(__BORLANDC__) || (defined(_MSC_VER) && (_MSC_VER == 1200))
; 14446: 	    return((res->floatval == ctxt->context->proximityPosition) &&
; 14447: 	           (!xmlXPathIsNaN(res->floatval))); /* MSC pbm Mark Vakoc !*/
; 14448: #else
; 14449: 	    return(res->floatval == ctxt->context->proximityPosition);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cvtsi2sd xmm0, DWORD PTR [eax+72]
	mov	ecx, DWORD PTR _res$[ebp]
	movsd	xmm1, QWORD PTR [ecx+16]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN15@xmlXPathEv
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN16@xmlXPathEv
$LN15@xmlXPathEv:
	mov	DWORD PTR tv74[ebp], 0
$LN16@xmlXPathEv:
	mov	eax, DWORD PTR tv74[ebp]
	jmp	$LN1@xmlXPathEv
$LN8@xmlXPathEv:

; 14450: #endif
; 14451:         case XPATH_NODESET:
; 14452:         case XPATH_XSLT_TREE:
; 14453: 	    if (res->nodesetval == NULL)

	mov	edx, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN9@xmlXPathEv

; 14454: 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathEv
$LN9@xmlXPathEv:

; 14455: 	    return(res->nodesetval->nodeNr != 0);

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN17@xmlXPathEv
	mov	DWORD PTR tv80[ebp], 1
	jmp	SHORT $LN18@xmlXPathEv
$LN17@xmlXPathEv:
	mov	DWORD PTR tv80[ebp], 0
$LN18@xmlXPathEv:
	mov	eax, DWORD PTR tv80[ebp]
	jmp	$LN1@xmlXPathEv
$LN10@xmlXPathEv:

; 14456:         case XPATH_STRING:
; 14457: 	    return((res->stringval != NULL) && (res->stringval[0] != 0));

	mov	edx, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN19@xmlXPathEv
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [edx+24]
	movzx	ecx, BYTE PTR [eax+ecx]
	test	ecx, ecx
	je	SHORT $LN19@xmlXPathEv
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN20@xmlXPathEv
$LN19@xmlXPathEv:
	mov	DWORD PTR tv88[ebp], 0
$LN20@xmlXPathEv:
	mov	eax, DWORD PTR tv88[ebp]
	jmp	SHORT $LN1@xmlXPathEv
$LN11@xmlXPathEv:

; 14458: #ifdef LIBXML_XPTR_ENABLED
; 14459: 	case XPATH_LOCATIONSET:{
; 14460: 	    xmlLocationSetPtr ptr = res->user;

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _ptr$1[ebp], eax

; 14461: 	    if (ptr == NULL)

	cmp	DWORD PTR _ptr$1[ebp], 0
	jne	SHORT $LN12@xmlXPathEv

; 14462: 	        return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathEv
$LN12@xmlXPathEv:

; 14463: 	    return (ptr->locNr != 0);

	mov	ecx, DWORD PTR _ptr$1[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN21@xmlXPathEv
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN22@xmlXPathEv
$LN21@xmlXPathEv:
	mov	DWORD PTR tv93[ebp], 0
$LN22@xmlXPathEv:
	mov	eax, DWORD PTR tv93[ebp]
	jmp	SHORT $LN1@xmlXPathEv
$LN13@xmlXPathEv:

; 14464: 	    }
; 14465: #endif
; 14466:         default:
; 14467: 	    STRANGE

	mov	esi, esp
	push	14467					; 00003883H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BJ@DADKHPPP@Internal?5error?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 14468:     }
; 14469:     return(0);

	xor	eax, eax
$LN1@xmlXPathEv:

; 14470: }

	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN23@xmlXPathEv:
	DD	$LN8@xmlXPathEv
	DD	$LN6@xmlXPathEv
	DD	$LN7@xmlXPathEv
	DD	$LN10@xmlXPathEv
	DD	$LN13@xmlXPathEv
	DD	$LN13@xmlXPathEv
	DD	$LN11@xmlXPathEv
	DD	$LN13@xmlXPathEv
	DD	$LN8@xmlXPathEv
_xmlXPathEvaluatePredicateResult ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathStringEvalNumber
_TEXT	SEGMENT
_fraction$1 = -48					; size = 8
_max$2 = -40						; size = 4
_frac$3 = -36						; size = 4
_v$4 = -32						; size = 4
_is_exponent_negative$ = -28				; size = 4
_exponent$ = -24					; size = 4
_isneg$ = -20						; size = 4
_ok$ = -16						; size = 4
_ret$ = -12						; size = 8
_cur$ = -4						; size = 4
_str$ = 8						; size = 4
_xmlXPathStringEvalNumber PROC				; COMDAT

; 10044: xmlXPathStringEvalNumber(const xmlChar *str) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 10045:     const xmlChar *cur = str;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 10046:     double ret;
; 10047:     int ok = 0;

	mov	DWORD PTR _ok$[ebp], 0

; 10048:     int isneg = 0;

	mov	DWORD PTR _isneg$[ebp], 0

; 10049:     int exponent = 0;

	mov	DWORD PTR _exponent$[ebp], 0

; 10050:     int is_exponent_negative = 0;

	mov	DWORD PTR _is_exponent_negative$[ebp], 0

; 10051: #ifdef __GNUC__
; 10052:     unsigned long tmp = 0;
; 10053:     double temp;
; 10054: #endif
; 10055:     if (cur == NULL) return(0);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN16@xmlXPathSt
	fldz
	jmp	$LN1@xmlXPathSt
$LN16@xmlXPathSt:

; 10056:     while (IS_BLANK_CH(*cur)) cur++;

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN17@xmlXPathSt
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN18@xmlXPathSt
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN17@xmlXPathSt
$LN18@xmlXPathSt:
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN3@xmlXPathSt
$LN17@xmlXPathSt:
	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN16@xmlXPathSt
$LN3@xmlXPathSt:

; 10057:     if ((*cur != '.') && ((*cur < '0') || (*cur > '9')) && (*cur != '-')) {

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	je	SHORT $LN19@xmlXPathSt
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN20@xmlXPathSt
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN19@xmlXPathSt
$LN20@xmlXPathSt:
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 45					; 0000002dH
	je	SHORT $LN19@xmlXPathSt

; 10058:         return(NAN);

	fld	QWORD PTR __real@fff8000000000000
	jmp	$LN1@xmlXPathSt
$LN19@xmlXPathSt:

; 10059:     }
; 10060:     if (*cur == '-') {

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN21@xmlXPathSt

; 10061: 	isneg = 1;

	mov	DWORD PTR _isneg$[ebp], 1

; 10062: 	cur++;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
$LN21@xmlXPathSt:

; 10063:     }
; 10064: 
; 10065: #ifdef __GNUC__
; 10066:     /*
; 10067:      * tmp/temp is a workaround against a gcc compiler bug
; 10068:      * http://veillard.com/gcc.bug
; 10069:      */
; 10070:     ret = 0;
; 10071:     while ((*cur >= '0') && (*cur <= '9')) {
; 10072: 	ret = ret * 10;
; 10073: 	tmp = (*cur - '0');
; 10074: 	ok = 1;
; 10075: 	cur++;
; 10076: 	temp = (double) tmp;
; 10077: 	ret = ret + temp;
; 10078:     }
; 10079: #else
; 10080:     ret = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _ret$[ebp], xmm0
$LN4@xmlXPathSt:

; 10081:     while ((*cur >= '0') && (*cur <= '9')) {

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN5@xmlXPathSt
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN5@xmlXPathSt

; 10082: 	ret = ret * 10 + (*cur - '0');

	movsd	xmm0, QWORD PTR _ret$[ebp]
	mulsd	xmm0, QWORD PTR __real@4024000000000000
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	sub	edx, 48					; 00000030H
	cvtsi2sd xmm1, edx
	addsd	xmm0, xmm1
	movsd	QWORD PTR _ret$[ebp], xmm0

; 10083: 	ok = 1;

	mov	DWORD PTR _ok$[ebp], 1

; 10084: 	cur++;

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax

; 10085:     }

	jmp	SHORT $LN4@xmlXPathSt
$LN5@xmlXPathSt:

; 10086: #endif
; 10087: 
; 10088:     if (*cur == '.') {

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	jne	$LN11@xmlXPathSt

; 10089: 	int v, frac = 0, max;

	mov	DWORD PTR _frac$3[ebp], 0

; 10090: 	double fraction = 0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _fraction$1[ebp], xmm0

; 10091: 
; 10092:         cur++;

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax

; 10093: 	if (((*cur < '0') || (*cur > '9')) && (!ok)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN24@xmlXPathSt
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN23@xmlXPathSt
$LN24@xmlXPathSt:
	cmp	DWORD PTR _ok$[ebp], 0
	jne	SHORT $LN23@xmlXPathSt

; 10094: 	    return(NAN);

	fld	QWORD PTR __real@fff8000000000000
	jmp	$LN1@xmlXPathSt
$LN23@xmlXPathSt:

; 10095: 	}
; 10096:         while (*cur == '0') {

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN7@xmlXPathSt

; 10097: 	    frac = frac + 1;

	mov	ecx, DWORD PTR _frac$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _frac$3[ebp], ecx

; 10098: 	    cur++;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx

; 10099:         }

	jmp	SHORT $LN23@xmlXPathSt
$LN7@xmlXPathSt:

; 10100:         max = frac + MAX_FRAC;

	mov	eax, DWORD PTR _frac$3[ebp]
	add	eax, 20					; 00000014H
	mov	DWORD PTR _max$2[ebp], eax
$LN8@xmlXPathSt:

; 10101: 	while (((*cur >= '0') && (*cur <= '9')) && (frac < max)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN9@xmlXPathSt
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN9@xmlXPathSt
	mov	edx, DWORD PTR _frac$3[ebp]
	cmp	edx, DWORD PTR _max$2[ebp]
	jge	SHORT $LN9@xmlXPathSt

; 10102: 	    v = (*cur - '0');

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	sub	ecx, 48					; 00000030H
	mov	DWORD PTR _v$4[ebp], ecx

; 10103: 	    fraction = fraction * 10 + v;

	movsd	xmm0, QWORD PTR _fraction$1[ebp]
	mulsd	xmm0, QWORD PTR __real@4024000000000000
	cvtsi2sd xmm1, DWORD PTR _v$4[ebp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR _fraction$1[ebp], xmm0

; 10104: 	    frac = frac + 1;

	mov	edx, DWORD PTR _frac$3[ebp]
	add	edx, 1
	mov	DWORD PTR _frac$3[ebp], edx

; 10105: 	    cur++;

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$[ebp], eax

; 10106: 	}

	jmp	SHORT $LN8@xmlXPathSt
$LN9@xmlXPathSt:

; 10107: 	fraction /= pow(10.0, frac);

	movsd	xmm0, QWORD PTR __real@4024000000000000
	cvtsi2sd xmm1, DWORD PTR _frac$3[ebp]
	call	__libm_sse2_pow_precise
	movsd	xmm1, QWORD PTR _fraction$1[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _fraction$1[ebp], xmm1

; 10108: 	ret = ret + fraction;

	movsd	xmm0, QWORD PTR _ret$[ebp]
	addsd	xmm0, QWORD PTR _fraction$1[ebp]
	movsd	QWORD PTR _ret$[ebp], xmm0
$LN10@xmlXPathSt:

; 10109: 	while ((*cur >= '0') && (*cur <= '9'))

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN11@xmlXPathSt
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jg	SHORT $LN11@xmlXPathSt

; 10110: 	    cur++;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN10@xmlXPathSt
$LN11@xmlXPathSt:

; 10111:     }
; 10112:     if ((*cur == 'e') || (*cur == 'E')) {

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 101				; 00000065H
	je	SHORT $LN26@xmlXPathSt
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN13@xmlXPathSt
$LN26@xmlXPathSt:

; 10113:       cur++;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx

; 10114:       if (*cur == '-') {

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN27@xmlXPathSt

; 10115: 	is_exponent_negative = 1;

	mov	DWORD PTR _is_exponent_negative$[ebp], 1

; 10116: 	cur++;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN29@xmlXPathSt
$LN27@xmlXPathSt:

; 10117:       } else if (*cur == '+') {

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN29@xmlXPathSt

; 10118:         cur++;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
$LN29@xmlXPathSt:

; 10119:       }
; 10120:       while ((*cur >= '0') && (*cur <= '9')) {

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN13@xmlXPathSt
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 57					; 00000039H
	jg	SHORT $LN13@xmlXPathSt

; 10121:         if (exponent < 1000000)

	cmp	DWORD PTR _exponent$[ebp], 1000000	; 000f4240H
	jge	SHORT $LN30@xmlXPathSt

; 10122: 	  exponent = exponent * 10 + (*cur - '0');

	imul	eax, DWORD PTR _exponent$[ebp], 10
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	lea	eax, DWORD PTR [eax+edx-48]
	mov	DWORD PTR _exponent$[ebp], eax
$LN30@xmlXPathSt:

; 10123: 	cur++;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx

; 10124:       }

	jmp	SHORT $LN29@xmlXPathSt
$LN13@xmlXPathSt:

; 10125:     }
; 10126:     while (IS_BLANK_CH(*cur)) cur++;

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN31@xmlXPathSt
	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN32@xmlXPathSt
	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN31@xmlXPathSt
$LN32@xmlXPathSt:
	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	jne	SHORT $LN15@xmlXPathSt
$LN31@xmlXPathSt:
	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN13@xmlXPathSt
$LN15@xmlXPathSt:

; 10127:     if (*cur != 0) return(NAN);

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN33@xmlXPathSt
	fld	QWORD PTR __real@fff8000000000000
	jmp	SHORT $LN1@xmlXPathSt
$LN33@xmlXPathSt:

; 10128:     if (isneg) ret = -ret;

	cmp	DWORD PTR _isneg$[ebp], 0
	je	SHORT $LN34@xmlXPathSt
	movsd	xmm0, QWORD PTR _ret$[ebp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR _ret$[ebp], xmm0
$LN34@xmlXPathSt:

; 10129:     if (is_exponent_negative) exponent = -exponent;

	cmp	DWORD PTR _is_exponent_negative$[ebp], 0
	je	SHORT $LN35@xmlXPathSt
	mov	ecx, DWORD PTR _exponent$[ebp]
	neg	ecx
	mov	DWORD PTR _exponent$[ebp], ecx
$LN35@xmlXPathSt:

; 10130:     ret *= pow(10.0, (double)exponent);

	movsd	xmm0, QWORD PTR __real@4024000000000000
	cvtsi2sd xmm1, DWORD PTR _exponent$[ebp]
	call	__libm_sse2_pow_precise
	mulsd	xmm0, QWORD PTR _ret$[ebp]
	movsd	QWORD PTR _ret$[ebp], xmm0

; 10131:     return(ret);

	fld	QWORD PTR _ret$[ebp]
$LN1@xmlXPathSt:

; 10132: }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathStringEvalNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathParseNCName
_TEXT	SEGMENT
_count$ = -12						; size = 4
_ret$ = -8						; size = 4
_in$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathParseNCName PROC				; COMDAT

; 9838 : xmlXPathParseNCName(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9839 :     const xmlChar *in;
; 9840 :     xmlChar *ret;
; 9841 :     int count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 9842 : 
; 9843 :     if ((ctxt == NULL) || (ctxt->cur == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@xmlXPathPa
$LN5@xmlXPathPa:
	xor	eax, eax
	jmp	$LN1@xmlXPathPa
$LN4@xmlXPathPa:

; 9844 :     /*
; 9845 :      * Accelerator for simple ASCII names
; 9846 :      */
; 9847 :     in = ctxt->cur;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _in$[ebp], edx

; 9848 :     if (((*in >= 0x61) && (*in <= 0x7A)) ||
; 9849 : 	((*in >= 0x41) && (*in <= 0x5A)) ||

	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN8@xmlXPathPa
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 122				; 0000007aH
	jle	SHORT $LN7@xmlXPathPa
$LN8@xmlXPathPa:
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN9@xmlXPathPa
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 90					; 0000005aH
	jle	SHORT $LN7@xmlXPathPa
$LN9@xmlXPathPa:
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 95					; 0000005fH
	jne	$LN6@xmlXPathPa
$LN7@xmlXPathPa:

; 9850 : 	(*in == '_')) {
; 9851 : 	in++;

	mov	ecx, DWORD PTR _in$[ebp]
	add	ecx, 1
	mov	DWORD PTR _in$[ebp], ecx
$LN2@xmlXPathPa:

; 9852 : 	while (((*in >= 0x61) && (*in <= 0x7A)) ||
; 9853 : 	       ((*in >= 0x41) && (*in <= 0x5A)) ||
; 9854 : 	       ((*in >= 0x30) && (*in <= 0x39)) ||
; 9855 : 	       (*in == '_') || (*in == '.') ||

	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN11@xmlXPathPa
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 122				; 0000007aH
	jle	SHORT $LN10@xmlXPathPa
$LN11@xmlXPathPa:
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN12@xmlXPathPa
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 90					; 0000005aH
	jle	SHORT $LN10@xmlXPathPa
$LN12@xmlXPathPa:
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 48					; 00000030H
	jl	SHORT $LN13@xmlXPathPa
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 57					; 00000039H
	jle	SHORT $LN10@xmlXPathPa
$LN13@xmlXPathPa:
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN10@xmlXPathPa
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	je	SHORT $LN10@xmlXPathPa
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	jne	SHORT $LN3@xmlXPathPa
$LN10@xmlXPathPa:

; 9856 : 	       (*in == '-'))
; 9857 : 	    in++;

	mov	edx, DWORD PTR _in$[ebp]
	add	edx, 1
	mov	DWORD PTR _in$[ebp], edx
	jmp	SHORT $LN2@xmlXPathPa
$LN3@xmlXPathPa:

; 9858 : 	if ((*in == ' ') || (*in == '>') || (*in == '/') ||
; 9859 :             (*in == '[') || (*in == ']') || (*in == ':') ||
; 9860 :             (*in == '@') || (*in == '*')) {

	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN15@xmlXPathPa
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 62					; 0000003eH
	je	SHORT $LN15@xmlXPathPa
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 47					; 0000002fH
	je	SHORT $LN15@xmlXPathPa
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 91					; 0000005bH
	je	SHORT $LN15@xmlXPathPa
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 93					; 0000005dH
	je	SHORT $LN15@xmlXPathPa
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 58					; 0000003aH
	je	SHORT $LN15@xmlXPathPa
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 64					; 00000040H
	je	SHORT $LN15@xmlXPathPa
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN6@xmlXPathPa
$LN15@xmlXPathPa:

; 9861 : 	    count = in - ctxt->cur;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	DWORD PTR _count$[ebp], edx

; 9862 : 	    if (count == 0)

	jne	SHORT $LN16@xmlXPathPa

; 9863 : 		return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPa
$LN16@xmlXPathPa:

; 9864 : 	    ret = xmlStrndup(ctxt->cur, count);

	mov	eax, DWORD PTR _count$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 9865 : 	    ctxt->cur = in;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [eax], ecx

; 9866 : 	    return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN1@xmlXPathPa
$LN6@xmlXPathPa:

; 9867 : 	}
; 9868 :     }
; 9869 :     return(xmlXPathParseNameComplex(ctxt, 0));

	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathParseNameComplex
	add	esp, 8
$LN1@xmlXPathPa:

; 9870 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathParseNCName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathParseName
_TEXT	SEGMENT
_count$ = -12						; size = 4
_ret$ = -8						; size = 4
_in$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathParseName PROC					; COMDAT

; 9919 : xmlXPathParseName(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 9920 :     const xmlChar *in;
; 9921 :     xmlChar *ret;
; 9922 :     size_t count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 9923 : 
; 9924 :     if ((ctxt == NULL) || (ctxt->cur == NULL)) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlXPathPa
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@xmlXPathPa
$LN5@xmlXPathPa:
	xor	eax, eax
	jmp	$LN1@xmlXPathPa
$LN4@xmlXPathPa:

; 9925 :     /*
; 9926 :      * Accelerator for simple ASCII names
; 9927 :      */
; 9928 :     in = ctxt->cur;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _in$[ebp], edx

; 9929 :     if (((*in >= 0x61) && (*in <= 0x7A)) ||
; 9930 : 	((*in >= 0x41) && (*in <= 0x5A)) ||
; 9931 : 	(*in == '_') || (*in == ':')) {

	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 97					; 00000061H
	jl	SHORT $LN8@xmlXPathPa
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 122				; 0000007aH
	jle	SHORT $LN7@xmlXPathPa
$LN8@xmlXPathPa:
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN9@xmlXPathPa
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 90					; 0000005aH
	jle	SHORT $LN7@xmlXPathPa
$LN9@xmlXPathPa:
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN7@xmlXPathPa
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 58					; 0000003aH
	jne	$LN6@xmlXPathPa
$LN7@xmlXPathPa:

; 9932 : 	in++;

	mov	eax, DWORD PTR _in$[ebp]
	add	eax, 1
	mov	DWORD PTR _in$[ebp], eax
$LN2@xmlXPathPa:

; 9933 : 	while (((*in >= 0x61) && (*in <= 0x7A)) ||
; 9934 : 	       ((*in >= 0x41) && (*in <= 0x5A)) ||
; 9935 : 	       ((*in >= 0x30) && (*in <= 0x39)) ||
; 9936 : 	       (*in == '_') || (*in == '-') ||
; 9937 : 	       (*in == ':') || (*in == '.'))

	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 97					; 00000061H
	jl	SHORT $LN11@xmlXPathPa
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 122				; 0000007aH
	jle	SHORT $LN10@xmlXPathPa
$LN11@xmlXPathPa:
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN12@xmlXPathPa
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 90					; 0000005aH
	jle	SHORT $LN10@xmlXPathPa
$LN12@xmlXPathPa:
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN13@xmlXPathPa
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN10@xmlXPathPa
$LN13@xmlXPathPa:
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 95					; 0000005fH
	je	SHORT $LN10@xmlXPathPa
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 45					; 0000002dH
	je	SHORT $LN10@xmlXPathPa
	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN10@xmlXPathPa
	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 46					; 0000002eH
	jne	SHORT $LN3@xmlXPathPa
$LN10@xmlXPathPa:

; 9938 : 	    in++;

	mov	eax, DWORD PTR _in$[ebp]
	add	eax, 1
	mov	DWORD PTR _in$[ebp], eax
	jmp	SHORT $LN2@xmlXPathPa
$LN3@xmlXPathPa:

; 9939 : 	if ((*in > 0) && (*in < 0x80)) {

	mov	ecx, DWORD PTR _in$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jle	SHORT $LN6@xmlXPathPa
	mov	eax, DWORD PTR _in$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 128				; 00000080H
	jge	SHORT $LN6@xmlXPathPa

; 9940 : 	    count = in - ctxt->cur;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _in$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _count$[ebp], eax

; 9941 :             if (count > XML_MAX_NAME_LENGTH) {

	cmp	DWORD PTR _count$[ebp], 50000		; 0000c350H
	jbe	SHORT $LN15@xmlXPathPa

; 9942 :                 ctxt->cur = in;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [ecx], edx

; 9943 :                 XP_ERRORNULL(XPATH_EXPR_ERROR);

	push	7
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErr
	add	esp, 8
	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPa
$LN15@xmlXPathPa:

; 9944 :             }
; 9945 : 	    ret = xmlStrndup(ctxt->cur, count);

	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 9946 : 	    ctxt->cur = in;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _in$[ebp]
	mov	DWORD PTR [ecx], edx

; 9947 : 	    return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN1@xmlXPathPa
$LN6@xmlXPathPa:

; 9948 : 	}
; 9949 :     }
; 9950 :     return(xmlXPathParseNameComplex(ctxt, 1));

	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathParseNameComplex
	add	esp, 8
$LN1@xmlXPathPa:

; 9951 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathParseName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEvalExpr
_TEXT	SEGMENT
_comp$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathEvalExpr PROC					; COMDAT

; 14816: xmlXPathEvalExpr(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14817: #ifdef XPATH_STREAMING
; 14818:     xmlXPathCompExprPtr comp;
; 14819: #endif
; 14820: 
; 14821:     if (ctxt == NULL) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathEv
	jmp	$LN1@xmlXPathEv
$LN2@xmlXPathEv:

; 14822: 
; 14823: #ifdef XPATH_STREAMING
; 14824:     comp = xmlXPathTryStreamCompile(ctxt->context, ctxt->base);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathTryStreamCompile
	add	esp, 8
	mov	DWORD PTR _comp$[ebp], eax

; 14825:     if (comp != NULL) {

	cmp	DWORD PTR _comp$[ebp], 0
	je	SHORT $LN3@xmlXPathEv

; 14826:         if (ctxt->comp != NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN5@xmlXPathEv

; 14827: 	    xmlXPathFreeCompExpr(ctxt->comp);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlXPathFreeCompExpr
	add	esp, 4
$LN5@xmlXPathEv:

; 14828:         ctxt->comp = comp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _comp$[ebp]
	mov	DWORD PTR [ecx+32], edx

; 14829:     } else

	jmp	SHORT $LN4@xmlXPathEv
$LN3@xmlXPathEv:

; 14830: #endif
; 14831:     {
; 14832: 	xmlXPathCompileExpr(ctxt, 1);

	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCompileExpr
	add	esp, 8

; 14833:         CHECK_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN6@xmlXPathEv
	jmp	SHORT $LN1@xmlXPathEv
$LN6@xmlXPathEv:

; 14834: 
; 14835:         /* Check for trailing characters. */
; 14836:         if (*ctxt->cur != 0)

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN7@xmlXPathEv

; 14837:             XP_ERROR(XPATH_EXPR_ERROR);

	push	7
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathErr
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathEv
$LN7@xmlXPathEv:

; 14838: 
; 14839: 	if ((ctxt->comp->nbStep > 1) && (ctxt->comp->last >= 0))

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx], 1
	jle	SHORT $LN4@xmlXPathEv
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	DWORD PTR [eax+12], 0
	jl	SHORT $LN4@xmlXPathEv

; 14840: 	    xmlXPathOptimizeExpression(ctxt->comp,

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	imul	eax, DWORD PTR [ecx+12], 40
	add	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlXPathOptimizeExpression
	add	esp, 8
$LN4@xmlXPathEv:

; 14841: 		&ctxt->comp->steps[ctxt->comp->last]);
; 14842:     }
; 14843: 
; 14844:     xmlXPathRunEval(ctxt, 0);

	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRunEval
	add	esp, 8
$LN1@xmlXPathEv:

; 14845: }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathEvalExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRoot
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_xmlXPathRoot PROC					; COMDAT

; 8477 : xmlXPathRoot(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 8478 :     if ((ctxt == NULL) || (ctxt->context == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathRo
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN2@xmlXPathRo
$LN3@xmlXPathRo:

; 8479 : 	return;

	jmp	SHORT $LN1@xmlXPathRo
$LN2@xmlXPathRo:

; 8480 :     valuePush(ctxt, xmlXPathCacheNewNodeSet(ctxt->context,

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathCacheNewNodeSet
	add	esp, 8
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePush
	add	esp, 8
$LN1@xmlXPathRo:

; 8481 : 	(xmlNodePtr) ctxt->context->doc));
; 8482 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRoot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetSort
_TEXT	SEGMENT
_set$ = 8						; size = 4
_xmlXPathNodeSetSort PROC				; COMDAT

; 3416 : xmlXPathNodeSetSort(xmlNodeSetPtr set) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3417 : #ifndef WITH_TIM_SORT
; 3418 :     int i, j, incr, len;
; 3419 :     xmlNodePtr tmp;
; 3420 : #endif
; 3421 : 
; 3422 :     if (set == NULL)

	cmp	DWORD PTR _set$[ebp], 0
	jne	SHORT $LN2@xmlXPathNo

; 3423 : 	return;

	jmp	SHORT $LN1@xmlXPathNo
$LN2@xmlXPathNo:

; 3424 : 
; 3425 : #ifndef WITH_TIM_SORT
; 3426 :     /*
; 3427 :      * Use the old Shell's sort implementation to sort the node-set
; 3428 :      * Timsort ought to be quite faster
; 3429 :      */
; 3430 :     len = set->nodeNr;
; 3431 :     for (incr = len / 2; incr > 0; incr /= 2) {
; 3432 : 	for (i = incr; i < len; i++) {
; 3433 : 	    j = i - incr;
; 3434 : 	    while (j >= 0) {
; 3435 : #ifdef XP_OPTIMIZED_NON_ELEM_COMPARISON
; 3436 : 		if (xmlXPathCmpNodesExt(set->nodeTab[j],
; 3437 : 			set->nodeTab[j + incr]) == -1)
; 3438 : #else
; 3439 : 		if (xmlXPathCmpNodes(set->nodeTab[j],
; 3440 : 			set->nodeTab[j + incr]) == -1)
; 3441 : #endif
; 3442 : 		{
; 3443 : 		    tmp = set->nodeTab[j];
; 3444 : 		    set->nodeTab[j] = set->nodeTab[j + incr];
; 3445 : 		    set->nodeTab[j + incr] = tmp;
; 3446 : 		    j -= incr;
; 3447 : 		} else
; 3448 : 		    break;
; 3449 : 	    }
; 3450 : 	}
; 3451 :     }
; 3452 : #else /* WITH_TIM_SORT */
; 3453 :     libxml_domnode_tim_sort(set->nodeTab, set->nodeNr);

	mov	eax, DWORD PTR _set$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _set$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_libxml_domnode_tim_sort
	add	esp, 8
$LN1@xmlXPathNo:

; 3454 : #endif /* WITH_TIM_SORT */
; 3455 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNodeSetSort ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetAddNs
_TEXT	SEGMENT
_temp$1 = -8						; size = 4
_i$ = -4						; size = 4
_cur$ = 8						; size = 4
_node$ = 12						; size = 4
_ns$ = 16						; size = 4
_xmlXPathNodeSetAddNs PROC				; COMDAT

; 3637 : xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr node, xmlNsPtr ns) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3638 :     int i;
; 3639 : 
; 3640 : 
; 3641 :     if ((cur == NULL) || (ns == NULL) || (node == NULL) ||
; 3642 :         (ns->type != XML_NAMESPACE_DECL) ||

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@xmlXPathNo
	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN6@xmlXPathNo
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN6@xmlXPathNo
	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlXPathNo
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	je	SHORT $LN5@xmlXPathNo
$LN6@xmlXPathNo:

; 3643 : 	(node->type != XML_ELEMENT_NODE))
; 3644 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathNo
$LN5@xmlXPathNo:

; 3645 : 
; 3646 :     /* @@ with_ns to check whether namespace nodes should be looked at @@ */
; 3647 :     /*
; 3648 :      * prevent duplicates
; 3649 :      */
; 3650 :     for (i = 0;i < cur->nodeNr;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@xmlXPathNo:
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN3@xmlXPathNo

; 3651 :         if ((cur->nodeTab[i] != NULL) &&
; 3652 : 	    (cur->nodeTab[i]->type == XML_NAMESPACE_DECL) &&
; 3653 : 	    (((xmlNsPtr)cur->nodeTab[i])->next == (xmlNsPtr) node) &&

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN7@xmlXPathNo
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN7@xmlXPathNo
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _node$[ebp]
	jne	SHORT $LN7@xmlXPathNo
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@xmlXPathNo

; 3654 : 	    (xmlStrEqual(ns->prefix, ((xmlNsPtr)cur->nodeTab[i])->prefix)))
; 3655 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN7@xmlXPathNo:

; 3656 :     }

	jmp	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 3657 : 
; 3658 :     /*
; 3659 :      * grow the nodeTab if needed
; 3660 :      */
; 3661 :     if (cur->nodeMax == 0) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@xmlXPathNo

; 3662 :         cur->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 3663 : 					     sizeof(xmlNodePtr));
; 3664 : 	if (cur->nodeTab == NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN10@xmlXPathNo

; 3665 : 	    xmlXPathErrMemory(NULL, "growing nodeset\n");

	push	OFFSET ??_C@_0BB@HLDFGIFL@growing?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3666 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathNo
$LN10@xmlXPathNo:

; 3667 : 	}
; 3668 : 	memset(cur->nodeTab, 0 ,

	xor	eax, eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], eax
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], eax
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR [edx+28], eax
	mov	DWORD PTR [edx+32], eax
	mov	DWORD PTR [edx+36], eax

; 3669 : 	       XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
; 3670 :         cur->nodeMax = XML_NODESET_DEFAULT;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+4], 10			; 0000000aH
	jmp	$LN9@xmlXPathNo
$LN8@xmlXPathNo:

; 3671 :     } else if (cur->nodeNr == cur->nodeMax) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN9@xmlXPathNo

; 3672 :         xmlNodePtr *temp;
; 3673 : 
; 3674 :         if (cur->nodeMax >= XPATH_MAX_NODESET_LENGTH) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 10000000		; 00989680H
	jl	SHORT $LN12@xmlXPathNo

; 3675 :             xmlXPathErrMemory(NULL, "growing nodeset hit limit\n");

	push	OFFSET ??_C@_0BL@JKBEHGK@growing?5nodeset?5hit?5limit?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3676 :             return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathNo
$LN12@xmlXPathNo:

; 3677 :         }
; 3678 : 	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 1
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _temp$1[ebp], eax

; 3679 : 				      sizeof(xmlNodePtr));
; 3680 : 	if (temp == NULL) {

	cmp	DWORD PTR _temp$1[ebp], 0
	jne	SHORT $LN13@xmlXPathNo

; 3681 : 	    xmlXPathErrMemory(NULL, "growing nodeset\n");

	push	OFFSET ??_C@_0BB@HLDFGIFL@growing?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3682 : 	    return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathNo
$LN13@xmlXPathNo:

; 3683 : 	}
; 3684 :         cur->nodeMax *= 2;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], ecx

; 3685 : 	cur->nodeTab = temp;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _temp$1[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN9@xmlXPathNo:

; 3686 :     }
; 3687 :     cur->nodeTab[cur->nodeNr++] = xmlXPathNodeSetDupNs(node, ns);

	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	_xmlXPathNodeSetDupNs
	add	esp, 8
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], eax

; 3688 :     return(0);

	xor	eax, eax
$LN1@xmlXPathNo:

; 3689 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetAddNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetAddUnique
_TEXT	SEGMENT
_ns$1 = -8						; size = 4
_temp$2 = -4						; size = 4
_cur$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathNodeSetAddUnique PROC				; COMDAT

; 3763 : xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3764 :     if ((cur == NULL) || (val == NULL)) return(-1);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlXPathNo
	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:
	or	eax, -1
	jmp	$LN1@xmlXPathNo
$LN2@xmlXPathNo:

; 3765 : 
; 3766 :     /* @@ with_ns to check whether namespace nodes should be looked at @@ */
; 3767 :     /*
; 3768 :      * grow the nodeTab if needed
; 3769 :      */
; 3770 :     if (cur->nodeMax == 0) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN4@xmlXPathNo

; 3771 :         cur->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 3772 : 					     sizeof(xmlNodePtr));
; 3773 : 	if (cur->nodeTab == NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN6@xmlXPathNo

; 3774 : 	    xmlXPathErrMemory(NULL, "growing nodeset\n");

	push	OFFSET ??_C@_0BB@HLDFGIFL@growing?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3775 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathNo
$LN6@xmlXPathNo:

; 3776 : 	}
; 3777 : 	memset(cur->nodeTab, 0 ,

	xor	eax, eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], eax
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], eax
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], eax
	mov	DWORD PTR [edx+24], eax
	mov	DWORD PTR [edx+28], eax
	mov	DWORD PTR [edx+32], eax
	mov	DWORD PTR [edx+36], eax

; 3778 : 	       XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
; 3779 :         cur->nodeMax = XML_NODESET_DEFAULT;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+4], 10			; 0000000aH
	jmp	$LN5@xmlXPathNo
$LN4@xmlXPathNo:

; 3780 :     } else if (cur->nodeNr == cur->nodeMax) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx+4]
	jne	SHORT $LN5@xmlXPathNo

; 3781 :         xmlNodePtr *temp;
; 3782 : 
; 3783 :         if (cur->nodeMax >= XPATH_MAX_NODESET_LENGTH) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 10000000		; 00989680H
	jl	SHORT $LN8@xmlXPathNo

; 3784 :             xmlXPathErrMemory(NULL, "growing nodeset hit limit\n");

	push	OFFSET ??_C@_0BL@JKBEHGK@growing?5nodeset?5hit?5limit?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3785 :             return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathNo
$LN8@xmlXPathNo:

; 3786 :         }
; 3787 : 	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 1
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _temp$2[ebp], eax

; 3788 : 				      sizeof(xmlNodePtr));
; 3789 : 	if (temp == NULL) {

	cmp	DWORD PTR _temp$2[ebp], 0
	jne	SHORT $LN9@xmlXPathNo

; 3790 : 	    xmlXPathErrMemory(NULL, "growing nodeset\n");

	push	OFFSET ??_C@_0BB@HLDFGIFL@growing?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3791 : 	    return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathNo
$LN9@xmlXPathNo:

; 3792 : 	}
; 3793 : 	cur->nodeTab = temp;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR [eax+8], ecx

; 3794 :         cur->nodeMax *= 2;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 1
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN5@xmlXPathNo:

; 3795 :     }
; 3796 :     if (val->type == XML_NAMESPACE_DECL) {

	mov	edx, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN10@xmlXPathNo

; 3797 : 	xmlNsPtr ns = (xmlNsPtr) val;

	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR _ns$1[ebp], eax

; 3798 : 
; 3799 : 	cur->nodeTab[cur->nodeNr++] =

	mov	ecx, DWORD PTR _ns$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_xmlXPathNodeSetDupNs
	add	esp, 8
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [ecx+8]
	mov	DWORD PTR [ecx+edx*4], eax
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], eax

; 3800 : 	    xmlXPathNodeSetDupNs((xmlNodePtr) ns->next, ns);
; 3801 :     } else

	jmp	SHORT $LN11@xmlXPathNo
$LN10@xmlXPathNo:

; 3802 : 	cur->nodeTab[cur->nodeNr++] = val;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], eax
$LN11@xmlXPathNo:

; 3803 :     return(0);

	xor	eax, eax
$LN1@xmlXPathNo:

; 3804 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetAddUnique ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetAdd
_TEXT	SEGMENT
_ns$1 = -12						; size = 4
_temp$2 = -8						; size = 4
_i$ = -4						; size = 4
_cur$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathNodeSetAdd PROC				; COMDAT

; 3701 : xmlXPathNodeSetAdd(xmlNodeSetPtr cur, xmlNodePtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3702 :     int i;
; 3703 : 
; 3704 :     if ((cur == NULL) || (val == NULL)) return(-1);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@xmlXPathNo
	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN5@xmlXPathNo
$LN6@xmlXPathNo:
	or	eax, -1
	jmp	$LN1@xmlXPathNo
$LN5@xmlXPathNo:

; 3705 : 
; 3706 :     /* @@ with_ns to check whether namespace nodes should be looked at @@ */
; 3707 :     /*
; 3708 :      * prevent duplicates
; 3709 :      */
; 3710 :     for (i = 0;i < cur->nodeNr;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathNo:
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN3@xmlXPathNo

; 3711 :         if (cur->nodeTab[i] == val) return(0);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	cmp	eax, DWORD PTR _val$[ebp]
	jne	SHORT $LN7@xmlXPathNo
	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN7@xmlXPathNo:
	jmp	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 3712 : 
; 3713 :     /*
; 3714 :      * grow the nodeTab if needed
; 3715 :      */
; 3716 :     if (cur->nodeMax == 0) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN8@xmlXPathNo

; 3717 :         cur->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+8], eax

; 3718 : 					     sizeof(xmlNodePtr));
; 3719 : 	if (cur->nodeTab == NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN10@xmlXPathNo

; 3720 : 	    xmlXPathErrMemory(NULL, "growing nodeset\n");

	push	OFFSET ??_C@_0BB@HLDFGIFL@growing?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3721 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathNo
$LN10@xmlXPathNo:

; 3722 : 	}
; 3723 : 	memset(cur->nodeTab, 0 ,

	xor	ecx, ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], ecx
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], ecx
	mov	DWORD PTR [eax+24], ecx
	mov	DWORD PTR [eax+28], ecx
	mov	DWORD PTR [eax+32], ecx
	mov	DWORD PTR [eax+36], ecx

; 3724 : 	       XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
; 3725 :         cur->nodeMax = XML_NODESET_DEFAULT;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], 10			; 0000000aH
	jmp	$LN9@xmlXPathNo
$LN8@xmlXPathNo:

; 3726 :     } else if (cur->nodeNr == cur->nodeMax) {

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN9@xmlXPathNo

; 3727 :         xmlNodePtr *temp;
; 3728 : 
; 3729 :         if (cur->nodeMax >= XPATH_MAX_NODESET_LENGTH) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 10000000		; 00989680H
	jl	SHORT $LN12@xmlXPathNo

; 3730 :             xmlXPathErrMemory(NULL, "growing nodeset hit limit\n");

	push	OFFSET ??_C@_0BL@JKBEHGK@growing?5nodeset?5hit?5limit?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3731 :             return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathNo
$LN12@xmlXPathNo:

; 3732 :         }
; 3733 : 	temp = (xmlNodePtr *) xmlRealloc(cur->nodeTab, cur->nodeMax * 2 *

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 1
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _temp$2[ebp], eax

; 3734 : 				      sizeof(xmlNodePtr));
; 3735 : 	if (temp == NULL) {

	cmp	DWORD PTR _temp$2[ebp], 0
	jne	SHORT $LN13@xmlXPathNo

; 3736 : 	    xmlXPathErrMemory(NULL, "growing nodeset\n");

	push	OFFSET ??_C@_0BB@HLDFGIFL@growing?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3737 : 	    return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathNo
$LN13@xmlXPathNo:

; 3738 : 	}
; 3739 :         cur->nodeMax *= 2;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 1
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+4], edx

; 3740 : 	cur->nodeTab = temp;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _temp$2[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN9@xmlXPathNo:

; 3741 :     }
; 3742 :     if (val->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN14@xmlXPathNo

; 3743 : 	xmlNsPtr ns = (xmlNsPtr) val;

	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _ns$1[ebp], ecx

; 3744 : 
; 3745 : 	cur->nodeTab[cur->nodeNr++] =

	mov	edx, DWORD PTR _ns$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ns$1[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlXPathNodeSetDupNs
	add	esp, 8
	mov	edx, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], ecx

; 3746 : 	    xmlXPathNodeSetDupNs((xmlNodePtr) ns->next, ns);
; 3747 :     } else

	jmp	SHORT $LN15@xmlXPathNo
$LN14@xmlXPathNo:

; 3748 : 	cur->nodeTab[cur->nodeNr++] = val;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], ecx
$LN15@xmlXPathNo:

; 3749 :     return(0);

	xor	eax, eax
$LN1@xmlXPathNo:

; 3750 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewValueTree
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathNewValueTree PROC				; COMDAT

; 4367 : xmlXPathNewValueTree(xmlNodePtr val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4368 :     xmlXPathObjectPtr ret;
; 4369 : 
; 4370 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 4371 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 4372 :         xmlXPathErrMemory(NULL, "creating result value tree\n");

	push	OFFSET ??_C@_0BM@FFJIGPKH@creating?5result?5value?5tree?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 4373 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 4374 :     }
; 4375 :     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 4376 :     ret->type = XPATH_XSLT_TREE;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 9

; 4377 :     ret->boolval = 1;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], 1

; 4378 :     ret->user = (void *) val;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 4379 :     ret->nodesetval = xmlXPathNodeSetCreate(val);

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 4380 : #ifdef XP_DEBUG_OBJ_USAGE
; 4381 :     xmlXPathDebugObjUsageRequested(NULL, XPATH_XSLT_TREE);
; 4382 : #endif
; 4383 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNe:

; 4384 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewValueTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewNodeSet
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathNewNodeSet PROC				; COMDAT

; 4338 : xmlXPathNewNodeSet(xmlNodePtr val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4339 :     xmlXPathObjectPtr ret;
; 4340 : 
; 4341 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 4342 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 4343 :         xmlXPathErrMemory(NULL, "creating nodeset\n");

	push	OFFSET ??_C@_0BC@LBLPMNCN@creating?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 4344 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 4345 :     }
; 4346 :     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 4347 :     ret->type = XPATH_NODESET;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 1

; 4348 :     ret->boolval = 0;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], 0

; 4349 :     ret->nodesetval = xmlXPathNodeSetCreate(val);

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 4350 :     /* @@ with_ns to check whether namespace nodes should be looked at @@ */
; 4351 : #ifdef XP_DEBUG_OBJ_USAGE
; 4352 :     xmlXPathDebugObjUsageRequested(NULL, XPATH_NODESET);
; 4353 : #endif
; 4354 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNe:

; 4355 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewNodeSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewBoolean
_TEXT	SEGMENT
tv75 = -8						; size = 4
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathNewBoolean PROC				; COMDAT

; 5256 : xmlXPathNewBoolean(int val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5257 :     xmlXPathObjectPtr ret;
; 5258 : 
; 5259 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 5260 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 5261 :         xmlXPathErrMemory(NULL, "creating boolean object\n");

	push	OFFSET ??_C@_0BJ@ECLOGIHC@creating?5boolean?5object?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 5262 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 5263 :     }
; 5264 :     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 5265 :     ret->type = XPATH_BOOLEAN;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 2

; 5266 :     ret->boolval = (val != 0);

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN4@xmlXPathNe
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN5@xmlXPathNe
$LN4@xmlXPathNe:
	mov	DWORD PTR tv75[ebp], 0
$LN5@xmlXPathNe:
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR [edx+8], eax

; 5267 : #ifdef XP_DEBUG_OBJ_USAGE
; 5268 :     xmlXPathDebugObjUsageRequested(NULL, XPATH_BOOLEAN);
; 5269 : #endif
; 5270 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNe:

; 5271 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewFloat
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 8
_xmlXPathNewFloat PROC					; COMDAT

; 5230 : xmlXPathNewFloat(double val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5231 :     xmlXPathObjectPtr ret;
; 5232 : 
; 5233 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 5234 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 5235 :         xmlXPathErrMemory(NULL, "creating float object\n");

	push	OFFSET ??_C@_0BH@FGBKIIOK@creating?5float?5object?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 5236 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 5237 :     }
; 5238 :     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 5239 :     ret->type = XPATH_NUMBER;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 3

; 5240 :     ret->floatval = val;

	mov	edx, DWORD PTR _ret$[ebp]
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [edx+16], xmm0

; 5241 : #ifdef XP_DEBUG_OBJ_USAGE
; 5242 :     xmlXPathDebugObjUsageRequested(NULL, XPATH_NUMBER);
; 5243 : #endif
; 5244 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNe:

; 5245 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewFloat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathWrapCString
_TEXT	SEGMENT
_val$ = 8						; size = 4
_xmlXPathWrapCString PROC				; COMDAT

; 5363 : xmlXPathWrapCString (char * val) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5364 :     return(xmlXPathWrapString((xmlChar *)(val)));

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_xmlXPathWrapString
	add	esp, 4

; 5365 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathWrapCString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathWrapString
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathWrapString PROC				; COMDAT

; 5311 : xmlXPathWrapString (xmlChar *val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5312 :     xmlXPathObjectPtr ret;
; 5313 : 
; 5314 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 5315 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathWr

; 5316 :         xmlXPathErrMemory(NULL, "creating string object\n");

	push	OFFSET ??_C@_0BI@BJAGDAFP@creating?5string?5object?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 5317 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathWr
$LN2@xmlXPathWr:

; 5318 :     }
; 5319 :     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 5320 :     ret->type = XPATH_STRING;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 4

; 5321 :     ret->stringval = val;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _val$[ebp]
	mov	DWORD PTR [edx+24], eax

; 5322 : #ifdef XP_DEBUG_OBJ_USAGE
; 5323 :     xmlXPathDebugObjUsageRequested(NULL, XPATH_STRING);
; 5324 : #endif
; 5325 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathWr:

; 5326 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathWrapString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewCString
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathNewCString PROC				; COMDAT

; 5337 : xmlXPathNewCString(const char *val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5338 :     xmlXPathObjectPtr ret;
; 5339 : 
; 5340 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 5341 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 5342 :         xmlXPathErrMemory(NULL, "creating string object\n");

	push	OFFSET ??_C@_0BI@BJAGDAFP@creating?5string?5object?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 5343 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 5344 :     }
; 5345 :     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 5346 :     ret->type = XPATH_STRING;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 4

; 5347 :     ret->stringval = xmlStrdup(BAD_CAST val);

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 5348 : #ifdef XP_DEBUG_OBJ_USAGE
; 5349 :     xmlXPathDebugObjUsageRequested(NULL, XPATH_STRING);
; 5350 : #endif
; 5351 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNe:

; 5352 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewCString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewString
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathNewString PROC					; COMDAT

; 5282 : xmlXPathNewString(const xmlChar *val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5283 :     xmlXPathObjectPtr ret;
; 5284 : 
; 5285 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 5286 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 5287 :         xmlXPathErrMemory(NULL, "creating string object\n");

	push	OFFSET ??_C@_0BI@BJAGDAFP@creating?5string?5object?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 5288 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 5289 :     }
; 5290 :     memset(ret, 0 , (size_t) sizeof(xmlXPathObject));

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 5291 :     ret->type = XPATH_STRING;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 4

; 5292 :     if (val != NULL)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN3@xmlXPathNe

; 5293 : 	ret->stringval = xmlStrdup(val);

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], eax
	jmp	SHORT $LN4@xmlXPathNe
$LN3@xmlXPathNe:

; 5294 :     else
; 5295 : 	ret->stringval = xmlStrdup((const xmlChar *)"");

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN4@xmlXPathNe:

; 5296 : #ifdef XP_DEBUG_OBJ_USAGE
; 5297 :     xmlXPathDebugObjUsageRequested(NULL, XPATH_STRING);
; 5298 : #endif
; 5299 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNe:

; 5300 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _valuePush
_TEXT	SEGMENT
tv130 = -8						; size = 4
_tmp$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_value$ = 12						; size = 4
_valuePush PROC						; COMDAT

; 2851 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2852 :     if ((ctxt == NULL) || (value == NULL)) return(-1);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@valuePush
	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN2@valuePush
$LN3@valuePush:
	or	eax, -1
	jmp	$LN1@valuePush
$LN2@valuePush:

; 2853 :     if (ctxt->valueNr >= ctxt->valueMax) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+24]
	jl	$LN4@valuePush

; 2854 :         xmlXPathObjectPtr *tmp;
; 2855 : 
; 2856 :         if (ctxt->valueMax >= XPATH_MAX_STACK_DEPTH) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+24], 1000000		; 000f4240H
	jl	SHORT $LN5@valuePush

; 2857 :             xmlXPathErrMemory(NULL, "XPath stack depth limit reached\n");

	push	OFFSET ??_C@_0CB@EAFHACKN@XPath?5stack?5depth?5limit?5reached@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 2858 :             ctxt->error = XPATH_MEMORY_ERROR;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], 15			; 0000000fH

; 2859 :             return (0);

	xor	eax, eax
	jmp	$LN1@valuePush
$LN5@valuePush:

; 2860 :         }
; 2861 :         tmp = (xmlXPathObjectPtr *) xmlRealloc(ctxt->valueTab,

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+24]
	shl	eax, 1
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$1[ebp], eax

; 2862 :                                              2 * ctxt->valueMax *
; 2863 :                                              sizeof(ctxt->valueTab[0]));
; 2864 :         if (tmp == NULL) {

	cmp	DWORD PTR _tmp$1[ebp], 0
	jne	SHORT $LN6@valuePush

; 2865 :             xmlXPathErrMemory(NULL, "pushing value\n");

	push	OFFSET ??_C@_0P@LENPPBCI@pushing?5value?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 2866 :             ctxt->error = XPATH_MEMORY_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 15			; 0000000fH

; 2867 :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@valuePush
$LN6@valuePush:

; 2868 :         }
; 2869 :         ctxt->valueMax *= 2;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	shl	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+24], edx

; 2870 : 	ctxt->valueTab = tmp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [ecx+28], edx
$LN4@valuePush:

; 2871 :     }
; 2872 :     ctxt->valueTab[ctxt->valueNr] = value;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 2873 :     ctxt->value = value;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2874 :     return (ctxt->valueNr++);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+20], edx
	mov	eax, DWORD PTR tv130[ebp]
$LN1@valuePush:

; 2875 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_valuePush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _valuePop
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_valuePop PROC						; COMDAT

; 2820 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2821 :     xmlXPathObjectPtr ret;
; 2822 : 
; 2823 :     if ((ctxt == NULL) || (ctxt->valueNr <= 0))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@valuePop
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jg	SHORT $LN2@valuePop
$LN3@valuePop:

; 2824 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@valuePop
$LN2@valuePop:

; 2825 : 
; 2826 :     if (ctxt->valueNr <= ctxt->valueFrame) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+44]
	jg	SHORT $LN4@valuePop

; 2827 :         xmlXPatherror(ctxt, __FILE__, __LINE__, XPATH_STACK_ERROR);

	push	23					; 00000017H
	push	2827					; 00000b0bH
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPatherror
	add	esp, 16					; 00000010H

; 2828 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@valuePop
$LN4@valuePop:

; 2829 :     }
; 2830 : 
; 2831 :     ctxt->valueNr--;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+20]
	sub	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 2832 :     if (ctxt->valueNr > 0)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jle	SHORT $LN5@valuePop

; 2833 :         ctxt->value = ctxt->valueTab[ctxt->valueNr - 1];

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [eax+ecx*4-4]
	mov	DWORD PTR [edx+16], eax
	jmp	SHORT $LN6@valuePop
$LN5@valuePop:

; 2834 :     else
; 2835 :         ctxt->value = NULL;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+16], 0
$LN6@valuePop:

; 2836 :     ret = ctxt->valueTab[ctxt->valueNr];

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ret$[ebp], eax

; 2837 :     ctxt->valueTab[ctxt->valueNr] = NULL;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [ecx+edx*4], 0

; 2838 :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@valuePop:

; 2839 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_valuePop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFreeParserContext
_TEXT	SEGMENT
_i$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathFreeParserContext PROC				; COMDAT

; 6306 : xmlXPathFreeParserContext(xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6307 :     int i;
; 6308 : 
; 6309 :     if (ctxt->valueTab != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN5@xmlXPathFr

; 6310 :         for (i = 0; i < ctxt->valueNr; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathFr
$LN2@xmlXPathFr:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathFr:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jge	SHORT $LN3@xmlXPathFr

; 6311 :             if (ctxt->context)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN6@xmlXPathFr

; 6312 :                 xmlXPathReleaseObject(ctxt->context, ctxt->valueTab[i]);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8
	jmp	SHORT $LN7@xmlXPathFr
$LN6@xmlXPathFr:

; 6313 :             else
; 6314 :                 xmlXPathFreeObject(ctxt->valueTab[i]);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4
$LN7@xmlXPathFr:

; 6315 :         }

	jmp	SHORT $LN2@xmlXPathFr
$LN3@xmlXPathFr:

; 6316 :         xmlFree(ctxt->valueTab);

	mov	esi, esp
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlXPathFr:

; 6317 :     }
; 6318 :     if (ctxt->comp != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN8@xmlXPathFr

; 6319 : #ifdef XPATH_STREAMING
; 6320 : 	if (ctxt->comp->stream != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN9@xmlXPathFr

; 6321 : 	    xmlFreePatternList(ctxt->comp->stream);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlFreePatternList
	add	esp, 4

; 6322 : 	    ctxt->comp->stream = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [eax+24], 0
$LN9@xmlXPathFr:

; 6323 : 	}
; 6324 : #endif
; 6325 : 	xmlXPathFreeCompExpr(ctxt->comp);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlXPathFreeCompExpr
	add	esp, 4
$LN8@xmlXPathFr:

; 6326 :     }
; 6327 :     xmlFree(ctxt);

	mov	esi, esp
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6328 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathFreeParserContext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewParserContext
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_str$ = 8						; size = 4
_ctxt$ = 12						; size = 4
_xmlXPathNewParserContext PROC				; COMDAT

; 6234 : xmlXPathNewParserContext(const xmlChar *str, xmlXPathContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6235 :     xmlXPathParserContextPtr ret;
; 6236 : 
; 6237 :     ret = (xmlXPathParserContextPtr) xmlMalloc(sizeof(xmlXPathParserContext));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 6238 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 6239 :         xmlXPathErrMemory(ctxt, "creating parser context\n");

	push	OFFSET ??_C@_0BJ@KFGJCHDI@creating?5parser?5context?6@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathErrMemory
	add	esp, 8

; 6240 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 6241 :     }
; 6242 :     memset(ret, 0 , (size_t) sizeof(xmlXPathParserContext));

	push	48					; 00000030H
	push	0
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 6243 :     ret->cur = ret->base = str;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _str$[ebp]
	mov	DWORD PTR [ecx], edx

; 6244 :     ret->context = ctxt;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 6245 : 
; 6246 :     ret->comp = xmlXPathNewCompExpr();

	call	_xmlXPathNewCompExpr
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+32], eax

; 6247 :     if (ret->comp == NULL) {

	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN3@xmlXPathNe

; 6248 : 	xmlFree(ret->valueTab);

	mov	esi, esp
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6249 : 	xmlFree(ret);

	mov	esi, esp
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6250 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNe
$LN3@xmlXPathNe:

; 6251 :     }
; 6252 :     if ((ctxt != NULL) && (ctxt->dict != NULL)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN4@xmlXPathNe
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN4@xmlXPathNe

; 6253 :         ret->comp->dict = ctxt->dict;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	mov	DWORD PTR [eax+20], edx

; 6254 : 	xmlDictReference(ret->comp->dict);

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_xmlDictReference
	add	esp, 4
$LN4@xmlXPathNe:

; 6255 :     }
; 6256 : 
; 6257 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNe:

; 6258 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewParserContext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisteredVariablesCleanup
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_xmlXPathRegisteredVariablesCleanup PROC		; COMDAT

; 5123 : xmlXPathRegisteredVariablesCleanup(xmlXPathContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5124 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathRe

; 5125 : 	return;

	jmp	SHORT $LN1@xmlXPathRe
$LN2@xmlXPathRe:

; 5126 : 
; 5127 :     xmlHashFree(ctxt->varHash, xmlXPathFreeObjectEntry);

	push	OFFSET _xmlXPathFreeObjectEntry
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlHashFree
	add	esp, 8

; 5128 :     ctxt->varHash = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+16], 0
$LN1@xmlXPathRe:

; 5129 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisteredVariablesCleanup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathVariableLookupNS
_TEXT	SEGMENT
_ret$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_name$ = 12						; size = 4
_ns_uri$ = 16						; size = 4
_xmlXPathVariableLookupNS PROC				; COMDAT

; 5095 : 			 const xmlChar *ns_uri) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5096 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathVa

; 5097 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathVa
$LN2@xmlXPathVa:

; 5098 : 
; 5099 :     if (ctxt->varLookupFunc != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN3@xmlXPathVa

; 5100 : 	xmlXPathObjectPtr ret;
; 5101 : 
; 5102 : 	ret = ((xmlXPathVariableLookupFunc)ctxt->varLookupFunc)

	mov	esi, esp
	mov	ecx, DWORD PTR _ns_uri$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+92]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$1[ebp], eax

; 5103 : 	        (ctxt->varLookupData, name, ns_uri);
; 5104 : 	if (ret != NULL) return(ret);

	cmp	DWORD PTR _ret$1[ebp], 0
	je	SHORT $LN3@xmlXPathVa
	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlXPathVa
$LN3@xmlXPathVa:

; 5105 :     }
; 5106 : 
; 5107 :     if (ctxt->varHash == NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN5@xmlXPathVa

; 5108 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathVa
$LN5@xmlXPathVa:

; 5109 :     if (name == NULL)

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN6@xmlXPathVa

; 5110 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathVa
$LN6@xmlXPathVa:

; 5111 : 
; 5112 :     return(xmlXPathCacheObjectCopy(ctxt, (xmlXPathObjectPtr)

	mov	edx, DWORD PTR _ns_uri$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlHashLookup2
	add	esp, 12					; 0000000cH
	push	eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathCacheObjectCopy
	add	esp, 8
$LN1@xmlXPathVa:

; 5113 : 		xmlHashLookup2(ctxt->varHash, name, ns_uri)));
; 5114 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathVariableLookupNS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathVariableLookup
_TEXT	SEGMENT
_ret$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlXPathVariableLookup PROC				; COMDAT

; 5068 : xmlXPathVariableLookup(xmlXPathContextPtr ctxt, const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5069 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathVa

; 5070 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathVa
$LN2@xmlXPathVa:

; 5071 : 
; 5072 :     if (ctxt->varLookupFunc != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN3@xmlXPathVa

; 5073 : 	xmlXPathObjectPtr ret;
; 5074 : 
; 5075 : 	ret = ((xmlXPathVariableLookupFunc)ctxt->varLookupFunc)

	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$1[ebp], eax

; 5076 : 	        (ctxt->varLookupData, name, NULL);
; 5077 : 	return(ret);

	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlXPathVa
$LN3@xmlXPathVa:

; 5078 :     }
; 5079 :     return(xmlXPathVariableLookupNS(ctxt, name, NULL));

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathVariableLookupNS
	add	esp, 12					; 0000000cH
$LN1@xmlXPathVa:

; 5080 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathVariableLookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisteredFuncsCleanup
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_xmlXPathRegisteredFuncsCleanup PROC			; COMDAT

; 4977 : xmlXPathRegisteredFuncsCleanup(xmlXPathContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4978 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathRe

; 4979 : 	return;

	jmp	SHORT $LN1@xmlXPathRe
$LN2@xmlXPathRe:

; 4980 : 
; 4981 :     xmlHashFree(ctxt->funcHash, NULL);

	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_xmlHashFree
	add	esp, 8

; 4982 :     ctxt->funcHash = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+40], 0
$LN1@xmlXPathRe:

; 4983 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisteredFuncsCleanup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFunctionLookupNS
_TEXT	SEGMENT
_f$1 = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_name$ = 12						; size = 4
_ns_uri$ = 16						; size = 4
_xmlXPathFunctionLookupNS PROC				; COMDAT

; 4944 : 			 const xmlChar *ns_uri) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4945 :     xmlXPathFunction ret;
; 4946 : 
; 4947 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathFu

; 4948 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathFu
$LN2@xmlXPathFu:

; 4949 :     if (name == NULL)

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN3@xmlXPathFu

; 4950 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathFu
$LN3@xmlXPathFu:

; 4951 : 
; 4952 :     if (ctxt->funcLookupFunc != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+112], 0
	je	SHORT $LN4@xmlXPathFu

; 4953 : 	xmlXPathFuncLookupFunc f;
; 4954 : 
; 4955 : 	f = ctxt->funcLookupFunc;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR _f$1[ebp], edx

; 4956 : 	ret = f(ctxt->funcLookupData, name, ns_uri);

	mov	esi, esp
	mov	eax, DWORD PTR _ns_uri$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+116]
	push	eax
	call	DWORD PTR _f$1[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 4957 : 	if (ret != NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN4@xmlXPathFu

; 4958 : 	    return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN1@xmlXPathFu
$LN4@xmlXPathFu:

; 4959 :     }
; 4960 : 
; 4961 :     if (ctxt->funcHash == NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN6@xmlXPathFu

; 4962 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathFu
$LN6@xmlXPathFu:

; 4963 : 
; 4964 : XML_IGNORE_PEDANTIC_WARNINGS
; 4965 :     ret = (xmlXPathFunction) xmlHashLookup2(ctxt->funcHash, name, ns_uri);

	mov	edx, DWORD PTR _ns_uri$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_xmlHashLookup2
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 4966 : XML_POP_WARNINGS
; 4967 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathFu:

; 4968 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathFunctionLookupNS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFunctionLookup
_TEXT	SEGMENT
_f$1 = -8						; size = 4
_ret$2 = -4						; size = 4
_ctxt$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlXPathFunctionLookup PROC				; COMDAT

; 4915 : xmlXPathFunctionLookup(xmlXPathContextPtr ctxt, const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4916 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathFu

; 4917 : 	return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathFu
$LN2@xmlXPathFu:

; 4918 : 
; 4919 :     if (ctxt->funcLookupFunc != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+112], 0
	je	SHORT $LN3@xmlXPathFu

; 4920 : 	xmlXPathFunction ret;
; 4921 : 	xmlXPathFuncLookupFunc f;
; 4922 : 
; 4923 : 	f = ctxt->funcLookupFunc;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR _f$1[ebp], edx

; 4924 : 	ret = f(ctxt->funcLookupData, name, NULL);

	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	call	DWORD PTR _f$1[ebp]
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$2[ebp], eax

; 4925 : 	if (ret != NULL)

	cmp	DWORD PTR _ret$2[ebp], 0
	je	SHORT $LN3@xmlXPathFu

; 4926 : 	    return(ret);

	mov	eax, DWORD PTR _ret$2[ebp]
	jmp	SHORT $LN1@xmlXPathFu
$LN3@xmlXPathFu:

; 4927 :     }
; 4928 :     return(xmlXPathFunctionLookupNS(ctxt, name, NULL));

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathFunctionLookupNS
	add	esp, 12					; 0000000cH
$LN1@xmlXPathFu:

; 4929 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathFunctionLookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisterVariableNS
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_name$ = 12						; size = 4
_ns_uri$ = 16						; size = 4
_value$ = 20						; size = 4
_xmlXPathRegisterVariableNS PROC			; COMDAT

; 5023 : 			   xmlXPathObjectPtr value) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5024 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathRe

; 5025 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathRe
$LN2@xmlXPathRe:

; 5026 :     if (name == NULL)

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN3@xmlXPathRe

; 5027 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathRe
$LN3@xmlXPathRe:

; 5028 : 
; 5029 :     if (ctxt->varHash == NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@xmlXPathRe

; 5030 : 	ctxt->varHash = xmlHashCreate(0);

	push	0
	call	_xmlHashCreate
	add	esp, 4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+16], eax
$LN4@xmlXPathRe:

; 5031 :     if (ctxt->varHash == NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN5@xmlXPathRe

; 5032 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathRe
$LN5@xmlXPathRe:

; 5033 :     if (value == NULL)

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN6@xmlXPathRe

; 5034 :         return(xmlHashRemoveEntry2(ctxt->varHash, name, ns_uri,

	push	OFFSET _xmlXPathFreeObjectEntry
	mov	eax, DWORD PTR _ns_uri$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlHashRemoveEntry2
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@xmlXPathRe
$LN6@xmlXPathRe:

; 5035 : 	                           xmlXPathFreeObjectEntry));
; 5036 :     return(xmlHashUpdateEntry2(ctxt->varHash, name, ns_uri,

	push	OFFSET _xmlXPathFreeObjectEntry
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns_uri$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlHashUpdateEntry2
	add	esp, 20					; 00000014H
$LN1@xmlXPathRe:

; 5037 : 			       (void *) value, xmlXPathFreeObjectEntry));
; 5038 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisterVariableNS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisterVariable
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_name$ = 12						; size = 4
_value$ = 16						; size = 4
_xmlXPathRegisterVariable PROC				; COMDAT

; 5004 : 			 xmlXPathObjectPtr value) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5005 :     return(xmlXPathRegisterVariableNS(ctxt, name, NULL, value));

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterVariableNS
	add	esp, 16					; 00000010H

; 5006 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisterVariable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisterFuncNS
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_name$ = 12						; size = 4
_ns_uri$ = 16						; size = 4
_f$ = 20						; size = 4
_xmlXPathRegisterFuncNS PROC				; COMDAT

; 4869 : 		       const xmlChar *ns_uri, xmlXPathFunction f) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4870 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathRe

; 4871 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathRe
$LN2@xmlXPathRe:

; 4872 :     if (name == NULL)

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN3@xmlXPathRe

; 4873 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathRe
$LN3@xmlXPathRe:

; 4874 : 
; 4875 :     if (ctxt->funcHash == NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN4@xmlXPathRe

; 4876 : 	ctxt->funcHash = xmlHashCreate(0);

	push	0
	call	_xmlHashCreate
	add	esp, 4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN4@xmlXPathRe:

; 4877 :     if (ctxt->funcHash == NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN5@xmlXPathRe

; 4878 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathRe
$LN5@xmlXPathRe:

; 4879 :     if (f == NULL)

	cmp	DWORD PTR _f$[ebp], 0
	jne	SHORT $LN6@xmlXPathRe

; 4880 :         return(xmlHashRemoveEntry2(ctxt->funcHash, name, ns_uri, NULL));

	push	0
	mov	eax, DWORD PTR _ns_uri$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_xmlHashRemoveEntry2
	add	esp, 16					; 00000010H
	jmp	SHORT $LN1@xmlXPathRe
$LN6@xmlXPathRe:

; 4881 : XML_IGNORE_PEDANTIC_WARNINGS
; 4882 :     return(xmlHashAddEntry2(ctxt->funcHash, name, ns_uri, (void *) f));

	mov	ecx, DWORD PTR _f$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns_uri$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_xmlHashAddEntry2
	add	esp, 16					; 00000010H
$LN1@xmlXPathRe:

; 4883 : XML_POP_WARNINGS
; 4884 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisterFuncNS ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisterFunc
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_name$ = 12						; size = 4
_f$ = 16						; size = 4
_xmlXPathRegisterFunc PROC				; COMDAT

; 4852 : 		     xmlXPathFunction f) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4853 :     return(xmlXPathRegisterFuncNS(ctxt, name, NULL, f));

	mov	eax, DWORD PTR _f$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisterFuncNS
	add	esp, 16					; 00000010H

; 4854 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisterFunc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisteredNsCleanup
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_xmlXPathRegisteredNsCleanup PROC			; COMDAT

; 5205 : xmlXPathRegisteredNsCleanup(xmlXPathContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5206 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathRe

; 5207 : 	return;

	jmp	SHORT $LN1@xmlXPathRe
$LN2@xmlXPathRe:

; 5208 : 
; 5209 :     xmlHashFree(ctxt->nsHash, xmlHashDefaultDeallocator);

	push	OFFSET _xmlHashDefaultDeallocator
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlHashFree
	add	esp, 8

; 5210 :     ctxt->nsHash = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+88], 0
$LN1@xmlXPathRe:

; 5211 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisteredNsCleanup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNsLookup
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_prefix$ = 12						; size = 4
_xmlXPathNsLookup PROC					; COMDAT

; 5174 : xmlXPathNsLookup(xmlXPathContextPtr ctxt, const xmlChar *prefix) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5175 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN5@xmlXPathNs

; 5176 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNs
$LN5@xmlXPathNs:

; 5177 :     if (prefix == NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	jne	SHORT $LN6@xmlXPathNs

; 5178 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNs
$LN6@xmlXPathNs:

; 5179 : 
; 5180 : #ifdef XML_XML_NAMESPACE
; 5181 :     if (xmlStrEqual(prefix, (const xmlChar *) "xml"))

	push	OFFSET ??_C@_03PJHHNEEI@xml@
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@xmlXPathNs

; 5182 : 	return(XML_XML_NAMESPACE);

	mov	eax, OFFSET ??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@
	jmp	SHORT $LN1@xmlXPathNs
$LN7@xmlXPathNs:

; 5183 : #endif
; 5184 : 
; 5185 :     if (ctxt->namespaces != NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN8@xmlXPathNs

; 5186 : 	int i;
; 5187 : 
; 5188 : 	for (i = 0;i < ctxt->nsNr;i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@xmlXPathNs
$LN2@xmlXPathNs:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@xmlXPathNs:
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+60]
	jge	SHORT $LN8@xmlXPathNs

; 5189 : 	    if ((ctxt->namespaces[i] != NULL) &&

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN9@xmlXPathNs
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@xmlXPathNs

; 5190 : 		(xmlStrEqual(ctxt->namespaces[i]->prefix, prefix)))
; 5191 : 		return(ctxt->namespaces[i]->href);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	eax, DWORD PTR [edx+8]
	jmp	SHORT $LN1@xmlXPathNs
$LN9@xmlXPathNs:

; 5192 : 	}

	jmp	SHORT $LN2@xmlXPathNs
$LN8@xmlXPathNs:

; 5193 :     }
; 5194 : 
; 5195 :     return((const xmlChar *) xmlHashLookup(ctxt->nsHash, prefix));

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlHashLookup
	add	esp, 8
$LN1@xmlXPathNs:

; 5196 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNsLookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisterNs
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_prefix$ = 12						; size = 4
_ns_uri$ = 16						; size = 4
_xmlXPathRegisterNs PROC				; COMDAT

; 5144 : 			   const xmlChar *ns_uri) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5145 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathRe

; 5146 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathRe
$LN2@xmlXPathRe:

; 5147 :     if (prefix == NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	jne	SHORT $LN3@xmlXPathRe

; 5148 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathRe
$LN3@xmlXPathRe:

; 5149 :     if (prefix[0] == 0)

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _prefix$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN4@xmlXPathRe

; 5150 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathRe
$LN4@xmlXPathRe:

; 5151 : 
; 5152 :     if (ctxt->nsHash == NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+88], 0
	jne	SHORT $LN5@xmlXPathRe

; 5153 : 	ctxt->nsHash = xmlHashCreate(10);

	push	10					; 0000000aH
	call	_xmlHashCreate
	add	esp, 4
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+88], eax
$LN5@xmlXPathRe:

; 5154 :     if (ctxt->nsHash == NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+88], 0
	jne	SHORT $LN6@xmlXPathRe

; 5155 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathRe
$LN6@xmlXPathRe:

; 5156 :     if (ns_uri == NULL)

	cmp	DWORD PTR _ns_uri$[ebp], 0
	jne	SHORT $LN7@xmlXPathRe

; 5157 :         return(xmlHashRemoveEntry(ctxt->nsHash, prefix,

	push	OFFSET _xmlHashDefaultDeallocator
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	_xmlHashRemoveEntry
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlXPathRe
$LN7@xmlXPathRe:

; 5158 : 	                          xmlHashDefaultDeallocator));
; 5159 :     return(xmlHashUpdateEntry(ctxt->nsHash, prefix, (void *) xmlStrdup(ns_uri),

	push	OFFSET _xmlHashDefaultDeallocator
	mov	ecx, DWORD PTR _ns_uri$[ebp]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlHashUpdateEntry
	add	esp, 16					; 00000010H
$LN1@xmlXPathRe:

; 5160 : 			      xmlHashDefaultDeallocator));
; 5161 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisterNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathTrailing
_TEXT	SEGMENT
tv86 = -4						; size = 4
_nodes1$ = 8						; size = 4
_nodes2$ = 12						; size = 4
_xmlXPathTrailing PROC					; COMDAT

; 4823 : xmlXPathTrailing (xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4824 :     if (xmlXPathNodeSetIsEmpty(nodes2))

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN3@xmlXPathTr
	mov	eax, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlXPathTr
	mov	ecx, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlXPathTr
$LN3@xmlXPathTr:

; 4825 : 	return(nodes1);

	mov	eax, DWORD PTR _nodes1$[ebp]
	jmp	SHORT $LN1@xmlXPathTr
$LN2@xmlXPathTr:

; 4826 :     if (xmlXPathNodeSetIsEmpty(nodes1))

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN5@xmlXPathTr
	mov	edx, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@xmlXPathTr
	mov	eax, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@xmlXPathTr
$LN5@xmlXPathTr:

; 4827 : 	return(xmlXPathNodeSetCreate(NULL));

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	jmp	SHORT $LN1@xmlXPathTr
$LN4@xmlXPathTr:

; 4828 :     xmlXPathNodeSetSort(nodes1);

	mov	ecx, DWORD PTR _nodes1$[ebp]
	push	ecx
	call	_xmlXPathNodeSetSort
	add	esp, 4

; 4829 :     xmlXPathNodeSetSort(nodes2);

	mov	edx, DWORD PTR _nodes2$[ebp]
	push	edx
	call	_xmlXPathNodeSetSort
	add	esp, 4

; 4830 :     return(xmlXPathNodeTrailingSorted(nodes1,

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN7@xmlXPathTr
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN7@xmlXPathTr
	mov	ecx, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [ecx], 0
	jle	SHORT $LN7@xmlXPathTr
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _nodes2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax+edx]
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN8@xmlXPathTr
$LN7@xmlXPathTr:
	mov	DWORD PTR tv86[ebp], 0
$LN8@xmlXPathTr:
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	mov	edx, DWORD PTR _nodes1$[ebp]
	push	edx
	call	_xmlXPathNodeTrailingSorted
	add	esp, 8
$LN1@xmlXPathTr:

; 4831 : 				      xmlXPathNodeSetItem(nodes2, 0)));
; 4832 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathTrailing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeTrailing
_TEXT	SEGMENT
_nodes$ = 8						; size = 4
_node$ = 12						; size = 4
_xmlXPathNodeTrailing PROC				; COMDAT

; 4783 : xmlXPathNodeTrailing (xmlNodeSetPtr nodes, xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4784 :     xmlXPathNodeSetSort(nodes);

	mov	eax, DWORD PTR _nodes$[ebp]
	push	eax
	call	_xmlXPathNodeSetSort
	add	esp, 4

; 4785 :     return(xmlXPathNodeTrailingSorted(nodes, node));

	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nodes$[ebp]
	push	edx
	call	_xmlXPathNodeTrailingSorted
	add	esp, 8

; 4786 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNodeTrailing ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathTrailingSorted
_TEXT	SEGMENT
tv77 = -4						; size = 4
_nodes1$ = 8						; size = 4
_nodes2$ = 12						; size = 4
_xmlXPathTrailingSorted PROC				; COMDAT

; 4801 : xmlXPathTrailingSorted (xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4802 :     if (xmlXPathNodeSetIsEmpty(nodes2))

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN3@xmlXPathTr
	mov	eax, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlXPathTr
	mov	ecx, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlXPathTr
$LN3@xmlXPathTr:

; 4803 : 	return(nodes1);

	mov	eax, DWORD PTR _nodes1$[ebp]
	jmp	SHORT $LN1@xmlXPathTr
$LN2@xmlXPathTr:

; 4804 :     return(xmlXPathNodeTrailingSorted(nodes1,

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN5@xmlXPathTr
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@xmlXPathTr
	mov	eax, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [eax], 0
	jle	SHORT $LN5@xmlXPathTr
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _nodes2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv77[ebp], edx
	jmp	SHORT $LN6@xmlXPathTr
$LN5@xmlXPathTr:
	mov	DWORD PTR tv77[ebp], 0
$LN6@xmlXPathTr:
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	mov	ecx, DWORD PTR _nodes1$[ebp]
	push	ecx
	call	_xmlXPathNodeTrailingSorted
	add	esp, 8
$LN1@xmlXPathTr:

; 4805 : 				      xmlXPathNodeSetItem(nodes2, 0)));
; 4806 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathTrailingSorted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeTrailingSorted
_TEXT	SEGMENT
tv90 = -24						; size = 4
tv79 = -20						; size = 4
_ret$ = -16						; size = 4
_cur$ = -12						; size = 4
_l$ = -8						; size = 4
_i$ = -4						; size = 4
_nodes$ = 8						; size = 4
_node$ = 12						; size = 4
_xmlXPathNodeTrailingSorted PROC			; COMDAT

; 4741 : xmlXPathNodeTrailingSorted (xmlNodeSetPtr nodes, xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4742 :     int i, l;
; 4743 :     xmlNodePtr cur;
; 4744 :     xmlNodeSetPtr ret;
; 4745 : 
; 4746 :     if (node == NULL)

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN5@xmlXPathNo

; 4747 : 	return(nodes);

	mov	eax, DWORD PTR _nodes$[ebp]
	jmp	$LN1@xmlXPathNo
$LN5@xmlXPathNo:

; 4748 : 
; 4749 :     ret = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4750 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN6@xmlXPathNo

; 4751 :         return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathNo
$LN6@xmlXPathNo:

; 4752 :     if (xmlXPathNodeSetIsEmpty(nodes) ||

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN8@xmlXPathNo
	mov	eax, DWORD PTR _nodes$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@xmlXPathNo
	mov	ecx, DWORD PTR _nodes$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN8@xmlXPathNo
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _nodes$[ebp]
	push	eax
	call	_xmlXPathNodeSetContains
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@xmlXPathNo
$LN8@xmlXPathNo:

; 4753 : 	(!xmlXPathNodeSetContains(nodes, node)))
; 4754 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathNo
$LN7@xmlXPathNo:

; 4755 : 
; 4756 :     l = xmlXPathNodeSetGetLength(nodes);

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN12@xmlXPathNo
	mov	ecx, DWORD PTR _nodes$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN13@xmlXPathNo
$LN12@xmlXPathNo:
	mov	DWORD PTR tv79[ebp], 0
$LN13@xmlXPathNo:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _l$[ebp], eax

; 4757 :     for (i = l - 1; i >= 0; i--) {

	mov	ecx, DWORD PTR _l$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@xmlXPathNo:
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN3@xmlXPathNo

; 4758 : 	cur = xmlXPathNodeSetItem(nodes, i);

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN14@xmlXPathNo
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN14@xmlXPathNo
	mov	eax, DWORD PTR _nodes$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN14@xmlXPathNo
	mov	edx, DWORD PTR _nodes$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv90[ebp], edx
	jmp	SHORT $LN15@xmlXPathNo
$LN14@xmlXPathNo:
	mov	DWORD PTR tv90[ebp], 0
$LN15@xmlXPathNo:
	mov	eax, DWORD PTR tv90[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 4759 : 	if (cur == node)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _node$[ebp]
	jne	SHORT $LN9@xmlXPathNo

; 4760 : 	    break;

	jmp	SHORT $LN3@xmlXPathNo
$LN9@xmlXPathNo:

; 4761 : 	if (xmlXPathNodeSetAddUnique(ret, cur) < 0)

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN10@xmlXPathNo

; 4762 : 	    break;

	jmp	SHORT $LN3@xmlXPathNo
$LN10@xmlXPathNo:

; 4763 :     }

	jmp	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 4764 :     xmlXPathNodeSetSort(ret);	/* bug 413451 */

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlXPathNodeSetSort
	add	esp, 4

; 4765 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNo:

; 4766 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeTrailingSorted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathLeading
_TEXT	SEGMENT
tv86 = -4						; size = 4
_nodes1$ = 8						; size = 4
_nodes2$ = 12						; size = 4
_xmlXPathLeading PROC					; COMDAT

; 4717 : xmlXPathLeading (xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4718 :     if (xmlXPathNodeSetIsEmpty(nodes2))

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN3@xmlXPathLe
	mov	eax, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlXPathLe
	mov	ecx, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlXPathLe
$LN3@xmlXPathLe:

; 4719 : 	return(nodes1);

	mov	eax, DWORD PTR _nodes1$[ebp]
	jmp	SHORT $LN1@xmlXPathLe
$LN2@xmlXPathLe:

; 4720 :     if (xmlXPathNodeSetIsEmpty(nodes1))

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN5@xmlXPathLe
	mov	edx, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN5@xmlXPathLe
	mov	eax, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@xmlXPathLe
$LN5@xmlXPathLe:

; 4721 : 	return(xmlXPathNodeSetCreate(NULL));

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	jmp	SHORT $LN1@xmlXPathLe
$LN4@xmlXPathLe:

; 4722 :     xmlXPathNodeSetSort(nodes1);

	mov	ecx, DWORD PTR _nodes1$[ebp]
	push	ecx
	call	_xmlXPathNodeSetSort
	add	esp, 4

; 4723 :     xmlXPathNodeSetSort(nodes2);

	mov	edx, DWORD PTR _nodes2$[ebp]
	push	edx
	call	_xmlXPathNodeSetSort
	add	esp, 4

; 4724 :     return(xmlXPathNodeLeadingSorted(nodes1,

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN7@xmlXPathLe
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN7@xmlXPathLe
	mov	ecx, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [ecx], 1
	jle	SHORT $LN7@xmlXPathLe
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _nodes2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx+ecx]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN8@xmlXPathLe
$LN7@xmlXPathLe:
	mov	DWORD PTR tv86[ebp], 0
$LN8@xmlXPathLe:
	mov	eax, DWORD PTR tv86[ebp]
	push	eax
	mov	ecx, DWORD PTR _nodes1$[ebp]
	push	ecx
	call	_xmlXPathNodeLeadingSorted
	add	esp, 8
$LN1@xmlXPathLe:

; 4725 : 				     xmlXPathNodeSetItem(nodes2, 1)));
; 4726 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathLeading ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeLeading
_TEXT	SEGMENT
_nodes$ = 8						; size = 4
_node$ = 12						; size = 4
_xmlXPathNodeLeading PROC				; COMDAT

; 4677 : xmlXPathNodeLeading (xmlNodeSetPtr nodes, xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4678 :     xmlXPathNodeSetSort(nodes);

	mov	eax, DWORD PTR _nodes$[ebp]
	push	eax
	call	_xmlXPathNodeSetSort
	add	esp, 4

; 4679 :     return(xmlXPathNodeLeadingSorted(nodes, node));

	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nodes$[ebp]
	push	edx
	call	_xmlXPathNodeLeadingSorted
	add	esp, 8

; 4680 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNodeLeading ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathLeadingSorted
_TEXT	SEGMENT
tv77 = -4						; size = 4
_nodes1$ = 8						; size = 4
_nodes2$ = 12						; size = 4
_xmlXPathLeadingSorted PROC				; COMDAT

; 4695 : xmlXPathLeadingSorted (xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4696 :     if (xmlXPathNodeSetIsEmpty(nodes2))

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN3@xmlXPathLe
	mov	eax, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlXPathLe
	mov	ecx, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlXPathLe
$LN3@xmlXPathLe:

; 4697 : 	return(nodes1);

	mov	eax, DWORD PTR _nodes1$[ebp]
	jmp	SHORT $LN1@xmlXPathLe
$LN2@xmlXPathLe:

; 4698 :     return(xmlXPathNodeLeadingSorted(nodes1,

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN5@xmlXPathLe
	mov	edx, 1
	test	edx, edx
	je	SHORT $LN5@xmlXPathLe
	mov	eax, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [eax], 1
	jle	SHORT $LN5@xmlXPathLe
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _nodes2$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR tv77[ebp], ecx
	jmp	SHORT $LN6@xmlXPathLe
$LN5@xmlXPathLe:
	mov	DWORD PTR tv77[ebp], 0
$LN6@xmlXPathLe:
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	mov	eax, DWORD PTR _nodes1$[ebp]
	push	eax
	call	_xmlXPathNodeLeadingSorted
	add	esp, 8
$LN1@xmlXPathLe:

; 4699 : 				     xmlXPathNodeSetItem(nodes2, 1)));
; 4700 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathLeadingSorted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeLeadingSorted
_TEXT	SEGMENT
tv89 = -24						; size = 4
tv79 = -20						; size = 4
_ret$ = -16						; size = 4
_cur$ = -12						; size = 4
_l$ = -8						; size = 4
_i$ = -4						; size = 4
_nodes$ = 8						; size = 4
_node$ = 12						; size = 4
_xmlXPathNodeLeadingSorted PROC				; COMDAT

; 4636 : xmlXPathNodeLeadingSorted (xmlNodeSetPtr nodes, xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4637 :     int i, l;
; 4638 :     xmlNodePtr cur;
; 4639 :     xmlNodeSetPtr ret;
; 4640 : 
; 4641 :     if (node == NULL)

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN5@xmlXPathNo

; 4642 : 	return(nodes);

	mov	eax, DWORD PTR _nodes$[ebp]
	jmp	$LN1@xmlXPathNo
$LN5@xmlXPathNo:

; 4643 : 
; 4644 :     ret = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4645 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN6@xmlXPathNo

; 4646 :         return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathNo
$LN6@xmlXPathNo:

; 4647 :     if (xmlXPathNodeSetIsEmpty(nodes) ||

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN8@xmlXPathNo
	mov	eax, DWORD PTR _nodes$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@xmlXPathNo
	mov	ecx, DWORD PTR _nodes$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN8@xmlXPathNo
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _nodes$[ebp]
	push	eax
	call	_xmlXPathNodeSetContains
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@xmlXPathNo
$LN8@xmlXPathNo:

; 4648 : 	(!xmlXPathNodeSetContains(nodes, node)))
; 4649 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathNo
$LN7@xmlXPathNo:

; 4650 : 
; 4651 :     l = xmlXPathNodeSetGetLength(nodes);

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN12@xmlXPathNo
	mov	ecx, DWORD PTR _nodes$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN13@xmlXPathNo
$LN12@xmlXPathNo:
	mov	DWORD PTR tv79[ebp], 0
$LN13@xmlXPathNo:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _l$[ebp], eax

; 4652 :     for (i = 0; i < l; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathNo:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _l$[ebp]
	jge	SHORT $LN3@xmlXPathNo

; 4653 : 	cur = xmlXPathNodeSetItem(nodes, i);

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN14@xmlXPathNo
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN14@xmlXPathNo
	mov	eax, DWORD PTR _nodes$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN14@xmlXPathNo
	mov	edx, DWORD PTR _nodes$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN15@xmlXPathNo
$LN14@xmlXPathNo:
	mov	DWORD PTR tv89[ebp], 0
$LN15@xmlXPathNo:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 4654 : 	if (cur == node)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _node$[ebp]
	jne	SHORT $LN9@xmlXPathNo

; 4655 : 	    break;

	jmp	SHORT $LN3@xmlXPathNo
$LN9@xmlXPathNo:

; 4656 : 	if (xmlXPathNodeSetAddUnique(ret, cur) < 0)

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN10@xmlXPathNo

; 4657 : 	    break;

	jmp	SHORT $LN3@xmlXPathNo
$LN10@xmlXPathNo:

; 4658 :     }

	jmp	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 4659 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNo:

; 4660 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeLeadingSorted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathHasSameNodes
_TEXT	SEGMENT
tv86 = -20						; size = 4
tv76 = -16						; size = 4
_cur$ = -12						; size = 4
_l$ = -8						; size = 4
_i$ = -4						; size = 4
_nodes1$ = 8						; size = 4
_nodes2$ = 12						; size = 4
_xmlXPathHasSameNodes PROC				; COMDAT

; 4606 : xmlXPathHasSameNodes (xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4607 :     int i, l;
; 4608 :     xmlNodePtr cur;
; 4609 : 
; 4610 :     if (xmlXPathNodeSetIsEmpty(nodes1) ||

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN6@xmlXPathHa
	mov	eax, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@xmlXPathHa
	mov	ecx, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN6@xmlXPathHa
	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN6@xmlXPathHa
	mov	edx, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN6@xmlXPathHa
	mov	eax, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN5@xmlXPathHa
$LN6@xmlXPathHa:

; 4611 : 	xmlXPathNodeSetIsEmpty(nodes2))
; 4612 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathHa
$LN5@xmlXPathHa:

; 4613 : 
; 4614 :     l = xmlXPathNodeSetGetLength(nodes1);

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN10@xmlXPathHa
	mov	ecx, DWORD PTR _nodes1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv76[ebp], edx
	jmp	SHORT $LN11@xmlXPathHa
$LN10@xmlXPathHa:
	mov	DWORD PTR tv76[ebp], 0
$LN11@xmlXPathHa:
	mov	eax, DWORD PTR tv76[ebp]
	mov	DWORD PTR _l$[ebp], eax

; 4615 :     for (i = 0; i < l; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathHa
$LN2@xmlXPathHa:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathHa:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _l$[ebp]
	jge	SHORT $LN3@xmlXPathHa

; 4616 : 	cur = xmlXPathNodeSetItem(nodes1, i);

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN12@xmlXPathHa
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN12@xmlXPathHa
	mov	eax, DWORD PTR _nodes1$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN12@xmlXPathHa
	mov	edx, DWORD PTR _nodes1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN13@xmlXPathHa
$LN12@xmlXPathHa:
	mov	DWORD PTR tv86[ebp], 0
$LN13@xmlXPathHa:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 4617 : 	if (xmlXPathNodeSetContains(nodes2, cur))

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nodes2$[ebp]
	push	edx
	call	_xmlXPathNodeSetContains
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@xmlXPathHa

; 4618 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathHa
$LN8@xmlXPathHa:

; 4619 :     }

	jmp	SHORT $LN2@xmlXPathHa
$LN3@xmlXPathHa:

; 4620 :     return(0);

	xor	eax, eax
$LN1@xmlXPathHa:

; 4621 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathHasSameNodes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDistinct
_TEXT	SEGMENT
_nodes$ = 8						; size = 4
_xmlXPathDistinct PROC					; COMDAT

; 4586 : xmlXPathDistinct (xmlNodeSetPtr nodes) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4587 :     if (xmlXPathNodeSetIsEmpty(nodes))

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN3@xmlXPathDi
	mov	eax, DWORD PTR _nodes$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlXPathDi
	mov	ecx, DWORD PTR _nodes$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlXPathDi
$LN3@xmlXPathDi:

; 4588 : 	return(nodes);

	mov	eax, DWORD PTR _nodes$[ebp]
	jmp	SHORT $LN1@xmlXPathDi
$LN2@xmlXPathDi:

; 4589 : 
; 4590 :     xmlXPathNodeSetSort(nodes);

	mov	edx, DWORD PTR _nodes$[ebp]
	push	edx
	call	_xmlXPathNodeSetSort
	add	esp, 4

; 4591 :     return(xmlXPathDistinctSorted(nodes));

	mov	eax, DWORD PTR _nodes$[ebp]
	push	eax
	call	_xmlXPathDistinctSorted
	add	esp, 4
$LN1@xmlXPathDi:

; 4592 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathDistinct ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDistinctSorted
_TEXT	SEGMENT
tv86 = -32						; size = 4
tv74 = -28						; size = 4
_cur$ = -24						; size = 4
_strval$ = -20						; size = 4
_l$ = -16						; size = 4
_i$ = -12						; size = 4
_hash$ = -8						; size = 4
_ret$ = -4						; size = 4
_nodes$ = 8						; size = 4
_xmlXPathDistinctSorted PROC				; COMDAT

; 4543 : xmlXPathDistinctSorted (xmlNodeSetPtr nodes) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4544 :     xmlNodeSetPtr ret;
; 4545 :     xmlHashTablePtr hash;
; 4546 :     int i, l;
; 4547 :     xmlChar * strval;
; 4548 :     xmlNodePtr cur;
; 4549 : 
; 4550 :     if (xmlXPathNodeSetIsEmpty(nodes))

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN6@xmlXPathDi
	mov	eax, DWORD PTR _nodes$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@xmlXPathDi
	mov	ecx, DWORD PTR _nodes$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN5@xmlXPathDi
$LN6@xmlXPathDi:

; 4551 : 	return(nodes);

	mov	eax, DWORD PTR _nodes$[ebp]
	jmp	$LN1@xmlXPathDi
$LN5@xmlXPathDi:

; 4552 : 
; 4553 :     ret = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4554 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN7@xmlXPathDi

; 4555 :         return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathDi
$LN7@xmlXPathDi:

; 4556 :     l = xmlXPathNodeSetGetLength(nodes);

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN12@xmlXPathDi
	mov	edx, DWORD PTR _nodes$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN13@xmlXPathDi
$LN12@xmlXPathDi:
	mov	DWORD PTR tv74[ebp], 0
$LN13@xmlXPathDi:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR _l$[ebp], ecx

; 4557 :     hash = xmlHashCreate (l);

	mov	edx, DWORD PTR _l$[ebp]
	push	edx
	call	_xmlHashCreate
	add	esp, 4
	mov	DWORD PTR _hash$[ebp], eax

; 4558 :     for (i = 0; i < l; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDi
$LN2@xmlXPathDi:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathDi:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _l$[ebp]
	jge	$LN3@xmlXPathDi

; 4559 : 	cur = xmlXPathNodeSetItem(nodes, i);

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN14@xmlXPathDi
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN14@xmlXPathDi
	mov	edx, DWORD PTR _nodes$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN14@xmlXPathDi
	mov	ecx, DWORD PTR _nodes$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR tv86[ebp], ecx
	jmp	SHORT $LN15@xmlXPathDi
$LN14@xmlXPathDi:
	mov	DWORD PTR tv86[ebp], 0
$LN15@xmlXPathDi:
	mov	edx, DWORD PTR tv86[ebp]
	mov	DWORD PTR _cur$[ebp], edx

; 4560 : 	strval = xmlXPathCastNodeToString(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_xmlXPathCastNodeToString
	add	esp, 4
	mov	DWORD PTR _strval$[ebp], eax

; 4561 : 	if (xmlHashLookup(hash, strval) == NULL) {

	mov	ecx, DWORD PTR _strval$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hash$[ebp]
	push	edx
	call	_xmlHashLookup
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@xmlXPathDi

; 4562 : 	    xmlHashAddEntry(hash, strval, strval);

	mov	eax, DWORD PTR _strval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strval$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hash$[ebp]
	push	edx
	call	_xmlHashAddEntry
	add	esp, 12					; 0000000cH

; 4563 : 	    if (xmlXPathNodeSetAddUnique(ret, cur) < 0)

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN10@xmlXPathDi

; 4564 : 	        break;

	jmp	SHORT $LN3@xmlXPathDi
$LN10@xmlXPathDi:

; 4565 : 	} else {

	jmp	SHORT $LN9@xmlXPathDi
$LN8@xmlXPathDi:

; 4566 : 	    xmlFree(strval);

	mov	esi, esp
	mov	edx, DWORD PTR _strval$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@xmlXPathDi:

; 4567 : 	}
; 4568 :     }

	jmp	$LN2@xmlXPathDi
$LN3@xmlXPathDi:

; 4569 :     xmlHashFree(hash, xmlHashDefaultDeallocator);

	push	OFFSET _xmlHashDefaultDeallocator
	mov	eax, DWORD PTR _hash$[ebp]
	push	eax
	call	_xmlHashFree
	add	esp, 8

; 4570 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathDi:

; 4571 : }

	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathDistinctSorted ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathIntersection
_TEXT	SEGMENT
tv89 = -24						; size = 4
tv79 = -20						; size = 4
_cur$ = -16						; size = 4
_l1$ = -12						; size = 4
_i$ = -8						; size = 4
_ret$ = -4						; size = 4
_nodes1$ = 8						; size = 4
_nodes2$ = 12						; size = 4
_xmlXPathIntersection PROC				; COMDAT

; 4508 : xmlXPathIntersection (xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4509 :     xmlNodeSetPtr ret = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4510 :     int i, l1;
; 4511 :     xmlNodePtr cur;
; 4512 : 
; 4513 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN5@xmlXPathIn

; 4514 :         return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathIn
$LN5@xmlXPathIn:

; 4515 :     if (xmlXPathNodeSetIsEmpty(nodes1))

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN7@xmlXPathIn
	mov	eax, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN7@xmlXPathIn
	mov	ecx, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN6@xmlXPathIn
$LN7@xmlXPathIn:

; 4516 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathIn
$LN6@xmlXPathIn:

; 4517 :     if (xmlXPathNodeSetIsEmpty(nodes2))

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN9@xmlXPathIn
	mov	edx, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN9@xmlXPathIn
	mov	eax, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN8@xmlXPathIn
$LN9@xmlXPathIn:

; 4518 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathIn
$LN8@xmlXPathIn:

; 4519 : 
; 4520 :     l1 = xmlXPathNodeSetGetLength(nodes1);

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN13@xmlXPathIn
	mov	ecx, DWORD PTR _nodes1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv79[ebp], edx
	jmp	SHORT $LN14@xmlXPathIn
$LN13@xmlXPathIn:
	mov	DWORD PTR tv79[ebp], 0
$LN14@xmlXPathIn:
	mov	eax, DWORD PTR tv79[ebp]
	mov	DWORD PTR _l1$[ebp], eax

; 4521 : 
; 4522 :     for (i = 0; i < l1; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathIn
$LN2@xmlXPathIn:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathIn:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _l1$[ebp]
	jge	SHORT $LN3@xmlXPathIn

; 4523 : 	cur = xmlXPathNodeSetItem(nodes1, i);

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN15@xmlXPathIn
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN15@xmlXPathIn
	mov	eax, DWORD PTR _nodes1$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN15@xmlXPathIn
	mov	edx, DWORD PTR _nodes1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN16@xmlXPathIn
$LN15@xmlXPathIn:
	mov	DWORD PTR tv89[ebp], 0
$LN16@xmlXPathIn:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 4524 : 	if (xmlXPathNodeSetContains(nodes2, cur)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nodes2$[ebp]
	push	edx
	call	_xmlXPathNodeSetContains
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@xmlXPathIn

; 4525 : 	    if (xmlXPathNodeSetAddUnique(ret, cur) < 0)

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN10@xmlXPathIn

; 4526 : 	        break;

	jmp	SHORT $LN3@xmlXPathIn
$LN10@xmlXPathIn:

; 4527 : 	}
; 4528 :     }

	jmp	SHORT $LN2@xmlXPathIn
$LN3@xmlXPathIn:

; 4529 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathIn:

; 4530 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathIntersection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDifference
_TEXT	SEGMENT
tv88 = -24						; size = 4
tv78 = -20						; size = 4
_cur$ = -16						; size = 4
_l1$ = -12						; size = 4
_i$ = -8						; size = 4
_ret$ = -4						; size = 4
_nodes1$ = 8						; size = 4
_nodes2$ = 12						; size = 4
_xmlXPathDifference PROC				; COMDAT

; 4472 : xmlXPathDifference (xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4473 :     xmlNodeSetPtr ret;
; 4474 :     int i, l1;
; 4475 :     xmlNodePtr cur;
; 4476 : 
; 4477 :     if (xmlXPathNodeSetIsEmpty(nodes2))

	cmp	DWORD PTR _nodes2$[ebp], 0
	je	SHORT $LN6@xmlXPathDi
	mov	eax, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN6@xmlXPathDi
	mov	ecx, DWORD PTR _nodes2$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN5@xmlXPathDi
$LN6@xmlXPathDi:

; 4478 : 	return(nodes1);

	mov	eax, DWORD PTR _nodes1$[ebp]
	jmp	$LN1@xmlXPathDi
$LN5@xmlXPathDi:

; 4479 : 
; 4480 :     ret = xmlXPathNodeSetCreate(NULL);

	push	0
	call	_xmlXPathNodeSetCreate
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4481 :     if (xmlXPathNodeSetIsEmpty(nodes1))

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN8@xmlXPathDi
	mov	edx, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN8@xmlXPathDi
	mov	eax, DWORD PTR _nodes1$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN7@xmlXPathDi
$LN8@xmlXPathDi:

; 4482 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlXPathDi
$LN7@xmlXPathDi:

; 4483 : 
; 4484 :     l1 = xmlXPathNodeSetGetLength(nodes1);

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN12@xmlXPathDi
	mov	ecx, DWORD PTR _nodes1$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv78[ebp], edx
	jmp	SHORT $LN13@xmlXPathDi
$LN12@xmlXPathDi:
	mov	DWORD PTR tv78[ebp], 0
$LN13@xmlXPathDi:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _l1$[ebp], eax

; 4485 : 
; 4486 :     for (i = 0; i < l1; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDi
$LN2@xmlXPathDi:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathDi:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _l1$[ebp]
	jge	SHORT $LN3@xmlXPathDi

; 4487 : 	cur = xmlXPathNodeSetItem(nodes1, i);

	cmp	DWORD PTR _nodes1$[ebp], 0
	je	SHORT $LN14@xmlXPathDi
	cmp	DWORD PTR _i$[ebp], 0
	jl	SHORT $LN14@xmlXPathDi
	mov	eax, DWORD PTR _nodes1$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN14@xmlXPathDi
	mov	edx, DWORD PTR _nodes1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR tv88[ebp], edx
	jmp	SHORT $LN15@xmlXPathDi
$LN14@xmlXPathDi:
	mov	DWORD PTR tv88[ebp], 0
$LN15@xmlXPathDi:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 4488 : 	if (!xmlXPathNodeSetContains(nodes2, cur)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nodes2$[ebp]
	push	edx
	call	_xmlXPathNodeSetContains
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@xmlXPathDi

; 4489 : 	    if (xmlXPathNodeSetAddUnique(ret, cur) < 0)

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlXPathNodeSetAddUnique
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN9@xmlXPathDi

; 4490 : 	        break;

	jmp	SHORT $LN3@xmlXPathDi
$LN9@xmlXPathDi:

; 4491 : 	}
; 4492 :     }

	jmp	SHORT $LN2@xmlXPathDi
$LN3@xmlXPathDi:

; 4493 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathDi:

; 4494 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathDifference ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetContains
_TEXT	SEGMENT
_ns2$1 = -12						; size = 4
_ns1$2 = -8						; size = 4
_i$ = -4						; size = 4
_cur$ = 8						; size = 4
_val$ = 12						; size = 4
_xmlXPathNodeSetContains PROC				; COMDAT

; 3599 : xmlXPathNodeSetContains (xmlNodeSetPtr cur, xmlNodePtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3600 :     int i;
; 3601 : 
; 3602 :     if ((cur == NULL) || (val == NULL)) return(0);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN9@xmlXPathNo
	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN8@xmlXPathNo
$LN9@xmlXPathNo:
	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN8@xmlXPathNo:

; 3603 :     if (val->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	$LN10@xmlXPathNo

; 3604 : 	for (i = 0; i < cur->nodeNr; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathNo
$LN2@xmlXPathNo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathNo:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@xmlXPathNo

; 3605 : 	    if (cur->nodeTab[i]->type == XML_NAMESPACE_DECL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN12@xmlXPathNo

; 3606 : 		xmlNsPtr ns1, ns2;
; 3607 : 
; 3608 : 		ns1 = (xmlNsPtr) val;

	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _ns1$2[ebp], edx

; 3609 : 		ns2 = (xmlNsPtr) cur->nodeTab[i];

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _ns2$1[ebp], eax

; 3610 : 		if (ns1 == ns2)

	mov	ecx, DWORD PTR _ns1$2[ebp]
	cmp	ecx, DWORD PTR _ns2$1[ebp]
	jne	SHORT $LN13@xmlXPathNo

; 3611 : 		    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathNo
$LN13@xmlXPathNo:

; 3612 : 		if ((ns1->next != NULL) && (ns2->next == ns1->next) &&

	mov	edx, DWORD PTR _ns1$2[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN12@xmlXPathNo
	mov	eax, DWORD PTR _ns2$1[ebp]
	mov	ecx, DWORD PTR _ns1$2[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN12@xmlXPathNo
	mov	eax, DWORD PTR _ns2$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ns1$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@xmlXPathNo

; 3613 : 	            (xmlStrEqual(ns1->prefix, ns2->prefix)))
; 3614 : 		    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathNo
$LN12@xmlXPathNo:

; 3615 : 	    }
; 3616 : 	}

	jmp	SHORT $LN2@xmlXPathNo
$LN3@xmlXPathNo:

; 3617 :     } else {

	jmp	SHORT $LN11@xmlXPathNo
$LN10@xmlXPathNo:

; 3618 : 	for (i = 0; i < cur->nodeNr; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@xmlXPathNo
$LN5@xmlXPathNo:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@xmlXPathNo:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN11@xmlXPathNo

; 3619 : 	    if (cur->nodeTab[i] == val)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	ecx, DWORD PTR _val$[ebp]
	jne	SHORT $LN15@xmlXPathNo

; 3620 : 		return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathNo
$LN15@xmlXPathNo:

; 3621 : 	}

	jmp	SHORT $LN5@xmlXPathNo
$LN11@xmlXPathNo:

; 3622 :     }
; 3623 :     return(0);

	xor	eax, eax
$LN1@xmlXPathNo:

; 3624 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetContains ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDebugDumpCompExpr
_TEXT	SEGMENT
_shift$ = -108						; size = 100
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_comp$ = 12						; size = 4
_depth$ = 16						; size = 4
_xmlXPathDebugDumpCompExpr PROC				; COMDAT

; 1653 : 	                  int depth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1654 :     int i;
; 1655 :     char shift[100];
; 1656 : 
; 1657 :     if ((output == NULL) || (comp == NULL)) return;

	cmp	DWORD PTR _output$[ebp], 0
	je	SHORT $LN6@xmlXPathDe
	cmp	DWORD PTR _comp$[ebp], 0
	jne	SHORT $LN5@xmlXPathDe
$LN6@xmlXPathDe:
	jmp	$LN1@xmlXPathDe
$LN5@xmlXPathDe:

; 1658 : 
; 1659 :     for (i = 0;((i < depth) && (i < 25));i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDe
$LN2@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathDe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN3@xmlXPathDe
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jge	SHORT $LN3@xmlXPathDe

; 1660 :         shift[2 * i] = shift[2 * i + 1] = ' ';

	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2+1], 32	; 00000020H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+eax*2], 32		; 00000020H
	jmp	SHORT $LN2@xmlXPathDe
$LN3@xmlXPathDe:

; 1661 :     shift[2 * i] = shift[2 * i + 1] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+ecx*2+1], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2], 0

; 1662 : 
; 1663 :     fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1664 : 
; 1665 : #ifdef XPATH_STREAMING
; 1666 :     if (comp->stream) {

	mov	edx, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN7@xmlXPathDe

; 1667 :         fprintf(output, "Streaming Expression\n");

	push	OFFSET ??_C@_0BG@FMDDAOLJ@Streaming?5Expression?6@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8

; 1668 :     } else

	jmp	SHORT $LN1@xmlXPathDe
$LN7@xmlXPathDe:

; 1669 : #endif
; 1670 :     {
; 1671 :         fprintf(output, "Compiled Expression : %d elements\n",

	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	OFFSET ??_C@_0CD@DHBDACDN@Compiled?5Expression?5?3?5?$CFd?5elemen@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1672 :                 comp->nbStep);
; 1673 :         i = comp->last;

	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _i$[ebp], edx

; 1674 :         xmlXPathDebugDumpStepOp(output, comp, &comp->steps[i], depth + 1);

	mov	eax, DWORD PTR _depth$[ebp]
	add	eax, 1
	push	eax
	imul	ecx, DWORD PTR _i$[ebp], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	mov	eax, DWORD PTR _comp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_xmlXPathDebugDumpStepOp
	add	esp, 16					; 00000010H
$LN1@xmlXPathDe:

; 1675 :     }
; 1676 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@xmlXPathDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN12@xmlXPathDe:
	DD	1
	DD	$LN11@xmlXPathDe
$LN11@xmlXPathDe:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN10@xmlXPathDe
$LN10@xmlXPathDe:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
_xmlXPathDebugDumpCompExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathDebugDumpObject
_TEXT	SEGMENT
tv147 = -120						; size = 4
tv89 = -116						; size = 4
_shift$ = -108						; size = 100
_i$ = -4						; size = 4
_output$ = 8						; size = 4
_cur$ = 12						; size = 4
_depth$ = 16						; size = 4
_xmlXPathDebugDumpObject PROC				; COMDAT

; 1363 : xmlXPathDebugDumpObject(FILE *output, xmlXPathObjectPtr cur, int depth) {

	push	ebp
	mov	ebp, esp
	sub	esp, 120				; 00000078H
	push	edi
	lea	edi, DWORD PTR [ebp-120]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1364 :     int i;
; 1365 :     char shift[100];
; 1366 : 
; 1367 :     if (output == NULL) return;

	cmp	DWORD PTR _output$[ebp], 0
	jne	SHORT $LN9@xmlXPathDe
	jmp	$LN5@xmlXPathDe
$LN9@xmlXPathDe:

; 1368 : 
; 1369 :     for (i = 0;((i < depth) && (i < 25));i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathDe
$LN2@xmlXPathDe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlXPathDe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _depth$[ebp]
	jge	SHORT $LN3@xmlXPathDe
	cmp	DWORD PTR _i$[ebp], 25			; 00000019H
	jge	SHORT $LN3@xmlXPathDe

; 1370 :         shift[2 * i] = shift[2 * i + 1] = ' ';

	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2+1], 32	; 00000020H
	mov	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+eax*2], 32		; 00000020H
	jmp	SHORT $LN2@xmlXPathDe
$LN3@xmlXPathDe:

; 1371 :     shift[2 * i] = shift[2 * i + 1] = 0;

	mov	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+ecx*2+1], 0
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR _shift$[ebp+edx*2], 0

; 1372 : 
; 1373 : 
; 1374 :     fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1375 : 
; 1376 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN10@xmlXPathDe

; 1377 :         fprintf(output, "Object is empty (NULL)\n");

	push	OFFSET ??_C@_0BI@CIBIAOEE@Object?5is?5empty?5?$CINULL?$CJ?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1378 : 	return;

	jmp	$LN5@xmlXPathDe
$LN10@xmlXPathDe:

; 1379 :     }
; 1380 :     switch(cur->type) {

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv89[ebp], ecx
	cmp	DWORD PTR tv89[ebp], 9
	ja	$LN5@xmlXPathDe
	mov	edx, DWORD PTR tv89[ebp]
	jmp	DWORD PTR $LN40@xmlXPathDe[edx*4]
$LN11@xmlXPathDe:

; 1381 :         case XPATH_UNDEFINED:
; 1382 : 	    fprintf(output, "Object is uninitialized\n");

	push	OFFSET ??_C@_0BJ@EGAONLPM@Object?5is?5uninitialized?6@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8

; 1383 : 	    break;

	jmp	$LN5@xmlXPathDe
$LN12@xmlXPathDe:

; 1384 :         case XPATH_NODESET:
; 1385 : 	    fprintf(output, "Object is a Node Set :\n");

	push	OFFSET ??_C@_0BI@NCNINNMM@Object?5is?5a?5Node?5Set?5?3?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8

; 1386 : 	    xmlXPathDebugDumpNodeSet(output, cur->nodesetval, depth);

	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_xmlXPathDebugDumpNodeSet
	add	esp, 12					; 0000000cH

; 1387 : 	    break;

	jmp	$LN5@xmlXPathDe
$LN13@xmlXPathDe:

; 1388 : 	case XPATH_XSLT_TREE:
; 1389 : 	    fprintf(output, "Object is an XSLT value tree :\n");

	push	OFFSET ??_C@_0CA@NNPHAPO@Object?5is?5an?5XSLT?5value?5tree?5?3?6@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8

; 1390 : 	    xmlXPathDebugDumpValueTree(output, cur->nodesetval, depth);

	mov	ecx, DWORD PTR _depth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_xmlXPathDebugDumpValueTree
	add	esp, 12					; 0000000cH

; 1391 : 	    break;

	jmp	$LN5@xmlXPathDe
$LN14@xmlXPathDe:

; 1392 :         case XPATH_BOOLEAN:
; 1393 : 	    fprintf(output, "Object is a Boolean : ");

	push	OFFSET ??_C@_0BH@GPCPEGOI@Object?5is?5a?5Boolean?5?3?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1394 : 	    if (cur->boolval) fprintf(output, "true\n");

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN15@xmlXPathDe
	push	OFFSET ??_C@_05LFIOBDML@true?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN16@xmlXPathDe
$LN15@xmlXPathDe:

; 1395 : 	    else fprintf(output, "false\n");

	push	OFFSET ??_C@_06NIOGPBNO@false?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8
$LN16@xmlXPathDe:

; 1396 : 	    break;

	jmp	$LN5@xmlXPathDe
$LN17@xmlXPathDe:

; 1397 :         case XPATH_NUMBER:
; 1398 : 	    switch (xmlXPathIsInf(cur->floatval)) {

	mov	eax, DWORD PTR _cur$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	mov	DWORD PTR tv147[ebp], eax
	cmp	DWORD PTR tv147[ebp], -1
	je	SHORT $LN19@xmlXPathDe
	cmp	DWORD PTR tv147[ebp], 1
	je	SHORT $LN18@xmlXPathDe
	jmp	SHORT $LN20@xmlXPathDe
$LN18@xmlXPathDe:

; 1399 : 	    case 1:
; 1400 : 		fprintf(output, "Object is a number : Infinity\n");

	push	OFFSET ??_C@_0BP@DBNKIPBA@Object?5is?5a?5number?5?3?5Infinity?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8

; 1401 : 		break;

	jmp	$LN7@xmlXPathDe
$LN19@xmlXPathDe:

; 1402 : 	    case -1:
; 1403 : 		fprintf(output, "Object is a number : -Infinity\n");

	push	OFFSET ??_C@_0CA@CMBCDMBH@Object?5is?5a?5number?5?3?5?9Infinity?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1404 : 		break;

	jmp	SHORT $LN7@xmlXPathDe
$LN20@xmlXPathDe:

; 1405 : 	    default:
; 1406 : 		if (xmlXPathIsNaN(cur->floatval)) {

	mov	eax, DWORD PTR _cur$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@xmlXPathDe

; 1407 : 		    fprintf(output, "Object is a number : NaN\n");

	push	OFFSET ??_C@_0BK@JAENJFCB@Object?5is?5a?5number?5?3?5NaN?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8
	jmp	SHORT $LN24@xmlXPathDe
$LN21@xmlXPathDe:

; 1408 : 		} else if (cur->floatval == 0) {

	mov	edx, DWORD PTR _cur$[ebp]
	movsd	xmm0, QWORD PTR [edx+16]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN23@xmlXPathDe

; 1409 :                     /* Omit sign for negative zero. */
; 1410 : 		    fprintf(output, "Object is a number : 0\n");

	push	OFFSET ??_C@_0BI@KDLCNKPI@Object?5is?5a?5number?5?3?50?6@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8

; 1411 : 		} else {

	jmp	SHORT $LN24@xmlXPathDe
$LN23@xmlXPathDe:

; 1412 : 		    fprintf(output, "Object is a number : %0g\n", cur->floatval);

	mov	ecx, DWORD PTR _cur$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET ??_C@_0BK@DKICMGNF@Object?5is?5a?5number?5?3?5?$CF0g?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 16					; 00000010H
$LN24@xmlXPathDe:
$LN7@xmlXPathDe:

; 1413 : 		}
; 1414 : 	    }
; 1415 : 	    break;

	jmp	$LN5@xmlXPathDe
$LN25@xmlXPathDe:

; 1416 :         case XPATH_STRING:
; 1417 : 	    fprintf(output, "Object is a string : ");

	push	OFFSET ??_C@_0BG@IHKNOBPJ@Object?5is?5a?5string?5?3?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8

; 1418 : 	    xmlDebugDumpString(output, cur->stringval);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_xmlDebugDumpString
	add	esp, 8

; 1419 : 	    fprintf(output, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8

; 1420 : 	    break;

	jmp	$LN5@xmlXPathDe
$LN26@xmlXPathDe:

; 1421 : 	case XPATH_POINT:
; 1422 : 	    fprintf(output, "Object is a point : index %d in node", cur->index);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	push	OFFSET ??_C@_0CF@IDHPHOMH@Object?5is?5a?5point?5?3?5index?5?$CFd?5in@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1423 : 	    xmlXPathDebugDumpNode(output, (xmlNodePtr) cur->user, depth + 1);

	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_xmlXPathDebugDumpNode
	add	esp, 12					; 0000000cH

; 1424 : 	    fprintf(output, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8

; 1425 : 	    break;

	jmp	$LN5@xmlXPathDe
$LN27@xmlXPathDe:

; 1426 : 	case XPATH_RANGE:
; 1427 : 	    if ((cur->user2 == NULL) ||

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN30@xmlXPathDe
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	cmp	ecx, DWORD PTR [eax+28]
	jne	$LN28@xmlXPathDe
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+40]
	jne	SHORT $LN28@xmlXPathDe
$LN30@xmlXPathDe:

; 1428 : 		((cur->user2 == cur->user) && (cur->index == cur->index2))) {
; 1429 : 		fprintf(output, "Object is a collapsed range :\n");

	push	OFFSET ??_C@_0BP@BGPHFANM@Object?5is?5a?5collapsed?5range?5?3?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1430 : 		fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1431 : 		if (cur->index >= 0)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jl	SHORT $LN31@xmlXPathDe

; 1432 : 		    fprintf(output, "index %d in ", cur->index);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	push	OFFSET ??_C@_0N@IDICPBLK@index?5?$CFd?5in?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN31@xmlXPathDe:

; 1433 : 		fprintf(output, "node\n");

	push	OFFSET ??_C@_05GHBGFBPP@node?6@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8

; 1434 : 		xmlXPathDebugDumpNode(output, (xmlNodePtr) cur->user,

	mov	ecx, DWORD PTR _depth$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_xmlXPathDebugDumpNode
	add	esp, 12					; 0000000cH

; 1435 : 			              depth + 1);
; 1436 : 	    } else  {

	jmp	$LN29@xmlXPathDe
$LN28@xmlXPathDe:

; 1437 : 		fprintf(output, "Object is a range :\n");

	push	OFFSET ??_C@_0BF@JIJMPGFP@Object?5is?5a?5range?5?3?6@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1438 : 		fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1439 : 		fprintf(output, "From ");

	push	OFFSET ??_C@_05KCOAJPAG@From?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1440 : 		if (cur->index >= 0)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jl	SHORT $LN32@xmlXPathDe

; 1441 : 		    fprintf(output, "index %d in ", cur->index);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	push	OFFSET ??_C@_0N@IDICPBLK@index?5?$CFd?5in?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN32@xmlXPathDe:

; 1442 : 		fprintf(output, "node\n");

	push	OFFSET ??_C@_05GHBGFBPP@node?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8

; 1443 : 		xmlXPathDebugDumpNode(output, (xmlNodePtr) cur->user,

	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_xmlXPathDebugDumpNode
	add	esp, 12					; 0000000cH

; 1444 : 			              depth + 1);
; 1445 : 		fprintf(output, "%s", shift);

	lea	eax, DWORD PTR _shift$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1446 : 		fprintf(output, "To ");

	push	OFFSET ??_C@_03EMNLBAKJ@To?5@
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_fprintf
	add	esp, 8

; 1447 : 		if (cur->index2 >= 0)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jl	SHORT $LN33@xmlXPathDe

; 1448 : 		    fprintf(output, "index %d in ", cur->index2);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	push	OFFSET ??_C@_0N@IDICPBLK@index?5?$CFd?5in?5@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN33@xmlXPathDe:

; 1449 : 		fprintf(output, "node\n");

	push	OFFSET ??_C@_05GHBGFBPP@node?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8

; 1450 : 		xmlXPathDebugDumpNode(output, (xmlNodePtr) cur->user2,

	mov	edx, DWORD PTR _depth$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_xmlXPathDebugDumpNode
	add	esp, 12					; 0000000cH

; 1451 : 			              depth + 1);
; 1452 : 		fprintf(output, "\n");

	push	OFFSET ??_C@_01EEMJAFIK@?6@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
$LN29@xmlXPathDe:

; 1453 : 	    }
; 1454 : 	    break;

	jmp	SHORT $LN5@xmlXPathDe
$LN34@xmlXPathDe:

; 1455 : 	case XPATH_LOCATIONSET:
; 1456 : #if defined(LIBXML_XPTR_ENABLED)
; 1457 : 	    fprintf(output, "Object is a Location Set:\n");

	push	OFFSET ??_C@_0BL@DOOMBINH@Object?5is?5a?5Location?5Set?3?6@
	mov	ecx, DWORD PTR _output$[ebp]
	push	ecx
	call	_fprintf
	add	esp, 8

; 1458 : 	    xmlXPathDebugDumpLocationSet(output,

	mov	edx, DWORD PTR _depth$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR _output$[ebp]
	push	edx
	call	_xmlXPathDebugDumpLocationSet
	add	esp, 12					; 0000000cH

; 1459 : 		    (xmlLocationSetPtr) cur->user, depth);
; 1460 : #endif
; 1461 : 	    break;

	jmp	SHORT $LN5@xmlXPathDe
$LN35@xmlXPathDe:

; 1462 : 	case XPATH_USERS:
; 1463 : 	    fprintf(output, "Object is user defined\n");

	push	OFFSET ??_C@_0BI@JJDBNCDG@Object?5is?5user?5defined?6@
	mov	eax, DWORD PTR _output$[ebp]
	push	eax
	call	_fprintf
	add	esp, 8
$LN5@xmlXPathDe:

; 1464 : 	    break;
; 1465 :     }
; 1466 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@xmlXPathDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 120				; 00000078H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN39@xmlXPathDe:
	DD	1
	DD	$LN38@xmlXPathDe
$LN38@xmlXPathDe:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN37@xmlXPathDe
$LN37@xmlXPathDe:
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	102					; 00000066H
	DB	116					; 00000074H
	DB	0
	npad	2
$LN40@xmlXPathDe:
	DD	$LN11@xmlXPathDe
	DD	$LN12@xmlXPathDe
	DD	$LN14@xmlXPathDe
	DD	$LN17@xmlXPathDe
	DD	$LN25@xmlXPathDe
	DD	$LN26@xmlXPathDe
	DD	$LN27@xmlXPathDe
	DD	$LN34@xmlXPathDe
	DD	$LN35@xmlXPathDe
	DD	$LN13@xmlXPathDe
_xmlXPathDebugDumpObject ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathErr
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_xmlXPathErr PROC					; COMDAT

; 686  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 687  :     if ((error < 0) || (error > MAXERRNO))

	cmp	DWORD PTR _error$[ebp], 0
	jl	SHORT $LN3@xmlXPathEr
	cmp	DWORD PTR _error$[ebp], 25		; 00000019H
	jle	SHORT $LN2@xmlXPathEr
$LN3@xmlXPathEr:

; 688  : 	error = MAXERRNO;

	mov	DWORD PTR _error$[ebp], 25		; 00000019H
$LN2@xmlXPathEr:

; 689  :     if (ctxt == NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN4@xmlXPathEr

; 690  : 	__xmlRaiseError(NULL, NULL, NULL,

	mov	eax, DWORD PTR _error$[ebp]
	mov	ecx, DWORD PTR _xmlXPathErrorMessages[eax*4]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	2
	mov	edx, DWORD PTR _error$[ebp]
	add	edx, 1200				; 000004b0H
	push	edx
	push	12					; 0000000cH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 691  : 			NULL, NULL, XML_FROM_XPATH,
; 692  : 			error + XML_XPATH_EXPRESSION_OK - XPATH_EXPRESSION_OK,
; 693  : 			XML_ERR_ERROR, NULL, 0,
; 694  : 			NULL, NULL, NULL, 0, 0,
; 695  : 			"%s", xmlXPathErrorMessages[error]);
; 696  : 	return;

	jmp	$LN1@xmlXPathEr
$LN4@xmlXPathEr:

; 697  :     }
; 698  :     ctxt->error = error;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 699  :     if (ctxt->context == NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN5@xmlXPathEr

; 700  : 	__xmlRaiseError(NULL, NULL, NULL,

	mov	eax, DWORD PTR _error$[ebp]
	mov	ecx, DWORD PTR _xmlXPathErrorMessages[eax*4]
	push	ecx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [edx]
	sub	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	push	0
	push	2
	mov	ecx, DWORD PTR _error$[ebp]
	add	ecx, 1200				; 000004b0H
	push	ecx
	push	12					; 0000000cH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 701  : 			NULL, NULL, XML_FROM_XPATH,
; 702  : 			error + XML_XPATH_EXPRESSION_OK - XPATH_EXPRESSION_OK,
; 703  : 			XML_ERR_ERROR, NULL, 0,
; 704  : 			(const char *) ctxt->base, NULL, NULL,
; 705  : 			ctxt->cur - ctxt->base, 0,
; 706  : 			"%s", xmlXPathErrorMessages[error]);
; 707  : 	return;

	jmp	$LN1@xmlXPathEr
$LN5@xmlXPathEr:

; 708  :     }
; 709  : 
; 710  :     /* cleanup current last error */
; 711  :     xmlResetError(&ctxt->context->lastError);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 136				; 00000088H
	push	eax
	call	_xmlResetError
	add	esp, 4

; 712  : 
; 713  :     ctxt->context->lastError.domain = XML_FROM_XPATH;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+136], 12			; 0000000cH

; 714  :     ctxt->context->lastError.code = error + XML_XPATH_EXPRESSION_OK -

	mov	eax, DWORD PTR _error$[ebp]
	add	eax, 1200				; 000004b0H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+140], eax

; 715  :                            XPATH_EXPRESSION_OK;
; 716  :     ctxt->context->lastError.level = XML_ERR_ERROR;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+148], 2

; 717  :     ctxt->context->lastError.str1 = (char *) xmlStrdup(ctxt->base);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+160], eax

; 718  :     ctxt->context->lastError.int1 = ctxt->cur - ctxt->base;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [eax]
	sub	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+172], edx

; 719  :     ctxt->context->lastError.node = ctxt->context->debugNode;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax+188]
	mov	DWORD PTR [edx+184], eax

; 720  :     if (ctxt->context->error != NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+132], 0
	je	SHORT $LN6@xmlXPathEr

; 721  : 	ctxt->context->error(ctxt->context->userData,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 136				; 00000088H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+128]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+132]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 722  : 	                     &ctxt->context->lastError);
; 723  :     } else {

	jmp	SHORT $LN1@xmlXPathEr
$LN6@xmlXPathEr:

; 724  : 	__xmlRaiseError(NULL, NULL, NULL,

	mov	edx, DWORD PTR _error$[ebp]
	mov	eax, DWORD PTR _xmlXPathErrorMessages[edx*4]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [ecx]
	sub	eax, DWORD PTR [edx+4]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _error$[ebp]
	add	eax, 1200				; 000004b0H
	push	eax
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+188]
	push	eax
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
$LN1@xmlXPathEr:

; 725  : 			NULL, ctxt->context->debugNode, XML_FROM_XPATH,
; 726  : 			error + XML_XPATH_EXPRESSION_OK - XPATH_EXPRESSION_OK,
; 727  : 			XML_ERR_ERROR, NULL, 0,
; 728  : 			(const char *) ctxt->base, NULL, NULL,
; 729  : 			ctxt->cur - ctxt->base, 0,
; 730  : 			"%s", xmlXPathErrorMessages[error]);
; 731  :     }
; 732  : 
; 733  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathErr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPatherror
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_file$ = 12						; size = 4
_line$ = 16						; size = 4
_no$ = 20						; size = 4
_xmlXPatherror PROC					; COMDAT

; 746  :               int line ATTRIBUTE_UNUSED, int no) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 747  :     xmlXPathErr(ctxt, no);

	mov	eax, DWORD PTR _no$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathErr
	add	esp, 8

; 748  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPatherror ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisterFuncLookup
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_f$ = 12						; size = 4
_funcCtxt$ = 16						; size = 4
_xmlXPathRegisterFuncLookup PROC			; COMDAT

; 4897 : 			    void *funcCtxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4898 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathRe

; 4899 : 	return;

	jmp	SHORT $LN1@xmlXPathRe
$LN2@xmlXPathRe:

; 4900 :     ctxt->funcLookupFunc = f;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+112], ecx

; 4901 :     ctxt->funcLookupData = funcCtxt;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _funcCtxt$[ebp]
	mov	DWORD PTR [edx+116], eax
$LN1@xmlXPathRe:

; 4902 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisterFuncLookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathRegisterVariableLookup
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_f$ = 12						; size = 4
_data$ = 16						; size = 4
_xmlXPathRegisterVariableLookup PROC			; COMDAT

; 5050 : 	 xmlXPathVariableLookupFunc f, void *data) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5051 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathRe

; 5052 : 	return;

	jmp	SHORT $LN1@xmlXPathRe
$LN2@xmlXPathRe:

; 5053 :     ctxt->varLookupFunc = f;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [eax+92], ecx

; 5054 :     ctxt->varLookupData = data;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR [edx+96], eax
$LN1@xmlXPathRe:

; 5055 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathRegisterVariableLookup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathPopExternal
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_obj$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathPopExternal PROC				; COMDAT

; 3003 : xmlXPathPopExternal (xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3004 :     xmlXPathObjectPtr obj;
; 3005 :     void * ret;
; 3006 : 
; 3007 :     if ((ctxt == NULL) || (ctxt->value == NULL)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathPo
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN2@xmlXPathPo
$LN3@xmlXPathPo:

; 3008 : 	xmlXPathSetError(ctxt, XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	push	3008					; 00000bc0H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPatherror
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN4@xmlXPathPo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 10			; 0000000aH
$LN4@xmlXPathPo:

; 3009 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPo
$LN2@xmlXPathPo:

; 3010 :     }
; 3011 :     if (ctxt->value->type != XPATH_USERS) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 8
	je	SHORT $LN5@xmlXPathPo

; 3012 : 	xmlXPathSetTypeError(ctxt);

	push	11					; 0000000bH
	push	3012					; 00000bc4H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPatherror
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN6@xmlXPathPo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 11			; 0000000bH
$LN6@xmlXPathPo:

; 3013 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPo
$LN5@xmlXPathPo:

; 3014 :     }
; 3015 :     obj = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 3016 :     ret = obj->user;

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _ret$[ebp], eax

; 3017 :     obj->user = NULL;

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 3018 :     xmlXPathReleaseObject(ctxt->context, obj);

	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 3019 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathPo:

; 3020 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathPopExternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathPopNodeSet
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_obj$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathPopNodeSet PROC				; COMDAT

; 2968 : xmlXPathPopNodeSet (xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2969 :     xmlXPathObjectPtr obj;
; 2970 :     xmlNodeSetPtr ret;
; 2971 : 
; 2972 :     if (ctxt == NULL) return(NULL);

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathPo
	xor	eax, eax
	jmp	$LN1@xmlXPathPo
$LN2@xmlXPathPo:

; 2973 :     if (ctxt->value == NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@xmlXPathPo

; 2974 : 	xmlXPathSetError(ctxt, XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	push	2974					; 00000b9eH
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPatherror
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN4@xmlXPathPo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 10			; 0000000aH
$LN4@xmlXPathPo:

; 2975 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathPo
$LN3@xmlXPathPo:

; 2976 :     }
; 2977 :     if (!xmlXPathStackIsNodeSet(ctxt)) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN6@xmlXPathPo
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN5@xmlXPathPo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 9
	je	SHORT $LN5@xmlXPathPo
$LN6@xmlXPathPo:

; 2978 : 	xmlXPathSetTypeError(ctxt);

	push	11					; 0000000bH
	push	2978					; 00000ba2H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPatherror
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN7@xmlXPathPo
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+8], 11			; 0000000bH
$LN7@xmlXPathPo:

; 2979 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPo
$LN5@xmlXPathPo:

; 2980 :     }
; 2981 :     obj = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 2982 :     ret = obj->nodesetval;

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _ret$[ebp], eax

; 2983 : #if 0
; 2984 :     /* to fix memory leak of not clearing obj->user */
; 2985 :     if (obj->boolval && obj->user != NULL)
; 2986 :         xmlFreeNodeList((xmlNodePtr) obj->user);
; 2987 : #endif
; 2988 :     obj->nodesetval = NULL;

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 2989 :     xmlXPathReleaseObject(ctxt->context, obj);

	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 2990 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathPo:

; 2991 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathPopNodeSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathPopString
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_obj$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathPopString PROC					; COMDAT

; 2941 : xmlXPathPopString (xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2942 :     xmlXPathObjectPtr obj;
; 2943 :     xmlChar * ret;
; 2944 : 
; 2945 :     obj = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 2946 :     if (obj == NULL) {

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN2@xmlXPathPo

; 2947 : 	xmlXPathSetError(ctxt, XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	push	2947					; 00000b83H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPatherror
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathPo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 10			; 0000000aH
$LN3@xmlXPathPo:

; 2948 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPo
$LN2@xmlXPathPo:

; 2949 :     }
; 2950 :     ret = xmlXPathCastToString(obj);	/* this does required strdup */

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	_xmlXPathCastToString
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 2951 :     /* TODO: needs refactoring somewhere else */
; 2952 :     if (obj->stringval == ret)

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	cmp	edx, DWORD PTR _ret$[ebp]
	jne	SHORT $LN4@xmlXPathPo

; 2953 : 	obj->stringval = NULL;

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN4@xmlXPathPo:

; 2954 :     xmlXPathReleaseObject(ctxt->context, obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 2955 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathPo:

; 2956 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathPopString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathPopNumber
_TEXT	SEGMENT
_ret$ = -12						; size = 8
_obj$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathPopNumber PROC					; COMDAT

; 2914 : xmlXPathPopNumber (xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2915 :     xmlXPathObjectPtr obj;
; 2916 :     double ret;
; 2917 : 
; 2918 :     obj = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 2919 :     if (obj == NULL) {

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN2@xmlXPathPo

; 2920 : 	xmlXPathSetError(ctxt, XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	push	2920					; 00000b68H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPatherror
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathPo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 10			; 0000000aH
$LN3@xmlXPathPo:

; 2921 : 	return(0);

	fldz
	jmp	SHORT $LN1@xmlXPathPo
$LN2@xmlXPathPo:

; 2922 :     }
; 2923 :     if (obj->type != XPATH_NUMBER)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax], 3
	je	SHORT $LN4@xmlXPathPo

; 2924 : 	ret = xmlXPathCastToNumber(obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	_xmlXPathCastToNumber
	add	esp, 4
	fstp	QWORD PTR _ret$[ebp]
	jmp	SHORT $LN5@xmlXPathPo
$LN4@xmlXPathPo:

; 2925 :     else
; 2926 :         ret = obj->floatval;

	mov	edx, DWORD PTR _obj$[ebp]
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR _ret$[ebp], xmm0
$LN5@xmlXPathPo:

; 2927 :     xmlXPathReleaseObject(ctxt->context, obj);

	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlXPathReleaseObject
	add	esp, 8

; 2928 :     return(ret);

	fld	QWORD PTR _ret$[ebp]
$LN1@xmlXPathPo:

; 2929 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathPopNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathPopBoolean
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_obj$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlXPathPopBoolean PROC				; COMDAT

; 2887 : xmlXPathPopBoolean (xmlXPathParserContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2888 :     xmlXPathObjectPtr obj;
; 2889 :     int ret;
; 2890 : 
; 2891 :     obj = valuePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _obj$[ebp], eax

; 2892 :     if (obj == NULL) {

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN2@xmlXPathPo

; 2893 : 	xmlXPathSetError(ctxt, XPATH_INVALID_OPERAND);

	push	10					; 0000000aH
	push	2893					; 00000b4dH
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPatherror
	add	esp, 16					; 00000010H
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlXPathPo
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+8], 10			; 0000000aH
$LN3@xmlXPathPo:

; 2894 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathPo
$LN2@xmlXPathPo:

; 2895 :     }
; 2896 :     if (obj->type != XPATH_BOOLEAN)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax], 2
	je	SHORT $LN4@xmlXPathPo

; 2897 : 	ret = xmlXPathCastToBoolean(obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	call	_xmlXPathCastToBoolean
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN5@xmlXPathPo
$LN4@xmlXPathPo:

; 2898 :     else
; 2899 :         ret = obj->boolval;

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _ret$[ebp], eax
$LN5@xmlXPathPo:

; 2900 :     xmlXPathReleaseObject(ctxt->context, obj);

	mov	ecx, DWORD PTR _obj$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlXPathReleaseObject
	add	esp, 8

; 2901 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathPo:

; 2902 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathPopBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathIsInf
_TEXT	SEGMENT
tv70 = -8						; size = 4
tv69 = -4						; size = 4
_val$ = 8						; size = 8
_xmlXPathIsInf PROC					; COMDAT

; 526  : xmlXPathIsInf(double val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 527  : #ifdef isinf
; 528  :     return isinf(val) ? (val > 0 ? 1 : -1) : 0;

	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp___dclass
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	cmp	eax, 1
	jne	SHORT $LN5@xmlXPathIs
	movsd	xmm0, QWORD PTR _val$[ebp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN3@xmlXPathIs
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@xmlXPathIs
$LN3@xmlXPathIs:
	mov	DWORD PTR tv69[ebp], -1
$LN4@xmlXPathIs:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR tv70[ebp], ecx
	jmp	SHORT $LN6@xmlXPathIs
$LN5@xmlXPathIs:
	mov	DWORD PTR tv70[ebp], 0
$LN6@xmlXPathIs:
	mov	eax, DWORD PTR tv70[ebp]

; 529  : #else
; 530  :     if (val >= INFINITY)
; 531  :         return 1;
; 532  :     if (val <= -INFINITY)
; 533  :         return -1;
; 534  :     return 0;
; 535  : #endif
; 536  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathIsInf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathIsNaN
_TEXT	SEGMENT
tv68 = -4						; size = 4
_val$ = 8						; size = 8
_xmlXPathIsNaN PROC					; COMDAT

; 511  : xmlXPathIsNaN(double val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 512  : #ifdef isnan
; 513  :     return isnan(val);

	mov	esi, esp
	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	DWORD PTR __imp___dclass
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	cwde
	cmp	eax, 2
	jne	SHORT $LN3@xmlXPathIs
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@xmlXPathIs
$LN3@xmlXPathIs:
	mov	DWORD PTR tv68[ebp], 0
$LN4@xmlXPathIs:
	mov	eax, DWORD PTR tv68[ebp]

; 514  : #else
; 515  :     return !(val == val);
; 516  : #endif
; 517  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathIsNaN ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathInit
_TEXT	SEGMENT
_xmlXPathInit PROC					; COMDAT

; 498  : xmlXPathInit(void) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 499  :     xmlXPathNAN = NAN;

	movsd	xmm0, QWORD PTR __real@fff8000000000000
	movsd	QWORD PTR _xmlXPathNAN, xmm0

; 500  :     xmlXPathPINF = INFINITY;

	movsd	xmm0, QWORD PTR __real@7ff0000000000000
	movsd	QWORD PTR _xmlXPathPINF, xmm0

; 501  :     xmlXPathNINF = -INFINITY;

	movsd	xmm0, QWORD PTR __real@fff0000000000000
	movsd	QWORD PTR _xmlXPathNINF, xmm0

; 502  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFreeCompExpr
_TEXT	SEGMENT
_i$ = -8						; size = 4
_op$ = -4						; size = 4
_comp$ = 8						; size = 4
_xmlXPathFreeCompExpr PROC				; COMDAT

; 1014 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 1015 :     xmlXPathStepOpPtr op;
; 1016 :     int i;
; 1017 : 
; 1018 :     if (comp == NULL)

	cmp	DWORD PTR _comp$[ebp], 0
	jne	SHORT $LN8@xmlXPathFr

; 1019 :         return;

	jmp	$LN1@xmlXPathFr
$LN8@xmlXPathFr:

; 1020 :     if (comp->dict == NULL) {

	mov	eax, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	$LN9@xmlXPathFr

; 1021 : 	for (i = 0; i < comp->nbStep; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlXPathFr
$LN2@xmlXPathFr:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlXPathFr:
	mov	edx, DWORD PTR _comp$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@xmlXPathFr

; 1022 : 	    op = &comp->steps[i];

	imul	ecx, DWORD PTR _i$[ebp], 40
	mov	edx, DWORD PTR _comp$[ebp]
	add	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR _op$[ebp], ecx

; 1023 : 	    if (op->value4 != NULL) {

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN11@xmlXPathFr

; 1024 : 		if (op->op == XPATH_OP_VALUE)

	mov	ecx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [ecx], 11			; 0000000bH
	jne	SHORT $LN12@xmlXPathFr

; 1025 : 		    xmlXPathFreeObject(op->value4);

	mov	edx, DWORD PTR _op$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlXPathFreeObject
	add	esp, 4
	jmp	SHORT $LN11@xmlXPathFr
$LN12@xmlXPathFr:

; 1026 : 		else
; 1027 : 		    xmlFree(op->value4);

	mov	esi, esp
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlXPathFr:

; 1028 : 	    }
; 1029 : 	    if (op->value5 != NULL)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN14@xmlXPathFr

; 1030 : 		xmlFree(op->value5);

	mov	esi, esp
	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@xmlXPathFr:

; 1031 : 	}

	jmp	SHORT $LN2@xmlXPathFr
$LN3@xmlXPathFr:

; 1032 :     } else {

	jmp	SHORT $LN10@xmlXPathFr
$LN9@xmlXPathFr:

; 1033 : 	for (i = 0; i < comp->nbStep; i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@xmlXPathFr
$LN5@xmlXPathFr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@xmlXPathFr:
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx]
	jge	SHORT $LN6@xmlXPathFr

; 1034 : 	    op = &comp->steps[i];

	imul	eax, DWORD PTR _i$[ebp], 40
	mov	ecx, DWORD PTR _comp$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR _op$[ebp], eax

; 1035 : 	    if (op->value4 != NULL) {

	mov	edx, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN15@xmlXPathFr

; 1036 : 		if (op->op == XPATH_OP_VALUE)

	mov	eax, DWORD PTR _op$[ebp]
	cmp	DWORD PTR [eax], 11			; 0000000bH
	jne	SHORT $LN15@xmlXPathFr

; 1037 : 		    xmlXPathFreeObject(op->value4);

	mov	ecx, DWORD PTR _op$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4
$LN15@xmlXPathFr:

; 1038 : 	    }
; 1039 : 	}

	jmp	SHORT $LN5@xmlXPathFr
$LN6@xmlXPathFr:

; 1040 :         xmlDictFree(comp->dict);

	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlDictFree
	add	esp, 4
$LN10@xmlXPathFr:

; 1041 :     }
; 1042 :     if (comp->steps != NULL) {

	mov	edx, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN17@xmlXPathFr

; 1043 :         xmlFree(comp->steps);

	mov	esi, esp
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@xmlXPathFr:

; 1044 :     }
; 1045 : #ifdef DEBUG_EVAL_COUNTS
; 1046 :     if (comp->string != NULL) {
; 1047 :         xmlFree(comp->string);
; 1048 :     }
; 1049 : #endif
; 1050 : #ifdef XPATH_STREAMING
; 1051 :     if (comp->stream != NULL) {

	mov	edx, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN18@xmlXPathFr

; 1052 :         xmlFreePatternList(comp->stream);

	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlFreePatternList
	add	esp, 4
$LN18@xmlXPathFr:

; 1053 :     }
; 1054 : #endif
; 1055 :     if (comp->expr != NULL) {

	mov	edx, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN19@xmlXPathFr

; 1056 :         xmlFree(comp->expr);

	mov	esi, esp
	mov	eax, DWORD PTR _comp$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@xmlXPathFr:

; 1057 :     }
; 1058 : 
; 1059 :     xmlFree(comp);

	mov	esi, esp
	mov	edx, DWORD PTR _comp$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathFr:

; 1060 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathFreeCompExpr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompiledEvalToBoolean
_TEXT	SEGMENT
_comp$ = 8						; size = 4
_ctxt$ = 12						; size = 4
_xmlXPathCompiledEvalToBoolean PROC			; COMDAT

; 14804: {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14805:     return(xmlXPathCompiledEvalInternal(comp, ctxt, NULL, 1));

	push	1
	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _comp$[ebp]
	push	ecx
	call	_xmlXPathCompiledEvalInternal
	add	esp, 16					; 00000010H

; 14806: }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathCompiledEvalToBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompiledEval
_TEXT	SEGMENT
_res$ = -8						; size = 4
_comp$ = 8						; size = 4
_ctx$ = 12						; size = 4
_xmlXPathCompiledEval PROC				; COMDAT

; 14783: {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14784:     xmlXPathObjectPtr res = NULL;

	mov	DWORD PTR _res$[ebp], 0

; 14785: 
; 14786:     xmlXPathCompiledEvalInternal(comp, ctx, &res, 0);

	push	0
	lea	eax, DWORD PTR _res$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _comp$[ebp]
	push	edx
	call	_xmlXPathCompiledEvalInternal
	add	esp, 16					; 00000010H

; 14787:     return(res);

	mov	eax, DWORD PTR _res$[ebp]

; 14788: }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@xmlXPathCo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@xmlXPathCo:
	DD	1
	DD	$LN4@xmlXPathCo
$LN4@xmlXPathCo:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN3@xmlXPathCo
$LN3@xmlXPathCo:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_xmlXPathCompiledEval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCtxtCompile
_TEXT	SEGMENT
_comp$ = -8						; size = 4
_pctxt$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_str$ = 12						; size = 4
_xmlXPathCtxtCompile PROC				; COMDAT

; 14629: xmlXPathCtxtCompile(xmlXPathContextPtr ctxt, const xmlChar *str) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14630:     xmlXPathParserContextPtr pctxt;
; 14631:     xmlXPathCompExprPtr comp;
; 14632: 
; 14633: #ifdef XPATH_STREAMING
; 14634:     comp = xmlXPathTryStreamCompile(ctxt, str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathTryStreamCompile
	add	esp, 8
	mov	DWORD PTR _comp$[ebp], eax

; 14635:     if (comp != NULL)

	cmp	DWORD PTR _comp$[ebp], 0
	je	SHORT $LN2@xmlXPathCt

; 14636:         return(comp);

	mov	eax, DWORD PTR _comp$[ebp]
	jmp	$LN1@xmlXPathCt
$LN2@xmlXPathCt:

; 14637: #endif
; 14638: 
; 14639:     xmlXPathInit();

	call	_xmlXPathInit

; 14640: 
; 14641:     pctxt = xmlXPathNewParserContext(str, ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_xmlXPathNewParserContext
	add	esp, 8
	mov	DWORD PTR _pctxt$[ebp], eax

; 14642:     if (pctxt == NULL)

	cmp	DWORD PTR _pctxt$[ebp], 0
	jne	SHORT $LN3@xmlXPathCt

; 14643:         return NULL;

	xor	eax, eax
	jmp	$LN1@xmlXPathCt
$LN3@xmlXPathCt:

; 14644:     xmlXPathCompileExpr(pctxt, 1);

	push	1
	mov	ecx, DWORD PTR _pctxt$[ebp]
	push	ecx
	call	_xmlXPathCompileExpr
	add	esp, 8

; 14645: 
; 14646:     if( pctxt->error != XPATH_EXPRESSION_OK )

	mov	edx, DWORD PTR _pctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN4@xmlXPathCt

; 14647:     {
; 14648:         xmlXPathFreeParserContext(pctxt);

	mov	eax, DWORD PTR _pctxt$[ebp]
	push	eax
	call	_xmlXPathFreeParserContext
	add	esp, 4

; 14649:         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathCt
$LN4@xmlXPathCt:

; 14650:     }
; 14651: 
; 14652:     if (*pctxt->cur != 0) {

	mov	ecx, DWORD PTR _pctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN5@xmlXPathCt

; 14653: 	/*
; 14654: 	 * aleksey: in some cases this line prints *second* error message
; 14655: 	 * (see bug #78858) and probably this should be fixed.
; 14656: 	 * However, we are not sure that all error messages are printed
; 14657: 	 * out in other places. It's not critical so we leave it as-is for now
; 14658: 	 */
; 14659: 	xmlXPatherror(pctxt, __FILE__, __LINE__, XPATH_EXPR_ERROR);

	push	7
	push	14659					; 00003943H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	mov	ecx, DWORD PTR _pctxt$[ebp]
	push	ecx
	call	_xmlXPatherror
	add	esp, 16					; 00000010H

; 14660: 	comp = NULL;

	mov	DWORD PTR _comp$[ebp], 0

; 14661:     } else {

	jmp	SHORT $LN6@xmlXPathCt
$LN5@xmlXPathCt:

; 14662: 	comp = pctxt->comp;

	mov	edx, DWORD PTR _pctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _comp$[ebp], eax

; 14663: 	pctxt->comp = NULL;

	mov	ecx, DWORD PTR _pctxt$[ebp]
	mov	DWORD PTR [ecx+32], 0
$LN6@xmlXPathCt:

; 14664:     }
; 14665:     xmlXPathFreeParserContext(pctxt);

	mov	edx, DWORD PTR _pctxt$[ebp]
	push	edx
	call	_xmlXPathFreeParserContext
	add	esp, 4

; 14666: 
; 14667:     if (comp != NULL) {

	cmp	DWORD PTR _comp$[ebp], 0
	je	SHORT $LN7@xmlXPathCt

; 14668: 	comp->expr = xmlStrdup(str);

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _comp$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 14669: #ifdef DEBUG_EVAL_COUNTS
; 14670: 	comp->string = xmlStrdup(str);
; 14671: 	comp->nb = 0;
; 14672: #endif
; 14673: 	if ((comp->nbStep > 1) && (comp->last >= 0)) {

	mov	edx, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [edx], 1
	jle	SHORT $LN7@xmlXPathCt
	mov	eax, DWORD PTR _comp$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jl	SHORT $LN7@xmlXPathCt

; 14674: 	    xmlXPathOptimizeExpression(comp, &comp->steps[comp->last]);

	mov	ecx, DWORD PTR _comp$[ebp]
	imul	edx, DWORD PTR [ecx+12], 40
	mov	eax, DWORD PTR _comp$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _comp$[ebp]
	push	ecx
	call	_xmlXPathOptimizeExpression
	add	esp, 8
$LN7@xmlXPathCt:

; 14675: 	}
; 14676:     }
; 14677:     return(comp);

	mov	eax, DWORD PTR _comp$[ebp]
$LN1@xmlXPathCt:

; 14678: }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCtxtCompile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCompile
_TEXT	SEGMENT
_str$ = 8						; size = 4
_xmlXPathCompile PROC					; COMDAT

; 14690: xmlXPathCompile(const xmlChar *str) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14691:     return(xmlXPathCtxtCompile(NULL, str));

	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	push	0
	call	_xmlXPathCtxtCompile
	add	esp, 8

; 14692: }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathCompile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEvalPredicate
_TEXT	SEGMENT
tv86 = -16						; size = 4
tv79 = -12						; size = 4
tv73 = -8						; size = 4
tv67 = -4						; size = 4
_ctxt$ = 8						; size = 4
_res$ = 12						; size = 4
_xmlXPathEvalPredicate PROC				; COMDAT

; 14400: xmlXPathEvalPredicate(xmlXPathContextPtr ctxt, xmlXPathObjectPtr res) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14401:     if ((ctxt == NULL) || (res == NULL)) return(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlXPathEv
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN4@xmlXPathEv
$LN5@xmlXPathEv:
	xor	eax, eax
	jmp	$LN1@xmlXPathEv
$LN4@xmlXPathEv:

; 14402:     switch (res->type) {

	mov	eax, DWORD PTR _res$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	sub	edx, 1
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 8
	ja	$LN11@xmlXPathEv
	mov	eax, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN19@xmlXPathEv[eax*4]
$LN6@xmlXPathEv:

; 14403:         case XPATH_BOOLEAN:
; 14404: 	    return(res->boolval);

	mov	ecx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	$LN1@xmlXPathEv
$LN7@xmlXPathEv:

; 14405:         case XPATH_NUMBER:
; 14406: 	    return(res->floatval == ctxt->proximityPosition);

	mov	edx, DWORD PTR _ctxt$[ebp]
	cvtsi2sd xmm0, DWORD PTR [edx+72]
	mov	eax, DWORD PTR _res$[ebp]
	movsd	xmm1, QWORD PTR [eax+16]
	ucomisd	xmm1, xmm0
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN13@xmlXPathEv
	mov	DWORD PTR tv73[ebp], 1
	jmp	SHORT $LN14@xmlXPathEv
$LN13@xmlXPathEv:
	mov	DWORD PTR tv73[ebp], 0
$LN14@xmlXPathEv:
	mov	eax, DWORD PTR tv73[ebp]
	jmp	$LN1@xmlXPathEv
$LN8@xmlXPathEv:

; 14407:         case XPATH_NODESET:
; 14408:         case XPATH_XSLT_TREE:
; 14409: 	    if (res->nodesetval == NULL)

	mov	ecx, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN9@xmlXPathEv

; 14410: 		return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathEv
$LN9@xmlXPathEv:

; 14411: 	    return(res->nodesetval->nodeNr != 0);

	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN15@xmlXPathEv
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN16@xmlXPathEv
$LN15@xmlXPathEv:
	mov	DWORD PTR tv79[ebp], 0
$LN16@xmlXPathEv:
	mov	eax, DWORD PTR tv79[ebp]
	jmp	SHORT $LN1@xmlXPathEv
$LN10@xmlXPathEv:

; 14412:         case XPATH_STRING:
; 14413: 	    return((res->stringval != NULL) &&

	mov	ecx, DWORD PTR _res$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN17@xmlXPathEv
	mov	edx, DWORD PTR _res$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	je	SHORT $LN17@xmlXPathEv
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN18@xmlXPathEv
$LN17@xmlXPathEv:
	mov	DWORD PTR tv86[ebp], 0
$LN18@xmlXPathEv:
	mov	eax, DWORD PTR tv86[ebp]
	jmp	SHORT $LN1@xmlXPathEv
$LN11@xmlXPathEv:

; 14414: 	           (xmlStrlen(res->stringval) != 0));
; 14415:         default:
; 14416: 	    STRANGE

	mov	esi, esp
	push	14416					; 00003850H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BJ@DADKHPPP@Internal?5error?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 14417:     }
; 14418:     return(0);

	xor	eax, eax
$LN1@xmlXPathEv:

; 14419: }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN19@xmlXPathEv:
	DD	$LN8@xmlXPathEv
	DD	$LN6@xmlXPathEv
	DD	$LN7@xmlXPathEv
	DD	$LN10@xmlXPathEv
	DD	$LN11@xmlXPathEv
	DD	$LN11@xmlXPathEv
	DD	$LN11@xmlXPathEv
	DD	$LN11@xmlXPathEv
	DD	$LN8@xmlXPathEv
_xmlXPathEvalPredicate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEvalExpression
_TEXT	SEGMENT
_str$ = 8						; size = 4
_ctxt$ = 12						; size = 4
_xmlXPathEvalExpression PROC				; COMDAT

; 14943: xmlXPathEvalExpression(const xmlChar *str, xmlXPathContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14944:     return(xmlXPathEval(str, ctxt));

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_xmlXPathEval
	add	esp, 8

; 14945: }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathEvalExpression ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathEval
_TEXT	SEGMENT
_res$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_str$ = 8						; size = 4
_ctx$ = 12						; size = 4
_xmlXPathEval PROC					; COMDAT

; 14858: xmlXPathEval(const xmlChar *str, xmlXPathContextPtr ctx) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14859:     xmlXPathParserContextPtr ctxt;
; 14860:     xmlXPathObjectPtr res;
; 14861: 
; 14862:     CHECK_CTXT(ctx)

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlXPathEv
	push	OFFSET ??_C@_0BG@PBKLCIKP@NULL?5context?5pointer?6@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	14862					; 00003a0eH
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	3
	push	1
	push	12					; 0000000cH
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 64					; 00000040H
	xor	eax, eax
	jmp	$LN1@xmlXPathEv
$LN2@xmlXPathEv:

; 14863: 
; 14864:     xmlXPathInit();

	call	_xmlXPathInit

; 14865: 
; 14866:     ctxt = xmlXPathNewParserContext(str, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_xmlXPathNewParserContext
	add	esp, 8
	mov	DWORD PTR _ctxt$[ebp], eax

; 14867:     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN3@xmlXPathEv

; 14868:         return NULL;

	xor	eax, eax
	jmp	$LN1@xmlXPathEv
$LN3@xmlXPathEv:

; 14869:     xmlXPathEvalExpr(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathEvalExpr
	add	esp, 4

; 14870: 
; 14871:     if (ctxt->error != XPATH_EXPRESSION_OK) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@xmlXPathEv

; 14872: 	res = NULL;

	mov	DWORD PTR _res$[ebp], 0

; 14873:     } else {

	jmp	SHORT $LN5@xmlXPathEv
$LN4@xmlXPathEv:

; 14874: 	res = valuePop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_valuePop
	add	esp, 4
	mov	DWORD PTR _res$[ebp], eax

; 14875:         if (res == NULL) {

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN6@xmlXPathEv

; 14876:             xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CP@KKKCDCLL@xmlXPathCompiledEval?3?5No?5result@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN5@xmlXPathEv
$LN6@xmlXPathEv:

; 14877:                 "xmlXPathCompiledEval: No result on the stack.\n");
; 14878:         } else if (ctxt->valueNr > 0) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jle	SHORT $LN5@xmlXPathEv

; 14879:             xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	push	OFFSET ??_C@_0DH@OEPEKFKA@xmlXPathCompiledEval?3?5?$CFd?5object@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlXPathEv:

; 14880:                 "xmlXPathCompiledEval: %d object(s) left on the stack.\n",
; 14881:                 ctxt->valueNr);
; 14882:         }
; 14883:     }
; 14884: 
; 14885:     xmlXPathFreeParserContext(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathFreeParserContext
	add	esp, 4

; 14886:     return(res);

	mov	eax, DWORD PTR _res$[ebp]
$LN1@xmlXPathEv:

; 14887: }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathEval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeEval
_TEXT	SEGMENT
_node$ = 8						; size = 4
_str$ = 12						; size = 4
_ctx$ = 16						; size = 4
_xmlXPathNodeEval PROC					; COMDAT

; 14924: xmlXPathNodeEval(xmlNodePtr node, const xmlChar *str, xmlXPathContextPtr ctx) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14925:     if (str == NULL)

	cmp	DWORD PTR _str$[ebp], 0
	jne	SHORT $LN2@xmlXPathNo

; 14926:         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNo
$LN2@xmlXPathNo:

; 14927:     if (xmlXPathSetContextNode(node, ctx) < 0)

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	call	_xmlXPathSetContextNode
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN3@xmlXPathNo

; 14928:         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathNo
$LN3@xmlXPathNo:

; 14929:     return(xmlXPathEval(str, ctx));

	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_xmlXPathEval
	add	esp, 8
$LN1@xmlXPathNo:

; 14930: }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathNodeEval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathSetContextNode
_TEXT	SEGMENT
_node$ = 8						; size = 4
_ctx$ = 12						; size = 4
_xmlXPathSetContextNode PROC				; COMDAT

; 14900: xmlXPathSetContextNode(xmlNodePtr node, xmlXPathContextPtr ctx) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 14901:     if ((node == NULL) || (ctx == NULL))

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN3@xmlXPathSe
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlXPathSe
$LN3@xmlXPathSe:

; 14902:         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathSe
$LN2@xmlXPathSe:

; 14903: 
; 14904:     if (node->doc == ctx->doc) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [eax+32]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN4@xmlXPathSe

; 14905:         ctx->node = node;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 14906: 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathSe
$LN4@xmlXPathSe:

; 14907:     }
; 14908:     return(-1);

	or	eax, -1
$LN1@xmlXPathSe:

; 14909: }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathSetContextNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathOrderDocElems
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_count$ = -4						; size = 4
_doc$ = 8						; size = 4
_xmlXPathOrderDocElems PROC				; COMDAT

; 3226 : xmlXPathOrderDocElems(xmlDocPtr doc) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3227 :     ptrdiff_t count = 0;

	mov	DWORD PTR _count$[ebp], 0

; 3228 :     xmlNodePtr cur;
; 3229 : 
; 3230 :     if (doc == NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN7@xmlXPathOr

; 3231 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathOr
$LN7@xmlXPathOr:

; 3232 :     cur = doc->children;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@xmlXPathOr:

; 3233 :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN3@xmlXPathOr

; 3234 : 	if (cur->type == XML_ELEMENT_NODE) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN8@xmlXPathOr

; 3235 : 	    cur->content = (void *) (-(++count));

	mov	eax, DWORD PTR _count$[ebp]
	add	eax, 1
	mov	DWORD PTR _count$[ebp], eax
	mov	ecx, DWORD PTR _count$[ebp]
	neg	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+40], ecx

; 3236 : 	    if (cur->children != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN8@xmlXPathOr

; 3237 : 		cur = cur->children;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _cur$[ebp], edx

; 3238 : 		continue;

	jmp	SHORT $LN2@xmlXPathOr
$LN8@xmlXPathOr:

; 3239 : 	    }
; 3240 : 	}
; 3241 : 	if (cur->next != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN6@xmlXPathOr

; 3242 : 	    cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx

; 3243 : 	    continue;

	jmp	SHORT $LN2@xmlXPathOr
$LN6@xmlXPathOr:

; 3244 : 	}
; 3245 : 	do {
; 3246 : 	    cur = cur->parent;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cur$[ebp], ecx

; 3247 : 	    if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN11@xmlXPathOr

; 3248 : 		break;

	jmp	SHORT $LN5@xmlXPathOr
$LN11@xmlXPathOr:

; 3249 : 	    if (cur == (xmlNodePtr) doc) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	edx, DWORD PTR _doc$[ebp]
	jne	SHORT $LN12@xmlXPathOr

; 3250 : 		cur = NULL;

	mov	DWORD PTR _cur$[ebp], 0

; 3251 : 		break;

	jmp	SHORT $LN5@xmlXPathOr
$LN12@xmlXPathOr:

; 3252 : 	    }
; 3253 : 	    if (cur->next != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN4@xmlXPathOr

; 3254 : 		cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx

; 3255 : 		break;

	jmp	SHORT $LN5@xmlXPathOr
$LN4@xmlXPathOr:

; 3256 : 	    }
; 3257 : 	} while (cur != NULL);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN6@xmlXPathOr
$LN5@xmlXPathOr:

; 3258 :     }

	jmp	$LN2@xmlXPathOr
$LN3@xmlXPathOr:

; 3259 :     return((long) count);

	mov	eax, DWORD PTR _count$[ebp]
$LN1@xmlXPathOr:

; 3260 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathOrderDocElems ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathContextSetCache
_TEXT	SEGMENT
_cache$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_active$ = 12						; size = 4
_value$ = 16						; size = 4
_options$ = 20						; size = 4
_xmlXPathContextSetCache PROC				; COMDAT

; 2251 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 2252 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathCo

; 2253 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 2254 :     if (active) {

	cmp	DWORD PTR _active$[ebp], 0
	je	SHORT $LN3@xmlXPathCo

; 2255 : 	xmlXPathContextCachePtr cache;
; 2256 : 
; 2257 : 	if (ctxt->cache == NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	jne	SHORT $LN5@xmlXPathCo

; 2258 : 	    ctxt->cache = xmlXPathNewCache();

	call	_xmlXPathNewCache
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+200], eax

; 2259 : 	    if (ctxt->cache == NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+200], 0
	jne	SHORT $LN5@xmlXPathCo

; 2260 : 		return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathCo
$LN5@xmlXPathCo:

; 2261 : 	}
; 2262 : 	cache = (xmlXPathContextCachePtr) ctxt->cache;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+200]
	mov	DWORD PTR _cache$1[ebp], ecx

; 2263 : 	if (options == 0) {

	cmp	DWORD PTR _options$[ebp], 0
	jne	SHORT $LN7@xmlXPathCo

; 2264 : 	    if (value < 0)

	cmp	DWORD PTR _value$[ebp], 0
	jge	SHORT $LN8@xmlXPathCo

; 2265 : 		value = 100;

	mov	DWORD PTR _value$[ebp], 100		; 00000064H
$LN8@xmlXPathCo:

; 2266 : 	    cache->maxNodeset = value;

	mov	edx, DWORD PTR _cache$1[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2267 : 	    cache->maxString = value;

	mov	ecx, DWORD PTR _cache$1[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 2268 : 	    cache->maxNumber = value;

	mov	eax, DWORD PTR _cache$1[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 2269 : 	    cache->maxBoolean = value;

	mov	edx, DWORD PTR _cache$1[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [edx+28], eax

; 2270 : 	    cache->maxMisc = value;

	mov	ecx, DWORD PTR _cache$1[ebp]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [ecx+36], edx
$LN7@xmlXPathCo:

; 2271 : 	}

	jmp	SHORT $LN4@xmlXPathCo
$LN3@xmlXPathCo:

; 2272 :     } else if (ctxt->cache != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	SHORT $LN4@xmlXPathCo

; 2273 : 	xmlXPathFreeCache((xmlXPathContextCachePtr) ctxt->cache);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	push	edx
	call	_xmlXPathFreeCache
	add	esp, 4

; 2274 : 	ctxt->cache = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+200], 0
$LN4@xmlXPathCo:

; 2275 :     }
; 2276 :     return(0);

	xor	eax, eax
$LN1@xmlXPathCo:

; 2277 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathContextSetCache ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFreeContext
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_xmlXPathFreeContext PROC				; COMDAT

; 6175 : xmlXPathFreeContext(xmlXPathContextPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6176 :     if (ctxt == NULL) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlXPathFr
	jmp	SHORT $LN1@xmlXPathFr
$LN2@xmlXPathFr:

; 6177 : 
; 6178 :     if (ctxt->cache != NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+200], 0
	je	SHORT $LN3@xmlXPathFr

; 6179 : 	xmlXPathFreeCache((xmlXPathContextCachePtr) ctxt->cache);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	push	edx
	call	_xmlXPathFreeCache
	add	esp, 4
$LN3@xmlXPathFr:

; 6180 :     xmlXPathRegisteredNsCleanup(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlXPathRegisteredNsCleanup
	add	esp, 4

; 6181 :     xmlXPathRegisteredFuncsCleanup(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlXPathRegisteredFuncsCleanup
	add	esp, 4

; 6182 :     xmlXPathRegisteredVariablesCleanup(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlXPathRegisteredVariablesCleanup
	add	esp, 4

; 6183 :     xmlResetError(&ctxt->lastError);

	mov	eax, DWORD PTR _ctxt$[ebp]
	add	eax, 136				; 00000088H
	push	eax
	call	_xmlResetError
	add	esp, 4

; 6184 :     xmlFree(ctxt);

	mov	esi, esp
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathFr:

; 6185 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathFreeContext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNewContext
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_doc$ = 8						; size = 4
_xmlXPathNewContext PROC				; COMDAT

; 6126 : xmlXPathNewContext(xmlDocPtr doc) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6127 :     xmlXPathContextPtr ret;
; 6128 : 
; 6129 :     ret = (xmlXPathContextPtr) xmlMalloc(sizeof(xmlXPathContext));

	mov	esi, esp
	push	204					; 000000ccH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 6130 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNe

; 6131 :         xmlXPathErrMemory(NULL, "creating context\n");

	push	OFFSET ??_C@_0BC@GBNJEJGK@creating?5context?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 6132 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNe
$LN2@xmlXPathNe:

; 6133 :     }
; 6134 :     memset(ret, 0 , (size_t) sizeof(xmlXPathContext));

	push	204					; 000000ccH
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 6135 :     ret->doc = doc;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [ecx], edx

; 6136 :     ret->node = NULL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+4], 0

; 6137 : 
; 6138 :     ret->varHash = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 6139 : 
; 6140 :     ret->nb_types = 0;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+20], 0

; 6141 :     ret->max_types = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+24], 0

; 6142 :     ret->types = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 6143 : 
; 6144 :     ret->funcHash = xmlHashCreate(0);

	push	0
	call	_xmlHashCreate
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+40], eax

; 6145 : 
; 6146 :     ret->nb_axis = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+44], 0

; 6147 :     ret->max_axis = 0;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+48], 0

; 6148 :     ret->axis = NULL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+52], 0

; 6149 : 
; 6150 :     ret->nsHash = NULL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+88], 0

; 6151 :     ret->user = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+64], 0

; 6152 : 
; 6153 :     ret->contextSize = -1;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+68], -1

; 6154 :     ret->proximityPosition = -1;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+72], -1

; 6155 : 
; 6156 : #ifdef XP_DEFAULT_CACHE_ON
; 6157 :     if (xmlXPathContextSetCache(ret, 1, -1, 0) == -1) {
; 6158 : 	xmlXPathFreeContext(ret);
; 6159 : 	return(NULL);
; 6160 :     }
; 6161 : #endif
; 6162 : 
; 6163 :     xmlXPathRegisterAllFunctions(ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlXPathRegisterAllFunctions
	add	esp, 4

; 6164 : 
; 6165 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNe:

; 6166 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNewContext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathConvertString
_TEXT	SEGMENT
tv68 = -8						; size = 4
_res$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathConvertString PROC				; COMDAT

; 5821 : xmlXPathConvertString(xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5822 :     xmlChar *res = NULL;

	mov	DWORD PTR _res$[ebp], 0

; 5823 : 
; 5824 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN4@xmlXPathCo

; 5825 : 	return(xmlXPathNewCString(""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlXPathNewCString
	add	esp, 4
	jmp	$LN1@xmlXPathCo
$LN4@xmlXPathCo:

; 5826 : 
; 5827 :     switch (val->type) {

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	sub	edx, 1
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 8
	ja	$LN2@xmlXPathCo
	mov	eax, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN13@xmlXPathCo[eax*4]

; 5828 :     case XPATH_UNDEFINED:
; 5829 : #ifdef DEBUG_EXPR
; 5830 : 	xmlGenericError(xmlGenericErrorContext, "STRING: undefined\n");
; 5831 : #endif
; 5832 : 	break;

	jmp	SHORT $LN2@xmlXPathCo
$LN6@xmlXPathCo:

; 5833 :     case XPATH_NODESET:
; 5834 :     case XPATH_XSLT_TREE:
; 5835 : 	res = xmlXPathCastNodeSetToString(val->nodesetval);

	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlXPathCastNodeSetToString
	add	esp, 4
	mov	DWORD PTR _res$[ebp], eax

; 5836 : 	break;

	jmp	SHORT $LN2@xmlXPathCo
$LN7@xmlXPathCo:

; 5837 :     case XPATH_STRING:
; 5838 : 	return(val);

	mov	eax, DWORD PTR _val$[ebp]
	jmp	$LN1@xmlXPathCo
$LN8@xmlXPathCo:

; 5839 :     case XPATH_BOOLEAN:
; 5840 : 	res = xmlXPathCastBooleanToString(val->boolval);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlXPathCastBooleanToString
	add	esp, 4
	mov	DWORD PTR _res$[ebp], eax

; 5841 : 	break;

	jmp	SHORT $LN2@xmlXPathCo
$LN9@xmlXPathCo:

; 5842 :     case XPATH_NUMBER:
; 5843 : 	res = xmlXPathCastNumberToString(val->floatval);

	mov	edx, DWORD PTR _val$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [edx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathCastNumberToString
	add	esp, 8
	mov	DWORD PTR _res$[ebp], eax

; 5844 : 	break;

	jmp	SHORT $LN2@xmlXPathCo
$LN10@xmlXPathCo:

; 5845 :     case XPATH_USERS:
; 5846 :     case XPATH_POINT:
; 5847 :     case XPATH_RANGE:
; 5848 :     case XPATH_LOCATIONSET:
; 5849 : 	TODO;

	mov	esi, esp
	push	5849					; 000016d9H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlXPathCo:

; 5850 : 	break;
; 5851 :     }
; 5852 :     xmlXPathFreeObject(val);

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 5853 :     if (res == NULL)

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN11@xmlXPathCo

; 5854 : 	return(xmlXPathNewCString(""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlXPathNewCString
	add	esp, 4
	jmp	SHORT $LN1@xmlXPathCo
$LN11@xmlXPathCo:

; 5855 :     return(xmlXPathWrapString(res));

	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_xmlXPathWrapString
	add	esp, 4
$LN1@xmlXPathCo:

; 5856 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN13@xmlXPathCo:
	DD	$LN6@xmlXPathCo
	DD	$LN8@xmlXPathCo
	DD	$LN9@xmlXPathCo
	DD	$LN7@xmlXPathCo
	DD	$LN10@xmlXPathCo
	DD	$LN10@xmlXPathCo
	DD	$LN10@xmlXPathCo
	DD	$LN10@xmlXPathCo
	DD	$LN6@xmlXPathCo
_xmlXPathConvertString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathConvertNumber
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathConvertNumber PROC				; COMDAT

; 5986 : xmlXPathConvertNumber(xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5987 :     xmlXPathObjectPtr ret;
; 5988 : 
; 5989 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN2@xmlXPathCo

; 5990 : 	return(xmlXPathNewFloat(0.0));

	sub	esp, 8
	xorps	xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathNewFloat
	add	esp, 8
	jmp	SHORT $LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 5991 :     if (val->type == XPATH_NUMBER)

	mov	eax, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [eax], 3
	jne	SHORT $LN3@xmlXPathCo

; 5992 : 	return(val);

	mov	eax, DWORD PTR _val$[ebp]
	jmp	SHORT $LN1@xmlXPathCo
$LN3@xmlXPathCo:

; 5993 :     ret = xmlXPathNewFloat(xmlXPathCastToNumber(val));

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_xmlXPathCastToNumber
	add	esp, -4					; fffffffcH
	fstp	QWORD PTR [esp]
	call	_xmlXPathNewFloat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 5994 :     xmlXPathFreeObject(val);

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 5995 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCo:

; 5996 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathConvertNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathConvertBoolean
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathConvertBoolean PROC				; COMDAT

; 6099 : xmlXPathConvertBoolean(xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6100 :     xmlXPathObjectPtr ret;
; 6101 : 
; 6102 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN2@xmlXPathCo

; 6103 : 	return(xmlXPathNewBoolean(0));

	push	0
	call	_xmlXPathNewBoolean
	add	esp, 4
	jmp	SHORT $LN1@xmlXPathCo
$LN2@xmlXPathCo:

; 6104 :     if (val->type == XPATH_BOOLEAN)

	mov	eax, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN3@xmlXPathCo

; 6105 : 	return(val);

	mov	eax, DWORD PTR _val$[ebp]
	jmp	SHORT $LN1@xmlXPathCo
$LN3@xmlXPathCo:

; 6106 :     ret = xmlXPathNewBoolean(xmlXPathCastToBoolean(val));

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	call	_xmlXPathCastToBoolean
	add	esp, 4
	push	eax
	call	_xmlXPathNewBoolean
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 6107 :     xmlXPathFreeObject(val);

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 6108 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCo:

; 6109 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathConvertBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastToString
_TEXT	SEGMENT
tv68 = -8						; size = 4
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathCastToString PROC				; COMDAT

; 5775 : xmlXPathCastToString(xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5776 :     xmlChar *ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 5777 : 
; 5778 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN4@xmlXPathCa

; 5779 : 	return(xmlStrdup((const xmlChar *) ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlStrdup
	add	esp, 4
	jmp	$LN1@xmlXPathCa
$LN4@xmlXPathCa:

; 5780 :     switch (val->type) {

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv68[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 9
	ja	$LN2@xmlXPathCa
	mov	edx, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN12@xmlXPathCa[edx*4]
$LN5@xmlXPathCa:

; 5781 : 	case XPATH_UNDEFINED:
; 5782 : #ifdef DEBUG_EXPR
; 5783 : 	    xmlGenericError(xmlGenericErrorContext, "String: undefined\n");
; 5784 : #endif
; 5785 : 	    ret = xmlStrdup((const xmlChar *) "");

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 5786 : 	    break;

	jmp	$LN2@xmlXPathCa
$LN6@xmlXPathCa:

; 5787 :         case XPATH_NODESET:
; 5788 :         case XPATH_XSLT_TREE:
; 5789 : 	    ret = xmlXPathCastNodeSetToString(val->nodesetval);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathCastNodeSetToString
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 5790 : 	    break;

	jmp	SHORT $LN2@xmlXPathCa
$LN7@xmlXPathCa:

; 5791 : 	case XPATH_STRING:
; 5792 : 	    return(xmlStrdup(val->stringval));

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlXPathCa
$LN8@xmlXPathCa:

; 5793 :         case XPATH_BOOLEAN:
; 5794 : 	    ret = xmlXPathCastBooleanToString(val->boolval);

	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlXPathCastBooleanToString
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 5795 : 	    break;

	jmp	SHORT $LN2@xmlXPathCa
$LN9@xmlXPathCa:

; 5796 : 	case XPATH_NUMBER: {
; 5797 : 	    ret = xmlXPathCastNumberToString(val->floatval);

	mov	eax, DWORD PTR _val$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathCastNumberToString
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 5798 : 	    break;

	jmp	SHORT $LN2@xmlXPathCa
$LN10@xmlXPathCa:

; 5799 : 	}
; 5800 : 	case XPATH_USERS:
; 5801 : 	case XPATH_POINT:
; 5802 : 	case XPATH_RANGE:
; 5803 : 	case XPATH_LOCATIONSET:
; 5804 : 	    TODO

	mov	esi, esp
	push	5804					; 000016acH
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5805 : 	    ret = xmlStrdup((const xmlChar *) "");

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
$LN2@xmlXPathCa:

; 5806 : 	    break;
; 5807 :     }
; 5808 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCa:

; 5809 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@xmlXPathCa:
	DD	$LN5@xmlXPathCa
	DD	$LN6@xmlXPathCa
	DD	$LN8@xmlXPathCa
	DD	$LN9@xmlXPathCa
	DD	$LN7@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN6@xmlXPathCa
_xmlXPathCastToString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastNodeSetToString
_TEXT	SEGMENT
_ns$ = 8						; size = 4
_xmlXPathCastNodeSetToString PROC			; COMDAT

; 5756 : xmlXPathCastNodeSetToString (xmlNodeSetPtr ns) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5757 :     if ((ns == NULL) || (ns->nodeNr == 0) || (ns->nodeTab == NULL))

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlXPathCa
	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlXPathCa
	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 5758 : 	return(xmlStrdup((const xmlChar *) ""));

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 5759 : 
; 5760 :     if (ns->nodeNr > 1)

	mov	edx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [edx], 1
	jle	SHORT $LN4@xmlXPathCa

; 5761 : 	xmlXPathNodeSetSort(ns);

	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	call	_xmlXPathNodeSetSort
	add	esp, 4
$LN4@xmlXPathCa:

; 5762 :     return(xmlXPathCastNodeToString(ns->nodeTab[0]));

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+edx]
	push	edx
	call	_xmlXPathCastNodeToString
	add	esp, 4
$LN1@xmlXPathCa:

; 5763 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathCastNodeSetToString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastNodeToString
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_node$ = 8						; size = 4
_xmlXPathCastNodeToString PROC				; COMDAT

; 5740 : xmlXPathCastNodeToString (xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5741 : xmlChar *ret;
; 5742 :     if ((ret = xmlNodeGetContent(node)) == NULL)

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	_xmlNodeGetContent
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathCa

; 5743 : 	ret = xmlStrdup((const xmlChar *) "");

	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
$LN2@xmlXPathCa:

; 5744 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]

; 5745 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCastNodeToString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastNumberToString
_TEXT	SEGMENT
tv66 = -116						; size = 4
_buf$1 = -108						; size = 100
_ret$ = -4						; size = 4
_val$ = 8						; size = 8
_xmlXPathCastNumberToString PROC			; COMDAT

; 5705 : xmlXPathCastNumberToString (double val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	push	edi
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 29					; 0000001dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5706 :     xmlChar *ret;
; 5707 :     switch (xmlXPathIsInf(val)) {

	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsInf
	add	esp, 8
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], -1
	je	SHORT $LN5@xmlXPathCa
	cmp	DWORD PTR tv66[ebp], 1
	je	SHORT $LN4@xmlXPathCa
	jmp	SHORT $LN6@xmlXPathCa
$LN4@xmlXPathCa:

; 5708 :     case 1:
; 5709 : 	ret = xmlStrdup((const xmlChar *) "Infinity");

	push	OFFSET ??_C@_08KEBCLIFP@Infinity@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 5710 : 	break;

	jmp	$LN2@xmlXPathCa
$LN5@xmlXPathCa:

; 5711 :     case -1:
; 5712 : 	ret = xmlStrdup((const xmlChar *) "-Infinity");

	push	OFFSET ??_C@_09BLDCEMOH@?9Infinity@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 5713 : 	break;

	jmp	$LN2@xmlXPathCa
$LN6@xmlXPathCa:

; 5714 :     default:
; 5715 : 	if (xmlXPathIsNaN(val)) {

	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@xmlXPathCa

; 5716 : 	    ret = xmlStrdup((const xmlChar *) "NaN");

	push	OFFSET ??_C@_03ICJPMMHB@NaN@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN10@xmlXPathCa
$LN7@xmlXPathCa:

; 5717 : 	} else if (val == 0) {

	movsd	xmm0, QWORD PTR _val$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN9@xmlXPathCa

; 5718 :             /* Omit sign for negative zero. */
; 5719 : 	    ret = xmlStrdup((const xmlChar *) "0");

	push	OFFSET ??_C@_01GBGANLPD@0@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 5720 : 	} else {

	jmp	SHORT $LN10@xmlXPathCa
$LN9@xmlXPathCa:

; 5721 : 	    /* could be improved */
; 5722 : 	    char buf[100];
; 5723 : 	    xmlXPathFormatNumber(val, buf, 99);

	push	99					; 00000063H
	lea	eax, DWORD PTR _buf$1[ebp]
	push	eax
	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathFormatNumber
	add	esp, 16					; 00000010H

; 5724 : 	    buf[99] = 0;

	mov	ecx, 1
	imul	edx, ecx, 99
	mov	BYTE PTR _buf$1[ebp+edx], 0

; 5725 : 	    ret = xmlStrdup((const xmlChar *) buf);

	lea	eax, DWORD PTR _buf$1[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
$LN10@xmlXPathCa:
$LN2@xmlXPathCa:

; 5726 : 	}
; 5727 :     }
; 5728 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]

; 5729 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@xmlXPathCa
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN14@xmlXPathCa:
	DD	1
	DD	$LN13@xmlXPathCa
$LN13@xmlXPathCa:
	DD	-108					; ffffff94H
	DD	100					; 00000064H
	DD	$LN12@xmlXPathCa
$LN12@xmlXPathCa:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_xmlXPathCastNumberToString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastBooleanToString
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathCastBooleanToString PROC			; COMDAT

; 5687 : xmlXPathCastBooleanToString (int val) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5688 :     xmlChar *ret;
; 5689 :     if (val)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN2@xmlXPathCa

; 5690 : 	ret = xmlStrdup((const xmlChar *) "true");

	push	OFFSET ??_C@_04LOAJBDKD@true@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN3@xmlXPathCa
$LN2@xmlXPathCa:

; 5691 :     else
; 5692 : 	ret = xmlStrdup((const xmlChar *) "false");

	push	OFFSET ??_C@_05LAPONLG@false@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax
$LN3@xmlXPathCa:

; 5693 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]

; 5694 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCastBooleanToString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastToNumber
_TEXT	SEGMENT
tv66 = -12						; size = 4
_ret$ = -8						; size = 8
_val$ = 8						; size = 4
_xmlXPathCastToNumber PROC				; COMDAT

; 5940 : xmlXPathCastToNumber(xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5941 :     double ret = 0.0;

	xorps	xmm0, xmm0
	movsd	QWORD PTR _ret$[ebp], xmm0

; 5942 : 
; 5943 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN4@xmlXPathCa

; 5944 : 	return(NAN);

	fld	QWORD PTR __real@fff8000000000000
	jmp	$LN1@xmlXPathCa
$LN4@xmlXPathCa:

; 5945 :     switch (val->type) {

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 9
	ja	$LN2@xmlXPathCa
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN12@xmlXPathCa[edx*4]
$LN5@xmlXPathCa:

; 5946 :     case XPATH_UNDEFINED:
; 5947 : #ifdef DEGUB_EXPR
; 5948 : 	xmlGenericError(xmlGenericErrorContext, "NUMBER: undefined\n");
; 5949 : #endif
; 5950 : 	ret = NAN;

	movsd	xmm0, QWORD PTR __real@fff8000000000000
	movsd	QWORD PTR _ret$[ebp], xmm0

; 5951 : 	break;

	jmp	$LN2@xmlXPathCa
$LN6@xmlXPathCa:

; 5952 :     case XPATH_NODESET:
; 5953 :     case XPATH_XSLT_TREE:
; 5954 : 	ret = xmlXPathCastNodeSetToNumber(val->nodesetval);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathCastNodeSetToNumber
	add	esp, 4
	fstp	QWORD PTR _ret$[ebp]

; 5955 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN7@xmlXPathCa:

; 5956 :     case XPATH_STRING:
; 5957 : 	ret = xmlXPathCastStringToNumber(val->stringval);

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlXPathCastStringToNumber
	add	esp, 4
	fstp	QWORD PTR _ret$[ebp]

; 5958 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN8@xmlXPathCa:

; 5959 :     case XPATH_NUMBER:
; 5960 : 	ret = val->floatval;

	mov	ecx, DWORD PTR _val$[ebp]
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR _ret$[ebp], xmm0

; 5961 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN9@xmlXPathCa:

; 5962 :     case XPATH_BOOLEAN:
; 5963 : 	ret = xmlXPathCastBooleanToNumber(val->boolval);

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlXPathCastBooleanToNumber
	add	esp, 4
	fstp	QWORD PTR _ret$[ebp]

; 5964 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN10@xmlXPathCa:

; 5965 :     case XPATH_USERS:
; 5966 :     case XPATH_POINT:
; 5967 :     case XPATH_RANGE:
; 5968 :     case XPATH_LOCATIONSET:
; 5969 : 	TODO;

	mov	esi, esp
	push	5969					; 00001751H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5970 : 	ret = NAN;

	movsd	xmm0, QWORD PTR __real@fff8000000000000
	movsd	QWORD PTR _ret$[ebp], xmm0
$LN2@xmlXPathCa:

; 5971 : 	break;
; 5972 :     }
; 5973 :     return(ret);

	fld	QWORD PTR _ret$[ebp]
$LN1@xmlXPathCa:

; 5974 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@xmlXPathCa:
	DD	$LN5@xmlXPathCa
	DD	$LN6@xmlXPathCa
	DD	$LN9@xmlXPathCa
	DD	$LN8@xmlXPathCa
	DD	$LN7@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN6@xmlXPathCa
_xmlXPathCastToNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastNodeSetToNumber
_TEXT	SEGMENT
_ret$ = -12						; size = 8
_str$ = -4						; size = 4
_ns$ = 8						; size = 4
_xmlXPathCastNodeSetToNumber PROC			; COMDAT

; 5919 : xmlXPathCastNodeSetToNumber (xmlNodeSetPtr ns) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5920 :     xmlChar *str;
; 5921 :     double ret;
; 5922 : 
; 5923 :     if (ns == NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	jne	SHORT $LN2@xmlXPathCa

; 5924 : 	return(NAN);

	fld	QWORD PTR __real@fff8000000000000
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 5925 :     str = xmlXPathCastNodeSetToString(ns);

	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	call	_xmlXPathCastNodeSetToString
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax

; 5926 :     ret = xmlXPathCastStringToNumber(str);

	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_xmlXPathCastStringToNumber
	add	esp, 4
	fstp	QWORD PTR _ret$[ebp]

; 5927 :     xmlFree(str);

	mov	esi, esp
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5928 :     return(ret);

	fld	QWORD PTR _ret$[ebp]
$LN1@xmlXPathCa:

; 5929 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCastNodeSetToNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastNodeToNumber
_TEXT	SEGMENT
_ret$ = -12						; size = 8
_strval$ = -4						; size = 4
_node$ = 8						; size = 4
_xmlXPathCastNodeToNumber PROC				; COMDAT

; 5895 : xmlXPathCastNodeToNumber (xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5896 :     xmlChar *strval;
; 5897 :     double ret;
; 5898 : 
; 5899 :     if (node == NULL)

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN2@xmlXPathCa

; 5900 : 	return(NAN);

	fld	QWORD PTR __real@fff8000000000000
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 5901 :     strval = xmlXPathCastNodeToString(node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	_xmlXPathCastNodeToString
	add	esp, 4
	mov	DWORD PTR _strval$[ebp], eax

; 5902 :     if (strval == NULL)

	cmp	DWORD PTR _strval$[ebp], 0
	jne	SHORT $LN3@xmlXPathCa

; 5903 : 	return(NAN);

	fld	QWORD PTR __real@fff8000000000000
	jmp	SHORT $LN1@xmlXPathCa
$LN3@xmlXPathCa:

; 5904 :     ret = xmlXPathCastStringToNumber(strval);

	mov	ecx, DWORD PTR _strval$[ebp]
	push	ecx
	call	_xmlXPathCastStringToNumber
	add	esp, 4
	fstp	QWORD PTR _ret$[ebp]

; 5905 :     xmlFree(strval);

	mov	esi, esp
	mov	edx, DWORD PTR _strval$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5906 : 
; 5907 :     return(ret);

	fld	QWORD PTR _ret$[ebp]
$LN1@xmlXPathCa:

; 5908 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCastNodeToNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastStringToNumber
_TEXT	SEGMENT
_val$ = 8						; size = 4
_xmlXPathCastStringToNumber PROC			; COMDAT

; 5882 : xmlXPathCastStringToNumber(const xmlChar * val) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5883 :     return(xmlXPathStringEvalNumber(val));

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_xmlXPathStringEvalNumber
	add	esp, 4

; 5884 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathCastStringToNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastBooleanToNumber
_TEXT	SEGMENT
_val$ = 8						; size = 4
_xmlXPathCastBooleanToNumber PROC			; COMDAT

; 5867 : xmlXPathCastBooleanToNumber(int val) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5868 :     if (val)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN2@xmlXPathCa

; 5869 : 	return(1.0);

	fld1
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 5870 :     return(0.0);

	fldz
$LN1@xmlXPathCa:

; 5871 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathCastBooleanToNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastToBoolean
_TEXT	SEGMENT
tv66 = -8						; size = 4
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathCastToBoolean PROC				; COMDAT

; 6052 : xmlXPathCastToBoolean (xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6053 :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6054 : 
; 6055 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN4@xmlXPathCa

; 6056 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCa
$LN4@xmlXPathCa:

; 6057 :     switch (val->type) {

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 9
	ja	$LN2@xmlXPathCa
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN12@xmlXPathCa[edx*4]
$LN5@xmlXPathCa:

; 6058 :     case XPATH_UNDEFINED:
; 6059 : #ifdef DEBUG_EXPR
; 6060 : 	xmlGenericError(xmlGenericErrorContext, "BOOLEAN: undefined\n");
; 6061 : #endif
; 6062 : 	ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6063 : 	break;

	jmp	$LN2@xmlXPathCa
$LN6@xmlXPathCa:

; 6064 :     case XPATH_NODESET:
; 6065 :     case XPATH_XSLT_TREE:
; 6066 : 	ret = xmlXPathCastNodeSetToBoolean(val->nodesetval);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlXPathCastNodeSetToBoolean
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 6067 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN7@xmlXPathCa:

; 6068 :     case XPATH_STRING:
; 6069 : 	ret = xmlXPathCastStringToBoolean(val->stringval);

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlXPathCastStringToBoolean
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 6070 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN8@xmlXPathCa:

; 6071 :     case XPATH_NUMBER:
; 6072 : 	ret = xmlXPathCastNumberToBoolean(val->floatval);

	mov	ecx, DWORD PTR _val$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [ecx+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathCastNumberToBoolean
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 6073 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN9@xmlXPathCa:

; 6074 :     case XPATH_BOOLEAN:
; 6075 : 	ret = val->boolval;

	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _ret$[ebp], eax

; 6076 : 	break;

	jmp	SHORT $LN2@xmlXPathCa
$LN10@xmlXPathCa:

; 6077 :     case XPATH_USERS:
; 6078 :     case XPATH_POINT:
; 6079 :     case XPATH_RANGE:
; 6080 :     case XPATH_LOCATIONSET:
; 6081 : 	TODO;

	mov	esi, esp
	push	6081					; 000017c1H
	push	OFFSET ??_C@_0GH@HIGHEHKE@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 6082 : 	ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN2@xmlXPathCa:

; 6083 : 	break;
; 6084 :     }
; 6085 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathCa:

; 6086 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@xmlXPathCa:
	DD	$LN5@xmlXPathCa
	DD	$LN6@xmlXPathCa
	DD	$LN9@xmlXPathCa
	DD	$LN8@xmlXPathCa
	DD	$LN7@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN10@xmlXPathCa
	DD	$LN6@xmlXPathCa
_xmlXPathCastToBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastNodeSetToBoolean
_TEXT	SEGMENT
_ns$ = 8						; size = 4
_xmlXPathCastNodeSetToBoolean PROC			; COMDAT

; 6037 : xmlXPathCastNodeSetToBoolean (xmlNodeSetPtr ns) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6038 :     if ((ns == NULL) || (ns->nodeNr == 0))

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlXPathCa
	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 6039 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 6040 :     return(1);

	mov	eax, 1
$LN1@xmlXPathCa:

; 6041 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathCastNodeSetToBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastStringToBoolean
_TEXT	SEGMENT
_val$ = 8						; size = 4
_xmlXPathCastStringToBoolean PROC			; COMDAT

; 6022 : xmlXPathCastStringToBoolean (const xmlChar *val) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6023 :     if ((val == NULL) || (xmlStrlen(val) == 0))

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN3@xmlXPathCa
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 6024 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 6025 :     return(1);

	mov	eax, 1
$LN1@xmlXPathCa:

; 6026 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathCastStringToBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCastNumberToBoolean
_TEXT	SEGMENT
_val$ = 8						; size = 8
_xmlXPathCastNumberToBoolean PROC			; COMDAT

; 6007 : xmlXPathCastNumberToBoolean (double val) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 6008 :      if (xmlXPathIsNaN(val) || (val == 0.0))

	sub	esp, 8
	movsd	xmm0, QWORD PTR _val$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@xmlXPathCa
	movsd	xmm0, QWORD PTR _val$[ebp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@xmlXPathCa
$LN3@xmlXPathCa:

; 6009 : 	 return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlXPathCa
$LN2@xmlXPathCa:

; 6010 :      return(1);

	mov	eax, 1
$LN1@xmlXPathCa:

; 6011 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathCastNumberToBoolean ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathCmpNodes
_TEXT	SEGMENT
_l2$1 = -48						; size = 4
_l1$2 = -44						; size = 4
_l2$3 = -40						; size = 4
_l1$4 = -36						; size = 4
_root$ = -32						; size = 4
_cur$ = -28						; size = 4
_attrNode2$ = -24					; size = 4
_attrNode1$ = -20					; size = 4
_attr2$ = -16						; size = 4
_attr1$ = -12						; size = 4
_depth2$ = -8						; size = 4
_depth1$ = -4						; size = 4
_node1$ = 8						; size = 4
_node2$ = 12						; size = 4
_xmlXPathCmpNodes PROC					; COMDAT

; 3273 : xmlXPathCmpNodes(xmlNodePtr node1, xmlNodePtr node2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3274 :     int depth1, depth2;
; 3275 :     int attr1 = 0, attr2 = 0;

	mov	DWORD PTR _attr1$[ebp], 0
	mov	DWORD PTR _attr2$[ebp], 0

; 3276 :     xmlNodePtr attrNode1 = NULL, attrNode2 = NULL;

	mov	DWORD PTR _attrNode1$[ebp], 0
	mov	DWORD PTR _attrNode2$[ebp], 0

; 3277 :     xmlNodePtr cur, root;
; 3278 : 
; 3279 :     if ((node1 == NULL) || (node2 == NULL))

	cmp	DWORD PTR _node1$[ebp], 0
	je	SHORT $LN20@xmlXPathCm
	cmp	DWORD PTR _node2$[ebp], 0
	jne	SHORT $LN19@xmlXPathCm
$LN20@xmlXPathCm:

; 3280 : 	return(-2);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@xmlXPathCm
$LN19@xmlXPathCm:

; 3281 :     /*
; 3282 :      * a couple of optimizations which will avoid computations in most cases
; 3283 :      */
; 3284 :     if (node1 == node2)		/* trivial case */

	mov	eax, DWORD PTR _node1$[ebp]
	cmp	eax, DWORD PTR _node2$[ebp]
	jne	SHORT $LN21@xmlXPathCm

; 3285 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCm
$LN21@xmlXPathCm:

; 3286 :     if (node1->type == XML_ATTRIBUTE_NODE) {

	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN22@xmlXPathCm

; 3287 : 	attr1 = 1;

	mov	DWORD PTR _attr1$[ebp], 1

; 3288 : 	attrNode1 = node1;

	mov	edx, DWORD PTR _node1$[ebp]
	mov	DWORD PTR _attrNode1$[ebp], edx

; 3289 : 	node1 = node1->parent;

	mov	eax, DWORD PTR _node1$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _node1$[ebp], ecx
$LN22@xmlXPathCm:

; 3290 :     }
; 3291 :     if (node2->type == XML_ATTRIBUTE_NODE) {

	mov	edx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN23@xmlXPathCm

; 3292 : 	attr2 = 1;

	mov	DWORD PTR _attr2$[ebp], 1

; 3293 : 	attrNode2 = node2;

	mov	eax, DWORD PTR _node2$[ebp]
	mov	DWORD PTR _attrNode2$[ebp], eax

; 3294 : 	node2 = node2->parent;

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _node2$[ebp], edx
$LN23@xmlXPathCm:

; 3295 :     }
; 3296 :     if (node1 == node2) {

	mov	eax, DWORD PTR _node1$[ebp]
	cmp	eax, DWORD PTR _node2$[ebp]
	jne	SHORT $LN24@xmlXPathCm

; 3297 : 	if (attr1 == attr2) {

	mov	ecx, DWORD PTR _attr1$[ebp]
	cmp	ecx, DWORD PTR _attr2$[ebp]
	jne	SHORT $LN25@xmlXPathCm

; 3298 : 	    /* not required, but we keep attributes in order */
; 3299 : 	    if (attr1 != 0) {

	cmp	DWORD PTR _attr1$[ebp], 0
	je	SHORT $LN26@xmlXPathCm

; 3300 : 	        cur = attrNode2->prev;

	mov	edx, DWORD PTR _attrNode2$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@xmlXPathCm:

; 3301 : 		while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlXPathCm

; 3302 : 		    if (cur == attrNode1)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	ecx, DWORD PTR _attrNode1$[ebp]
	jne	SHORT $LN27@xmlXPathCm

; 3303 : 		        return (1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN27@xmlXPathCm:

; 3304 : 		    cur = cur->prev;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR _cur$[ebp], eax

; 3305 : 		}

	jmp	SHORT $LN2@xmlXPathCm
$LN3@xmlXPathCm:

; 3306 : 		return (-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN26@xmlXPathCm:

; 3307 : 	    }
; 3308 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlXPathCm
$LN25@xmlXPathCm:

; 3309 : 	}
; 3310 : 	if (attr2 == 1)

	cmp	DWORD PTR _attr2$[ebp], 1
	jne	SHORT $LN28@xmlXPathCm

; 3311 : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN28@xmlXPathCm:

; 3312 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN24@xmlXPathCm:

; 3313 :     }
; 3314 :     if ((node1->type == XML_NAMESPACE_DECL) ||

	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	je	SHORT $LN30@xmlXPathCm
	mov	edx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN29@xmlXPathCm
$LN30@xmlXPathCm:

; 3315 :         (node2->type == XML_NAMESPACE_DECL))
; 3316 : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN29@xmlXPathCm:

; 3317 :     if (node1 == node2->prev)

	mov	eax, DWORD PTR _node2$[ebp]
	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN31@xmlXPathCm

; 3318 : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN31@xmlXPathCm:

; 3319 :     if (node1 == node2->next)

	mov	edx, DWORD PTR _node2$[ebp]
	mov	eax, DWORD PTR _node1$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jne	SHORT $LN32@xmlXPathCm

; 3320 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN32@xmlXPathCm:

; 3321 : 
; 3322 :     /*
; 3323 :      * Speedup using document order if availble.
; 3324 :      */
; 3325 :     if ((node1->type == XML_ELEMENT_NODE) &&
; 3326 : 	(node2->type == XML_ELEMENT_NODE) &&
; 3327 : 	(0 > (ptrdiff_t) node1->content) &&
; 3328 : 	(0 > (ptrdiff_t) node2->content) &&

	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN33@xmlXPathCm
	mov	edx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN33@xmlXPathCm
	mov	eax, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jge	SHORT $LN33@xmlXPathCm
	mov	ecx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jge	SHORT $LN33@xmlXPathCm
	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR _node2$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+32]
	jne	SHORT $LN33@xmlXPathCm

; 3329 : 	(node1->doc == node2->doc)) {
; 3330 : 	ptrdiff_t l1, l2;
; 3331 : 
; 3332 : 	l1 = -((ptrdiff_t) node1->content);

	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR [edx+40]
	neg	eax
	mov	DWORD PTR _l1$4[ebp], eax

; 3333 : 	l2 = -((ptrdiff_t) node2->content);

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	neg	edx
	mov	DWORD PTR _l2$3[ebp], edx

; 3334 : 	if (l1 < l2)

	mov	eax, DWORD PTR _l1$4[ebp]
	cmp	eax, DWORD PTR _l2$3[ebp]
	jge	SHORT $LN34@xmlXPathCm

; 3335 : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN34@xmlXPathCm:

; 3336 : 	if (l1 > l2)

	mov	ecx, DWORD PTR _l1$4[ebp]
	cmp	ecx, DWORD PTR _l2$3[ebp]
	jle	SHORT $LN33@xmlXPathCm

; 3337 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN33@xmlXPathCm:

; 3338 :     }
; 3339 : 
; 3340 :     /*
; 3341 :      * compute depth to root
; 3342 :      */
; 3343 :     for (depth2 = 0, cur = node2;cur->parent != NULL;cur = cur->parent) {

	mov	DWORD PTR _depth2$[ebp], 0
	mov	edx, DWORD PTR _node2$[ebp]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN6@xmlXPathCm
$LN4@xmlXPathCm:
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cur$[ebp], ecx
$LN6@xmlXPathCm:
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN5@xmlXPathCm

; 3344 : 	if (cur->parent == node1)

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _node1$[ebp]
	jne	SHORT $LN36@xmlXPathCm

; 3345 : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN36@xmlXPathCm:

; 3346 : 	depth2++;

	mov	edx, DWORD PTR _depth2$[ebp]
	add	edx, 1
	mov	DWORD PTR _depth2$[ebp], edx

; 3347 :     }

	jmp	SHORT $LN4@xmlXPathCm
$LN5@xmlXPathCm:

; 3348 :     root = cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _root$[ebp], eax

; 3349 :     for (depth1 = 0, cur = node1;cur->parent != NULL;cur = cur->parent) {

	mov	DWORD PTR _depth1$[ebp], 0
	mov	ecx, DWORD PTR _node1$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN9@xmlXPathCm
$LN7@xmlXPathCm:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax
$LN9@xmlXPathCm:
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN8@xmlXPathCm

; 3350 : 	if (cur->parent == node2)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _node2$[ebp]
	jne	SHORT $LN37@xmlXPathCm

; 3351 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN37@xmlXPathCm:

; 3352 : 	depth1++;

	mov	ecx, DWORD PTR _depth1$[ebp]
	add	ecx, 1
	mov	DWORD PTR _depth1$[ebp], ecx

; 3353 :     }

	jmp	SHORT $LN7@xmlXPathCm
$LN8@xmlXPathCm:

; 3354 :     /*
; 3355 :      * Distinct document (or distinct entities :-( ) case.
; 3356 :      */
; 3357 :     if (root != cur) {

	mov	edx, DWORD PTR _root$[ebp]
	cmp	edx, DWORD PTR _cur$[ebp]
	je	SHORT $LN10@xmlXPathCm

; 3358 : 	return(-2);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@xmlXPathCm
$LN10@xmlXPathCm:

; 3359 :     }
; 3360 :     /*
; 3361 :      * get the nearest common ancestor.
; 3362 :      */
; 3363 :     while (depth1 > depth2) {

	mov	eax, DWORD PTR _depth1$[ebp]
	cmp	eax, DWORD PTR _depth2$[ebp]
	jle	SHORT $LN12@xmlXPathCm

; 3364 : 	depth1--;

	mov	ecx, DWORD PTR _depth1$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _depth1$[ebp], ecx

; 3365 : 	node1 = node1->parent;

	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _node1$[ebp], eax

; 3366 :     }

	jmp	SHORT $LN10@xmlXPathCm
$LN12@xmlXPathCm:

; 3367 :     while (depth2 > depth1) {

	mov	ecx, DWORD PTR _depth2$[ebp]
	cmp	ecx, DWORD PTR _depth1$[ebp]
	jle	SHORT $LN14@xmlXPathCm

; 3368 : 	depth2--;

	mov	edx, DWORD PTR _depth2$[ebp]
	sub	edx, 1
	mov	DWORD PTR _depth2$[ebp], edx

; 3369 : 	node2 = node2->parent;

	mov	eax, DWORD PTR _node2$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _node2$[ebp], ecx

; 3370 :     }

	jmp	SHORT $LN12@xmlXPathCm
$LN14@xmlXPathCm:

; 3371 :     while (node1->parent != node2->parent) {

	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR _node2$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	cmp	ecx, DWORD PTR [eax+20]
	je	SHORT $LN15@xmlXPathCm

; 3372 : 	node1 = node1->parent;

	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _node1$[ebp], eax

; 3373 : 	node2 = node2->parent;

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _node2$[ebp], edx

; 3374 : 	/* should not happen but just in case ... */
; 3375 : 	if ((node1 == NULL) || (node2 == NULL))

	cmp	DWORD PTR _node1$[ebp], 0
	je	SHORT $LN40@xmlXPathCm
	cmp	DWORD PTR _node2$[ebp], 0
	jne	SHORT $LN39@xmlXPathCm
$LN40@xmlXPathCm:

; 3376 : 	    return(-2);

	mov	eax, -2					; fffffffeH
	jmp	$LN1@xmlXPathCm
$LN39@xmlXPathCm:

; 3377 :     }

	jmp	SHORT $LN14@xmlXPathCm
$LN15@xmlXPathCm:

; 3378 :     /*
; 3379 :      * Find who's first.
; 3380 :      */
; 3381 :     if (node1 == node2->prev)

	mov	eax, DWORD PTR _node2$[ebp]
	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN41@xmlXPathCm

; 3382 : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlXPathCm
$LN41@xmlXPathCm:

; 3383 :     if (node1 == node2->next)

	mov	edx, DWORD PTR _node2$[ebp]
	mov	eax, DWORD PTR _node1$[ebp]
	cmp	eax, DWORD PTR [edx+24]
	jne	SHORT $LN42@xmlXPathCm

; 3384 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlXPathCm
$LN42@xmlXPathCm:

; 3385 :     /*
; 3386 :      * Speedup using document order if availble.
; 3387 :      */
; 3388 :     if ((node1->type == XML_ELEMENT_NODE) &&
; 3389 : 	(node2->type == XML_ELEMENT_NODE) &&
; 3390 : 	(0 > (ptrdiff_t) node1->content) &&
; 3391 : 	(0 > (ptrdiff_t) node2->content) &&

	mov	ecx, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN43@xmlXPathCm
	mov	edx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN43@xmlXPathCm
	mov	eax, DWORD PTR _node1$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jge	SHORT $LN43@xmlXPathCm
	mov	ecx, DWORD PTR _node2$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jge	SHORT $LN43@xmlXPathCm
	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR _node2$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+32]
	jne	SHORT $LN43@xmlXPathCm

; 3392 : 	(node1->doc == node2->doc)) {
; 3393 : 	ptrdiff_t l1, l2;
; 3394 : 
; 3395 : 	l1 = -((ptrdiff_t) node1->content);

	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR [edx+40]
	neg	eax
	mov	DWORD PTR _l1$2[ebp], eax

; 3396 : 	l2 = -((ptrdiff_t) node2->content);

	mov	ecx, DWORD PTR _node2$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	neg	edx
	mov	DWORD PTR _l2$1[ebp], edx

; 3397 : 	if (l1 < l2)

	mov	eax, DWORD PTR _l1$2[ebp]
	cmp	eax, DWORD PTR _l2$1[ebp]
	jge	SHORT $LN44@xmlXPathCm

; 3398 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathCm
$LN44@xmlXPathCm:

; 3399 : 	if (l1 > l2)

	mov	ecx, DWORD PTR _l1$2[ebp]
	cmp	ecx, DWORD PTR _l2$1[ebp]
	jle	SHORT $LN43@xmlXPathCm

; 3400 : 	    return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlXPathCm
$LN43@xmlXPathCm:

; 3401 :     }
; 3402 : 
; 3403 :     for (cur = node1->next;cur != NULL;cur = cur->next)

	mov	edx, DWORD PTR _node1$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN18@xmlXPathCm
$LN16@xmlXPathCm:
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx
$LN18@xmlXPathCm:
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN17@xmlXPathCm

; 3404 : 	if (cur == node2)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	eax, DWORD PTR _node2$[ebp]
	jne	SHORT $LN46@xmlXPathCm

; 3405 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlXPathCm
$LN46@xmlXPathCm:
	jmp	SHORT $LN16@xmlXPathCm
$LN17@xmlXPathCm:

; 3406 :     return(-1); /* assume there is no sibling list corruption */

	or	eax, -1
$LN1@xmlXPathCm:

; 3407 : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathCmpNodes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathObjectCopy
_TEXT	SEGMENT
tv76 = -12						; size = 4
_loc$1 = -8						; size = 4
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathObjectCopy PROC				; COMDAT

; 5402 : xmlXPathObjectCopy(xmlXPathObjectPtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5403 :     xmlXPathObjectPtr ret;
; 5404 : 
; 5405 :     if (val == NULL)

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN4@xmlXPathOb

; 5406 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathOb
$LN4@xmlXPathOb:

; 5407 : 
; 5408 :     ret = (xmlXPathObjectPtr) xmlMalloc(sizeof(xmlXPathObject));

	mov	esi, esp
	push	48					; 00000030H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 5409 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN5@xmlXPathOb

; 5410 :         xmlXPathErrMemory(NULL, "copying object\n");

	push	OFFSET ??_C@_0BA@KJDNPDLE@copying?5object?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 5411 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathOb
$LN5@xmlXPathOb:

; 5412 :     }
; 5413 :     memcpy(ret, val , (size_t) sizeof(xmlXPathObject));

	mov	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR _val$[ebp]
	mov	edi, DWORD PTR _ret$[ebp]
	rep movsd

; 5414 : #ifdef XP_DEBUG_OBJ_USAGE
; 5415 :     xmlXPathDebugObjUsageRequested(NULL, val->type);
; 5416 : #endif
; 5417 :     switch (val->type) {

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv76[ebp], ecx
	cmp	DWORD PTR tv76[ebp], 9
	ja	$LN2@xmlXPathOb
	mov	edx, DWORD PTR tv76[ebp]
	jmp	DWORD PTR $LN13@xmlXPathOb[edx*4]

; 5418 : 	case XPATH_BOOLEAN:
; 5419 : 	case XPATH_NUMBER:
; 5420 : 	case XPATH_POINT:
; 5421 : 	case XPATH_RANGE:
; 5422 : 	    break;

	jmp	$LN2@xmlXPathOb
$LN7@xmlXPathOb:

; 5423 : 	case XPATH_STRING:
; 5424 : 	    ret->stringval = xmlStrdup(val->stringval);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], eax

; 5425 : 	    break;

	jmp	SHORT $LN2@xmlXPathOb
$LN8@xmlXPathOb:

; 5426 : 	case XPATH_XSLT_TREE:
; 5427 : #if 0
; 5428 : /*
; 5429 :   Removed 11 July 2004 - the current handling of xslt tmpRVT nodes means that
; 5430 :   this previous handling is no longer correct, and can cause some serious
; 5431 :   problems (ref. bug 145547)
; 5432 : */
; 5433 : 	    if ((val->nodesetval != NULL) &&
; 5434 : 		(val->nodesetval->nodeTab != NULL)) {
; 5435 : 		xmlNodePtr cur, tmp;
; 5436 : 		xmlDocPtr top;
; 5437 : 
; 5438 : 		ret->boolval = 1;
; 5439 : 		top =  xmlNewDoc(NULL);
; 5440 : 		top->name = (char *)
; 5441 : 		    xmlStrdup(val->nodesetval->nodeTab[0]->name);
; 5442 : 		ret->user = top;
; 5443 : 		if (top != NULL) {
; 5444 : 		    top->doc = top;
; 5445 : 		    cur = val->nodesetval->nodeTab[0]->children;
; 5446 : 		    while (cur != NULL) {
; 5447 : 			tmp = xmlDocCopyNode(cur, top, 1);
; 5448 : 			xmlAddChild((xmlNodePtr) top, tmp);
; 5449 : 			cur = cur->next;
; 5450 : 		    }
; 5451 : 		}
; 5452 : 
; 5453 : 		ret->nodesetval = xmlXPathNodeSetCreate((xmlNodePtr) top);
; 5454 : 	    } else
; 5455 : 		ret->nodesetval = xmlXPathNodeSetCreate(NULL);
; 5456 : 	    /* Deallocate the copied tree value */
; 5457 : 	    break;
; 5458 : #endif
; 5459 : 	case XPATH_NODESET:
; 5460 : 	    ret->nodesetval = xmlXPathNodeSetMerge(NULL, val->nodesetval);

	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	push	0
	call	_xmlXPathNodeSetMerge
	add	esp, 8
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+4], eax

; 5461 : 	    /* Do not deallocate the copied tree value */
; 5462 : 	    ret->boolval = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+8], 0

; 5463 : 	    break;

	jmp	SHORT $LN2@xmlXPathOb
$LN9@xmlXPathOb:

; 5464 : 	case XPATH_LOCATIONSET:
; 5465 : #ifdef LIBXML_XPTR_ENABLED
; 5466 : 	{
; 5467 : 	    xmlLocationSetPtr loc = val->user;

	mov	ecx, DWORD PTR _val$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _loc$1[ebp], edx

; 5468 : 	    ret->user = (void *) xmlXPtrLocationSetMerge(NULL, loc);

	mov	eax, DWORD PTR _loc$1[ebp]
	push	eax
	push	0
	call	_xmlXPtrLocationSetMerge
	add	esp, 8
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 5469 : 	    break;

	jmp	SHORT $LN2@xmlXPathOb
$LN10@xmlXPathOb:

; 5470 : 	}
; 5471 : #endif
; 5472 :         case XPATH_USERS:
; 5473 : 	    ret->user = val->user;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], ecx

; 5474 : 	    break;

	jmp	SHORT $LN2@xmlXPathOb
$LN11@xmlXPathOb:

; 5475 :         case XPATH_UNDEFINED:
; 5476 : 	    xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	mov	edx, DWORD PTR _val$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET ??_C@_0CJ@OPCFGEGG@xmlXPathObjectCopy?3?5unsupported@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlXPathOb:

; 5477 : 		    "xmlXPathObjectCopy: unsupported type %d\n",
; 5478 : 		    val->type);
; 5479 : 	    break;
; 5480 :     }
; 5481 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathOb:

; 5482 : }

	pop	edi
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN13@xmlXPathOb:
	DD	$LN11@xmlXPathOb
	DD	$LN8@xmlXPathOb
	DD	$LN2@xmlXPathOb
	DD	$LN2@xmlXPathOb
	DD	$LN7@xmlXPathOb
	DD	$LN2@xmlXPathOb
	DD	$LN2@xmlXPathOb
	DD	$LN9@xmlXPathOb
	DD	$LN10@xmlXPathOb
	DD	$LN8@xmlXPathOb
_xmlXPathObjectCopy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFreeNodeSet
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_obj$ = 8						; size = 4
_xmlXPathFreeNodeSet PROC				; COMDAT

; 4176 : xmlXPathFreeNodeSet(xmlNodeSetPtr obj) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4177 :     if (obj == NULL) return;

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN5@xmlXPathFr
	jmp	$LN1@xmlXPathFr
$LN5@xmlXPathFr:

; 4178 :     if (obj->nodeTab != NULL) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN6@xmlXPathFr

; 4179 : 	int i;
; 4180 : 
; 4181 : 	/* @@ with_ns to check whether namespace nodes should be looked at @@ */
; 4182 : 	for (i = 0;i < obj->nodeNr;i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@xmlXPathFr
$LN2@xmlXPathFr:
	mov	ecx, DWORD PTR _i$1[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$1[ebp], ecx
$LN4@xmlXPathFr:
	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN3@xmlXPathFr

; 4183 : 	    if ((obj->nodeTab[i] != NULL) &&

	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN7@xmlXPathFr
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN7@xmlXPathFr

; 4184 : 		(obj->nodeTab[i]->type == XML_NAMESPACE_DECL))
; 4185 : 		xmlXPathNodeSetFreeNs((xmlNsPtr) obj->nodeTab[i]);

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_xmlXPathNodeSetFreeNs
	add	esp, 4
$LN7@xmlXPathFr:
	jmp	SHORT $LN2@xmlXPathFr
$LN3@xmlXPathFr:

; 4186 : 	xmlFree(obj->nodeTab);

	mov	esi, esp
	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlXPathFr:

; 4187 :     }
; 4188 :     xmlFree(obj);

	mov	esi, esp
	mov	edx, DWORD PTR _obj$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathFr:

; 4189 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathFreeNodeSet ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFreeNodeSetList
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_xmlXPathFreeNodeSetList PROC				; COMDAT

; 4452 : xmlXPathFreeNodeSetList(xmlXPathObjectPtr obj) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 4453 :     if (obj == NULL) return;

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN2@xmlXPathFr
	jmp	SHORT $LN1@xmlXPathFr
$LN2@xmlXPathFr:

; 4454 : #ifdef XP_DEBUG_OBJ_USAGE
; 4455 :     xmlXPathDebugObjUsageReleased(NULL, obj->type);
; 4456 : #endif
; 4457 :     xmlFree(obj);

	mov	esi, esp
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathFr:

; 4458 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathFreeNodeSetList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathNodeSetCreate
_TEXT	SEGMENT
_ns$1 = -8						; size = 4
_ret$ = -4						; size = 4
_val$ = 8						; size = 4
_xmlXPathNodeSetCreate PROC				; COMDAT

; 3527 : xmlXPathNodeSetCreate(xmlNodePtr val) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 3528 :     xmlNodeSetPtr ret;
; 3529 : 
; 3530 :     ret = (xmlNodeSetPtr) xmlMalloc(sizeof(xmlNodeSet));

	mov	esi, esp
	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 3531 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlXPathNo

; 3532 :         xmlXPathErrMemory(NULL, "creating nodeset\n");

	push	OFFSET ??_C@_0BC@LBLPMNCN@creating?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3533 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN2@xmlXPathNo:

; 3534 :     }
; 3535 :     memset(ret, 0 , (size_t) sizeof(xmlNodeSet));

	xor	eax, eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax

; 3536 :     if (val != NULL) {

	cmp	DWORD PTR _val$[ebp], 0
	je	$LN3@xmlXPathNo

; 3537 :         ret->nodeTab = (xmlNodePtr *) xmlMalloc(XML_NODESET_DEFAULT *

	mov	esi, esp
	push	40					; 00000028H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], eax

; 3538 : 					     sizeof(xmlNodePtr));
; 3539 : 	if (ret->nodeTab == NULL) {

	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN4@xmlXPathNo

; 3540 : 	    xmlXPathErrMemory(NULL, "creating nodeset\n");

	push	OFFSET ??_C@_0BC@LBLPMNCN@creating?5nodeset?6@
	push	0
	call	_xmlXPathErrMemory
	add	esp, 8

; 3541 : 	    xmlFree(ret);

	mov	esi, esp
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3542 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlXPathNo
$LN4@xmlXPathNo:

; 3543 : 	}
; 3544 : 	memset(ret->nodeTab, 0 ,

	xor	edx, edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], edx
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], edx
	mov	DWORD PTR [ecx+16], edx
	mov	DWORD PTR [ecx+20], edx
	mov	DWORD PTR [ecx+24], edx
	mov	DWORD PTR [ecx+28], edx
	mov	DWORD PTR [ecx+32], edx
	mov	DWORD PTR [ecx+36], edx

; 3545 : 	       XML_NODESET_DEFAULT * (size_t) sizeof(xmlNodePtr));
; 3546 :         ret->nodeMax = XML_NODESET_DEFAULT;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+4], 10			; 0000000aH

; 3547 : 	if (val->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _val$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN5@xmlXPathNo

; 3548 : 	    xmlNsPtr ns = (xmlNsPtr) val;

	mov	ecx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _ns$1[ebp], ecx

; 3549 : 
; 3550 : 	    ret->nodeTab[ret->nodeNr++] =

	mov	edx, DWORD PTR _ns$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ns$1[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlXPathNodeSetDupNs
	add	esp, 8
	mov	edx, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], ecx

; 3551 : 		xmlXPathNodeSetDupNs((xmlNodePtr) ns->next, ns);
; 3552 : 	} else

	jmp	SHORT $LN3@xmlXPathNo
$LN5@xmlXPathNo:

; 3553 : 	    ret->nodeTab[ret->nodeNr++] = val;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@xmlXPathNo:

; 3554 :     }
; 3555 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlXPathNo:

; 3556 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlXPathNodeSetCreate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xpath.c
;	COMDAT _xmlXPathFreeObject
_TEXT	SEGMENT
_obj$ = 8						; size = 4
_xmlXPathFreeObject PROC				; COMDAT

; 5491 : xmlXPathFreeObject(xmlXPathObjectPtr obj) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __9DBA2A81_xpath@c
	call	@__CheckForDebuggerJustMyCode@4

; 5492 :     if (obj == NULL) return;

	cmp	DWORD PTR _obj$[ebp], 0
	jne	SHORT $LN2@xmlXPathFr
	jmp	$LN1@xmlXPathFr
$LN2@xmlXPathFr:

; 5493 :     if ((obj->type == XPATH_NODESET) || (obj->type == XPATH_XSLT_TREE)) {

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN5@xmlXPathFr
	mov	ecx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [ecx], 9
	jne	SHORT $LN3@xmlXPathFr
$LN5@xmlXPathFr:

; 5494 : 	if (obj->boolval) {

	mov	edx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN6@xmlXPathFr

; 5495 : #if 0
; 5496 : 	    if (obj->user != NULL) {
; 5497 :                 xmlXPathFreeNodeSet(obj->nodesetval);
; 5498 : 		xmlFreeNodeList((xmlNodePtr) obj->user);
; 5499 : 	    } else
; 5500 : #endif
; 5501 : 	    obj->type = XPATH_XSLT_TREE; /* TODO: Just for debugging. */

	mov	eax, DWORD PTR _obj$[ebp]
	mov	DWORD PTR [eax], 9

; 5502 : 	    if (obj->nodesetval != NULL)

	mov	ecx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN8@xmlXPathFr

; 5503 : 		xmlXPathFreeValueTree(obj->nodesetval);

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathFreeValueTree
	add	esp, 4
$LN8@xmlXPathFr:

; 5504 : 	} else {

	jmp	SHORT $LN7@xmlXPathFr
$LN6@xmlXPathFr:

; 5505 : 	    if (obj->nodesetval != NULL)

	mov	ecx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN7@xmlXPathFr

; 5506 : 		xmlXPathFreeNodeSet(obj->nodesetval);

	mov	edx, DWORD PTR _obj$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlXPathFreeNodeSet
	add	esp, 4
$LN7@xmlXPathFr:

; 5507 : 	}

	jmp	SHORT $LN4@xmlXPathFr
$LN3@xmlXPathFr:

; 5508 : #ifdef LIBXML_XPTR_ENABLED
; 5509 :     } else if (obj->type == XPATH_LOCATIONSET) {

	mov	ecx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [ecx], 7
	jne	SHORT $LN10@xmlXPathFr

; 5510 : 	if (obj->user != NULL)

	mov	edx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN12@xmlXPathFr

; 5511 : 	    xmlXPtrFreeLocationSet(obj->user);

	mov	eax, DWORD PTR _obj$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_xmlXPtrFreeLocationSet
	add	esp, 4
$LN12@xmlXPathFr:

; 5512 : #endif
; 5513 :     } else if (obj->type == XPATH_STRING) {

	jmp	SHORT $LN4@xmlXPathFr
$LN10@xmlXPathFr:
	mov	edx, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [edx], 4
	jne	SHORT $LN4@xmlXPathFr

; 5514 : 	if (obj->stringval != NULL)

	mov	eax, DWORD PTR _obj$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN4@xmlXPathFr

; 5515 : 	    xmlFree(obj->stringval);

	mov	esi, esp
	mov	ecx, DWORD PTR _obj$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlXPathFr:

; 5516 :     }
; 5517 : #ifdef XP_DEBUG_OBJ_USAGE
; 5518 :     xmlXPathDebugObjUsageReleased(NULL, obj->type);
; 5519 : #endif
; 5520 :     xmlFree(obj);

	mov	esi, esp
	mov	eax, DWORD PTR _obj$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlXPathFr:

; 5521 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlXPathFreeObject ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
tv81 = -20						; size = 4
__Result$1 = -16					; size = 4
__Format$ = -12						; size = 4
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_snprintf PROC						; COMDAT

; 1948 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A452D4A0_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1949 :         int _Result;
; 1950 :         va_list _ArgList;
; 1951 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1952 :     #pragma warning(suppress:28719)    // 28719
; 1953 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

	mov	ecx, DWORD PTR __Format$[ebp]
	mov	DWORD PTR __Format$[ebp], ecx

; 1440 :         int const _Result = __stdio_common_vsprintf(

	mov	esi, esp
	mov	edx, DWORD PTR __ArgList$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR __Format$[ebp]
	push	eax
	mov	ecx, DWORD PTR __BufferCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2
	mov	edx, DWORD PTR [eax+4]
	push	edx
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Result$1[ebp], eax

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$1[ebp], 0
	jge	SHORT $LN5@snprintf
	mov	DWORD PTR tv81[ebp], -1
	jmp	SHORT $LN3@snprintf
$LN5@snprintf:
	mov	eax, DWORD PTR __Result$1[ebp]
	mov	DWORD PTR tv81[ebp], eax
$LN3@snprintf:

; 1952 :     #pragma warning(suppress:28719)    // 28719
; 1953 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR __Result$[ebp], ecx

; 1954 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1955 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1956 :     }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Format$ = -12						; size = 4
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A452D4A0_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __Format$[ebp]
	mov	DWORD PTR __Format$[ebp], ecx

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	edx, DWORD PTR __ArgList$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR __Format$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Stream$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __2CC6E67D_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
