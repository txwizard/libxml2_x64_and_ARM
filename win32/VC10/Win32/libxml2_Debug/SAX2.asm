; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\SAX2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_xmlIsBaseCharGroup:BYTE:010H
COMM	_xmlIsCharGroup:BYTE:010H
COMM	_xmlIsCombiningGroup:BYTE:010H
COMM	_xmlIsDigitGroup:BYTE:010H
COMM	_xmlIsExtenderGroup:BYTE:010H
COMM	_xmlIsIdeographicGroup:BYTE:010H
COMM	_xmlIsPubidChar_tab:BYTE:0100H
COMM	_xmlParserMaxDepth:DWORD
COMM	_xmlXPathNAN:QWORD
COMM	_xmlXPathPINF:QWORD
COMM	_xmlXPathNINF:QWORD
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__A8525CDE_sax2@c DB 01H
msvcjmc	ENDS
PUBLIC	_xmlSAX2GetPublicId
PUBLIC	_xmlSAX2GetSystemId
PUBLIC	_xmlSAX2SetDocumentLocator
PUBLIC	_xmlSAX2GetLineNumber
PUBLIC	_xmlSAX2GetColumnNumber
PUBLIC	_xmlSAX2IsStandalone
PUBLIC	_xmlSAX2HasInternalSubset
PUBLIC	_xmlSAX2HasExternalSubset
PUBLIC	_xmlSAX2InternalSubset
PUBLIC	_xmlSAX2ExternalSubset
PUBLIC	_xmlSAX2GetEntity
PUBLIC	_xmlSAX2GetParameterEntity
PUBLIC	_xmlSAX2ResolveEntity
PUBLIC	_xmlSAX2EntityDecl
PUBLIC	_xmlSAX2AttributeDecl
PUBLIC	_xmlSAX2ElementDecl
PUBLIC	_xmlSAX2NotationDecl
PUBLIC	_xmlSAX2UnparsedEntityDecl
PUBLIC	_xmlSAX2StartDocument
PUBLIC	_xmlSAX2EndDocument
PUBLIC	_xmlSAX2StartElement
PUBLIC	_xmlSAX2EndElement
PUBLIC	_xmlSAX2StartElementNs
PUBLIC	_xmlSAX2EndElementNs
PUBLIC	_xmlSAX2Reference
PUBLIC	_xmlSAX2Characters
PUBLIC	_xmlSAX2IgnorableWhitespace
PUBLIC	_xmlSAX2ProcessingInstruction
PUBLIC	_xmlSAX2Comment
PUBLIC	_xmlSAX2CDataBlock
PUBLIC	_xmlSAXDefaultVersion
PUBLIC	_xmlSAXVersion
PUBLIC	_xmlSAX2InitDefaultSAXHandler
PUBLIC	_xmlSAX2InitHtmlDefaultSAXHandler
PUBLIC	_htmlDefaultSAXHandlerInit
PUBLIC	_xmlSAX2InitDocbDefaultSAXHandler
PUBLIC	_docbDefaultSAXHandlerInit
PUBLIC	_xmlDefaultSAXHandlerInit
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0P@PCJPAHLM@out?5of?5memory?6@		; `string'
PUBLIC	??_C@_0BG@CKPEJCG@xmlSAX2InternalSubset@	; `string'
PUBLIC	??_C@_0BG@NJCKJHBI@xmlSAX2ExternalSubset@	; `string'
PUBLIC	??_C@_0EE@PPDHKGIC@Entity?$CI?$CFs?$CJ?5document?5marked?5stan@ ; `string'
PUBLIC	??_C@_0BO@LDENBHGA@Failure?5to?5process?5entity?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0DD@GCBFDMPE@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@ ; `string'
PUBLIC	??_C@_0DD@ECLLADNP@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@ ; `string'
PUBLIC	??_C@_0DG@EGJGBEOC@SAX?4xmlSAX2EntityDecl?$CI?$CFs?$CJ?5calle@ ; `string'
PUBLIC	??_C@_06IMLNHOMM@xml?3id@			; `string'
PUBLIC	??_C@_0CG@DOFEKNB@xml?3id?5?3?5attribute?5type?5should?5@ ; `string'
PUBLIC	??_C@_0DJ@CKOJIFJI@SAX?4xmlSAX2AttributeDecl?$CI?$CFs?$CJ?5ca@ ; `string'
PUBLIC	??_C@_0DH@FINDFGFC@SAX?4xmlSAX2ElementDecl?$CI?$CFs?$CJ?5call@ ; `string'
PUBLIC	??_C@_0DM@OMFMKHI@SAX?4xmlSAX2NotationDecl?$CI?$CFs?$CJ?5ext@ ; `string'
PUBLIC	??_C@_0DI@MAMMGJDO@SAX?4xmlSAX2NotationDecl?$CI?$CFs?$CJ?5cal@ ; `string'
PUBLIC	??_C@_0DO@IABCNOGI@SAX?4xmlSAX2UnparsedEntityDecl?$CI?$CF@ ; `string'
PUBLIC	??_C@_0BF@BOIPPPAK@xmlSAX2StartDocument@	; `string'
PUBLIC	??_C@_05PPEFOGKI@xmlns@				; `string'
PUBLIC	??_C@_0CE@IJLGNIDG@invalid?5namespace?5declaration?5?8@ ; `string'
PUBLIC	??_C@_0CL@HKIDFKGE@Avoid?5attribute?5ending?5with?5?8?3?8@ ; `string'
PUBLIC	??_C@_0BE@NLCCMPDP@xmlSAX2StartElement@		; `string'
PUBLIC	??_C@_0BL@KIHPGOD@xmlns?3?5?$CFs?5not?5a?5valid?5URI?6@ ; `string'
PUBLIC	??_C@_0BP@JFBGAFGI@xmlns?3?5URI?5?$CFs?5is?5not?5absolute?6@ ; `string'
PUBLIC	??_C@_0CE@LNIJHMCD@Empty?5namespace?5name?5for?5prefix@ ; `string'
PUBLIC	??_C@_0BO@MNIAHAOJ@xmlns?3?$CFs?3?5?$CFs?5not?5a?5valid?5URI?6@ ; `string'
PUBLIC	??_C@_0CC@FFFCEDOK@xmlns?3?$CFs?3?5URI?5?$CFs?5is?5not?5absolut@ ; `string'
PUBLIC	??_C@_0DE@HNKDFNKM@Namespace?5prefix?5?$CFs?5of?5attribut@ ; `string'
PUBLIC	??_C@_0BO@PGCJKKMF@Attribute?5?$CFs?5in?5?$CFs?5redefined?6@ ; `string'
PUBLIC	??_C@_0CO@CCGEJOB@xml?3id?5?3?5attribute?5value?5?$CFs?5is?5@ ; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3@				; `string'
PUBLIC	??_C@_0DP@KFNFGALP@standalone?3?5attribute?5?$CFs?5on?5?$CFs?5@ ; `string'
PUBLIC	??_C@_0CC@LPGBEFAE@Validation?5failed?3?5no?5DTD?5found@ ; `string'
PUBLIC	??_C@_0CE@HAGAOPBB@Namespace?5prefix?5?$CFs?5is?5not?5defi@ ; `string'
PUBLIC	??_C@_0BC@IJLHKBBO@xmlSAX2Characters@		; `string'
PUBLIC	??_C@_0BA@DNIHONAO@xmlSAX2TextNode@		; `string'
PUBLIC	??_C@_0BD@HFPHEGLL@xmlSAX2AttributeNs@		; `string'
PUBLIC	??_C@_0BG@CNBDKEMA@xmlSAX2StartElementNs@	; `string'
PUBLIC	??_C@_03PJHHNEEI@xml@				; `string'
PUBLIC	??_C@_0CD@HMPDFDML@Namespace?5prefix?5?$CFs?5was?5not?5fou@ ; `string'
PUBLIC	??_C@_0CI@JKKHNIFK@Namespace?5default?5prefix?5was?5no@ ; `string'
PUBLIC	??_C@_0CL@EDPCIJGK@xmlSAX2Characters?3?5xmlStrdup?5re@ ; `string'
PUBLIC	??_C@_0CC@PCIHKIPC@xmlSAX2Characters?3?5huge?5text?5no@ ; `string'
PUBLIC	??_C@_0CF@EADJOGLP@xmlSAX2Characters?5overflow?5prev@ ; `string'
EXTRN	_xmlStrdup:PROC
EXTRN	_xmlStrndup:PROC
EXTRN	_xmlStrchr:PROC
EXTRN	_xmlStrEqual:PROC
EXTRN	_xmlStrlen:PROC
EXTRN	_xmlStrcat:PROC
EXTRN	_xmlDictReference:PROC
EXTRN	_xmlDictLookup:PROC
EXTRN	_xmlDictQLookup:PROC
EXTRN	_xmlDictOwns:PROC
EXTRN	_xmlValidateNCName:PROC
EXTRN	_xmlBuildQName:PROC
EXTRN	_xmlCreateIntSubset:PROC
EXTRN	_xmlNewDtd:PROC
EXTRN	_xmlGetIntSubset:PROC
EXTRN	_xmlFreeDtd:PROC
EXTRN	_xmlNewNs:PROC
EXTRN	_xmlNewDoc:PROC
EXTRN	_xmlNewNsProp:PROC
EXTRN	_xmlNewNsPropEatName:PROC
EXTRN	_xmlNewDocNode:PROC
EXTRN	_xmlNewDocNodeEatName:PROC
EXTRN	_xmlNewDocText:PROC
EXTRN	_xmlNewDocPI:PROC
EXTRN	_xmlNewDocComment:PROC
EXTRN	_xmlNewCDataBlock:PROC
EXTRN	_xmlNewCharRef:PROC
EXTRN	_xmlNewReference:PROC
EXTRN	_xmlGetLastChild:PROC
EXTRN	_xmlAddChild:PROC
EXTRN	_xmlAddChildList:PROC
EXTRN	_xmlAddSibling:PROC
EXTRN	_xmlUnlinkNode:PROC
EXTRN	_xmlTextConcat:PROC
EXTRN	_xmlFreeNode:PROC
EXTRN	_xmlSearchNs:PROC
EXTRN	_xmlSetNs:PROC
EXTRN	_xmlStringGetNodeList:PROC
EXTRN	_xmlStringLenGetNodeList:PROC
EXTRN	_xmlParserError:PROC
EXTRN	_xmlParserWarning:PROC
EXTRN	___xmlRaiseError:PROC
EXTRN	_xmlAddNotationDecl:PROC
EXTRN	_xmlAddElementDecl:PROC
EXTRN	_xmlFreeEnumeration:PROC
EXTRN	_xmlAddAttributeDecl:PROC
EXTRN	_xmlAddID:PROC
EXTRN	_xmlIsID:PROC
EXTRN	_xmlAddRef:PROC
EXTRN	_xmlIsRef:PROC
EXTRN	_xmlValidateRoot:PROC
EXTRN	_xmlValidateElementDecl:PROC
EXTRN	_xmlValidNormalizeAttributeValue:PROC
EXTRN	_xmlValidCtxtNormalizeAttributeValue:PROC
EXTRN	_xmlValidateAttributeDecl:PROC
EXTRN	_xmlValidateNotationDecl:PROC
EXTRN	_xmlValidateDtdFinal:PROC
EXTRN	_xmlValidateOneElement:PROC
EXTRN	_xmlValidateOneAttribute:PROC
EXTRN	_xmlValidateOneNamespace:PROC
EXTRN	_xmlValidateDocumentFinal:PROC
EXTRN	_xmlGetDtdQAttrDesc:PROC
EXTRN	_xmlGetDtdQElementDesc:PROC
EXTRN	_xmlAddDocEntity:PROC
EXTRN	_xmlAddDtdEntity:PROC
EXTRN	_xmlGetPredefinedEntity:PROC
EXTRN	_xmlGetDocEntity:PROC
EXTRN	_xmlGetParameterEntity:PROC
EXTRN	_xmlDetectCharEncoding:PROC
EXTRN	_xmlParseCtxtExternalEntity:PROC
EXTRN	_xmlParserAddNodeInfo:PROC
EXTRN	_xmlLoadExternalEntity:PROC
EXTRN	___docbDefaultSAXHandler:PROC
EXTRN	___htmlDefaultSAXHandler:PROC
EXTRN	___xmlDefaultSAXHandler:PROC
EXTRN	___xmlRegisterNodeDefaultValue:PROC
EXTRN	_xmlSwitchEncoding:PROC
EXTRN	_xmlPushInput:PROC
EXTRN	_xmlPopInput:PROC
EXTRN	_xmlFreeInputStream:PROC
EXTRN	_xmlSplitQName:PROC
EXTRN	_xmlParseExternalSubset:PROC
EXTRN	_xmlStringDecodeEntities:PROC
EXTRN	_xmlStringLenDecodeEntities:PROC
EXTRN	_nodePush:PROC
EXTRN	_nodePop:PROC
EXTRN	_xmlErrMemory:PROC
EXTRN	_xmlBuildURI:PROC
EXTRN	_xmlParseURI:PROC
EXTRN	_xmlFreeURI:PROC
EXTRN	_xmlCanonicPath:PROC
EXTRN	_xmlPathToURI:PROC
EXTRN	_htmlNewDocNoDtD:PROC
EXTRN	_htmlIsBooleanAttr:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	___xmlRegisterCallbacks:DWORD
EXTRN	_xmlStringText:BYTE
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
_DATA	SEGMENT
_xmlSAX2DefaultVersionValue DD 02H
_DATA	ENDS
;	COMDAT ??_C@_0CF@EADJOGLP@xmlSAX2Characters?5overflow?5prev@
CONST	SEGMENT
??_C@_0CF@EADJOGLP@xmlSAX2Characters?5overflow?5prev@ DB 'xmlSAX2Characte'
	DB	'rs overflow prevented', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@PCIHKIPC@xmlSAX2Characters?3?5huge?5text?5no@
CONST	SEGMENT
??_C@_0CC@PCIHKIPC@xmlSAX2Characters?3?5huge?5text?5no@ DB 'xmlSAX2Charac'
	DB	'ters: huge text node', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EDPCIJGK@xmlSAX2Characters?3?5xmlStrdup?5re@
CONST	SEGMENT
??_C@_0CL@EDPCIJGK@xmlSAX2Characters?3?5xmlStrdup?5re@ DB 'xmlSAX2Charact'
	DB	'ers: xmlStrdup returned NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JKKHNIFK@Namespace?5default?5prefix?5was?5no@
CONST	SEGMENT
??_C@_0CI@JKKHNIFK@Namespace?5default?5prefix?5was?5no@ DB 'Namespace def'
	DB	'ault prefix was not found', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HMPDFDML@Namespace?5prefix?5?$CFs?5was?5not?5fou@
CONST	SEGMENT
??_C@_0CD@HMPDFDML@Namespace?5prefix?5?$CFs?5was?5not?5fou@ DB 'Namespace'
	DB	' prefix %s was not found', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PJHHNEEI@xml@
CONST	SEGMENT
??_C@_03PJHHNEEI@xml@ DB 'xml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CNBDKEMA@xmlSAX2StartElementNs@
CONST	SEGMENT
??_C@_0BG@CNBDKEMA@xmlSAX2StartElementNs@ DB 'xmlSAX2StartElementNs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HFPHEGLL@xmlSAX2AttributeNs@
CONST	SEGMENT
??_C@_0BD@HFPHEGLL@xmlSAX2AttributeNs@ DB 'xmlSAX2AttributeNs', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DNIHONAO@xmlSAX2TextNode@
CONST	SEGMENT
??_C@_0BA@DNIHONAO@xmlSAX2TextNode@ DB 'xmlSAX2TextNode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IJLHKBBO@xmlSAX2Characters@
CONST	SEGMENT
??_C@_0BC@IJLHKBBO@xmlSAX2Characters@ DB 'xmlSAX2Characters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HAGAOPBB@Namespace?5prefix?5?$CFs?5is?5not?5defi@
CONST	SEGMENT
??_C@_0CE@HAGAOPBB@Namespace?5prefix?5?$CFs?5is?5not?5defi@ DB 'Namespace'
	DB	' prefix %s is not defined', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LPGBEFAE@Validation?5failed?3?5no?5DTD?5found@
CONST	SEGMENT
??_C@_0CC@LPGBEFAE@Validation?5failed?3?5no?5DTD?5found@ DB 'Validation f'
	DB	'ailed: no DTD found !', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@KFNFGALP@standalone?3?5attribute?5?$CFs?5on?5?$CFs?5@
CONST	SEGMENT
??_C@_0DP@KFNFGALP@standalone?3?5attribute?5?$CFs?5on?5?$CFs?5@ DB 'stand'
	DB	'alone: attribute %s on %s defaulted from external subset', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CCGEJOB@xml?3id?5?3?5attribute?5value?5?$CFs?5is?5@
CONST	SEGMENT
??_C@_0CO@CCGEJOB@xml?3id?5?3?5attribute?5value?5?$CFs?5is?5@ DB 'xml:id '
	DB	': attribute value %s is not an NCName', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PGCJKKMF@Attribute?5?$CFs?5in?5?$CFs?5redefined?6@
CONST	SEGMENT
??_C@_0BO@PGCJKKMF@Attribute?5?$CFs?5in?5?$CFs?5redefined?6@ DB 'Attribut'
	DB	'e %s in %s redefined', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@HNKDFNKM@Namespace?5prefix?5?$CFs?5of?5attribut@
CONST	SEGMENT
??_C@_0DE@HNKDFNKM@Namespace?5prefix?5?$CFs?5of?5attribut@ DB 'Namespace '
	DB	'prefix %s of attribute %s is not defined', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FFFCEDOK@xmlns?3?$CFs?3?5URI?5?$CFs?5is?5not?5absolut@
CONST	SEGMENT
??_C@_0CC@FFFCEDOK@xmlns?3?$CFs?3?5URI?5?$CFs?5is?5not?5absolut@ DB 'xmln'
	DB	's:%s: URI %s is not absolute', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MNIAHAOJ@xmlns?3?$CFs?3?5?$CFs?5not?5a?5valid?5URI?6@
CONST	SEGMENT
??_C@_0BO@MNIAHAOJ@xmlns?3?$CFs?3?5?$CFs?5not?5a?5valid?5URI?6@ DB 'xmlns'
	DB	':%s: %s not a valid URI', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LNIJHMCD@Empty?5namespace?5name?5for?5prefix@
CONST	SEGMENT
??_C@_0CE@LNIJHMCD@Empty?5namespace?5name?5for?5prefix@ DB 'Empty namespa'
	DB	'ce name for prefix %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JFBGAFGI@xmlns?3?5URI?5?$CFs?5is?5not?5absolute?6@
CONST	SEGMENT
??_C@_0BP@JFBGAFGI@xmlns?3?5URI?5?$CFs?5is?5not?5absolute?6@ DB 'xmlns: U'
	DB	'RI %s is not absolute', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KIHPGOD@xmlns?3?5?$CFs?5not?5a?5valid?5URI?6@
CONST	SEGMENT
??_C@_0BL@KIHPGOD@xmlns?3?5?$CFs?5not?5a?5valid?5URI?6@ DB 'xmlns: %s not'
	DB	' a valid URI', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NLCCMPDP@xmlSAX2StartElement@
CONST	SEGMENT
??_C@_0BE@NLCCMPDP@xmlSAX2StartElement@ DB 'xmlSAX2StartElement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HKIDFKGE@Avoid?5attribute?5ending?5with?5?8?3?8@
CONST	SEGMENT
??_C@_0CL@HKIDFKGE@Avoid?5attribute?5ending?5with?5?8?3?8@ DB 'Avoid attr'
	DB	'ibute ending with '':'' like ''%s''', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IJLGNIDG@invalid?5namespace?5declaration?5?8@
CONST	SEGMENT
??_C@_0CE@IJLGNIDG@invalid?5namespace?5declaration?5?8@ DB 'invalid names'
	DB	'pace declaration ''%s''', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPEFOGKI@xmlns@
CONST	SEGMENT
??_C@_05PPEFOGKI@xmlns@ DB 'xmlns', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BOIPPPAK@xmlSAX2StartDocument@
CONST	SEGMENT
??_C@_0BF@BOIPPPAK@xmlSAX2StartDocument@ DB 'xmlSAX2StartDocument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@IABCNOGI@SAX?4xmlSAX2UnparsedEntityDecl?$CI?$CF@
CONST	SEGMENT
??_C@_0DO@IABCNOGI@SAX?4xmlSAX2UnparsedEntityDecl?$CI?$CF@ DB 'SAX.xmlSAX'
	DB	'2UnparsedEntityDecl(%s) called while not in subset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@MAMMGJDO@SAX?4xmlSAX2NotationDecl?$CI?$CFs?$CJ?5cal@
CONST	SEGMENT
??_C@_0DI@MAMMGJDO@SAX?4xmlSAX2NotationDecl?$CI?$CFs?$CJ?5cal@ DB 'SAX.xm'
	DB	'lSAX2NotationDecl(%s) called while not in subset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@OMFMKHI@SAX?4xmlSAX2NotationDecl?$CI?$CFs?$CJ?5ext@
CONST	SEGMENT
??_C@_0DM@OMFMKHI@SAX?4xmlSAX2NotationDecl?$CI?$CFs?$CJ?5ext@ DB 'SAX.xml'
	DB	'SAX2NotationDecl(%s) externalID or PublicID missing', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@FINDFGFC@SAX?4xmlSAX2ElementDecl?$CI?$CFs?$CJ?5call@
CONST	SEGMENT
??_C@_0DH@FINDFGFC@SAX?4xmlSAX2ElementDecl?$CI?$CFs?$CJ?5call@ DB 'SAX.xm'
	DB	'lSAX2ElementDecl(%s) called while not in subset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@CKOJIFJI@SAX?4xmlSAX2AttributeDecl?$CI?$CFs?$CJ?5ca@
CONST	SEGMENT
??_C@_0DJ@CKOJIFJI@SAX?4xmlSAX2AttributeDecl?$CI?$CFs?$CJ?5ca@ DB 'SAX.xm'
	DB	'lSAX2AttributeDecl(%s) called while not in subset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DOFEKNB@xml?3id?5?3?5attribute?5type?5should?5@
CONST	SEGMENT
??_C@_0CG@DOFEKNB@xml?3id?5?3?5attribute?5type?5should?5@ DB 'xml:id : at'
	DB	'tribute type should be ID', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06IMLNHOMM@xml?3id@
CONST	SEGMENT
??_C@_06IMLNHOMM@xml?3id@ DB 'xml:id', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@EGJGBEOC@SAX?4xmlSAX2EntityDecl?$CI?$CFs?$CJ?5calle@
CONST	SEGMENT
??_C@_0DG@EGJGBEOC@SAX?4xmlSAX2EntityDecl?$CI?$CFs?$CJ?5calle@ DB 'SAX.xm'
	DB	'lSAX2EntityDecl(%s) called while not in subset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@ECLLADNP@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@
CONST	SEGMENT
??_C@_0DD@ECLLADNP@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@ DB 'Enti'
	DB	'ty(%s) already defined in the external subset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GCBFDMPE@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@
CONST	SEGMENT
??_C@_0DD@GCBFDMPE@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@ DB 'Enti'
	DB	'ty(%s) already defined in the internal subset', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LDENBHGA@Failure?5to?5process?5entity?5?$CFs?6@
CONST	SEGMENT
??_C@_0BO@LDENBHGA@Failure?5to?5process?5entity?5?$CFs?6@ DB 'Failure to '
	DB	'process entity %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@PPDHKGIC@Entity?$CI?$CFs?$CJ?5document?5marked?5stan@
CONST	SEGMENT
??_C@_0EE@PPDHKGIC@Entity?$CI?$CFs?$CJ?5document?5marked?5stan@ DB 'Entit'
	DB	'y(%s) document marked standalone but requires external subset'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NJCKJHBI@xmlSAX2ExternalSubset@
CONST	SEGMENT
??_C@_0BG@NJCKJHBI@xmlSAX2ExternalSubset@ DB 'xmlSAX2ExternalSubset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CKPEJCG@xmlSAX2InternalSubset@
CONST	SEGMENT
??_C@_0BG@CKPEJCG@xmlSAX2InternalSubset@ DB 'xmlSAX2InternalSubset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PCJPAHLM@out?5of?5memory?6@
CONST	SEGMENT
??_C@_0P@PCJPAHLM@out?5of?5memory?6@ DB 'out of memory', 0aH, 00H ; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2AttributeNs
_TEXT	SEGMENT
_fullname$1 = -92					; size = 4
_fn$2 = -84						; size = 50
_nvalnorm$3 = -28					; size = 4
_tmp$4 = -24						; size = 4
_tmp$5 = -20						; size = 4
_prev$6 = -16						; size = 4
_dup$ = -12						; size = 4
_namespace$ = -8					; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_localname$ = 12					; size = 4
_prefix$ = 16						; size = 4
_value$ = 20						; size = 4
_valueend$ = 24						; size = 4
_xmlSAX2AttributeNs PROC				; COMDAT

; 1983 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 1984 :     xmlAttrPtr ret;
; 1985 :     xmlNsPtr namespace = NULL;

	mov	DWORD PTR _namespace$[ebp], 0

; 1986 :     xmlChar *dup = NULL;

	mov	DWORD PTR _dup$[ebp], 0

; 1987 : 
; 1988 :     /*
; 1989 :      * Note: if prefix == NULL, the attribute is not in the default namespace
; 1990 :      */
; 1991 :     if (prefix != NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN6@xmlSAX2Att

; 1992 : 	namespace = xmlSearchNs(ctxt->myDoc, ctxt->node, prefix);

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _namespace$[ebp], eax
$LN6@xmlSAX2Att:

; 1993 : 
; 1994 :     /*
; 1995 :      * allocate the node
; 1996 :      */
; 1997 :     if (ctxt->freeAttrs != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+380], 0
	je	$LN7@xmlSAX2Att

; 1998 :         ret = ctxt->freeAttrs;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+380]
	mov	DWORD PTR _ret$[ebp], ecx

; 1999 : 	ctxt->freeAttrs = ret->next;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+380], ecx

; 2000 : 	ctxt->freeAttrsNr--;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+376]
	sub	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+376], eax

; 2001 : 	memset(ret, 0, sizeof(xmlAttr));

	push	48					; 00000030H
	push	0
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 2002 : 	ret->type = XML_ATTRIBUTE_NODE;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+4], 2

; 2003 : 
; 2004 : 	ret->parent = ctxt->node;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+20], eax

; 2005 : 	ret->doc = ctxt->myDoc;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+32], eax

; 2006 : 	ret->ns = namespace;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _namespace$[ebp]
	mov	DWORD PTR [ecx+36], edx

; 2007 : 
; 2008 : 	if (ctxt->dictNames)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+364], 0
	je	SHORT $LN9@xmlSAX2Att

; 2009 : 	    ret->name = localname;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _localname$[ebp]
	mov	DWORD PTR [ecx+8], edx
	jmp	SHORT $LN10@xmlSAX2Att
$LN9@xmlSAX2Att:

; 2010 : 	else
; 2011 : 	    ret->name = xmlStrdup(localname);

	mov	eax, DWORD PTR _localname$[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN10@xmlSAX2Att:

; 2012 : 
; 2013 :         /* link at the end to preserv order, TODO speed up with a last */
; 2014 : 	if (ctxt->node->properties == NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN11@xmlSAX2Att

; 2015 : 	    ctxt->node->properties = ret;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+44], eax

; 2016 : 	} else {

	jmp	SHORT $LN12@xmlSAX2Att
$LN11@xmlSAX2Att:

; 2017 : 	    xmlAttrPtr prev = ctxt->node->properties;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _prev$6[ebp], eax
$LN2@xmlSAX2Att:

; 2018 : 
; 2019 : 	    while (prev->next != NULL) prev = prev->next;

	mov	ecx, DWORD PTR _prev$6[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN3@xmlSAX2Att
	mov	edx, DWORD PTR _prev$6[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _prev$6[ebp], eax
	jmp	SHORT $LN2@xmlSAX2Att
$LN3@xmlSAX2Att:

; 2020 : 	    prev->next = ret;

	mov	ecx, DWORD PTR _prev$6[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 2021 : 	    ret->prev = prev;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _prev$6[ebp]
	mov	DWORD PTR [eax+28], ecx
$LN12@xmlSAX2Att:

; 2022 : 	}
; 2023 : 
; 2024 : 	if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))

	cmp	DWORD PTR ___xmlRegisterCallbacks, 0
	je	SHORT $LN13@xmlSAX2Att
	call	___xmlRegisterNodeDefaultValue
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN13@xmlSAX2Att

; 2025 : 	    xmlRegisterNodeDefaultValue((xmlNodePtr)ret);

	mov	esi, esp
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	___xmlRegisterNodeDefaultValue
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlSAX2Att:

; 2026 :     } else {

	jmp	SHORT $LN8@xmlSAX2Att
$LN7@xmlSAX2Att:

; 2027 : 	if (ctxt->dictNames)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+364], 0
	je	SHORT $LN14@xmlSAX2Att

; 2028 : 	    ret = xmlNewNsPropEatName(ctxt->node, namespace,

	push	0
	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	mov	eax, DWORD PTR _namespace$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	_xmlNewNsPropEatName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN15@xmlSAX2Att
$LN14@xmlSAX2Att:

; 2029 : 	                              (xmlChar *) localname, NULL);
; 2030 : 	else
; 2031 : 	    ret = xmlNewNsProp(ctxt->node, namespace, localname, NULL);

	push	0
	mov	eax, DWORD PTR _localname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _namespace$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_xmlNewNsProp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
$LN15@xmlSAX2Att:

; 2032 : 	if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN8@xmlSAX2Att

; 2033 : 	    xmlErrMemory(ctxt, "xmlSAX2AttributeNs");

	push	OFFSET ??_C@_0BD@HFPHEGLL@xmlSAX2AttributeNs@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrMemory
	add	esp, 8

; 2034 : 	    return;

	jmp	$LN1@xmlSAX2Att
$LN8@xmlSAX2Att:

; 2035 : 	}
; 2036 :     }
; 2037 : 
; 2038 :     if ((ctxt->replaceEntities == 0) && (!ctxt->html)) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	$LN17@xmlSAX2Att
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	$LN17@xmlSAX2Att

; 2039 : 	xmlNodePtr tmp;
; 2040 : 
; 2041 : 	/*
; 2042 : 	 * We know that if there is an entity reference, then
; 2043 : 	 * the string has been dup'ed and terminates with 0
; 2044 : 	 * otherwise with ' or "
; 2045 : 	 */
; 2046 : 	if (*valueend != 0) {

	mov	ecx, DWORD PTR _valueend$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN19@xmlSAX2Att

; 2047 : 	    tmp = xmlSAX2TextNode(ctxt, value, valueend - value);

	mov	eax, DWORD PTR _valueend$[ebp]
	sub	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSAX2TextNode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tmp$5[ebp], eax

; 2048 : 	    ret->children = tmp;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _tmp$5[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2049 : 	    ret->last = tmp;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _tmp$5[ebp]
	mov	DWORD PTR [edx+16], eax

; 2050 : 	    if (tmp != NULL) {

	cmp	DWORD PTR _tmp$5[ebp], 0
	je	SHORT $LN21@xmlSAX2Att

; 2051 : 		tmp->doc = ret->doc;

	mov	ecx, DWORD PTR _tmp$5[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax

; 2052 : 		tmp->parent = (xmlNodePtr) ret;

	mov	ecx, DWORD PTR _tmp$5[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN21@xmlSAX2Att:

; 2053 : 	    }
; 2054 : 	} else {

	jmp	SHORT $LN20@xmlSAX2Att
$LN19@xmlSAX2Att:

; 2055 : 	    ret->children = xmlStringLenGetNodeList(ctxt->myDoc, value,

	mov	eax, DWORD PTR _valueend$[ebp]
	sub	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStringLenGetNodeList
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 2056 : 						    valueend - value);
; 2057 : 	    tmp = ret->children;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _tmp$5[ebp], eax
$LN4@xmlSAX2Att:

; 2058 : 	    while (tmp != NULL) {

	cmp	DWORD PTR _tmp$5[ebp], 0
	je	SHORT $LN20@xmlSAX2Att

; 2059 : 	        tmp->doc = ret->doc;

	mov	ecx, DWORD PTR _tmp$5[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax

; 2060 : 		tmp->parent = (xmlNodePtr) ret;

	mov	ecx, DWORD PTR _tmp$5[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 2061 : 		if (tmp->next == NULL)

	mov	eax, DWORD PTR _tmp$5[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN22@xmlSAX2Att

; 2062 : 		    ret->last = tmp;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _tmp$5[ebp]
	mov	DWORD PTR [ecx+16], edx
$LN22@xmlSAX2Att:

; 2063 : 		tmp = tmp->next;

	mov	eax, DWORD PTR _tmp$5[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _tmp$5[ebp], ecx

; 2064 : 	    }

	jmp	SHORT $LN4@xmlSAX2Att
$LN20@xmlSAX2Att:

; 2065 : 	}

	jmp	SHORT $LN18@xmlSAX2Att
$LN17@xmlSAX2Att:

; 2066 :     } else if (value != NULL) {

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN18@xmlSAX2Att

; 2067 : 	xmlNodePtr tmp;
; 2068 : 
; 2069 : 	tmp = xmlSAX2TextNode(ctxt, value, valueend - value);

	mov	edx, DWORD PTR _valueend$[ebp]
	sub	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2TextNode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tmp$4[ebp], eax

; 2070 : 	ret->children = tmp;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _tmp$4[ebp]
	mov	DWORD PTR [edx+12], eax

; 2071 : 	ret->last = tmp;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _tmp$4[ebp]
	mov	DWORD PTR [ecx+16], edx

; 2072 : 	if (tmp != NULL) {

	cmp	DWORD PTR _tmp$4[ebp], 0
	je	SHORT $LN18@xmlSAX2Att

; 2073 : 	    tmp->doc = ret->doc;

	mov	eax, DWORD PTR _tmp$4[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR [eax+32], edx

; 2074 : 	    tmp->parent = (xmlNodePtr) ret;

	mov	eax, DWORD PTR _tmp$4[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN18@xmlSAX2Att:

; 2075 : 	}
; 2076 :     }
; 2077 : 
; 2078 : #ifdef LIBXML_VALID_ENABLED
; 2079 :     if ((!ctxt->html) && ctxt->validate && ctxt->wellFormed &&
; 2080 :         ctxt->myDoc && ctxt->myDoc->intSubset) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN25@xmlSAX2Att
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	$LN25@xmlSAX2Att
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	$LN25@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	$LN25@xmlSAX2Att
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+44], 0
	je	$LN25@xmlSAX2Att

; 2081 : 	/*
; 2082 : 	 * If we don't substitute entities, the validation should be
; 2083 : 	 * done on a value with replaced entities anyway.
; 2084 : 	 */
; 2085 :         if (!ctxt->replaceEntities) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	$LN27@xmlSAX2Att

; 2086 : 	    dup = xmlSAX2DecodeAttrEntities(ctxt, value, valueend);

	mov	eax, DWORD PTR _valueend$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSAX2DecodeAttrEntities
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _dup$[ebp], eax

; 2087 : 	    if (dup == NULL) {

	cmp	DWORD PTR _dup$[ebp], 0
	jne	$LN29@xmlSAX2Att

; 2088 : 	        if (*valueend == 0) {

	mov	eax, DWORD PTR _valueend$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN31@xmlSAX2Att

; 2089 : 		    ctxt->valid &= xmlValidateOneAttribute(&ctxt->vctxt,

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidateOneAttribute
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax

; 2090 : 				    ctxt->myDoc, ctxt->node, ret, value);
; 2091 : 		} else {

	jmp	SHORT $LN32@xmlSAX2Att
$LN31@xmlSAX2Att:

; 2092 : 		    /*
; 2093 : 		     * That should already be normalized.
; 2094 : 		     * cheaper to finally allocate here than duplicate
; 2095 : 		     * entry points in the full validation code
; 2096 : 		     */
; 2097 : 		    dup = xmlStrndup(value, valueend - value);

	mov	eax, DWORD PTR _valueend$[ebp]
	sub	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _dup$[ebp], eax

; 2098 : 
; 2099 : 		    ctxt->valid &= xmlValidateOneAttribute(&ctxt->vctxt,

	mov	edx, DWORD PTR _dup$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidateOneAttribute
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN32@xmlSAX2Att:

; 2100 : 				    ctxt->myDoc, ctxt->node, ret, dup);
; 2101 : 		}
; 2102 : 	    } else {

	jmp	$LN30@xmlSAX2Att
$LN29@xmlSAX2Att:

; 2103 : 	        /*
; 2104 : 		 * dup now contains a string of the flattened attribute
; 2105 : 		 * content with entities substitued. Check if we need to
; 2106 : 		 * apply an extra layer of normalization.
; 2107 : 		 * It need to be done twice ... it's an extra burden related
; 2108 : 		 * to the ability to keep references in attributes
; 2109 : 		 */
; 2110 : 		if (ctxt->attsSpecial != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+352], 0
	je	$LN33@xmlSAX2Att

; 2111 : 		    xmlChar *nvalnorm;
; 2112 : 		    xmlChar fn[50];
; 2113 : 		    xmlChar *fullname;
; 2114 : 
; 2115 : 		    fullname = xmlBuildQName(localname, prefix, fn, 50);

	push	50					; 00000032H
	lea	ecx, DWORD PTR _fn$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _localname$[ebp]
	push	eax
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$1[ebp], eax

; 2116 : 		    if (fullname != NULL) {

	cmp	DWORD PTR _fullname$1[ebp], 0
	je	$LN33@xmlSAX2Att

; 2117 : 			ctxt->vctxt.valid = 1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+144], 1

; 2118 : 		        nvalnorm = xmlValidCtxtNormalizeAttributeValue(

	mov	edx, DWORD PTR _dup$[ebp]
	push	edx
	mov	eax, DWORD PTR _fullname$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidCtxtNormalizeAttributeValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _nvalnorm$3[ebp], eax

; 2119 : 			                 &ctxt->vctxt, ctxt->myDoc,
; 2120 : 					 ctxt->node, fullname, dup);
; 2121 : 			if (ctxt->vctxt.valid != 1)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+144], 1
	je	SHORT $LN35@xmlSAX2Att

; 2122 : 			    ctxt->valid = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], 0
$LN35@xmlSAX2Att:

; 2123 : 
; 2124 : 			if ((fullname != fn) && (fullname != localname))

	lea	edx, DWORD PTR _fn$2[ebp]
	cmp	DWORD PTR _fullname$1[ebp], edx
	je	SHORT $LN36@xmlSAX2Att
	mov	eax, DWORD PTR _fullname$1[ebp]
	cmp	eax, DWORD PTR _localname$[ebp]
	je	SHORT $LN36@xmlSAX2Att

; 2125 : 			    xmlFree(fullname);

	mov	esi, esp
	mov	ecx, DWORD PTR _fullname$1[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN36@xmlSAX2Att:

; 2126 : 			if (nvalnorm != NULL) {

	cmp	DWORD PTR _nvalnorm$3[ebp], 0
	je	SHORT $LN33@xmlSAX2Att

; 2127 : 			    xmlFree(dup);

	mov	esi, esp
	mov	edx, DWORD PTR _dup$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2128 : 			    dup = nvalnorm;

	mov	eax, DWORD PTR _nvalnorm$3[ebp]
	mov	DWORD PTR _dup$[ebp], eax
$LN33@xmlSAX2Att:

; 2129 : 			}
; 2130 : 		    }
; 2131 : 		}
; 2132 : 
; 2133 : 		ctxt->valid &= xmlValidateOneAttribute(&ctxt->vctxt,

	mov	ecx, DWORD PTR _dup$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_xmlValidateOneAttribute
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], eax
$LN30@xmlSAX2Att:

; 2134 : 			        ctxt->myDoc, ctxt->node, ret, dup);
; 2135 : 	    }
; 2136 : 	} else {

	jmp	SHORT $LN28@xmlSAX2Att
$LN27@xmlSAX2Att:

; 2137 : 	    /*
; 2138 : 	     * if entities already have been substitued, then
; 2139 : 	     * the attribute as passed is already normalized
; 2140 : 	     */
; 2141 : 	    dup = xmlStrndup(value, valueend - value);

	mov	edx, DWORD PTR _valueend$[ebp]
	sub	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _dup$[ebp], eax

; 2142 : 
; 2143 : 	    ctxt->valid &= xmlValidateOneAttribute(&ctxt->vctxt,

	mov	ecx, DWORD PTR _dup$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_xmlValidateOneAttribute
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], eax
$LN28@xmlSAX2Att:

; 2144 : 	                             ctxt->myDoc, ctxt->node, ret, dup);
; 2145 : 	}
; 2146 :     } else

	jmp	$LN26@xmlSAX2Att
$LN25@xmlSAX2Att:

; 2147 : #endif /* LIBXML_VALID_ENABLED */
; 2148 :            if (((ctxt->loadsubset & XML_SKIP_IDS) == 0) &&

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+276]
	and	eax, 8
	jne	$LN26@xmlSAX2Att
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN40@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+96], 2
	jne	SHORT $LN39@xmlSAX2Att
$LN40@xmlSAX2Att:
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN26@xmlSAX2Att
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+216], 0
	jne	$LN26@xmlSAX2Att
$LN39@xmlSAX2Att:

; 2149 : 	       (((ctxt->replaceEntities == 0) && (ctxt->external != 2)) ||
; 2150 : 	        ((ctxt->replaceEntities != 0) && (ctxt->inSubset == 0)))) {
; 2151 :         /*
; 2152 : 	 * when validating, the ID registration is done at the attribute
; 2153 : 	 * validation level. Otherwise we have to do specific handling here.
; 2154 : 	 */
; 2155 :         if ((prefix == ctxt->str_xml) &&
; 2156 : 	           (localname[0] == 'i') && (localname[1] == 'd') &&

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _prefix$[ebp]
	cmp	eax, DWORD PTR [edx+312]
	jne	$LN41@xmlSAX2Att
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _localname$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 105				; 00000069H
	jne	$LN41@xmlSAX2Att
	mov	edx, 1
	shl	edx, 0
	mov	eax, DWORD PTR _localname$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 100				; 00000064H
	jne	SHORT $LN41@xmlSAX2Att
	mov	edx, 1
	shl	edx, 1
	mov	eax, DWORD PTR _localname$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN41@xmlSAX2Att

; 2157 : 		   (localname[2] == 0)) {
; 2158 : 	    /*
; 2159 : 	     * Add the xml:id value
; 2160 : 	     *
; 2161 : 	     * Open issue: normalization of the value.
; 2162 : 	     */
; 2163 : 	    if (dup == NULL)

	cmp	DWORD PTR _dup$[ebp], 0
	jne	SHORT $LN43@xmlSAX2Att

; 2164 : 	        dup = xmlStrndup(value, valueend - value);

	mov	edx, DWORD PTR _valueend$[ebp]
	sub	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _dup$[ebp], eax
$LN43@xmlSAX2Att:

; 2165 : #if defined(LIBXML_SAX1_ENABLED) || defined(LIBXML_HTML_ENABLED) || defined(LIBXML_WRITER_ENABLED) || defined(LIBXML_DOCB_ENABLED) || defined(LIBXML_LEGACY_ENABLED)
; 2166 : #ifdef LIBXML_VALID_ENABLED
; 2167 : 	    if (xmlValidateNCName(dup, 1) != 0) {

	push	1
	mov	ecx, DWORD PTR _dup$[ebp]
	push	ecx
	call	_xmlValidateNCName
	add	esp, 8
	test	eax, eax
	je	SHORT $LN44@xmlSAX2Att

; 2168 : 	        xmlErrValid(ctxt, XML_DTD_XMLID_VALUE,

	push	0
	mov	edx, DWORD PTR _dup$[ebp]
	push	edx
	push	OFFSET ??_C@_0CO@CCGEJOB@xml?3id?5?3?5attribute?5value?5?$CFs?5is?5@
	push	539					; 0000021bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValid
	add	esp, 20					; 00000014H
$LN44@xmlSAX2Att:

; 2169 : 		      "xml:id : attribute value %s is not an NCName\n",
; 2170 : 			    (const char *) dup, NULL);
; 2171 : 	    }
; 2172 : #endif
; 2173 : #endif
; 2174 : 	    xmlAddID(&ctxt->vctxt, ctxt->myDoc, dup, ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dup$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlAddID
	add	esp, 16					; 00000010H
	jmp	$LN26@xmlSAX2Att
$LN41@xmlSAX2Att:

; 2175 : 	} else if (xmlIsID(ctxt->myDoc, ctxt->node, ret)) {

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlIsID
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN45@xmlSAX2Att

; 2176 : 	    /* might be worth duplicate entry points and not copy */
; 2177 : 	    if (dup == NULL)

	cmp	DWORD PTR _dup$[ebp], 0
	jne	SHORT $LN47@xmlSAX2Att

; 2178 : 	        dup = xmlStrndup(value, valueend - value);

	mov	edx, DWORD PTR _valueend$[ebp]
	sub	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _dup$[ebp], eax
$LN47@xmlSAX2Att:

; 2179 : 	    xmlAddID(&ctxt->vctxt, ctxt->myDoc, dup, ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dup$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlAddID
	add	esp, 16					; 00000010H
	jmp	SHORT $LN26@xmlSAX2Att
$LN45@xmlSAX2Att:

; 2180 : 	} else if (xmlIsRef(ctxt->myDoc, ctxt->node, ret)) {

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlIsRef
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN26@xmlSAX2Att

; 2181 : 	    if (dup == NULL)

	cmp	DWORD PTR _dup$[ebp], 0
	jne	SHORT $LN49@xmlSAX2Att

; 2182 : 	        dup = xmlStrndup(value, valueend - value);

	mov	edx, DWORD PTR _valueend$[ebp]
	sub	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_xmlStrndup
	add	esp, 8
	mov	DWORD PTR _dup$[ebp], eax
$LN49@xmlSAX2Att:

; 2183 : 	    xmlAddRef(&ctxt->vctxt, ctxt->myDoc, dup, ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dup$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlAddRef
	add	esp, 16					; 00000010H
$LN26@xmlSAX2Att:

; 2184 : 	}
; 2185 :     }
; 2186 :     if (dup != NULL)

	cmp	DWORD PTR _dup$[ebp], 0
	je	SHORT $LN1@xmlSAX2Att

; 2187 : 	xmlFree(dup);

	mov	esi, esp
	mov	eax, DWORD PTR _dup$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlSAX2Att:

; 2188 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN54@xmlSAX2Att
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN54@xmlSAX2Att:
	DD	1
	DD	$LN53@xmlSAX2Att
$LN53@xmlSAX2Att:
	DD	-84					; ffffffacH
	DD	50					; 00000032H
	DD	$LN52@xmlSAX2Att
$LN52@xmlSAX2Att:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_xmlSAX2AttributeNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2DecodeAttrEntities
_TEXT	SEGMENT
tv69 = -16						; size = 4
tv68 = -12						; size = 4
_ret$ = -8						; size = 4
_in$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_str$ = 12						; size = 4
_end$ = 16						; size = 4
_xmlSAX2DecodeAttrEntities PROC				; COMDAT

; 1945 :                           const xmlChar *end) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 1946 :     const xmlChar *in;
; 1947 :     xmlChar *ret;
; 1948 : 
; 1949 :     in = str;

	mov	eax, DWORD PTR _str$[ebp]
	mov	DWORD PTR _in$[ebp], eax
$LN2@xmlSAX2Dec:

; 1950 :     while (in < end)

	mov	ecx, DWORD PTR _in$[ebp]
	cmp	ecx, DWORD PTR _end$[ebp]
	jae	SHORT $LN3@xmlSAX2Dec

; 1951 :         if (*in++ == '&')

	mov	edx, DWORD PTR _in$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR _in$[ebp]
	add	ecx, 1
	mov	DWORD PTR _in$[ebp], ecx
	cmp	DWORD PTR tv68[ebp], 38			; 00000026H
	jne	SHORT $LN6@xmlSAX2Dec
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN7@xmlSAX2Dec
$LN6@xmlSAX2Dec:
	mov	DWORD PTR tv69[ebp], 0
$LN7@xmlSAX2Dec:
	cmp	DWORD PTR tv69[ebp], 0
	je	SHORT $LN4@xmlSAX2Dec

; 1952 : 	    goto decode;

	jmp	SHORT $decode$8
$LN4@xmlSAX2Dec:
	jmp	SHORT $LN2@xmlSAX2Dec
$LN3@xmlSAX2Dec:

; 1953 :     return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2Dec
$decode$8:

; 1954 : decode:
; 1955 :     ctxt->depth++;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+248]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+248], eax

; 1956 :     ret = xmlStringLenDecodeEntities(ctxt, str, end - str,

	push	0
	push	0
	push	0
	push	1
	mov	edx, DWORD PTR _end$[ebp]
	sub	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlStringLenDecodeEntities
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _ret$[ebp], eax

; 1957 : 				     XML_SUBSTITUTE_REF, 0,0,0);
; 1958 :     ctxt->depth--;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+248]
	sub	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+248], eax

; 1959 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSAX2Dec:

; 1960 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2DecodeAttrEntities ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2TextNode
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_tmp$2 = -16						; size = 4
_cur$3 = -9						; size = 1
_intern$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_str$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlSAX2TextNode PROC					; COMDAT

; 1855 : xmlSAX2TextNode(xmlParserCtxtPtr ctxt, const xmlChar *str, int len) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 1856 :     xmlNodePtr ret;
; 1857 :     const xmlChar *intern = NULL;

	mov	DWORD PTR _intern$[ebp], 0

; 1858 : 
; 1859 :     /*
; 1860 :      * Allocate
; 1861 :      */
; 1862 :     if (ctxt->freeElems != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+372], 0
	je	SHORT $LN5@xmlSAX2Tex

; 1863 : 	ret = ctxt->freeElems;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	mov	DWORD PTR _ret$[ebp], edx

; 1864 : 	ctxt->freeElems = ret->next;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+372], edx

; 1865 : 	ctxt->freeElemsNr--;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	sub	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+368], ecx

; 1866 :     } else {

	jmp	SHORT $LN6@xmlSAX2Tex
$LN5@xmlSAX2Tex:

; 1867 : 	ret = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));

	mov	esi, esp
	push	60					; 0000003cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
$LN6@xmlSAX2Tex:

; 1868 :     }
; 1869 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN7@xmlSAX2Tex

; 1870 :         xmlErrMemory(ctxt, "xmlSAX2Characters");

	push	OFFSET ??_C@_0BC@IJLHKBBO@xmlSAX2Characters@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrMemory
	add	esp, 8

; 1871 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlSAX2Tex
$LN7@xmlSAX2Tex:

; 1872 :     }
; 1873 :     memset(ret, 0, sizeof(xmlNode));

	push	60					; 0000003cH
	push	0
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1874 :     /*
; 1875 :      * intern the formatting blanks found between tags, or the
; 1876 :      * very short strings
; 1877 :      */
; 1878 :     if (ctxt->dictNames) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+364], 0
	je	$skip$29

; 1879 :         xmlChar cur = str[len];

	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _cur$3[ebp], cl

; 1880 : 
; 1881 : 	if ((len < (int) (2 * sizeof(void *))) &&

	cmp	DWORD PTR _len$[ebp], 8
	jge	SHORT $LN9@xmlSAX2Tex
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+360]
	and	eax, 65536				; 00010000H
	je	SHORT $LN9@xmlSAX2Tex

; 1882 : 	    (ctxt->options & XML_PARSE_COMPACT)) {
; 1883 : 	    /* store the string in the node overriding properties and nsDef */
; 1884 : 	    xmlChar *tmp = (xmlChar *) &(ret->properties);

	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, 44					; 0000002cH
	mov	DWORD PTR _tmp$2[ebp], ecx

; 1885 : 	    memcpy(tmp, str, len);

	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tmp$2[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1886 : 	    tmp[len] = 0;

	mov	edx, DWORD PTR _tmp$2[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [edx], 0

; 1887 : 	    intern = tmp;

	mov	eax, DWORD PTR _tmp$2[ebp]
	mov	DWORD PTR _intern$[ebp], eax
	jmp	$skip$29
$LN9@xmlSAX2Tex:

; 1888 : 	} else if ((len <= 3) && ((cur == '"') || (cur == '\'') ||

	cmp	DWORD PTR _len$[ebp], 3
	jg	SHORT $LN11@xmlSAX2Tex
	movzx	ecx, BYTE PTR _cur$3[ebp]
	cmp	ecx, 34					; 00000022H
	je	SHORT $LN13@xmlSAX2Tex
	movzx	edx, BYTE PTR _cur$3[ebp]
	cmp	edx, 39					; 00000027H
	je	SHORT $LN13@xmlSAX2Tex
	movzx	eax, BYTE PTR _cur$3[ebp]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN11@xmlSAX2Tex
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 33					; 00000021H
	je	SHORT $LN11@xmlSAX2Tex
$LN13@xmlSAX2Tex:

; 1889 : 	    ((cur == '<') && (str[len + 1] != '!')))) {
; 1890 : 	    intern = xmlDictLookup(ctxt->dict, str, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+296]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _intern$[ebp], eax
	jmp	$skip$29
$LN11@xmlSAX2Tex:

; 1891 : 	} else if (IS_BLANK_CH(*str) && (len < 60) && (cur == '<') &&

	mov	ecx, DWORD PTR _str$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN15@xmlSAX2Tex
	mov	eax, DWORD PTR _str$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN16@xmlSAX2Tex
	mov	edx, DWORD PTR _str$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN15@xmlSAX2Tex
$LN16@xmlSAX2Tex:
	mov	ecx, DWORD PTR _str$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	$skip$29
$LN15@xmlSAX2Tex:
	cmp	DWORD PTR _len$[ebp], 60		; 0000003cH
	jge	$skip$29
	movzx	eax, BYTE PTR _cur$3[ebp]
	cmp	eax, 60					; 0000003cH
	jne	$skip$29
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 33					; 00000021H
	je	SHORT $skip$29

; 1892 : 	           (str[len + 1] != '!')) {
; 1893 : 	    int i;
; 1894 : 
; 1895 : 	    for (i = 1;i < len;i++) {

	mov	DWORD PTR _i$1[ebp], 1
	jmp	SHORT $LN4@xmlSAX2Tex
$LN2@xmlSAX2Tex:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@xmlSAX2Tex:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $LN3@xmlSAX2Tex

; 1896 : 		if (!IS_BLANK_CH(str[i])) goto skip;

	mov	edx, DWORD PTR _str$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN17@xmlSAX2Tex
	mov	ecx, DWORD PTR _str$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN18@xmlSAX2Tex
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN17@xmlSAX2Tex
$LN18@xmlSAX2Tex:
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN17@xmlSAX2Tex
	jmp	SHORT $skip$29
$LN17@xmlSAX2Tex:

; 1897 : 	    }

	jmp	SHORT $LN2@xmlSAX2Tex
$LN3@xmlSAX2Tex:

; 1898 : 	    intern = xmlDictLookup(ctxt->dict, str, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _intern$[ebp], eax
$skip$29:

; 1899 : 	}
; 1900 :     }
; 1901 : skip:
; 1902 :     ret->type = XML_TEXT_NODE;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+4], 3

; 1903 : 
; 1904 :     ret->name = xmlStringText;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _xmlStringText

; 1905 :     if (intern == NULL) {

	cmp	DWORD PTR _intern$[ebp], 0
	jne	SHORT $LN19@xmlSAX2Tex

; 1906 : 	ret->content = xmlStrndup(str, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_xmlStrndup
	add	esp, 8
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 1907 : 	if (ret->content == NULL) {

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN21@xmlSAX2Tex

; 1908 : 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2TextNode");

	push	OFFSET ??_C@_0BA@DNIHONAO@xmlSAX2TextNode@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 1909 : 	    xmlFree(ret);

	mov	esi, esp
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1910 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlSAX2Tex
$LN21@xmlSAX2Tex:

; 1911 : 	}
; 1912 :     } else

	jmp	SHORT $LN20@xmlSAX2Tex
$LN19@xmlSAX2Tex:

; 1913 : 	ret->content = (xmlChar *) intern;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _intern$[ebp]
	mov	DWORD PTR [edx+40], eax
$LN20@xmlSAX2Tex:

; 1914 : 
; 1915 :     if (ctxt->linenumbers) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+280], 0
	je	SHORT $LN22@xmlSAX2Tex

; 1916 : 	if (ctxt->input != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN22@xmlSAX2Tex

; 1917 : 	    if (ctxt->input->line < 65535)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+28], 65535		; 0000ffffH
	jge	SHORT $LN24@xmlSAX2Tex

; 1918 : 		ret->line = (short) ctxt->input->line;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	dx, WORD PTR [eax+28]
	mov	WORD PTR [ecx+56], dx
	jmp	SHORT $LN22@xmlSAX2Tex
$LN24@xmlSAX2Tex:

; 1919 : 	    else {
; 1920 : 	        ret->line = 65535;

	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	WORD PTR [ecx+56], ax

; 1921 : 		if (ctxt->options & XML_PARSE_BIG_LINES)

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+360]
	and	eax, 4194304				; 00400000H
	je	SHORT $LN22@xmlSAX2Tex

; 1922 : 		    ret->psvi = (void *) (ptrdiff_t) ctxt->input->line;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	mov	DWORD PTR [eax+52], ecx
$LN22@xmlSAX2Tex:

; 1923 : 	    }
; 1924 : 	}
; 1925 :     }
; 1926 : 
; 1927 :     if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))

	cmp	DWORD PTR ___xmlRegisterCallbacks, 0
	je	SHORT $LN27@xmlSAX2Tex
	call	___xmlRegisterNodeDefaultValue
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN27@xmlSAX2Tex

; 1928 : 	xmlRegisterNodeDefaultValue(ret);

	mov	esi, esp
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	___xmlRegisterNodeDefaultValue
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN27@xmlSAX2Tex:

; 1929 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSAX2Tex:

; 1930 : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2TextNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlCheckDefaultedAttributes
_TEXT	SEGMENT
_fulln$1 = -92						; size = 4
_fn$2 = -84						; size = 50
_tst$3 = -28						; size = 4
_fulln$4 = -24						; size = 4
_attr$5 = -20						; size = 4
_i$ = -16						; size = 4
_internal$ = -12					; size = 4
_att$ = -8						; size = 4
_elemDecl$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_name$ = 12						; size = 4
_prefix$ = 16						; size = 4
_atts$ = 20						; size = 4
_xmlCheckDefaultedAttributes PROC			; COMDAT

; 1437 : 	const xmlChar *prefix, const xmlChar **atts) {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-92]
	mov	ecx, 23					; 00000017H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 1438 :     xmlElementPtr elemDecl;
; 1439 :     const xmlChar *att;
; 1440 :     int internal = 1;

	mov	DWORD PTR _internal$[ebp], 1

; 1441 :     int i;
; 1442 : 
; 1443 :     elemDecl = xmlGetDtdQElementDesc(ctxt->myDoc->intSubset, name, prefix);

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_xmlGetDtdQElementDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _elemDecl$[ebp], eax

; 1444 :     if (elemDecl == NULL) {

	cmp	DWORD PTR _elemDecl$[ebp], 0
	jne	SHORT $process_external_subset$37

; 1445 : 	elemDecl = xmlGetDtdQElementDesc(ctxt->myDoc->extSubset, name, prefix);

	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdQElementDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _elemDecl$[ebp], eax

; 1446 : 	internal = 0;

	mov	DWORD PTR _internal$[ebp], 0
$process_external_subset$37:

; 1447 :     }
; 1448 : 
; 1449 : process_external_subset:
; 1450 : 
; 1451 :     if (elemDecl != NULL) {

	cmp	DWORD PTR _elemDecl$[ebp], 0
	je	$LN1@xmlCheckDe

; 1452 : 	xmlAttributePtr attr = elemDecl->attributes;

	mov	ecx, DWORD PTR _elemDecl$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _attr$5[ebp], edx

; 1453 : 	/*
; 1454 : 	 * Check against defaulted attributes from the external subset
; 1455 : 	 * if the document is stamped as standalone
; 1456 : 	 */
; 1457 : 	if ((ctxt->myDoc->standalone == 1) &&
; 1458 : 	    (ctxt->myDoc->extSubset != NULL) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+40], 1
	jne	$LN12@xmlCheckDe
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+48], 0
	je	$LN12@xmlCheckDe
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	$LN12@xmlCheckDe
$LN2@xmlCheckDe:

; 1459 : 	    (ctxt->validate)) {
; 1460 : 	    while (attr != NULL) {

	cmp	DWORD PTR _attr$5[ebp], 0
	je	$LN12@xmlCheckDe

; 1461 : 		if ((attr->defaultValue != NULL) &&
; 1462 : 		    (xmlGetDtdQAttrDesc(ctxt->myDoc->extSubset,
; 1463 : 					attr->elem, attr->name,
; 1464 : 					attr->prefix) == attr) &&

	mov	edx, DWORD PTR _attr$5[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	$LN13@xmlCheckDe
	mov	eax, DWORD PTR _attr$5[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _attr$5[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attr$5[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	cmp	eax, DWORD PTR _attr$5[ebp]
	jne	$LN13@xmlCheckDe
	mov	eax, DWORD PTR _attr$5[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _attr$5[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attr$5[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN13@xmlCheckDe

; 1465 : 		    (xmlGetDtdQAttrDesc(ctxt->myDoc->intSubset,
; 1466 : 					attr->elem, attr->name,
; 1467 : 					attr->prefix) == NULL)) {
; 1468 : 		    xmlChar *fulln;
; 1469 : 
; 1470 : 		    if (attr->prefix != NULL) {

	mov	eax, DWORD PTR _attr$5[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN14@xmlCheckDe

; 1471 : 			fulln = xmlStrdup(attr->prefix);

	mov	ecx, DWORD PTR _attr$5[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _fulln$4[ebp], eax

; 1472 : 			fulln = xmlStrcat(fulln, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	eax, DWORD PTR _fulln$4[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _fulln$4[ebp], eax

; 1473 : 			fulln = xmlStrcat(fulln, attr->name);

	mov	ecx, DWORD PTR _attr$5[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _fulln$4[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _fulln$4[ebp], eax

; 1474 : 		    } else {

	jmp	SHORT $LN15@xmlCheckDe
$LN14@xmlCheckDe:

; 1475 : 			fulln = xmlStrdup(attr->name);

	mov	ecx, DWORD PTR _attr$5[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _fulln$4[ebp], eax
$LN15@xmlCheckDe:

; 1476 : 		    }
; 1477 :                     if (fulln == NULL) {

	cmp	DWORD PTR _fulln$4[ebp], 0
	jne	SHORT $LN16@xmlCheckDe

; 1478 :                         xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");

	push	OFFSET ??_C@_0BE@NLCCMPDP@xmlSAX2StartElement@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 1479 :                         break;

	jmp	$LN12@xmlCheckDe
$LN16@xmlCheckDe:

; 1480 :                     }
; 1481 : 
; 1482 : 		    /*
; 1483 : 		     * Check that the attribute is not declared in the
; 1484 : 		     * serialization
; 1485 : 		     */
; 1486 : 		    att = NULL;

	mov	DWORD PTR _att$[ebp], 0

; 1487 : 		    if (atts != NULL) {

	cmp	DWORD PTR _atts$[ebp], 0
	je	SHORT $LN17@xmlCheckDe

; 1488 : 			i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 1489 : 			att = atts[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _atts$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _att$[ebp], eax
$LN4@xmlCheckDe:

; 1490 : 			while (att != NULL) {

	cmp	DWORD PTR _att$[ebp], 0
	je	SHORT $LN17@xmlCheckDe

; 1491 : 			    if (xmlStrEqual(att, fulln))

	mov	ecx, DWORD PTR _fulln$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _att$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@xmlCheckDe

; 1492 : 				break;

	jmp	SHORT $LN17@xmlCheckDe
$LN18@xmlCheckDe:

; 1493 : 			    i += 2;

	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 2
	mov	DWORD PTR _i$[ebp], eax

; 1494 : 			    att = atts[i];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _atts$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _att$[ebp], eax

; 1495 : 			}

	jmp	SHORT $LN4@xmlCheckDe
$LN17@xmlCheckDe:

; 1496 : 		    }
; 1497 : 		    if (att == NULL) {

	cmp	DWORD PTR _att$[ebp], 0
	jne	SHORT $LN19@xmlCheckDe

; 1498 : 		        xmlErrValid(ctxt, XML_DTD_STANDALONE_DEFAULTED,

	mov	ecx, DWORD PTR _attr$5[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _fulln$4[ebp]
	push	eax
	push	OFFSET ??_C@_0DP@KFNFGALP@standalone?3?5attribute?5?$CFs?5on?5?$CFs?5@
	push	538					; 0000021aH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValid
	add	esp, 20					; 00000014H
$LN19@xmlCheckDe:

; 1499 :       "standalone: attribute %s on %s defaulted from external subset\n",
; 1500 : 				    (const char *)fulln,
; 1501 : 				    (const char *)attr->elem);
; 1502 : 		    }
; 1503 :                     xmlFree(fulln);

	mov	esi, esp
	mov	edx, DWORD PTR _fulln$4[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlCheckDe:

; 1504 : 		}
; 1505 : 		attr = attr->nexth;

	mov	eax, DWORD PTR _attr$5[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _attr$5[ebp], ecx

; 1506 : 	    }

	jmp	$LN2@xmlCheckDe
$LN12@xmlCheckDe:

; 1507 : 	}
; 1508 : 
; 1509 : 	/*
; 1510 : 	 * Actually insert defaulted values when needed
; 1511 : 	 */
; 1512 : 	attr = elemDecl->attributes;

	mov	edx, DWORD PTR _elemDecl$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _attr$5[ebp], eax
$LN6@xmlCheckDe:

; 1513 : 	while (attr != NULL) {

	cmp	DWORD PTR _attr$5[ebp], 0
	je	$LN7@xmlCheckDe

; 1514 : 	    /*
; 1515 : 	     * Make sure that attributes redefinition occuring in the
; 1516 : 	     * internal subset are not overriden by definitions in the
; 1517 : 	     * external subset.
; 1518 : 	     */
; 1519 : 	    if (attr->defaultValue != NULL) {

	mov	ecx, DWORD PTR _attr$5[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN20@xmlCheckDe

; 1520 : 		/*
; 1521 : 		 * the element should be instantiated in the tree if:
; 1522 : 		 *  - this is a namespace prefix
; 1523 : 		 *  - the user required for completion in the tree
; 1524 : 		 *    like XSLT
; 1525 : 		 *  - there isn't already an attribute definition
; 1526 : 		 *    in the internal subset overriding it.
; 1527 : 		 */
; 1528 : 		if (((attr->prefix != NULL) &&
; 1529 : 		     (xmlStrEqual(attr->prefix, BAD_CAST "xmlns"))) ||
; 1530 : 		    ((attr->prefix == NULL) &&
; 1531 : 		     (xmlStrEqual(attr->name, BAD_CAST "xmlns"))) ||

	mov	edx, DWORD PTR _attr$5[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN23@xmlCheckDe
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _attr$5[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN22@xmlCheckDe
$LN23@xmlCheckDe:
	mov	edx, DWORD PTR _attr$5[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN24@xmlCheckDe
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _attr$5[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN22@xmlCheckDe
$LN24@xmlCheckDe:
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+276]
	and	eax, 4
	je	$LN20@xmlCheckDe
$LN22@xmlCheckDe:

; 1532 : 		    (ctxt->loadsubset & XML_COMPLETE_ATTRS)) {
; 1533 : 		    xmlAttributePtr tst;
; 1534 : 
; 1535 : 		    tst = xmlGetDtdQAttrDesc(ctxt->myDoc->intSubset,

	mov	ecx, DWORD PTR _attr$5[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _attr$5[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _attr$5[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _tst$3[ebp], eax

; 1536 : 					     attr->elem, attr->name,
; 1537 : 					     attr->prefix);
; 1538 : 		    if ((tst == attr) || (tst == NULL)) {

	mov	ecx, DWORD PTR _tst$3[ebp]
	cmp	ecx, DWORD PTR _attr$5[ebp]
	je	SHORT $LN26@xmlCheckDe
	cmp	DWORD PTR _tst$3[ebp], 0
	jne	$LN20@xmlCheckDe
$LN26@xmlCheckDe:

; 1539 : 		        xmlChar fn[50];
; 1540 : 			xmlChar *fulln;
; 1541 : 
; 1542 :                         fulln = xmlBuildQName(attr->name, attr->prefix, fn, 50);

	push	50					; 00000032H
	lea	edx, DWORD PTR _fn$2[ebp]
	push	edx
	mov	eax, DWORD PTR _attr$5[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _attr$5[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fulln$1[ebp], eax

; 1543 : 			if (fulln == NULL) {

	cmp	DWORD PTR _fulln$1[ebp], 0
	jne	SHORT $LN27@xmlCheckDe

; 1544 : 			    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");

	push	OFFSET ??_C@_0BE@NLCCMPDP@xmlSAX2StartElement@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 1545 : 			    return;

	jmp	$LN1@xmlCheckDe
$LN27@xmlCheckDe:

; 1546 : 			}
; 1547 : 
; 1548 : 			/*
; 1549 : 			 * Check that the attribute is not declared in the
; 1550 : 			 * serialization
; 1551 : 			 */
; 1552 : 			att = NULL;

	mov	DWORD PTR _att$[ebp], 0

; 1553 : 			if (atts != NULL) {

	cmp	DWORD PTR _atts$[ebp], 0
	je	SHORT $LN28@xmlCheckDe

; 1554 : 			    i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 1555 : 			    att = atts[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _atts$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _att$[ebp], ecx
$LN8@xmlCheckDe:

; 1556 : 			    while (att != NULL) {

	cmp	DWORD PTR _att$[ebp], 0
	je	SHORT $LN28@xmlCheckDe

; 1557 : 				if (xmlStrEqual(att, fulln))

	mov	edx, DWORD PTR _fulln$1[ebp]
	push	edx
	mov	eax, DWORD PTR _att$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN29@xmlCheckDe

; 1558 : 				    break;

	jmp	SHORT $LN28@xmlCheckDe
$LN29@xmlCheckDe:

; 1559 : 				i += 2;

	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 2
	mov	DWORD PTR _i$[ebp], ecx

; 1560 : 				att = atts[i];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _atts$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _att$[ebp], ecx

; 1561 : 			    }

	jmp	SHORT $LN8@xmlCheckDe
$LN28@xmlCheckDe:

; 1562 : 			}
; 1563 : 			if (att == NULL) {

	cmp	DWORD PTR _att$[ebp], 0
	jne	SHORT $LN30@xmlCheckDe

; 1564 : 			    xmlSAX2AttributeInternal(ctxt, fulln,

	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _attr$5[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _fulln$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2AttributeInternal
	add	esp, 16					; 00000010H
$LN30@xmlCheckDe:

; 1565 : 						 attr->defaultValue, prefix);
; 1566 : 			}
; 1567 : 			if ((fulln != fn) && (fulln != attr->name))

	lea	ecx, DWORD PTR _fn$2[ebp]
	cmp	DWORD PTR _fulln$1[ebp], ecx
	je	SHORT $LN20@xmlCheckDe
	mov	edx, DWORD PTR _attr$5[ebp]
	mov	eax, DWORD PTR _fulln$1[ebp]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN20@xmlCheckDe

; 1568 : 			    xmlFree(fulln);

	mov	esi, esp
	mov	ecx, DWORD PTR _fulln$1[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@xmlCheckDe:

; 1569 : 		    }
; 1570 : 		}
; 1571 : 	    }
; 1572 : 	    attr = attr->nexth;

	mov	edx, DWORD PTR _attr$5[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _attr$5[ebp], eax

; 1573 : 	}

	jmp	$LN6@xmlCheckDe
$LN7@xmlCheckDe:

; 1574 : 	if (internal == 1) {

	cmp	DWORD PTR _internal$[ebp], 1
	jne	SHORT $LN1@xmlCheckDe

; 1575 : 	    elemDecl = xmlGetDtdQElementDesc(ctxt->myDoc->extSubset,

	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlGetDtdQElementDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _elemDecl$[ebp], eax

; 1576 : 		                             name, prefix);
; 1577 : 	    internal = 0;

	mov	DWORD PTR _internal$[ebp], 0

; 1578 : 	    goto process_external_subset;

	jmp	$process_external_subset$37
$LN1@xmlCheckDe:

; 1579 : 	}
; 1580 :     }
; 1581 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@xmlCheckDe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 92					; 0000005cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN36@xmlCheckDe:
	DD	1
	DD	$LN35@xmlCheckDe
$LN35@xmlCheckDe:
	DD	-84					; ffffffacH
	DD	50					; 00000032H
	DD	$LN34@xmlCheckDe
$LN34@xmlCheckDe:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_xmlCheckDefaultedAttributes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2AttributeInternal
_TEXT	SEGMENT
_nvalnorm$1 = -72					; size = 4
_val$2 = -68						; size = 4
_tmp$3 = -64						; size = 4
_prop$4 = -60						; size = 4
_uri$5 = -56						; size = 4
_val$6 = -52						; size = 4
_nsret$7 = -48						; size = 4
_uri$8 = -44						; size = 4
_val$9 = -40						; size = 4
_nsret$10 = -36						; size = 4
_namespace$ = -32					; size = 4
_nval$ = -28						; size = 4
_ns$ = -20						; size = 4
_name$ = -12						; size = 4
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_fullname$ = 12						; size = 4
_value$ = 16						; size = 4
_prefix$ = 20						; size = 4
_xmlSAX2AttributeInternal PROC				; COMDAT

; 1098 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 1099 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 1100 :     xmlAttrPtr ret;
; 1101 :     xmlChar *name;
; 1102 :     xmlChar *ns;
; 1103 :     xmlChar *nval;
; 1104 :     xmlNsPtr namespace;
; 1105 : 
; 1106 :     if (ctxt->html) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN6@xmlSAX2Att

; 1107 : 	name = xmlStrdup(fullname);

	mov	edx, DWORD PTR _fullname$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _name$[ebp], eax

; 1108 : 	ns = NULL;

	mov	DWORD PTR _ns$[ebp], 0

; 1109 : 	namespace = NULL;

	mov	DWORD PTR _namespace$[ebp], 0

; 1110 :     } else {

	jmp	$LN7@xmlSAX2Att
$LN6@xmlSAX2Att:

; 1111 : 	/*
; 1112 : 	 * Split the full name into a namespace prefix and the tag name
; 1113 : 	 */
; 1114 : 	name = xmlSplitQName(ctxt, fullname, &ns);

	lea	eax, DWORD PTR _ns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fullname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSplitQName
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _name$[ebp], eax

; 1115 : 	if ((name != NULL) && (name[0] == 0)) {

	cmp	DWORD PTR _name$[ebp], 0
	je	$LN7@xmlSAX2Att
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	$LN7@xmlSAX2Att

; 1116 : 	    if (xmlStrEqual(ns, BAD_CAST "xmlns")) {

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@xmlSAX2Att

; 1117 : 		xmlNsErrMsg(ctxt, XML_ERR_NS_DECL_ERROR,

	push	0
	mov	edx, DWORD PTR _fullname$[ebp]
	push	edx
	push	OFFSET ??_C@_0CE@IJLGNIDG@invalid?5namespace?5declaration?5?8@
	push	35					; 00000023H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlNsErrMsg
	add	esp, 20					; 00000014H

; 1118 : 			    "invalid namespace declaration '%s'\n",
; 1119 : 			    fullname, NULL);
; 1120 : 	    } else {

	jmp	SHORT $LN10@xmlSAX2Att
$LN9@xmlSAX2Att:

; 1121 : 		xmlNsWarnMsg(ctxt, XML_WAR_NS_COLUMN,

	push	0
	mov	ecx, DWORD PTR _fullname$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CL@HKIDFKGE@Avoid?5attribute?5ending?5with?5?8?3?8@
	push	106					; 0000006aH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlNsWarnMsg
	add	esp, 20					; 00000014H
$LN10@xmlSAX2Att:

; 1122 : 			     "Avoid attribute ending with ':' like '%s'\n",
; 1123 : 			     fullname, NULL);
; 1124 : 	    }
; 1125 : 	    if (ns != NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN11@xmlSAX2Att

; 1126 : 		xmlFree(ns);

	mov	esi, esp
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlSAX2Att:

; 1127 : 	    ns = NULL;

	mov	DWORD PTR _ns$[ebp], 0

; 1128 : 	    xmlFree(name);

	mov	esi, esp
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1129 : 	    name = xmlStrdup(fullname);

	mov	edx, DWORD PTR _fullname$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _name$[ebp], eax
$LN7@xmlSAX2Att:

; 1130 : 	}
; 1131 :     }
; 1132 :     if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN12@xmlSAX2Att

; 1133 :         xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");

	push	OFFSET ??_C@_0BE@NLCCMPDP@xmlSAX2StartElement@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 1134 : 	if (ns != NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN13@xmlSAX2Att

; 1135 : 	    xmlFree(ns);

	mov	esi, esp
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlSAX2Att:

; 1136 : 	return;

	jmp	$LN1@xmlSAX2Att
$LN12@xmlSAX2Att:

; 1137 :     }
; 1138 : 
; 1139 : #ifdef LIBXML_HTML_ENABLED
; 1140 :     if ((ctxt->html) &&
; 1141 :         (value == NULL) && (htmlIsBooleanAttr(fullname))) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN14@xmlSAX2Att
	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN14@xmlSAX2Att
	mov	eax, DWORD PTR _fullname$[ebp]
	push	eax
	call	_htmlIsBooleanAttr
	add	esp, 4
	test	eax, eax
	je	SHORT $LN14@xmlSAX2Att

; 1142 :             nval = xmlStrdup(fullname);

	mov	ecx, DWORD PTR _fullname$[ebp]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _nval$[ebp], eax

; 1143 :             value = (const xmlChar *) nval;

	mov	edx, DWORD PTR _nval$[ebp]
	mov	DWORD PTR _value$[ebp], edx

; 1144 :     } else

	jmp	SHORT $LN15@xmlSAX2Att
$LN14@xmlSAX2Att:

; 1145 : #endif
; 1146 :     {
; 1147 : #ifdef LIBXML_VALID_ENABLED
; 1148 :         /*
; 1149 :          * Do the last stage of the attribute normalization
; 1150 :          * Needed for HTML too:
; 1151 :          *   http://www.w3.org/TR/html4/types.html#h-6.2
; 1152 :          */
; 1153 :         ctxt->vctxt.valid = 1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+144], 1

; 1154 :         nval = xmlValidCtxtNormalizeAttributeValue(&ctxt->vctxt,

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fullname$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_xmlValidCtxtNormalizeAttributeValue
	add	esp, 20					; 00000014H
	mov	DWORD PTR _nval$[ebp], eax

; 1155 :                                                ctxt->myDoc, ctxt->node,
; 1156 :                                                fullname, value);
; 1157 :         if (ctxt->vctxt.valid != 1) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+144], 1
	je	SHORT $LN16@xmlSAX2Att

; 1158 :             ctxt->valid = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+100], 0
$LN16@xmlSAX2Att:

; 1159 :         }
; 1160 :         if (nval != NULL)

	cmp	DWORD PTR _nval$[ebp], 0
	je	SHORT $LN15@xmlSAX2Att

; 1161 :             value = nval;

	mov	ecx, DWORD PTR _nval$[ebp]
	mov	DWORD PTR _value$[ebp], ecx
$LN15@xmlSAX2Att:

; 1162 : #else
; 1163 :         nval = NULL;
; 1164 : #endif /* LIBXML_VALID_ENABLED */
; 1165 :     }
; 1166 : 
; 1167 :     /*
; 1168 :      * Check whether it's a namespace definition
; 1169 :      */
; 1170 :     if ((!ctxt->html) && (ns == NULL) &&
; 1171 :         (name[0] == 'x') && (name[1] == 'm') && (name[2] == 'l') &&
; 1172 :         (name[3] == 'n') && (name[4] == 's') && (name[5] == 0)) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	$LN18@xmlSAX2Att
	cmp	DWORD PTR _ns$[ebp], 0
	jne	$LN18@xmlSAX2Att
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _name$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 120				; 00000078H
	jne	$LN18@xmlSAX2Att
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _name$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 109				; 0000006dH
	jne	$LN18@xmlSAX2Att
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _name$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 108				; 0000006cH
	jne	$LN18@xmlSAX2Att
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _name$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 110				; 0000006eH
	jne	$LN18@xmlSAX2Att
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _name$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 115				; 00000073H
	jne	$LN18@xmlSAX2Att
	mov	edx, 1
	imul	eax, edx, 5
	mov	ecx, DWORD PTR _name$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	$LN18@xmlSAX2Att

; 1173 : 	xmlNsPtr nsret;
; 1174 : 	xmlChar *val;
; 1175 : 
; 1176 :         if (!ctxt->replaceEntities) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	$LN19@xmlSAX2Att

; 1177 : 	    ctxt->depth++;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+248], edx

; 1178 : 	    val = xmlStringDecodeEntities(ctxt, value, XML_SUBSTITUTE_REF,

	push	0
	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlStringDecodeEntities
	add	esp, 24					; 00000018H
	mov	DWORD PTR _val$9[ebp], eax

; 1179 : 		                          0,0,0);
; 1180 : 	    ctxt->depth--;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	sub	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+248], ecx

; 1181 : 	    if (val == NULL) {

	cmp	DWORD PTR _val$9[ebp], 0
	jne	SHORT $LN21@xmlSAX2Att

; 1182 : 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");

	push	OFFSET ??_C@_0BE@NLCCMPDP@xmlSAX2StartElement@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 1183 : 		if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN22@xmlSAX2Att

; 1184 : 		    xmlFree(name);

	mov	esi, esp
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@xmlSAX2Att:

; 1185 :                 if (nval != NULL)

	cmp	DWORD PTR _nval$[ebp], 0
	je	SHORT $LN23@xmlSAX2Att

; 1186 :                     xmlFree(nval);

	mov	esi, esp
	mov	edx, DWORD PTR _nval$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@xmlSAX2Att:

; 1187 : 		return;

	jmp	$LN1@xmlSAX2Att
$LN21@xmlSAX2Att:

; 1188 : 	    }
; 1189 : 	} else {

	jmp	SHORT $LN20@xmlSAX2Att
$LN19@xmlSAX2Att:

; 1190 : 	    val = (xmlChar *) value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _val$9[ebp], eax
$LN20@xmlSAX2Att:

; 1191 : 	}
; 1192 : 
; 1193 : 	if (val[0] != 0) {

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _val$9[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	je	$LN24@xmlSAX2Att

; 1194 : 	    xmlURIPtr uri;
; 1195 : 
; 1196 : 	    uri = xmlParseURI((const char *)val);

	mov	edx, DWORD PTR _val$9[ebp]
	push	edx
	call	_xmlParseURI
	add	esp, 4
	mov	DWORD PTR _uri$8[ebp], eax

; 1197 : 	    if (uri == NULL) {

	cmp	DWORD PTR _uri$8[ebp], 0
	jne	SHORT $LN25@xmlSAX2Att

; 1198 : 		if ((ctxt->sax != NULL) && (ctxt->sax->warning != NULL))

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN27@xmlSAX2Att
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+84], 0
	je	SHORT $LN27@xmlSAX2Att

; 1199 : 		    ctxt->sax->warning(ctxt->userData,

	mov	esi, esp
	mov	eax, DWORD PTR _val$9[ebp]
	push	eax
	push	OFFSET ??_C@_0BL@KIHPGOD@xmlns?3?5?$CFs?5not?5a?5valid?5URI?6@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN27@xmlSAX2Att:

; 1200 : 			 "xmlns: %s not a valid URI\n", val);
; 1201 : 	    } else {

	jmp	SHORT $LN24@xmlSAX2Att
$LN25@xmlSAX2Att:

; 1202 : 		if (uri->scheme == NULL) {

	mov	eax, DWORD PTR _uri$8[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN28@xmlSAX2Att

; 1203 : 		    if ((ctxt->sax != NULL) && (ctxt->sax->warning != NULL))

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN28@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN28@xmlSAX2Att

; 1204 : 			ctxt->sax->warning(ctxt->userData,

	mov	esi, esp
	mov	ecx, DWORD PTR _val$9[ebp]
	push	ecx
	push	OFFSET ??_C@_0BP@JFBGAFGI@xmlns?3?5URI?5?$CFs?5is?5not?5absolute?6@
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN28@xmlSAX2Att:

; 1205 : 			     "xmlns: URI %s is not absolute\n", val);
; 1206 : 		}
; 1207 : 		xmlFreeURI(uri);

	mov	ecx, DWORD PTR _uri$8[ebp]
	push	ecx
	call	_xmlFreeURI
	add	esp, 4
$LN24@xmlSAX2Att:

; 1208 : 	    }
; 1209 : 	}
; 1210 : 
; 1211 : 	/* a default namespace definition */
; 1212 : 	nsret = xmlNewNs(ctxt->node, val, NULL);

	push	0
	mov	edx, DWORD PTR _val$9[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_xmlNewNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _nsret$10[ebp], eax

; 1213 : 
; 1214 : #ifdef LIBXML_VALID_ENABLED
; 1215 : 	/*
; 1216 : 	 * Validate also for namespace decls, they are attributes from
; 1217 : 	 * an XML-1.0 perspective
; 1218 : 	 */
; 1219 :         if (nsret != NULL && ctxt->validate && ctxt->wellFormed &&
; 1220 : 	    ctxt->myDoc && ctxt->myDoc->intSubset)

	cmp	DWORD PTR _nsret$10[ebp], 0
	je	SHORT $LN30@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN30@xmlSAX2Att
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN30@xmlSAX2Att
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN30@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN30@xmlSAX2Att

; 1221 : 	    ctxt->valid &= xmlValidateOneNamespace(&ctxt->vctxt, ctxt->myDoc,

	mov	ecx, DWORD PTR _val$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _nsret$10[ebp]
	push	edx
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidateOneNamespace
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN30@xmlSAX2Att:

; 1222 : 					   ctxt->node, prefix, nsret, val);
; 1223 : #endif /* LIBXML_VALID_ENABLED */
; 1224 : 	if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN31@xmlSAX2Att

; 1225 : 	    xmlFree(name);

	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN31@xmlSAX2Att:

; 1226 : 	if (nval != NULL)

	cmp	DWORD PTR _nval$[ebp], 0
	je	SHORT $LN32@xmlSAX2Att

; 1227 : 	    xmlFree(nval);

	mov	esi, esp
	mov	ecx, DWORD PTR _nval$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@xmlSAX2Att:

; 1228 : 	if (val != value)

	mov	edx, DWORD PTR _val$9[ebp]
	cmp	edx, DWORD PTR _value$[ebp]
	je	SHORT $LN33@xmlSAX2Att

; 1229 : 	    xmlFree(val);

	mov	esi, esp
	mov	eax, DWORD PTR _val$9[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN33@xmlSAX2Att:

; 1230 : 	return;

	jmp	$LN1@xmlSAX2Att
$LN18@xmlSAX2Att:

; 1231 :     }
; 1232 :     if ((!ctxt->html) &&
; 1233 : 	(ns != NULL) && (ns[0] == 'x') && (ns[1] == 'm') && (ns[2] == 'l') &&
; 1234 :         (ns[3] == 'n') && (ns[4] == 's') && (ns[5] == 0)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	$LN34@xmlSAX2Att
	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN34@xmlSAX2Att
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ns$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 120				; 00000078H
	jne	$LN34@xmlSAX2Att
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _ns$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 109				; 0000006dH
	jne	$LN34@xmlSAX2Att
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _ns$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 108				; 0000006cH
	jne	$LN34@xmlSAX2Att
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _ns$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 110				; 0000006eH
	jne	$LN34@xmlSAX2Att
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _ns$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 115				; 00000073H
	jne	$LN34@xmlSAX2Att
	mov	ecx, 1
	imul	edx, ecx, 5
	mov	eax, DWORD PTR _ns$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	$LN34@xmlSAX2Att

; 1235 : 	xmlNsPtr nsret;
; 1236 : 	xmlChar *val;
; 1237 : 
; 1238 :         if (!ctxt->replaceEntities) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	$LN35@xmlSAX2Att

; 1239 : 	    ctxt->depth++;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+248]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+248], ecx

; 1240 : 	    val = xmlStringDecodeEntities(ctxt, value, XML_SUBSTITUTE_REF,

	push	0
	push	0
	push	0
	push	1
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlStringDecodeEntities
	add	esp, 24					; 00000018H
	mov	DWORD PTR _val$6[ebp], eax

; 1241 : 		                          0,0,0);
; 1242 : 	    ctxt->depth--;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+248]
	sub	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+248], eax

; 1243 : 	    if (val == NULL) {

	cmp	DWORD PTR _val$6[ebp], 0
	jne	SHORT $LN37@xmlSAX2Att

; 1244 : 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");

	push	OFFSET ??_C@_0BE@NLCCMPDP@xmlSAX2StartElement@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 1245 : 	        xmlFree(ns);

	mov	esi, esp
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1246 : 		if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN38@xmlSAX2Att

; 1247 : 		    xmlFree(name);

	mov	esi, esp
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN38@xmlSAX2Att:

; 1248 :                 if (nval != NULL)

	cmp	DWORD PTR _nval$[ebp], 0
	je	SHORT $LN39@xmlSAX2Att

; 1249 :                     xmlFree(nval);

	mov	esi, esp
	mov	edx, DWORD PTR _nval$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN39@xmlSAX2Att:

; 1250 : 		return;

	jmp	$LN1@xmlSAX2Att
$LN37@xmlSAX2Att:

; 1251 : 	    }
; 1252 : 	} else {

	jmp	SHORT $LN36@xmlSAX2Att
$LN35@xmlSAX2Att:

; 1253 : 	    val = (xmlChar *) value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _val$6[ebp], eax
$LN36@xmlSAX2Att:

; 1254 : 	}
; 1255 : 
; 1256 : 	if (val[0] == 0) {

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _val$6[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	test	ecx, ecx
	jne	SHORT $LN40@xmlSAX2Att

; 1257 : 	    xmlNsErrMsg(ctxt, XML_NS_ERR_EMPTY,

	push	0
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0CE@LNIJHMCD@Empty?5namespace?5name?5for?5prefix@
	push	204					; 000000ccH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlNsErrMsg
	add	esp, 20					; 00000014H
$LN40@xmlSAX2Att:

; 1258 : 		        "Empty namespace name for prefix %s\n", name, NULL);
; 1259 : 	}
; 1260 : 	if ((ctxt->pedantic != 0) && (val[0] != 0)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+268], 0
	je	SHORT $LN41@xmlSAX2Att
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _val$6[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	je	SHORT $LN41@xmlSAX2Att

; 1261 : 	    xmlURIPtr uri;
; 1262 : 
; 1263 : 	    uri = xmlParseURI((const char *)val);

	mov	eax, DWORD PTR _val$6[ebp]
	push	eax
	call	_xmlParseURI
	add	esp, 4
	mov	DWORD PTR _uri$5[ebp], eax

; 1264 : 	    if (uri == NULL) {

	cmp	DWORD PTR _uri$5[ebp], 0
	jne	SHORT $LN42@xmlSAX2Att

; 1265 : 	        xmlNsWarnMsg(ctxt, XML_WAR_NS_URI,

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0BO@MNIAHAOJ@xmlns?3?$CFs?3?5?$CFs?5not?5a?5valid?5URI?6@
	push	99					; 00000063H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlNsWarnMsg
	add	esp, 20					; 00000014H

; 1266 : 			 "xmlns:%s: %s not a valid URI\n", name, value);
; 1267 : 	    } else {

	jmp	SHORT $LN41@xmlSAX2Att
$LN42@xmlSAX2Att:

; 1268 : 		if (uri->scheme == NULL) {

	mov	ecx, DWORD PTR _uri$5[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	SHORT $LN44@xmlSAX2Att

; 1269 : 		    xmlNsWarnMsg(ctxt, XML_WAR_NS_URI_RELATIVE,

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CC@FFFCEDOK@xmlns?3?$CFs?3?5URI?5?$CFs?5is?5not?5absolut@
	push	100					; 00000064H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlNsWarnMsg
	add	esp, 20					; 00000014H
$LN44@xmlSAX2Att:

; 1270 : 			   "xmlns:%s: URI %s is not absolute\n", name, value);
; 1271 : 		}
; 1272 : 		xmlFreeURI(uri);

	mov	edx, DWORD PTR _uri$5[ebp]
	push	edx
	call	_xmlFreeURI
	add	esp, 4
$LN41@xmlSAX2Att:

; 1273 : 	    }
; 1274 : 	}
; 1275 : 
; 1276 : 	/* a standard namespace definition */
; 1277 : 	nsret = xmlNewNs(ctxt->node, val, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _val$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_xmlNewNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _nsret$7[ebp], eax

; 1278 : 	xmlFree(ns);

	mov	esi, esp
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1279 : #ifdef LIBXML_VALID_ENABLED
; 1280 : 	/*
; 1281 : 	 * Validate also for namespace decls, they are attributes from
; 1282 : 	 * an XML-1.0 perspective
; 1283 : 	 */
; 1284 :         if (nsret != NULL && ctxt->validate && ctxt->wellFormed &&
; 1285 : 	    ctxt->myDoc && ctxt->myDoc->intSubset)

	cmp	DWORD PTR _nsret$7[ebp], 0
	je	SHORT $LN45@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN45@xmlSAX2Att
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN45@xmlSAX2Att
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN45@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN45@xmlSAX2Att

; 1286 : 	    ctxt->valid &= xmlValidateOneNamespace(&ctxt->vctxt, ctxt->myDoc,

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nsret$7[ebp]
	push	edx
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidateOneNamespace
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN45@xmlSAX2Att:

; 1287 : 					   ctxt->node, prefix, nsret, value);
; 1288 : #endif /* LIBXML_VALID_ENABLED */
; 1289 : 	if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN46@xmlSAX2Att

; 1290 : 	    xmlFree(name);

	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN46@xmlSAX2Att:

; 1291 : 	if (nval != NULL)

	cmp	DWORD PTR _nval$[ebp], 0
	je	SHORT $LN47@xmlSAX2Att

; 1292 : 	    xmlFree(nval);

	mov	esi, esp
	mov	ecx, DWORD PTR _nval$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN47@xmlSAX2Att:

; 1293 : 	if (val != value)

	mov	edx, DWORD PTR _val$6[ebp]
	cmp	edx, DWORD PTR _value$[ebp]
	je	SHORT $LN48@xmlSAX2Att

; 1294 : 	    xmlFree(val);

	mov	esi, esp
	mov	eax, DWORD PTR _val$6[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN48@xmlSAX2Att:

; 1295 : 	return;

	jmp	$LN1@xmlSAX2Att
$LN34@xmlSAX2Att:

; 1296 :     }
; 1297 : 
; 1298 :     if (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN49@xmlSAX2Att

; 1299 : 	namespace = xmlSearchNs(ctxt->myDoc, ctxt->node, ns);

	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _namespace$[ebp], eax

; 1300 : 
; 1301 : 	if (namespace == NULL) {

	cmp	DWORD PTR _namespace$[ebp], 0
	jne	SHORT $LN51@xmlSAX2Att

; 1302 : 	    xmlNsErrMsg(ctxt, XML_NS_ERR_UNDEFINED_NAMESPACE,

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DE@HNKDFNKM@Namespace?5prefix?5?$CFs?5of?5attribut@
	push	201					; 000000c9H
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlNsErrMsg
	add	esp, 20					; 00000014H

; 1303 : 		    "Namespace prefix %s of attribute %s is not defined\n",
; 1304 : 		             ns, name);
; 1305 : 	} else {

	jmp	$LN52@xmlSAX2Att
$LN51@xmlSAX2Att:

; 1306 :             xmlAttrPtr prop;
; 1307 : 
; 1308 :             prop = ctxt->node->properties;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _prop$4[ebp], edx
$LN2@xmlSAX2Att:

; 1309 :             while (prop != NULL) {

	cmp	DWORD PTR _prop$4[ebp], 0
	je	$LN52@xmlSAX2Att

; 1310 :                 if (prop->ns != NULL) {

	mov	eax, DWORD PTR _prop$4[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN53@xmlSAX2Att

; 1311 :                     if ((xmlStrEqual(name, prop->name)) &&

	mov	ecx, DWORD PTR _prop$4[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN53@xmlSAX2Att
	mov	ecx, DWORD PTR _prop$4[ebp]
	mov	edx, DWORD PTR _namespace$[ebp]
	cmp	edx, DWORD PTR [ecx+36]
	je	SHORT $LN55@xmlSAX2Att
	mov	eax, DWORD PTR _prop$4[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _namespace$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN53@xmlSAX2Att
$LN55@xmlSAX2Att:

; 1312 :                         ((namespace == prop->ns) ||
; 1313 :                          (xmlStrEqual(namespace->href, prop->ns->href)))) {
; 1314 :                             xmlNsErrMsg(ctxt, XML_ERR_ATTRIBUTE_REDEFINED,

	mov	edx, DWORD PTR _namespace$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@PGCJKKMF@Attribute?5?$CFs?5in?5?$CFs?5redefined?6@
	push	42					; 0000002aH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlNsErrMsg
	add	esp, 20					; 00000014H

; 1315 :                                     "Attribute %s in %s redefined\n",
; 1316 :                                              name, namespace->href);
; 1317 :                         ctxt->wellFormed = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1318 :                         if (ctxt->recovery == 0) ctxt->disableSAX = 1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+288], 0
	jne	SHORT $LN56@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+212], 1
$LN56@xmlSAX2Att:

; 1319 :                         if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN57@xmlSAX2Att

; 1320 :                             xmlFree(name);

	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN57@xmlSAX2Att:

; 1321 :                         goto error;

	jmp	$error$86
$LN53@xmlSAX2Att:

; 1322 :                     }
; 1323 :                 }
; 1324 :                 prop = prop->next;

	mov	ecx, DWORD PTR _prop$4[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _prop$4[ebp], edx

; 1325 :             }

	jmp	$LN2@xmlSAX2Att
$LN52@xmlSAX2Att:

; 1326 :         }
; 1327 :     } else {

	jmp	SHORT $LN50@xmlSAX2Att
$LN49@xmlSAX2Att:

; 1328 : 	namespace = NULL;

	mov	DWORD PTR _namespace$[ebp], 0
$LN50@xmlSAX2Att:

; 1329 :     }
; 1330 : 
; 1331 :     /* !!!!!! <a toto:arg="" xmlns:toto="http://toto.com"> */
; 1332 :     ret = xmlNewNsPropEatName(ctxt->node, namespace, name, NULL);

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _namespace$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_xmlNewNsPropEatName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1333 : 
; 1334 :     if (ret != NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	$LN58@xmlSAX2Att

; 1335 :         if ((ctxt->replaceEntities == 0) && (!ctxt->html)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN59@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN59@xmlSAX2Att

; 1336 : 	    xmlNodePtr tmp;
; 1337 : 
; 1338 : 	    ret->children = xmlStringGetNodeList(ctxt->myDoc, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStringGetNodeList
	add	esp, 8
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 1339 : 	    tmp = ret->children;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _tmp$3[ebp], eax
$LN4@xmlSAX2Att:

; 1340 : 	    while (tmp != NULL) {

	cmp	DWORD PTR _tmp$3[ebp], 0
	je	SHORT $LN5@xmlSAX2Att

; 1341 : 		tmp->parent = (xmlNodePtr) ret;

	mov	ecx, DWORD PTR _tmp$3[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 1342 : 		if (tmp->next == NULL)

	mov	eax, DWORD PTR _tmp$3[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN61@xmlSAX2Att

; 1343 : 		    ret->last = tmp;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _tmp$3[ebp]
	mov	DWORD PTR [ecx+16], edx
$LN61@xmlSAX2Att:

; 1344 : 		tmp = tmp->next;

	mov	eax, DWORD PTR _tmp$3[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _tmp$3[ebp], ecx

; 1345 : 	    }

	jmp	SHORT $LN4@xmlSAX2Att
$LN5@xmlSAX2Att:

; 1346 : 	} else if (value != NULL) {

	jmp	SHORT $LN58@xmlSAX2Att
$LN59@xmlSAX2Att:
	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN58@xmlSAX2Att

; 1347 : 	    ret->children = xmlNewDocText(ctxt->myDoc, value);

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlNewDocText
	add	esp, 8
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+12], eax

; 1348 : 	    ret->last = ret->children;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+16], edx

; 1349 : 	    if (ret->children != NULL)

	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN58@xmlSAX2Att

; 1350 : 		ret->children->parent = (xmlNodePtr) ret;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+20], eax
$LN58@xmlSAX2Att:

; 1351 : 	}
; 1352 :     }
; 1353 : 
; 1354 : #ifdef LIBXML_VALID_ENABLED
; 1355 :     if ((!ctxt->html) && ctxt->validate && ctxt->wellFormed &&
; 1356 :         ctxt->myDoc && ctxt->myDoc->intSubset) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	$LN64@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	$LN64@xmlSAX2Att
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN64@xmlSAX2Att
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	$LN64@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+44], 0
	je	$LN64@xmlSAX2Att

; 1357 : 
; 1358 : 	/*
; 1359 : 	 * If we don't substitute entities, the validation should be
; 1360 : 	 * done on a value with replaced entities anyway.
; 1361 : 	 */
; 1362 :         if (!ctxt->replaceEntities) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	$LN66@xmlSAX2Att

; 1363 : 	    xmlChar *val;
; 1364 : 
; 1365 : 	    ctxt->depth++;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+248]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+248], eax

; 1366 : 	    val = xmlStringDecodeEntities(ctxt, value, XML_SUBSTITUTE_REF,

	push	0
	push	0
	push	0
	push	1
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlStringDecodeEntities
	add	esp, 24					; 00000018H
	mov	DWORD PTR _val$2[ebp], eax

; 1367 : 		                          0,0,0);
; 1368 : 	    ctxt->depth--;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+248]
	sub	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+248], edx

; 1369 : 
; 1370 : 	    if (val == NULL)

	cmp	DWORD PTR _val$2[ebp], 0
	jne	SHORT $LN68@xmlSAX2Att

; 1371 : 		ctxt->valid &= xmlValidateOneAttribute(&ctxt->vctxt,

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_xmlValidateOneAttribute
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], eax
	jmp	$LN69@xmlSAX2Att
$LN68@xmlSAX2Att:

; 1372 : 				ctxt->myDoc, ctxt->node, ret, value);
; 1373 : 	    else {
; 1374 : 		xmlChar *nvalnorm;
; 1375 : 
; 1376 : 		/*
; 1377 : 		 * Do the last stage of the attribute normalization
; 1378 : 		 * It need to be done twice ... it's an extra burden related
; 1379 : 		 * to the ability to keep xmlSAX2References in attributes
; 1380 : 		 */
; 1381 : 		nvalnorm = xmlValidNormalizeAttributeValue(ctxt->myDoc,

	mov	edx, DWORD PTR _val$2[ebp]
	push	edx
	mov	eax, DWORD PTR _fullname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlValidNormalizeAttributeValue
	add	esp, 16					; 00000010H
	mov	DWORD PTR _nvalnorm$1[ebp], eax

; 1382 : 					    ctxt->node, fullname, val);
; 1383 : 		if (nvalnorm != NULL) {

	cmp	DWORD PTR _nvalnorm$1[ebp], 0
	je	SHORT $LN70@xmlSAX2Att

; 1384 : 		    xmlFree(val);

	mov	esi, esp
	mov	edx, DWORD PTR _val$2[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1385 : 		    val = nvalnorm;

	mov	eax, DWORD PTR _nvalnorm$1[ebp]
	mov	DWORD PTR _val$2[ebp], eax
$LN70@xmlSAX2Att:

; 1386 : 		}
; 1387 : 
; 1388 : 		ctxt->valid &= xmlValidateOneAttribute(&ctxt->vctxt,

	mov	ecx, DWORD PTR _val$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_xmlValidateOneAttribute
	add	esp, 20					; 00000014H
	mov	edx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], eax

; 1389 : 			        ctxt->myDoc, ctxt->node, ret, val);
; 1390 :                 xmlFree(val);

	mov	esi, esp
	mov	edx, DWORD PTR _val$2[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN69@xmlSAX2Att:

; 1391 : 	    }
; 1392 : 	} else {

	jmp	SHORT $LN67@xmlSAX2Att
$LN66@xmlSAX2Att:

; 1393 : 	    ctxt->valid &= xmlValidateOneAttribute(&ctxt->vctxt, ctxt->myDoc,

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_xmlValidateOneAttribute
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN67@xmlSAX2Att:

; 1394 : 					       ctxt->node, ret, value);
; 1395 : 	}
; 1396 :     } else

	jmp	$error$86
$LN64@xmlSAX2Att:

; 1397 : #endif /* LIBXML_VALID_ENABLED */
; 1398 :            if (((ctxt->loadsubset & XML_SKIP_IDS) == 0) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	and	ecx, 8
	jne	$error$86
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN73@xmlSAX2Att
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+96], 2
	jne	SHORT $LN72@xmlSAX2Att
$LN73@xmlSAX2Att:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	$error$86
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+216], 0
	jne	$error$86
$LN72@xmlSAX2Att:

; 1399 : 	       (((ctxt->replaceEntities == 0) && (ctxt->external != 2)) ||
; 1400 : 	        ((ctxt->replaceEntities != 0) && (ctxt->inSubset == 0)))) {
; 1401 :         /*
; 1402 : 	 * when validating, the ID registration is done at the attribute
; 1403 : 	 * validation level. Otherwise we have to do specific handling here.
; 1404 : 	 */
; 1405 : 	if (xmlStrEqual(fullname, BAD_CAST "xml:id")) {

	push	OFFSET ??_C@_06IMLNHOMM@xml?3id@
	mov	eax, DWORD PTR _fullname$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN74@xmlSAX2Att

; 1406 : 	    /*
; 1407 : 	     * Add the xml:id value
; 1408 : 	     *
; 1409 : 	     * Open issue: normalization of the value.
; 1410 : 	     */
; 1411 : 	    if (xmlValidateNCName(value, 1) != 0) {

	push	1
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_xmlValidateNCName
	add	esp, 8
	test	eax, eax
	je	SHORT $LN76@xmlSAX2Att

; 1412 : 	        xmlErrValid(ctxt, XML_DTD_XMLID_VALUE,

	push	0
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_0CO@CCGEJOB@xml?3id?5?3?5attribute?5value?5?$CFs?5is?5@
	push	539					; 0000021bH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValid
	add	esp, 20					; 00000014H
$LN76@xmlSAX2Att:

; 1413 : 		      "xml:id : attribute value %s is not an NCName\n",
; 1414 : 			    (const char *) value, NULL);
; 1415 : 	    }
; 1416 : 	    xmlAddID(&ctxt->vctxt, ctxt->myDoc, value, ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlAddID
	add	esp, 16					; 00000010H
	jmp	SHORT $error$86
$LN74@xmlSAX2Att:

; 1417 : 	} else if (xmlIsID(ctxt->myDoc, ctxt->node, ret))

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlIsID
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN77@xmlSAX2Att

; 1418 : 	    xmlAddID(&ctxt->vctxt, ctxt->myDoc, value, ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_xmlAddID
	add	esp, 16					; 00000010H
	jmp	SHORT $error$86
$LN77@xmlSAX2Att:

; 1419 : 	else if (xmlIsRef(ctxt->myDoc, ctxt->node, ret))

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlIsRef
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $error$86

; 1420 : 	    xmlAddRef(&ctxt->vctxt, ctxt->myDoc, value, ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_xmlAddRef
	add	esp, 16					; 00000010H
$error$86:

; 1421 :     }
; 1422 : 
; 1423 : error:
; 1424 :     if (nval != NULL)

	cmp	DWORD PTR _nval$[ebp], 0
	je	SHORT $LN80@xmlSAX2Att

; 1425 : 	xmlFree(nval);

	mov	esi, esp
	mov	edx, DWORD PTR _nval$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN80@xmlSAX2Att:

; 1426 :     if (ns != NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN1@xmlSAX2Att

; 1427 : 	xmlFree(ns);

	mov	esi, esp
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlSAX2Att:

; 1428 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN85@xmlSAX2Att
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN85@xmlSAX2Att:
	DD	1
	DD	$LN84@xmlSAX2Att
$LN84@xmlSAX2Att:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN83@xmlSAX2Att
$LN83@xmlSAX2Att:
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
_xmlSAX2AttributeInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlNsWarnMsg
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_str1$ = 20						; size = 4
_str2$ = 24						; size = 4
_xmlNsWarnMsg PROC					; COMDAT

; 220  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 221  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlNsWarnM
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN2@xmlNsWarnM
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+172], -1
	jne	SHORT $LN2@xmlNsWarnM

; 222  :         (ctxt->instate == XML_PARSER_EOF))
; 223  : 	return;

	jmp	SHORT $LN1@xmlNsWarnM
$LN2@xmlNsWarnM:

; 224  :     if (ctxt != NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlNsWarnM

; 225  : 	ctxt->errNo = error;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+84], eax
$LN3@xmlNsWarnM:

; 226  :     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,

	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str1$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str1$[ebp]
	push	edx
	push	0
	push	0
	push	1
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	push	3
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 72					; 00000048H
$LN1@xmlNsWarnM:

; 227  :                     XML_ERR_WARNING, NULL, 0,
; 228  : 		    (const char *) str1, (const char *) str2,
; 229  : 		    NULL, 0, 0, msg, str1, str2);
; 230  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlNsWarnMsg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlNsErrMsg
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_str1$ = 20						; size = 4
_str2$ = 24						; size = 4
_xmlNsErrMsg PROC					; COMDAT

; 196  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 197  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlNsErrMs
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN2@xmlNsErrMs
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+172], -1
	jne	SHORT $LN2@xmlNsErrMs

; 198  :         (ctxt->instate == XML_PARSER_EOF))
; 199  : 	return;

	jmp	SHORT $LN1@xmlNsErrMs
$LN2@xmlNsErrMs:

; 200  :     if (ctxt != NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlNsErrMs

; 201  : 	ctxt->errNo = error;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+84], eax
$LN3@xmlNsErrMs:

; 202  :     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_NAMESPACE, error,

	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str1$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str1$[ebp]
	push	edx
	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	push	3
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 72					; 00000048H
$LN1@xmlNsErrMs:

; 203  :                     XML_ERR_ERROR, NULL, 0,
; 204  : 		    (const char *) str1, (const char *) str2,
; 205  : 		    NULL, 0, 0, msg, str1, str2);
; 206  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlNsErrMsg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlWarnMsg
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_str1$ = 20						; size = 4
_xmlWarnMsg PROC					; COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 172  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlWarnMsg
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN2@xmlWarnMsg
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+172], -1
	jne	SHORT $LN2@xmlWarnMsg

; 173  :         (ctxt->instate == XML_PARSER_EOF))
; 174  : 	return;

	jmp	SHORT $LN1@xmlWarnMsg
$LN2@xmlWarnMsg:

; 175  :     if (ctxt != NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlWarnMsg

; 176  : 	ctxt->errNo = error;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+84], eax
$LN3@xmlWarnMsg:

; 177  :     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,

	mov	ecx, DWORD PTR _str1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _str1$[ebp]
	push	eax
	push	0
	push	0
	push	1
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	1
	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
$LN1@xmlWarnMsg:

; 178  :                     XML_ERR_WARNING, NULL, 0,
; 179  : 		    (const char *) str1, NULL,
; 180  : 		    NULL, 0, 0, msg, str1);
; 181  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlWarnMsg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlFatalErrMsg
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_str1$ = 20						; size = 4
_str2$ = 24						; size = 4
_xmlFatalErrMsg PROC					; COMDAT

; 140  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 141  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlFatalEr
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN2@xmlFatalEr
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+172], -1
	jne	SHORT $LN2@xmlFatalEr

; 142  :         (ctxt->instate == XML_PARSER_EOF))
; 143  : 	return;

	jmp	SHORT $LN1@xmlFatalEr
$LN2@xmlFatalEr:

; 144  :     if (ctxt != NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlFatalEr

; 145  : 	ctxt->errNo = error;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+84], eax
$LN3@xmlFatalEr:

; 146  :     __xmlRaiseError(NULL, NULL, NULL, ctxt, NULL, XML_FROM_PARSER, error,

	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str1$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str1$[ebp]
	push	edx
	push	0
	push	0
	push	3
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 147  :                     XML_ERR_FATAL, NULL, 0,
; 148  : 		    (const char *) str1, (const char *) str2,
; 149  : 		    NULL, 0, 0, msg, str1, str2);
; 150  :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN1@xmlFatalEr

; 151  : 	ctxt->wellFormed = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+12], 0

; 152  : 	ctxt->valid = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+100], 0

; 153  : 	if (ctxt->recovery == 0)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+288], 0
	jne	SHORT $LN1@xmlFatalEr

; 154  : 	    ctxt->disableSAX = 1;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+212], 1
$LN1@xmlFatalEr:

; 155  :     }
; 156  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFatalErrMsg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlErrValid
_TEXT	SEGMENT
_schannel$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_str1$ = 20						; size = 4
_str2$ = 24						; size = 4
_xmlErrValid PROC					; COMDAT

; 100  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 101  :     xmlStructuredErrorFunc schannel = NULL;

	mov	DWORD PTR _schannel$[ebp], 0

; 102  : 
; 103  :     if ((ctxt != NULL) && (ctxt->disableSAX != 0) &&

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlErrVali
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+212], 0
	je	SHORT $LN2@xmlErrVali
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+172], -1
	jne	SHORT $LN2@xmlErrVali

; 104  :         (ctxt->instate == XML_PARSER_EOF))
; 105  : 	return;

	jmp	$LN1@xmlErrVali
$LN2@xmlErrVali:

; 106  :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlErrVali

; 107  : 	ctxt->errNo = error;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _error$[ebp]
	mov	DWORD PTR [edx+84], eax

; 108  : 	if ((ctxt->sax != NULL) && (ctxt->sax->initialized == XML_SAX2_MAGIC))

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN5@xmlErrVali
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+108], -554844497		; deedbeafH
	jne	SHORT $LN5@xmlErrVali

; 109  : 	    schannel = ctxt->sax->serror;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR _schannel$[ebp], eax
$LN5@xmlErrVali:

; 110  : 	__xmlRaiseError(schannel,

	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str1$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _str2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str1$[ebp]
	push	edx
	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	push	4
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+108]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	push	edx
	mov	eax, DWORD PTR _schannel$[ebp]
	push	eax
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 111  : 			ctxt->vctxt.error, ctxt->vctxt.userData,
; 112  : 			ctxt, NULL, XML_FROM_DTD, error,
; 113  : 			XML_ERR_ERROR, NULL, 0, (const char *) str1,
; 114  : 			(const char *) str2, NULL, 0, 0,
; 115  : 			msg, (const char *) str1, (const char *) str2);
; 116  : 	ctxt->valid = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], 0

; 117  :     } else {

	jmp	SHORT $LN1@xmlErrVali
$LN3@xmlErrVali:

; 118  : 	__xmlRaiseError(schannel,

	mov	edx, DWORD PTR _str2$[ebp]
	push	edx
	mov	eax, DWORD PTR _str1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _str2$[ebp]
	push	edx
	mov	eax, DWORD PTR _str1$[ebp]
	push	eax
	push	0
	push	0
	push	2
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	4
	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _schannel$[ebp]
	push	eax
	call	___xmlRaiseError
	add	esp, 72					; 00000048H
$LN1@xmlErrVali:

; 119  : 			NULL, NULL,
; 120  : 			ctxt, NULL, XML_FROM_DTD, error,
; 121  : 			XML_ERR_ERROR, NULL, 0, (const char *) str1,
; 122  : 			(const char *) str2, NULL, 0, 0,
; 123  : 			msg, (const char *) str1, (const char *) str2);
; 124  :     }
; 125  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlErrValid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2ErrMemory
_TEXT	SEGMENT
_str1$ = -8						; size = 4
_schannel$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_msg$ = 12						; size = 4
_xmlSAX2ErrMemory PROC					; COMDAT

; 60   : xmlSAX2ErrMemory(xmlParserCtxtPtr ctxt, const char *msg) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 61   :     xmlStructuredErrorFunc schannel = NULL;

	mov	DWORD PTR _schannel$[ebp], 0

; 62   :     const char *str1 = "out of memory\n";

	mov	DWORD PTR _str1$[ebp], OFFSET ??_C@_0P@PCJPAHLM@out?5of?5memory?6@

; 63   : 
; 64   :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN2@xmlSAX2Err

; 65   : 	ctxt->errNo = XML_ERR_NO_MEMORY;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+84], 2

; 66   : 	if ((ctxt->sax != NULL) && (ctxt->sax->initialized == XML_SAX2_MAGIC))

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@xmlSAX2Err
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+108], -554844497		; deedbeafH
	jne	SHORT $LN4@xmlSAX2Err

; 67   : 	    schannel = ctxt->sax->serror;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+124]
	mov	DWORD PTR _schannel$[ebp], eax
$LN4@xmlSAX2Err:

; 68   : 	__xmlRaiseError(schannel,

	push	0
	mov	ecx, DWORD PTR _str1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _str1$[ebp]
	push	eax
	push	0
	push	0
	push	2
	push	2
	push	1
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+108]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	push	edx
	mov	eax, DWORD PTR _schannel$[ebp]
	push	eax
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 69   : 			ctxt->vctxt.error, ctxt->vctxt.userData,
; 70   : 			ctxt, NULL, XML_FROM_PARSER, XML_ERR_NO_MEMORY,
; 71   : 			XML_ERR_ERROR, NULL, 0, (const char *) str1,
; 72   : 			NULL, NULL, 0, 0,
; 73   : 			msg, (const char *) str1, NULL);
; 74   : 	ctxt->errNo = XML_ERR_NO_MEMORY;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+84], 2

; 75   : 	ctxt->instate = XML_PARSER_EOF;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+172], -1

; 76   : 	ctxt->disableSAX = 1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+212], 1

; 77   :     } else {

	jmp	SHORT $LN1@xmlSAX2Err
$LN2@xmlSAX2Err:

; 78   : 	__xmlRaiseError(schannel,

	push	0
	mov	ecx, DWORD PTR _str1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _str1$[ebp]
	push	eax
	push	0
	push	0
	push	2
	push	2
	push	1
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _schannel$[ebp]
	push	edx
	call	___xmlRaiseError
	add	esp, 72					; 00000048H
$LN1@xmlSAX2Err:

; 79   : 			NULL, NULL,
; 80   : 			ctxt, NULL, XML_FROM_PARSER, XML_ERR_NO_MEMORY,
; 81   : 			XML_ERR_ERROR, NULL, 0, (const char *) str1,
; 82   : 			NULL, NULL, 0, 0,
; 83   : 			msg, (const char *) str1, NULL);
; 84   :     }
; 85   : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2ErrMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlDefaultSAXHandlerInit
_TEXT	SEGMENT
_xmlDefaultSAXHandlerInit PROC				; COMDAT

; 2940 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2941 : #ifdef LIBXML_SAX1_ENABLED
; 2942 :     xmlSAXVersion((xmlSAXHandlerPtr) &xmlDefaultSAXHandler, 1);

	push	1
	call	___xmlDefaultSAXHandler
	push	eax
	call	_xmlSAXVersion
	add	esp, 8

; 2943 : #endif /* LIBXML_SAX1_ENABLED */
; 2944 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDefaultSAXHandlerInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _docbDefaultSAXHandlerInit
_TEXT	SEGMENT
_docbDefaultSAXHandlerInit PROC				; COMDAT

; 3056 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 3057 :     xmlSAX2InitDocbDefaultSAXHandler((xmlSAXHandlerPtr) &docbDefaultSAXHandler);

	call	___docbDefaultSAXHandler
	push	eax
	call	_xmlSAX2InitDocbDefaultSAXHandler
	add	esp, 4

; 3058 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_docbDefaultSAXHandlerInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2InitDocbDefaultSAXHandler
_TEXT	SEGMENT
_hdlr$ = 8						; size = 4
_xmlSAX2InitDocbDefaultSAXHandler PROC			; COMDAT

; 3014 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 3015 :     if ((hdlr == NULL) || (hdlr->initialized != 0))

	cmp	DWORD PTR _hdlr$[ebp], 0
	je	SHORT $LN3@xmlSAX2Ini
	mov	eax, DWORD PTR _hdlr$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN2@xmlSAX2Ini
$LN3@xmlSAX2Ini:

; 3016 : 	return;

	jmp	$LN1@xmlSAX2Ini
$LN2@xmlSAX2Ini:

; 3017 : 
; 3018 :     hdlr->internalSubset = xmlSAX2InternalSubset;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx], OFFSET _xmlSAX2InternalSubset

; 3019 :     hdlr->externalSubset = NULL;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+104], 0

; 3020 :     hdlr->isStandalone = xmlSAX2IsStandalone;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+4], OFFSET _xmlSAX2IsStandalone

; 3021 :     hdlr->hasInternalSubset = xmlSAX2HasInternalSubset;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+8], OFFSET _xmlSAX2HasInternalSubset

; 3022 :     hdlr->hasExternalSubset = xmlSAX2HasExternalSubset;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+12], OFFSET _xmlSAX2HasExternalSubset

; 3023 :     hdlr->resolveEntity = xmlSAX2ResolveEntity;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+16], OFFSET _xmlSAX2ResolveEntity

; 3024 :     hdlr->getEntity = xmlSAX2GetEntity;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+20], OFFSET _xmlSAX2GetEntity

; 3025 :     hdlr->getParameterEntity = NULL;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+96], 0

; 3026 :     hdlr->entityDecl = xmlSAX2EntityDecl;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+24], OFFSET _xmlSAX2EntityDecl

; 3027 :     hdlr->attributeDecl = NULL;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 3028 :     hdlr->elementDecl = NULL;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+36], 0

; 3029 :     hdlr->notationDecl = NULL;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+28], 0

; 3030 :     hdlr->unparsedEntityDecl = NULL;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 3031 :     hdlr->setDocumentLocator = xmlSAX2SetDocumentLocator;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+44], OFFSET _xmlSAX2SetDocumentLocator

; 3032 :     hdlr->startDocument = xmlSAX2StartDocument;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _xmlSAX2StartDocument

; 3033 :     hdlr->endDocument = xmlSAX2EndDocument;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+52], OFFSET _xmlSAX2EndDocument

; 3034 :     hdlr->startElement = xmlSAX2StartElement;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+56], OFFSET _xmlSAX2StartElement

; 3035 :     hdlr->endElement = xmlSAX2EndElement;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _xmlSAX2EndElement

; 3036 :     hdlr->reference = xmlSAX2Reference;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+64], OFFSET _xmlSAX2Reference

; 3037 :     hdlr->characters = xmlSAX2Characters;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+68], OFFSET _xmlSAX2Characters

; 3038 :     hdlr->cdataBlock = NULL;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+100], 0

; 3039 :     hdlr->ignorableWhitespace = xmlSAX2IgnorableWhitespace;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+72], OFFSET _xmlSAX2IgnorableWhitespace

; 3040 :     hdlr->processingInstruction = NULL;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+76], 0

; 3041 :     hdlr->comment = xmlSAX2Comment;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _xmlSAX2Comment

; 3042 :     hdlr->warning = xmlParserWarning;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+84], OFFSET _xmlParserWarning

; 3043 :     hdlr->error = xmlParserError;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+88], OFFSET _xmlParserError

; 3044 :     hdlr->fatalError = xmlParserError;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _xmlParserError

; 3045 : 
; 3046 :     hdlr->initialized = 1;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+108], 1
$LN1@xmlSAX2Ini:

; 3047 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSAX2InitDocbDefaultSAXHandler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _htmlDefaultSAXHandlerInit
_TEXT	SEGMENT
_htmlDefaultSAXHandlerInit PROC				; COMDAT

; 2998 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2999 :     xmlSAX2InitHtmlDefaultSAXHandler((xmlSAXHandlerPtr) &htmlDefaultSAXHandler);

	call	___htmlDefaultSAXHandler
	push	eax
	call	_xmlSAX2InitHtmlDefaultSAXHandler
	add	esp, 4

; 3000 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_htmlDefaultSAXHandlerInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2InitHtmlDefaultSAXHandler
_TEXT	SEGMENT
_hdlr$ = 8						; size = 4
_xmlSAX2InitHtmlDefaultSAXHandler PROC			; COMDAT

; 2956 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2957 :     if ((hdlr == NULL) || (hdlr->initialized != 0))

	cmp	DWORD PTR _hdlr$[ebp], 0
	je	SHORT $LN3@xmlSAX2Ini
	mov	eax, DWORD PTR _hdlr$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN2@xmlSAX2Ini
$LN3@xmlSAX2Ini:

; 2958 : 	return;

	jmp	$LN1@xmlSAX2Ini
$LN2@xmlSAX2Ini:

; 2959 : 
; 2960 :     hdlr->internalSubset = xmlSAX2InternalSubset;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx], OFFSET _xmlSAX2InternalSubset

; 2961 :     hdlr->externalSubset = NULL;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+104], 0

; 2962 :     hdlr->isStandalone = NULL;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+4], 0

; 2963 :     hdlr->hasInternalSubset = NULL;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 2964 :     hdlr->hasExternalSubset = NULL;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+12], 0

; 2965 :     hdlr->resolveEntity = NULL;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+16], 0

; 2966 :     hdlr->getEntity = xmlSAX2GetEntity;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+20], OFFSET _xmlSAX2GetEntity

; 2967 :     hdlr->getParameterEntity = NULL;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+96], 0

; 2968 :     hdlr->entityDecl = NULL;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+24], 0

; 2969 :     hdlr->attributeDecl = NULL;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+32], 0

; 2970 :     hdlr->elementDecl = NULL;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+36], 0

; 2971 :     hdlr->notationDecl = NULL;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+28], 0

; 2972 :     hdlr->unparsedEntityDecl = NULL;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 2973 :     hdlr->setDocumentLocator = xmlSAX2SetDocumentLocator;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+44], OFFSET _xmlSAX2SetDocumentLocator

; 2974 :     hdlr->startDocument = xmlSAX2StartDocument;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+48], OFFSET _xmlSAX2StartDocument

; 2975 :     hdlr->endDocument = xmlSAX2EndDocument;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+52], OFFSET _xmlSAX2EndDocument

; 2976 :     hdlr->startElement = xmlSAX2StartElement;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+56], OFFSET _xmlSAX2StartElement

; 2977 :     hdlr->endElement = xmlSAX2EndElement;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+60], OFFSET _xmlSAX2EndElement

; 2978 :     hdlr->reference = NULL;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+64], 0

; 2979 :     hdlr->characters = xmlSAX2Characters;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+68], OFFSET _xmlSAX2Characters

; 2980 :     hdlr->cdataBlock = xmlSAX2CDataBlock;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+100], OFFSET _xmlSAX2CDataBlock

; 2981 :     hdlr->ignorableWhitespace = xmlSAX2IgnorableWhitespace;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+72], OFFSET _xmlSAX2IgnorableWhitespace

; 2982 :     hdlr->processingInstruction = xmlSAX2ProcessingInstruction;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+76], OFFSET _xmlSAX2ProcessingInstruction

; 2983 :     hdlr->comment = xmlSAX2Comment;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _xmlSAX2Comment

; 2984 :     hdlr->warning = xmlParserWarning;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+84], OFFSET _xmlParserWarning

; 2985 :     hdlr->error = xmlParserError;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+88], OFFSET _xmlParserError

; 2986 :     hdlr->fatalError = xmlParserError;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _xmlParserError

; 2987 : 
; 2988 :     hdlr->initialized = 1;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+108], 1
$LN1@xmlSAX2Ini:

; 2989 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSAX2InitHtmlDefaultSAXHandler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2InitDefaultSAXHandler
_TEXT	SEGMENT
_hdlr$ = 8						; size = 4
_warning$ = 12						; size = 4
_xmlSAX2InitDefaultSAXHandler PROC			; COMDAT

; 2922 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2923 :     if ((hdlr == NULL) || (hdlr->initialized != 0))

	cmp	DWORD PTR _hdlr$[ebp], 0
	je	SHORT $LN3@xmlSAX2Ini
	mov	eax, DWORD PTR _hdlr$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN2@xmlSAX2Ini
$LN3@xmlSAX2Ini:

; 2924 : 	return;

	jmp	SHORT $LN1@xmlSAX2Ini
$LN2@xmlSAX2Ini:

; 2925 : 
; 2926 :     xmlSAXVersion(hdlr, xmlSAX2DefaultVersionValue);

	mov	ecx, DWORD PTR _xmlSAX2DefaultVersionValue
	push	ecx
	mov	edx, DWORD PTR _hdlr$[ebp]
	push	edx
	call	_xmlSAXVersion
	add	esp, 8

; 2927 :     if (warning == 0)

	cmp	DWORD PTR _warning$[ebp], 0
	jne	SHORT $LN4@xmlSAX2Ini

; 2928 : 	hdlr->warning = NULL;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+84], 0
	jmp	SHORT $LN1@xmlSAX2Ini
$LN4@xmlSAX2Ini:

; 2929 :     else
; 2930 : 	hdlr->warning = xmlParserWarning;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+84], OFFSET _xmlParserWarning
$LN1@xmlSAX2Ini:

; 2931 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSAX2InitDefaultSAXHandler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAXVersion
_TEXT	SEGMENT
_hdlr$ = 8						; size = 4
_version$ = 12						; size = 4
_xmlSAXVersion PROC					; COMDAT

; 2867 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2868 :     if (hdlr == NULL) return(-1);

	cmp	DWORD PTR _hdlr$[ebp], 0
	jne	SHORT $LN2@xmlSAXVers
	or	eax, -1
	jmp	$LN1@xmlSAXVers
$LN2@xmlSAXVers:

; 2869 :     if (version == 2) {

	cmp	DWORD PTR _version$[ebp], 2
	jne	SHORT $LN3@xmlSAXVers

; 2870 : 	hdlr->startElement = NULL;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+56], 0

; 2871 : 	hdlr->endElement = NULL;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 2872 : 	hdlr->startElementNs = xmlSAX2StartElementNs;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+116], OFFSET _xmlSAX2StartElementNs

; 2873 : 	hdlr->endElementNs = xmlSAX2EndElementNs;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+120], OFFSET _xmlSAX2EndElementNs

; 2874 : 	hdlr->serror = NULL;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+124], 0

; 2875 : 	hdlr->initialized = XML_SAX2_MAGIC;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+108], -554844497		; deedbeafH
	jmp	SHORT $LN4@xmlSAXVers
$LN3@xmlSAXVers:

; 2876 : #ifdef LIBXML_SAX1_ENABLED
; 2877 :     } else if (version == 1) {

	cmp	DWORD PTR _version$[ebp], 1
	jne	SHORT $LN5@xmlSAXVers

; 2878 : 	hdlr->startElement = xmlSAX2StartElement;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+56], OFFSET _xmlSAX2StartElement

; 2879 : 	hdlr->endElement = xmlSAX2EndElement;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+60], OFFSET _xmlSAX2EndElement

; 2880 : 	hdlr->initialized = 1;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+108], 1

; 2881 : #endif /* LIBXML_SAX1_ENABLED */
; 2882 :     } else

	jmp	SHORT $LN4@xmlSAXVers
$LN5@xmlSAXVers:

; 2883 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlSAXVers
$LN4@xmlSAXVers:

; 2884 :     hdlr->internalSubset = xmlSAX2InternalSubset;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax], OFFSET _xmlSAX2InternalSubset

; 2885 :     hdlr->externalSubset = xmlSAX2ExternalSubset;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+104], OFFSET _xmlSAX2ExternalSubset

; 2886 :     hdlr->isStandalone = xmlSAX2IsStandalone;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+4], OFFSET _xmlSAX2IsStandalone

; 2887 :     hdlr->hasInternalSubset = xmlSAX2HasInternalSubset;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+8], OFFSET _xmlSAX2HasInternalSubset

; 2888 :     hdlr->hasExternalSubset = xmlSAX2HasExternalSubset;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+12], OFFSET _xmlSAX2HasExternalSubset

; 2889 :     hdlr->resolveEntity = xmlSAX2ResolveEntity;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+16], OFFSET _xmlSAX2ResolveEntity

; 2890 :     hdlr->getEntity = xmlSAX2GetEntity;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+20], OFFSET _xmlSAX2GetEntity

; 2891 :     hdlr->getParameterEntity = xmlSAX2GetParameterEntity;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+96], OFFSET _xmlSAX2GetParameterEntity

; 2892 :     hdlr->entityDecl = xmlSAX2EntityDecl;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+24], OFFSET _xmlSAX2EntityDecl

; 2893 :     hdlr->attributeDecl = xmlSAX2AttributeDecl;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+32], OFFSET _xmlSAX2AttributeDecl

; 2894 :     hdlr->elementDecl = xmlSAX2ElementDecl;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+36], OFFSET _xmlSAX2ElementDecl

; 2895 :     hdlr->notationDecl = xmlSAX2NotationDecl;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+28], OFFSET _xmlSAX2NotationDecl

; 2896 :     hdlr->unparsedEntityDecl = xmlSAX2UnparsedEntityDecl;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+40], OFFSET _xmlSAX2UnparsedEntityDecl

; 2897 :     hdlr->setDocumentLocator = xmlSAX2SetDocumentLocator;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+44], OFFSET _xmlSAX2SetDocumentLocator

; 2898 :     hdlr->startDocument = xmlSAX2StartDocument;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+48], OFFSET _xmlSAX2StartDocument

; 2899 :     hdlr->endDocument = xmlSAX2EndDocument;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+52], OFFSET _xmlSAX2EndDocument

; 2900 :     hdlr->reference = xmlSAX2Reference;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+64], OFFSET _xmlSAX2Reference

; 2901 :     hdlr->characters = xmlSAX2Characters;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+68], OFFSET _xmlSAX2Characters

; 2902 :     hdlr->cdataBlock = xmlSAX2CDataBlock;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+100], OFFSET _xmlSAX2CDataBlock

; 2903 :     hdlr->ignorableWhitespace = xmlSAX2Characters;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+72], OFFSET _xmlSAX2Characters

; 2904 :     hdlr->processingInstruction = xmlSAX2ProcessingInstruction;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+76], OFFSET _xmlSAX2ProcessingInstruction

; 2905 :     hdlr->comment = xmlSAX2Comment;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+80], OFFSET _xmlSAX2Comment

; 2906 :     hdlr->warning = xmlParserWarning;

	mov	ecx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [ecx+84], OFFSET _xmlParserWarning

; 2907 :     hdlr->error = xmlParserError;

	mov	edx, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [edx+88], OFFSET _xmlParserError

; 2908 :     hdlr->fatalError = xmlParserError;

	mov	eax, DWORD PTR _hdlr$[ebp]
	mov	DWORD PTR [eax+92], OFFSET _xmlParserError

; 2909 : 
; 2910 :     return(0);

	xor	eax, eax
$LN1@xmlSAXVers:

; 2911 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSAXVersion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAXDefaultVersion
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_version$ = 8						; size = 4
_xmlSAXDefaultVersion PROC				; COMDAT

; 2846 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2847 :     int ret = xmlSAX2DefaultVersionValue;

	mov	eax, DWORD PTR _xmlSAX2DefaultVersionValue
	mov	DWORD PTR _ret$[ebp], eax

; 2848 : 
; 2849 :     if ((version != 1) && (version != 2))

	cmp	DWORD PTR _version$[ebp], 1
	je	SHORT $LN2@xmlSAXDefa
	cmp	DWORD PTR _version$[ebp], 2
	je	SHORT $LN2@xmlSAXDefa

; 2850 :         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlSAXDefa
$LN2@xmlSAXDefa:

; 2851 :     xmlSAX2DefaultVersionValue = version;

	mov	ecx, DWORD PTR _version$[ebp]
	mov	DWORD PTR _xmlSAX2DefaultVersionValue, ecx

; 2852 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSAXDefa:

; 2853 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAXDefaultVersion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2CDataBlock
_TEXT	SEGMENT
_lastChild$ = -12					; size = 4
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_value$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlSAX2CDataBlock PROC					; COMDAT

; 2805 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2806 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 2807 :     xmlNodePtr ret, lastChild;
; 2808 : 
; 2809 :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2CDa
	jmp	SHORT $LN1@xmlSAX2CDa
$LN2@xmlSAX2CDa:

; 2810 : #ifdef DEBUG_SAX
; 2811 :     xmlGenericError(xmlGenericErrorContext,
; 2812 : 	    "SAX.pcdata(%.10s, %d)\n", value, len);
; 2813 : #endif
; 2814 :     lastChild = xmlGetLastChild(ctxt->node);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	_xmlGetLastChild
	add	esp, 4
	mov	DWORD PTR _lastChild$[ebp], eax

; 2815 : #ifdef DEBUG_SAX_TREE
; 2816 :     xmlGenericError(xmlGenericErrorContext,
; 2817 : 	    "add chars to %s \n", ctxt->node->name);
; 2818 : #endif
; 2819 :     if ((lastChild != NULL) &&

	cmp	DWORD PTR _lastChild$[ebp], 0
	je	SHORT $LN3@xmlSAX2CDa
	mov	eax, DWORD PTR _lastChild$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jne	SHORT $LN3@xmlSAX2CDa

; 2820 :         (lastChild->type == XML_CDATA_SECTION_NODE)) {
; 2821 : 	xmlTextConcat(lastChild, value, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _lastChild$[ebp]
	push	eax
	call	_xmlTextConcat
	add	esp, 12					; 0000000cH

; 2822 :     } else {

	jmp	SHORT $LN1@xmlSAX2CDa
$LN3@xmlSAX2CDa:

; 2823 : 	ret = xmlNewCDataBlock(ctxt->myDoc, value, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlNewCDataBlock
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 2824 : 	if (xmlAddChild(ctxt->node, ret) == NULL)

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_xmlAddChild
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@xmlSAX2CDa

; 2825 : 		xmlFreeNode(ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlFreeNode
	add	esp, 4
$LN1@xmlSAX2CDa:

; 2826 :     }
; 2827 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2CDataBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2Comment
_TEXT	SEGMENT
_parent$ = -12						; size = 4
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_value$ = 12						; size = 4
_xmlSAX2Comment PROC					; COMDAT

; 2743 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2744 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 2745 :     xmlNodePtr ret;
; 2746 :     xmlNodePtr parent;
; 2747 : 
; 2748 :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Com
	jmp	$LN1@xmlSAX2Com
$LN2@xmlSAX2Com:

; 2749 :     parent = ctxt->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _parent$[ebp], edx

; 2750 : #ifdef DEBUG_SAX
; 2751 :     xmlGenericError(xmlGenericErrorContext, "SAX.xmlSAX2Comment(%s)\n", value);
; 2752 : #endif
; 2753 :     ret = xmlNewDocComment(ctxt->myDoc, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlNewDocComment
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 2754 :     if (ret == NULL) return;

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@xmlSAX2Com
	jmp	$LN1@xmlSAX2Com
$LN3@xmlSAX2Com:

; 2755 :     if (ctxt->linenumbers) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+280], 0
	je	SHORT $LN4@xmlSAX2Com

; 2756 : 	if (ctxt->input != NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN4@xmlSAX2Com

; 2757 : 	    if (ctxt->input->line < 65535)

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+28], 65535		; 0000ffffH
	jge	SHORT $LN6@xmlSAX2Com

; 2758 : 		ret->line = (short) ctxt->input->line;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	cx, WORD PTR [edx+28]
	mov	WORD PTR [eax+56], cx
	jmp	SHORT $LN4@xmlSAX2Com
$LN6@xmlSAX2Com:

; 2759 : 	    else
; 2760 : 	        ret->line = 65535;

	mov	edx, 65535				; 0000ffffH
	mov	eax, DWORD PTR _ret$[ebp]
	mov	WORD PTR [eax+56], dx
$LN4@xmlSAX2Com:

; 2761 : 	}
; 2762 :     }
; 2763 : 
; 2764 :     if (ctxt->inSubset == 1) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+216], 1
	jne	SHORT $LN8@xmlSAX2Com

; 2765 : 	xmlAddChild((xmlNodePtr) ctxt->myDoc->intSubset, ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlAddChild
	add	esp, 8

; 2766 : 	return;

	jmp	SHORT $LN1@xmlSAX2Com
	jmp	SHORT $LN9@xmlSAX2Com
$LN8@xmlSAX2Com:

; 2767 :     } else if (ctxt->inSubset == 2) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+216], 2
	jne	SHORT $LN9@xmlSAX2Com

; 2768 : 	xmlAddChild((xmlNodePtr) ctxt->myDoc->extSubset, ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlAddChild
	add	esp, 8

; 2769 : 	return;

	jmp	SHORT $LN1@xmlSAX2Com
$LN9@xmlSAX2Com:

; 2770 :     }
; 2771 :     if (parent == NULL) {

	cmp	DWORD PTR _parent$[ebp], 0
	jne	SHORT $LN11@xmlSAX2Com

; 2772 : #ifdef DEBUG_SAX_TREE
; 2773 : 	    xmlGenericError(xmlGenericErrorContext,
; 2774 : 		    "Setting xmlSAX2Comment as root\n");
; 2775 : #endif
; 2776 :         xmlAddChild((xmlNodePtr) ctxt->myDoc, (xmlNodePtr) ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlAddChild
	add	esp, 8

; 2777 : 	return;

	jmp	SHORT $LN1@xmlSAX2Com
$LN11@xmlSAX2Com:

; 2778 :     }
; 2779 :     if (parent->type == XML_ELEMENT_NODE) {

	mov	edx, DWORD PTR _parent$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN12@xmlSAX2Com

; 2780 : #ifdef DEBUG_SAX_TREE
; 2781 : 	xmlGenericError(xmlGenericErrorContext,
; 2782 : 		"adding xmlSAX2Comment child to %s\n", parent->name);
; 2783 : #endif
; 2784 : 	xmlAddChild(parent, ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parent$[ebp]
	push	ecx
	call	_xmlAddChild
	add	esp, 8

; 2785 :     } else {

	jmp	SHORT $LN1@xmlSAX2Com
$LN12@xmlSAX2Com:

; 2786 : #ifdef DEBUG_SAX_TREE
; 2787 : 	xmlGenericError(xmlGenericErrorContext,
; 2788 : 		"adding xmlSAX2Comment sibling to ");
; 2789 : 	xmlDebugDumpOneNode(stderr, parent, 0);
; 2790 : #endif
; 2791 : 	xmlAddSibling(parent, ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	call	_xmlAddSibling
	add	esp, 8
$LN1@xmlSAX2Com:

; 2792 :     }
; 2793 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2Comment ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2ProcessingInstruction
_TEXT	SEGMENT
_parent$ = -12						; size = 4
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_target$ = 12						; size = 4
_data$ = 16						; size = 4
_xmlSAX2ProcessingInstruction PROC			; COMDAT

; 2680 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2681 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 2682 :     xmlNodePtr ret;
; 2683 :     xmlNodePtr parent;
; 2684 : 
; 2685 :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Pro
	jmp	$LN1@xmlSAX2Pro
$LN2@xmlSAX2Pro:

; 2686 :     parent = ctxt->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _parent$[ebp], edx

; 2687 : #ifdef DEBUG_SAX
; 2688 :     xmlGenericError(xmlGenericErrorContext,
; 2689 : 	    "SAX.xmlSAX2ProcessingInstruction(%s, %s)\n", target, data);
; 2690 : #endif
; 2691 : 
; 2692 :     ret = xmlNewDocPI(ctxt->myDoc, target, data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _target$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlNewDocPI
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 2693 :     if (ret == NULL) return;

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@xmlSAX2Pro
	jmp	$LN1@xmlSAX2Pro
$LN3@xmlSAX2Pro:

; 2694 : 
; 2695 :     if (ctxt->linenumbers) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+280], 0
	je	SHORT $LN4@xmlSAX2Pro

; 2696 : 	if (ctxt->input != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN4@xmlSAX2Pro

; 2697 : 	    if (ctxt->input->line < 65535)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+28], 65535		; 0000ffffH
	jge	SHORT $LN6@xmlSAX2Pro

; 2698 : 		ret->line = (short) ctxt->input->line;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	dx, WORD PTR [eax+28]
	mov	WORD PTR [ecx+56], dx
	jmp	SHORT $LN4@xmlSAX2Pro
$LN6@xmlSAX2Pro:

; 2699 : 	    else
; 2700 : 	        ret->line = 65535;

	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	WORD PTR [ecx+56], ax
$LN4@xmlSAX2Pro:

; 2701 : 	}
; 2702 :     }
; 2703 :     if (ctxt->inSubset == 1) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+216], 1
	jne	SHORT $LN8@xmlSAX2Pro

; 2704 : 	xmlAddChild((xmlNodePtr) ctxt->myDoc->intSubset, ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlAddChild
	add	esp, 8

; 2705 : 	return;

	jmp	SHORT $LN1@xmlSAX2Pro
	jmp	SHORT $LN9@xmlSAX2Pro
$LN8@xmlSAX2Pro:

; 2706 :     } else if (ctxt->inSubset == 2) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+216], 2
	jne	SHORT $LN9@xmlSAX2Pro

; 2707 : 	xmlAddChild((xmlNodePtr) ctxt->myDoc->extSubset, ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlAddChild
	add	esp, 8

; 2708 : 	return;

	jmp	SHORT $LN1@xmlSAX2Pro
$LN9@xmlSAX2Pro:

; 2709 :     }
; 2710 :     if (parent == NULL) {

	cmp	DWORD PTR _parent$[ebp], 0
	jne	SHORT $LN11@xmlSAX2Pro

; 2711 : #ifdef DEBUG_SAX_TREE
; 2712 : 	    xmlGenericError(xmlGenericErrorContext,
; 2713 : 		    "Setting PI %s as root\n", target);
; 2714 : #endif
; 2715 :         xmlAddChild((xmlNodePtr) ctxt->myDoc, (xmlNodePtr) ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlAddChild
	add	esp, 8

; 2716 : 	return;

	jmp	SHORT $LN1@xmlSAX2Pro
$LN11@xmlSAX2Pro:

; 2717 :     }
; 2718 :     if (parent->type == XML_ELEMENT_NODE) {

	mov	eax, DWORD PTR _parent$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN12@xmlSAX2Pro

; 2719 : #ifdef DEBUG_SAX_TREE
; 2720 : 	xmlGenericError(xmlGenericErrorContext,
; 2721 : 		"adding PI %s child to %s\n", target, parent->name);
; 2722 : #endif
; 2723 : 	xmlAddChild(parent, ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parent$[ebp]
	push	edx
	call	_xmlAddChild
	add	esp, 8

; 2724 :     } else {

	jmp	SHORT $LN1@xmlSAX2Pro
$LN12@xmlSAX2Pro:

; 2725 : #ifdef DEBUG_SAX_TREE
; 2726 : 	xmlGenericError(xmlGenericErrorContext,
; 2727 : 		"adding PI %s sibling to ", target);
; 2728 : 	xmlDebugDumpOneNode(stderr, parent, 0);
; 2729 : #endif
; 2730 : 	xmlAddSibling(parent, ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parent$[ebp]
	push	ecx
	call	_xmlAddSibling
	add	esp, 8
$LN1@xmlSAX2Pro:

; 2731 :     }
; 2732 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2ProcessingInstruction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2IgnorableWhitespace
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_ch$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlSAX2IgnorableWhitespace PROC			; COMDAT

; 2661 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2662 :     /* xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx; */
; 2663 : #ifdef DEBUG_SAX
; 2664 :     xmlGenericError(xmlGenericErrorContext,
; 2665 : 	    "SAX.xmlSAX2IgnorableWhitespace(%.30s, %d)\n", ch, len);
; 2666 : #endif
; 2667 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSAX2IgnorableWhitespace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2Characters
_TEXT	SEGMENT
tv94 = -24						; size = 4
_size$1 = -20						; size = 4
_newbuf$2 = -16						; size = 4
_coalesceText$3 = -12					; size = 4
_lastChild$ = -8					; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_ch$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlSAX2Characters PROC					; COMDAT

; 2533 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2534 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 2535 :     xmlNodePtr lastChild;
; 2536 : 
; 2537 :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Cha
	jmp	$LN1@xmlSAX2Cha
$LN2@xmlSAX2Cha:

; 2538 : #ifdef DEBUG_SAX
; 2539 :     xmlGenericError(xmlGenericErrorContext,
; 2540 : 	    "SAX.xmlSAX2Characters(%.30s, %d)\n", ch, len);
; 2541 : #endif
; 2542 :     /*
; 2543 :      * Handle the data if any. If there is no child
; 2544 :      * add it as content, otherwise if the last child is text,
; 2545 :      * concatenate it, else create a new node of type text.
; 2546 :      */
; 2547 : 
; 2548 :     if (ctxt->node == NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	jne	SHORT $LN3@xmlSAX2Cha

; 2549 : #ifdef DEBUG_SAX_TREE
; 2550 : 	xmlGenericError(xmlGenericErrorContext,
; 2551 : 		"add chars: ctxt->node == NULL !\n");
; 2552 : #endif
; 2553 :         return;

	jmp	$LN1@xmlSAX2Cha
$LN3@xmlSAX2Cha:

; 2554 :     }
; 2555 :     lastChild = ctxt->node->last;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _lastChild$[ebp], ecx

; 2556 : #ifdef DEBUG_SAX_TREE
; 2557 :     xmlGenericError(xmlGenericErrorContext,
; 2558 : 	    "add chars to %s \n", ctxt->node->name);
; 2559 : #endif
; 2560 : 
; 2561 :     /*
; 2562 :      * Here we needed an accelerator mechanism in case of very large
; 2563 :      * elements. Use an attribute in the structure !!!
; 2564 :      */
; 2565 :     if (lastChild == NULL) {

	cmp	DWORD PTR _lastChild$[ebp], 0
	jne	$LN4@xmlSAX2Cha

; 2566 :         lastChild = xmlSAX2TextNode(ctxt, ch, len);

	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2TextNode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lastChild$[ebp], eax

; 2567 : 	if (lastChild != NULL) {

	cmp	DWORD PTR _lastChild$[ebp], 0
	je	SHORT $LN6@xmlSAX2Cha

; 2568 : 	    ctxt->node->children = lastChild;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _lastChild$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 2569 : 	    ctxt->node->last = lastChild;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _lastChild$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 2570 : 	    lastChild->parent = ctxt->node;

	mov	edx, DWORD PTR _lastChild$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+20], ecx

; 2571 : 	    lastChild->doc = ctxt->node->doc;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _lastChild$[ebp]
	mov	edx, DWORD PTR [eax+32]
	mov	DWORD PTR [ecx+32], edx

; 2572 : 	    ctxt->nodelen = len;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+260], ecx

; 2573 : 	    ctxt->nodemem = len + 1;

	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+264], edx

; 2574 : 	} else {

	jmp	SHORT $LN7@xmlSAX2Cha
$LN6@xmlSAX2Cha:

; 2575 : 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters");

	push	OFFSET ??_C@_0BC@IJLHKBBO@xmlSAX2Characters@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 2576 : 	    return;

	jmp	$LN1@xmlSAX2Cha
$LN7@xmlSAX2Cha:

; 2577 : 	}
; 2578 :     } else {

	jmp	$LN1@xmlSAX2Cha
$LN4@xmlSAX2Cha:

; 2579 : 	int coalesceText = (lastChild != NULL) &&

	cmp	DWORD PTR _lastChild$[ebp], 0
	je	SHORT $LN26@xmlSAX2Cha
	mov	edx, DWORD PTR _lastChild$[ebp]
	cmp	DWORD PTR [edx+4], 3
	jne	SHORT $LN26@xmlSAX2Cha
	mov	eax, DWORD PTR _lastChild$[ebp]
	cmp	DWORD PTR [eax+8], OFFSET _xmlStringText
	jne	SHORT $LN26@xmlSAX2Cha
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN27@xmlSAX2Cha
$LN26@xmlSAX2Cha:
	mov	DWORD PTR tv94[ebp], 0
$LN27@xmlSAX2Cha:
	mov	ecx, DWORD PTR tv94[ebp]
	mov	DWORD PTR _coalesceText$3[ebp], ecx

; 2580 : 	    (lastChild->type == XML_TEXT_NODE) &&
; 2581 : 	    (lastChild->name == xmlStringText);
; 2582 : 	if ((coalesceText) && (ctxt->nodemem != 0)) {

	cmp	DWORD PTR _coalesceText$3[ebp], 0
	je	$LN8@xmlSAX2Cha
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+264], 0
	je	$LN8@xmlSAX2Cha

; 2583 : 	    /*
; 2584 : 	     * The whole point of maintaining nodelen and nodemem,
; 2585 : 	     * xmlTextConcat is too costly, i.e. compute length,
; 2586 : 	     * reallocate a new buffer, move data, append ch. Here
; 2587 : 	     * We try to minimaze realloc() uses and avoid copying
; 2588 : 	     * and recomputing length over and over.
; 2589 : 	     */
; 2590 : 	    if (lastChild->content == (xmlChar *)&(lastChild->properties)) {

	mov	eax, DWORD PTR _lastChild$[ebp]
	add	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _lastChild$[ebp]
	cmp	DWORD PTR [ecx+40], eax
	jne	SHORT $LN10@xmlSAX2Cha

; 2591 : 		lastChild->content = xmlStrdup(lastChild->content);

	mov	edx, DWORD PTR _lastChild$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _lastChild$[ebp]
	mov	DWORD PTR [ecx+40], eax

; 2592 : 		lastChild->properties = NULL;

	mov	edx, DWORD PTR _lastChild$[ebp]
	mov	DWORD PTR [edx+44], 0
	jmp	SHORT $LN11@xmlSAX2Cha
$LN10@xmlSAX2Cha:

; 2593 : 	    } else if ((ctxt->nodemem == ctxt->nodelen + 1) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+264], ecx
	jne	SHORT $LN11@xmlSAX2Cha
	mov	eax, DWORD PTR _lastChild$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+296]
	push	eax
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@xmlSAX2Cha

; 2594 : 	               (xmlDictOwns(ctxt->dict, lastChild->content))) {
; 2595 : 		lastChild->content = xmlStrdup(lastChild->content);

	mov	ecx, DWORD PTR _lastChild$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _lastChild$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN11@xmlSAX2Cha:

; 2596 : 	    }
; 2597 : 	    if (lastChild->content == NULL) {

	mov	edx, DWORD PTR _lastChild$[ebp]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN13@xmlSAX2Cha

; 2598 : 		xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters: xmlStrdup returned NULL");

	push	OFFSET ??_C@_0CL@EDPCIJGK@xmlSAX2Characters?3?5xmlStrdup?5re@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 2599 : 		return;

	jmp	$LN1@xmlSAX2Cha
$LN13@xmlSAX2Cha:

; 2600 :  	    }
; 2601 :             if (((size_t)ctxt->nodelen + (size_t)len > XML_MAX_TEXT_LENGTH) &&

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+260]
	add	edx, DWORD PTR _len$[ebp]
	cmp	edx, 10000000				; 00989680H
	jbe	SHORT $LN14@xmlSAX2Cha
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	and	ecx, 524288				; 00080000H
	jne	SHORT $LN14@xmlSAX2Cha

; 2602 :                 ((ctxt->options & XML_PARSE_HUGE) == 0)) {
; 2603 :                 xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters: huge text node");

	push	OFFSET ??_C@_0CC@PCIHKIPC@xmlSAX2Characters?3?5huge?5text?5no@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 2604 :                 return;

	jmp	$LN1@xmlSAX2Cha
$LN14@xmlSAX2Cha:

; 2605 :             }
; 2606 : 	    if ((size_t)ctxt->nodelen > SIZE_T_MAX - (size_t)len ||

	or	eax, -1
	sub	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+260], eax
	ja	SHORT $LN16@xmlSAX2Cha
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+264]
	add	eax, DWORD PTR _len$[ebp]
	cmp	eax, 2147483647				; 7fffffffH
	jbe	SHORT $LN15@xmlSAX2Cha
$LN16@xmlSAX2Cha:

; 2607 : 	        (size_t)ctxt->nodemem + (size_t)len > SIZE_T_MAX / 2) {
; 2608 :                 xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters overflow prevented");

	push	OFFSET ??_C@_0CF@EADJOGLP@xmlSAX2Characters?5overflow?5prev@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 2609 :                 return;

	jmp	$LN1@xmlSAX2Cha
$LN15@xmlSAX2Cha:

; 2610 : 	    }
; 2611 : 	    if (ctxt->nodelen + len >= ctxt->nodemem) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+260]
	add	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	eax, DWORD PTR [ecx+264]
	jl	SHORT $LN17@xmlSAX2Cha

; 2612 : 		xmlChar *newbuf;
; 2613 : 		size_t size;
; 2614 : 
; 2615 : 		size = ctxt->nodemem + len;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+264]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _size$1[ebp], eax

; 2616 : 		size *= 2;

	mov	ecx, DWORD PTR _size$1[ebp]
	shl	ecx, 1
	mov	DWORD PTR _size$1[ebp], ecx

; 2617 :                 newbuf = (xmlChar *) xmlRealloc(lastChild->content,size);

	mov	esi, esp
	mov	edx, DWORD PTR _size$1[ebp]
	push	edx
	mov	eax, DWORD PTR _lastChild$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _newbuf$2[ebp], eax

; 2618 : 		if (newbuf == NULL) {

	cmp	DWORD PTR _newbuf$2[ebp], 0
	jne	SHORT $LN18@xmlSAX2Cha

; 2619 : 		    xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters");

	push	OFFSET ??_C@_0BC@IJLHKBBO@xmlSAX2Characters@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 2620 : 		    return;

	jmp	$LN1@xmlSAX2Cha
$LN18@xmlSAX2Cha:

; 2621 : 		}
; 2622 : 		ctxt->nodemem = size;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _size$1[ebp]
	mov	DWORD PTR [eax+264], ecx

; 2623 : 		lastChild->content = newbuf;

	mov	edx, DWORD PTR _lastChild$[ebp]
	mov	eax, DWORD PTR _newbuf$2[ebp]
	mov	DWORD PTR [edx+40], eax
$LN17@xmlSAX2Cha:

; 2624 : 	    }
; 2625 : 	    memcpy(&lastChild->content[ctxt->nodelen], ch, len);

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ch$[ebp]
	push	edx
	mov	eax, DWORD PTR _lastChild$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	ecx, DWORD PTR [edx+260]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 2626 : 	    ctxt->nodelen += len;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+260], ecx

; 2627 : 	    lastChild->content[ctxt->nodelen] = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+260]
	mov	edx, DWORD PTR _lastChild$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	BYTE PTR [eax+ecx], 0
	jmp	$LN1@xmlSAX2Cha
$LN8@xmlSAX2Cha:

; 2628 : 	} else if (coalesceText) {

	cmp	DWORD PTR _coalesceText$3[ebp], 0
	je	SHORT $LN19@xmlSAX2Cha

; 2629 : 	    if (xmlTextConcat(lastChild, ch, len)) {

	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ch$[ebp]
	push	edx
	mov	eax, DWORD PTR _lastChild$[ebp]
	push	eax
	call	_xmlTextConcat
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN21@xmlSAX2Cha

; 2630 : 		xmlSAX2ErrMemory(ctxt, "xmlSAX2Characters");

	push	OFFSET ??_C@_0BC@IJLHKBBO@xmlSAX2Characters@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2ErrMemory
	add	esp, 8
$LN21@xmlSAX2Cha:

; 2631 : 	    }
; 2632 : 	    if (ctxt->node->children != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN22@xmlSAX2Cha

; 2633 : 		ctxt->nodelen = xmlStrlen(lastChild->content);

	mov	ecx, DWORD PTR _lastChild$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+260], eax

; 2634 : 		ctxt->nodemem = ctxt->nodelen + 1;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+260]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+264], eax
$LN22@xmlSAX2Cha:

; 2635 : 	    }
; 2636 : 	} else {

	jmp	SHORT $LN1@xmlSAX2Cha
$LN19@xmlSAX2Cha:

; 2637 : 	    /* Mixed content, first time */
; 2638 : 	    lastChild = xmlSAX2TextNode(ctxt, ch, len);

	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _ch$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2TextNode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _lastChild$[ebp], eax

; 2639 : 	    if (lastChild != NULL) {

	cmp	DWORD PTR _lastChild$[ebp], 0
	je	SHORT $LN1@xmlSAX2Cha

; 2640 : 		xmlAddChild(ctxt->node, lastChild);

	mov	edx, DWORD PTR _lastChild$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_xmlAddChild
	add	esp, 8

; 2641 : 		if (ctxt->node->children != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@xmlSAX2Cha

; 2642 : 		    ctxt->nodelen = len;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx+260], edx

; 2643 : 		    ctxt->nodemem = len + 1;

	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+264], eax
$LN1@xmlSAX2Cha:

; 2644 : 		}
; 2645 : 	    }
; 2646 : 	}
; 2647 :     }
; 2648 : }

	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2Characters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2Reference
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlSAX2Reference PROC					; COMDAT

; 2501 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2502 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 2503 :     xmlNodePtr ret;
; 2504 : 
; 2505 :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Ref
	jmp	SHORT $LN1@xmlSAX2Ref
$LN2@xmlSAX2Ref:

; 2506 : #ifdef DEBUG_SAX
; 2507 :     xmlGenericError(xmlGenericErrorContext,
; 2508 : 	    "SAX.xmlSAX2Reference(%s)\n", name);
; 2509 : #endif
; 2510 :     if (name[0] == '#')

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _name$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 35					; 00000023H
	jne	SHORT $LN3@xmlSAX2Ref

; 2511 : 	ret = xmlNewCharRef(ctxt->myDoc, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlNewCharRef
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN4@xmlSAX2Ref
$LN3@xmlSAX2Ref:

; 2512 :     else
; 2513 : 	ret = xmlNewReference(ctxt->myDoc, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlNewReference
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
$LN4@xmlSAX2Ref:

; 2514 : #ifdef DEBUG_SAX_TREE
; 2515 :     xmlGenericError(xmlGenericErrorContext,
; 2516 : 	    "add xmlSAX2Reference %s to %s \n", name, ctxt->node->name);
; 2517 : #endif
; 2518 :     if (xmlAddChild(ctxt->node, ret) == NULL) {

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_xmlAddChild
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN1@xmlSAX2Ref

; 2519 :         xmlFreeNode(ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlFreeNode
	add	esp, 4
$LN1@xmlSAX2Ref:

; 2520 :     }
; 2521 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2Reference ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2EndElementNs
_TEXT	SEGMENT
_cur$ = -36						; size = 4
_node_info$ = -28					; size = 20
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_localname$ = 12					; size = 4
_prefix$ = 16						; size = 4
_URI$ = 20						; size = 4
_xmlSAX2EndElementNs PROC				; COMDAT

; 2464 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2465 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 2466 :     xmlParserNodeInfo node_info;
; 2467 :     xmlNodePtr cur;
; 2468 : 
; 2469 :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2End
	jmp	$LN1@xmlSAX2End
$LN2@xmlSAX2End:

; 2470 :     cur = ctxt->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 2471 :     /* Capture end position and add node */
; 2472 :     if ((ctxt->record_info) && (cur != NULL)) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN3@xmlSAX2End
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlSAX2End

; 2473 :         node_info.end_pos = ctxt->input->cur - ctxt->input->base;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx+16]
	sub	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _node_info$[ebp+12], edx

; 2474 :         node_info.end_line = ctxt->input->line;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _node_info$[ebp+16], edx

; 2475 :         node_info.node = cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _node_info$[ebp], eax

; 2476 :         xmlParserAddNodeInfo(ctxt, &node_info);

	lea	ecx, DWORD PTR _node_info$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlParserAddNodeInfo
	add	esp, 8
$LN3@xmlSAX2End:

; 2477 :     }
; 2478 :     ctxt->nodemem = -1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+264], -1

; 2479 : 
; 2480 : #ifdef LIBXML_VALID_ENABLED
; 2481 :     if (ctxt->validate && ctxt->wellFormed &&
; 2482 :         ctxt->myDoc && ctxt->myDoc->intSubset)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN4@xmlSAX2End
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN4@xmlSAX2End
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@xmlSAX2End
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN4@xmlSAX2End

; 2483 :         ctxt->valid &= xmlValidateOneElement(&ctxt->vctxt, ctxt->myDoc, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_xmlValidateOneElement
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN4@xmlSAX2End:

; 2484 : #endif /* LIBXML_VALID_ENABLED */
; 2485 : 
; 2486 :     /*
; 2487 :      * end of parsing of this node.
; 2488 :      */
; 2489 :     nodePop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_nodePop
	add	esp, 4
$LN1@xmlSAX2End:

; 2490 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@xmlSAX2End
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN8@xmlSAX2End:
	DD	1
	DD	$LN7@xmlSAX2End
$LN7@xmlSAX2End:
	DD	-28					; ffffffe4H
	DD	20					; 00000014H
	DD	$LN6@xmlSAX2End
$LN6@xmlSAX2End:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
_xmlSAX2EndElementNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2StartElementNs
_TEXT	SEGMENT
_chk$1 = -52						; size = 4
_fullname$2 = -48					; size = 4
_fullname$3 = -44					; size = 4
_j$ = -40						; size = 4
_i$ = -36						; size = 4
_lname$ = -32						; size = 4
_pref$ = -28						; size = 4
_uri$ = -24						; size = 4
_ns$ = -20						; size = 4
_last$ = -16						; size = 4
_parent$ = -12						; size = 4
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_localname$ = 12					; size = 4
_prefix$ = 16						; size = 4
_URI$ = 20						; size = 4
_nb_namespaces$ = 24					; size = 4
_namespaces$ = 28					; size = 4
_nb_attributes$ = 32					; size = 4
_nb_defaulted$ = 36					; size = 4
_attributes$ = 40					; size = 4
_xmlSAX2StartElementNs PROC				; COMDAT

; 2217 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 2218 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 2219 :     xmlNodePtr ret;
; 2220 :     xmlNodePtr parent;
; 2221 :     xmlNsPtr last = NULL, ns;

	mov	DWORD PTR _last$[ebp], 0

; 2222 :     const xmlChar *uri, *pref;
; 2223 :     xmlChar *lname = NULL;

	mov	DWORD PTR _lname$[ebp], 0

; 2224 :     int i, j;
; 2225 : 
; 2226 :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN8@xmlSAX2Sta
	jmp	$LN1@xmlSAX2Sta
$LN8@xmlSAX2Sta:

; 2227 :     parent = ctxt->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _parent$[ebp], edx

; 2228 :     /*
; 2229 :      * First check on validity:
; 2230 :      */
; 2231 :     if (ctxt->validate && (ctxt->myDoc->extSubset == NULL) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN9@xmlSAX2Sta
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN9@xmlSAX2Sta
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN10@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+44]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN9@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+44]
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN9@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+44]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN9@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+44]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN9@xmlSAX2Sta
$LN10@xmlSAX2Sta:

; 2232 :         ((ctxt->myDoc->intSubset == NULL) ||
; 2233 : 	 ((ctxt->myDoc->intSubset->notations == NULL) &&
; 2234 : 	  (ctxt->myDoc->intSubset->elements == NULL) &&
; 2235 : 	  (ctxt->myDoc->intSubset->attributes == NULL) &&
; 2236 : 	  (ctxt->myDoc->intSubset->entities == NULL)))) {
; 2237 : 	xmlErrValid(ctxt, XML_DTD_NO_DTD,

	push	0
	push	0
	push	OFFSET ??_C@_0CC@LPGBEFAE@Validation?5failed?3?5no?5DTD?5found@
	push	522					; 0000020aH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValid
	add	esp, 20					; 00000014H

; 2238 : 	  "Validation failed: no DTD found !", NULL, NULL);
; 2239 : 	ctxt->validate = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN9@xmlSAX2Sta:

; 2240 :     }
; 2241 : 
; 2242 :     /*
; 2243 :      * Take care of the rare case of an undefined namespace prefix
; 2244 :      */
; 2245 :     if ((prefix != NULL) && (URI == NULL)) {

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN11@xmlSAX2Sta
	cmp	DWORD PTR _URI$[ebp], 0
	jne	SHORT $LN11@xmlSAX2Sta

; 2246 :         if (ctxt->dictNames) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+364], 0
	je	SHORT $LN12@xmlSAX2Sta

; 2247 : 	    const xmlChar *fullname;
; 2248 : 
; 2249 : 	    fullname = xmlDictQLookup(ctxt->dict, prefix, localname);

	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+296]
	push	edx
	call	_xmlDictQLookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fullname$3[ebp], eax

; 2250 : 	    if (fullname != NULL)

	cmp	DWORD PTR _fullname$3[ebp], 0
	je	SHORT $LN14@xmlSAX2Sta

; 2251 : 	        localname = fullname;

	mov	eax, DWORD PTR _fullname$3[ebp]
	mov	DWORD PTR _localname$[ebp], eax
$LN14@xmlSAX2Sta:

; 2252 : 	} else {

	jmp	SHORT $LN11@xmlSAX2Sta
$LN12@xmlSAX2Sta:

; 2253 : 	    lname = xmlBuildQName(localname, prefix, NULL, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _lname$[ebp], eax
$LN11@xmlSAX2Sta:

; 2254 : 	}
; 2255 :     }
; 2256 :     /*
; 2257 :      * allocate the node
; 2258 :      */
; 2259 :     if (ctxt->freeElems != NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+372], 0
	je	$LN15@xmlSAX2Sta

; 2260 :         ret = ctxt->freeElems;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+372]
	mov	DWORD PTR _ret$[ebp], edx

; 2261 : 	ctxt->freeElems = ret->next;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax+372], edx

; 2262 : 	ctxt->freeElemsNr--;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+368]
	sub	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+368], ecx

; 2263 : 	memset(ret, 0, sizeof(xmlNode));

	push	60					; 0000003cH
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2264 :         ret->doc = ctxt->myDoc;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+32], eax

; 2265 : 	ret->type = XML_ELEMENT_NODE;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 1

; 2266 : 
; 2267 : 	if (ctxt->dictNames)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+364], 0
	je	SHORT $LN17@xmlSAX2Sta

; 2268 : 	    ret->name = localname;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _localname$[ebp]
	mov	DWORD PTR [eax+8], ecx
	jmp	SHORT $LN18@xmlSAX2Sta
$LN17@xmlSAX2Sta:

; 2269 : 	else {
; 2270 : 	    if (lname == NULL)

	cmp	DWORD PTR _lname$[ebp], 0
	jne	SHORT $LN19@xmlSAX2Sta

; 2271 : 		ret->name = xmlStrdup(localname);

	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], eax
	jmp	SHORT $LN20@xmlSAX2Sta
$LN19@xmlSAX2Sta:

; 2272 : 	    else
; 2273 : 	        ret->name = lname;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _lname$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN20@xmlSAX2Sta:

; 2274 : 	    if (ret->name == NULL) {

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN18@xmlSAX2Sta

; 2275 : 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");

	push	OFFSET ??_C@_0BG@CNBDKEMA@xmlSAX2StartElementNs@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 2276 : 		return;

	jmp	$LN1@xmlSAX2Sta
$LN18@xmlSAX2Sta:

; 2277 : 	    }
; 2278 : 	}
; 2279 : 	if ((__xmlRegisterCallbacks) && (xmlRegisterNodeDefaultValue))

	cmp	DWORD PTR ___xmlRegisterCallbacks, 0
	je	SHORT $LN22@xmlSAX2Sta
	call	___xmlRegisterNodeDefaultValue
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN22@xmlSAX2Sta

; 2280 : 	    xmlRegisterNodeDefaultValue(ret);

	mov	esi, esp
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	___xmlRegisterNodeDefaultValue
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@xmlSAX2Sta:

; 2281 :     } else {

	jmp	$LN16@xmlSAX2Sta
$LN15@xmlSAX2Sta:

; 2282 : 	if (ctxt->dictNames)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+364], 0
	je	SHORT $LN23@xmlSAX2Sta

; 2283 : 	    ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL,

	push	0
	mov	eax, DWORD PTR _localname$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlNewDocNodeEatName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN24@xmlSAX2Sta
$LN23@xmlSAX2Sta:

; 2284 : 	                               (xmlChar *) localname, NULL);
; 2285 : 	else if (lname == NULL)

	cmp	DWORD PTR _lname$[ebp], 0
	jne	SHORT $LN25@xmlSAX2Sta

; 2286 : 	    ret = xmlNewDocNode(ctxt->myDoc, NULL, localname, NULL);

	push	0
	mov	eax, DWORD PTR _localname$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlNewDocNode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN24@xmlSAX2Sta
$LN25@xmlSAX2Sta:

; 2287 : 	else
; 2288 : 	    ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL,

	push	0
	mov	eax, DWORD PTR _lname$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlNewDocNodeEatName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax
$LN24@xmlSAX2Sta:

; 2289 : 	                               (xmlChar *) lname, NULL);
; 2290 : 	if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN16@xmlSAX2Sta

; 2291 : 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");

	push	OFFSET ??_C@_0BG@CNBDKEMA@xmlSAX2StartElementNs@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 2292 : 	    return;

	jmp	$LN1@xmlSAX2Sta
$LN16@xmlSAX2Sta:

; 2293 : 	}
; 2294 :     }
; 2295 :     if (ctxt->linenumbers) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+280], 0
	je	SHORT $LN28@xmlSAX2Sta

; 2296 : 	if (ctxt->input != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN28@xmlSAX2Sta

; 2297 : 	    if (ctxt->input->line < 65535)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+28], 65535		; 0000ffffH
	jge	SHORT $LN30@xmlSAX2Sta

; 2298 : 		ret->line = (short) ctxt->input->line;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	dx, WORD PTR [eax+28]
	mov	WORD PTR [ecx+56], dx
	jmp	SHORT $LN28@xmlSAX2Sta
$LN30@xmlSAX2Sta:

; 2299 : 	    else
; 2300 : 	        ret->line = 65535;

	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	WORD PTR [ecx+56], ax
$LN28@xmlSAX2Sta:

; 2301 : 	}
; 2302 :     }
; 2303 : 
; 2304 :     if (parent == NULL) {

	cmp	DWORD PTR _parent$[ebp], 0
	jne	SHORT $LN32@xmlSAX2Sta

; 2305 :         xmlAddChild((xmlNodePtr) ctxt->myDoc, (xmlNodePtr) ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlAddChild
	add	esp, 8
$LN32@xmlSAX2Sta:

; 2306 :     }
; 2307 :     /*
; 2308 :      * Build the namespace list
; 2309 :      */
; 2310 :     for (i = 0,j = 0;j < nb_namespaces;j++) {

	mov	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@xmlSAX2Sta
$LN2@xmlSAX2Sta:
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 1
	mov	DWORD PTR _j$[ebp], edx
$LN4@xmlSAX2Sta:
	mov	eax, DWORD PTR _j$[ebp]
	cmp	eax, DWORD PTR _nb_namespaces$[ebp]
	jge	$LN3@xmlSAX2Sta

; 2311 :         pref = namespaces[i++];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _namespaces$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _pref$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 2312 : 	uri = namespaces[i++];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _namespaces$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _uri$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 2313 : 	ns = xmlNewNs(NULL, uri, pref);

	mov	eax, DWORD PTR _pref$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uri$[ebp]
	push	ecx
	push	0
	call	_xmlNewNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ns$[ebp], eax

; 2314 : 	if (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN33@xmlSAX2Sta

; 2315 : 	    if (last == NULL) {

	cmp	DWORD PTR _last$[ebp], 0
	jne	SHORT $LN35@xmlSAX2Sta

; 2316 : 	        ret->nsDef = last = ns;

	mov	edx, DWORD PTR _ns$[ebp]
	mov	DWORD PTR _last$[ebp], edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _last$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 2317 : 	    } else {

	jmp	SHORT $LN36@xmlSAX2Sta
$LN35@xmlSAX2Sta:

; 2318 : 	        last->next = ns;

	mov	edx, DWORD PTR _last$[ebp]
	mov	eax, DWORD PTR _ns$[ebp]
	mov	DWORD PTR [edx], eax

; 2319 : 		last = ns;

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	DWORD PTR _last$[ebp], ecx
$LN36@xmlSAX2Sta:

; 2320 : 	    }
; 2321 : 	    if ((URI != NULL) && (prefix == pref))

	cmp	DWORD PTR _URI$[ebp], 0
	je	SHORT $LN37@xmlSAX2Sta
	mov	edx, DWORD PTR _prefix$[ebp]
	cmp	edx, DWORD PTR _pref$[ebp]
	jne	SHORT $LN37@xmlSAX2Sta

; 2322 : 		ret->ns = ns;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	DWORD PTR [eax+36], ecx
$LN37@xmlSAX2Sta:

; 2323 : 	} else {

	jmp	SHORT $LN34@xmlSAX2Sta
$LN33@xmlSAX2Sta:

; 2324 :             /*
; 2325 :              * any out of memory error would already have been raised
; 2326 :              * but we can't be guaranteed it's the actual error due to the
; 2327 :              * API, best is to skip in this case
; 2328 :              */
; 2329 : 	    continue;

	jmp	$LN2@xmlSAX2Sta
$LN34@xmlSAX2Sta:

; 2330 : 	}
; 2331 : #ifdef LIBXML_VALID_ENABLED
; 2332 : 	if ((!ctxt->html) && ctxt->validate && ctxt->wellFormed &&
; 2333 : 	    ctxt->myDoc && ctxt->myDoc->intSubset) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN38@xmlSAX2Sta
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN38@xmlSAX2Sta
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN38@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN38@xmlSAX2Sta
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN38@xmlSAX2Sta

; 2334 : 	    ctxt->valid &= xmlValidateOneNamespace(&ctxt->vctxt, ctxt->myDoc,

	mov	edx, DWORD PTR _uri$[ebp]
	push	edx
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidateOneNamespace
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN38@xmlSAX2Sta:

; 2335 : 	                                           ret, prefix, ns, uri);
; 2336 : 	}
; 2337 : #endif /* LIBXML_VALID_ENABLED */
; 2338 :     }

	jmp	$LN2@xmlSAX2Sta
$LN3@xmlSAX2Sta:

; 2339 :     ctxt->nodemem = -1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+264], -1

; 2340 : 
; 2341 :     /*
; 2342 :      * We are parsing a new node.
; 2343 :      */
; 2344 :     if (nodePush(ctxt, ret) < 0) {

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_nodePush
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN39@xmlSAX2Sta

; 2345 :         xmlUnlinkNode(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlUnlinkNode
	add	esp, 4

; 2346 :         xmlFreeNode(ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlFreeNode
	add	esp, 4

; 2347 :         return;

	jmp	$LN1@xmlSAX2Sta
$LN39@xmlSAX2Sta:

; 2348 :     }
; 2349 : 
; 2350 :     /*
; 2351 :      * Link the child element
; 2352 :      */
; 2353 :     if (parent != NULL) {

	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN40@xmlSAX2Sta

; 2354 :         if (parent->type == XML_ELEMENT_NODE) {

	mov	edx, DWORD PTR _parent$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN41@xmlSAX2Sta

; 2355 : 	    xmlAddChild(parent, ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parent$[ebp]
	push	ecx
	call	_xmlAddChild
	add	esp, 8

; 2356 : 	} else {

	jmp	SHORT $LN40@xmlSAX2Sta
$LN41@xmlSAX2Sta:

; 2357 : 	    xmlAddSibling(parent, ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	call	_xmlAddSibling
	add	esp, 8
$LN40@xmlSAX2Sta:

; 2358 : 	}
; 2359 :     }
; 2360 : 
; 2361 :     /*
; 2362 :      * Insert the defaulted attributes from the DTD only if requested:
; 2363 :      */
; 2364 :     if ((nb_defaulted != 0) &&

	cmp	DWORD PTR _nb_defaulted$[ebp], 0
	je	SHORT $LN43@xmlSAX2Sta
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	and	edx, 4
	jne	SHORT $LN43@xmlSAX2Sta

; 2365 :         ((ctxt->loadsubset & XML_COMPLETE_ATTRS) == 0))
; 2366 : 	nb_attributes -= nb_defaulted;

	mov	eax, DWORD PTR _nb_attributes$[ebp]
	sub	eax, DWORD PTR _nb_defaulted$[ebp]
	mov	DWORD PTR _nb_attributes$[ebp], eax
$LN43@xmlSAX2Sta:

; 2367 : 
; 2368 :     /*
; 2369 :      * Search the namespace if it wasn't already found
; 2370 :      * Note that, if prefix is NULL, this searches for the default Ns
; 2371 :      */
; 2372 :     if ((URI != NULL) && (ret->ns == NULL)) {

	cmp	DWORD PTR _URI$[ebp], 0
	je	$LN44@xmlSAX2Sta
	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	$LN44@xmlSAX2Sta

; 2373 :         ret->ns = xmlSearchNs(ctxt->myDoc, parent, prefix);

	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 2374 : 	if ((ret->ns == NULL) && (xmlStrEqual(prefix, BAD_CAST "xml"))) {

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN45@xmlSAX2Sta
	push	OFFSET ??_C@_03PJHHNEEI@xml@
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN45@xmlSAX2Sta

; 2375 : 	    ret->ns = xmlSearchNs(ctxt->myDoc, ret, prefix);

	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+36], eax
$LN45@xmlSAX2Sta:

; 2376 : 	}
; 2377 : 	if (ret->ns == NULL) {

	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN44@xmlSAX2Sta

; 2378 : 	    ns = xmlNewNs(ret, NULL, prefix);

	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlNewNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ns$[ebp], eax

; 2379 : 	    if (ns == NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	jne	SHORT $LN47@xmlSAX2Sta

; 2380 : 
; 2381 : 	        xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElementNs");

	push	OFFSET ??_C@_0BG@CNBDKEMA@xmlSAX2StartElementNs@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 2382 : 		return;

	jmp	$LN1@xmlSAX2Sta
$LN47@xmlSAX2Sta:

; 2383 : 	    }
; 2384 :             if (prefix != NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN48@xmlSAX2Sta

; 2385 :                 xmlNsWarnMsg(ctxt, XML_NS_ERR_UNDEFINED_NAMESPACE,

	push	0
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CD@HMPDFDML@Namespace?5prefix?5?$CFs?5was?5not?5fou@
	push	201					; 000000c9H
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlNsWarnMsg
	add	esp, 20					; 00000014H
	jmp	SHORT $LN44@xmlSAX2Sta
$LN48@xmlSAX2Sta:

; 2386 :                              "Namespace prefix %s was not found\n",
; 2387 :                              prefix, NULL);
; 2388 :             else
; 2389 :                 xmlNsWarnMsg(ctxt, XML_NS_ERR_UNDEFINED_NAMESPACE,

	push	0
	push	0
	push	OFFSET ??_C@_0CI@JKKHNIFK@Namespace?5default?5prefix?5was?5no@
	push	201					; 000000c9H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlNsWarnMsg
	add	esp, 20					; 00000014H
$LN44@xmlSAX2Sta:

; 2390 :                              "Namespace default prefix was not found\n",
; 2391 :                              NULL, NULL);
; 2392 : 	}
; 2393 :     }
; 2394 : 
; 2395 :     /*
; 2396 :      * process all the other attributes
; 2397 :      */
; 2398 :     if (nb_attributes > 0) {

	cmp	DWORD PTR _nb_attributes$[ebp], 0
	jle	$LN50@xmlSAX2Sta

; 2399 :         for (j = 0,i = 0;i < nb_attributes;i++,j+=5) {

	mov	DWORD PTR _j$[ebp], 0
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@xmlSAX2Sta
$LN5@xmlSAX2Sta:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _j$[ebp]
	add	edx, 5
	mov	DWORD PTR _j$[ebp], edx
$LN7@xmlSAX2Sta:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _nb_attributes$[ebp]
	jge	$LN50@xmlSAX2Sta

; 2400 : 	    /*
; 2401 : 	     * Handle the rare case of an undefined atribute prefix
; 2402 : 	     */
; 2403 : 	    if ((attributes[j+1] != NULL) && (attributes[j+2] == NULL)) {

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _attributes$[ebp]
	cmp	DWORD PTR [edx+ecx*4+4], 0
	je	$LN51@xmlSAX2Sta
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _attributes$[ebp]
	cmp	DWORD PTR [ecx+eax*4+8], 0
	jne	$LN51@xmlSAX2Sta

; 2404 : 		if (ctxt->dictNames) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+364], 0
	je	SHORT $LN52@xmlSAX2Sta

; 2405 : 		    const xmlChar *fullname;
; 2406 : 
; 2407 : 		    fullname = xmlDictQLookup(ctxt->dict, attributes[j+1],

	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _attributes$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	mov	eax, DWORD PTR _j$[ebp]
	mov	ecx, DWORD PTR _attributes$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	push	ecx
	call	_xmlDictQLookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fullname$2[ebp], eax

; 2408 : 		                              attributes[j]);
; 2409 : 		    if (fullname != NULL) {

	cmp	DWORD PTR _fullname$2[ebp], 0
	je	SHORT $LN54@xmlSAX2Sta

; 2410 : 			xmlSAX2AttributeNs(ctxt, fullname, NULL,

	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _attributes$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+16]
	push	ecx
	mov	edx, DWORD PTR _j$[ebp]
	mov	eax, DWORD PTR _attributes$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+12]
	push	ecx
	push	0
	mov	edx, DWORD PTR _fullname$2[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2AttributeNs
	add	esp, 20					; 00000014H

; 2411 : 			                   attributes[j+3], attributes[j+4]);
; 2412 : 		        continue;

	jmp	$LN5@xmlSAX2Sta
$LN54@xmlSAX2Sta:

; 2413 : 		    }
; 2414 : 		} else {

	jmp	SHORT $LN51@xmlSAX2Sta
$LN52@xmlSAX2Sta:

; 2415 : 		    lname = xmlBuildQName(attributes[j], attributes[j+1],

	push	0
	push	0
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _attributes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _attributes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _lname$[ebp], eax

; 2416 : 		                          NULL, 0);
; 2417 : 		    if (lname != NULL) {

	cmp	DWORD PTR _lname$[ebp], 0
	je	SHORT $LN51@xmlSAX2Sta

; 2418 : 			xmlSAX2AttributeNs(ctxt, lname, NULL,

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _attributes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+16]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _attributes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+12]
	push	eax
	push	0
	mov	ecx, DWORD PTR _lname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSAX2AttributeNs
	add	esp, 20					; 00000014H

; 2419 : 			                   attributes[j+3], attributes[j+4]);
; 2420 : 			xmlFree(lname);

	mov	esi, esp
	mov	eax, DWORD PTR _lname$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2421 : 		        continue;

	jmp	$LN5@xmlSAX2Sta
$LN51@xmlSAX2Sta:

; 2422 : 		    }
; 2423 : 		}
; 2424 : 	    }
; 2425 : 	    xmlSAX2AttributeNs(ctxt, attributes[j], attributes[j+1],

	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _attributes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+16]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _attributes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+12]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _attributes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	mov	ecx, DWORD PTR _j$[ebp]
	mov	edx, DWORD PTR _attributes$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2AttributeNs
	add	esp, 20					; 00000014H

; 2426 : 			       attributes[j+3], attributes[j+4]);
; 2427 : 	}

	jmp	$LN5@xmlSAX2Sta
$LN50@xmlSAX2Sta:

; 2428 :     }
; 2429 : 
; 2430 : #ifdef LIBXML_VALID_ENABLED
; 2431 :     /*
; 2432 :      * If it's the Document root, finish the DTD validation and
; 2433 :      * check the document root element for validity
; 2434 :      */
; 2435 :     if ((ctxt->validate) && (ctxt->vctxt.finishDtd == XML_CTXT_FINISH_DTD_0)) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN1@xmlSAX2Sta
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+136], -1412623820	; abcd1234H
	jne	SHORT $LN1@xmlSAX2Sta

; 2436 : 	int chk;
; 2437 : 
; 2438 : 	chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_xmlValidateDtdFinal
	add	esp, 8
	mov	DWORD PTR _chk$1[ebp], eax

; 2439 : 	if (chk <= 0)

	cmp	DWORD PTR _chk$1[ebp], 0
	jg	SHORT $LN57@xmlSAX2Sta

; 2440 : 	    ctxt->valid = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], 0
$LN57@xmlSAX2Sta:

; 2441 : 	if (chk < 0)

	cmp	DWORD PTR _chk$1[ebp], 0
	jge	SHORT $LN58@xmlSAX2Sta

; 2442 : 	    ctxt->wellFormed = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN58@xmlSAX2Sta:

; 2443 : 	ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidateRoot
	add	esp, 8
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax

; 2444 : 	ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+136], -1412623819	; abcd1235H
$LN1@xmlSAX2Sta:

; 2445 :     }
; 2446 : #endif /* LIBXML_VALID_ENABLED */
; 2447 : }

	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2StartElementNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2EndElement
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlSAX2EndElement PROC					; COMDAT

; 1804 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 1805 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 1806 :     xmlNodePtr cur;
; 1807 : 
; 1808 :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2End
	jmp	$LN1@xmlSAX2End
$LN2@xmlSAX2End:

; 1809 :     cur = ctxt->node;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _cur$[ebp], edx

; 1810 : #ifdef DEBUG_SAX
; 1811 :     if (name == NULL)
; 1812 :         xmlGenericError(xmlGenericErrorContext, "SAX.xmlSAX2EndElement(NULL)\n");
; 1813 :     else
; 1814 : 	xmlGenericError(xmlGenericErrorContext, "SAX.xmlSAX2EndElement(%s)\n", name);
; 1815 : #endif
; 1816 : 
; 1817 :     /* Capture end position and add node */
; 1818 :     if (cur != NULL && ctxt->record_info) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlSAX2End
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN3@xmlSAX2End

; 1819 :       ctxt->nodeInfo->end_pos = ctxt->input->cur - ctxt->input->base;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx+16]
	sub	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+448]
	mov	DWORD PTR [ecx+12], edx

; 1820 :       ctxt->nodeInfo->end_line = ctxt->input->line;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+448]
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+16], eax

; 1821 :       ctxt->nodeInfo->node = cur;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+448]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], eax

; 1822 :       xmlParserAddNodeInfo(ctxt, ctxt->nodeInfo);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+448]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlParserAddNodeInfo
	add	esp, 8
$LN3@xmlSAX2End:

; 1823 :     }
; 1824 :     ctxt->nodemem = -1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+264], -1

; 1825 : 
; 1826 : #ifdef LIBXML_VALID_ENABLED
; 1827 :     if (ctxt->validate && ctxt->wellFormed &&
; 1828 :         ctxt->myDoc && ctxt->myDoc->intSubset)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN4@xmlSAX2End
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@xmlSAX2End
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN4@xmlSAX2End
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN4@xmlSAX2End

; 1829 :         ctxt->valid &= xmlValidateOneElement(&ctxt->vctxt, ctxt->myDoc,

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_xmlValidateOneElement
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], eax
$LN4@xmlSAX2End:

; 1830 : 					     cur);
; 1831 : #endif /* LIBXML_VALID_ENABLED */
; 1832 : 
; 1833 : 
; 1834 :     /*
; 1835 :      * end of parsing of this node.
; 1836 :      */
; 1837 : #ifdef DEBUG_SAX_TREE
; 1838 :     xmlGenericError(xmlGenericErrorContext, "popping(%s)\n", cur->name);
; 1839 : #endif
; 1840 :     nodePop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_nodePop
	add	esp, 4
$LN1@xmlSAX2End:

; 1841 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2EndElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2StartElement
_TEXT	SEGMENT
_chk$1 = -48						; size = 4
_i$ = -44						; size = 4
_value$ = -40						; size = 4
_att$ = -36						; size = 4
_prefix$ = -28						; size = 4
_name$ = -20						; size = 4
_ns$ = -16						; size = 4
_parent$ = -12						; size = 4
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_fullname$ = 12						; size = 4
_atts$ = 16						; size = 4
_xmlSAX2StartElement PROC				; COMDAT

; 1593 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 1594 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 1595 :     xmlNodePtr ret;
; 1596 :     xmlNodePtr parent;
; 1597 :     xmlNsPtr ns;
; 1598 :     xmlChar *name;
; 1599 :     xmlChar *prefix;
; 1600 :     const xmlChar *att;
; 1601 :     const xmlChar *value;
; 1602 :     int i;
; 1603 : 
; 1604 :     if ((ctx == NULL) || (fullname == NULL) || (ctxt->myDoc == NULL)) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN9@xmlSAX2Sta
	cmp	DWORD PTR _fullname$[ebp], 0
	je	SHORT $LN9@xmlSAX2Sta
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN8@xmlSAX2Sta
$LN9@xmlSAX2Sta:
	jmp	$LN1@xmlSAX2Sta
$LN8@xmlSAX2Sta:

; 1605 :     parent = ctxt->node;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _parent$[ebp], eax

; 1606 : #ifdef DEBUG_SAX
; 1607 :     xmlGenericError(xmlGenericErrorContext,
; 1608 : 	    "SAX.xmlSAX2StartElement(%s)\n", fullname);
; 1609 : #endif
; 1610 : 
; 1611 :     /*
; 1612 :      * First check on validity:
; 1613 :      */
; 1614 :     if (ctxt->validate && (ctxt->myDoc->extSubset == NULL) &&

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN10@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN10@xmlSAX2Sta
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN11@xmlSAX2Sta
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN10@xmlSAX2Sta
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [edx+40], 0
	jne	SHORT $LN10@xmlSAX2Sta
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN10@xmlSAX2Sta
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN10@xmlSAX2Sta
$LN11@xmlSAX2Sta:

; 1615 :         ((ctxt->myDoc->intSubset == NULL) ||
; 1616 : 	 ((ctxt->myDoc->intSubset->notations == NULL) &&
; 1617 : 	  (ctxt->myDoc->intSubset->elements == NULL) &&
; 1618 : 	  (ctxt->myDoc->intSubset->attributes == NULL) &&
; 1619 : 	  (ctxt->myDoc->intSubset->entities == NULL)))) {
; 1620 : 	xmlErrValid(ctxt, XML_ERR_NO_DTD,

	push	0
	push	0
	push	OFFSET ??_C@_0CC@LPGBEFAE@Validation?5failed?3?5no?5DTD?5found@
	push	94					; 0000005eH
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValid
	add	esp, 20					; 00000014H

; 1621 : 	  "Validation failed: no DTD found !", NULL, NULL);
; 1622 : 	ctxt->validate = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+104], 0
$LN10@xmlSAX2Sta:

; 1623 :     }
; 1624 : 
; 1625 : 
; 1626 :     /*
; 1627 :      * Split the full name into a namespace prefix and the tag name
; 1628 :      */
; 1629 :     name = xmlSplitQName(ctxt, fullname, &prefix);

	lea	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _fullname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSplitQName
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _name$[ebp], eax

; 1630 : 
; 1631 : 
; 1632 :     /*
; 1633 :      * Note : the namespace resolution is deferred until the end of the
; 1634 :      *        attributes parsing, since local namespace can be defined as
; 1635 :      *        an attribute at this level.
; 1636 :      */
; 1637 :     ret = xmlNewDocNodeEatName(ctxt->myDoc, NULL, name, NULL);

	push	0
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlNewDocNodeEatName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 1638 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN12@xmlSAX2Sta

; 1639 :         if (prefix != NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN13@xmlSAX2Sta

; 1640 : 	    xmlFree(prefix);

	mov	esi, esp
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlSAX2Sta:

; 1641 : 	xmlSAX2ErrMemory(ctxt, "xmlSAX2StartElement");

	push	OFFSET ??_C@_0BE@NLCCMPDP@xmlSAX2StartElement@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 1642 :         return;

	jmp	$LN1@xmlSAX2Sta
$LN12@xmlSAX2Sta:

; 1643 :     }
; 1644 :     if (ctxt->myDoc->children == NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN14@xmlSAX2Sta

; 1645 : #ifdef DEBUG_SAX_TREE
; 1646 : 	xmlGenericError(xmlGenericErrorContext, "Setting %s as root\n", name);
; 1647 : #endif
; 1648 :         xmlAddChild((xmlNodePtr) ctxt->myDoc, (xmlNodePtr) ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlAddChild
	add	esp, 8
	jmp	SHORT $LN15@xmlSAX2Sta
$LN14@xmlSAX2Sta:

; 1649 :     } else if (parent == NULL) {

	cmp	DWORD PTR _parent$[ebp], 0
	jne	SHORT $LN15@xmlSAX2Sta

; 1650 :         parent = ctxt->myDoc->children;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _parent$[ebp], edx
$LN15@xmlSAX2Sta:

; 1651 :     }
; 1652 :     ctxt->nodemem = -1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+264], -1

; 1653 :     if (ctxt->linenumbers) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+280], 0
	je	SHORT $LN17@xmlSAX2Sta

; 1654 : 	if (ctxt->input != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN17@xmlSAX2Sta

; 1655 : 	    if (ctxt->input->line < 65535)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+28], 65535		; 0000ffffH
	jge	SHORT $LN19@xmlSAX2Sta

; 1656 : 		ret->line = (short) ctxt->input->line;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	dx, WORD PTR [eax+28]
	mov	WORD PTR [ecx+56], dx
	jmp	SHORT $LN17@xmlSAX2Sta
$LN19@xmlSAX2Sta:

; 1657 : 	    else
; 1658 : 	        ret->line = 65535;

	mov	eax, 65535				; 0000ffffH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	WORD PTR [ecx+56], ax
$LN17@xmlSAX2Sta:

; 1659 : 	}
; 1660 :     }
; 1661 : 
; 1662 :     /*
; 1663 :      * We are parsing a new node.
; 1664 :      */
; 1665 : #ifdef DEBUG_SAX_TREE
; 1666 :     xmlGenericError(xmlGenericErrorContext, "pushing(%s)\n", name);
; 1667 : #endif
; 1668 :     if (nodePush(ctxt, ret) < 0) {

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_nodePush
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN21@xmlSAX2Sta

; 1669 :         xmlUnlinkNode(ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlUnlinkNode
	add	esp, 4

; 1670 :         xmlFreeNode(ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlFreeNode
	add	esp, 4

; 1671 :         return;

	jmp	$LN1@xmlSAX2Sta
$LN21@xmlSAX2Sta:

; 1672 :     }
; 1673 : 
; 1674 :     /*
; 1675 :      * Link the child element
; 1676 :      */
; 1677 :     if (parent != NULL) {

	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN22@xmlSAX2Sta

; 1678 :         if (parent->type == XML_ELEMENT_NODE) {

	mov	eax, DWORD PTR _parent$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN23@xmlSAX2Sta

; 1679 : #ifdef DEBUG_SAX_TREE
; 1680 : 	    xmlGenericError(xmlGenericErrorContext,
; 1681 : 		    "adding child %s to %s\n", name, parent->name);
; 1682 : #endif
; 1683 : 	    xmlAddChild(parent, ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _parent$[ebp]
	push	edx
	call	_xmlAddChild
	add	esp, 8

; 1684 : 	} else {

	jmp	SHORT $LN22@xmlSAX2Sta
$LN23@xmlSAX2Sta:

; 1685 : #ifdef DEBUG_SAX_TREE
; 1686 : 	    xmlGenericError(xmlGenericErrorContext,
; 1687 : 		    "adding sibling %s to ", name);
; 1688 : 	    xmlDebugDumpOneNode(stderr, parent, 0);
; 1689 : #endif
; 1690 : 	    xmlAddSibling(parent, ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _parent$[ebp]
	push	ecx
	call	_xmlAddSibling
	add	esp, 8
$LN22@xmlSAX2Sta:

; 1691 : 	}
; 1692 :     }
; 1693 : 
; 1694 :     /*
; 1695 :      * Insert all the defaulted attributes from the DTD especially namespaces
; 1696 :      */
; 1697 :     if ((!ctxt->html) &&

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+32], 0
	jne	SHORT $LN25@xmlSAX2Sta
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN26@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN25@xmlSAX2Sta
$LN26@xmlSAX2Sta:

; 1698 : 	((ctxt->myDoc->intSubset != NULL) ||
; 1699 : 	 (ctxt->myDoc->extSubset != NULL))) {
; 1700 : 	xmlCheckDefaultedAttributes(ctxt, name, prefix, atts);

	mov	ecx, DWORD PTR _atts$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlCheckDefaultedAttributes
	add	esp, 16					; 00000010H
$LN25@xmlSAX2Sta:

; 1701 :     }
; 1702 : 
; 1703 :     /*
; 1704 :      * process all the attributes whose name start with "xmlns"
; 1705 :      */
; 1706 :     if (atts != NULL) {

	cmp	DWORD PTR _atts$[ebp], 0
	je	$LN27@xmlSAX2Sta

; 1707 :         i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 1708 : 	att = atts[i++];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _atts$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _att$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1709 : 	value = atts[i++];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _atts$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _value$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1710 : 	if (!ctxt->html) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	jne	$LN27@xmlSAX2Sta
$LN2@xmlSAX2Sta:

; 1711 : 	    while ((att != NULL) && (value != NULL)) {

	cmp	DWORD PTR _att$[ebp], 0
	je	$LN27@xmlSAX2Sta
	cmp	DWORD PTR _value$[ebp], 0
	je	$LN27@xmlSAX2Sta

; 1712 : 		if ((att[0] == 'x') && (att[1] == 'm') && (att[2] == 'l') &&
; 1713 : 		    (att[3] == 'n') && (att[4] == 's'))

	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _att$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 120				; 00000078H
	jne	SHORT $LN29@xmlSAX2Sta
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR _att$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 109				; 0000006dH
	jne	SHORT $LN29@xmlSAX2Sta
	mov	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR _att$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 108				; 0000006cH
	jne	SHORT $LN29@xmlSAX2Sta
	mov	eax, 1
	imul	ecx, eax, 3
	mov	edx, DWORD PTR _att$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 110				; 0000006eH
	jne	SHORT $LN29@xmlSAX2Sta
	mov	ecx, 1
	shl	ecx, 2
	mov	edx, DWORD PTR _att$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 115				; 00000073H
	jne	SHORT $LN29@xmlSAX2Sta

; 1714 : 		    xmlSAX2AttributeInternal(ctxt, att, value, prefix);

	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _att$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2AttributeInternal
	add	esp, 16					; 00000010H
$LN29@xmlSAX2Sta:

; 1715 : 
; 1716 : 		att = atts[i++];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _atts$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _att$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1717 : 		value = atts[i++];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _atts$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _value$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1718 : 	    }

	jmp	$LN2@xmlSAX2Sta
$LN27@xmlSAX2Sta:

; 1719 : 	}
; 1720 :     }
; 1721 : 
; 1722 :     /*
; 1723 :      * Search the namespace, note that since the attributes have been
; 1724 :      * processed, the local namespaces are available.
; 1725 :      */
; 1726 :     ns = xmlSearchNs(ctxt->myDoc, ret, prefix);

	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ns$[ebp], eax

; 1727 :     if ((ns == NULL) && (parent != NULL))

	cmp	DWORD PTR _ns$[ebp], 0
	jne	SHORT $LN30@xmlSAX2Sta
	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN30@xmlSAX2Sta

; 1728 : 	ns = xmlSearchNs(ctxt->myDoc, parent, prefix);

	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ns$[ebp], eax
$LN30@xmlSAX2Sta:

; 1729 :     if ((prefix != NULL) && (ns == NULL)) {

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN31@xmlSAX2Sta
	cmp	DWORD PTR _ns$[ebp], 0
	jne	SHORT $LN31@xmlSAX2Sta

; 1730 : 	ns = xmlNewNs(ret, NULL, prefix);

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlNewNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ns$[ebp], eax

; 1731 : 	xmlNsWarnMsg(ctxt, XML_NS_ERR_UNDEFINED_NAMESPACE,

	push	0
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	push	OFFSET ??_C@_0CE@HAGAOPBB@Namespace?5prefix?5?$CFs?5is?5not?5defi@
	push	201					; 000000c9H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlNsWarnMsg
	add	esp, 20					; 00000014H
$LN31@xmlSAX2Sta:

; 1732 : 		     "Namespace prefix %s is not defined\n",
; 1733 : 		     prefix, NULL);
; 1734 :     }
; 1735 : 
; 1736 :     /*
; 1737 :      * set the namespace node, making sure that if the default namspace
; 1738 :      * is unbound on a parent we simply kee it NULL
; 1739 :      */
; 1740 :     if ((ns != NULL) && (ns->href != NULL) &&

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN32@xmlSAX2Sta
	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN32@xmlSAX2Sta
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	movzx	eax, BYTE PTR [edx+eax]
	test	eax, eax
	jne	SHORT $LN33@xmlSAX2Sta
	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN32@xmlSAX2Sta
$LN33@xmlSAX2Sta:

; 1741 : 	((ns->href[0] != 0) || (ns->prefix != NULL)))
; 1742 : 	xmlSetNs(ret, ns);

	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlSetNs
	add	esp, 8
$LN32@xmlSAX2Sta:

; 1743 : 
; 1744 :     /*
; 1745 :      * process all the other attributes
; 1746 :      */
; 1747 :     if (atts != NULL) {

	cmp	DWORD PTR _atts$[ebp], 0
	je	$LN34@xmlSAX2Sta

; 1748 :         i = 0;

	mov	DWORD PTR _i$[ebp], 0

; 1749 : 	att = atts[i++];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _atts$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _att$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 1750 : 	value = atts[i++];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _atts$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _value$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1751 : 	if (ctxt->html) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN6@xmlSAX2Sta
$LN4@xmlSAX2Sta:

; 1752 : 	    while (att != NULL) {

	cmp	DWORD PTR _att$[ebp], 0
	je	SHORT $LN5@xmlSAX2Sta

; 1753 : 		xmlSAX2AttributeInternal(ctxt, att, value, NULL);

	push	0
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _att$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2AttributeInternal
	add	esp, 16					; 00000010H

; 1754 : 		att = atts[i++];

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _atts$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _att$[ebp], eax
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx

; 1755 : 		value = atts[i++];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _atts$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _value$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1756 : 	    }

	jmp	SHORT $LN4@xmlSAX2Sta
$LN5@xmlSAX2Sta:

; 1757 : 	} else {

	jmp	$LN34@xmlSAX2Sta
$LN6@xmlSAX2Sta:

; 1758 : 	    while ((att != NULL) && (value != NULL)) {

	cmp	DWORD PTR _att$[ebp], 0
	je	$LN34@xmlSAX2Sta
	cmp	DWORD PTR _value$[ebp], 0
	je	$LN34@xmlSAX2Sta

; 1759 : 		if ((att[0] != 'x') || (att[1] != 'm') || (att[2] != 'l') ||
; 1760 : 		    (att[3] != 'n') || (att[4] != 's'))

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _att$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 120				; 00000078H
	jne	SHORT $LN38@xmlSAX2Sta
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _att$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 109				; 0000006dH
	jne	SHORT $LN38@xmlSAX2Sta
	mov	ecx, 1
	shl	ecx, 1
	mov	edx, DWORD PTR _att$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN38@xmlSAX2Sta
	mov	ecx, 1
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _att$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN38@xmlSAX2Sta
	mov	edx, 1
	shl	edx, 2
	mov	eax, DWORD PTR _att$[ebp]
	movzx	ecx, BYTE PTR [eax+edx]
	cmp	ecx, 115				; 00000073H
	je	SHORT $LN37@xmlSAX2Sta
$LN38@xmlSAX2Sta:

; 1761 : 		    xmlSAX2AttributeInternal(ctxt, att, value, NULL);

	push	0
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _att$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2AttributeInternal
	add	esp, 16					; 00000010H
$LN37@xmlSAX2Sta:

; 1762 : 
; 1763 : 		/*
; 1764 : 		 * Next ones
; 1765 : 		 */
; 1766 : 		att = atts[i++];

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _atts$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _att$[ebp], ecx
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx

; 1767 : 		value = atts[i++];

	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _atts$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _value$[ebp], edx
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax

; 1768 : 	    }

	jmp	$LN6@xmlSAX2Sta
$LN34@xmlSAX2Sta:

; 1769 : 	}
; 1770 :     }
; 1771 : 
; 1772 : #ifdef LIBXML_VALID_ENABLED
; 1773 :     /*
; 1774 :      * If it's the Document root, finish the DTD validation and
; 1775 :      * check the document root element for validity
; 1776 :      */
; 1777 :     if ((ctxt->validate) && (ctxt->vctxt.finishDtd == XML_CTXT_FINISH_DTD_0)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN39@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+136], -1412623820	; abcd1234H
	jne	SHORT $LN39@xmlSAX2Sta

; 1778 : 	int chk;
; 1779 : 
; 1780 : 	chk = xmlValidateDtdFinal(&ctxt->vctxt, ctxt->myDoc);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidateDtdFinal
	add	esp, 8
	mov	DWORD PTR _chk$1[ebp], eax

; 1781 : 	if (chk <= 0)

	cmp	DWORD PTR _chk$1[ebp], 0
	jg	SHORT $LN40@xmlSAX2Sta

; 1782 : 	    ctxt->valid = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+100], 0
$LN40@xmlSAX2Sta:

; 1783 : 	if (chk < 0)

	cmp	DWORD PTR _chk$1[ebp], 0
	jge	SHORT $LN41@xmlSAX2Sta

; 1784 : 	    ctxt->wellFormed = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN41@xmlSAX2Sta:

; 1785 : 	ctxt->valid &= xmlValidateRoot(&ctxt->vctxt, ctxt->myDoc);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_xmlValidateRoot
	add	esp, 8
	mov	edx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], eax

; 1786 : 	ctxt->vctxt.finishDtd = XML_CTXT_FINISH_DTD_1;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+136], -1412623819	; abcd1235H
$LN39@xmlSAX2Sta:

; 1787 :     }
; 1788 : #endif /* LIBXML_VALID_ENABLED */
; 1789 : 
; 1790 :     if (prefix != NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN1@xmlSAX2Sta

; 1791 : 	xmlFree(prefix);

	mov	esi, esp
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlSAX2Sta:

; 1792 : 
; 1793 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@xmlSAX2Sta
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN46@xmlSAX2Sta:
	DD	1
	DD	$LN45@xmlSAX2Sta
$LN45@xmlSAX2Sta:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN44@xmlSAX2Sta
$LN44@xmlSAX2Sta:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlSAX2StartElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2EndDocument
_TEXT	SEGMENT
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_xmlSAX2EndDocument PROC				; COMDAT

; 1049 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 1050 :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 1051 : #ifdef DEBUG_SAX
; 1052 :     xmlGenericError(xmlGenericErrorContext,
; 1053 : 	    "SAX.xmlSAX2EndDocument()\n");
; 1054 : #endif
; 1055 :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2End
	jmp	$LN1@xmlSAX2End
$LN2@xmlSAX2End:

; 1056 : #ifdef LIBXML_VALID_ENABLED
; 1057 :     if (ctxt->validate && ctxt->wellFormed &&
; 1058 :         ctxt->myDoc && ctxt->myDoc->intSubset)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN3@xmlSAX2End
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN3@xmlSAX2End
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@xmlSAX2End
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN3@xmlSAX2End

; 1059 : 	ctxt->valid &= xmlValidateDocumentFinal(&ctxt->vctxt, ctxt->myDoc);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidateDocumentFinal
	add	esp, 8
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN3@xmlSAX2End:

; 1060 : #endif /* LIBXML_VALID_ENABLED */
; 1061 : 
; 1062 :     /*
; 1063 :      * Grab the encoding if it was added on-the-fly
; 1064 :      */
; 1065 :     if ((ctxt->encoding != NULL) && (ctxt->myDoc != NULL) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN4@xmlSAX2End
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN4@xmlSAX2End
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+60], 0
	jne	SHORT $LN4@xmlSAX2End

; 1066 : 	(ctxt->myDoc->encoding == NULL)) {
; 1067 : 	ctxt->myDoc->encoding = ctxt->encoding;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+60], ecx

; 1068 : 	ctxt->encoding = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+24], 0
$LN4@xmlSAX2End:

; 1069 :     }
; 1070 :     if ((ctxt->inputTab != NULL) &&
; 1071 :         (ctxt->inputNr > 0) && (ctxt->inputTab[0] != NULL) &&
; 1072 :         (ctxt->inputTab[0]->encoding != NULL) && (ctxt->myDoc != NULL) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN5@xmlSAX2End
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jle	SHORT $LN5@xmlSAX2End
	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	cmp	DWORD PTR [eax+edx], 0
	je	SHORT $LN5@xmlSAX2End
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	ecx, DWORD PTR [eax+ecx]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN5@xmlSAX2End
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN5@xmlSAX2End
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+60], 0
	jne	SHORT $LN5@xmlSAX2End

; 1073 : 	(ctxt->myDoc->encoding == NULL)) {
; 1074 : 	ctxt->myDoc->encoding = xmlStrdup(ctxt->inputTab[0]->encoding);

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+60], eax
$LN5@xmlSAX2End:

; 1075 :     }
; 1076 :     if ((ctxt->charset != XML_CHAR_ENCODING_NONE) && (ctxt->myDoc != NULL) &&

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+256], 0
	je	SHORT $LN1@xmlSAX2End
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN1@xmlSAX2End
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+76], 0
	jne	SHORT $LN1@xmlSAX2End

; 1077 : 	(ctxt->myDoc->charset == XML_CHAR_ENCODING_NONE)) {
; 1078 : 	ctxt->myDoc->charset = ctxt->charset;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+256]
	mov	DWORD PTR [ecx+76], eax
$LN1@xmlSAX2End:

; 1079 :     }
; 1080 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2EndDocument ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2StartDocument
_TEXT	SEGMENT
tv83 = -12						; size = 4
_doc$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_xmlSAX2StartDocument PROC				; COMDAT

; 984  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 985  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 986  :     xmlDocPtr doc;
; 987  : 
; 988  :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Sta
	jmp	$LN1@xmlSAX2Sta
$LN2@xmlSAX2Sta:

; 989  : 
; 990  : #ifdef DEBUG_SAX
; 991  :     xmlGenericError(xmlGenericErrorContext,
; 992  : 	    "SAX.xmlSAX2StartDocument()\n");
; 993  : #endif
; 994  :     if (ctxt->html) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN3@xmlSAX2Sta

; 995  : #ifdef LIBXML_HTML_ENABLED
; 996  : 	if (ctxt->myDoc == NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN5@xmlSAX2Sta

; 997  : 	    ctxt->myDoc = htmlNewDocNoDtD(NULL, NULL);

	push	0
	push	0
	call	_htmlNewDocNoDtD
	add	esp, 8
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN5@xmlSAX2Sta:

; 998  : 	if (ctxt->myDoc == NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN6@xmlSAX2Sta

; 999  : 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartDocument");

	push	OFFSET ??_C@_0BF@BOIPPPAK@xmlSAX2StartDocument@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 1000 : 	    return;

	jmp	$LN1@xmlSAX2Sta
$LN6@xmlSAX2Sta:

; 1001 : 	}
; 1002 : 	ctxt->myDoc->properties = XML_DOC_HTML;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+92], 128			; 00000080H

; 1003 : 	ctxt->myDoc->parseFlags = ctxt->options;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+360]
	mov	DWORD PTR [ecx+88], eax

; 1004 : #else
; 1005 :         xmlGenericError(xmlGenericErrorContext,
; 1006 : 		"libxml2 built without HTML support\n");
; 1007 : 	ctxt->errNo = XML_ERR_INTERNAL_ERROR;
; 1008 : 	ctxt->instate = XML_PARSER_EOF;
; 1009 : 	ctxt->disableSAX = 1;
; 1010 : 	return;
; 1011 : #endif
; 1012 :     } else {

	jmp	$LN4@xmlSAX2Sta
$LN3@xmlSAX2Sta:

; 1013 : 	doc = ctxt->myDoc = xmlNewDoc(ctxt->version);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_xmlNewDoc
	add	esp, 4
	mov	DWORD PTR tv83[ebp], eax
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _doc$[ebp], edx

; 1014 : 	if (doc != NULL) {

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN7@xmlSAX2Sta

; 1015 : 	    doc->properties = 0;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [eax+92], 0

; 1016 : 	    if (ctxt->options & XML_PARSE_OLD10)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	and	edx, 131072				; 00020000H
	je	SHORT $LN9@xmlSAX2Sta

; 1017 : 	        doc->properties |= XML_DOC_OLD10;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	or	ecx, 4
	mov	edx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+92], ecx
$LN9@xmlSAX2Sta:

; 1018 : 	    doc->parseFlags = ctxt->options;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	DWORD PTR [eax+88], edx

; 1019 : 	    if (ctxt->encoding != NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN10@xmlSAX2Sta

; 1020 : 		doc->encoding = xmlStrdup(ctxt->encoding);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [ecx+60], eax
	jmp	SHORT $LN11@xmlSAX2Sta
$LN10@xmlSAX2Sta:

; 1021 : 	    else
; 1022 : 		doc->encoding = NULL;

	mov	edx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+60], 0
$LN11@xmlSAX2Sta:

; 1023 : 	    doc->standalone = ctxt->standalone;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+40], edx

; 1024 : 	} else {

	jmp	SHORT $LN8@xmlSAX2Sta
$LN7@xmlSAX2Sta:

; 1025 : 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartDocument");

	push	OFFSET ??_C@_0BF@BOIPPPAK@xmlSAX2StartDocument@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 1026 : 	    return;

	jmp	$LN1@xmlSAX2Sta
$LN8@xmlSAX2Sta:

; 1027 : 	}
; 1028 : 	if ((ctxt->dictNames) && (doc != NULL)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+364], 0
	je	SHORT $LN4@xmlSAX2Sta
	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN4@xmlSAX2Sta

; 1029 : 	    doc->dict = ctxt->dict;

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	mov	DWORD PTR [edx+80], ecx

; 1030 : 	    xmlDictReference(doc->dict);

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	call	_xmlDictReference
	add	esp, 4
$LN4@xmlSAX2Sta:

; 1031 : 	}
; 1032 :     }
; 1033 :     if ((ctxt->myDoc != NULL) && (ctxt->myDoc->URL == NULL) &&
; 1034 : 	(ctxt->input != NULL) && (ctxt->input->filename != NULL)) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN1@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+72], 0
	jne	SHORT $LN1@xmlSAX2Sta
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN1@xmlSAX2Sta
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN1@xmlSAX2Sta

; 1035 : 	ctxt->myDoc->URL = xmlPathToURI((const xmlChar *)ctxt->input->filename);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlPathToURI
	add	esp, 4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+72], eax

; 1036 : 	if (ctxt->myDoc->URL == NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+72], 0
	jne	SHORT $LN1@xmlSAX2Sta

; 1037 : 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2StartDocument");

	push	OFFSET ??_C@_0BF@BOIPPPAK@xmlSAX2StartDocument@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSAX2ErrMemory
	add	esp, 8
$LN1@xmlSAX2Sta:

; 1038 :     }
; 1039 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2StartDocument ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2UnparsedEntityDecl
_TEXT	SEGMENT
_base$1 = -24						; size = 4
_URI$2 = -20						; size = 4
_base$3 = -16						; size = 4
_URI$4 = -12						; size = 4
_ctxt$ = -8						; size = 4
_ent$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_publicId$ = 16						; size = 4
_systemId$ = 20						; size = 4
_notationName$ = 24					; size = 4
_xmlSAX2UnparsedEntityDecl PROC				; COMDAT

; 902  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 903  :     xmlEntityPtr ent;
; 904  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 905  :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Unp
	jmp	$LN1@xmlSAX2Unp
$LN2@xmlSAX2Unp:

; 906  : #ifdef DEBUG_SAX
; 907  :     xmlGenericError(xmlGenericErrorContext,
; 908  : 	    "SAX.xmlSAX2UnparsedEntityDecl(%s, %s, %s, %s)\n",
; 909  :             name, publicId, systemId, notationName);
; 910  : #endif
; 911  :     if (ctxt->inSubset == 1) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+216], 1
	jne	$LN3@xmlSAX2Unp

; 912  : 	ent = xmlAddDocEntity(ctxt->myDoc, name,

	mov	edx, DWORD PTR _notationName$[ebp]
	push	edx
	mov	eax, DWORD PTR _systemId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _publicId$[ebp]
	push	ecx
	push	3
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlAddDocEntity
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ent$[ebp], eax

; 913  : 			XML_EXTERNAL_GENERAL_UNPARSED_ENTITY,
; 914  : 			publicId, systemId, notationName);
; 915  : 	if ((ent == NULL) && (ctxt->pedantic) &&
; 916  : 	    (ctxt->sax != NULL) && (ctxt->sax->warning != NULL))

	cmp	DWORD PTR _ent$[ebp], 0
	jne	SHORT $LN5@xmlSAX2Unp
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+268], 0
	je	SHORT $LN5@xmlSAX2Unp
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@xmlSAX2Unp
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+84], 0
	je	SHORT $LN5@xmlSAX2Unp

; 917  : 	    ctxt->sax->warning(ctxt->userData,

	mov	esi, esp
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0DD@GCBFDMPE@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+84]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlSAX2Unp:

; 918  : 	     "Entity(%s) already defined in the internal subset\n", name);
; 919  : 	if ((ent != NULL) && (ent->URI == NULL) && (systemId != NULL)) {

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN6@xmlSAX2Unp
	mov	eax, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN6@xmlSAX2Unp
	cmp	DWORD PTR _systemId$[ebp], 0
	je	SHORT $LN6@xmlSAX2Unp

; 920  : 	    xmlChar *URI;
; 921  : 	    const char *base = NULL;

	mov	DWORD PTR _base$3[ebp], 0

; 922  : 
; 923  : 	    if (ctxt->input != NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@xmlSAX2Unp

; 924  : 		base = ctxt->input->filename;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _base$3[ebp], ecx
$LN7@xmlSAX2Unp:

; 925  : 	    if (base == NULL)

	cmp	DWORD PTR _base$3[ebp], 0
	jne	SHORT $LN8@xmlSAX2Unp

; 926  : 		base = ctxt->directory;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+180]
	mov	DWORD PTR _base$3[ebp], eax
$LN8@xmlSAX2Unp:

; 927  : 
; 928  : 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);

	mov	ecx, DWORD PTR _base$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _systemId$[ebp]
	push	edx
	call	_xmlBuildURI
	add	esp, 8
	mov	DWORD PTR _URI$4[ebp], eax

; 929  : 	    ent->URI = URI;

	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR _URI$4[ebp]
	mov	DWORD PTR [eax+64], ecx
$LN6@xmlSAX2Unp:

; 930  : 	}

	jmp	$LN1@xmlSAX2Unp
$LN3@xmlSAX2Unp:

; 931  :     } else if (ctxt->inSubset == 2) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+216], 2
	jne	$LN9@xmlSAX2Unp

; 932  : 	ent = xmlAddDtdEntity(ctxt->myDoc, name,

	mov	eax, DWORD PTR _notationName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _systemId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _publicId$[ebp]
	push	edx
	push	3
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlAddDtdEntity
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ent$[ebp], eax

; 933  : 			XML_EXTERNAL_GENERAL_UNPARSED_ENTITY,
; 934  : 			publicId, systemId, notationName);
; 935  : 	if ((ent == NULL) && (ctxt->pedantic) &&
; 936  : 	    (ctxt->sax != NULL) && (ctxt->sax->warning != NULL))

	cmp	DWORD PTR _ent$[ebp], 0
	jne	SHORT $LN11@xmlSAX2Unp
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+268], 0
	je	SHORT $LN11@xmlSAX2Unp
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN11@xmlSAX2Unp
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	DWORD PTR [eax+84], 0
	je	SHORT $LN11@xmlSAX2Unp

; 937  : 	    ctxt->sax->warning(ctxt->userData,

	mov	esi, esp
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DD@ECLLADNP@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlSAX2Unp:

; 938  : 	     "Entity(%s) already defined in the external subset\n", name);
; 939  : 	if ((ent != NULL) && (ent->URI == NULL) && (systemId != NULL)) {

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN12@xmlSAX2Unp
	mov	ecx, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN12@xmlSAX2Unp
	cmp	DWORD PTR _systemId$[ebp], 0
	je	SHORT $LN12@xmlSAX2Unp

; 940  : 	    xmlChar *URI;
; 941  : 	    const char *base = NULL;

	mov	DWORD PTR _base$1[ebp], 0

; 942  : 
; 943  : 	    if (ctxt->input != NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN13@xmlSAX2Unp

; 944  : 		base = ctxt->input->filename;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _base$1[ebp], edx
$LN13@xmlSAX2Unp:

; 945  : 	    if (base == NULL)

	cmp	DWORD PTR _base$1[ebp], 0
	jne	SHORT $LN14@xmlSAX2Unp

; 946  : 		base = ctxt->directory;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	mov	DWORD PTR _base$1[ebp], ecx
$LN14@xmlSAX2Unp:

; 947  : 
; 948  : 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);

	mov	edx, DWORD PTR _base$1[ebp]
	push	edx
	mov	eax, DWORD PTR _systemId$[ebp]
	push	eax
	call	_xmlBuildURI
	add	esp, 8
	mov	DWORD PTR _URI$2[ebp], eax

; 949  : 	    ent->URI = URI;

	mov	ecx, DWORD PTR _ent$[ebp]
	mov	edx, DWORD PTR _URI$2[ebp]
	mov	DWORD PTR [ecx+64], edx
$LN12@xmlSAX2Unp:

; 950  : 	}
; 951  :     } else {

	jmp	SHORT $LN1@xmlSAX2Unp
$LN9@xmlSAX2Unp:

; 952  :         xmlFatalErrMsg(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0DO@IABCNOGI@SAX?4xmlSAX2UnparsedEntityDecl?$CI?$CF@
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlFatalErrMsg
	add	esp, 20					; 00000014H
$LN1@xmlSAX2Unp:

; 953  : 	     "SAX.xmlSAX2UnparsedEntityDecl(%s) called while not in subset\n",
; 954  : 	               name, NULL);
; 955  :     }
; 956  : }

	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2UnparsedEntityDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2NotationDecl
_TEXT	SEGMENT
_nota$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_publicId$ = 16						; size = 4
_systemId$ = 20						; size = 4
_xmlSAX2NotationDecl PROC				; COMDAT

; 850  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 851  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 852  :     xmlNotationPtr nota = NULL;

	mov	DWORD PTR _nota$[ebp], 0

; 853  : 
; 854  :     if ((ctxt == NULL) || (ctxt->myDoc == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlSAX2Not
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlSAX2Not
$LN3@xmlSAX2Not:

; 855  :         return;

	jmp	$LN1@xmlSAX2Not
$LN2@xmlSAX2Not:

; 856  : 
; 857  : #ifdef DEBUG_SAX
; 858  :     xmlGenericError(xmlGenericErrorContext,
; 859  : 	    "SAX.xmlSAX2NotationDecl(%s, %s, %s)\n", name, publicId, systemId);
; 860  : #endif
; 861  : 
; 862  :     if ((publicId == NULL) && (systemId == NULL)) {

	cmp	DWORD PTR _publicId$[ebp], 0
	jne	SHORT $LN4@xmlSAX2Not
	cmp	DWORD PTR _systemId$[ebp], 0
	jne	SHORT $LN4@xmlSAX2Not

; 863  : 	xmlFatalErrMsg(ctxt, XML_ERR_NOTATION_PROCESSING,

	push	0
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0DM@OMFMKHI@SAX?4xmlSAX2NotationDecl?$CI?$CFs?$CJ?5ext@
	push	105					; 00000069H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlFatalErrMsg
	add	esp, 20					; 00000014H

; 864  : 	     "SAX.xmlSAX2NotationDecl(%s) externalID or PublicID missing\n",
; 865  : 	               name, NULL);
; 866  : 	return;

	jmp	$LN1@xmlSAX2Not
	jmp	$LN5@xmlSAX2Not
$LN4@xmlSAX2Not:

; 867  :     } else if (ctxt->inSubset == 1)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+216], 1
	jne	SHORT $LN6@xmlSAX2Not

; 868  : 	nota = xmlAddNotationDecl(&ctxt->vctxt, ctxt->myDoc->intSubset, name,

	mov	edx, DWORD PTR _systemId$[ebp]
	push	edx
	mov	eax, DWORD PTR _publicId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlAddNotationDecl
	add	esp, 20					; 00000014H
	mov	DWORD PTR _nota$[ebp], eax
	jmp	SHORT $LN5@xmlSAX2Not
$LN6@xmlSAX2Not:

; 869  :                               publicId, systemId);
; 870  :     else if (ctxt->inSubset == 2)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+216], 2
	jne	SHORT $LN8@xmlSAX2Not

; 871  : 	nota = xmlAddNotationDecl(&ctxt->vctxt, ctxt->myDoc->extSubset, name,

	mov	ecx, DWORD PTR _systemId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _publicId$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	ecx, 108				; 0000006cH
	push	ecx
	call	_xmlAddNotationDecl
	add	esp, 20					; 00000014H
	mov	DWORD PTR _nota$[ebp], eax
	jmp	SHORT $LN5@xmlSAX2Not
$LN8@xmlSAX2Not:

; 872  :                               publicId, systemId);
; 873  :     else {
; 874  : 	xmlFatalErrMsg(ctxt, XML_ERR_NOTATION_PROCESSING,

	push	0
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0DI@MAMMGJDO@SAX?4xmlSAX2NotationDecl?$CI?$CFs?$CJ?5cal@
	push	105					; 00000069H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlFatalErrMsg
	add	esp, 20					; 00000014H

; 875  : 	     "SAX.xmlSAX2NotationDecl(%s) called while not in subset\n",
; 876  : 	               name, NULL);
; 877  : 	return;

	jmp	SHORT $LN1@xmlSAX2Not
$LN5@xmlSAX2Not:

; 878  :     }
; 879  : #ifdef LIBXML_VALID_ENABLED
; 880  :     if (nota == NULL) ctxt->valid = 0;

	cmp	DWORD PTR _nota$[ebp], 0
	jne	SHORT $LN10@xmlSAX2Not
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], 0
$LN10@xmlSAX2Not:

; 881  :     if ((ctxt->validate) && (ctxt->wellFormed) &&

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN1@xmlSAX2Not
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN1@xmlSAX2Not
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN1@xmlSAX2Not

; 882  :         (ctxt->myDoc->intSubset != NULL))
; 883  : 	ctxt->valid &= xmlValidateNotationDecl(&ctxt->vctxt, ctxt->myDoc,

	mov	eax, DWORD PTR _nota$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_xmlValidateNotationDecl
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN1@xmlSAX2Not:

; 884  : 	                                       nota);
; 885  : #endif /* LIBXML_VALID_ENABLED */
; 886  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2NotationDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2ElementDecl
_TEXT	SEGMENT
_elem$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_type$ = 16						; size = 4
_content$ = 20						; size = 4
_xmlSAX2ElementDecl PROC				; COMDAT

; 804  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 805  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 806  :     xmlElementPtr elem = NULL;

	mov	DWORD PTR _elem$[ebp], 0

; 807  : 
; 808  :     if ((ctxt == NULL) || (ctxt->myDoc == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlSAX2Ele
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlSAX2Ele
$LN3@xmlSAX2Ele:

; 809  :         return;

	jmp	$LN1@xmlSAX2Ele
$LN2@xmlSAX2Ele:

; 810  : 
; 811  : #ifdef DEBUG_SAX
; 812  :     xmlGenericError(xmlGenericErrorContext,
; 813  :                     "SAX.xmlSAX2ElementDecl(%s, %d, ...)\n", name, type);
; 814  : #endif
; 815  : 
; 816  :     if (ctxt->inSubset == 1)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+216], 1
	jne	SHORT $LN4@xmlSAX2Ele

; 817  :         elem = xmlAddElementDecl(&ctxt->vctxt, ctxt->myDoc->intSubset,

	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_xmlAddElementDecl
	add	esp, 20					; 00000014H
	mov	DWORD PTR _elem$[ebp], eax
	jmp	SHORT $LN5@xmlSAX2Ele
$LN4@xmlSAX2Ele:

; 818  :                                  name, (xmlElementTypeVal) type, content);
; 819  :     else if (ctxt->inSubset == 2)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+216], 2
	jne	SHORT $LN6@xmlSAX2Ele

; 820  :         elem = xmlAddElementDecl(&ctxt->vctxt, ctxt->myDoc->extSubset,

	mov	edx, DWORD PTR _content$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlAddElementDecl
	add	esp, 20					; 00000014H
	mov	DWORD PTR _elem$[ebp], eax
	jmp	SHORT $LN5@xmlSAX2Ele
$LN6@xmlSAX2Ele:

; 821  :                                  name, (xmlElementTypeVal) type, content);
; 822  :     else {
; 823  :         xmlFatalErrMsg(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0DH@FINDFGFC@SAX?4xmlSAX2ElementDecl?$CI?$CFs?$CJ?5call@
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlFatalErrMsg
	add	esp, 20					; 00000014H

; 824  : 	     "SAX.xmlSAX2ElementDecl(%s) called while not in subset\n",
; 825  : 	               name, NULL);
; 826  :         return;

	jmp	SHORT $LN1@xmlSAX2Ele
$LN5@xmlSAX2Ele:

; 827  :     }
; 828  : #ifdef LIBXML_VALID_ENABLED
; 829  :     if (elem == NULL)

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN8@xmlSAX2Ele

; 830  :         ctxt->valid = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], 0
$LN8@xmlSAX2Ele:

; 831  :     if (ctxt->validate && ctxt->wellFormed &&
; 832  :         ctxt->myDoc && ctxt->myDoc->intSubset)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+104], 0
	je	SHORT $LN1@xmlSAX2Ele
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN1@xmlSAX2Ele
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN1@xmlSAX2Ele
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN1@xmlSAX2Ele

; 833  :         ctxt->valid &=

	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidateElementDecl
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN1@xmlSAX2Ele:

; 834  :             xmlValidateElementDecl(&ctxt->vctxt, ctxt->myDoc, elem);
; 835  : #endif /* LIBXML_VALID_ENABLED */
; 836  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2ElementDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2AttributeDecl
_TEXT	SEGMENT
_tmp$1 = -28						; size = 4
_prefix$ = -20						; size = 4
_name$ = -12						; size = 4
_attr$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_elem$ = 12						; size = 4
_fullname$ = 16						; size = 4
_type$ = 20						; size = 4
_def$ = 24						; size = 4
_defaultValue$ = 28					; size = 4
_tree$ = 32						; size = 4
_xmlSAX2AttributeDecl PROC				; COMDAT

; 737  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 738  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 739  :     xmlAttributePtr attr;
; 740  :     xmlChar *name = NULL, *prefix = NULL;

	mov	DWORD PTR _name$[ebp], 0
	mov	DWORD PTR _prefix$[ebp], 0

; 741  : 
; 742  :     if ((ctxt == NULL) || (ctxt->myDoc == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlSAX2Att
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlSAX2Att
$LN3@xmlSAX2Att:

; 743  :         return;

	jmp	$LN1@xmlSAX2Att
$LN2@xmlSAX2Att:

; 744  : 
; 745  : #ifdef DEBUG_SAX
; 746  :     xmlGenericError(xmlGenericErrorContext,
; 747  : 	    "SAX.xmlSAX2AttributeDecl(%s, %s, %d, %d, %s, ...)\n",
; 748  :             elem, fullname, type, def, defaultValue);
; 749  : #endif
; 750  :     if ((xmlStrEqual(fullname, BAD_CAST "xml:id")) &&

	push	OFFSET ??_C@_06IMLNHOMM@xml?3id@
	mov	edx, DWORD PTR _fullname$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@xmlSAX2Att
	cmp	DWORD PTR _type$[ebp], 2
	je	SHORT $LN4@xmlSAX2Att

; 751  :         (type != XML_ATTRIBUTE_ID)) {
; 752  : 	/*
; 753  : 	 * Raise the error but keep the validity flag
; 754  : 	 */
; 755  : 	int tmp = ctxt->valid;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR _tmp$1[ebp], ecx

; 756  : 	xmlErrValid(ctxt, XML_DTD_XMLID_TYPE,

	push	0
	push	0
	push	OFFSET ??_C@_0CG@DOFEKNB@xml?3id?5?3?5attribute?5type?5should?5@
	push	540					; 0000021cH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValid
	add	esp, 20					; 00000014H

; 757  : 	      "xml:id : attribute type should be ID\n", NULL, NULL);
; 758  : 	ctxt->valid = tmp;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [eax+100], ecx
$LN4@xmlSAX2Att:

; 759  :     }
; 760  :     /* TODO: optimize name/prefix allocation */
; 761  :     name = xmlSplitQName(ctxt, fullname, &prefix);

	lea	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _fullname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSplitQName
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _name$[ebp], eax

; 762  :     ctxt->vctxt.valid = 1;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+144], 1

; 763  :     if (ctxt->inSubset == 1)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+216], 1
	jne	SHORT $LN5@xmlSAX2Att

; 764  : 	attr = xmlAddAttributeDecl(&ctxt->vctxt, ctxt->myDoc->intSubset, elem,

	mov	ecx, DWORD PTR _tree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _defaultValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _def$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlAddAttributeDecl
	add	esp, 36					; 00000024H
	mov	DWORD PTR _attr$[ebp], eax
	jmp	SHORT $LN6@xmlSAX2Att
$LN5@xmlSAX2Att:

; 765  : 	       name, prefix, (xmlAttributeType) type,
; 766  : 	       (xmlAttributeDefault) def, defaultValue, tree);
; 767  :     else if (ctxt->inSubset == 2)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+216], 2
	jne	SHORT $LN7@xmlSAX2Att

; 768  : 	attr = xmlAddAttributeDecl(&ctxt->vctxt, ctxt->myDoc->extSubset, elem,

	mov	ecx, DWORD PTR _tree$[ebp]
	push	ecx
	mov	edx, DWORD PTR _defaultValue$[ebp]
	push	edx
	mov	eax, DWORD PTR _def$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlAddAttributeDecl
	add	esp, 36					; 00000024H
	mov	DWORD PTR _attr$[ebp], eax
	jmp	SHORT $LN6@xmlSAX2Att
$LN7@xmlSAX2Att:

; 769  : 	   name, prefix, (xmlAttributeType) type,
; 770  : 	   (xmlAttributeDefault) def, defaultValue, tree);
; 771  :     else {
; 772  :         xmlFatalErrMsg(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0DJ@CKOJIFJI@SAX?4xmlSAX2AttributeDecl?$CI?$CFs?$CJ?5ca@
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlFatalErrMsg
	add	esp, 20					; 00000014H

; 773  : 	     "SAX.xmlSAX2AttributeDecl(%s) called while not in subset\n",
; 774  : 	               name, NULL);
; 775  : 	xmlFreeEnumeration(tree);

	mov	edx, DWORD PTR _tree$[ebp]
	push	edx
	call	_xmlFreeEnumeration
	add	esp, 4

; 776  : 	return;

	jmp	$LN1@xmlSAX2Att
$LN6@xmlSAX2Att:

; 777  :     }
; 778  : #ifdef LIBXML_VALID_ENABLED
; 779  :     if (ctxt->vctxt.valid == 0)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+144], 0
	jne	SHORT $LN9@xmlSAX2Att

; 780  : 	ctxt->valid = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+100], 0
$LN9@xmlSAX2Att:

; 781  :     if ((attr != NULL) && (ctxt->validate) && (ctxt->wellFormed) &&

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN10@xmlSAX2Att
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN10@xmlSAX2Att
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN10@xmlSAX2Att
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN10@xmlSAX2Att

; 782  :         (ctxt->myDoc->intSubset != NULL))
; 783  : 	ctxt->valid &= xmlValidateAttributeDecl(&ctxt->vctxt, ctxt->myDoc,

	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	add	eax, 108				; 0000006cH
	push	eax
	call	_xmlValidateAttributeDecl
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	and	eax, DWORD PTR [ecx+100]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+100], eax
$LN10@xmlSAX2Att:

; 784  : 	                                        attr);
; 785  : #endif /* LIBXML_VALID_ENABLED */
; 786  :     if (prefix != NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN11@xmlSAX2Att

; 787  : 	xmlFree(prefix);

	mov	esi, esp
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlSAX2Att:

; 788  :     if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN1@xmlSAX2Att

; 789  : 	xmlFree(name);

	mov	esi, esp
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlSAX2Att:

; 790  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@xmlSAX2Att
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN16@xmlSAX2Att:
	DD	1
	DD	$LN15@xmlSAX2Att
$LN15@xmlSAX2Att:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@xmlSAX2Att
$LN14@xmlSAX2Att:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlSAX2AttributeDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2EntityDecl
_TEXT	SEGMENT
_base$1 = -24						; size = 4
_URI$2 = -20						; size = 4
_base$3 = -16						; size = 4
_URI$4 = -12						; size = 4
_ctxt$ = -8						; size = 4
_ent$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_type$ = 16						; size = 4
_publicId$ = 20						; size = 4
_systemId$ = 24						; size = 4
_content$ = 28						; size = 4
_xmlSAX2EntityDecl PROC					; COMDAT

; 666  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 667  :     xmlEntityPtr ent;
; 668  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 669  : 
; 670  :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Ent
	jmp	$LN1@xmlSAX2Ent
$LN2@xmlSAX2Ent:

; 671  : #ifdef DEBUG_SAX
; 672  :     xmlGenericError(xmlGenericErrorContext,
; 673  : 	    "SAX.xmlSAX2EntityDecl(%s, %d, %s, %s, %s)\n",
; 674  :             name, type, publicId, systemId, content);
; 675  : #endif
; 676  :     if (ctxt->inSubset == 1) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+216], 1
	jne	$LN3@xmlSAX2Ent

; 677  : 	ent = xmlAddDocEntity(ctxt->myDoc, name, type, publicId,

	mov	edx, DWORD PTR _content$[ebp]
	push	edx
	mov	eax, DWORD PTR _systemId$[ebp]
	push	eax
	mov	ecx, DWORD PTR _publicId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _type$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlAddDocEntity
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ent$[ebp], eax

; 678  : 		              systemId, content);
; 679  : 	if ((ent == NULL) && (ctxt->pedantic))

	cmp	DWORD PTR _ent$[ebp], 0
	jne	SHORT $LN5@xmlSAX2Ent
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+268], 0
	je	SHORT $LN5@xmlSAX2Ent

; 680  : 	    xmlWarnMsg(ctxt, XML_WAR_ENTITY_REDEFINED,

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DD@GCBFDMPE@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@
	push	107					; 0000006bH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlWarnMsg
	add	esp, 16					; 00000010H
$LN5@xmlSAX2Ent:

; 681  : 	     "Entity(%s) already defined in the internal subset\n",
; 682  : 	               name);
; 683  : 	if ((ent != NULL) && (ent->URI == NULL) && (systemId != NULL)) {

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN6@xmlSAX2Ent
	mov	eax, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN6@xmlSAX2Ent
	cmp	DWORD PTR _systemId$[ebp], 0
	je	SHORT $LN6@xmlSAX2Ent

; 684  : 	    xmlChar *URI;
; 685  : 	    const char *base = NULL;

	mov	DWORD PTR _base$3[ebp], 0

; 686  : 
; 687  : 	    if (ctxt->input != NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN7@xmlSAX2Ent

; 688  : 		base = ctxt->input->filename;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _base$3[ebp], ecx
$LN7@xmlSAX2Ent:

; 689  : 	    if (base == NULL)

	cmp	DWORD PTR _base$3[ebp], 0
	jne	SHORT $LN8@xmlSAX2Ent

; 690  : 		base = ctxt->directory;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+180]
	mov	DWORD PTR _base$3[ebp], eax
$LN8@xmlSAX2Ent:

; 691  : 
; 692  : 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);

	mov	ecx, DWORD PTR _base$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _systemId$[ebp]
	push	edx
	call	_xmlBuildURI
	add	esp, 8
	mov	DWORD PTR _URI$4[ebp], eax

; 693  : 	    ent->URI = URI;

	mov	eax, DWORD PTR _ent$[ebp]
	mov	ecx, DWORD PTR _URI$4[ebp]
	mov	DWORD PTR [eax+64], ecx
$LN6@xmlSAX2Ent:

; 694  : 	}

	jmp	$LN1@xmlSAX2Ent
$LN3@xmlSAX2Ent:

; 695  :     } else if (ctxt->inSubset == 2) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+216], 2
	jne	$LN9@xmlSAX2Ent

; 696  : 	ent = xmlAddDtdEntity(ctxt->myDoc, name, type, publicId,

	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	mov	ecx, DWORD PTR _systemId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _publicId$[ebp]
	push	edx
	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlAddDtdEntity
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ent$[ebp], eax

; 697  : 		              systemId, content);
; 698  : 	if ((ent == NULL) && (ctxt->pedantic) &&
; 699  : 	    (ctxt->sax != NULL) && (ctxt->sax->warning != NULL))

	cmp	DWORD PTR _ent$[ebp], 0
	jne	SHORT $LN11@xmlSAX2Ent
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+268], 0
	je	SHORT $LN11@xmlSAX2Ent
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN11@xmlSAX2Ent
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+84], 0
	je	SHORT $LN11@xmlSAX2Ent

; 700  : 	    ctxt->sax->warning(ctxt->userData,

	mov	esi, esp
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0DD@ECLLADNP@Entity?$CI?$CFs?$CJ?5already?5defined?5in?5t@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+84]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlSAX2Ent:

; 701  : 	     "Entity(%s) already defined in the external subset\n", name);
; 702  : 	if ((ent != NULL) && (ent->URI == NULL) && (systemId != NULL)) {

	cmp	DWORD PTR _ent$[ebp], 0
	je	SHORT $LN12@xmlSAX2Ent
	mov	edx, DWORD PTR _ent$[ebp]
	cmp	DWORD PTR [edx+64], 0
	jne	SHORT $LN12@xmlSAX2Ent
	cmp	DWORD PTR _systemId$[ebp], 0
	je	SHORT $LN12@xmlSAX2Ent

; 703  : 	    xmlChar *URI;
; 704  : 	    const char *base = NULL;

	mov	DWORD PTR _base$1[ebp], 0

; 705  : 
; 706  : 	    if (ctxt->input != NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN13@xmlSAX2Ent

; 707  : 		base = ctxt->input->filename;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _base$1[ebp], eax
$LN13@xmlSAX2Ent:

; 708  : 	    if (base == NULL)

	cmp	DWORD PTR _base$1[ebp], 0
	jne	SHORT $LN14@xmlSAX2Ent

; 709  : 		base = ctxt->directory;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	mov	DWORD PTR _base$1[ebp], edx
$LN14@xmlSAX2Ent:

; 710  : 
; 711  : 	    URI = xmlBuildURI(systemId, (const xmlChar *) base);

	mov	eax, DWORD PTR _base$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _systemId$[ebp]
	push	ecx
	call	_xmlBuildURI
	add	esp, 8
	mov	DWORD PTR _URI$2[ebp], eax

; 712  : 	    ent->URI = URI;

	mov	edx, DWORD PTR _ent$[ebp]
	mov	eax, DWORD PTR _URI$2[ebp]
	mov	DWORD PTR [edx+64], eax
$LN12@xmlSAX2Ent:

; 713  : 	}
; 714  :     } else {

	jmp	SHORT $LN1@xmlSAX2Ent
$LN9@xmlSAX2Ent:

; 715  : 	xmlFatalErrMsg(ctxt, XML_ERR_ENTITY_PROCESSING,

	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DG@EGJGBEOC@SAX?4xmlSAX2EntityDecl?$CI?$CFs?$CJ?5calle@
	push	104					; 00000068H
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlFatalErrMsg
	add	esp, 20					; 00000014H
$LN1@xmlSAX2Ent:

; 716  : 	               "SAX.xmlSAX2EntityDecl(%s) called while not in subset\n",
; 717  : 		       name, NULL);
; 718  :     }
; 719  : }

	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2EntityDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2ResolveEntity
_TEXT	SEGMENT
_base$ = -16						; size = 4
_URI$ = -12						; size = 4
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_publicId$ = 12						; size = 4
_systemId$ = 16						; size = 4
_xmlSAX2ResolveEntity PROC				; COMDAT

; 520  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 521  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 522  :     xmlParserInputPtr ret;
; 523  :     xmlChar *URI;
; 524  :     const char *base = NULL;

	mov	DWORD PTR _base$[ebp], 0

; 525  : 
; 526  :     if (ctx == NULL) return(NULL);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Res
	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2Res
$LN2@xmlSAX2Res:

; 527  :     if (ctxt->input != NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN3@xmlSAX2Res

; 528  : 	base = ctxt->input->filename;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _base$[ebp], ecx
$LN3@xmlSAX2Res:

; 529  :     if (base == NULL)

	cmp	DWORD PTR _base$[ebp], 0
	jne	SHORT $LN4@xmlSAX2Res

; 530  : 	base = ctxt->directory;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+180]
	mov	DWORD PTR _base$[ebp], eax
$LN4@xmlSAX2Res:

; 531  : 
; 532  :     URI = xmlBuildURI(systemId, (const xmlChar *) base);

	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	mov	edx, DWORD PTR _systemId$[ebp]
	push	edx
	call	_xmlBuildURI
	add	esp, 8
	mov	DWORD PTR _URI$[ebp], eax

; 533  : 
; 534  : #ifdef DEBUG_SAX
; 535  :     xmlGenericError(xmlGenericErrorContext,
; 536  : 	    "SAX.xmlSAX2ResolveEntity(%s, %s)\n", publicId, systemId);
; 537  : #endif
; 538  : 
; 539  :     ret = xmlLoadExternalEntity((const char *) URI,

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _publicId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _URI$[ebp]
	push	edx
	call	_xmlLoadExternalEntity
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 540  : 				(const char *) publicId, ctxt);
; 541  :     if (URI != NULL)

	cmp	DWORD PTR _URI$[ebp], 0
	je	SHORT $LN5@xmlSAX2Res

; 542  : 	xmlFree(URI);

	mov	esi, esp
	mov	eax, DWORD PTR _URI$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlSAX2Res:

; 543  :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSAX2Res:

; 544  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2ResolveEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2GetParameterEntity
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlSAX2GetParameterEntity PROC				; COMDAT

; 637  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 638  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 639  :     xmlEntityPtr ret;
; 640  : 
; 641  :     if (ctx == NULL) return(NULL);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Get
	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2Get
$LN2@xmlSAX2Get:

; 642  : #ifdef DEBUG_SAX
; 643  :     xmlGenericError(xmlGenericErrorContext,
; 644  : 	    "SAX.xmlSAX2GetParameterEntity(%s)\n", name);
; 645  : #endif
; 646  : 
; 647  :     ret = xmlGetParameterEntity(ctxt->myDoc, name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlGetParameterEntity
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 648  :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSAX2Get:

; 649  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2GetParameterEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2GetEntity
_TEXT	SEGMENT
_oldnbent$1 = -28					; size = 4
_children$2 = -20					; size = 4
_val$3 = -12						; size = 4
_ret$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlSAX2GetEntity PROC					; COMDAT

; 557  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 558  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 559  :     xmlEntityPtr ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 560  : 
; 561  :     if (ctx == NULL) return(NULL);

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Get
	xor	eax, eax
	jmp	$LN1@xmlSAX2Get
$LN2@xmlSAX2Get:

; 562  : #ifdef DEBUG_SAX
; 563  :     xmlGenericError(xmlGenericErrorContext,
; 564  : 	    "SAX.xmlSAX2GetEntity(%s)\n", name);
; 565  : #endif
; 566  : 
; 567  :     if (ctxt->inSubset == 0) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+216], 0
	jne	SHORT $LN3@xmlSAX2Get

; 568  : 	ret = xmlGetPredefinedEntity(name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlGetPredefinedEntity
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 569  : 	if (ret != NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN3@xmlSAX2Get

; 570  : 	    return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlSAX2Get
$LN3@xmlSAX2Get:

; 571  :     }
; 572  :     if ((ctxt->myDoc != NULL) && (ctxt->myDoc->standalone == 1)) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	$LN5@xmlSAX2Get
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR [edx+40], 1
	jne	$LN5@xmlSAX2Get

; 573  : 	if (ctxt->inSubset == 2) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+216], 2
	jne	SHORT $LN7@xmlSAX2Get

; 574  : 	    ctxt->myDoc->standalone = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+40], 0

; 575  : 	    ret = xmlGetDocEntity(ctxt->myDoc, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlGetDocEntity
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 576  : 	    ctxt->myDoc->standalone = 1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+40], 1

; 577  : 	} else {

	jmp	SHORT $LN8@xmlSAX2Get
$LN7@xmlSAX2Get:

; 578  : 	    ret = xmlGetDocEntity(ctxt->myDoc, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlGetDocEntity
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 579  : 	    if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN8@xmlSAX2Get

; 580  : 		ctxt->myDoc->standalone = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [eax+40], 0

; 581  : 		ret = xmlGetDocEntity(ctxt->myDoc, name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlGetDocEntity
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 582  : 		if (ret != NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN10@xmlSAX2Get

; 583  : 		    xmlFatalErrMsg(ctxt, XML_ERR_NOT_STANDALONE,

	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0EE@PPDHKGIC@Entity?$CI?$CFs?$CJ?5document?5marked?5stan@
	push	103					; 00000067H
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlFatalErrMsg
	add	esp, 20					; 00000014H
$LN10@xmlSAX2Get:

; 584  : 	 "Entity(%s) document marked standalone but requires external subset\n",
; 585  : 				   name, NULL);
; 586  : 		}
; 587  : 		ctxt->myDoc->standalone = 1;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+40], 1
$LN8@xmlSAX2Get:

; 588  : 	    }
; 589  : 	}
; 590  :     } else {

	jmp	SHORT $LN6@xmlSAX2Get
$LN5@xmlSAX2Get:

; 591  : 	ret = xmlGetDocEntity(ctxt->myDoc, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlGetDocEntity
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
$LN6@xmlSAX2Get:

; 592  :     }
; 593  :     if ((ret != NULL) &&
; 594  : 	((ctxt->validate) || (ctxt->replaceEntities)) &&
; 595  : 	(ret->children == NULL) &&

	cmp	DWORD PTR _ret$[ebp], 0
	je	$LN11@xmlSAX2Get
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+104], 0
	jne	SHORT $LN12@xmlSAX2Get
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN11@xmlSAX2Get
$LN12@xmlSAX2Get:
	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	$LN11@xmlSAX2Get
	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+48], 2
	jne	$LN11@xmlSAX2Get

; 596  : 	(ret->etype == XML_EXTERNAL_GENERAL_PARSED_ENTITY)) {
; 597  : 	int val;
; 598  : 
; 599  : 	/*
; 600  : 	 * for validation purposes we really need to fetch and
; 601  : 	 * parse the external entity
; 602  : 	 */
; 603  : 	xmlNodePtr children;
; 604  : 	unsigned long oldnbent = ctxt->nbentities;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+440]
	mov	DWORD PTR _oldnbent$1[ebp], ecx

; 605  : 
; 606  :         val = xmlParseCtxtExternalEntity(ctxt, ret->URI,

	lea	edx, DWORD PTR _children$2[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlParseCtxtExternalEntity
	add	esp, 16					; 00000010H
	mov	DWORD PTR _val$3[ebp], eax

; 607  : 		                         ret->ExternalID, &children);
; 608  : 	if (val == 0) {

	cmp	DWORD PTR _val$3[ebp], 0
	jne	SHORT $LN13@xmlSAX2Get

; 609  : 	    xmlAddChildList((xmlNodePtr) ret, children);

	mov	edx, DWORD PTR _children$2[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlAddChildList
	add	esp, 8

; 610  : 	} else {

	jmp	SHORT $LN14@xmlSAX2Get
$LN13@xmlSAX2Get:

; 611  : 	    xmlFatalErrMsg(ctxt, XML_ERR_ENTITY_PROCESSING,

	push	0
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@LDENBHGA@Failure?5to?5process?5entity?5?$CFs?6@
	push	104					; 00000068H
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlFatalErrMsg
	add	esp, 20					; 00000014H

; 612  : 		           "Failure to process entity %s\n", name, NULL);
; 613  : 	    ctxt->validate = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+104], 0

; 614  : 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2Get
$LN14@xmlSAX2Get:

; 615  : 	}
; 616  : 	ret->owner = 1;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+68], 1

; 617  : 	if (ret->checked == 0) {

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+72], 0
	jne	SHORT $LN11@xmlSAX2Get

; 618  : 	    ret->checked = (ctxt->nbentities - oldnbent + 1) * 2;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+440]
	sub	ecx, DWORD PTR _oldnbent$1[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+72], edx

; 619  : 	    if ((ret->content != NULL) && (xmlStrchr(ret->content, '<')))

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN11@xmlSAX2Get
	push	60					; 0000003cH
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_xmlStrchr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@xmlSAX2Get

; 620  : 	        ret->checked |= 1;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	or	edx, 1
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+72], edx
$LN11@xmlSAX2Get:

; 621  : 	}
; 622  :     }
; 623  :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSAX2Get:

; 624  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@xmlSAX2Get
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@xmlSAX2Get:
	DD	1
	DD	$LN19@xmlSAX2Get
$LN19@xmlSAX2Get:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN18@xmlSAX2Get
$LN18@xmlSAX2Get:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_xmlSAX2GetEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2ExternalSubset
_TEXT	SEGMENT
_oldencoding$1 = -36					; size = 4
_oldcharset$2 = -32					; size = 4
_enc$3 = -28						; size = 4
_input$4 = -24						; size = 4
_oldinputTab$5 = -20					; size = 4
_oldinputMax$6 = -16					; size = 4
_oldinputNr$7 = -12					; size = 4
_oldinput$8 = -8					; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_ExternalID$ = 16					; size = 4
_SystemID$ = 20						; size = 4
_xmlSAX2ExternalSubset PROC				; COMDAT

; 394  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 395  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 396  :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN4@xmlSAX2Ext
	jmp	$LN1@xmlSAX2Ext
$LN4@xmlSAX2Ext:

; 397  : #ifdef DEBUG_SAX
; 398  :     xmlGenericError(xmlGenericErrorContext,
; 399  : 	    "SAX.xmlSAX2ExternalSubset(%s, %s, %s)\n",
; 400  :             name, ExternalID, SystemID);
; 401  : #endif
; 402  :     if (((ExternalID != NULL) || (SystemID != NULL)) &&

	cmp	DWORD PTR _ExternalID$[ebp], 0
	jne	SHORT $LN6@xmlSAX2Ext
	cmp	DWORD PTR _SystemID$[ebp], 0
	je	$LN1@xmlSAX2Ext
$LN6@xmlSAX2Ext:
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	jne	SHORT $LN7@xmlSAX2Ext
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+276], 0
	je	$LN1@xmlSAX2Ext
$LN7@xmlSAX2Ext:
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	$LN1@xmlSAX2Ext
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	$LN1@xmlSAX2Ext

; 403  :         (((ctxt->validate) || (ctxt->loadsubset != 0)) &&
; 404  : 	 (ctxt->wellFormed && ctxt->myDoc))) {
; 405  : 	/*
; 406  : 	 * Try to fetch and parse the external subset.
; 407  : 	 */
; 408  : 	xmlParserInputPtr oldinput;
; 409  : 	int oldinputNr;
; 410  : 	int oldinputMax;
; 411  : 	xmlParserInputPtr *oldinputTab;
; 412  : 	xmlParserInputPtr input = NULL;

	mov	DWORD PTR _input$4[ebp], 0

; 413  : 	xmlCharEncoding enc;
; 414  : 	int oldcharset;
; 415  : 	const xmlChar *oldencoding;
; 416  : 
; 417  : 	/*
; 418  : 	 * Ask the Entity resolver to load the damn thing
; 419  : 	 */
; 420  : 	if ((ctxt->sax != NULL) && (ctxt->sax->resolveEntity != NULL))

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN8@xmlSAX2Ext
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN8@xmlSAX2Ext

; 421  : 	    input = ctxt->sax->resolveEntity(ctxt->userData, ExternalID,

	mov	esi, esp
	mov	edx, DWORD PTR _SystemID$[ebp]
	push	edx
	mov	eax, DWORD PTR _ExternalID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _input$4[ebp], eax
$LN8@xmlSAX2Ext:

; 422  : 	                                        SystemID);
; 423  : 	if (input == NULL) {

	cmp	DWORD PTR _input$4[ebp], 0
	jne	SHORT $LN9@xmlSAX2Ext

; 424  : 	    return;

	jmp	$LN1@xmlSAX2Ext
$LN9@xmlSAX2Ext:

; 425  : 	}
; 426  : 
; 427  : 	xmlNewDtd(ctxt->myDoc, name, ExternalID, SystemID);

	mov	eax, DWORD PTR _SystemID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ExternalID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlNewDtd
	add	esp, 16					; 00000010H

; 428  : 
; 429  : 	/*
; 430  : 	 * make sure we won't destroy the main document context
; 431  : 	 */
; 432  : 	oldinput = ctxt->input;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _oldinput$8[ebp], eax

; 433  : 	oldinputNr = ctxt->inputNr;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _oldinputNr$7[ebp], edx

; 434  : 	oldinputMax = ctxt->inputMax;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _oldinputMax$6[ebp], ecx

; 435  : 	oldinputTab = ctxt->inputTab;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _oldinputTab$5[ebp], eax

; 436  : 	oldcharset = ctxt->charset;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+256]
	mov	DWORD PTR _oldcharset$2[ebp], edx

; 437  : 	oldencoding = ctxt->encoding;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _oldencoding$1[ebp], ecx

; 438  : 	ctxt->encoding = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+24], 0

; 439  : 
; 440  : 	ctxt->inputTab = (xmlParserInputPtr *)

	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 441  : 	                 xmlMalloc(5 * sizeof(xmlParserInputPtr));
; 442  : 	if (ctxt->inputTab == NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN10@xmlSAX2Ext

; 443  : 	    xmlSAX2ErrMemory(ctxt, "xmlSAX2ExternalSubset");

	push	OFFSET ??_C@_0BG@NJCKJHBI@xmlSAX2ExternalSubset@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSAX2ErrMemory
	add	esp, 8

; 444  : 	    ctxt->input = oldinput;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _oldinput$8[ebp]
	mov	DWORD PTR [ecx+36], edx

; 445  : 	    ctxt->inputNr = oldinputNr;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _oldinputNr$7[ebp]
	mov	DWORD PTR [eax+40], ecx

; 446  : 	    ctxt->inputMax = oldinputMax;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _oldinputMax$6[ebp]
	mov	DWORD PTR [edx+44], eax

; 447  : 	    ctxt->inputTab = oldinputTab;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _oldinputTab$5[ebp]
	mov	DWORD PTR [ecx+48], edx

; 448  : 	    ctxt->charset = oldcharset;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _oldcharset$2[ebp]
	mov	DWORD PTR [eax+256], ecx

; 449  : 	    ctxt->encoding = oldencoding;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _oldencoding$1[ebp]
	mov	DWORD PTR [edx+24], eax

; 450  : 	    return;

	jmp	$LN1@xmlSAX2Ext
$LN10@xmlSAX2Ext:

; 451  : 	}
; 452  : 	ctxt->inputNr = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 453  : 	ctxt->inputMax = 5;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+44], 5

; 454  : 	ctxt->input = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+36], 0

; 455  : 	xmlPushInput(ctxt, input);

	mov	ecx, DWORD PTR _input$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlPushInput
	add	esp, 8

; 456  : 
; 457  : 	/*
; 458  : 	 * On the fly encoding conversion if needed
; 459  : 	 */
; 460  : 	if (ctxt->input->length >= 4) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+24], 4
	jl	SHORT $LN11@xmlSAX2Ext

; 461  : 	    enc = xmlDetectCharEncoding(ctxt->input->cur, 4);

	push	4
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlDetectCharEncoding
	add	esp, 8
	mov	DWORD PTR _enc$3[ebp], eax

; 462  : 	    xmlSwitchEncoding(ctxt, enc);

	mov	edx, DWORD PTR _enc$3[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSwitchEncoding
	add	esp, 8
$LN11@xmlSAX2Ext:

; 463  : 	}
; 464  : 
; 465  : 	if (input->filename == NULL)

	mov	ecx, DWORD PTR _input$4[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN12@xmlSAX2Ext

; 466  : 	    input->filename = (char *) xmlCanonicPath(SystemID);

	mov	edx, DWORD PTR _SystemID$[ebp]
	push	edx
	call	_xmlCanonicPath
	add	esp, 4
	mov	ecx, DWORD PTR _input$4[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN12@xmlSAX2Ext:

; 467  : 	input->line = 1;

	mov	edx, DWORD PTR _input$4[ebp]
	mov	DWORD PTR [edx+28], 1

; 468  : 	input->col = 1;

	mov	eax, DWORD PTR _input$4[ebp]
	mov	DWORD PTR [eax+32], 1

; 469  : 	input->base = ctxt->input->cur;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _input$4[ebp]
	mov	ecx, DWORD PTR [edx+16]
	mov	DWORD PTR [eax+12], ecx

; 470  : 	input->cur = ctxt->input->cur;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR _input$4[ebp]
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], edx

; 471  : 	input->free = NULL;

	mov	eax, DWORD PTR _input$4[ebp]
	mov	DWORD PTR [eax+40], 0

; 472  : 
; 473  : 	/*
; 474  : 	 * let's parse that entity knowing it's an external subset.
; 475  : 	 */
; 476  : 	xmlParseExternalSubset(ctxt, ExternalID, SystemID);

	mov	ecx, DWORD PTR _SystemID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ExternalID$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlParseExternalSubset
	add	esp, 12					; 0000000cH
$LN2@xmlSAX2Ext:

; 477  : 
; 478  :         /*
; 479  : 	 * Free up the external entities
; 480  : 	 */
; 481  : 
; 482  : 	while (ctxt->inputNr > 1)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+40], 1
	jle	SHORT $LN3@xmlSAX2Ext

; 483  : 	    xmlPopInput(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlPopInput
	add	esp, 4
	jmp	SHORT $LN2@xmlSAX2Ext
$LN3@xmlSAX2Ext:

; 484  : 	xmlFreeInputStream(ctxt->input);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_xmlFreeInputStream
	add	esp, 4

; 485  :         xmlFree(ctxt->inputTab);

	mov	esi, esp
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 486  : 
; 487  : 	/*
; 488  : 	 * Restore the parsing context of the main entity
; 489  : 	 */
; 490  : 	ctxt->input = oldinput;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _oldinput$8[ebp]
	mov	DWORD PTR [ecx+36], edx

; 491  : 	ctxt->inputNr = oldinputNr;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _oldinputNr$7[ebp]
	mov	DWORD PTR [eax+40], ecx

; 492  : 	ctxt->inputMax = oldinputMax;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _oldinputMax$6[ebp]
	mov	DWORD PTR [edx+44], eax

; 493  : 	ctxt->inputTab = oldinputTab;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _oldinputTab$5[ebp]
	mov	DWORD PTR [ecx+48], edx

; 494  : 	ctxt->charset = oldcharset;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _oldcharset$2[ebp]
	mov	DWORD PTR [eax+256], ecx

; 495  : 	if ((ctxt->encoding != NULL) &&

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN13@xmlSAX2Ext
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+296], 0
	je	SHORT $LN14@xmlSAX2Ext
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+296]
	push	ecx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@xmlSAX2Ext
$LN14@xmlSAX2Ext:

; 496  : 	    ((ctxt->dict == NULL) ||
; 497  : 	     (!xmlDictOwns(ctxt->dict, ctxt->encoding))))
; 498  : 	    xmlFree((xmlChar *) ctxt->encoding);

	mov	esi, esp
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlSAX2Ext:

; 499  : 	ctxt->encoding = oldencoding;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _oldencoding$1[ebp]
	mov	DWORD PTR [ecx+24], edx
$LN1@xmlSAX2Ext:

; 500  : 	/* ctxt->wellFormed = oldwellFormed; */
; 501  :     }
; 502  : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2ExternalSubset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2InternalSubset
_TEXT	SEGMENT
_dtd$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_name$ = 12						; size = 4
_ExternalID$ = 16					; size = 4
_SystemID$ = 20						; size = 4
_xmlSAX2InternalSubset PROC				; COMDAT

; 356  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 357  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 358  :     xmlDtdPtr dtd;
; 359  :     if (ctx == NULL) return;

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlSAX2Int
	jmp	$LN1@xmlSAX2Int
$LN2@xmlSAX2Int:

; 360  : #ifdef DEBUG_SAX
; 361  :     xmlGenericError(xmlGenericErrorContext,
; 362  : 	    "SAX.xmlSAX2InternalSubset(%s, %s, %s)\n",
; 363  :             name, ExternalID, SystemID);
; 364  : #endif
; 365  : 
; 366  :     if (ctxt->myDoc == NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN3@xmlSAX2Int

; 367  : 	return;

	jmp	$LN1@xmlSAX2Int
$LN3@xmlSAX2Int:

; 368  :     dtd = xmlGetIntSubset(ctxt->myDoc);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlGetIntSubset
	add	esp, 4
	mov	DWORD PTR _dtd$[ebp], eax

; 369  :     if (dtd != NULL) {

	cmp	DWORD PTR _dtd$[ebp], 0
	je	SHORT $LN4@xmlSAX2Int

; 370  : 	if (ctxt->html)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN5@xmlSAX2Int

; 371  : 	    return;

	jmp	SHORT $LN1@xmlSAX2Int
$LN5@xmlSAX2Int:

; 372  : 	xmlUnlinkNode((xmlNodePtr) dtd);

	mov	edx, DWORD PTR _dtd$[ebp]
	push	edx
	call	_xmlUnlinkNode
	add	esp, 4

; 373  : 	xmlFreeDtd(dtd);

	mov	eax, DWORD PTR _dtd$[ebp]
	push	eax
	call	_xmlFreeDtd
	add	esp, 4

; 374  : 	ctxt->myDoc->intSubset = NULL;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+44], 0
$LN4@xmlSAX2Int:

; 375  :     }
; 376  :     ctxt->myDoc->intSubset =

	mov	eax, DWORD PTR _SystemID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ExternalID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlCreateIntSubset
	add	esp, 16					; 00000010H
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+44], eax

; 377  : 	xmlCreateIntSubset(ctxt->myDoc, name, ExternalID, SystemID);
; 378  :     if (ctxt->myDoc->intSubset == NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN1@xmlSAX2Int

; 379  :         xmlSAX2ErrMemory(ctxt, "xmlSAX2InternalSubset");

	push	OFFSET ??_C@_0BG@CKPEJCG@xmlSAX2InternalSubset@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSAX2ErrMemory
	add	esp, 8
$LN1@xmlSAX2Int:

; 380  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2InternalSubset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2HasExternalSubset
_TEXT	SEGMENT
tv70 = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_xmlSAX2HasExternalSubset PROC				; COMDAT

; 338  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 339  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 340  :     if ((ctxt == NULL) || (ctxt->myDoc == NULL)) return(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlSAX2Has
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlSAX2Has
$LN3@xmlSAX2Has:
	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2Has
$LN2@xmlSAX2Has:

; 341  :     return(ctxt->myDoc->extSubset != NULL);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN5@xmlSAX2Has
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@xmlSAX2Has
$LN5@xmlSAX2Has:
	mov	DWORD PTR tv70[ebp], 0
$LN6@xmlSAX2Has:
	mov	eax, DWORD PTR tv70[ebp]
$LN1@xmlSAX2Has:

; 342  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2HasExternalSubset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2HasInternalSubset
_TEXT	SEGMENT
tv70 = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_xmlSAX2HasInternalSubset PROC				; COMDAT

; 322  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 323  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 324  :     if ((ctxt == NULL) || (ctxt->myDoc == NULL)) return(0);

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlSAX2Has
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlSAX2Has
$LN3@xmlSAX2Has:
	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2Has
$LN2@xmlSAX2Has:

; 325  :     return(ctxt->myDoc->intSubset != NULL);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN5@xmlSAX2Has
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@xmlSAX2Has
$LN5@xmlSAX2Has:
	mov	DWORD PTR tv70[ebp], 0
$LN6@xmlSAX2Has:
	mov	eax, DWORD PTR tv70[ebp]
$LN1@xmlSAX2Has:

; 326  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2HasInternalSubset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2IsStandalone
_TEXT	SEGMENT
tv70 = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_xmlSAX2IsStandalone PROC				; COMDAT

; 306  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 307  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 308  :     if ((ctx == NULL) || (ctxt->myDoc == NULL)) return(0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@xmlSAX2IsS
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN2@xmlSAX2IsS
$LN3@xmlSAX2IsS:
	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2IsS
$LN2@xmlSAX2IsS:

; 309  :     return(ctxt->myDoc->standalone == 1);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	DWORD PTR [eax+40], 1
	jne	SHORT $LN5@xmlSAX2IsS
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN6@xmlSAX2IsS
$LN5@xmlSAX2IsS:
	mov	DWORD PTR tv70[ebp], 0
$LN6@xmlSAX2IsS:
	mov	eax, DWORD PTR tv70[ebp]
$LN1@xmlSAX2IsS:

; 310  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2IsStandalone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2GetColumnNumber
_TEXT	SEGMENT
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_xmlSAX2GetColumnNumber PROC				; COMDAT

; 290  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 291  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 292  :     if ((ctx == NULL) || (ctxt->input == NULL)) return(0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@xmlSAX2Get
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN2@xmlSAX2Get
$LN3@xmlSAX2Get:
	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2Get
$LN2@xmlSAX2Get:

; 293  :     return(ctxt->input->col);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	eax, DWORD PTR [eax+32]
$LN1@xmlSAX2Get:

; 294  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2GetColumnNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2GetLineNumber
_TEXT	SEGMENT
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_xmlSAX2GetLineNumber PROC				; COMDAT

; 274  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 275  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 276  :     if ((ctx == NULL) || (ctxt->input == NULL)) return(0);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@xmlSAX2Get
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN2@xmlSAX2Get
$LN3@xmlSAX2Get:
	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2Get
$LN2@xmlSAX2Get:

; 277  :     return(ctxt->input->line);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	eax, DWORD PTR [eax+28]
$LN1@xmlSAX2Get:

; 278  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2GetLineNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2SetDocumentLocator
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_loc$ = 12						; size = 4
_xmlSAX2SetDocumentLocator PROC				; COMDAT

; 968  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 969  :     /* xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx; */
; 970  : #ifdef DEBUG_SAX
; 971  :     xmlGenericError(xmlGenericErrorContext,
; 972  : 	    "SAX.xmlSAX2SetDocumentLocator()\n");
; 973  : #endif
; 974  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSAX2SetDocumentLocator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2GetSystemId
_TEXT	SEGMENT
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_xmlSAX2GetSystemId PROC				; COMDAT

; 258  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 259  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 260  :     if ((ctx == NULL) || (ctxt->input == NULL)) return(NULL);

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@xmlSAX2Get
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN2@xmlSAX2Get
$LN3@xmlSAX2Get:
	xor	eax, eax
	jmp	SHORT $LN1@xmlSAX2Get
$LN2@xmlSAX2Get:

; 261  :     return((const xmlChar *) ctxt->input->filename);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	eax, DWORD PTR [eax+4]
$LN1@xmlSAX2Get:

; 262  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSAX2GetSystemId ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\sax2.c
;	COMDAT _xmlSAX2GetPublicId
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_xmlSAX2GetPublicId PROC				; COMDAT

; 242  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __A8525CDE_sax2@c
	call	@__CheckForDebuggerJustMyCode@4

; 243  :     /* xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx; */
; 244  :     return(NULL);

	xor	eax, eax

; 245  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSAX2GetPublicId ENDP
_TEXT	ENDS
END
