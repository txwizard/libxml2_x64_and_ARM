; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\c14n.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_xmlXPathNAN:QWORD
COMM	_xmlXPathPINF:QWORD
COMM	_xmlXPathNINF:QWORD
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__27F3A1DF_c14n@c DB 01H
msvcjmc	ENDS
PUBLIC	_xmlC14NDocSaveTo
PUBLIC	_xmlC14NDocDumpMemory
PUBLIC	_xmlC14NDocSave
PUBLIC	_xmlC14NExecute
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BI@NBDMDFEL@Invalid?5parameter?5?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BF@KAEIDNN@Internal?5error?5?3?5?$CFs?6@	; `string'
PUBLIC	??_C@_0BO@DIKCFALP@Node?5?$CFs?5is?5invalid?5here?5?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0CB@LPHDJOLE@Unknown?5node?5type?5?$CFd?5found?5?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0CM@HOAPKNKJ@Relative?5namespace?5UR?5is?5invali@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BK@MOKDAME@creating?5namespaces?5stack@	; `string'
PUBLIC	??_C@_0BM@PPKFPLDI@destroying?5namespaces?5stack@ ; `string'
PUBLIC	??_C@_0BK@NHMKFMOM@adding?5namespace?5to?5stack@ ; `string'
PUBLIC	??_C@_0BF@EOOBKFEO@adding?5node?5to?5stack@	; `string'
PUBLIC	??_C@_0BI@JLOLEOEH@saving?5namespaces?5stack@	; `string'
PUBLIC	??_C@_0BL@NPMDIAFE@restoring?5namespaces?5stack@ ; `string'
PUBLIC	??_C@_0BK@IPHAMDHH@shifting?5namespaces?5stack@	; `string'
PUBLIC	??_C@_0CC@HHELCFAC@searching?5namespaces?5stack?5?$CIc14@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0CG@DGFPKBDK@searching?5namespaces?5stack?5?$CIexc@ ; `string'
PUBLIC	??_C@_03PJHHNEEI@xml@				; `string'
PUBLIC	??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@ ; `string'
PUBLIC	??_C@_0BD@MCMJLIHF@writing?5namespaces@		; `string'
PUBLIC	??_C@_07PMGDNCAE@?5xmlns?3@			; `string'
PUBLIC	??_C@_01NEMOKFLO@?$DN@				; `string'
PUBLIC	??_C@_07LDCCEEMD@?5xmlns?$DN@			; `string'
PUBLIC	??_C@_02JMMFPCED@?$CC?$CC@			; `string'
PUBLIC	??_C@_0CC@LGNLNPPM@processing?5namespaces?5axis?5?$CIc14@ ; `string'
PUBLIC	??_C@_0CA@IIFGGKIF@creating?5namespaces?5list?5?$CIc14n?$CJ@ ; `string'
PUBLIC	??_C@_0CG@HFJHEOJE@processing?5namespaces?5axis?5?$CIexc@ ; `string'
PUBLIC	??_C@_0CE@OPHJGGNE@creating?5namespaces?5list?5?$CIexc?5c@ ; `string'
PUBLIC	??_C@_08DCFPEJG@?$CDdefault@			; `string'
PUBLIC	??_C@_0BD@DDLFPEHD@writing?5attributes@		; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3@				; `string'
PUBLIC	??_C@_02ILLPBGAO@?$DN?$CC@			; `string'
PUBLIC	??_C@_0BM@MNCHFEBF@normalizing?5attributes?5axis@ ; `string'
PUBLIC	??_C@_01BJJEKLCA@?$CC@				; `string'
PUBLIC	??_C@_0BO@CEOJEMPO@processing?5xml?3base?5attribute@ ; `string'
PUBLIC	??_C@_0DF@JNOKNNOH@processing?5xml?3base?5attribute?5?9@ ; `string'
PUBLIC	??_C@_04BHIIPFEC@base@				; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_C@_0DB@PAHKMMOF@processing?5xml?3base?5attribute?5?9@ ; `string'
PUBLIC	??_C@_0DE@JBJEENHA@processing?5xml?3base?5attribute?5?9@ ; `string'
PUBLIC	??_C@_0DK@HPDOPNJC@processing?5xml?3base?5attribute?5?9@ ; `string'
PUBLIC	??_C@_0BL@BMIGCENJ@processing?5attributes?5axis@ ; `string'
PUBLIC	??_C@_0BJ@NCGHGLGP@creating?5attributes?5list@	; `string'
PUBLIC	??_C@_04IOHABJIC@lang@				; `string'
PUBLIC	??_C@_05OLNILLAB@space@				; `string'
PUBLIC	??_C@_0CB@NOENIPIC@checking?5for?5relative?5namespace@ ; `string'
PUBLIC	??_C@_0BG@JBCPGIOB@parsing?5namespace?5uri@	; `string'
PUBLIC	??_C@_0BI@JAMIDBLC@processing?5element?5node@	; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM@				; `string'
PUBLIC	??_C@_0BL@BCEIHHDE@processing?5namespaces?5axis@ ; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO@				; `string'
PUBLIC	??_C@_0BK@FJJBBBML@processing?5childrens?5list@	; `string'
PUBLIC	??_C@_02DPNDACHE@?$DM?1@			; `string'
PUBLIC	??_C@_0BA@KPMINAPM@processing?5node@		; `string'
PUBLIC	??_C@_0BG@FEJMMCLE@normalizing?5text?5node@	; `string'
PUBLIC	??_C@_03MEKJPGEP@?6?$DM?$DP@			; `string'
PUBLIC	??_C@_02HFBBBACF@?$DM?$DP@			; `string'
PUBLIC	??_C@_0BE@NALCHLAN@normalizing?5pi?5node@	; `string'
PUBLIC	??_C@_03KCOJOIAE@?$DP?$DO?6@			; `string'
PUBLIC	??_C@_02GOEMJPDN@?$DP?$DO@			; `string'
PUBLIC	??_C@_05IDEGGPLK@?6?$DM?$CB?9?9@		; `string'
PUBLIC	??_C@_04FFDNBKGC@?$DM?$CB?9?9@			; `string'
PUBLIC	??_C@_0BJ@MDKPFKCP@normalizing?5comment?5node@	; `string'
PUBLIC	??_C@_04IGMOLEKE@?9?9?$DO?6@			; `string'
PUBLIC	??_C@_03PNLDJJMO@?9?9?$DO@			; `string'
PUBLIC	??_C@_0BD@KCCEFDB@XML_ATTRIBUTE_NODE@		; `string'
PUBLIC	??_C@_0BD@OOHJMPDA@XML_NAMESPACE_DECL@		; `string'
PUBLIC	??_C@_0BE@NCHPKEOD@XML_ENTITY_REF_NODE@		; `string'
PUBLIC	??_C@_0BA@HBKNNEGK@XML_ENTITY_NODE@		; `string'
PUBLIC	??_C@_0BF@BNBHCOBD@processing?5node?5list@	; `string'
PUBLIC	??_C@_0BA@MKAAPEKK@freeing?5context@		; `string'
PUBLIC	??_C@_0BF@IOABGFCG@creating?5new?5context@	; `string'
PUBLIC	??_C@_0EM@ECCNBEBO@xmlC14NNewCtx?3?5output?5buffer?5en@ ; `string'
PUBLIC	??_C@_0BB@FCGDFAMA@creating?5context@		; `string'
PUBLIC	??_C@_0DD@MDGGAHKJ@xmlC14NNewCtx?3?5xmlC14NVisibleNs@ ; `string'
PUBLIC	??_C@_0P@IOGBMNPC@executing?5c14n@		; `string'
PUBLIC	??_C@_0CA@INCMFAFG@invalid?5mode?5for?5executing?5c14n@ ; `string'
PUBLIC	??_C@_0EN@NONIGHAH@xmlC14NExecute?3?5output?5buffer?5e@ ; `string'
PUBLIC	??_C@_0CP@LLPDGIDM@xmlC14NExecute?3?5unable?5to?5creat@ ; `string'
PUBLIC	??_C@_0BO@LANGFLMG@processing?5docs?5children?5list@ ; `string'
PUBLIC	??_C@_0BH@PKBMLLNP@flushing?5output?5buffer@	; `string'
PUBLIC	??_C@_0BG@JFDMFMGH@dumping?5doc?5to?5memory@	; `string'
PUBLIC	??_C@_0BH@JBBBCCHB@creating?5output?5buffer@	; `string'
PUBLIC	??_C@_0BM@DBHHIABI@saving?5doc?5to?5output?5buffer@ ; `string'
PUBLIC	??_C@_0BO@FJFGKMEA@coping?5canonicanized?5document@ ; `string'
PUBLIC	??_C@_0L@DHCGOHBD@saving?5doc@			; `string'
PUBLIC	??_C@_0BM@LBLOCGLL@creating?5temporary?5filename@ ; `string'
PUBLIC	??_C@_0BP@ODPNHIDP@cannicanize?5document?5to?5buffer@ ; `string'
PUBLIC	??_C@_0BC@MDOPFBLJ@allocating?5buffer@		; `string'
PUBLIC	??_C@_0P@LKGMENGP@growing?5buffer@		; `string'
EXTRN	_xmlStrndup:PROC
EXTRN	_xmlStrcmp:PROC
EXTRN	_xmlStrEqual:PROC
EXTRN	_xmlStrlen:PROC
EXTRN	_xmlStrcat:PROC
EXTRN	_xmlBufContent:PROC
EXTRN	_xmlBufUse:PROC
EXTRN	_xmlNewNsProp:PROC
EXTRN	_xmlFreePropList:PROC
EXTRN	_xmlSearchNs:PROC
EXTRN	_xmlHasNsProp:PROC
EXTRN	_xmlNodeListGetString:PROC
EXTRN	_xmlGetCompressMode:PROC
EXTRN	___xmlRaiseError:PROC
EXTRN	_xmlListCreate:PROC
EXTRN	_xmlListDelete:PROC
EXTRN	_xmlListSearch:PROC
EXTRN	_xmlListInsert:PROC
EXTRN	_xmlListWalk:PROC
EXTRN	_xmlAllocOutputBuffer:PROC
EXTRN	_xmlOutputBufferCreateFilename:PROC
EXTRN	_xmlOutputBufferWriteString:PROC
EXTRN	_xmlOutputBufferFlush:PROC
EXTRN	_xmlOutputBufferClose:PROC
EXTRN	_xmlBuildURI:PROC
EXTRN	_xmlParseURI:PROC
EXTRN	_xmlFreeURI:PROC
EXTRN	_xmlXPathNodeSetContains:PROC
EXTRN	_xmlBufWriteQuotedString:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
_BSS	SEGMENT
?ns_default@?N@??xmlC14NProcessNamespacesAxis@@9@9 DB 018H DUP (?) ; `xmlC14NProcessNamespacesAxis'::`13'::ns_default
?ns_default@?BL@??xmlExcC14NProcessNamespacesAxis@@9@9 DB 018H DUP (?) ; `xmlExcC14NProcessNamespacesAxis'::`27'::ns_default
?ns_default@?BN@??xmlExcC14NProcessNamespacesAxis@@9@9 DB 018H DUP (?) ; `xmlExcC14NProcessNamespacesAxis'::`29'::ns_default
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0P@LKGMENGP@growing?5buffer@
CONST	SEGMENT
??_C@_0P@LKGMENGP@growing?5buffer@ DB 'growing buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MDOPFBLJ@allocating?5buffer@
CONST	SEGMENT
??_C@_0BC@MDOPFBLJ@allocating?5buffer@ DB 'allocating buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@ODPNHIDP@cannicanize?5document?5to?5buffer@
CONST	SEGMENT
??_C@_0BP@ODPNHIDP@cannicanize?5document?5to?5buffer@ DB 'cannicanize doc'
	DB	'ument to buffer', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LBLOCGLL@creating?5temporary?5filename@
CONST	SEGMENT
??_C@_0BM@LBLOCGLL@creating?5temporary?5filename@ DB 'creating temporary '
	DB	'filename', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHCGOHBD@saving?5doc@
CONST	SEGMENT
??_C@_0L@DHCGOHBD@saving?5doc@ DB 'saving doc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@FJFGKMEA@coping?5canonicanized?5document@
CONST	SEGMENT
??_C@_0BO@FJFGKMEA@coping?5canonicanized?5document@ DB 'coping canonicani'
	DB	'zed document', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DBHHIABI@saving?5doc?5to?5output?5buffer@
CONST	SEGMENT
??_C@_0BM@DBHHIABI@saving?5doc?5to?5output?5buffer@ DB 'saving doc to out'
	DB	'put buffer', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JBBBCCHB@creating?5output?5buffer@
CONST	SEGMENT
??_C@_0BH@JBBBCCHB@creating?5output?5buffer@ DB 'creating output buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JFDMFMGH@dumping?5doc?5to?5memory@
CONST	SEGMENT
??_C@_0BG@JFDMFMGH@dumping?5doc?5to?5memory@ DB 'dumping doc to memory', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PKBMLLNP@flushing?5output?5buffer@
CONST	SEGMENT
??_C@_0BH@PKBMLLNP@flushing?5output?5buffer@ DB 'flushing output buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LANGFLMG@processing?5docs?5children?5list@
CONST	SEGMENT
??_C@_0BO@LANGFLMG@processing?5docs?5children?5list@ DB 'processing docs '
	DB	'children list', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@LLPDGIDM@xmlC14NExecute?3?5unable?5to?5creat@
CONST	SEGMENT
??_C@_0CP@LLPDGIDM@xmlC14NExecute?3?5unable?5to?5creat@ DB 'xmlC14NExecut'
	DB	'e: unable to create C14N context', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@NONIGHAH@xmlC14NExecute?3?5output?5buffer?5e@
CONST	SEGMENT
??_C@_0EN@NONIGHAH@xmlC14NExecute?3?5output?5buffer?5e@ DB 'xmlC14NExecut'
	DB	'e: output buffer encoder != NULL but C14N requires UTF8 outpu'
	DB	't', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@INCMFAFG@invalid?5mode?5for?5executing?5c14n@
CONST	SEGMENT
??_C@_0CA@INCMFAFG@invalid?5mode?5for?5executing?5c14n@ DB 'invalid mode '
	DB	'for executing c14n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IOGBMNPC@executing?5c14n@
CONST	SEGMENT
??_C@_0P@IOGBMNPC@executing?5c14n@ DB 'executing c14n', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MDGGAHKJ@xmlC14NNewCtx?3?5xmlC14NVisibleNs@
CONST	SEGMENT
??_C@_0DD@MDGGAHKJ@xmlC14NNewCtx?3?5xmlC14NVisibleNs@ DB 'xmlC14NNewCtx: '
	DB	'xmlC14NVisibleNsStackCreate failed', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FCGDFAMA@creating?5context@
CONST	SEGMENT
??_C@_0BB@FCGDFAMA@creating?5context@ DB 'creating context', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@ECCNBEBO@xmlC14NNewCtx?3?5output?5buffer?5en@
CONST	SEGMENT
??_C@_0EM@ECCNBEBO@xmlC14NNewCtx?3?5output?5buffer?5en@ DB 'xmlC14NNewCtx'
	DB	': output buffer encoder != NULL but C14N requires UTF8 output'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IOABGFCG@creating?5new?5context@
CONST	SEGMENT
??_C@_0BF@IOABGFCG@creating?5new?5context@ DB 'creating new context', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MKAAPEKK@freeing?5context@
CONST	SEGMENT
??_C@_0BA@MKAAPEKK@freeing?5context@ DB 'freeing context', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BNBHCOBD@processing?5node?5list@
CONST	SEGMENT
??_C@_0BF@BNBHCOBD@processing?5node?5list@ DB 'processing node list', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HBKNNEGK@XML_ENTITY_NODE@
CONST	SEGMENT
??_C@_0BA@HBKNNEGK@XML_ENTITY_NODE@ DB 'XML_ENTITY_NODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NCHPKEOD@XML_ENTITY_REF_NODE@
CONST	SEGMENT
??_C@_0BE@NCHPKEOD@XML_ENTITY_REF_NODE@ DB 'XML_ENTITY_REF_NODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OOHJMPDA@XML_NAMESPACE_DECL@
CONST	SEGMENT
??_C@_0BD@OOHJMPDA@XML_NAMESPACE_DECL@ DB 'XML_NAMESPACE_DECL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KCCEFDB@XML_ATTRIBUTE_NODE@
CONST	SEGMENT
??_C@_0BD@KCCEFDB@XML_ATTRIBUTE_NODE@ DB 'XML_ATTRIBUTE_NODE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03PNLDJJMO@?9?9?$DO@
CONST	SEGMENT
??_C@_03PNLDJJMO@?9?9?$DO@ DB '-->', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IGMOLEKE@?9?9?$DO?6@
CONST	SEGMENT
??_C@_04IGMOLEKE@?9?9?$DO?6@ DB '-->', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MDKPFKCP@normalizing?5comment?5node@
CONST	SEGMENT
??_C@_0BJ@MDKPFKCP@normalizing?5comment?5node@ DB 'normalizing comment no'
	DB	'de', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04FFDNBKGC@?$DM?$CB?9?9@
CONST	SEGMENT
??_C@_04FFDNBKGC@?$DM?$CB?9?9@ DB '<!--', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDEGGPLK@?6?$DM?$CB?9?9@
CONST	SEGMENT
??_C@_05IDEGGPLK@?6?$DM?$CB?9?9@ DB 0aH, '<!--', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02GOEMJPDN@?$DP?$DO@
CONST	SEGMENT
??_C@_02GOEMJPDN@?$DP?$DO@ DB '?>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCOJOIAE@?$DP?$DO?6@
CONST	SEGMENT
??_C@_03KCOJOIAE@?$DP?$DO?6@ DB '?>', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NALCHLAN@normalizing?5pi?5node@
CONST	SEGMENT
??_C@_0BE@NALCHLAN@normalizing?5pi?5node@ DB 'normalizing pi node', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02HFBBBACF@?$DM?$DP@
CONST	SEGMENT
??_C@_02HFBBBACF@?$DM?$DP@ DB '<?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MEKJPGEP@?6?$DM?$DP@
CONST	SEGMENT
??_C@_03MEKJPGEP@?6?$DM?$DP@ DB 0aH, '<?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FEJMMCLE@normalizing?5text?5node@
CONST	SEGMENT
??_C@_0BG@FEJMMCLE@normalizing?5text?5node@ DB 'normalizing text node', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KPMINAPM@processing?5node@
CONST	SEGMENT
??_C@_0BA@KPMINAPM@processing?5node@ DB 'processing node', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPNDACHE@?$DM?1@
CONST	SEGMENT
??_C@_02DPNDACHE@?$DM?1@ DB '</', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FJJBBBML@processing?5childrens?5list@
CONST	SEGMENT
??_C@_0BK@FJJBBBML@processing?5childrens?5list@ DB 'processing childrens '
	DB	'list', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BCEIHHDE@processing?5namespaces?5axis@
CONST	SEGMENT
??_C@_0BL@BCEIHHDE@processing?5namespaces?5axis@ DB 'processing namespace'
	DB	's axis', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JAMIDBLC@processing?5element?5node@
CONST	SEGMENT
??_C@_0BI@JAMIDBLC@processing?5element?5node@ DB 'processing element node'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JBCPGIOB@parsing?5namespace?5uri@
CONST	SEGMENT
??_C@_0BG@JBCPGIOB@parsing?5namespace?5uri@ DB 'parsing namespace uri', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NOENIPIC@checking?5for?5relative?5namespace@
CONST	SEGMENT
??_C@_0CB@NOENIPIC@checking?5for?5relative?5namespace@ DB 'checking for r'
	DB	'elative namespaces', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLNILLAB@space@
CONST	SEGMENT
??_C@_05OLNILLAB@space@ DB 'space', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04IOHABJIC@lang@
CONST	SEGMENT
??_C@_04IOHABJIC@lang@ DB 'lang', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NCGHGLGP@creating?5attributes?5list@
CONST	SEGMENT
??_C@_0BJ@NCGHGLGP@creating?5attributes?5list@ DB 'creating attributes li'
	DB	'st', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BMIGCENJ@processing?5attributes?5axis@
CONST	SEGMENT
??_C@_0BL@BMIGCENJ@processing?5attributes?5axis@ DB 'processing attribute'
	DB	's axis', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@HPDOPNJC@processing?5xml?3base?5attribute?5?9@
CONST	SEGMENT
??_C@_0DK@HPDOPNJC@processing?5xml?3base?5attribute?5?9@ DB 'processing x'
	DB	'ml:base attribute - can''t construct attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JBJEENHA@processing?5xml?3base?5attribute?5?9@
CONST	SEGMENT
??_C@_0DE@JBJEENHA@processing?5xml?3base?5attribute?5?9@ DB 'processing x'
	DB	'ml:base attribute - can''t construct uri', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@PAHKMMOF@processing?5xml?3base?5attribute?5?9@
CONST	SEGMENT
??_C@_0DB@PAHKMMOF@processing?5xml?3base?5attribute?5?9@ DB 'processing x'
	DB	'ml:base attribute - can''t modify uri', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BHIIPFEC@base@
CONST	SEGMENT
??_C@_04BHIIPFEC@base@ DB 'base', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@JNOKNNOH@processing?5xml?3base?5attribute?5?9@
CONST	SEGMENT
??_C@_0DF@JNOKNNOH@processing?5xml?3base?5attribute?5?9@ DB 'processing x'
	DB	'ml:base attribute - can''t get attr value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CEOJEMPO@processing?5xml?3base?5attribute@
CONST	SEGMENT
??_C@_0BO@CEOJEMPO@processing?5xml?3base?5attribute@ DB 'processing xml:b'
	DB	'ase attribute', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01BJJEKLCA@?$CC@
CONST	SEGMENT
??_C@_01BJJEKLCA@?$CC@ DB '"', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MNCHFEBF@normalizing?5attributes?5axis@
CONST	SEGMENT
??_C@_0BM@MNCHFEBF@normalizing?5attributes?5axis@ DB 'normalizing attribu'
	DB	'tes axis', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02ILLPBGAO@?$DN?$CC@
CONST	SEGMENT
??_C@_02ILLPBGAO@?$DN?$CC@ DB '="', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DDLFPEHD@writing?5attributes@
CONST	SEGMENT
??_C@_0BD@DDLFPEHD@writing?5attributes@ DB 'writing attributes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCFPEJG@?$CDdefault@
CONST	SEGMENT
??_C@_08DCFPEJG@?$CDdefault@ DB '#default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OPHJGGNE@creating?5namespaces?5list?5?$CIexc?5c@
CONST	SEGMENT
??_C@_0CE@OPHJGGNE@creating?5namespaces?5list?5?$CIexc?5c@ DB 'creating n'
	DB	'amespaces list (exc c14n)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HFJHEOJE@processing?5namespaces?5axis?5?$CIexc@
CONST	SEGMENT
??_C@_0CG@HFJHEOJE@processing?5namespaces?5axis?5?$CIexc@ DB 'processing '
	DB	'namespaces axis (exc c14n)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IIFGGKIF@creating?5namespaces?5list?5?$CIc14n?$CJ@
CONST	SEGMENT
??_C@_0CA@IIFGGKIF@creating?5namespaces?5list?5?$CIc14n?$CJ@ DB 'creating'
	DB	' namespaces list (c14n)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LGNLNPPM@processing?5namespaces?5axis?5?$CIc14@
CONST	SEGMENT
??_C@_0CC@LGNLNPPM@processing?5namespaces?5axis?5?$CIc14@ DB 'processing '
	DB	'namespaces axis (c14n)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02JMMFPCED@?$CC?$CC@
CONST	SEGMENT
??_C@_02JMMFPCED@?$CC?$CC@ DB '""', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LDCCEEMD@?5xmlns?$DN@
CONST	SEGMENT
??_C@_07LDCCEEMD@?5xmlns?$DN@ DB ' xmlns=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01NEMOKFLO@?$DN@
CONST	SEGMENT
??_C@_01NEMOKFLO@?$DN@ DB '=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PMGDNCAE@?5xmlns?3@
CONST	SEGMENT
??_C@_07PMGDNCAE@?5xmlns?3@ DB ' xmlns:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MCMJLIHF@writing?5namespaces@
CONST	SEGMENT
??_C@_0BD@MCMJLIHF@writing?5namespaces@ DB 'writing namespaces', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@
CONST	SEGMENT
??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@ DB 'http://ww'
	DB	'w.w3.org/XML/1998/namespace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PJHHNEEI@xml@
CONST	SEGMENT
??_C@_03PJHHNEEI@xml@ DB 'xml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DGFPKBDK@searching?5namespaces?5stack?5?$CIexc@
CONST	SEGMENT
??_C@_0CG@DGFPKBDK@searching?5namespaces?5stack?5?$CIexc@ DB 'searching n'
	DB	'amespaces stack (exc c14n)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HHELCFAC@searching?5namespaces?5stack?5?$CIc14@
CONST	SEGMENT
??_C@_0CC@HHELCFAC@searching?5namespaces?5stack?5?$CIc14@ DB 'searching n'
	DB	'amespaces stack (c14n)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IPHAMDHH@shifting?5namespaces?5stack@
CONST	SEGMENT
??_C@_0BK@IPHAMDHH@shifting?5namespaces?5stack@ DB 'shifting namespaces s'
	DB	'tack', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NPMDIAFE@restoring?5namespaces?5stack@
CONST	SEGMENT
??_C@_0BL@NPMDIAFE@restoring?5namespaces?5stack@ DB 'restoring namespaces'
	DB	' stack', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JLOLEOEH@saving?5namespaces?5stack@
CONST	SEGMENT
??_C@_0BI@JLOLEOEH@saving?5namespaces?5stack@ DB 'saving namespaces stack'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOOBKFEO@adding?5node?5to?5stack@
CONST	SEGMENT
??_C@_0BF@EOOBKFEO@adding?5node?5to?5stack@ DB 'adding node to stack', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NHMKFMOM@adding?5namespace?5to?5stack@
CONST	SEGMENT
??_C@_0BK@NHMKFMOM@adding?5namespace?5to?5stack@ DB 'adding namespace to '
	DB	'stack', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@PPKFPLDI@destroying?5namespaces?5stack@
CONST	SEGMENT
??_C@_0BM@PPKFPLDI@destroying?5namespaces?5stack@ DB 'destroying namespac'
	DB	'es stack', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MOKDAME@creating?5namespaces?5stack@
CONST	SEGMENT
??_C@_0BK@MOKDAME@creating?5namespaces?5stack@ DB 'creating namespaces st'
	DB	'ack', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HOAPKNKJ@Relative?5namespace?5UR?5is?5invali@
CONST	SEGMENT
??_C@_0CM@HOAPKNKJ@Relative?5namespace?5UR?5is?5invali@ DB 'Relative name'
	DB	'space UR is invalid here : %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LPHDJOLE@Unknown?5node?5type?5?$CFd?5found?5?3?5?$CFs@
CONST	SEGMENT
??_C@_0CB@LPHDJOLE@Unknown?5node?5type?5?$CFd?5found?5?3?5?$CFs@ DB 'Unkn'
	DB	'own node type %d found : %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DIKCFALP@Node?5?$CFs?5is?5invalid?5here?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BO@DIKCFALP@Node?5?$CFs?5is?5invalid?5here?5?3?5?$CFs?6@ DB 'Node '
	DB	'%s is invalid here : %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KAEIDNN@Internal?5error?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BF@KAEIDNN@Internal?5error?5?3?5?$CFs?6@ DB 'Internal error : %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NBDMDFEL@Invalid?5parameter?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BI@NBDMDFEL@Invalid?5parameter?5?3?5?$CFs?6@ DB 'Invalid parameter'
	DB	' : %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ DB 'Memory al'
	DB	'location failed : %s', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NNewCtx
_TEXT	SEGMENT
_ctx$ = -4						; size = 4
_doc$ = 8						; size = 4
_is_visible_callback$ = 12				; size = 4
_user_data$ = 16					; size = 4
_mode$ = 20						; size = 4
_inclusive_ns_prefixes$ = 24				; size = 4
_with_comments$ = 28					; size = 4
_buf$ = 32						; size = 4
_xmlC14NNewCtx PROC					; COMDAT

; 1783 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1784 :     xmlC14NCtxPtr ctx = NULL;

	mov	DWORD PTR _ctx$[ebp], 0

; 1785 : 
; 1786 :     if ((doc == NULL) || (buf == NULL)) {

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN3@xmlC14NNew
	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN2@xmlC14NNew
$LN3@xmlC14NNew:

; 1787 :         xmlC14NErrParam("creating new context");

	push	OFFSET ??_C@_0BF@IOABGFCG@creating?5new?5context@
	call	_xmlC14NErrParam
	add	esp, 4

; 1788 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC14NNew
$LN2@xmlC14NNew:

; 1789 :     }
; 1790 : 
; 1791 :     /*
; 1792 :      *  Validate the encoding output buffer encoding
; 1793 :      */
; 1794 :     if (buf->encoder != NULL) {

	mov	eax, DWORD PTR _buf$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@xmlC14NNew

; 1795 :         xmlC14NErr(ctx, (xmlNodePtr) doc, XML_C14N_REQUIRES_UTF8,

	push	OFFSET ??_C@_0EM@ECCNBEBO@xmlC14NNewCtx?3?5output?5buffer?5en@
	push	1951					; 0000079fH
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_xmlC14NErr
	add	esp, 16					; 00000010H

; 1796 : "xmlC14NNewCtx: output buffer encoder != NULL but C14N requires UTF8 output\n");
; 1797 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC14NNew
$LN4@xmlC14NNew:

; 1798 :     }
; 1799 : 
; 1800 :     /*
; 1801 :      * Allocate a new xmlC14NCtxPtr and fill the fields.
; 1802 :      */
; 1803 :     ctx = (xmlC14NCtxPtr) xmlMalloc(sizeof(xmlC14NCtx));

	mov	esi, esp
	push	44					; 0000002cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ctx$[ebp], eax

; 1804 :     if (ctx == NULL) {

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@xmlC14NNew

; 1805 : 	xmlC14NErrMemory("creating context");

	push	OFFSET ??_C@_0BB@FCGDFAMA@creating?5context@
	call	_xmlC14NErrMemory
	add	esp, 4

; 1806 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC14NNew
$LN5@xmlC14NNew:

; 1807 :     }
; 1808 :     memset(ctx, 0, sizeof(xmlC14NCtx));

	push	44					; 0000002cH
	push	0
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1809 : 
; 1810 :     /*
; 1811 :      * initialize C14N context
; 1812 :      */
; 1813 :     ctx->doc = doc;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [ecx], edx

; 1814 :     ctx->with_comments = with_comments;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _with_comments$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 1815 :     ctx->is_visible_callback = is_visible_callback;

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _is_visible_callback$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1816 :     ctx->user_data = user_data;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR _user_data$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 1817 :     ctx->buf = buf;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1818 :     ctx->parent_is_doc = 1;

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+24], 1

; 1819 :     ctx->pos = XMLC14N_BEFORE_DOCUMENT_ELEMENT;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1820 :     ctx->ns_rendered = xmlC14NVisibleNsStackCreate();

	call	_xmlC14NVisibleNsStackCreate
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+28], eax

; 1821 : 
; 1822 :     if(ctx->ns_rendered == NULL) {

	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN6@xmlC14NNew

; 1823 :         xmlC14NErr(ctx, (xmlNodePtr) doc, XML_C14N_CREATE_STACK,

	push	OFFSET ??_C@_0DD@MDGGAHKJ@xmlC14NNewCtx?3?5xmlC14NVisibleNs@
	push	1952					; 000007a0H
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_xmlC14NErr
	add	esp, 16					; 00000010H

; 1824 : 		   "xmlC14NNewCtx: xmlC14NVisibleNsStackCreate failed\n");
; 1825 : 	xmlC14NFreeCtx(ctx);

	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_xmlC14NFreeCtx
	add	esp, 4

; 1826 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlC14NNew
$LN6@xmlC14NNew:

; 1827 :     }
; 1828 : 
; 1829 :     /*
; 1830 :      * Set "mode" flag and remember list of incluseve prefixes
; 1831 :      * for exclusive c14n
; 1832 :      */
; 1833 :     ctx->mode = mode;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 1834 :     if(xmlC14NIsExclusive(ctx)) {

	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+32], 1
	jne	SHORT $LN7@xmlC14NNew

; 1835 :         ctx->inclusive_ns_prefixes = inclusive_ns_prefixes;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _inclusive_ns_prefixes$[ebp]
	mov	DWORD PTR [eax+36], ecx
$LN7@xmlC14NNew:

; 1836 :     }
; 1837 :     return (ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
$LN1@xmlC14NNew:

; 1838 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NNewCtx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NFreeCtx
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_xmlC14NFreeCtx PROC					; COMDAT

; 1745 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1746 :     if (ctx == NULL) {

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlC14NFre

; 1747 :         xmlC14NErrParam("freeing context");

	push	OFFSET ??_C@_0BA@MKAAPEKK@freeing?5context@
	call	_xmlC14NErrParam
	add	esp, 4

; 1748 :         return;

	jmp	SHORT $LN1@xmlC14NFre
$LN2@xmlC14NFre:

; 1749 :     }
; 1750 : 
; 1751 :     if (ctx->ns_rendered != NULL) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN3@xmlC14NFre

; 1752 :         xmlC14NVisibleNsStackDestroy(ctx->ns_rendered);

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlC14NVisibleNsStackDestroy
	add	esp, 4
$LN3@xmlC14NFre:

; 1753 :     }
; 1754 :     xmlFree(ctx);

	mov	esi, esp
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlC14NFre:

; 1755 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NFreeCtx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NProcessElementNode
_TEXT	SEGMENT
_parent_is_doc$ = -40					; size = 4
_state$ = -32						; size = 24
_ret$ = -4						; size = 4
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_visible$ = 16						; size = 4
_xmlC14NProcessElementNode PROC				; COMDAT

; 1422 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1423 :     int ret;
; 1424 :     xmlC14NVisibleNsStack state;
; 1425 :     int parent_is_doc = 0;

	mov	DWORD PTR _parent_is_doc$[ebp], 0

; 1426 : 
; 1427 :     if ((ctx == NULL) || (cur == NULL) || (cur->type != XML_ELEMENT_NODE)) {

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@xmlC14NPro
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlC14NPro
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN2@xmlC14NPro
$LN3@xmlC14NPro:

; 1428 :         xmlC14NErrParam("processing element node");

	push	OFFSET ??_C@_0BI@JAMIDBLC@processing?5element?5node@
	call	_xmlC14NErrParam
	add	esp, 4

; 1429 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN2@xmlC14NPro:

; 1430 :     }
; 1431 : 
; 1432 :     /*
; 1433 :      * Check relative relative namespaces:
; 1434 :      * implementations of XML canonicalization MUST report an operation
; 1435 :      * failure on documents containing relative namespace URIs.
; 1436 :      */
; 1437 :     if (xmlC14NCheckForRelativeNamespaces(ctx, cur) < 0) {

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_xmlC14NCheckForRelativeNamespaces
	add	esp, 8
	test	eax, eax
	jge	SHORT $LN4@xmlC14NPro

; 1438 :         xmlC14NErrInternal("checking for relative namespaces");

	push	OFFSET ??_C@_0CB@NOENIPIC@checking?5for?5relative?5namespace@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1439 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN4@xmlC14NPro:

; 1440 :     }
; 1441 : 
; 1442 : 
; 1443 :     /*
; 1444 :      * Save ns_rendered stack position
; 1445 :      */
; 1446 :     memset(&state, 0, sizeof(state));

	xor	eax, eax
	mov	DWORD PTR _state$[ebp], eax
	mov	DWORD PTR _state$[ebp+4], eax
	mov	DWORD PTR _state$[ebp+8], eax
	mov	DWORD PTR _state$[ebp+12], eax
	mov	DWORD PTR _state$[ebp+16], eax
	mov	DWORD PTR _state$[ebp+20], eax

; 1447 :     xmlC14NVisibleNsStackSave(ctx->ns_rendered, &state);

	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_xmlC14NVisibleNsStackSave
	add	esp, 8

; 1448 : 
; 1449 :     if (visible) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	$LN5@xmlC14NPro

; 1450 :         if (ctx->parent_is_doc) {

	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN6@xmlC14NPro

; 1451 : 	    /* save this flag into the stack */
; 1452 : 	    parent_is_doc = ctx->parent_is_doc;

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _parent_is_doc$[ebp], eax

; 1453 : 	    ctx->parent_is_doc = 0;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+24], 0

; 1454 :             ctx->pos = XMLC14N_INSIDE_DOCUMENT_ELEMENT;

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+20], 1
$LN6@xmlC14NPro:

; 1455 :         }
; 1456 :         xmlOutputBufferWriteString(ctx->buf, "<");

	push	OFFSET ??_C@_01MNNFJEPP@?$DM@
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1457 : 
; 1458 :         if ((cur->ns != NULL) && (xmlStrlen(cur->ns->prefix) > 0)) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN7@xmlC14NPro
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN7@xmlC14NPro

; 1459 :             xmlOutputBufferWriteString(ctx->buf,

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1460 :                                        (const char *) cur->ns->prefix);
; 1461 :             xmlOutputBufferWriteString(ctx->buf, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN7@xmlC14NPro:

; 1462 :         }
; 1463 :         xmlOutputBufferWriteString(ctx->buf, (const char *) cur->name);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN5@xmlC14NPro:

; 1464 :     }
; 1465 : 
; 1466 :     if (!xmlC14NIsExclusive(ctx)) {

	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+32], 1
	je	SHORT $LN8@xmlC14NPro

; 1467 :         ret = xmlC14NProcessNamespacesAxis(ctx, cur, visible);

	mov	eax, DWORD PTR _visible$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_xmlC14NProcessNamespacesAxis
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 1468 :     } else {

	jmp	SHORT $LN9@xmlC14NPro
$LN8@xmlC14NPro:

; 1469 :         ret = xmlExcC14NProcessNamespacesAxis(ctx, cur, visible);

	mov	eax, DWORD PTR _visible$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_xmlExcC14NProcessNamespacesAxis
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN9@xmlC14NPro:

; 1470 :     }
; 1471 :     if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN10@xmlC14NPro

; 1472 :         xmlC14NErrInternal("processing namespaces axis");

	push	OFFSET ??_C@_0BL@BCEIHHDE@processing?5namespaces?5axis@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1473 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN10@xmlC14NPro:

; 1474 :     }
; 1475 :     /* todo: shouldn't this go to "visible only"? */
; 1476 :     if(visible) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN11@xmlC14NPro

; 1477 : 	xmlC14NVisibleNsStackShift(ctx->ns_rendered);

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_xmlC14NVisibleNsStackShift
	add	esp, 4
$LN11@xmlC14NPro:

; 1478 :     }
; 1479 : 
; 1480 :     ret = xmlC14NProcessAttrsAxis(ctx, cur, visible);

	mov	edx, DWORD PTR _visible$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_xmlC14NProcessAttrsAxis
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 1481 :     if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN12@xmlC14NPro

; 1482 : 	xmlC14NErrInternal("processing attributes axis");

	push	OFFSET ??_C@_0BL@BMIGCENJ@processing?5attributes?5axis@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1483 : 	return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN12@xmlC14NPro:

; 1484 :     }
; 1485 : 
; 1486 :     if (visible) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN13@xmlC14NPro

; 1487 :         xmlOutputBufferWriteString(ctx->buf, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN13@xmlC14NPro:

; 1488 :     }
; 1489 :     if (cur->children != NULL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN14@xmlC14NPro

; 1490 :         ret = xmlC14NProcessNodeList(ctx, cur->children);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_xmlC14NProcessNodeList
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 1491 :         if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN14@xmlC14NPro

; 1492 :             xmlC14NErrInternal("processing childrens list");

	push	OFFSET ??_C@_0BK@FJJBBBML@processing?5childrens?5list@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1493 :             return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN14@xmlC14NPro:

; 1494 :         }
; 1495 :     }
; 1496 :     if (visible) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	$LN16@xmlC14NPro

; 1497 :         xmlOutputBufferWriteString(ctx->buf, "</");

	push	OFFSET ??_C@_02DPNDACHE@?$DM?1@
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1498 :         if ((cur->ns != NULL) && (xmlStrlen(cur->ns->prefix) > 0)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN17@xmlC14NPro
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN17@xmlC14NPro

; 1499 :             xmlOutputBufferWriteString(ctx->buf,

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1500 :                                        (const char *) cur->ns->prefix);
; 1501 :             xmlOutputBufferWriteString(ctx->buf, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN17@xmlC14NPro:

; 1502 :         }
; 1503 :         xmlOutputBufferWriteString(ctx->buf, (const char *) cur->name);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1504 :         xmlOutputBufferWriteString(ctx->buf, ">");

	push	OFFSET ??_C@_01PPODPGHN@?$DO@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1505 :         if (parent_is_doc) {

	cmp	DWORD PTR _parent_is_doc$[ebp], 0
	je	SHORT $LN16@xmlC14NPro

; 1506 : 	    /* restore this flag from the stack for next node */
; 1507 :             ctx->parent_is_doc = parent_is_doc;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR _parent_is_doc$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 1508 : 	    ctx->pos = XMLC14N_AFTER_DOCUMENT_ELEMENT;

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [edx+20], 2
$LN16@xmlC14NPro:

; 1509 :         }
; 1510 :     }
; 1511 : 
; 1512 :     /*
; 1513 :      * Restore ns_rendered stack position
; 1514 :      */
; 1515 :     xmlC14NVisibleNsStackRestore(ctx->ns_rendered, &state);

	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlC14NVisibleNsStackRestore
	add	esp, 8

; 1516 :     return (0);

	xor	eax, eax
$LN1@xmlC14NPro:

; 1517 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@xmlC14NPro
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN22@xmlC14NPro:
	DD	1
	DD	$LN21@xmlC14NPro
$LN21@xmlC14NPro:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN20@xmlC14NPro
$LN20@xmlC14NPro:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
_xmlC14NProcessElementNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NCheckForRelativeNamespaces
_TEXT	SEGMENT
_uri$1 = -8						; size = 4
_ns$ = -4						; size = 4
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlC14NCheckForRelativeNamespaces PROC			; COMDAT

; 1367 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1368 :     xmlNsPtr ns;
; 1369 : 
; 1370 :     if ((ctx == NULL) || (cur == NULL) || (cur->type != XML_ELEMENT_NODE)) {

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN5@xmlC14NChe
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN5@xmlC14NChe
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN4@xmlC14NChe
$LN5@xmlC14NChe:

; 1371 :         xmlC14NErrParam("checking for relative namespaces");

	push	OFFSET ??_C@_0CB@NOENIPIC@checking?5for?5relative?5namespace@
	call	_xmlC14NErrParam
	add	esp, 4

; 1372 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NChe
$LN4@xmlC14NChe:

; 1373 :     }
; 1374 : 
; 1375 :     ns = cur->nsDef;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _ns$[ebp], edx
$LN2@xmlC14NChe:

; 1376 :     while (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN3@xmlC14NChe

; 1377 :         if (xmlStrlen(ns->href) > 0) {

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN6@xmlC14NChe

; 1378 :             xmlURIPtr uri;
; 1379 : 
; 1380 :             uri = xmlParseURI((const char *) ns->href);

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlParseURI
	add	esp, 4
	mov	DWORD PTR _uri$1[ebp], eax

; 1381 :             if (uri == NULL) {

	cmp	DWORD PTR _uri$1[ebp], 0
	jne	SHORT $LN7@xmlC14NChe

; 1382 :                 xmlC14NErrInternal("parsing namespace uri");

	push	OFFSET ??_C@_0BG@JBCPGIOB@parsing?5namespace?5uri@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1383 :                 return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NChe
$LN7@xmlC14NChe:

; 1384 :             }
; 1385 :             if (xmlStrlen((const xmlChar *) uri->scheme) == 0) {

	mov	ecx, DWORD PTR _uri$1[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN8@xmlC14NChe

; 1386 :                 xmlC14NErrRelativeNamespace(uri->scheme);

	mov	eax, DWORD PTR _uri$1[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlC14NErrRelativeNamespace
	add	esp, 4

; 1387 :                 xmlFreeURI(uri);

	mov	edx, DWORD PTR _uri$1[ebp]
	push	edx
	call	_xmlFreeURI
	add	esp, 4

; 1388 :                 return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NChe
$LN8@xmlC14NChe:

; 1389 :             }
; 1390 :             xmlFreeURI(uri);

	mov	eax, DWORD PTR _uri$1[ebp]
	push	eax
	call	_xmlFreeURI
	add	esp, 4
$LN6@xmlC14NChe:

; 1391 :         }
; 1392 :         ns = ns->next;

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ns$[ebp], edx

; 1393 :     }

	jmp	$LN2@xmlC14NChe
$LN3@xmlC14NChe:

; 1394 :     return (0);

	xor	eax, eax
$LN1@xmlC14NChe:

; 1395 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NCheckForRelativeNamespaces ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NProcessAttrsAxis
_TEXT	SEGMENT
tv217 = -56						; size = 4
tv183 = -52						; size = 4
tv164 = -48						; size = 4
tv137 = -44						; size = 4
tv86 = -40						; size = 4
tv75 = -36						; size = 4
_matched$1 = -32					; size = 4
_tmp$2 = -28						; size = 4
_xml_space_attr$ = -24					; size = 4
_xml_lang_attr$ = -20					; size = 4
_xml_base_attr$ = -16					; size = 4
_attrs_to_delete$ = -12					; size = 4
_list$ = -8						; size = 4
_attr$ = -4						; size = 4
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_parent_visible$ = 16					; size = 4
_xmlC14NProcessAttrsAxis PROC				; COMDAT

; 1139 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1140 :     xmlAttrPtr attr;
; 1141 :     xmlListPtr list;
; 1142 :     xmlAttrPtr attrs_to_delete = NULL;

	mov	DWORD PTR _attrs_to_delete$[ebp], 0

; 1143 : 
; 1144 :     /* special processing for 1.1 spec */
; 1145 :     xmlAttrPtr xml_base_attr = NULL;

	mov	DWORD PTR _xml_base_attr$[ebp], 0

; 1146 :     xmlAttrPtr xml_lang_attr = NULL;

	mov	DWORD PTR _xml_lang_attr$[ebp], 0

; 1147 :     xmlAttrPtr xml_space_attr = NULL;

	mov	DWORD PTR _xml_space_attr$[ebp], 0

; 1148 : 
; 1149 :     if ((ctx == NULL) || (cur == NULL) || (cur->type != XML_ELEMENT_NODE)) {

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN15@xmlC14NPro
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN15@xmlC14NPro
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN14@xmlC14NPro
$LN15@xmlC14NPro:

; 1150 :         xmlC14NErrParam("processing attributes axis");

	push	OFFSET ??_C@_0BL@BMIGCENJ@processing?5attributes?5axis@
	call	_xmlC14NErrParam
	add	esp, 4

; 1151 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN14@xmlC14NPro:

; 1152 :     }
; 1153 : 
; 1154 :     /*
; 1155 :      * Create a sorted list to store element attributes
; 1156 :      */
; 1157 :     list = xmlListCreate(NULL, xmlC14NAttrsCompare);

	push	OFFSET _xmlC14NAttrsCompare
	push	0
	call	_xmlListCreate
	add	esp, 8
	mov	DWORD PTR _list$[ebp], eax

; 1158 :     if (list == NULL) {

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN16@xmlC14NPro

; 1159 :         xmlC14NErrInternal("creating attributes list");

	push	OFFSET ??_C@_0BJ@NCGHGLGP@creating?5attributes?5list@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1160 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN16@xmlC14NPro:

; 1161 :     }
; 1162 : 
; 1163 :     switch(ctx->mode) {

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR tv75[ebp], edx
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN17@xmlC14NPro
	cmp	DWORD PTR tv75[ebp], 1
	je	$LN22@xmlC14NPro
	cmp	DWORD PTR tv75[ebp], 2
	je	$LN24@xmlC14NPro
	jmp	$LN2@xmlC14NPro
$LN17@xmlC14NPro:

; 1164 :     case XML_C14N_1_0:
; 1165 :         /* The processing of an element node E MUST be modified slightly when an XPath node-set is
; 1166 :          * given as input and the element's parent is omitted from the node-set. The method for processing
; 1167 :          * the attribute axis of an element E in the node-set is enhanced. All element nodes along E's
; 1168 :          * ancestor axis are examined for nearest occurrences of attributes in the xml namespace, such
; 1169 :          * as xml:lang and xml:space (whether or not they are in the node-set). From this list of attributes,
; 1170 :          * remove any that are in E's attribute axis (whether or not they are in the node-set). Then,
; 1171 :          * lexicographically merge this attribute list with the nodes of E's attribute axis that are in
; 1172 :          * the node-set. The result of visiting the attribute axis is computed by processing the attribute
; 1173 :          * nodes in this merged attribute list.
; 1174 :          */
; 1175 : 
; 1176 :         /*
; 1177 :          * Add all visible attributes from current node.
; 1178 :          */
; 1179 :         attr = cur->properties;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _attr$[ebp], ecx
$LN4@xmlC14NPro:

; 1180 :         while (attr != NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN5@xmlC14NPro

; 1181 :             /* check that attribute is visible */
; 1182 :             if (xmlC14NIsVisible(ctx, attr, cur)) {

	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN42@xmlC14NPro
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv86[ebp], eax
	jmp	SHORT $LN43@xmlC14NPro
$LN42@xmlC14NPro:
	mov	DWORD PTR tv86[ebp], 1
$LN43@xmlC14NPro:
	cmp	DWORD PTR tv86[ebp], 0
	je	SHORT $LN18@xmlC14NPro

; 1183 :                 xmlListInsert(list, attr);

	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_xmlListInsert
	add	esp, 8
$LN18@xmlC14NPro:

; 1184 :             }
; 1185 :             attr = attr->next;

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _attr$[ebp], eax

; 1186 :         }

	jmp	SHORT $LN4@xmlC14NPro
$LN5@xmlC14NPro:

; 1187 : 
; 1188 :         /*
; 1189 :          * Handle xml attributes
; 1190 :          */
; 1191 :         if (parent_visible && (cur->parent != NULL) &&

	cmp	DWORD PTR _parent_visible$[ebp], 0
	je	$LN19@xmlC14NPro
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	$LN19@xmlC14NPro
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN44@xmlC14NPro
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN45@xmlC14NPro
$LN44@xmlC14NPro:
	mov	DWORD PTR tv137[ebp], 1
$LN45@xmlC14NPro:
	cmp	DWORD PTR tv137[ebp], 0
	jne	SHORT $LN19@xmlC14NPro

; 1192 :             (!xmlC14NIsVisible(ctx, cur->parent, cur->parent->parent)))
; 1193 :         {
; 1194 :             xmlNodePtr tmp;
; 1195 : 
; 1196 :             /*
; 1197 :              * If XPath node-set is not specified then the parent is always
; 1198 :              * visible!
; 1199 :              */
; 1200 :             tmp = cur->parent;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _tmp$2[ebp], ecx
$LN6@xmlC14NPro:

; 1201 :             while (tmp != NULL) {

	cmp	DWORD PTR _tmp$2[ebp], 0
	je	SHORT $LN19@xmlC14NPro

; 1202 :                 attr = tmp->properties;

	mov	edx, DWORD PTR _tmp$2[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _attr$[ebp], eax
$LN8@xmlC14NPro:

; 1203 :                 while (attr != NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN9@xmlC14NPro

; 1204 :                     if (xmlC14NIsXmlAttr(attr) != 0) {

	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	call	_xmlC14NIsXmlAttr
	add	esp, 4
	test	eax, eax
	je	SHORT $LN20@xmlC14NPro

; 1205 :                         if (xmlListSearch(list, attr) == NULL) {

	mov	edx, DWORD PTR _attr$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_xmlListSearch
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN20@xmlC14NPro

; 1206 :                             xmlListInsert(list, attr);

	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_xmlListInsert
	add	esp, 8
$LN20@xmlC14NPro:

; 1207 :                         }
; 1208 :                     }
; 1209 :                     attr = attr->next;

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _attr$[ebp], ecx

; 1210 :                 }

	jmp	SHORT $LN8@xmlC14NPro
$LN9@xmlC14NPro:

; 1211 :                 tmp = tmp->parent;

	mov	edx, DWORD PTR _tmp$2[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _tmp$2[ebp], eax

; 1212 :             }

	jmp	SHORT $LN6@xmlC14NPro
$LN19@xmlC14NPro:

; 1213 :         }
; 1214 : 
; 1215 :         /* done */
; 1216 :         break;

	jmp	$LN2@xmlC14NPro
$LN22@xmlC14NPro:

; 1217 :     case XML_C14N_EXCLUSIVE_1_0:
; 1218 :         /* attributes in the XML namespace, such as xml:lang and xml:space
; 1219 :          * are not imported into orphan nodes of the document subset
; 1220 :          */
; 1221 : 
; 1222 :         /*
; 1223 :          * Add all visible attributes from current node.
; 1224 :          */
; 1225 :         attr = cur->properties;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _attr$[ebp], edx
$LN10@xmlC14NPro:

; 1226 :         while (attr != NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN11@xmlC14NPro

; 1227 :             /* check that attribute is visible */
; 1228 :             if (xmlC14NIsVisible(ctx, attr, cur)) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN46@xmlC14NPro
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv164[ebp], eax
	jmp	SHORT $LN47@xmlC14NPro
$LN46@xmlC14NPro:
	mov	DWORD PTR tv164[ebp], 1
$LN47@xmlC14NPro:
	cmp	DWORD PTR tv164[ebp], 0
	je	SHORT $LN23@xmlC14NPro

; 1229 :                 xmlListInsert(list, attr);

	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_xmlListInsert
	add	esp, 8
$LN23@xmlC14NPro:

; 1230 :             }
; 1231 :             attr = attr->next;

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _attr$[ebp], ecx

; 1232 :         }

	jmp	SHORT $LN10@xmlC14NPro
$LN11@xmlC14NPro:

; 1233 : 
; 1234 :         /* do nothing special for xml attributes */
; 1235 :         break;

	jmp	$LN2@xmlC14NPro
$LN24@xmlC14NPro:

; 1236 :     case XML_C14N_1_1:
; 1237 :         /* The processing of an element node E MUST be modified slightly when an XPath node-set is
; 1238 :          * given as input and some of the element's ancestors are omitted from the node-set.
; 1239 :          *
; 1240 :          * Simple inheritable attributes are attributes that have a value that requires at most a simple
; 1241 :          * redeclaration. This redeclaration is done by supplying a new value in the child axis. The
; 1242 :          * redeclaration of a simple inheritable attribute A contained in one of E's ancestors is done
; 1243 :          * by supplying a value to an attribute Ae inside E with the same name. Simple inheritable attributes
; 1244 :          * are xml:lang and xml:space.
; 1245 :          *
; 1246 :          * The method for processing the attribute axis of an element E in the node-set is hence enhanced.
; 1247 :          * All element nodes along E's ancestor axis are examined for the nearest occurrences of simple
; 1248 :          * inheritable attributes in the xml namespace, such as xml:lang and xml:space (whether or not they
; 1249 :          * are in the node-set). From this list of attributes, any simple inheritable attributes that are
; 1250 :          * already in E's attribute axis (whether or not they are in the node-set) are removed. Then,
; 1251 :          * lexicographically merge this attribute list with the nodes of E's attribute axis that are in
; 1252 :          * the node-set. The result of visiting the attribute axis is computed by processing the attribute
; 1253 :          * nodes in this merged attribute list.
; 1254 :          *
; 1255 :          * The xml:id attribute is not a simple inheritable attribute and no processing of these attributes is
; 1256 :          * performed.
; 1257 :          *
; 1258 :          * The xml:base attribute is not a simple inheritable attribute and requires special processing beyond
; 1259 :          * a simple redeclaration.
; 1260 :          *
; 1261 :          * Attributes in the XML namespace other than xml:base, xml:id, xml:lang, and xml:space MUST be processed
; 1262 :          * as ordinary attributes.
; 1263 :          */
; 1264 : 
; 1265 :         /*
; 1266 :          * Add all visible attributes from current node.
; 1267 :          */
; 1268 :         attr = cur->properties;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _attr$[ebp], eax
$LN12@xmlC14NPro:

; 1269 :         while (attr != NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	$LN13@xmlC14NPro

; 1270 :             /* special processing for XML attribute kiks in only when we have invisible parents */
; 1271 :             if ((!parent_visible) || (xmlC14NIsXmlAttr(attr) == 0)) {

	cmp	DWORD PTR _parent_visible$[ebp], 0
	je	SHORT $LN27@xmlC14NPro
	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	call	_xmlC14NIsXmlAttr
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN25@xmlC14NPro
$LN27@xmlC14NPro:

; 1272 :                 /* check that attribute is visible */
; 1273 :                 if (xmlC14NIsVisible(ctx, attr, cur)) {

	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN48@xmlC14NPro
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv183[ebp], eax
	jmp	SHORT $LN49@xmlC14NPro
$LN48@xmlC14NPro:
	mov	DWORD PTR tv183[ebp], 1
$LN49@xmlC14NPro:
	cmp	DWORD PTR tv183[ebp], 0
	je	SHORT $LN28@xmlC14NPro

; 1274 :                     xmlListInsert(list, attr);

	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_xmlListInsert
	add	esp, 8
$LN28@xmlC14NPro:

; 1275 :                 }
; 1276 :             } else {

	jmp	$LN26@xmlC14NPro
$LN25@xmlC14NPro:

; 1277 :                 int matched = 0;

	mov	DWORD PTR _matched$1[ebp], 0

; 1278 : 
; 1279 :                 /* check for simple inheritance attributes */
; 1280 :                 if((!matched) && (xml_lang_attr == NULL) && xmlStrEqual(attr->name, BAD_CAST "lang")) {

	cmp	DWORD PTR _matched$1[ebp], 0
	jne	SHORT $LN29@xmlC14NPro
	cmp	DWORD PTR _xml_lang_attr$[ebp], 0
	jne	SHORT $LN29@xmlC14NPro
	push	OFFSET ??_C@_04IOHABJIC@lang@
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN29@xmlC14NPro

; 1281 :                     xml_lang_attr = attr;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR _xml_lang_attr$[ebp], ecx

; 1282 :                     matched = 1;

	mov	DWORD PTR _matched$1[ebp], 1
$LN29@xmlC14NPro:

; 1283 :                 }
; 1284 :                 if((!matched) && (xml_space_attr == NULL) && xmlStrEqual(attr->name, BAD_CAST "space")) {

	cmp	DWORD PTR _matched$1[ebp], 0
	jne	SHORT $LN30@xmlC14NPro
	cmp	DWORD PTR _xml_space_attr$[ebp], 0
	jne	SHORT $LN30@xmlC14NPro
	push	OFFSET ??_C@_05OLNILLAB@space@
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN30@xmlC14NPro

; 1285 :                     xml_space_attr = attr;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR _xml_space_attr$[ebp], ecx

; 1286 :                     matched = 1;

	mov	DWORD PTR _matched$1[ebp], 1
$LN30@xmlC14NPro:

; 1287 :                 }
; 1288 : 
; 1289 :                 /* check for base attr */
; 1290 :                 if((!matched) && (xml_base_attr == NULL) && xmlStrEqual(attr->name, BAD_CAST "base")) {

	cmp	DWORD PTR _matched$1[ebp], 0
	jne	SHORT $LN31@xmlC14NPro
	cmp	DWORD PTR _xml_base_attr$[ebp], 0
	jne	SHORT $LN31@xmlC14NPro
	push	OFFSET ??_C@_04BHIIPFEC@base@
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN31@xmlC14NPro

; 1291 :                     xml_base_attr = attr;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR _xml_base_attr$[ebp], ecx

; 1292 :                     matched = 1;

	mov	DWORD PTR _matched$1[ebp], 1
$LN31@xmlC14NPro:

; 1293 :                 }
; 1294 : 
; 1295 :                 /* otherwise, it is a normal attribute, so just check if it is visible */
; 1296 :                 if((!matched) && xmlC14NIsVisible(ctx, attr, cur)) {

	cmp	DWORD PTR _matched$1[ebp], 0
	jne	SHORT $LN26@xmlC14NPro
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN50@xmlC14NPro
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv217[ebp], eax
	jmp	SHORT $LN51@xmlC14NPro
$LN50@xmlC14NPro:
	mov	DWORD PTR tv217[ebp], 1
$LN51@xmlC14NPro:
	cmp	DWORD PTR tv217[ebp], 0
	je	SHORT $LN26@xmlC14NPro

; 1297 :                     xmlListInsert(list, attr);

	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_xmlListInsert
	add	esp, 8
$LN26@xmlC14NPro:

; 1298 :                 }
; 1299 :             }
; 1300 : 
; 1301 :             /* move to the next one */
; 1302 :             attr = attr->next;

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _attr$[ebp], eax

; 1303 :         }

	jmp	$LN12@xmlC14NPro
$LN13@xmlC14NPro:

; 1304 : 
; 1305 :         /* special processing for XML attribute kiks in only when we have invisible parents */
; 1306 :         if ((parent_visible)) {

	cmp	DWORD PTR _parent_visible$[ebp], 0
	je	$LN2@xmlC14NPro

; 1307 : 
; 1308 :             /* simple inheritance attributes - copy */
; 1309 :             if(xml_lang_attr == NULL) {

	cmp	DWORD PTR _xml_lang_attr$[ebp], 0
	jne	SHORT $LN34@xmlC14NPro

; 1310 :                 xml_lang_attr = xmlC14NFindHiddenParentAttr(ctx, cur->parent, BAD_CAST "lang", XML_XML_NAMESPACE);

	push	OFFSET ??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@
	push	OFFSET ??_C@_04IOHABJIC@lang@
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_xmlC14NFindHiddenParentAttr
	add	esp, 16					; 00000010H
	mov	DWORD PTR _xml_lang_attr$[ebp], eax
$LN34@xmlC14NPro:

; 1311 :             }
; 1312 :             if(xml_lang_attr != NULL) {

	cmp	DWORD PTR _xml_lang_attr$[ebp], 0
	je	SHORT $LN35@xmlC14NPro

; 1313 :                 xmlListInsert(list, xml_lang_attr);

	mov	ecx, DWORD PTR _xml_lang_attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_xmlListInsert
	add	esp, 8
$LN35@xmlC14NPro:

; 1314 :             }
; 1315 :             if(xml_space_attr == NULL) {

	cmp	DWORD PTR _xml_space_attr$[ebp], 0
	jne	SHORT $LN36@xmlC14NPro

; 1316 :                 xml_space_attr = xmlC14NFindHiddenParentAttr(ctx, cur->parent, BAD_CAST "space", XML_XML_NAMESPACE);

	push	OFFSET ??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@
	push	OFFSET ??_C@_05OLNILLAB@space@
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	call	_xmlC14NFindHiddenParentAttr
	add	esp, 16					; 00000010H
	mov	DWORD PTR _xml_space_attr$[ebp], eax
$LN36@xmlC14NPro:

; 1317 :             }
; 1318 :             if(xml_space_attr != NULL) {

	cmp	DWORD PTR _xml_space_attr$[ebp], 0
	je	SHORT $LN37@xmlC14NPro

; 1319 :                 xmlListInsert(list, xml_space_attr);

	mov	eax, DWORD PTR _xml_space_attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_xmlListInsert
	add	esp, 8
$LN37@xmlC14NPro:

; 1320 :             }
; 1321 : 
; 1322 :             /* base uri attribute - fix up */
; 1323 :             if(xml_base_attr == NULL) {

	cmp	DWORD PTR _xml_base_attr$[ebp], 0
	jne	SHORT $LN38@xmlC14NPro

; 1324 :                 /* if we don't have base uri attribute, check if we have a "hidden" one above */
; 1325 :                 xml_base_attr = xmlC14NFindHiddenParentAttr(ctx, cur->parent, BAD_CAST "base", XML_XML_NAMESPACE);

	push	OFFSET ??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@
	push	OFFSET ??_C@_04BHIIPFEC@base@
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_xmlC14NFindHiddenParentAttr
	add	esp, 16					; 00000010H
	mov	DWORD PTR _xml_base_attr$[ebp], eax
$LN38@xmlC14NPro:

; 1326 :             }
; 1327 :             if(xml_base_attr != NULL) {

	cmp	DWORD PTR _xml_base_attr$[ebp], 0
	je	SHORT $LN2@xmlC14NPro

; 1328 :                 xml_base_attr = xmlC14NFixupBaseAttr(ctx, xml_base_attr);

	mov	edx, DWORD PTR _xml_base_attr$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_xmlC14NFixupBaseAttr
	add	esp, 8
	mov	DWORD PTR _xml_base_attr$[ebp], eax

; 1329 :                 if(xml_base_attr != NULL) {

	cmp	DWORD PTR _xml_base_attr$[ebp], 0
	je	SHORT $LN2@xmlC14NPro

; 1330 :                     xmlListInsert(list, xml_base_attr);

	mov	ecx, DWORD PTR _xml_base_attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_xmlListInsert
	add	esp, 8

; 1331 : 
; 1332 :                     /* note that we MUST delete returned attr node ourselves! */
; 1333 :                     xml_base_attr->next = attrs_to_delete;

	mov	eax, DWORD PTR _xml_base_attr$[ebp]
	mov	ecx, DWORD PTR _attrs_to_delete$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 1334 :                     attrs_to_delete = xml_base_attr;

	mov	edx, DWORD PTR _xml_base_attr$[ebp]
	mov	DWORD PTR _attrs_to_delete$[ebp], edx
$LN2@xmlC14NPro:

; 1335 :                 }
; 1336 :             }
; 1337 :         }
; 1338 : 
; 1339 :         /* done */
; 1340 :         break;
; 1341 :     }
; 1342 : 
; 1343 :     /*
; 1344 :      * print out all elements from list
; 1345 :      */
; 1346 :     xmlListWalk(list, xmlC14NPrintAttrs, (void *) ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	push	OFFSET _xmlC14NPrintAttrs
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_xmlListWalk
	add	esp, 12					; 0000000cH

; 1347 : 
; 1348 :     /*
; 1349 :      * Cleanup
; 1350 :      */
; 1351 :     xmlFreePropList(attrs_to_delete);

	mov	edx, DWORD PTR _attrs_to_delete$[ebp]
	push	edx
	call	_xmlFreePropList
	add	esp, 4

; 1352 :     xmlListDelete(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_xmlListDelete
	add	esp, 4

; 1353 :     return (0);

	xor	eax, eax
$LN1@xmlC14NPro:

; 1354 : }

	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NProcessAttrsAxis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NFixupBaseAttr
_TEXT	SEGMENT
tv89 = -28						; size = 4
_tmp_str_len$ = -24					; size = 4
_tmp_str2$ = -20					; size = 4
_tmp_str$ = -16						; size = 4
_attr$ = -12						; size = 4
_cur$ = -8						; size = 4
_res$ = -4						; size = 4
_ctx$ = 8						; size = 4
_xml_base_attr$ = 12					; size = 4
_xmlC14NFixupBaseAttr PROC				; COMDAT

; 1014 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1015 :     xmlChar * res = NULL;

	mov	DWORD PTR _res$[ebp], 0

; 1016 :     xmlNodePtr cur;
; 1017 :     xmlAttrPtr attr;
; 1018 :     xmlChar * tmp_str;
; 1019 :     xmlChar * tmp_str2;
; 1020 :     int tmp_str_len;
; 1021 : 
; 1022 :     if ((ctx == NULL) || (xml_base_attr == NULL) || (xml_base_attr->parent == NULL)) {

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN5@xmlC14NFix
	cmp	DWORD PTR _xml_base_attr$[ebp], 0
	je	SHORT $LN5@xmlC14NFix
	mov	eax, DWORD PTR _xml_base_attr$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN4@xmlC14NFix
$LN5@xmlC14NFix:

; 1023 :         xmlC14NErrParam("processing xml:base attribute");

	push	OFFSET ??_C@_0BO@CEOJEMPO@processing?5xml?3base?5attribute@
	call	_xmlC14NErrParam
	add	esp, 4

; 1024 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC14NFix
$LN4@xmlC14NFix:

; 1025 :     }
; 1026 : 
; 1027 :     /* start from current value */
; 1028 :     res = xmlNodeListGetString(ctx->doc, xml_base_attr->children, 1);

	push	1
	mov	ecx, DWORD PTR _xml_base_attr$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _res$[ebp], eax

; 1029 :     if(res == NULL) {

	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN6@xmlC14NFix

; 1030 :         xmlC14NErrInternal("processing xml:base attribute - can't get attr value");

	push	OFFSET ??_C@_0DF@JNOKNNOH@processing?5xml?3base?5attribute?5?9@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1031 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC14NFix
$LN6@xmlC14NFix:

; 1032 :     }
; 1033 : 
; 1034 :     /* go up the stack until we find a node that we rendered already */
; 1035 :     cur = xml_base_attr->parent->parent;

	mov	edx, DWORD PTR _xml_base_attr$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@xmlC14NFix:

; 1036 :     while((cur != NULL) && (!xmlC14NIsVisible(ctx, cur, cur->parent))) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN3@xmlC14NFix
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN16@xmlC14NFix
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN17@xmlC14NFix
$LN16@xmlC14NFix:
	mov	DWORD PTR tv89[ebp], 1
$LN17@xmlC14NFix:
	cmp	DWORD PTR tv89[ebp], 0
	jne	$LN3@xmlC14NFix

; 1037 :         attr = xmlHasNsProp(cur, BAD_CAST "base", XML_XML_NAMESPACE);

	push	OFFSET ??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@
	push	OFFSET ??_C@_04BHIIPFEC@base@
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_xmlHasNsProp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attr$[ebp], eax

; 1038 :         if(attr != NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	$LN7@xmlC14NFix

; 1039 :             /* get attr value */
; 1040 :             tmp_str = xmlNodeListGetString(ctx->doc, attr->children, 1);

	push	1
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tmp_str$[ebp], eax

; 1041 :             if(tmp_str == NULL) {

	cmp	DWORD PTR _tmp_str$[ebp], 0
	jne	SHORT $LN8@xmlC14NFix

; 1042 :                 xmlFree(res);

	mov	esi, esp
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1043 : 
; 1044 :                 xmlC14NErrInternal("processing xml:base attribute - can't get attr value");

	push	OFFSET ??_C@_0DF@JNOKNNOH@processing?5xml?3base?5attribute?5?9@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1045 :                 return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC14NFix
$LN8@xmlC14NFix:

; 1046 :             }
; 1047 : 
; 1048 :             /* we need to add '/' if our current base uri ends with '..' or '.'
; 1049 :             to ensure that we are forced to go "up" all the time */
; 1050 :             tmp_str_len = xmlStrlen(tmp_str);

	mov	ecx, DWORD PTR _tmp_str$[ebp]
	push	ecx
	call	_xmlStrlen
	add	esp, 4
	mov	DWORD PTR _tmp_str_len$[ebp], eax

; 1051 :             if(tmp_str_len > 1 && tmp_str[tmp_str_len - 2] == '.') {

	cmp	DWORD PTR _tmp_str_len$[ebp], 1
	jle	SHORT $LN9@xmlC14NFix
	mov	edx, DWORD PTR _tmp_str$[ebp]
	add	edx, DWORD PTR _tmp_str_len$[ebp]
	movzx	eax, BYTE PTR [edx-2]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN9@xmlC14NFix

; 1052 :                 tmp_str2 = xmlStrcat(tmp_str, BAD_CAST "/");

	push	OFFSET ??_C@_01KMDKNFGN@?1@
	mov	ecx, DWORD PTR _tmp_str$[ebp]
	push	ecx
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _tmp_str2$[ebp], eax

; 1053 :                 if(tmp_str2 == NULL) {

	cmp	DWORD PTR _tmp_str2$[ebp], 0
	jne	SHORT $LN10@xmlC14NFix

; 1054 :                     xmlFree(tmp_str);

	mov	esi, esp
	mov	edx, DWORD PTR _tmp_str$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1055 :                     xmlFree(res);

	mov	esi, esp
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1056 : 
; 1057 :                     xmlC14NErrInternal("processing xml:base attribute - can't modify uri");

	push	OFFSET ??_C@_0DB@PAHKMMOF@processing?5xml?3base?5attribute?5?9@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1058 :                     return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC14NFix
$LN10@xmlC14NFix:

; 1059 :                 }
; 1060 : 
; 1061 :                 tmp_str = tmp_str2;

	mov	ecx, DWORD PTR _tmp_str2$[ebp]
	mov	DWORD PTR _tmp_str$[ebp], ecx
$LN9@xmlC14NFix:

; 1062 :             }
; 1063 : 
; 1064 :             /* build uri */
; 1065 :             tmp_str2 = xmlBuildURI(res, tmp_str);

	mov	edx, DWORD PTR _tmp_str$[ebp]
	push	edx
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	_xmlBuildURI
	add	esp, 8
	mov	DWORD PTR _tmp_str2$[ebp], eax

; 1066 :             if(tmp_str2 == NULL) {

	cmp	DWORD PTR _tmp_str2$[ebp], 0
	jne	SHORT $LN11@xmlC14NFix

; 1067 :                 xmlFree(tmp_str);

	mov	esi, esp
	mov	ecx, DWORD PTR _tmp_str$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1068 :                 xmlFree(res);

	mov	esi, esp
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1069 : 
; 1070 :                 xmlC14NErrInternal("processing xml:base attribute - can't construct uri");

	push	OFFSET ??_C@_0DE@JBJEENHA@processing?5xml?3base?5attribute?5?9@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1071 :                 return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC14NFix
$LN11@xmlC14NFix:

; 1072 :             }
; 1073 : 
; 1074 :             /* cleanup and set the new res */
; 1075 :             xmlFree(tmp_str);

	mov	esi, esp
	mov	eax, DWORD PTR _tmp_str$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1076 :             xmlFree(res);

	mov	esi, esp
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1077 :             res = tmp_str2;

	mov	edx, DWORD PTR _tmp_str2$[ebp]
	mov	DWORD PTR _res$[ebp], edx
$LN7@xmlC14NFix:

; 1078 :         }
; 1079 : 
; 1080 :         /* next */
; 1081 :         cur = cur->parent;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR _cur$[ebp], ecx

; 1082 :     }

	jmp	$LN2@xmlC14NFix
$LN3@xmlC14NFix:

; 1083 : 
; 1084 :     /* check if result uri is empty or not */
; 1085 :     if((res == NULL) || xmlStrEqual(res, BAD_CAST "")) {

	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN13@xmlC14NFix
	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@xmlC14NFix
$LN13@xmlC14NFix:

; 1086 :         xmlFree(res);

	mov	esi, esp
	mov	eax, DWORD PTR _res$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1087 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlC14NFix
$LN12@xmlC14NFix:

; 1088 :     }
; 1089 : 
; 1090 :     /* create and return the new attribute node */
; 1091 :     attr = xmlNewNsProp(NULL, xml_base_attr->ns, BAD_CAST "base", res);

	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	push	OFFSET ??_C@_04BHIIPFEC@base@
	mov	edx, DWORD PTR _xml_base_attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	push	0
	call	_xmlNewNsProp
	add	esp, 16					; 00000010H
	mov	DWORD PTR _attr$[ebp], eax

; 1092 :     if(attr == NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN14@xmlC14NFix

; 1093 :         xmlFree(res);

	mov	esi, esp
	mov	ecx, DWORD PTR _res$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1094 : 
; 1095 :         xmlC14NErrInternal("processing xml:base attribute - can't construct attribute");

	push	OFFSET ??_C@_0DK@HPDOPNJC@processing?5xml?3base?5attribute?5?9@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1096 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlC14NFix
$LN14@xmlC14NFix:

; 1097 :     }
; 1098 : 
; 1099 :     /* done */
; 1100 :     xmlFree(res);

	mov	esi, esp
	mov	edx, DWORD PTR _res$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1101 :     return (attr);

	mov	eax, DWORD PTR _attr$[ebp]
$LN1@xmlC14NFix:

; 1102 : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NFixupBaseAttr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NFindHiddenParentAttr
_TEXT	SEGMENT
tv74 = -8						; size = 4
_res$ = -4						; size = 4
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_name$ = 16						; size = 4
_ns$ = 20						; size = 4
_xmlC14NFindHiddenParentAttr PROC			; COMDAT

; 991  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@xmlC14NFin:

; 992  :     xmlAttrPtr res;
; 993  :     while((cur != NULL) && (!xmlC14NIsVisible(ctx, cur, cur->parent))) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlC14NFin
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@xmlC14NFin
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN7@xmlC14NFin
$LN6@xmlC14NFin:
	mov	DWORD PTR tv74[ebp], 1
$LN7@xmlC14NFin:
	cmp	DWORD PTR tv74[ebp], 0
	jne	SHORT $LN3@xmlC14NFin

; 994  :         res = xmlHasNsProp(cur, name, ns);

	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_xmlHasNsProp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _res$[ebp], eax

; 995  :         if(res != NULL) {

	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN4@xmlC14NFin

; 996  :             return res;

	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN1@xmlC14NFin
$LN4@xmlC14NFin:

; 997  :         }
; 998  : 
; 999  :         cur = cur->parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax

; 1000 :     }

	jmp	SHORT $LN2@xmlC14NFin
$LN3@xmlC14NFin:

; 1001 : 
; 1002 :     return NULL;

	xor	eax, eax
$LN1@xmlC14NFin:

; 1003 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NFindHiddenParentAttr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NPrintAttrs
_TEXT	SEGMENT
_buffer$ = -16						; size = 4
_value$ = -12						; size = 4
_ctx$ = -8						; size = 4
_attr$ = -4						; size = 4
_data$ = 8						; size = 4
_user$ = 12						; size = 4
_xmlC14NPrintAttrs PROC					; COMDAT

; 945  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 946  :     const xmlAttrPtr attr = (const xmlAttrPtr) data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _attr$[ebp], eax

; 947  :     xmlC14NCtxPtr ctx = (xmlC14NCtxPtr) user;

	mov	ecx, DWORD PTR _user$[ebp]
	mov	DWORD PTR _ctx$[ebp], ecx

; 948  :     xmlChar *value;
; 949  :     xmlChar *buffer;
; 950  : 
; 951  :     if ((attr == NULL) || (ctx == NULL)) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN3@xmlC14NPri
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlC14NPri
$LN3@xmlC14NPri:

; 952  :         xmlC14NErrParam("writing attributes");

	push	OFFSET ??_C@_0BD@DDLFPEHD@writing?5attributes@
	call	_xmlC14NErrParam
	add	esp, 4

; 953  :         return (0);

	xor	eax, eax
	jmp	$LN1@xmlC14NPri
$LN2@xmlC14NPri:

; 954  :     }
; 955  : 
; 956  :     xmlOutputBufferWriteString(ctx->buf, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 957  :     if (attr->ns != NULL && xmlStrlen(attr->ns->prefix) > 0) {

	mov	ecx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN4@xmlC14NPri
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jle	SHORT $LN4@xmlC14NPri

; 958  :         xmlOutputBufferWriteString(ctx->buf,

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 959  :                                    (const char *) attr->ns->prefix);
; 960  :         xmlOutputBufferWriteString(ctx->buf, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN4@xmlC14NPri:

; 961  :     }
; 962  :     xmlOutputBufferWriteString(ctx->buf, (const char *) attr->name);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 963  :     xmlOutputBufferWriteString(ctx->buf, "=\"");

	push	OFFSET ??_C@_02ILLPBGAO@?$DN?$CC@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 964  : 
; 965  :     value = xmlNodeListGetString(ctx->doc, attr->children, 1);

	push	1
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _value$[ebp], eax

; 966  :     /* todo: should we log an error if value==NULL ? */
; 967  :     if (value != NULL) {

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN5@xmlC14NPri

; 968  :         buffer = xmlC11NNormalizeAttr(value);

	push	0
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_xmlC11NNormalizeString
	add	esp, 8
	mov	DWORD PTR _buffer$[ebp], eax

; 969  :         xmlFree(value);

	mov	esi, esp
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 970  :         if (buffer != NULL) {

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN6@xmlC14NPri

; 971  :             xmlOutputBufferWriteString(ctx->buf, (const char *) buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 972  :             xmlFree(buffer);

	mov	esi, esp
	mov	eax, DWORD PTR _buffer$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 973  :         } else {

	jmp	SHORT $LN5@xmlC14NPri
$LN6@xmlC14NPri:

; 974  :             xmlC14NErrInternal("normalizing attributes axis");

	push	OFFSET ??_C@_0BM@MNCHFEBF@normalizing?5attributes?5axis@
	call	_xmlC14NErrInternal
	add	esp, 4

; 975  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlC14NPri
$LN5@xmlC14NPri:

; 976  :         }
; 977  :     }
; 978  :     xmlOutputBufferWriteString(ctx->buf, "\"");

	push	OFFSET ??_C@_01BJJEKLCA@?$CC@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 979  :     return (1);

	mov	eax, 1
$LN1@xmlC14NPri:

; 980  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NPrintAttrs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NAttrsCompare
_TEXT	SEGMENT
_ret$ = -12						; size = 4
_attr2$ = -8						; size = 4
_attr1$ = -4						; size = 4
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_xmlC14NAttrsCompare PROC				; COMDAT

; 891  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 892  :     const xmlAttrPtr attr1 = (const xmlAttrPtr) data1;

	mov	eax, DWORD PTR _data1$[ebp]
	mov	DWORD PTR _attr1$[ebp], eax

; 893  :     const xmlAttrPtr attr2 = (const xmlAttrPtr) data2;

	mov	ecx, DWORD PTR _data2$[ebp]
	mov	DWORD PTR _attr2$[ebp], ecx

; 894  :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 895  : 
; 896  :     /*
; 897  :      * Simple cases
; 898  :      */
; 899  :     if (attr1 == attr2)

	mov	edx, DWORD PTR _attr1$[ebp]
	cmp	edx, DWORD PTR _attr2$[ebp]
	jne	SHORT $LN2@xmlC14NAtt

; 900  :         return (0);

	xor	eax, eax
	jmp	$LN1@xmlC14NAtt
$LN2@xmlC14NAtt:

; 901  :     if (attr1 == NULL)

	cmp	DWORD PTR _attr1$[ebp], 0
	jne	SHORT $LN3@xmlC14NAtt

; 902  :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NAtt
$LN3@xmlC14NAtt:

; 903  :     if (attr2 == NULL)

	cmp	DWORD PTR _attr2$[ebp], 0
	jne	SHORT $LN4@xmlC14NAtt

; 904  :         return (1);

	mov	eax, 1
	jmp	$LN1@xmlC14NAtt
$LN4@xmlC14NAtt:

; 905  :     if (attr1->ns == attr2->ns) {

	mov	eax, DWORD PTR _attr1$[ebp]
	mov	ecx, DWORD PTR _attr2$[ebp]
	mov	edx, DWORD PTR [eax+36]
	cmp	edx, DWORD PTR [ecx+36]
	jne	SHORT $LN5@xmlC14NAtt

; 906  :         return (xmlStrcmp(attr1->name, attr2->name));

	mov	eax, DWORD PTR _attr2$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _attr1$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrcmp
	add	esp, 8
	jmp	$LN1@xmlC14NAtt
$LN5@xmlC14NAtt:

; 907  :     }
; 908  : 
; 909  :     /*
; 910  :      * Attributes in the default namespace are first
; 911  :      * because the default namespace is not applied to
; 912  :      * unqualified attributes
; 913  :      */
; 914  :     if (attr1->ns == NULL)

	mov	ecx, DWORD PTR _attr1$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN6@xmlC14NAtt

; 915  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NAtt
$LN6@xmlC14NAtt:

; 916  :     if (attr2->ns == NULL)

	mov	edx, DWORD PTR _attr2$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN7@xmlC14NAtt

; 917  :         return (1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlC14NAtt
$LN7@xmlC14NAtt:

; 918  :     if (attr1->ns->prefix == NULL)

	mov	eax, DWORD PTR _attr1$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN8@xmlC14NAtt

; 919  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NAtt
$LN8@xmlC14NAtt:

; 920  :     if (attr2->ns->prefix == NULL)

	mov	edx, DWORD PTR _attr2$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN9@xmlC14NAtt

; 921  :         return (1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlC14NAtt
$LN9@xmlC14NAtt:

; 922  : 
; 923  :     ret = xmlStrcmp(attr1->ns->href, attr2->ns->href);

	mov	ecx, DWORD PTR _attr2$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attr1$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrcmp
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 924  :     if (ret == 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN10@xmlC14NAtt

; 925  :         ret = xmlStrcmp(attr1->name, attr2->name);

	mov	ecx, DWORD PTR _attr2$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _attr1$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrcmp
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
$LN10@xmlC14NAtt:

; 926  :     }
; 927  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlC14NAtt:

; 928  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NAttrsCompare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NIsXmlAttr
_TEXT	SEGMENT
tv70 = -4						; size = 4
_attr$ = 8						; size = 4
_xmlC14NIsXmlAttr PROC					; COMDAT

; 874  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 875  :     return ((attr->ns != NULL) &&

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN3@xmlC14NIsX
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_xmlC14NIsXmlNs
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@xmlC14NIsX
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@xmlC14NIsX
$LN3@xmlC14NIsX:
	mov	DWORD PTR tv70[ebp], 0
$LN4@xmlC14NIsX:
	mov	eax, DWORD PTR tv70[ebp]

; 876  :            (xmlC14NIsXmlNs(attr->ns) != 0));
; 877  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NIsXmlAttr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlExcC14NProcessNamespacesAxis
_TEXT	SEGMENT
tv219 = -48						; size = 4
tv183 = -44						; size = 4
tv144 = -40						; size = 4
_i$1 = -36						; size = 4
_prefix$2 = -32						; size = 4
_has_empty_ns_in_inclusive_list$ = -28			; size = 4
_has_visibly_utilized_empty_ns$ = -24			; size = 4
_has_empty_ns$ = -20					; size = 4
_already_rendered$ = -16				; size = 4
_attr$ = -12						; size = 4
_list$ = -8						; size = 4
_ns$ = -4						; size = 4
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_visible$ = 16						; size = 4
_xmlExcC14NProcessNamespacesAxis PROC			; COMDAT

; 716  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 717  :     xmlNsPtr ns;
; 718  :     xmlListPtr list;
; 719  :     xmlAttrPtr attr;
; 720  :     int already_rendered;
; 721  :     int has_empty_ns = 0;

	mov	DWORD PTR _has_empty_ns$[ebp], 0

; 722  :     int has_visibly_utilized_empty_ns = 0;

	mov	DWORD PTR _has_visibly_utilized_empty_ns$[ebp], 0

; 723  :     int has_empty_ns_in_inclusive_list = 0;

	mov	DWORD PTR _has_empty_ns_in_inclusive_list$[ebp], 0

; 724  : 
; 725  :     if ((ctx == NULL) || (cur == NULL) || (cur->type != XML_ELEMENT_NODE)) {

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN9@xmlExcC14N
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN9@xmlExcC14N
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN8@xmlExcC14N
$LN9@xmlExcC14N:

; 726  :         xmlC14NErrParam("processing namespaces axis (exc c14n)");

	push	OFFSET ??_C@_0CG@HFJHEOJE@processing?5namespaces?5axis?5?$CIexc@
	call	_xmlC14NErrParam
	add	esp, 4

; 727  :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlExcC14N
$LN8@xmlExcC14N:

; 728  :     }
; 729  : 
; 730  :     if(!xmlC14NIsExclusive(ctx)) {

	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+32], 1
	je	SHORT $LN10@xmlExcC14N

; 731  :         xmlC14NErrParam("processing namespaces axis (exc c14n)");

	push	OFFSET ??_C@_0CG@HFJHEOJE@processing?5namespaces?5axis?5?$CIexc@
	call	_xmlC14NErrParam
	add	esp, 4

; 732  :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlExcC14N
$LN10@xmlExcC14N:

; 733  : 
; 734  :     }
; 735  : 
; 736  :     /*
; 737  :      * Create a sorted list to store element namespaces
; 738  :      */
; 739  :     list = xmlListCreate(NULL, xmlC14NNsCompare);

	push	OFFSET _xmlC14NNsCompare
	push	0
	call	_xmlListCreate
	add	esp, 8
	mov	DWORD PTR _list$[ebp], eax

; 740  :     if (list == NULL) {

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN11@xmlExcC14N

; 741  :         xmlC14NErrInternal("creating namespaces list (exc c14n)");

	push	OFFSET ??_C@_0CE@OPHJGGNE@creating?5namespaces?5list?5?$CIexc?5c@
	call	_xmlC14NErrInternal
	add	esp, 4

; 742  :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlExcC14N
$LN11@xmlExcC14N:

; 743  :     }
; 744  : 
; 745  :     /*
; 746  :      * process inclusive namespaces:
; 747  :      * All namespace nodes appearing on inclusive ns list are
; 748  :      * handled as provided in Canonical XML
; 749  :      */
; 750  :     if(ctx->inclusive_ns_prefixes != NULL) {

	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	$LN12@xmlExcC14N

; 751  : 	xmlChar *prefix;
; 752  : 	int i;
; 753  : 
; 754  : 	for (i = 0; ctx->inclusive_ns_prefixes[i] != NULL; ++i) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@xmlExcC14N
$LN2@xmlExcC14N:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@xmlExcC14N:
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [edx+eax*4], 0
	je	$LN12@xmlExcC14N

; 755  : 	    prefix = ctx->inclusive_ns_prefixes[i];

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _prefix$2[ebp], ecx

; 756  : 	    /*
; 757  : 	     * Special values for namespace with empty prefix
; 758  : 	     */
; 759  :             if (xmlStrEqual(prefix, BAD_CAST "#default")
; 760  :                 || xmlStrEqual(prefix, BAD_CAST "")) {

	push	OFFSET ??_C@_08DCFPEJG@?$CDdefault@
	mov	edx, DWORD PTR _prefix$2[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@xmlExcC14N
	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	eax, DWORD PTR _prefix$2[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@xmlExcC14N
$LN14@xmlExcC14N:

; 761  :                 prefix = NULL;

	mov	DWORD PTR _prefix$2[ebp], 0

; 762  : 		has_empty_ns_in_inclusive_list = 1;

	mov	DWORD PTR _has_empty_ns_in_inclusive_list$[ebp], 1
$LN13@xmlExcC14N:

; 763  :             }
; 764  : 
; 765  : 	    ns = xmlSearchNs(cur->doc, cur, prefix);

	mov	ecx, DWORD PTR _prefix$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ns$[ebp], eax

; 766  : 	    if((ns != NULL) && !xmlC14NIsXmlNs(ns) && xmlC14NIsVisible(ctx, ns, cur)) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN15@xmlExcC14N
	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	call	_xmlC14NIsXmlNs
	add	esp, 4
	test	eax, eax
	jne	$LN15@xmlExcC14N
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN37@xmlExcC14N
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $LN38@xmlExcC14N
$LN37@xmlExcC14N:
	mov	DWORD PTR tv144[ebp], 1
$LN38@xmlExcC14N:
	cmp	DWORD PTR tv144[ebp], 0
	je	SHORT $LN15@xmlExcC14N

; 767  : 		already_rendered = xmlC14NVisibleNsStackFind(ctx->ns_rendered, ns);

	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_xmlC14NVisibleNsStackFind
	add	esp, 8
	mov	DWORD PTR _already_rendered$[ebp], eax

; 768  : 		if(visible) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN16@xmlExcC14N

; 769  : 		    xmlC14NVisibleNsStackAdd(ctx->ns_rendered, ns, cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_xmlC14NVisibleNsStackAdd
	add	esp, 12					; 0000000cH
$LN16@xmlExcC14N:

; 770  : 		}
; 771  : 		if(!already_rendered) {

	cmp	DWORD PTR _already_rendered$[ebp], 0
	jne	SHORT $LN17@xmlExcC14N

; 772  : 		    xmlListInsert(list, ns);

	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_xmlListInsert
	add	esp, 8
$LN17@xmlExcC14N:

; 773  : 		}
; 774  : 		if(xmlStrlen(ns->prefix) == 0) {

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN15@xmlExcC14N

; 775  : 		    has_empty_ns = 1;

	mov	DWORD PTR _has_empty_ns$[ebp], 1
$LN15@xmlExcC14N:

; 776  : 		}
; 777  : 	    }
; 778  : 	}

	jmp	$LN2@xmlExcC14N
$LN12@xmlExcC14N:

; 779  :     }
; 780  : 
; 781  :     /* add node namespace */
; 782  :     if(cur->ns != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN19@xmlExcC14N

; 783  : 	ns = cur->ns;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _ns$[ebp], edx

; 784  :     } else {

	jmp	SHORT $LN20@xmlExcC14N
$LN19@xmlExcC14N:

; 785  :         ns = xmlSearchNs(cur->doc, cur, NULL);

	push	0
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ns$[ebp], eax

; 786  : 	has_visibly_utilized_empty_ns = 1;

	mov	DWORD PTR _has_visibly_utilized_empty_ns$[ebp], 1
$LN20@xmlExcC14N:

; 787  :     }
; 788  :     if((ns != NULL) && !xmlC14NIsXmlNs(ns)) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN21@xmlExcC14N
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	call	_xmlC14NIsXmlNs
	add	esp, 4
	test	eax, eax
	jne	$LN21@xmlExcC14N

; 789  : 	if(visible && xmlC14NIsVisible(ctx, ns, cur)) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN22@xmlExcC14N
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN39@xmlExcC14N
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv183[ebp], eax
	jmp	SHORT $LN40@xmlExcC14N
$LN39@xmlExcC14N:
	mov	DWORD PTR tv183[ebp], 1
$LN40@xmlExcC14N:
	cmp	DWORD PTR tv183[ebp], 0
	je	SHORT $LN22@xmlExcC14N

; 790  : 	    if(!xmlExcC14NVisibleNsStackFind(ctx->ns_rendered, ns, ctx)) {

	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlExcC14NVisibleNsStackFind
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN22@xmlExcC14N

; 791  : 		xmlListInsert(list, ns);

	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_xmlListInsert
	add	esp, 8
$LN22@xmlExcC14N:

; 792  : 	    }
; 793  : 	}
; 794  : 	if(visible) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN24@xmlExcC14N

; 795  : 	    xmlC14NVisibleNsStackAdd(ctx->ns_rendered, ns, cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlC14NVisibleNsStackAdd
	add	esp, 12					; 0000000cH
$LN24@xmlExcC14N:

; 796  : 	}
; 797  : 	if(xmlStrlen(ns->prefix) == 0) {

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN21@xmlExcC14N

; 798  : 	    has_empty_ns = 1;

	mov	DWORD PTR _has_empty_ns$[ebp], 1
$LN21@xmlExcC14N:

; 799  : 	}
; 800  :     }
; 801  : 
; 802  : 
; 803  :     /* add attributes */
; 804  :     for(attr = cur->properties; attr != NULL; attr = attr->next) {

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _attr$[ebp], eax
	jmp	SHORT $LN7@xmlExcC14N
$LN5@xmlExcC14N:
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _attr$[ebp], edx
$LN7@xmlExcC14N:
	cmp	DWORD PTR _attr$[ebp], 0
	je	$LN6@xmlExcC14N

; 805  :         /*
; 806  :          * we need to check that attribute is visible and has non
; 807  :          * default namespace (XML Namespaces: "default namespaces
; 808  : 	 * do not apply directly to attributes")
; 809  :          */
; 810  : 	if((attr->ns != NULL) && !xmlC14NIsXmlNs(attr->ns) && xmlC14NIsVisible(ctx, attr, cur)) {

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN26@xmlExcC14N
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_xmlC14NIsXmlNs
	add	esp, 4
	test	eax, eax
	jne	$LN26@xmlExcC14N
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN41@xmlExcC14N
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv219[ebp], eax
	jmp	SHORT $LN42@xmlExcC14N
$LN41@xmlExcC14N:
	mov	DWORD PTR tv219[ebp], 1
$LN42@xmlExcC14N:
	cmp	DWORD PTR tv219[ebp], 0
	je	SHORT $LN26@xmlExcC14N

; 811  : 	    already_rendered = xmlExcC14NVisibleNsStackFind(ctx->ns_rendered, attr->ns, ctx);

	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlExcC14NVisibleNsStackFind
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _already_rendered$[ebp], eax

; 812  : 	    xmlC14NVisibleNsStackAdd(ctx->ns_rendered, attr->ns, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_xmlC14NVisibleNsStackAdd
	add	esp, 12					; 0000000cH

; 813  : 	    if(!already_rendered && visible) {

	cmp	DWORD PTR _already_rendered$[ebp], 0
	jne	SHORT $LN28@xmlExcC14N
	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN28@xmlExcC14N

; 814  : 		xmlListInsert(list, attr->ns);

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_xmlListInsert
	add	esp, 8
$LN28@xmlExcC14N:

; 815  : 	    }
; 816  : 	    if(xmlStrlen(attr->ns->prefix) == 0) {

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN29@xmlExcC14N

; 817  : 		has_empty_ns = 1;

	mov	DWORD PTR _has_empty_ns$[ebp], 1
$LN29@xmlExcC14N:

; 818  : 	    }

	jmp	SHORT $LN27@xmlExcC14N
$LN26@xmlExcC14N:

; 819  : 	} else if((attr->ns != NULL) && (xmlStrlen(attr->ns->prefix) == 0) && (xmlStrlen(attr->ns->href) == 0)) {

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN27@xmlExcC14N
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN27@xmlExcC14N
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN27@xmlExcC14N

; 820  : 	    has_visibly_utilized_empty_ns = 1;

	mov	DWORD PTR _has_visibly_utilized_empty_ns$[ebp], 1
$LN27@xmlExcC14N:

; 821  : 	}
; 822  :     }

	jmp	$LN5@xmlExcC14N
$LN6@xmlExcC14N:

; 823  : 
; 824  :     /*
; 825  :      * Process xmlns=""
; 826  :      */
; 827  :     if(visible && has_visibly_utilized_empty_ns &&
; 828  : 	    !has_empty_ns && !has_empty_ns_in_inclusive_list) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN31@xmlExcC14N
	cmp	DWORD PTR _has_visibly_utilized_empty_ns$[ebp], 0
	je	SHORT $LN31@xmlExcC14N
	cmp	DWORD PTR _has_empty_ns$[ebp], 0
	jne	SHORT $LN31@xmlExcC14N
	cmp	DWORD PTR _has_empty_ns_in_inclusive_list$[ebp], 0
	jne	SHORT $LN31@xmlExcC14N

; 829  :         static xmlNs ns_default;
; 830  : 
; 831  :         memset(&ns_default, 0, sizeof(ns_default));

	xor	eax, eax
	mov	DWORD PTR ?ns_default@?BL@??xmlExcC14NProcessNamespacesAxis@@9@9, eax
	mov	DWORD PTR ?ns_default@?BL@??xmlExcC14NProcessNamespacesAxis@@9@9+4, eax
	mov	DWORD PTR ?ns_default@?BL@??xmlExcC14NProcessNamespacesAxis@@9@9+8, eax
	mov	DWORD PTR ?ns_default@?BL@??xmlExcC14NProcessNamespacesAxis@@9@9+12, eax
	mov	DWORD PTR ?ns_default@?BL@??xmlExcC14NProcessNamespacesAxis@@9@9+16, eax
	mov	DWORD PTR ?ns_default@?BL@??xmlExcC14NProcessNamespacesAxis@@9@9+20, eax

; 832  : 
; 833  :         already_rendered = xmlExcC14NVisibleNsStackFind(ctx->ns_rendered, &ns_default, ctx);

	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	push	OFFSET ?ns_default@?BL@??xmlExcC14NProcessNamespacesAxis@@9@9
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_xmlExcC14NVisibleNsStackFind
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _already_rendered$[ebp], eax

; 834  : 	if(!already_rendered) {

	cmp	DWORD PTR _already_rendered$[ebp], 0
	jne	SHORT $LN33@xmlExcC14N

; 835  : 	    xmlC14NPrintNamespaces(&ns_default, ctx);

	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	push	OFFSET ?ns_default@?BL@??xmlExcC14NProcessNamespacesAxis@@9@9
	call	_xmlC14NPrintNamespaces
	add	esp, 8
$LN33@xmlExcC14N:

; 836  : 	}

	jmp	SHORT $LN32@xmlExcC14N
$LN31@xmlExcC14N:

; 837  :     } else if(visible && !has_empty_ns && has_empty_ns_in_inclusive_list) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN32@xmlExcC14N
	cmp	DWORD PTR _has_empty_ns$[ebp], 0
	jne	SHORT $LN32@xmlExcC14N
	cmp	DWORD PTR _has_empty_ns_in_inclusive_list$[ebp], 0
	je	SHORT $LN32@xmlExcC14N

; 838  :         static xmlNs ns_default;
; 839  : 
; 840  :         memset(&ns_default, 0, sizeof(ns_default));

	xor	edx, edx
	mov	DWORD PTR ?ns_default@?BN@??xmlExcC14NProcessNamespacesAxis@@9@9, edx
	mov	DWORD PTR ?ns_default@?BN@??xmlExcC14NProcessNamespacesAxis@@9@9+4, edx
	mov	DWORD PTR ?ns_default@?BN@??xmlExcC14NProcessNamespacesAxis@@9@9+8, edx
	mov	DWORD PTR ?ns_default@?BN@??xmlExcC14NProcessNamespacesAxis@@9@9+12, edx
	mov	DWORD PTR ?ns_default@?BN@??xmlExcC14NProcessNamespacesAxis@@9@9+16, edx
	mov	DWORD PTR ?ns_default@?BN@??xmlExcC14NProcessNamespacesAxis@@9@9+20, edx

; 841  :         if(!xmlC14NVisibleNsStackFind(ctx->ns_rendered, &ns_default)) {

	push	OFFSET ?ns_default@?BN@??xmlExcC14NProcessNamespacesAxis@@9@9
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_xmlC14NVisibleNsStackFind
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN32@xmlExcC14N

; 842  : 	    xmlC14NPrintNamespaces(&ns_default, ctx);

	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	push	OFFSET ?ns_default@?BN@??xmlExcC14NProcessNamespacesAxis@@9@9
	call	_xmlC14NPrintNamespaces
	add	esp, 8
$LN32@xmlExcC14N:

; 843  : 	}
; 844  :     }
; 845  : 
; 846  : 
; 847  : 
; 848  :     /*
; 849  :      * print out all elements from list
; 850  :      */
; 851  :     xmlListWalk(list, xmlC14NPrintNamespacesWalker, (void *) ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	push	OFFSET _xmlC14NPrintNamespacesWalker
	mov	ecx, DWORD PTR _list$[ebp]
	push	ecx
	call	_xmlListWalk
	add	esp, 12					; 0000000cH

; 852  : 
; 853  :     /*
; 854  :      * Cleanup
; 855  :      */
; 856  :     xmlListDelete(list);

	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_xmlListDelete
	add	esp, 4

; 857  :     return (0);

	xor	eax, eax
$LN1@xmlExcC14N:

; 858  : }

	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlExcC14NProcessNamespacesAxis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NProcessNamespacesAxis
_TEXT	SEGMENT
tv129 = -28						; size = 4
_has_empty_ns$ = -24					; size = 4
_already_rendered$ = -20				; size = 4
_list$ = -16						; size = 4
_tmp$ = -12						; size = 4
_ns$ = -8						; size = 4
_n$ = -4						; size = 4
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_visible$ = 16						; size = 4
_xmlC14NProcessNamespacesAxis PROC			; COMDAT

; 611  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 612  :     xmlNodePtr n;
; 613  :     xmlNsPtr ns, tmp;
; 614  :     xmlListPtr list;
; 615  :     int already_rendered;
; 616  :     int has_empty_ns = 0;

	mov	DWORD PTR _has_empty_ns$[ebp], 0

; 617  : 
; 618  :     if ((ctx == NULL) || (cur == NULL) || (cur->type != XML_ELEMENT_NODE)) {

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN9@xmlC14NPro
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN9@xmlC14NPro
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN8@xmlC14NPro
$LN9@xmlC14NPro:

; 619  :         xmlC14NErrParam("processing namespaces axis (c14n)");

	push	OFFSET ??_C@_0CC@LGNLNPPM@processing?5namespaces?5axis?5?$CIc14@
	call	_xmlC14NErrParam
	add	esp, 4

; 620  :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN8@xmlC14NPro:

; 621  :     }
; 622  : 
; 623  :     /*
; 624  :      * Create a sorted list to store element namespaces
; 625  :      */
; 626  :     list = xmlListCreate(NULL, xmlC14NNsCompare);

	push	OFFSET _xmlC14NNsCompare
	push	0
	call	_xmlListCreate
	add	esp, 8
	mov	DWORD PTR _list$[ebp], eax

; 627  :     if (list == NULL) {

	cmp	DWORD PTR _list$[ebp], 0
	jne	SHORT $LN10@xmlC14NPro

; 628  :         xmlC14NErrInternal("creating namespaces list (c14n)");

	push	OFFSET ??_C@_0CA@IIFGGKIF@creating?5namespaces?5list?5?$CIc14n?$CJ@
	call	_xmlC14NErrInternal
	add	esp, 4

; 629  :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN10@xmlC14NPro:

; 630  :     }
; 631  : 
; 632  :     /* check all namespaces */
; 633  :     for(n = cur; n != NULL; n = n->parent) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _n$[ebp], ecx
	jmp	SHORT $LN4@xmlC14NPro
$LN2@xmlC14NPro:
	mov	edx, DWORD PTR _n$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _n$[ebp], eax
$LN4@xmlC14NPro:
	cmp	DWORD PTR _n$[ebp], 0
	je	$LN3@xmlC14NPro

; 634  : 	for(ns = n->nsDef; ns != NULL; ns = ns->next) {

	mov	ecx, DWORD PTR _n$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _ns$[ebp], edx
	jmp	SHORT $LN7@xmlC14NPro
$LN5@xmlC14NPro:
	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ns$[ebp], ecx
$LN7@xmlC14NPro:
	cmp	DWORD PTR _ns$[ebp], 0
	je	$LN6@xmlC14NPro

; 635  : 	    tmp = xmlSearchNs(cur->doc, cur, ns->prefix);

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tmp$[ebp], eax

; 636  : 
; 637  : 	    if((tmp == ns) && !xmlC14NIsXmlNs(ns) && xmlC14NIsVisible(ctx, ns, cur)) {

	mov	ecx, DWORD PTR _tmp$[ebp]
	cmp	ecx, DWORD PTR _ns$[ebp]
	jne	$LN11@xmlC14NPro
	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	call	_xmlC14NIsXmlNs
	add	esp, 4
	test	eax, eax
	jne	$LN11@xmlC14NPro
	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN18@xmlC14NPro
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN19@xmlC14NPro
$LN18@xmlC14NPro:
	mov	DWORD PTR tv129[ebp], 1
$LN19@xmlC14NPro:
	cmp	DWORD PTR tv129[ebp], 0
	je	SHORT $LN11@xmlC14NPro

; 638  : 		already_rendered = xmlC14NVisibleNsStackFind(ctx->ns_rendered, ns);

	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_xmlC14NVisibleNsStackFind
	add	esp, 8
	mov	DWORD PTR _already_rendered$[ebp], eax

; 639  : 		if(visible) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN12@xmlC14NPro

; 640  : 	    xmlC14NVisibleNsStackAdd(ctx->ns_rendered, ns, cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_xmlC14NVisibleNsStackAdd
	add	esp, 12					; 0000000cH
$LN12@xmlC14NPro:

; 641  : 		}
; 642  : 		if(!already_rendered) {

	cmp	DWORD PTR _already_rendered$[ebp], 0
	jne	SHORT $LN13@xmlC14NPro

; 643  : 		    xmlListInsert(list, ns);

	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_xmlListInsert
	add	esp, 8
$LN13@xmlC14NPro:

; 644  : 		}
; 645  : 		if(xmlStrlen(ns->prefix) == 0) {

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN11@xmlC14NPro

; 646  : 		    has_empty_ns = 1;

	mov	DWORD PTR _has_empty_ns$[ebp], 1
$LN11@xmlC14NPro:

; 647  : 		}
; 648  : 	    }
; 649  : 	}

	jmp	$LN5@xmlC14NPro
$LN6@xmlC14NPro:

; 650  :     }

	jmp	$LN2@xmlC14NPro
$LN3@xmlC14NPro:

; 651  : 
; 652  :     /**
; 653  :      * if the first node is not the default namespace node (a node with no
; 654  :      * namespace URI and no local name), then generate a space followed by
; 655  :      * xmlns="" if and only if the following conditions are met:
; 656  :      *  - the element E that owns the axis is in the node-set
; 657  :      *  - the nearest ancestor element of E in the node-set has a default
; 658  :      *     namespace node in the node-set (default namespace nodes always
; 659  :      *     have non-empty values in XPath)
; 660  :      */
; 661  :     if(visible && !has_empty_ns) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN15@xmlC14NPro
	cmp	DWORD PTR _has_empty_ns$[ebp], 0
	jne	SHORT $LN15@xmlC14NPro

; 662  :         static xmlNs ns_default;
; 663  : 
; 664  :         memset(&ns_default, 0, sizeof(ns_default));

	xor	eax, eax
	mov	DWORD PTR ?ns_default@?N@??xmlC14NProcessNamespacesAxis@@9@9, eax
	mov	DWORD PTR ?ns_default@?N@??xmlC14NProcessNamespacesAxis@@9@9+4, eax
	mov	DWORD PTR ?ns_default@?N@??xmlC14NProcessNamespacesAxis@@9@9+8, eax
	mov	DWORD PTR ?ns_default@?N@??xmlC14NProcessNamespacesAxis@@9@9+12, eax
	mov	DWORD PTR ?ns_default@?N@??xmlC14NProcessNamespacesAxis@@9@9+16, eax
	mov	DWORD PTR ?ns_default@?N@??xmlC14NProcessNamespacesAxis@@9@9+20, eax

; 665  :         if(!xmlC14NVisibleNsStackFind(ctx->ns_rendered, &ns_default)) {

	push	OFFSET ?ns_default@?N@??xmlC14NProcessNamespacesAxis@@9@9
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlC14NVisibleNsStackFind
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@xmlC14NPro

; 666  : 	    xmlC14NPrintNamespaces(&ns_default, ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	push	OFFSET ?ns_default@?N@??xmlC14NProcessNamespacesAxis@@9@9
	call	_xmlC14NPrintNamespaces
	add	esp, 8
$LN15@xmlC14NPro:

; 667  : 	}
; 668  :     }
; 669  : 
; 670  : 
; 671  :     /*
; 672  :      * print out all elements from list
; 673  :      */
; 674  :     xmlListWalk(list, xmlC14NPrintNamespacesWalker, (void *) ctx);

	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	push	OFFSET _xmlC14NPrintNamespacesWalker
	mov	edx, DWORD PTR _list$[ebp]
	push	edx
	call	_xmlListWalk
	add	esp, 12					; 0000000cH

; 675  : 
; 676  :     /*
; 677  :      * Cleanup
; 678  :      */
; 679  :     xmlListDelete(list);

	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	_xmlListDelete
	add	esp, 4

; 680  :     return (0);

	xor	eax, eax
$LN1@xmlC14NPro:

; 681  : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NProcessNamespacesAxis ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NPrintNamespacesWalker
_TEXT	SEGMENT
_ns$ = 8						; size = 4
_ctx$ = 12						; size = 4
_xmlC14NPrintNamespacesWalker PROC			; COMDAT

; 566  : xmlC14NPrintNamespacesWalker(const void *ns, void *ctx) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 567  :     return xmlC14NPrintNamespaces((const xmlNsPtr) ns, (xmlC14NCtxPtr) ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	call	_xmlC14NPrintNamespaces
	add	esp, 8

; 568  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NPrintNamespacesWalker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NPrintNamespaces
_TEXT	SEGMENT
_ns$ = 8						; size = 4
_ctx$ = 12						; size = 4
_xmlC14NPrintNamespaces PROC				; COMDAT

; 543  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 544  : 
; 545  :     if ((ns == NULL) || (ctx == NULL)) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlC14NPri
	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN2@xmlC14NPri
$LN3@xmlC14NPri:

; 546  :         xmlC14NErrParam("writing namespaces");

	push	OFFSET ??_C@_0BD@MCMJLIHF@writing?5namespaces@
	call	_xmlC14NErrParam
	add	esp, 4

; 547  :         return 0;

	xor	eax, eax
	jmp	$LN1@xmlC14NPri
$LN2@xmlC14NPri:

; 548  :     }
; 549  : 
; 550  :     if (ns->prefix != NULL) {

	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@xmlC14NPri

; 551  :         xmlOutputBufferWriteString(ctx->buf, " xmlns:");

	push	OFFSET ??_C@_07PMGDNCAE@?5xmlns?3@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 552  :         xmlOutputBufferWriteString(ctx->buf, (const char *) ns->prefix);

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 553  :         xmlOutputBufferWriteString(ctx->buf, "=");

	push	OFFSET ??_C@_01NEMOKFLO@?$DN@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 554  :     } else {

	jmp	SHORT $LN5@xmlC14NPri
$LN4@xmlC14NPri:

; 555  :         xmlOutputBufferWriteString(ctx->buf, " xmlns=");

	push	OFFSET ??_C@_07LDCCEEMD@?5xmlns?$DN@
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN5@xmlC14NPri:

; 556  :     }
; 557  :     if(ns->href != NULL) {

	mov	edx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN6@xmlC14NPri

; 558  : 	xmlBufWriteQuotedString(ctx->buf->buffer, ns->href);

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlBufWriteQuotedString
	add	esp, 8

; 559  :     } else {

	jmp	SHORT $LN7@xmlC14NPri
$LN6@xmlC14NPri:

; 560  :     	xmlOutputBufferWriteString(ctx->buf, "\"\"");

	push	OFFSET ??_C@_02JMMFPCED@?$CC?$CC@
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN7@xmlC14NPri:

; 561  :     }
; 562  :     return (1);

	mov	eax, 1
$LN1@xmlC14NPri:

; 563  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NPrintNamespaces ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NNsCompare
_TEXT	SEGMENT
_ns2$ = -8						; size = 4
_ns1$ = -4						; size = 4
_data1$ = 8						; size = 4
_data2$ = 12						; size = 4
_xmlC14NNsCompare PROC					; COMDAT

; 518  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 519  :     const xmlNsPtr ns1 = (const xmlNsPtr) data1;

	mov	eax, DWORD PTR _data1$[ebp]
	mov	DWORD PTR _ns1$[ebp], eax

; 520  :     const xmlNsPtr ns2 = (const xmlNsPtr) data2;

	mov	ecx, DWORD PTR _data2$[ebp]
	mov	DWORD PTR _ns2$[ebp], ecx

; 521  :     if (ns1 == ns2)

	mov	edx, DWORD PTR _ns1$[ebp]
	cmp	edx, DWORD PTR _ns2$[ebp]
	jne	SHORT $LN2@xmlC14NNsC

; 522  :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlC14NNsC
$LN2@xmlC14NNsC:

; 523  :     if (ns1 == NULL)

	cmp	DWORD PTR _ns1$[ebp], 0
	jne	SHORT $LN3@xmlC14NNsC

; 524  :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NNsC
$LN3@xmlC14NNsC:

; 525  :     if (ns2 == NULL)

	cmp	DWORD PTR _ns2$[ebp], 0
	jne	SHORT $LN4@xmlC14NNsC

; 526  :         return (1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlC14NNsC
$LN4@xmlC14NNsC:

; 527  : 
; 528  :     return (xmlStrcmp(ns1->prefix, ns2->prefix));

	mov	eax, DWORD PTR _ns2$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ns1$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlStrcmp
	add	esp, 8
$LN1@xmlC14NNsC:

; 529  : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NNsCompare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NIsXmlNs
_TEXT	SEGMENT
tv75 = -4						; size = 4
_ns$ = 8						; size = 4
_xmlC14NIsXmlNs PROC					; COMDAT

; 500  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 501  :     return ((ns != NULL) &&

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlC14NIsX
	push	OFFSET ??_C@_03PJHHNEEI@xml@
	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@xmlC14NIsX
	push	OFFSET ??_C@_0CF@GLDAAHFK@http?3?1?1www?4w3?4org?1XML?11998?1name@
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@xmlC14NIsX
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN4@xmlC14NIsX
$LN3@xmlC14NIsX:
	mov	DWORD PTR tv75[ebp], 0
$LN4@xmlC14NIsX:
	mov	eax, DWORD PTR tv75[ebp]

; 502  :             (xmlStrEqual(ns->prefix, BAD_CAST "xml")) &&
; 503  :             (xmlStrEqual(ns->href, XML_XML_NAMESPACE)));
; 504  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NIsXmlNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NStrEqual
_TEXT	SEGMENT
tv82 = -21						; size = 1
tv79 = -20						; size = 4
tv78 = -16						; size = 4
tv77 = -12						; size = 4
tv72 = -8						; size = 4
tv68 = -4						; size = 4
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
_xmlC14NStrEqual PROC					; COMDAT

; 394  : xmlC14NStrEqual(const xmlChar *str1, const xmlChar *str2) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 395  :     if (str1 == str2) return(1);

	mov	eax, DWORD PTR _str1$[ebp]
	cmp	eax, DWORD PTR _str2$[ebp]
	jne	SHORT $LN5@xmlC14NStr
	mov	eax, 1
	jmp	$LN1@xmlC14NStr
$LN5@xmlC14NStr:

; 396  :     if (str1 == NULL) return((*str2) == '\0');

	cmp	DWORD PTR _str1$[ebp], 0
	jne	SHORT $LN6@xmlC14NStr
	mov	ecx, DWORD PTR _str2$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN10@xmlC14NStr
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN11@xmlC14NStr
$LN10@xmlC14NStr:
	mov	DWORD PTR tv68[ebp], 0
$LN11@xmlC14NStr:
	mov	eax, DWORD PTR tv68[ebp]
	jmp	$LN1@xmlC14NStr
$LN6@xmlC14NStr:

; 397  :     if (str2 == NULL) return((*str1) == '\0');

	cmp	DWORD PTR _str2$[ebp], 0
	jne	SHORT $LN4@xmlC14NStr
	mov	eax, DWORD PTR _str1$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN12@xmlC14NStr
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN13@xmlC14NStr
$LN12@xmlC14NStr:
	mov	DWORD PTR tv72[ebp], 0
$LN13@xmlC14NStr:
	mov	eax, DWORD PTR tv72[ebp]
	jmp	SHORT $LN1@xmlC14NStr
$LN4@xmlC14NStr:

; 398  :     do {
; 399  : 	if (*str1++ != *str2) return(0);

	mov	edx, DWORD PTR _str1$[ebp]
	movzx	eax, BYTE PTR [edx]
	mov	DWORD PTR tv77[ebp], eax
	mov	ecx, DWORD PTR _str2$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR tv78[ebp], edx
	mov	eax, DWORD PTR _str1$[ebp]
	add	eax, 1
	mov	DWORD PTR _str1$[ebp], eax
	mov	ecx, DWORD PTR tv77[ebp]
	cmp	ecx, DWORD PTR tv78[ebp]
	je	SHORT $LN14@xmlC14NStr
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN15@xmlC14NStr
$LN14@xmlC14NStr:
	mov	DWORD PTR tv79[ebp], 0
$LN15@xmlC14NStr:
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN2@xmlC14NStr
	xor	eax, eax
	jmp	SHORT $LN1@xmlC14NStr
$LN2@xmlC14NStr:

; 400  :     } while (*str2++);

	mov	edx, DWORD PTR _str2$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv82[ebp], al
	mov	ecx, DWORD PTR _str2$[ebp]
	add	ecx, 1
	mov	DWORD PTR _str2$[ebp], ecx
	movzx	edx, BYTE PTR tv82[ebp]
	test	edx, edx
	jne	SHORT $LN4@xmlC14NStr

; 401  :     return(1);

	mov	eax, 1
$LN1@xmlC14NStr:

; 402  : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NStrEqual ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NErr
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_node$ = 12						; size = 4
_error$ = 16						; size = 4
_msg$ = 20						; size = 4
_xmlC14NErr PROC					; COMDAT

; 238  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 239  :     if (ctxt != NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlC14NErr

; 240  :         ctxt->error = error;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _error$[ebp]
	mov	DWORD PTR [eax+40], ecx
$LN2@xmlC14NErr:

; 241  :     __xmlRaiseError(NULL, NULL, NULL,

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	push	21					; 00000015H
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 242  : 		    ctxt, node, XML_FROM_C14N, error,
; 243  : 		    XML_ERR_ERROR, NULL, 0,
; 244  : 		    NULL, NULL, NULL, 0, 0, "%s", msg);
; 245  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NErr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NErrRelativeNamespace
_TEXT	SEGMENT
_ns_uri$ = 8						; size = 4
_xmlC14NErrRelativeNamespace PROC			; COMDAT

; 216  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 217  :     __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_C14N,

	mov	eax, DWORD PTR _ns_uri$[ebp]
	push	eax
	push	OFFSET ??_C@_0CM@HOAPKNKJ@Relative?5namespace?5UR?5is?5invali@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	2
	push	1955					; 000007a3H
	push	21					; 00000015H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 218  : 		    XML_C14N_RELATIVE_NAMESPACE, XML_ERR_ERROR, NULL, 0, NULL,
; 219  : 		    NULL, NULL, 0, 0,
; 220  : 		    "Relative namespace UR is invalid here : %s\n", ns_uri);
; 221  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NErrRelativeNamespace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NErrUnknownNode
_TEXT	SEGMENT
_node_type$ = 8						; size = 4
_extra$ = 12						; size = 4
_xmlC14NErrUnknownNode PROC				; COMDAT

; 201  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 202  :     __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_C14N,

	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node_type$[ebp]
	push	ecx
	push	OFFSET ??_C@_0CB@LPHDJOLE@Unknown?5node?5type?5?$CFd?5found?5?3?5?$CFs@
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _extra$[ebp]
	push	edx
	push	0
	push	0
	push	2
	push	1954					; 000007a2H
	push	21					; 00000015H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 203  : 		    XML_C14N_UNKNOW_NODE, XML_ERR_ERROR, NULL, 0, extra,
; 204  : 		    NULL, NULL, 0, 0,
; 205  : 		    "Unknown node type %d found : %s\n", node_type, extra);
; 206  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NErrUnknownNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NErrInvalidNode
_TEXT	SEGMENT
_node_type$ = 8						; size = 4
_extra$ = 12						; size = 4
_xmlC14NErrInvalidNode PROC				; COMDAT

; 186  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 187  :     __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_C14N,

	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	mov	ecx, DWORD PTR _node_type$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BO@DIKCFALP@Node?5?$CFs?5is?5invalid?5here?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _extra$[ebp]
	push	edx
	push	0
	push	0
	push	2
	push	1953					; 000007a1H
	push	21					; 00000015H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 188  : 		    XML_C14N_INVALID_NODE, XML_ERR_ERROR, NULL, 0, extra,
; 189  : 		    NULL, NULL, 0, 0,
; 190  : 		    "Node %s is invalid here : %s\n", node_type, extra);
; 191  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NErrInvalidNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NErrInternal
_TEXT	SEGMENT
_extra$ = 8						; size = 4
_xmlC14NErrInternal PROC				; COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 172  :     __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_C14N,

	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	OFFSET ??_C@_0BF@KAEIDNN@Internal?5error?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _extra$[ebp]
	push	ecx
	push	0
	push	0
	push	2
	push	1
	push	21					; 00000015H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 173  : 		    XML_ERR_INTERNAL_ERROR, XML_ERR_ERROR, NULL, 0, extra,
; 174  : 		    NULL, NULL, 0, 0,
; 175  : 		    "Internal error : %s\n", extra);
; 176  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NErrInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NErrParam
_TEXT	SEGMENT
_extra$ = 8						; size = 4
_xmlC14NErrParam PROC					; COMDAT

; 156  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 157  :     __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_C14N,

	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	OFFSET ??_C@_0BI@NBDMDFEL@Invalid?5parameter?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _extra$[ebp]
	push	ecx
	push	0
	push	0
	push	2
	push	1
	push	21					; 00000015H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 158  : 		    XML_ERR_INTERNAL_ERROR, XML_ERR_ERROR, NULL, 0, extra,
; 159  : 		    NULL, NULL, 0, 0,
; 160  : 		    "Invalid parameter : %s\n", extra);
; 161  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NErrParam ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NErrMemory
_TEXT	SEGMENT
_extra$ = 8						; size = 4
_xmlC14NErrMemory PROC					; COMDAT

; 141  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 142  :     __xmlRaiseError(NULL, NULL, NULL, NULL, NULL, XML_FROM_C14N,

	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _extra$[ebp]
	push	ecx
	push	0
	push	0
	push	2
	push	2
	push	21					; 00000015H
	push	0
	push	0
	push	0
	push	0
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 143  : 		    XML_ERR_NO_MEMORY, XML_ERR_ERROR, NULL, 0, extra,
; 144  : 		    NULL, NULL, 0, 0,
; 145  : 		    "Memory allocation failed : %s\n", extra);
; 146  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NErrMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC11NNormalizeString
_TEXT	SEGMENT
_indx$1 = -20						; size = 4
_buffer_size$ = -16					; size = 4
_out$ = -12						; size = 4
_buffer$ = -8						; size = 4
_cur$ = -4						; size = 4
_input$ = 8						; size = 4
_mode$ = 12						; size = 4
_xmlC11NNormalizeString PROC				; COMDAT

; 2145 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 2146 :     const xmlChar *cur = input;

	mov	eax, DWORD PTR _input$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 2147 :     xmlChar *buffer = NULL;

	mov	DWORD PTR _buffer$[ebp], 0

; 2148 :     xmlChar *out = NULL;

	mov	DWORD PTR _out$[ebp], 0

; 2149 :     int buffer_size = 0;

	mov	DWORD PTR _buffer_size$[ebp], 0

; 2150 : 
; 2151 :     if (input == NULL)

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN4@xmlC11NNor

; 2152 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC11NNor
$LN4@xmlC11NNor:

; 2153 : 
; 2154 :     /*
; 2155 :      * allocate an translation buffer.
; 2156 :      */
; 2157 :     buffer_size = 1000;

	mov	DWORD PTR _buffer_size$[ebp], 1000	; 000003e8H

; 2158 :     buffer = (xmlChar *) xmlMallocAtomic(buffer_size * sizeof(xmlChar));

	mov	esi, esp
	mov	ecx, DWORD PTR _buffer_size$[ebp]
	push	ecx
	call	DWORD PTR _xmlMallocAtomic
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$[ebp], eax

; 2159 :     if (buffer == NULL) {

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN5@xmlC11NNor

; 2160 : 	xmlC14NErrMemory("allocating buffer");

	push	OFFSET ??_C@_0BC@MDOPFBLJ@allocating?5buffer@
	call	_xmlC14NErrMemory
	add	esp, 4

; 2161 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlC11NNor
$LN5@xmlC11NNor:

; 2162 :     }
; 2163 :     out = buffer;

	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _out$[ebp], edx
$LN2@xmlC11NNor:

; 2164 : 
; 2165 :     while (*cur != '\0') {

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN3@xmlC11NNor

; 2166 :         if ((out - buffer) > (buffer_size - 10)) {

	mov	edx, DWORD PTR _out$[ebp]
	sub	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR _buffer_size$[ebp]
	sub	eax, 10					; 0000000aH
	cmp	edx, eax
	jle	SHORT $LN6@xmlC11NNor

; 2167 :             int indx = out - buffer;

	mov	ecx, DWORD PTR _out$[ebp]
	sub	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR _indx$1[ebp], ecx

; 2168 : 
; 2169 :             growBufferReentrant();

	mov	edx, DWORD PTR _buffer_size$[ebp]
	shl	edx, 1
	mov	DWORD PTR _buffer_size$[ebp], edx
	mov	esi, esp
	mov	eax, DWORD PTR _buffer_size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _buffer$[ebp], eax
	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN7@xmlC11NNor
	push	OFFSET ??_C@_0P@LKGMENGP@growing?5buffer@
	call	_xmlC14NErrMemory
	add	esp, 4
	xor	eax, eax
	jmp	$LN1@xmlC11NNor
$LN7@xmlC11NNor:

; 2170 :             out = &buffer[indx];

	mov	edx, DWORD PTR _buffer$[ebp]
	add	edx, DWORD PTR _indx$1[ebp]
	mov	DWORD PTR _out$[ebp], edx
$LN6@xmlC11NNor:

; 2171 :         }
; 2172 : 
; 2173 :         if ((*cur == '<') && ((mode == XMLC14N_NORMALIZE_ATTR) ||

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 60					; 0000003cH
	jne	SHORT $LN8@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 0
	je	SHORT $LN10@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 3
	jne	SHORT $LN8@xmlC11NNor
$LN10@xmlC11NNor:

; 2174 :                               (mode == XMLC14N_NORMALIZE_TEXT))) {
; 2175 :             *out++ = '&';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 38			; 00000026H
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 2176 :             *out++ = 'l';

	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 108			; 0000006cH
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx

; 2177 :             *out++ = 't';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 116			; 00000074H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2178 :             *out++ = ';';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 59			; 0000003bH
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax
	jmp	$LN9@xmlC11NNor
$LN8@xmlC11NNor:

; 2179 :         } else if ((*cur == '>') && (mode == XMLC14N_NORMALIZE_TEXT)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 62					; 0000003eH
	jne	SHORT $LN11@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 3
	jne	SHORT $LN11@xmlC11NNor

; 2180 :             *out++ = '&';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 38			; 00000026H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2181 :             *out++ = 'g';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 103			; 00000067H
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 2182 :             *out++ = 't';

	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 116			; 00000074H
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx

; 2183 :             *out++ = ';';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 59			; 0000003bH
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
	jmp	$LN9@xmlC11NNor
$LN11@xmlC11NNor:

; 2184 :         } else if ((*cur == '&') && ((mode == XMLC14N_NORMALIZE_ATTR) ||

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 38					; 00000026H
	jne	SHORT $LN13@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 0
	je	SHORT $LN15@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 3
	jne	SHORT $LN13@xmlC11NNor
$LN15@xmlC11NNor:

; 2185 :                                      (mode == XMLC14N_NORMALIZE_TEXT))) {
; 2186 :             *out++ = '&';

	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 38			; 00000026H
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx

; 2187 :             *out++ = 'a';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 97			; 00000061H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2188 :             *out++ = 'm';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 109			; 0000006dH
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 2189 :             *out++ = 'p';

	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 112			; 00000070H
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx

; 2190 :             *out++ = ';';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 59			; 0000003bH
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
	jmp	$LN9@xmlC11NNor
$LN13@xmlC11NNor:

; 2191 :         } else if ((*cur == '"') && (mode == XMLC14N_NORMALIZE_ATTR)) {

	mov	edx, DWORD PTR _cur$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 34					; 00000022H
	jne	SHORT $LN16@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN16@xmlC11NNor

; 2192 :             *out++ = '&';

	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 38			; 00000026H
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx

; 2193 :             *out++ = 'q';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 113			; 00000071H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2194 :             *out++ = 'u';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 117			; 00000075H
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 2195 :             *out++ = 'o';

	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 111			; 0000006fH
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx

; 2196 :             *out++ = 't';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 116			; 00000074H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2197 :             *out++ = ';';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 59			; 0000003bH
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax
	jmp	$LN9@xmlC11NNor
$LN16@xmlC11NNor:

; 2198 :         } else if ((*cur == '\x09') && (mode == XMLC14N_NORMALIZE_ATTR)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jne	SHORT $LN18@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN18@xmlC11NNor

; 2199 :             *out++ = '&';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 38			; 00000026H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2200 :             *out++ = '#';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 35			; 00000023H
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 2201 :             *out++ = 'x';

	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 120			; 00000078H
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx

; 2202 :             *out++ = '9';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 57			; 00000039H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2203 :             *out++ = ';';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 59			; 0000003bH
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax
	jmp	$LN9@xmlC11NNor
$LN18@xmlC11NNor:

; 2204 :         } else if ((*cur == '\x0A') && (mode == XMLC14N_NORMALIZE_ATTR)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jne	SHORT $LN20@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 0
	jne	SHORT $LN20@xmlC11NNor

; 2205 :             *out++ = '&';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 38			; 00000026H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2206 :             *out++ = '#';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 35			; 00000023H
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 2207 :             *out++ = 'x';

	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 120			; 00000078H
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx

; 2208 :             *out++ = 'A';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 65			; 00000041H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2209 :             *out++ = ';';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 59			; 0000003bH
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax
	jmp	$LN9@xmlC11NNor
$LN20@xmlC11NNor:

; 2210 :         } else if ((*cur == '\x0D') && ((mode == XMLC14N_NORMALIZE_ATTR) ||

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN22@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 0
	je	SHORT $LN24@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 3
	je	SHORT $LN24@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 1
	je	SHORT $LN24@xmlC11NNor
	cmp	DWORD PTR _mode$[ebp], 2
	jne	SHORT $LN22@xmlC11NNor
$LN24@xmlC11NNor:

; 2211 :                                         (mode == XMLC14N_NORMALIZE_TEXT) ||
; 2212 :                                         (mode == XMLC14N_NORMALIZE_COMMENT) ||
; 2213 : 					(mode == XMLC14N_NORMALIZE_PI))) {
; 2214 :             *out++ = '&';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 38			; 00000026H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2215 :             *out++ = '#';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 35			; 00000023H
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 2216 :             *out++ = 'x';

	mov	ecx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [ecx], 120			; 00000078H
	mov	edx, DWORD PTR _out$[ebp]
	add	edx, 1
	mov	DWORD PTR _out$[ebp], edx

; 2217 :             *out++ = 'D';

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 68			; 00000044H
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx

; 2218 :             *out++ = ';';

	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [edx], 59			; 0000003bH
	mov	eax, DWORD PTR _out$[ebp]
	add	eax, 1
	mov	DWORD PTR _out$[ebp], eax

; 2219 :         } else {

	jmp	SHORT $LN9@xmlC11NNor
$LN22@xmlC11NNor:

; 2220 :             /*
; 2221 :              * Works because on UTF-8, all extended sequences cannot
; 2222 :              * result in bytes in the ASCII range.
; 2223 :              */
; 2224 :             *out++ = *cur;

	mov	ecx, DWORD PTR _out$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _out$[ebp]
	add	ecx, 1
	mov	DWORD PTR _out$[ebp], ecx
$LN9@xmlC11NNor:

; 2225 :         }
; 2226 :         cur++;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$[ebp], edx

; 2227 :     }

	jmp	$LN2@xmlC11NNor
$LN3@xmlC11NNor:

; 2228 :     *out = 0;

	mov	eax, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax], 0

; 2229 :     return (buffer);

	mov	eax, DWORD PTR _buffer$[ebp]
$LN1@xmlC11NNor:

; 2230 : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC11NNormalizeString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NProcessNodeList
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlC14NProcessNodeList PROC				; COMDAT

; 1721 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1722 :     int ret;
; 1723 : 
; 1724 :     if (ctx == NULL) {

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN5@xmlC14NPro

; 1725 :         xmlC14NErrParam("processing node list");

	push	OFFSET ??_C@_0BF@BNBHCOBD@processing?5node?5list@
	call	_xmlC14NErrParam
	add	esp, 4

; 1726 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NPro
$LN5@xmlC14NPro:

; 1727 :     }
; 1728 : 
; 1729 :     for (ret = 0; cur != NULL && ret >= 0; cur = cur->next) {

	mov	DWORD PTR _ret$[ebp], 0
	jmp	SHORT $LN4@xmlC14NPro
$LN2@xmlC14NPro:
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx
$LN4@xmlC14NPro:
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlC14NPro
	cmp	DWORD PTR _ret$[ebp], 0
	jl	SHORT $LN3@xmlC14NPro

; 1730 :         ret = xmlC14NProcessNode(ctx, cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_xmlC14NProcessNode
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 1731 :     }

	jmp	SHORT $LN2@xmlC14NPro
$LN3@xmlC14NPro:

; 1732 :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlC14NPro:

; 1733 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NProcessNodeList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NProcessNode
_TEXT	SEGMENT
tv78 = -28						; size = 4
tv76 = -24						; size = 4
_buffer$1 = -20						; size = 4
_buffer$2 = -16						; size = 4
_buffer$3 = -12						; size = 4
_visible$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctx$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlC14NProcessNode PROC				; COMDAT

; 1530 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1531 :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 1532 :     int visible;
; 1533 : 
; 1534 :     if ((ctx == NULL) || (cur == NULL)) {

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN5@xmlC14NPro
	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN4@xmlC14NPro
$LN5@xmlC14NPro:

; 1535 :         xmlC14NErrParam("processing node");

	push	OFFSET ??_C@_0BA@KPMINAPM@processing?5node@
	call	_xmlC14NErrParam
	add	esp, 4

; 1536 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN4@xmlC14NPro:

; 1537 :     }
; 1538 : 
; 1539 :     visible = xmlC14NIsVisible(ctx, cur, cur->parent);

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN38@xmlC14NPro
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN39@xmlC14NPro
$LN38@xmlC14NPro:
	mov	DWORD PTR tv76[ebp], 1
$LN39@xmlC14NPro:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _visible$[ebp], edx

; 1540 :     switch (cur->type) {

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv78[ebp], ecx
	mov	edx, DWORD PTR tv78[ebp]
	sub	edx, 1
	mov	DWORD PTR tv78[ebp], edx
	cmp	DWORD PTR tv78[ebp], 20			; 00000014H
	ja	$LN36@xmlC14NPro
	mov	eax, DWORD PTR tv78[ebp]
	movzx	ecx, BYTE PTR $LN40@xmlC14NPro[eax]
	jmp	DWORD PTR $LN41@xmlC14NPro[ecx*4]
$LN6@xmlC14NPro:

; 1541 :         case XML_ELEMENT_NODE:
; 1542 :             ret = xmlC14NProcessElementNode(ctx, cur, visible);

	mov	edx, DWORD PTR _visible$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_xmlC14NProcessElementNode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 1543 :             break;

	jmp	$LN2@xmlC14NPro
$LN7@xmlC14NPro:

; 1544 :         case XML_CDATA_SECTION_NODE:
; 1545 :         case XML_TEXT_NODE:
; 1546 :             /*
; 1547 :              * Text Nodes
; 1548 :              * the string value, except all ampersands are replaced
; 1549 :              * by &amp;, all open angle brackets (<) are replaced by &lt;, all closing
; 1550 :              * angle brackets (>) are replaced by &gt;, and all #xD characters are
; 1551 :              * replaced by &#xD;.
; 1552 :              */
; 1553 :             /* cdata sections are processed as text nodes */
; 1554 :             /* todo: verify that cdata sections are included in XPath nodes set */
; 1555 :             if ((visible) && (cur->content != NULL)) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	SHORT $LN8@xmlC14NPro
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN8@xmlC14NPro

; 1556 :                 xmlChar *buffer;
; 1557 : 
; 1558 :                 buffer = xmlC11NNormalizeText(cur->content);

	push	3
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_xmlC11NNormalizeString
	add	esp, 8
	mov	DWORD PTR _buffer$3[ebp], eax

; 1559 :                 if (buffer != NULL) {

	cmp	DWORD PTR _buffer$3[ebp], 0
	je	SHORT $LN9@xmlC14NPro

; 1560 :                     xmlOutputBufferWriteString(ctx->buf,

	mov	edx, DWORD PTR _buffer$3[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1561 :                                                (const char *) buffer);
; 1562 :                     xmlFree(buffer);

	mov	esi, esp
	mov	edx, DWORD PTR _buffer$3[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1563 :                 } else {

	jmp	SHORT $LN8@xmlC14NPro
$LN9@xmlC14NPro:

; 1564 :                     xmlC14NErrInternal("normalizing text node");

	push	OFFSET ??_C@_0BG@FEJMMCLE@normalizing?5text?5node@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1565 :                     return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN8@xmlC14NPro:

; 1566 :                 }
; 1567 :             }
; 1568 :             break;

	jmp	$LN2@xmlC14NPro
$LN11@xmlC14NPro:

; 1569 :         case XML_PI_NODE:
; 1570 :             /*
; 1571 :              * Processing Instruction (PI) Nodes-
; 1572 :              * The opening PI symbol (<?), the PI target name of the node,
; 1573 :              * a leading space and the string value if it is not empty, and
; 1574 :              * the closing PI symbol (?>). If the string value is empty,
; 1575 :              * then the leading space is not added. Also, a trailing #xA is
; 1576 :              * rendered after the closing PI symbol for PI children of the
; 1577 :              * root node with a lesser document order than the document
; 1578 :              * element, and a leading #xA is rendered before the opening PI
; 1579 :              * symbol of PI children of the root node with a greater document
; 1580 :              * order than the document element.
; 1581 :              */
; 1582 :             if (visible) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	$LN12@xmlC14NPro

; 1583 :                 if (ctx->pos == XMLC14N_AFTER_DOCUMENT_ELEMENT) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+20], 2
	jne	SHORT $LN13@xmlC14NPro

; 1584 :                     xmlOutputBufferWriteString(ctx->buf, "\x0A<?");

	push	OFFSET ??_C@_03MEKJPGEP@?6?$DM?$DP@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1585 :                 } else {

	jmp	SHORT $LN14@xmlC14NPro
$LN13@xmlC14NPro:

; 1586 :                     xmlOutputBufferWriteString(ctx->buf, "<?");

	push	OFFSET ??_C@_02HFBBBACF@?$DM?$DP@
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN14@xmlC14NPro:

; 1587 :                 }
; 1588 : 
; 1589 :                 xmlOutputBufferWriteString(ctx->buf,

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1590 :                                            (const char *) cur->name);
; 1591 :                 if ((cur->content != NULL) && (*(cur->content) != '\0')) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN15@xmlC14NPro
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN15@xmlC14NPro

; 1592 :                     xmlChar *buffer;
; 1593 : 
; 1594 :                     xmlOutputBufferWriteString(ctx->buf, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1595 : 
; 1596 :                     /* todo: do we need to normalize pi? */
; 1597 :                     buffer = xmlC11NNormalizePI(cur->content);

	push	2
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_xmlC11NNormalizeString
	add	esp, 8
	mov	DWORD PTR _buffer$2[ebp], eax

; 1598 :                     if (buffer != NULL) {

	cmp	DWORD PTR _buffer$2[ebp], 0
	je	SHORT $LN16@xmlC14NPro

; 1599 :                         xmlOutputBufferWriteString(ctx->buf,

	mov	edx, DWORD PTR _buffer$2[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1600 :                                                    (const char *) buffer);
; 1601 :                         xmlFree(buffer);

	mov	esi, esp
	mov	edx, DWORD PTR _buffer$2[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1602 :                     } else {

	jmp	SHORT $LN15@xmlC14NPro
$LN16@xmlC14NPro:

; 1603 :                         xmlC14NErrInternal("normalizing pi node");

	push	OFFSET ??_C@_0BE@NALCHLAN@normalizing?5pi?5node@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1604 :                         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN15@xmlC14NPro:

; 1605 :                     }
; 1606 :                 }
; 1607 : 
; 1608 :                 if (ctx->pos == XMLC14N_BEFORE_DOCUMENT_ELEMENT) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN18@xmlC14NPro

; 1609 :                     xmlOutputBufferWriteString(ctx->buf, "?>\x0A");

	push	OFFSET ??_C@_03KCOJOIAE@?$DP?$DO?6@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1610 :                 } else {

	jmp	SHORT $LN12@xmlC14NPro
$LN18@xmlC14NPro:

; 1611 :                     xmlOutputBufferWriteString(ctx->buf, "?>");

	push	OFFSET ??_C@_02GOEMJPDN@?$DP?$DO@
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN12@xmlC14NPro:

; 1612 :                 }
; 1613 :             }
; 1614 :             break;

	jmp	$LN2@xmlC14NPro
$LN20@xmlC14NPro:

; 1615 :         case XML_COMMENT_NODE:
; 1616 :             /*
; 1617 :              * Comment Nodes
; 1618 :              * Nothing if generating canonical XML without  comments. For
; 1619 :              * canonical XML with comments, generate the opening comment
; 1620 :              * symbol (<!--), the string value of the node, and the
; 1621 :              * closing comment symbol (-->). Also, a trailing #xA is rendered
; 1622 :              * after the closing comment symbol for comment children of the
; 1623 :              * root node with a lesser document order than the document
; 1624 :              * element, and a leading #xA is rendered before the opening
; 1625 :              * comment symbol of comment children of the root node with a
; 1626 :              * greater document order than the document element. (Comment
; 1627 :              * children of the root node represent comments outside of the
; 1628 :              * top-level document element and outside of the document type
; 1629 :              * declaration).
; 1630 :              */
; 1631 :             if (visible && ctx->with_comments) {

	cmp	DWORD PTR _visible$[ebp], 0
	je	$LN21@xmlC14NPro
	mov	edx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	$LN21@xmlC14NPro

; 1632 :                 if (ctx->pos == XMLC14N_AFTER_DOCUMENT_ELEMENT) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+20], 2
	jne	SHORT $LN22@xmlC14NPro

; 1633 :                     xmlOutputBufferWriteString(ctx->buf, "\x0A<!--");

	push	OFFSET ??_C@_05IDEGGPLK@?6?$DM?$CB?9?9@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1634 :                 } else {

	jmp	SHORT $LN23@xmlC14NPro
$LN22@xmlC14NPro:

; 1635 :                     xmlOutputBufferWriteString(ctx->buf, "<!--");

	push	OFFSET ??_C@_04FFDNBKGC@?$DM?$CB?9?9@
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN23@xmlC14NPro:

; 1636 :                 }
; 1637 : 
; 1638 :                 if (cur->content != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN24@xmlC14NPro

; 1639 :                     xmlChar *buffer;
; 1640 : 
; 1641 :                     /* todo: do we need to normalize comment? */
; 1642 :                     buffer = xmlC11NNormalizeComment(cur->content);

	push	1
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_xmlC11NNormalizeString
	add	esp, 8
	mov	DWORD PTR _buffer$1[ebp], eax

; 1643 :                     if (buffer != NULL) {

	cmp	DWORD PTR _buffer$1[ebp], 0
	je	SHORT $LN25@xmlC14NPro

; 1644 :                         xmlOutputBufferWriteString(ctx->buf,

	mov	edx, DWORD PTR _buffer$1[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1645 :                                                    (const char *) buffer);
; 1646 :                         xmlFree(buffer);

	mov	esi, esp
	mov	edx, DWORD PTR _buffer$1[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1647 :                     } else {

	jmp	SHORT $LN24@xmlC14NPro
$LN25@xmlC14NPro:

; 1648 :                         xmlC14NErrInternal("normalizing comment node");

	push	OFFSET ??_C@_0BJ@MDKPFKCP@normalizing?5comment?5node@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1649 :                         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NPro
$LN24@xmlC14NPro:

; 1650 :                     }
; 1651 :                 }
; 1652 : 
; 1653 :                 if (ctx->pos == XMLC14N_BEFORE_DOCUMENT_ELEMENT) {

	mov	eax, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN27@xmlC14NPro

; 1654 :                     xmlOutputBufferWriteString(ctx->buf, "-->\x0A");

	push	OFFSET ??_C@_04IGMOLEKE@?9?9?$DO?6@
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlOutputBufferWriteString
	add	esp, 8

; 1655 :                 } else {

	jmp	SHORT $LN21@xmlC14NPro
$LN27@xmlC14NPro:

; 1656 :                     xmlOutputBufferWriteString(ctx->buf, "-->");

	push	OFFSET ??_C@_03PNLDJJMO@?9?9?$DO@
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlOutputBufferWriteString
	add	esp, 8
$LN21@xmlC14NPro:

; 1657 :                 }
; 1658 :             }
; 1659 :             break;

	jmp	$LN2@xmlC14NPro
$LN29@xmlC14NPro:

; 1660 :         case XML_DOCUMENT_NODE:
; 1661 :         case XML_DOCUMENT_FRAG_NODE:   /* should be processed as document? */
; 1662 : #ifdef LIBXML_DOCB_ENABLED
; 1663 :         case XML_DOCB_DOCUMENT_NODE:   /* should be processed as document? */
; 1664 : #endif
; 1665 : #ifdef LIBXML_HTML_ENABLED
; 1666 :         case XML_HTML_DOCUMENT_NODE:   /* should be processed as document? */
; 1667 : #endif
; 1668 :             if (cur->children != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN30@xmlC14NPro

; 1669 :                 ctx->pos = XMLC14N_BEFORE_DOCUMENT_ELEMENT;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [eax+20], 0

; 1670 :                 ctx->parent_is_doc = 1;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+24], 1

; 1671 :                 ret = xmlC14NProcessNodeList(ctx, cur->children);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_xmlC14NProcessNodeList
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
$LN30@xmlC14NPro:

; 1672 :             }
; 1673 :             break;

	jmp	SHORT $LN2@xmlC14NPro
$LN31@xmlC14NPro:

; 1674 : 
; 1675 :         case XML_ATTRIBUTE_NODE:
; 1676 :             xmlC14NErrInvalidNode("XML_ATTRIBUTE_NODE", "processing node");

	push	OFFSET ??_C@_0BA@KPMINAPM@processing?5node@
	push	OFFSET ??_C@_0BD@KCCEFDB@XML_ATTRIBUTE_NODE@
	call	_xmlC14NErrInvalidNode
	add	esp, 8

; 1677 :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NPro
$LN32@xmlC14NPro:

; 1678 :         case XML_NAMESPACE_DECL:
; 1679 :             xmlC14NErrInvalidNode("XML_NAMESPACE_DECL", "processing node");

	push	OFFSET ??_C@_0BA@KPMINAPM@processing?5node@
	push	OFFSET ??_C@_0BD@OOHJMPDA@XML_NAMESPACE_DECL@
	call	_xmlC14NErrInvalidNode
	add	esp, 8

; 1680 :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NPro
$LN33@xmlC14NPro:

; 1681 :         case XML_ENTITY_REF_NODE:
; 1682 :             xmlC14NErrInvalidNode("XML_ENTITY_REF_NODE", "processing node");

	push	OFFSET ??_C@_0BA@KPMINAPM@processing?5node@
	push	OFFSET ??_C@_0BE@NCHPKEOD@XML_ENTITY_REF_NODE@
	call	_xmlC14NErrInvalidNode
	add	esp, 8

; 1683 :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NPro
$LN34@xmlC14NPro:

; 1684 :         case XML_ENTITY_NODE:
; 1685 :             xmlC14NErrInvalidNode("XML_ENTITY_NODE", "processing node");

	push	OFFSET ??_C@_0BA@KPMINAPM@processing?5node@
	push	OFFSET ??_C@_0BA@HBKNNEGK@XML_ENTITY_NODE@
	call	_xmlC14NErrInvalidNode
	add	esp, 8

; 1686 :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NPro
$LN35@xmlC14NPro:

; 1687 : 
; 1688 :         case XML_DOCUMENT_TYPE_NODE:
; 1689 :         case XML_NOTATION_NODE:
; 1690 :         case XML_DTD_NODE:
; 1691 :         case XML_ELEMENT_DECL:
; 1692 :         case XML_ATTRIBUTE_DECL:
; 1693 :         case XML_ENTITY_DECL:
; 1694 : #ifdef LIBXML_XINCLUDE_ENABLED
; 1695 :         case XML_XINCLUDE_START:
; 1696 :         case XML_XINCLUDE_END:
; 1697 : #endif
; 1698 :             /*
; 1699 :              * should be ignored according to "W3C Canonical XML"
; 1700 :              */
; 1701 :             break;

	jmp	SHORT $LN2@xmlC14NPro
$LN36@xmlC14NPro:

; 1702 :         default:
; 1703 :             xmlC14NErrUnknownNode(cur->type, "processing node");

	push	OFFSET ??_C@_0BA@KPMINAPM@processing?5node@
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlC14NErrUnknownNode
	add	esp, 8

; 1704 :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NPro
$LN2@xmlC14NPro:

; 1705 :     }
; 1706 : 
; 1707 :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlC14NPro:

; 1708 : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN41@xmlC14NPro:
	DD	$LN6@xmlC14NPro
	DD	$LN31@xmlC14NPro
	DD	$LN7@xmlC14NPro
	DD	$LN33@xmlC14NPro
	DD	$LN34@xmlC14NPro
	DD	$LN11@xmlC14NPro
	DD	$LN20@xmlC14NPro
	DD	$LN29@xmlC14NPro
	DD	$LN35@xmlC14NPro
	DD	$LN32@xmlC14NPro
$LN40@xmlC14NPro:
	DB	0
	DB	1
	DB	2
	DB	2
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	7
	DB	8
	DB	7
	DB	8
	DB	8
	DB	8
	DB	8
	DB	9
	DB	8
	DB	8
	DB	7
_xmlC14NProcessNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NIsNodeInNodeset
_TEXT	SEGMENT
_ns$1 = -32						; size = 24
_nodes$ = -4						; size = 4
_user_data$ = 8						; size = 4
_node$ = 12						; size = 4
_parent$ = 16						; size = 4
_xmlC14NIsNodeInNodeset PROC				; COMDAT

; 255  : xmlC14NIsNodeInNodeset(void *user_data, xmlNodePtr node, xmlNodePtr parent) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 256  :     xmlNodeSetPtr nodes = (xmlNodeSetPtr) user_data;

	mov	eax, DWORD PTR _user_data$[ebp]
	mov	DWORD PTR _nodes$[ebp], eax

; 257  :     if((nodes != NULL) && (node != NULL)) {

	cmp	DWORD PTR _nodes$[ebp], 0
	je	SHORT $LN2@xmlC14NIsN
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@xmlC14NIsN

; 258  : 	if(node->type != XML_NAMESPACE_DECL) {

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	je	SHORT $LN3@xmlC14NIsN

; 259  : 	    return(xmlXPathNodeSetContains(nodes, node));

	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _nodes$[ebp]
	push	eax
	call	_xmlXPathNodeSetContains
	add	esp, 8
	jmp	SHORT $LN1@xmlC14NIsN

; 260  : 	} else {

	jmp	SHORT $LN2@xmlC14NIsN
$LN3@xmlC14NIsN:

; 261  : 	    xmlNs ns;
; 262  : 
; 263  : 	    memcpy(&ns, node, sizeof(ns));

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ns$1[ebp], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _ns$1[ebp+4], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _ns$1[ebp+8], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _ns$1[ebp+12], eax
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _ns$1[ebp+16], edx
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR _ns$1[ebp+20], eax

; 264  : 
; 265  : 	    /* this is a libxml hack! check xpath.c for details */
; 266  : 	    if((parent != NULL) && (parent->type == XML_ATTRIBUTE_NODE)) {

	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN5@xmlC14NIsN
	mov	ecx, DWORD PTR _parent$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN5@xmlC14NIsN

; 267  : 		ns.next = (xmlNsPtr)parent->parent;

	mov	edx, DWORD PTR _parent$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _ns$1[ebp], eax

; 268  : 	    } else {

	jmp	SHORT $LN6@xmlC14NIsN
$LN5@xmlC14NIsN:

; 269  : 		ns.next = (xmlNsPtr)parent;

	mov	ecx, DWORD PTR _parent$[ebp]
	mov	DWORD PTR _ns$1[ebp], ecx
$LN6@xmlC14NIsN:

; 270  : 	    }
; 271  : 
; 272  : 	    /*
; 273  : 	     * If the input is an XPath node-set, then the node-set must explicitly
; 274  : 	     * contain every node to be rendered to the canonical form.
; 275  : 	     */
; 276  : 	    return(xmlXPathNodeSetContains(nodes, (xmlNodePtr)&ns));

	lea	edx, DWORD PTR _ns$1[ebp]
	push	edx
	mov	eax, DWORD PTR _nodes$[ebp]
	push	eax
	call	_xmlXPathNodeSetContains
	add	esp, 8
	jmp	SHORT $LN1@xmlC14NIsN
$LN2@xmlC14NIsN:

; 277  : 	}
; 278  :     }
; 279  :     return(1);

	mov	eax, 1
$LN1@xmlC14NIsN:

; 280  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@xmlC14NIsN
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@xmlC14NIsN:
	DD	1
	DD	$LN9@xmlC14NIsN
$LN9@xmlC14NIsN:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN8@xmlC14NIsN
$LN8@xmlC14NIsN:
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
_xmlC14NIsNodeInNodeset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlExcC14NVisibleNsStackFind
_TEXT	SEGMENT
tv151 = -48						; size = 4
tv136 = -44						; size = 4
tv129 = -40						; size = 4
tv84 = -36						; size = 4
tv75 = -32						; size = 4
tv70 = -28						; size = 4
_ns1$1 = -24						; size = 4
_start$2 = -20						; size = 4
_has_empty_ns$ = -16					; size = 4
_href$ = -12						; size = 4
_prefix$ = -8						; size = 4
_i$ = -4						; size = 4
_cur$ = 8						; size = 4
_ns$ = 12						; size = 4
_ctx$ = 16						; size = 4
_xmlExcC14NVisibleNsStackFind PROC			; COMDAT

; 448  : xmlExcC14NVisibleNsStackFind(xmlC14NVisibleNsStackPtr cur, xmlNsPtr ns, xmlC14NCtxPtr ctx) {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 449  :     int i;
; 450  :     const xmlChar *prefix;
; 451  :     const xmlChar *href;
; 452  :     int has_empty_ns;
; 453  : 
; 454  :     if(cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN5@xmlExcC14N

; 455  :         xmlC14NErrParam("searching namespaces stack (exc c14n)");

	push	OFFSET ??_C@_0CG@DGFPKBDK@searching?5namespaces?5stack?5?$CIexc@
	call	_xmlC14NErrParam
	add	esp, 4

; 456  :         return (0);

	xor	eax, eax
	jmp	$LN1@xmlExcC14N
$LN5@xmlExcC14N:

; 457  :     }
; 458  : 
; 459  :     /*
; 460  :      * if the default namespace xmlns="" is not defined yet then
; 461  :      * we do not want to print it out
; 462  :      */
; 463  :     prefix = ((ns == NULL) || (ns->prefix == NULL)) ? BAD_CAST "" : ns->prefix;

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN11@xmlExcC14N
	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN11@xmlExcC14N
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN12@xmlExcC14N
$LN11@xmlExcC14N:
	mov	DWORD PTR tv70[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN12@xmlExcC14N:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _prefix$[ebp], eax

; 464  :     href = ((ns == NULL) || (ns->href == NULL)) ? BAD_CAST "" : ns->href;

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN13@xmlExcC14N
	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN13@xmlExcC14N
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN14@xmlExcC14N
$LN13@xmlExcC14N:
	mov	DWORD PTR tv75[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN14@xmlExcC14N:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _href$[ebp], ecx

; 465  :     has_empty_ns = (xmlC14NStrEqual(prefix, NULL) && xmlC14NStrEqual(href, NULL));

	push	0
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	_xmlC14NStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlExcC14N
	push	0
	mov	eax, DWORD PTR _href$[ebp]
	push	eax
	call	_xmlC14NStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlExcC14N
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN16@xmlExcC14N
$LN15@xmlExcC14N:
	mov	DWORD PTR tv84[ebp], 0
$LN16@xmlExcC14N:
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _has_empty_ns$[ebp], ecx

; 466  : 
; 467  :     if (cur->nsTab != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	$LN6@xmlExcC14N

; 468  : 	int start = 0;

	mov	DWORD PTR _start$2[ebp], 0

; 469  :         for (i = cur->nsCurEnd - 1; i >= start; --i) {

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN4@xmlExcC14N
$LN2@xmlExcC14N:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@xmlExcC14N:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _start$2[ebp]
	jl	$LN6@xmlExcC14N

; 470  :             xmlNsPtr ns1 = cur->nsTab[i];

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ns1$1[ebp], ecx

; 471  : 
; 472  : 	    if(xmlC14NStrEqual(prefix, (ns1 != NULL) ? ns1->prefix : NULL)) {

	cmp	DWORD PTR _ns1$1[ebp], 0
	je	SHORT $LN17@xmlExcC14N
	mov	edx, DWORD PTR _ns1$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN18@xmlExcC14N
$LN17@xmlExcC14N:
	mov	DWORD PTR tv129[ebp], 0
$LN18@xmlExcC14N:
	mov	ecx, DWORD PTR tv129[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	_xmlC14NStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@xmlExcC14N

; 473  : 		if(xmlC14NStrEqual(href, (ns1 != NULL) ? ns1->href : NULL)) {

	cmp	DWORD PTR _ns1$1[ebp], 0
	je	SHORT $LN19@xmlExcC14N
	mov	eax, DWORD PTR _ns1$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv136[ebp], ecx
	jmp	SHORT $LN20@xmlExcC14N
$LN19@xmlExcC14N:
	mov	DWORD PTR tv136[ebp], 0
$LN20@xmlExcC14N:
	mov	edx, DWORD PTR tv136[ebp]
	push	edx
	mov	eax, DWORD PTR _href$[ebp]
	push	eax
	call	_xmlC14NStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN8@xmlExcC14N

; 474  : 		    return(xmlC14NIsVisible(ctx, ns1, cur->nodeTab[i]));

	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN21@xmlExcC14N
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	esi, esp
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	eax, DWORD PTR _ns1$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv151[ebp], eax
	jmp	SHORT $LN22@xmlExcC14N
$LN21@xmlExcC14N:
	mov	DWORD PTR tv151[ebp], 1
$LN22@xmlExcC14N:
	mov	eax, DWORD PTR tv151[ebp]
	jmp	SHORT $LN1@xmlExcC14N

; 475  : 		} else {

	jmp	SHORT $LN7@xmlExcC14N
$LN8@xmlExcC14N:

; 476  : 		    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlExcC14N
$LN7@xmlExcC14N:

; 477  : 		}
; 478  : 	    }
; 479  :         }

	jmp	$LN2@xmlExcC14N
$LN6@xmlExcC14N:

; 480  :     }
; 481  :     return(has_empty_ns);

	mov	eax, DWORD PTR _has_empty_ns$[ebp]
$LN1@xmlExcC14N:

; 482  : }

	pop	edi
	pop	esi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlExcC14NVisibleNsStackFind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NVisibleNsStackFind
_TEXT	SEGMENT
tv139 = -48						; size = 4
tv132 = -44						; size = 4
tv89 = -40						; size = 4
tv84 = -36						; size = 4
tv75 = -32						; size = 4
tv70 = -28						; size = 4
_ns1$1 = -24						; size = 4
_start$2 = -20						; size = 4
_has_empty_ns$ = -16					; size = 4
_href$ = -12						; size = 4
_prefix$ = -8						; size = 4
_i$ = -4						; size = 4
_cur$ = 8						; size = 4
_ns$ = 12						; size = 4
_xmlC14NVisibleNsStackFind PROC				; COMDAT

; 415  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	push	edi
	lea	edi, DWORD PTR [ebp-48]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 416  :     int i;
; 417  :     const xmlChar *prefix;
; 418  :     const xmlChar *href;
; 419  :     int has_empty_ns;
; 420  : 
; 421  :     if(cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN5@xmlC14NVis

; 422  :         xmlC14NErrParam("searching namespaces stack (c14n)");

	push	OFFSET ??_C@_0CC@HHELCFAC@searching?5namespaces?5stack?5?$CIc14@
	call	_xmlC14NErrParam
	add	esp, 4

; 423  :         return (0);

	xor	eax, eax
	jmp	$LN1@xmlC14NVis
$LN5@xmlC14NVis:

; 424  :     }
; 425  : 
; 426  :     /*
; 427  :      * if the default namespace xmlns="" is not defined yet then
; 428  :      * we do not want to print it out
; 429  :      */
; 430  :     prefix = ((ns == NULL) || (ns->prefix == NULL)) ? BAD_CAST "" : ns->prefix;

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN9@xmlC14NVis
	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN9@xmlC14NVis
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv70[ebp], edx
	jmp	SHORT $LN10@xmlC14NVis
$LN9@xmlC14NVis:
	mov	DWORD PTR tv70[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN10@xmlC14NVis:
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR _prefix$[ebp], eax

; 431  :     href = ((ns == NULL) || (ns->href == NULL)) ? BAD_CAST "" : ns->href;

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN11@xmlC14NVis
	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN11@xmlC14NVis
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN12@xmlC14NVis
$LN11@xmlC14NVis:
	mov	DWORD PTR tv75[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN12@xmlC14NVis:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _href$[ebp], ecx

; 432  :     has_empty_ns = (xmlC14NStrEqual(prefix, NULL) && xmlC14NStrEqual(href, NULL));

	push	0
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	_xmlC14NStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@xmlC14NVis
	push	0
	mov	eax, DWORD PTR _href$[ebp]
	push	eax
	call	_xmlC14NStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@xmlC14NVis
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN14@xmlC14NVis
$LN13@xmlC14NVis:
	mov	DWORD PTR tv84[ebp], 0
$LN14@xmlC14NVis:
	mov	ecx, DWORD PTR tv84[ebp]
	mov	DWORD PTR _has_empty_ns$[ebp], ecx

; 433  : 
; 434  :     if (cur->nsTab != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	$LN6@xmlC14NVis

; 435  : 	int start = (has_empty_ns) ? 0 : cur->nsPrevStart;

	cmp	DWORD PTR _has_empty_ns$[ebp], 0
	je	SHORT $LN15@xmlC14NVis
	mov	DWORD PTR tv89[ebp], 0
	jmp	SHORT $LN16@xmlC14NVis
$LN15@xmlC14NVis:
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv89[ebp], ecx
$LN16@xmlC14NVis:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _start$2[ebp], edx

; 436  :         for (i = cur->nsCurEnd - 1; i >= start; --i) {

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	jmp	SHORT $LN4@xmlC14NVis
$LN2@xmlC14NVis:
	mov	edx, DWORD PTR _i$[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@xmlC14NVis:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _start$2[ebp]
	jl	SHORT $LN6@xmlC14NVis

; 437  :             xmlNsPtr ns1 = cur->nsTab[i];

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _ns1$1[ebp], ecx

; 438  : 
; 439  : 	    if(xmlC14NStrEqual(prefix, (ns1 != NULL) ? ns1->prefix : NULL)) {

	cmp	DWORD PTR _ns1$1[ebp], 0
	je	SHORT $LN17@xmlC14NVis
	mov	edx, DWORD PTR _ns1$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR tv132[ebp], eax
	jmp	SHORT $LN18@xmlC14NVis
$LN17@xmlC14NVis:
	mov	DWORD PTR tv132[ebp], 0
$LN18@xmlC14NVis:
	mov	ecx, DWORD PTR tv132[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	_xmlC14NStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN7@xmlC14NVis

; 440  : 		return(xmlC14NStrEqual(href, (ns1 != NULL) ? ns1->href : NULL));

	cmp	DWORD PTR _ns1$1[ebp], 0
	je	SHORT $LN19@xmlC14NVis
	mov	eax, DWORD PTR _ns1$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv139[ebp], ecx
	jmp	SHORT $LN20@xmlC14NVis
$LN19@xmlC14NVis:
	mov	DWORD PTR tv139[ebp], 0
$LN20@xmlC14NVis:
	mov	edx, DWORD PTR tv139[ebp]
	push	edx
	mov	eax, DWORD PTR _href$[ebp]
	push	eax
	call	_xmlC14NStrEqual
	add	esp, 8
	jmp	SHORT $LN1@xmlC14NVis
$LN7@xmlC14NVis:

; 441  : 	    }
; 442  :         }

	jmp	SHORT $LN2@xmlC14NVis
$LN6@xmlC14NVis:

; 443  :     }
; 444  :     return(has_empty_ns);

	mov	eax, DWORD PTR _has_empty_ns$[ebp]
$LN1@xmlC14NVis:

; 445  : }

	pop	edi
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NVisibleNsStackFind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NVisibleNsStackShift
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_xmlC14NVisibleNsStackShift PROC			; COMDAT

; 384  : xmlC14NVisibleNsStackShift(xmlC14NVisibleNsStackPtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 385  :     if(cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlC14NVis

; 386  :         xmlC14NErrParam("shifting namespaces stack");

	push	OFFSET ??_C@_0BK@IPHAMDHH@shifting?5namespaces?5stack@
	call	_xmlC14NErrParam
	add	esp, 4

; 387  : 	return;

	jmp	SHORT $LN1@xmlC14NVis
$LN2@xmlC14NVis:

; 388  :     }
; 389  :     cur->nsPrevStart = cur->nsPrevEnd;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+4], edx

; 390  :     cur->nsPrevEnd = cur->nsCurEnd;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+8], edx
$LN1@xmlC14NVis:

; 391  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NVisibleNsStackShift ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NVisibleNsStackRestore
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_state$ = 12						; size = 4
_xmlC14NVisibleNsStackRestore PROC			; COMDAT

; 373  : xmlC14NVisibleNsStackRestore(xmlC14NVisibleNsStackPtr cur, xmlC14NVisibleNsStackPtr state) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 374  :     if((cur == NULL) || (state == NULL)) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlC14NVis
	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@xmlC14NVis
$LN3@xmlC14NVis:

; 375  :         xmlC14NErrParam("restoring namespaces stack");

	push	OFFSET ??_C@_0BL@NPMDIAFE@restoring?5namespaces?5stack@
	call	_xmlC14NErrParam
	add	esp, 4

; 376  : 	return;

	jmp	SHORT $LN1@xmlC14NVis
$LN2@xmlC14NVis:

; 377  :     }
; 378  :     cur->nsCurEnd = state->nsCurEnd;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 379  :     cur->nsPrevStart = state->nsPrevStart;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 380  :     cur->nsPrevEnd = state->nsPrevEnd;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
$LN1@xmlC14NVis:

; 381  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NVisibleNsStackRestore ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NVisibleNsStackSave
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_state$ = 12						; size = 4
_xmlC14NVisibleNsStackSave PROC				; COMDAT

; 361  : xmlC14NVisibleNsStackSave(xmlC14NVisibleNsStackPtr cur, xmlC14NVisibleNsStackPtr state) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 362  :     if((cur == NULL) || (state == NULL)) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlC14NVis
	cmp	DWORD PTR _state$[ebp], 0
	jne	SHORT $LN2@xmlC14NVis
$LN3@xmlC14NVis:

; 363  :         xmlC14NErrParam("saving namespaces stack");

	push	OFFSET ??_C@_0BI@JLOLEOEH@saving?5namespaces?5stack@
	call	_xmlC14NErrParam
	add	esp, 4

; 364  : 	return;

	jmp	SHORT $LN1@xmlC14NVis
$LN2@xmlC14NVis:

; 365  :     }
; 366  : 
; 367  :     state->nsCurEnd = cur->nsCurEnd;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 368  :     state->nsPrevStart = cur->nsPrevStart;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 369  :     state->nsPrevEnd = cur->nsPrevEnd;

	mov	eax, DWORD PTR _state$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
$LN1@xmlC14NVis:

; 370  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NVisibleNsStackSave ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NVisibleNsStackAdd
_TEXT	SEGMENT
_tmpSize$1 = -8						; size = 4
_tmp$2 = -4						; size = 4
_cur$ = 8						; size = 4
_ns$ = 12						; size = 4
_node$ = 16						; size = 4
_xmlC14NVisibleNsStackAdd PROC				; COMDAT

; 315  : xmlC14NVisibleNsStackAdd(xmlC14NVisibleNsStackPtr cur, xmlNsPtr ns, xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 316  :     if((cur == NULL) ||
; 317  :        ((cur->nsTab == NULL) && (cur->nodeTab != NULL)) ||

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlC14NVis
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN4@xmlC14NVis
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN3@xmlC14NVis
$LN4@xmlC14NVis:
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN2@xmlC14NVis
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@xmlC14NVis
$LN3@xmlC14NVis:

; 318  :        ((cur->nsTab != NULL) && (cur->nodeTab == NULL))) {
; 319  :         xmlC14NErrParam("adding namespace to stack");

	push	OFFSET ??_C@_0BK@NHMKFMOM@adding?5namespace?5to?5stack@
	call	_xmlC14NErrParam
	add	esp, 4

; 320  : 	return;

	jmp	$LN1@xmlC14NVis
$LN2@xmlC14NVis:

; 321  :     }
; 322  : 
; 323  :     if ((cur->nsTab == NULL) && (cur->nodeTab == NULL)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	$LN5@xmlC14NVis
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	$LN5@xmlC14NVis

; 324  :         cur->nsTab = (xmlNsPtr*) xmlMalloc(XML_NAMESPACES_DEFAULT * sizeof(xmlNsPtr));

	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 325  :         cur->nodeTab = (xmlNodePtr*) xmlMalloc(XML_NAMESPACES_DEFAULT * sizeof(xmlNodePtr));

	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+20], eax

; 326  : 	if ((cur->nsTab == NULL) || (cur->nodeTab == NULL)) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN8@xmlC14NVis
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN7@xmlC14NVis
$LN8@xmlC14NVis:

; 327  : 	    xmlC14NErrMemory("adding node to stack");

	push	OFFSET ??_C@_0BF@EOOBKFEO@adding?5node?5to?5stack@
	call	_xmlC14NErrMemory
	add	esp, 4

; 328  : 	    return;

	jmp	$LN1@xmlC14NVis
$LN7@xmlC14NVis:

; 329  : 	}
; 330  : 	memset(cur->nsTab, 0 , XML_NAMESPACES_DEFAULT * sizeof(xmlNsPtr));

	push	64					; 00000040H
	push	0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 331  : 	memset(cur->nodeTab, 0 , XML_NAMESPACES_DEFAULT * sizeof(xmlNodePtr));

	push	64					; 00000040H
	push	0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 332  :         cur->nsMax = XML_NAMESPACES_DEFAULT;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+12], 16			; 00000010H
	jmp	$LN6@xmlC14NVis
$LN5@xmlC14NVis:

; 333  :     } else if(cur->nsMax == cur->nsCurEnd) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	cmp	eax, DWORD PTR [edx]
	jne	$LN6@xmlC14NVis

; 334  : 	void *tmp;
; 335  : 	int tmpSize;
; 336  : 
; 337  : 	tmpSize = 2 * cur->nsMax;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shl	edx, 1
	mov	DWORD PTR _tmpSize$1[ebp], edx

; 338  : 	tmp = xmlRealloc(cur->nsTab, tmpSize * sizeof(xmlNsPtr));

	mov	eax, DWORD PTR _tmpSize$1[ebp]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$2[ebp], eax

; 339  : 	if (tmp == NULL) {

	cmp	DWORD PTR _tmp$2[ebp], 0
	jne	SHORT $LN10@xmlC14NVis

; 340  : 	    xmlC14NErrMemory("adding node to stack");

	push	OFFSET ??_C@_0BF@EOOBKFEO@adding?5node?5to?5stack@
	call	_xmlC14NErrMemory
	add	esp, 4

; 341  : 	    return;

	jmp	$LN1@xmlC14NVis
$LN10@xmlC14NVis:

; 342  : 	}
; 343  : 	cur->nsTab = (xmlNsPtr*)tmp;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _tmp$2[ebp]
	mov	DWORD PTR [eax+16], ecx

; 344  : 
; 345  : 	tmp = xmlRealloc(cur->nodeTab, tmpSize * sizeof(xmlNodePtr));

	mov	edx, DWORD PTR _tmpSize$1[ebp]
	shl	edx, 2
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$2[ebp], eax

; 346  : 	if (tmp == NULL) {

	cmp	DWORD PTR _tmp$2[ebp], 0
	jne	SHORT $LN11@xmlC14NVis

; 347  : 	    xmlC14NErrMemory("adding node to stack");

	push	OFFSET ??_C@_0BF@EOOBKFEO@adding?5node?5to?5stack@
	call	_xmlC14NErrMemory
	add	esp, 4

; 348  : 	    return;

	jmp	SHORT $LN1@xmlC14NVis
$LN11@xmlC14NVis:

; 349  : 	}
; 350  : 	cur->nodeTab = (xmlNodePtr*)tmp;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _tmp$2[ebp]
	mov	DWORD PTR [edx+20], eax

; 351  : 
; 352  : 	cur->nsMax = tmpSize;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _tmpSize$1[ebp]
	mov	DWORD PTR [ecx+12], edx
$LN6@xmlC14NVis:

; 353  :     }
; 354  :     cur->nsTab[cur->nsCurEnd] = ns;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	edx, DWORD PTR _ns$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 355  :     cur->nodeTab[cur->nsCurEnd] = node;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 356  : 
; 357  :     ++cur->nsCurEnd;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@xmlC14NVis:

; 358  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NVisibleNsStackAdd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NVisibleNsStackDestroy
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_xmlC14NVisibleNsStackDestroy PROC			; COMDAT

; 296  : xmlC14NVisibleNsStackDestroy(xmlC14NVisibleNsStackPtr cur) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 297  :     if(cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlC14NVis

; 298  :         xmlC14NErrParam("destroying namespaces stack");

	push	OFFSET ??_C@_0BM@PPKFPLDI@destroying?5namespaces?5stack@
	call	_xmlC14NErrParam
	add	esp, 4

; 299  :         return;

	jmp	$LN1@xmlC14NVis
$LN2@xmlC14NVis:

; 300  :     }
; 301  :     if(cur->nsTab != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN3@xmlC14NVis

; 302  : 	memset(cur->nsTab, 0, cur->nsMax * sizeof(xmlNsPtr));

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	shl	edx, 2
	push	edx
	push	0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 303  : 	xmlFree(cur->nsTab);

	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlC14NVis:

; 304  :     }
; 305  :     if(cur->nodeTab != NULL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN4@xmlC14NVis

; 306  : 	memset(cur->nodeTab, 0, cur->nsMax * sizeof(xmlNodePtr));

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	shl	eax, 2
	push	eax
	push	0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 307  : 	xmlFree(cur->nodeTab);

	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlC14NVis:

; 308  :     }
; 309  :     memset(cur, 0, sizeof(xmlC14NVisibleNsStack));

	xor	edx, edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], edx

; 310  :     xmlFree(cur);

	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlC14NVis:

; 311  : 
; 312  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NVisibleNsStackDestroy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NVisibleNsStackCreate
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_xmlC14NVisibleNsStackCreate PROC			; COMDAT

; 283  : xmlC14NVisibleNsStackCreate(void) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 284  :     xmlC14NVisibleNsStackPtr ret;
; 285  : 
; 286  :     ret = (xmlC14NVisibleNsStackPtr) xmlMalloc(sizeof(xmlC14NVisibleNsStack));

	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 287  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlC14NVis

; 288  :         xmlC14NErrMemory("creating namespaces stack");

	push	OFFSET ??_C@_0BK@MOKDAME@creating?5namespaces?5stack@
	call	_xmlC14NErrMemory
	add	esp, 4

; 289  : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlC14NVis
$LN2@xmlC14NVis:

; 290  :     }
; 291  :     memset(ret, 0 , (size_t) sizeof(xmlC14NVisibleNsStack));

	xor	eax, eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax
	mov	DWORD PTR [ecx+8], eax
	mov	DWORD PTR [ecx+12], eax
	mov	DWORD PTR [ecx+16], eax
	mov	DWORD PTR [ecx+20], eax

; 292  :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlC14NVis:

; 293  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NVisibleNsStackCreate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NExecute
_TEXT	SEGMENT
tv67 = -16						; size = 4
_ret$ = -12						; size = 4
_c14n_mode$ = -8					; size = 4
_ctx$ = -4						; size = 4
_doc$ = 8						; size = 4
_is_visible_callback$ = 12				; size = 4
_user_data$ = 16					; size = 4
_mode$ = 20						; size = 4
_inclusive_ns_prefixes$ = 24				; size = 4
_with_comments$ = 28					; size = 4
_buf$ = 32						; size = 4
_xmlC14NExecute PROC					; COMDAT

; 1866 : 	 int with_comments, xmlOutputBufferPtr buf) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1867 : 
; 1868 :     xmlC14NCtxPtr ctx;
; 1869 :     xmlC14NMode c14n_mode = XML_C14N_1_0;

	mov	DWORD PTR _c14n_mode$[ebp], 0

; 1870 :     int ret;
; 1871 : 
; 1872 :     if ((buf == NULL) || (doc == NULL)) {

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN5@xmlC14NExe
	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN4@xmlC14NExe
$LN5@xmlC14NExe:

; 1873 :         xmlC14NErrParam("executing c14n");

	push	OFFSET ??_C@_0P@IOGBMNPC@executing?5c14n@
	call	_xmlC14NErrParam
	add	esp, 4

; 1874 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NExe
$LN4@xmlC14NExe:

; 1875 :     }
; 1876 : 
; 1877 :     /* for backward compatibility, we have to have "mode" as "int"
; 1878 :        and here we check that user gives valid value */
; 1879 :     switch(mode) {

	mov	eax, DWORD PTR _mode$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 0
	jl	SHORT $LN7@xmlC14NExe
	cmp	DWORD PTR tv67[ebp], 2
	jle	SHORT $LN6@xmlC14NExe
	jmp	SHORT $LN7@xmlC14NExe
$LN6@xmlC14NExe:

; 1880 :     case XML_C14N_1_0:
; 1881 :     case XML_C14N_EXCLUSIVE_1_0:
; 1882 :     case XML_C14N_1_1:
; 1883 :          c14n_mode = (xmlC14NMode)mode;

	mov	ecx, DWORD PTR _mode$[ebp]
	mov	DWORD PTR _c14n_mode$[ebp], ecx

; 1884 :          break;

	jmp	SHORT $LN2@xmlC14NExe
$LN7@xmlC14NExe:

; 1885 :     default:
; 1886 :         xmlC14NErrParam("invalid mode for executing c14n");

	push	OFFSET ??_C@_0CA@INCMFAFG@invalid?5mode?5for?5executing?5c14n@
	call	_xmlC14NErrParam
	add	esp, 4

; 1887 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NExe
$LN2@xmlC14NExe:

; 1888 :     }
; 1889 : 
; 1890 :     /*
; 1891 :      *  Validate the encoding output buffer encoding
; 1892 :      */
; 1893 :     if (buf->encoder != NULL) {

	mov	edx, DWORD PTR _buf$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN8@xmlC14NExe

; 1894 :         xmlC14NErr(NULL, (xmlNodePtr) doc, XML_C14N_REQUIRES_UTF8,

	push	OFFSET ??_C@_0EN@NONIGHAH@xmlC14NExecute?3?5output?5buffer?5e@
	push	1951					; 0000079fH
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	push	0
	call	_xmlC14NErr
	add	esp, 16					; 00000010H

; 1895 : "xmlC14NExecute: output buffer encoder != NULL but C14N requires UTF8 output\n");
; 1896 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NExe
$LN8@xmlC14NExe:

; 1897 :     }
; 1898 : 
; 1899 :     ctx = xmlC14NNewCtx(doc, is_visible_callback, user_data,

	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _with_comments$[ebp]
	push	edx
	mov	eax, DWORD PTR _inclusive_ns_prefixes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _c14n_mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _user_data$[ebp]
	push	edx
	mov	eax, DWORD PTR _is_visible_callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlC14NNewCtx
	add	esp, 28					; 0000001cH
	mov	DWORD PTR _ctx$[ebp], eax

; 1900 : 	            c14n_mode, inclusive_ns_prefixes,
; 1901 :                     with_comments, buf);
; 1902 :     if (ctx == NULL) {

	cmp	DWORD PTR _ctx$[ebp], 0
	jne	SHORT $LN9@xmlC14NExe

; 1903 :         xmlC14NErr(NULL, (xmlNodePtr) doc, XML_C14N_CREATE_CTXT,

	push	OFFSET ??_C@_0CP@LLPDGIDM@xmlC14NExecute?3?5unable?5to?5creat@
	push	1950					; 0000079eH
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	push	0
	call	_xmlC14NErr
	add	esp, 16					; 00000010H

; 1904 : 		   "xmlC14NExecute: unable to create C14N context\n");
; 1905 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NExe
$LN9@xmlC14NExe:

; 1906 :     }
; 1907 : 
; 1908 : 
; 1909 : 
; 1910 :     /*
; 1911 :      * Root Node
; 1912 :      * The root node is the parent of the top-level document element. The
; 1913 :      * result of processing each of its child nodes that is in the node-set
; 1914 :      * in document order. The root node does not generate a byte order mark,
; 1915 :      * XML declaration, nor anything from within the document type
; 1916 :      * declaration.
; 1917 :      */
; 1918 :     if (doc->children != NULL) {

	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN10@xmlC14NExe

; 1919 :         ret = xmlC14NProcessNodeList(ctx, doc->children);

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_xmlC14NProcessNodeList
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 1920 :         if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN10@xmlC14NExe

; 1921 :             xmlC14NErrInternal("processing docs children list");

	push	OFFSET ??_C@_0BO@LANGFLMG@processing?5docs?5children?5list@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1922 :             xmlC14NFreeCtx(ctx);

	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_xmlC14NFreeCtx
	add	esp, 4

; 1923 :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NExe
$LN10@xmlC14NExe:

; 1924 :         }
; 1925 :     }
; 1926 : 
; 1927 :     /*
; 1928 :      * Flush buffer to get number of bytes written
; 1929 :      */
; 1930 :     ret = xmlOutputBufferFlush(buf);

	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlOutputBufferFlush
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 1931 :     if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN12@xmlC14NExe

; 1932 :         xmlC14NErrInternal("flushing output buffer");

	push	OFFSET ??_C@_0BH@PKBMLLNP@flushing?5output?5buffer@
	call	_xmlC14NErrInternal
	add	esp, 4

; 1933 :         xmlC14NFreeCtx(ctx);

	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_xmlC14NFreeCtx
	add	esp, 4

; 1934 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NExe
$LN12@xmlC14NExe:

; 1935 :     }
; 1936 : 
; 1937 :     /*
; 1938 :      * Cleanup
; 1939 :      */
; 1940 :     xmlC14NFreeCtx(ctx);

	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	call	_xmlC14NFreeCtx
	add	esp, 4

; 1941 :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlC14NExe:

; 1942 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NExecute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NDocSave
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_buf$ = -4						; size = 4
_doc$ = 8						; size = 4
_nodes$ = 12						; size = 4
_mode$ = 16						; size = 4
_inclusive_ns_prefixes$ = 20				; size = 4
_with_comments$ = 24					; size = 4
_filename$ = 28						; size = 4
_compression$ = 32					; size = 4
_xmlC14NDocSave PROC					; COMDAT

; 2075 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 2076 :     xmlOutputBufferPtr buf;
; 2077 :     int ret;
; 2078 : 
; 2079 :     if (filename == NULL) {

	cmp	DWORD PTR _filename$[ebp], 0
	jne	SHORT $LN2@xmlC14NDoc

; 2080 :         xmlC14NErrParam("saving doc");

	push	OFFSET ??_C@_0L@DHCGOHBD@saving?5doc@
	call	_xmlC14NErrParam
	add	esp, 4

; 2081 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NDoc
$LN2@xmlC14NDoc:

; 2082 :     }
; 2083 : #ifdef LIBXML_ZLIB_ENABLED
; 2084 :     if (compression < 0)

	cmp	DWORD PTR _compression$[ebp], 0
	jge	SHORT $LN3@xmlC14NDoc

; 2085 :         compression = xmlGetCompressMode();

	call	_xmlGetCompressMode
	mov	DWORD PTR _compression$[ebp], eax
$LN3@xmlC14NDoc:

; 2086 : #endif
; 2087 : 
; 2088 :     /*
; 2089 :      * save the content to a temp buffer, use default UTF8 encoding.
; 2090 :      */
; 2091 :     buf = xmlOutputBufferCreateFilename(filename, NULL, compression);

	mov	eax, DWORD PTR _compression$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _filename$[ebp]
	push	ecx
	call	_xmlOutputBufferCreateFilename
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax

; 2092 :     if (buf == NULL) {

	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN4@xmlC14NDoc

; 2093 :         xmlC14NErrInternal("creating temporary filename");

	push	OFFSET ??_C@_0BM@LBLOCGLL@creating?5temporary?5filename@
	call	_xmlC14NErrInternal
	add	esp, 4

; 2094 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NDoc
$LN4@xmlC14NDoc:

; 2095 :     }
; 2096 : 
; 2097 :     /*
; 2098 :      * canonize document and write to buffer
; 2099 :      */
; 2100 :     ret = xmlC14NDocSaveTo(doc, nodes, mode, inclusive_ns_prefixes,

	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _with_comments$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inclusive_ns_prefixes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _mode$[ebp]
	push	edx
	mov	eax, DWORD PTR _nodes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlC14NDocSaveTo
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 2101 :                            with_comments, buf);
; 2102 :     if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN5@xmlC14NDoc

; 2103 :         xmlC14NErrInternal("cannicanize document to buffer");

	push	OFFSET ??_C@_0BP@ODPNHIDP@cannicanize?5document?5to?5buffer@
	call	_xmlC14NErrInternal
	add	esp, 4

; 2104 :         (void) xmlOutputBufferClose(buf);

	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlOutputBufferClose
	add	esp, 4

; 2105 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NDoc
$LN5@xmlC14NDoc:

; 2106 :     }
; 2107 : 
; 2108 :     /*
; 2109 :      * get the numbers of bytes written
; 2110 :      */
; 2111 :     ret = xmlOutputBufferClose(buf);

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlOutputBufferClose
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 2112 :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlC14NDoc:

; 2113 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NDocSave ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NDocDumpMemory
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_ret$ = -4						; size = 4
_doc$ = 8						; size = 4
_nodes$ = 12						; size = 4
_mode$ = 16						; size = 4
_inclusive_ns_prefixes$ = 20				; size = 4
_with_comments$ = 24					; size = 4
_doc_txt_ptr$ = 28					; size = 4
_xmlC14NDocDumpMemory PROC				; COMDAT

; 2004 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 2005 :     int ret;
; 2006 :     xmlOutputBufferPtr buf;
; 2007 : 
; 2008 :     if (doc_txt_ptr == NULL) {

	cmp	DWORD PTR _doc_txt_ptr$[ebp], 0
	jne	SHORT $LN2@xmlC14NDoc

; 2009 :         xmlC14NErrParam("dumping doc to memory");

	push	OFFSET ??_C@_0BG@JFDMFMGH@dumping?5doc?5to?5memory@
	call	_xmlC14NErrParam
	add	esp, 4

; 2010 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NDoc
$LN2@xmlC14NDoc:

; 2011 :     }
; 2012 : 
; 2013 :     *doc_txt_ptr = NULL;

	mov	eax, DWORD PTR _doc_txt_ptr$[ebp]
	mov	DWORD PTR [eax], 0

; 2014 : 
; 2015 :     /*
; 2016 :      * create memory buffer with UTF8 (default) encoding
; 2017 :      */
; 2018 :     buf = xmlAllocOutputBuffer(NULL);

	push	0
	call	_xmlAllocOutputBuffer
	add	esp, 4
	mov	DWORD PTR _buf$[ebp], eax

; 2019 :     if (buf == NULL) {

	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN3@xmlC14NDoc

; 2020 :         xmlC14NErrMemory("creating output buffer");

	push	OFFSET ??_C@_0BH@JBBBCCHB@creating?5output?5buffer@
	call	_xmlC14NErrMemory
	add	esp, 4

; 2021 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlC14NDoc
$LN3@xmlC14NDoc:

; 2022 :     }
; 2023 : 
; 2024 :     /*
; 2025 :      * canonize document and write to buffer
; 2026 :      */
; 2027 :     ret = xmlC14NDocSaveTo(doc, nodes, mode, inclusive_ns_prefixes,

	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _with_comments$[ebp]
	push	edx
	mov	eax, DWORD PTR _inclusive_ns_prefixes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nodes$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlC14NDocSaveTo
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ret$[ebp], eax

; 2028 :                            with_comments, buf);
; 2029 :     if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN4@xmlC14NDoc

; 2030 :         xmlC14NErrInternal("saving doc to output buffer");

	push	OFFSET ??_C@_0BM@DBHHIABI@saving?5doc?5to?5output?5buffer@
	call	_xmlC14NErrInternal
	add	esp, 4

; 2031 :         (void) xmlOutputBufferClose(buf);

	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlOutputBufferClose
	add	esp, 4

; 2032 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NDoc
$LN4@xmlC14NDoc:

; 2033 :     }
; 2034 : 
; 2035 :     ret = xmlBufUse(buf->buffer);

	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlBufUse
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 2036 :     if (ret > 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jle	SHORT $LN5@xmlC14NDoc

; 2037 :         *doc_txt_ptr = xmlStrndup(xmlBufContent(buf->buffer), ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlBufContent
	add	esp, 4
	push	eax
	call	_xmlStrndup
	add	esp, 8
	mov	ecx, DWORD PTR _doc_txt_ptr$[ebp]
	mov	DWORD PTR [ecx], eax
$LN5@xmlC14NDoc:

; 2038 :     }
; 2039 :     (void) xmlOutputBufferClose(buf);

	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlOutputBufferClose
	add	esp, 4

; 2040 : 
; 2041 :     if ((*doc_txt_ptr == NULL) && (ret > 0)) {

	mov	eax, DWORD PTR _doc_txt_ptr$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@xmlC14NDoc
	cmp	DWORD PTR _ret$[ebp], 0
	jle	SHORT $LN6@xmlC14NDoc

; 2042 :         xmlC14NErrMemory("coping canonicanized document");

	push	OFFSET ??_C@_0BO@FJFGKMEA@coping?5canonicanized?5document@
	call	_xmlC14NErrMemory
	add	esp, 4

; 2043 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlC14NDoc
$LN6@xmlC14NDoc:

; 2044 :     }
; 2045 :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlC14NDoc:

; 2046 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlC14NDocDumpMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\c14n.c
;	COMDAT _xmlC14NDocSaveTo
_TEXT	SEGMENT
_doc$ = 8						; size = 4
_nodes$ = 12						; size = 4
_mode$ = 16						; size = 4
_inclusive_ns_prefixes$ = 20				; size = 4
_with_comments$ = 24					; size = 4
_buf$ = 28						; size = 4
_xmlC14NDocSaveTo PROC					; COMDAT

; 1968 :                  int with_comments, xmlOutputBufferPtr buf) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __27F3A1DF_c14n@c
	call	@__CheckForDebuggerJustMyCode@4

; 1969 :     return(xmlC14NExecute(doc,

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _with_comments$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inclusive_ns_prefixes$[ebp]
	push	edx
	mov	eax, DWORD PTR _mode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nodes$[ebp]
	push	ecx
	push	OFFSET _xmlC14NIsNodeInNodeset
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlC14NExecute
	add	esp, 28					; 0000001cH

; 1970 : 			xmlC14NIsNodeInNodeset,
; 1971 : 			nodes,
; 1972 : 			mode,
; 1973 : 			inclusive_ns_prefixes,
; 1974 : 			with_comments,
; 1975 : 			buf));
; 1976 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlC14NDocSaveTo ENDP
_TEXT	ENDS
END
