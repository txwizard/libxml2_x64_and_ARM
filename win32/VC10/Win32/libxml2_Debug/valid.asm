; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\valid.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_xmlIsBaseCharGroup:BYTE:010H
COMM	_xmlIsCharGroup:BYTE:010H
COMM	_xmlIsCombiningGroup:BYTE:010H
COMM	_xmlIsDigitGroup:BYTE:010H
COMM	_xmlIsExtenderGroup:BYTE:010H
COMM	_xmlIsIdeographicGroup:BYTE:010H
COMM	_xmlIsPubidChar_tab:BYTE:0100H
COMM	_xmlParserMaxDepth:DWORD
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__56F63275_valid@c DB 01H
msvcjmc	ENDS
PUBLIC	_xmlAddNotationDecl
PUBLIC	_xmlCopyNotationTable
PUBLIC	_xmlFreeNotationTable
PUBLIC	_xmlDumpNotationDecl
PUBLIC	_xmlDumpNotationTable
PUBLIC	_xmlNewElementContent
PUBLIC	_xmlCopyElementContent
PUBLIC	_xmlFreeElementContent
PUBLIC	_xmlNewDocElementContent
PUBLIC	_xmlCopyDocElementContent
PUBLIC	_xmlFreeDocElementContent
PUBLIC	_xmlSnprintfElementContent
PUBLIC	_xmlSprintfElementContent
PUBLIC	_xmlAddElementDecl
PUBLIC	_xmlCopyElementTable
PUBLIC	_xmlFreeElementTable
PUBLIC	_xmlDumpElementTable
PUBLIC	_xmlDumpElementDecl
PUBLIC	_xmlCreateEnumeration
PUBLIC	_xmlFreeEnumeration
PUBLIC	_xmlCopyEnumeration
PUBLIC	_xmlAddAttributeDecl
PUBLIC	_xmlCopyAttributeTable
PUBLIC	_xmlFreeAttributeTable
PUBLIC	_xmlDumpAttributeTable
PUBLIC	_xmlDumpAttributeDecl
PUBLIC	_xmlAddID
PUBLIC	_xmlFreeIDTable
PUBLIC	_xmlGetID
PUBLIC	_xmlIsID
PUBLIC	_xmlRemoveID
PUBLIC	_xmlAddRef
PUBLIC	_xmlFreeRefTable
PUBLIC	_xmlIsRef
PUBLIC	_xmlRemoveRef
PUBLIC	_xmlGetRefs
PUBLIC	_xmlNewValidCtxt
PUBLIC	_xmlFreeValidCtxt
PUBLIC	_xmlValidateRoot
PUBLIC	_xmlValidateElementDecl
PUBLIC	_xmlValidNormalizeAttributeValue
PUBLIC	_xmlValidCtxtNormalizeAttributeValue
PUBLIC	_xmlValidateAttributeDecl
PUBLIC	_xmlValidateAttributeValue
PUBLIC	_xmlValidateNotationDecl
PUBLIC	_xmlValidateDtd
PUBLIC	_xmlValidateDtdFinal
PUBLIC	_xmlValidateDocument
PUBLIC	_xmlValidateElement
PUBLIC	_xmlValidateOneElement
PUBLIC	_xmlValidateOneAttribute
PUBLIC	_xmlValidateOneNamespace
PUBLIC	_xmlValidateDocumentFinal
PUBLIC	_xmlValidateNotationUse
PUBLIC	_xmlIsMixedElement
PUBLIC	_xmlGetDtdAttrDesc
PUBLIC	_xmlGetDtdQAttrDesc
PUBLIC	_xmlGetDtdNotationDesc
PUBLIC	_xmlGetDtdQElementDesc
PUBLIC	_xmlGetDtdElementDesc
PUBLIC	_xmlValidGetPotentialChildren
PUBLIC	_xmlValidGetValidElements
PUBLIC	_xmlValidateNameValue
PUBLIC	_xmlValidateNamesValue
PUBLIC	_xmlValidateNmtokenValue
PUBLIC	_xmlValidateNmtokensValue
PUBLIC	_xmlValidBuildContentModel
PUBLIC	_xmlValidatePushElement
PUBLIC	_xmlValidatePushCData
PUBLIC	_xmlValidatePopElement
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0O@IMHFIAOC@malloc?5failed@		; `string'
PUBLIC	??_C@_0P@BHJOIPMJ@realloc?5failed@		; `string'
PUBLIC	??_C@_0CN@GEBFHDLO@Failed?5to?5build?5content?5model?5r@ ; `string'
PUBLIC	??_C@_0CL@FIAOIAHN@Found?5NULL?5content?5in?5content?5m@ ; `string'
PUBLIC	??_C@_0CF@IIHAKBAI@Found?5PCDATA?5in?5content?5model?5o@ ; `string'
PUBLIC	??_C@_0BH@INHICIGB@Building?5content?5model@	; `string'
PUBLIC	??_C@_0CE@LMBMADBI@ContentModel?5broken?5for?5element@ ; `string'
PUBLIC	??_C@_0CH@LILACHHH@Cannot?5create?5automata?5for?5elem@ ; `string'
PUBLIC	??_C@_0CM@GHMIMING@Content?5model?5of?5?$CFs?5is?5not?5dete@ ; `string'
PUBLIC	??_C@_0CH@ODCBAOPP@xmlNewElementContent?5?3?5name?5?$DN?$DN?5@ ; `string'
PUBLIC	??_C@_0CH@EHMNFIPD@xmlNewElementContent?5?3?5name?5?$CB?$DN?5@ ; `string'
PUBLIC	??_C@_0DC@GLPLFDD@Internal?3?5ELEMENT?5content?5corru@ ; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI@				; `string'
PUBLIC	??_C@_07ELDBONKP@?$CDPCDATA@			; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3@				; `string'
PUBLIC	??_C@_03NKFKBEPL@?5?0?5@			; `string'
PUBLIC	??_C@_03LGOGDKEL@?5?$HM?5@			; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ@				; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP@				; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK@				; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL@				; `string'
PUBLIC	??_C@_04IBCFJNCN@?5?4?4?4@			; `string'
PUBLIC	??_C@_0CO@BLBNCGCL@xmlAddElementDecl?3?5content?5?$CB?$DN?5N@ ; `string'
PUBLIC	??_C@_0CM@DBFKJMHA@xmlAddElementDecl?3?5content?5?$CB?$DN?5N@ ; `string'
PUBLIC	??_C@_0CO@IMMDEKCP@xmlAddElementDecl?3?5content?5?$DN?$DN?5N@ ; `string'
PUBLIC	??_C@_0DA@CFDLEHAD@xmlAddElementDecl?3?5content?5?$DN?$DN?5N@ ; `string'
PUBLIC	??_C@_0CP@HFIOBKAA@Internal?3?5ELEMENT?5decl?5corrupte@ ; `string'
PUBLIC	??_C@_0CL@IICJECDN@xmlAddElementDecl?3?5Table?5creati@ ; `string'
PUBLIC	??_C@_0BM@DLJMKEJ@Redefinition?5of?5element?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@		; `string'
PUBLIC	??_C@_08HMKELAAG@?5EMPTY?$DO?6@			; `string'
PUBLIC	??_C@_06OMPGEGME@?5ANY?$DO?6@			; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_02NEKEAGPN@?$DO?6@			; `string'
PUBLIC	??_C@_0DB@NFLGBMMC@Internal?3?5ELEMENT?5struct?5corrup@ ; `string'
PUBLIC	??_C@_0DE@EJGKGKMH@Element?5?$CFs?5has?5too?5many?5ID?5attr@ ; `string'
PUBLIC	??_C@_0DD@NLJCGIHL@Internal?3?5ATTRIBUTE?5struct?5corr@ ; `string'
PUBLIC	??_C@_0CL@IHGCOODJ@Attribute?5?$CFs?5of?5?$CFs?3?5invalid?5def@ ; `string'
PUBLIC	??_C@_0CN@LFDBMMCB@xmlAddAttributeDecl?3?5Table?5crea@ ; `string'
PUBLIC	??_C@_0CN@HJBCFPNE@Attribute?5?$CFs?5of?5element?5?$CFs?3?5alr@ ; `string'
PUBLIC	??_C@_0DD@GEPJIIIF@Element?5?$CFs?5has?5too?5may?5ID?5attri@ ; `string'
PUBLIC	??_C@_05PPEFOGKI@xmlns@				; `string'
PUBLIC	??_C@_0L@NDHICKFH@?$DM?$CBATTLIST?5@		; `string'
PUBLIC	??_C@_06CIOOFICG@?5CDATA@			; `string'
PUBLIC	??_C@_03JFNHLDJD@?5ID@				; `string'
PUBLIC	??_C@_06JJHMNMLB@?5IDREF@			; `string'
PUBLIC	??_C@_07CNGJPBFB@?5IDREFS@			; `string'
PUBLIC	??_C@_07GLIJGNMP@?5ENTITY@			; `string'
PUBLIC	??_C@_09MILPKLMO@?5ENTITIES@			; `string'
PUBLIC	??_C@_08JLMONKHB@?5NMTOKEN@			; `string'
PUBLIC	??_C@_09LGAPIBOH@?5NMTOKENS@			; `string'
PUBLIC	??_C@_02GFKOMOKH@?5?$CI@			; `string'
PUBLIC	??_C@_0M@IGKIMAHJ@?5NOTATION?5?$CI@		; `string'
PUBLIC	??_C@_0L@IEBFJPBC@?5?$CDREQUIRED@		; `string'
PUBLIC	??_C@_09GOIPIIGC@?5?$CDIMPLIED@			; `string'
PUBLIC	??_C@_07PNOBFAOP@?5?$CDFIXED@			; `string'
PUBLIC	??_C@_0DC@EJJFJDDL@Internal?3?5ATTRIBUTE?5struct?5corr@ ; `string'
PUBLIC	??_C@_0CM@PJBPJANJ@xmlAddNotationDecl?3?5Table?5creat@ ; `string'
PUBLIC	??_C@_0CI@HFJJKKEO@xmlAddNotationDecl?3?5?$CFs?5already?5@ ; `string'
PUBLIC	??_C@_0M@IOFINGOM@?$DM?$CBNOTATION?5@		; `string'
PUBLIC	??_C@_08GBBLECIH@?5PUBLIC?5@			; `string'
PUBLIC	??_C@_08PAGGLANP@?5SYSTEM?5@			; `string'
PUBLIC	??_C@_03KKJDKPMN@?5?$DO?6@			; `string'
PUBLIC	??_C@_0CC@HPFDMDEK@xmlAddID?3?5Table?5creation?5failed@ ; `string'
PUBLIC	??_C@_0BH@JKIFIOPN@ID?5?$CFs?5already?5defined?6@ ; `string'
PUBLIC	??_C@_02EGCJHIOB@id@				; `string'
PUBLIC	??_C@_03PJHHNEEI@xml@				; `string'
PUBLIC	??_C@_04MEMAJGDJ@name@				; `string'
PUBLIC	??_C@_01MCMALHOG@a@				; `string'
PUBLIC	??_C@_0CD@JKLLCBGN@xmlAddRef?3?5Table?5creation?5faile@ ; `string'
PUBLIC	??_C@_0CM@EILGCMCJ@xmlAddRef?3?5Reference?5list?5creat@ ; `string'
PUBLIC	??_C@_0CN@CLGHPEIK@xmlAddRef?3?5Reference?5list?5inser@ ; `string'
PUBLIC	??_C@_0CA@OJAJCLMD@element?5table?5allocation?5failed@ ; `string'
PUBLIC	??_C@_0BN@NONOBNKE@NOTATION?5?$CFs?5is?5not?5declared?6@ ; `string'
PUBLIC	??_C@_0DG@NHAJHAEC@ENTITY?5attribute?5?$CFs?5reference?5a@ ; `string'
PUBLIC	??_C@_0DM@CBMBENAH@ENTITY?5attribute?5?$CFs?5reference?5a@ ; `string'
PUBLIC	??_C@_0DI@MOCJGONA@ENTITIES?5attribute?5?$CFs?5reference@ ; `string'
PUBLIC	??_C@_0DO@BNHKOEGN@ENTITIES?5attribute?5?$CFs?5reference@ ; `string'
PUBLIC	??_C@_0DK@HMAANMLE@NOTATION?5attribute?5?$CFs?5reference@ ; `string'
PUBLIC	??_C@_0FG@CJEJIEOP@standalone?3?5?$CFs?5on?5?$CFs?5value?5had?5@ ; `string'
PUBLIC	??_C@_0DN@MJLCEKEK@Syntax?5of?5default?5value?5for?5att@ ; `string'
PUBLIC	??_C@_0EC@DNHDHDCI@ID?5attribute?5?$CFs?5of?5?$CFs?5is?5not?5va@ ; `string'
PUBLIC	??_C@_0EE@MLJMMKCM@Element?5?$CFs?5has?5?$CFd?5ID?5attribute?5@ ; `string'
PUBLIC	??_C@_0EE@JDKHGIAG@Element?5?$CFs?5has?5?$CFd?5ID?5attribute?5@ ; `string'
PUBLIC	??_C@_0EP@CFLHEJLO@Element?5?$CFs?5has?5ID?5attributes?5de@ ; `string'
PUBLIC	??_C@_0EL@MPNELAFE@Default?5value?5?$CC?$CFs?$CC?5for?5attribut@ ; `string'
PUBLIC	??_C@_0DB@DPGOOPFF@Definition?5of?5?$CFs?5has?5duplicate?5@ ; `string'
PUBLIC	??_C@_0DE@IDAOJGBB@Definition?5of?5?$CFs?5has?5duplicate?5@ ; `string'
PUBLIC	??_C@_0DB@HNLIHGKJ@Definition?5of?5?$CFs?5has?5duplicate?5@ ; `string'
PUBLIC	??_C@_0DE@PAODFKFF@Definition?5of?5?$CFs?5has?5duplicate?5@ ; `string'
PUBLIC	??_C@_0CP@IDGJHJLH@No?5declaration?5for?5attribute?5?$CFs@ ; `string'
PUBLIC	??_C@_0DF@PPLCGADM@Syntax?5of?5value?5for?5attribute?5?$CF@ ; `string'
PUBLIC	??_C@_0DN@BPCEOAOB@Value?5for?5attribute?5?$CFs?5of?5?$CFs?5is@ ; `string'
PUBLIC	??_C@_0DO@HAIKKCN@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@ ; `string'
PUBLIC	??_C@_0EJ@LLDEHINL@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@ ; `string'
PUBLIC	??_C@_0ED@GMECILPN@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@ ; `string'
PUBLIC	??_C@_0CL@KKBPHLEC@Value?5for?5attribute?5?$CFs?5of?5?$CFs?5mu@ ; `string'
PUBLIC	??_C@_0BF@INLCBMIM@Validating?5namespace@	; `string'
PUBLIC	??_C@_0DF@GJIDMPBO@No?5declaration?5for?5attribute?5xm@ ; `string'
PUBLIC	??_C@_0DC@FPONLEAN@No?5declaration?5for?5attribute?5xm@ ; `string'
PUBLIC	??_C@_0DL@CBOACJEL@Syntax?5of?5value?5for?5attribute?5x@ ; `string'
PUBLIC	??_C@_0DI@HAHGLIKC@Syntax?5of?5value?5for?5attribute?5x@ ; `string'
PUBLIC	??_C@_0ED@KAGANNGH@Value?5for?5attribute?5xmlns?3?$CFs?5of@ ; `string'
PUBLIC	??_C@_0EA@HGOHDHBG@Value?5for?5attribute?5xmlns?5of?5?$CFs@ ; `string'
PUBLIC	??_C@_0EE@ENPHOLHF@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@ ; `string'
PUBLIC	??_C@_0EB@IKNIAELF@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@ ; `string'
PUBLIC	??_C@_0EP@PJCDPKEK@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@ ; `string'
PUBLIC	??_C@_0EM@LDEIIDJK@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@ ; `string'
PUBLIC	??_C@_0EJ@PDIHKDMN@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@ ; `string'
PUBLIC	??_C@_0EG@CDCEFKCM@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@ ; `string'
PUBLIC	??_C@_0DB@DPJFCMMB@Value?5for?5attribute?5xmlns?3?$CFs?5of@ ; `string'
PUBLIC	??_C@_0CO@DNGFHLPE@Value?5for?5attribute?5xmlns?5of?5?$CFs@ ; `string'
PUBLIC	??_C@_05MLPNBPGH@CDATA@				; `string'
PUBLIC	??_C@_03BBKEAIF@?$DP?$DP?$DP@			; `string'
PUBLIC	??_C@_0EC@IAKGOMPC@Element?5?$CFs?5content?5does?5not?5fol@ ; `string'
PUBLIC	??_C@_0DP@CBELDNAH@Element?5content?5does?5not?5follow@ ; `string'
PUBLIC	??_C@_0CM@BLHDJNNL@Element?5?$CFs?5content?5does?5not?5fol@ ; `string'
PUBLIC	??_C@_0CJ@JFPHFAJJ@Element?5content?5does?5not?5follow@ ; `string'
PUBLIC	??_C@_0CC@LMJFIFCG@Internal?3?5MIXED?5struct?5corrupte@ ; `string'
PUBLIC	??_C@_0BP@CMBGNCIM@No?5declaration?5for?5element?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0DE@KLKCMFPH@Element?5?$CFs?5was?5declared?5EMPTY?5t@ ; `string'
PUBLIC	??_C@_0DN@CFJCCMLK@Element?5?$CFs?5was?5declared?5?$CDPCDATA@ ; `string'
PUBLIC	??_C@_0DM@IPIENEI@Element?5?$CFs?5is?5not?5declared?5in?5?$CF@ ; `string'
PUBLIC	??_C@_0DK@BGIDCAIC@Element?5?$CFs?5content?5does?5not?5fol@ ; `string'
PUBLIC	??_C@_0DO@HNMIGKJO@Element?5?$CFs?5content?5does?5not?5fol@ ; `string'
PUBLIC	??_C@_0EC@JDBIOCJK@Element?5?$CFs?5content?5does?5not?5fol@ ; `string'
PUBLIC	??_C@_0CA@EPFCDFAG@Attribute?5element?5not?5expected?6@ ; `string'
PUBLIC	??_C@_0BN@JALMDBBB@Text?5element?5has?5children?5?$CB?6@ ; `string'
PUBLIC	??_C@_0BO@NIGEHALL@Text?5element?5has?5namespace?5?$CB?6@ ; `string'
PUBLIC	??_C@_0BP@DPPADDEP@Text?5element?5has?5no?5content?5?$CB?6@ ; `string'
PUBLIC	??_C@_0BN@CJFFIPOP@Entity?5element?5not?5expected?6@ ; `string'
PUBLIC	??_C@_0BP@FEDJMKLA@Notation?5element?5not?5expected?6@ ; `string'
PUBLIC	??_C@_0BP@LPODOPI@Document?5element?5not?5expected?6@ ; `string'
PUBLIC	??_C@_0BM@DIBMDMIN@HTML?5Document?5not?5expected?6@ ; `string'
PUBLIC	??_C@_0BG@CJHPKHPI@unknown?5element?5type?6@	; `string'
PUBLIC	??_C@_0EM@LHPMEFBO@standalone?3?5?$CFs?5declared?5in?5the?5@ ; `string'
PUBLIC	??_C@_0CI@KOGIECMM@Element?5?$CFs?5does?5not?5carry?5attri@ ; `string'
PUBLIC	??_C@_0CL@IDAGHCGO@Element?5?$CFs?5does?5not?5carry?5attri@ ; `string'
PUBLIC	??_C@_0DD@KAGCOGBM@Element?5?$CFs?5required?5attribute?5?$CF@ ; `string'
PUBLIC	??_C@_0DK@IGLOKJLK@Element?5?$CFs?5required?5attribute?5?$CF@ ; `string'
PUBLIC	??_C@_0EI@BIBADMEK@Element?5?$CFs?5namespace?5name?5for?5d@ ; `string'
PUBLIC	??_C@_0DJ@DDNBGMLL@Element?5?$CFs?5namespace?5name?5for?5?$CF@ ; `string'
PUBLIC	??_C@_0BB@JNDFICHA@no?5root?5element?6@		; `string'
PUBLIC	??_C@_04DBLPJNAF@HTML@				; `string'
PUBLIC	??_C@_04PNIFHPHN@html@				; `string'
PUBLIC	??_C@_0CO@PMJDAMAF@root?5and?5DTD?5name?5do?5not?5match?5@ ; `string'
PUBLIC	??_C@_0DE@GLBIFDCC@attribute?5?$CFs?5line?5?$CFd?5references@ ; `string'
PUBLIC	??_C@_0DC@HOBCELJH@IDREF?5attribute?5?$CFs?5references?5a@ ; `string'
PUBLIC	??_C@_0N@BBOKCKMC@IDREFS?5split@		; `string'
PUBLIC	??_C@_0DD@JBMPIAIH@IDREFS?5attribute?5?$CFs?5references?5@ ; `string'
PUBLIC	??_C@_0CH@PKJJCFEM@xmlValidateDocumentFinal?3?5doc?5?$DN@ ; `string'
PUBLIC	??_C@_0DC@EEKBOKHB@xmlValidateAttributeCallback?$CI?$CFs@ ; `string'
PUBLIC	??_C@_0DC@CHBKELEG@attribute?5?$CFs?3?5could?5not?5find?5de@ ; `string'
PUBLIC	??_C@_0DF@KBMCJLCB@NOTATION?5attribute?5?$CFs?5declared?5@ ; `string'
PUBLIC	??_C@_0P@GBEHLCJD@no?5DTD?5found?$CB?6@		; `string'
PUBLIC	??_C@_0CO@FGGICOAP@Could?5not?5build?5URI?5for?5externa@ ; `string'
PUBLIC	??_C@_0CJ@BNOHLKCI@Could?5not?5load?5the?5external?5sub@ ; `string'
PUBLIC	??_C@_09LMMMMLKM@?$DM?$CBdummy?$DP?$DO@		; `string'
EXTRN	_xmlStrdup:PROC
EXTRN	_xmlStrndup:PROC
EXTRN	_xmlStrncmp:PROC
EXTRN	_xmlStrEqual:PROC
EXTRN	_xmlStrlen:PROC
EXTRN	_xmlDictLookup:PROC
EXTRN	_xmlDictOwns:PROC
EXTRN	_xmlRegFreeRegexp:PROC
EXTRN	_xmlRegexpIsDeterminist:PROC
EXTRN	_xmlRegNewExecCtxt:PROC
EXTRN	_xmlRegFreeExecCtxt:PROC
EXTRN	_xmlRegExecPushString:PROC
EXTRN	_xmlBuildQName:PROC
EXTRN	_xmlSplitQName2:PROC
EXTRN	_xmlSplitQName3:PROC
EXTRN	_xmlNewDocNode:PROC
EXTRN	_xmlGetLineNo:PROC
EXTRN	_xmlDocGetRootElement:PROC
EXTRN	_xmlIsBlankNode:PROC
EXTRN	_xmlUnlinkNode:PROC
EXTRN	_xmlFreeNode:PROC
EXTRN	_xmlNodeListGetString:PROC
EXTRN	_xmlBufferWriteCHAR:PROC
EXTRN	_xmlBufferWriteChar:PROC
EXTRN	_xmlBufferWriteQuotedString:PROC
EXTRN	_xmlHashCreateDict:PROC
EXTRN	_xmlHashFree:PROC
EXTRN	_xmlHashAddEntry:PROC
EXTRN	_xmlHashUpdateEntry:PROC
EXTRN	_xmlHashAddEntry2:PROC
EXTRN	_xmlHashAddEntry3:PROC
EXTRN	_xmlHashRemoveEntry:PROC
EXTRN	_xmlHashRemoveEntry2:PROC
EXTRN	_xmlHashLookup:PROC
EXTRN	_xmlHashLookup2:PROC
EXTRN	_xmlHashLookup3:PROC
EXTRN	_xmlHashCopy:PROC
EXTRN	_xmlHashScan:PROC
EXTRN	_xmlHashScan3:PROC
EXTRN	___xmlRaiseError:PROC
EXTRN	_xmlListCreate:PROC
EXTRN	_xmlListDelete:PROC
EXTRN	_xmlListAppend:PROC
EXTRN	_xmlListRemoveFirst:PROC
EXTRN	_xmlListEmpty:PROC
EXTRN	_xmlListWalk:PROC
EXTRN	_xmlLinkGetData:PROC
EXTRN	_xmlNewAutomata:PROC
EXTRN	_xmlFreeAutomata:PROC
EXTRN	_xmlAutomataGetInitState:PROC
EXTRN	_xmlAutomataSetFinalState:PROC
EXTRN	_xmlAutomataNewState:PROC
EXTRN	_xmlAutomataNewTransition:PROC
EXTRN	_xmlAutomataNewEpsilon:PROC
EXTRN	_xmlAutomataCompile:PROC
EXTRN	_xmlGetDocEntity:PROC
EXTRN	_xmlParseDTD:PROC
EXTRN	_xmlBuildURI:PROC
EXTRN	_xmlCharInRange:PROC
EXTRN	_xmlStringCurrentChar:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__chkstk:PROC
EXTRN	_memset:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_09LMMMMLKM@?$DM?$CBdummy?$DP?$DO@
CONST	SEGMENT
??_C@_09LMMMMLKM@?$DM?$CBdummy?$DP?$DO@ DB '<!dummy?>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@BNOHLKCI@Could?5not?5load?5the?5external?5sub@
CONST	SEGMENT
??_C@_0CJ@BNOHLKCI@Could?5not?5load?5the?5external?5sub@ DB 'Could not lo'
	DB	'ad the external subset "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FGGICOAP@Could?5not?5build?5URI?5for?5externa@
CONST	SEGMENT
??_C@_0CO@FGGICOAP@Could?5not?5build?5URI?5for?5externa@ DB 'Could not bu'
	DB	'ild URI for external subset "%s"', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GBEHLCJD@no?5DTD?5found?$CB?6@
CONST	SEGMENT
??_C@_0P@GBEHLCJD@no?5DTD?5found?$CB?6@ DB 'no DTD found!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@KBMCJLCB@NOTATION?5attribute?5?$CFs?5declared?5@
CONST	SEGMENT
??_C@_0DF@KBMCJLCB@NOTATION?5attribute?5?$CFs?5declared?5@ DB 'NOTATION a'
	DB	'ttribute %s declared for EMPTY element %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CHBKELEG@attribute?5?$CFs?3?5could?5not?5find?5de@
CONST	SEGMENT
??_C@_0DC@CHBKELEG@attribute?5?$CFs?3?5could?5not?5find?5de@ DB 'attribut'
	DB	'e %s: could not find decl for element %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EEKBOKHB@xmlValidateAttributeCallback?$CI?$CFs@
CONST	SEGMENT
??_C@_0DC@EEKBOKHB@xmlValidateAttributeCallback?$CI?$CFs@ DB 'xmlValidate'
	DB	'AttributeCallback(%s): internal error', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PKJJCFEM@xmlValidateDocumentFinal?3?5doc?5?$DN@
CONST	SEGMENT
??_C@_0CH@PKJJCFEM@xmlValidateDocumentFinal?3?5doc?5?$DN@ DB 'xmlValidate'
	DB	'DocumentFinal: doc == NULL', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JBMPIAIH@IDREFS?5attribute?5?$CFs?5references?5@
CONST	SEGMENT
??_C@_0DD@JBMPIAIH@IDREFS?5attribute?5?$CFs?5references?5@ DB 'IDREFS att'
	DB	'ribute %s references an unknown ID "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BBOKCKMC@IDREFS?5split@
CONST	SEGMENT
??_C@_0N@BBOKCKMC@IDREFS?5split@ DB 'IDREFS split', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@HOBCELJH@IDREF?5attribute?5?$CFs?5references?5a@
CONST	SEGMENT
??_C@_0DC@HOBCELJH@IDREF?5attribute?5?$CFs?5references?5a@ DB 'IDREF attr'
	DB	'ibute %s references an unknown ID "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@GLBIFDCC@attribute?5?$CFs?5line?5?$CFd?5references@
CONST	SEGMENT
??_C@_0DE@GLBIFDCC@attribute?5?$CFs?5line?5?$CFd?5references@ DB 'attribu'
	DB	'te %s line %d references an unknown ID "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PMJDAMAF@root?5and?5DTD?5name?5do?5not?5match?5@
CONST	SEGMENT
??_C@_0CO@PMJDAMAF@root?5and?5DTD?5name?5do?5not?5match?5@ DB 'root and D'
	DB	'TD name do not match ''%s'' and ''%s''', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PNIFHPHN@html@
CONST	SEGMENT
??_C@_04PNIFHPHN@html@ DB 'html', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBLPJNAF@HTML@
CONST	SEGMENT
??_C@_04DBLPJNAF@HTML@ DB 'HTML', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JNDFICHA@no?5root?5element?6@
CONST	SEGMENT
??_C@_0BB@JNDFICHA@no?5root?5element?6@ DB 'no root element', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@DDNBGMLL@Element?5?$CFs?5namespace?5name?5for?5?$CF@
CONST	SEGMENT
??_C@_0DJ@DDNBGMLL@Element?5?$CFs?5namespace?5name?5for?5?$CF@ DB 'Elemen'
	DB	't %s namespace name for %s does not match the DTD', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@BIBADMEK@Element?5?$CFs?5namespace?5name?5for?5d@
CONST	SEGMENT
??_C@_0EI@BIBADMEK@Element?5?$CFs?5namespace?5name?5for?5d@ DB 'Element %'
	DB	's namespace name for default namespace does not match the DTD'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@IGLOKJLK@Element?5?$CFs?5required?5attribute?5?$CF@
CONST	SEGMENT
??_C@_0DK@IGLOKJLK@Element?5?$CFs?5required?5attribute?5?$CF@ DB 'Element'
	DB	' %s required attribute %s:%s has different prefix', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KAGCOGBM@Element?5?$CFs?5required?5attribute?5?$CF@
CONST	SEGMENT
??_C@_0DD@KAGCOGBM@Element?5?$CFs?5required?5attribute?5?$CF@ DB 'Element'
	DB	' %s required attribute %s:%s has no prefix', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IDAGHCGO@Element?5?$CFs?5does?5not?5carry?5attri@
CONST	SEGMENT
??_C@_0CL@IDAGHCGO@Element?5?$CFs?5does?5not?5carry?5attri@ DB 'Element %'
	DB	's does not carry attribute %s:%s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@KOGIECMM@Element?5?$CFs?5does?5not?5carry?5attri@
CONST	SEGMENT
??_C@_0CI@KOGIECMM@Element?5?$CFs?5does?5not?5carry?5attri@ DB 'Element %'
	DB	's does not carry attribute %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@LHPMEFBO@standalone?3?5?$CFs?5declared?5in?5the?5@
CONST	SEGMENT
??_C@_0EM@LHPMEFBO@standalone?3?5?$CFs?5declared?5in?5the?5@ DB 'standalo'
	DB	'ne: %s declared in the external subset contains white spaces '
	DB	'nodes', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CJHPKHPI@unknown?5element?5type?6@
CONST	SEGMENT
??_C@_0BG@CJHPKHPI@unknown?5element?5type?6@ DB 'unknown element type', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DIBMDMIN@HTML?5Document?5not?5expected?6@
CONST	SEGMENT
??_C@_0BM@DIBMDMIN@HTML?5Document?5not?5expected?6@ DB 'HTML Document not'
	DB	' expected', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LPODOPI@Document?5element?5not?5expected?6@
CONST	SEGMENT
??_C@_0BP@LPODOPI@Document?5element?5not?5expected?6@ DB 'Document elemen'
	DB	't not expected', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FEDJMKLA@Notation?5element?5not?5expected?6@
CONST	SEGMENT
??_C@_0BP@FEDJMKLA@Notation?5element?5not?5expected?6@ DB 'Notation eleme'
	DB	'nt not expected', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CJFFIPOP@Entity?5element?5not?5expected?6@
CONST	SEGMENT
??_C@_0BN@CJFFIPOP@Entity?5element?5not?5expected?6@ DB 'Entity element n'
	DB	'ot expected', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DPPADDEP@Text?5element?5has?5no?5content?5?$CB?6@
CONST	SEGMENT
??_C@_0BP@DPPADDEP@Text?5element?5has?5no?5content?5?$CB?6@ DB 'Text elem'
	DB	'ent has no content !', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NIGEHALL@Text?5element?5has?5namespace?5?$CB?6@
CONST	SEGMENT
??_C@_0BO@NIGEHALL@Text?5element?5has?5namespace?5?$CB?6@ DB 'Text elemen'
	DB	't has namespace !', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JALMDBBB@Text?5element?5has?5children?5?$CB?6@
CONST	SEGMENT
??_C@_0BN@JALMDBBB@Text?5element?5has?5children?5?$CB?6@ DB 'Text element'
	DB	' has children !', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EPFCDFAG@Attribute?5element?5not?5expected?6@
CONST	SEGMENT
??_C@_0CA@EPFCDFAG@Attribute?5element?5not?5expected?6@ DB 'Attribute ele'
	DB	'ment not expected', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@JDBIOCJK@Element?5?$CFs?5content?5does?5not?5fol@
CONST	SEGMENT
??_C@_0EC@JDBIOCJK@Element?5?$CFs?5content?5does?5not?5fol@ DB 'Element %'
	DB	's content does not follow the DTD, Expecting more child', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@HNMIGKJO@Element?5?$CFs?5content?5does?5not?5fol@
CONST	SEGMENT
??_C@_0DO@HNMIGKJO@Element?5?$CFs?5content?5does?5not?5fol@ DB 'Element %'
	DB	's content does not follow the DTD, Text not allowed', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@BGIDCAIC@Element?5?$CFs?5content?5does?5not?5fol@
CONST	SEGMENT
??_C@_0DK@BGIDCAIC@Element?5?$CFs?5content?5does?5not?5fol@ DB 'Element %'
	DB	's content does not follow the DTD, Misplaced %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IPIENEI@Element?5?$CFs?5is?5not?5declared?5in?5?$CF@
CONST	SEGMENT
??_C@_0DM@IPIENEI@Element?5?$CFs?5is?5not?5declared?5in?5?$CF@ DB 'Elemen'
	DB	't %s is not declared in %s list of possible children', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@CFJCCMLK@Element?5?$CFs?5was?5declared?5?$CDPCDATA@
CONST	SEGMENT
??_C@_0DN@CFJCCMLK@Element?5?$CFs?5was?5declared?5?$CDPCDATA@ DB 'Element'
	DB	' %s was declared #PCDATA but contains non text nodes', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@KLKCMFPH@Element?5?$CFs?5was?5declared?5EMPTY?5t@
CONST	SEGMENT
??_C@_0DE@KLKCMFPH@Element?5?$CFs?5was?5declared?5EMPTY?5t@ DB 'Element %'
	DB	's was declared EMPTY this one has content', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CMBGNCIM@No?5declaration?5for?5element?5?$CFs?6@
CONST	SEGMENT
??_C@_0BP@CMBGNCIM@No?5declaration?5for?5element?5?$CFs?6@ DB 'No declara'
	DB	'tion for element %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LMJFIFCG@Internal?3?5MIXED?5struct?5corrupte@
CONST	SEGMENT
??_C@_0CC@LMJFIFCG@Internal?3?5MIXED?5struct?5corrupte@ DB 'Internal: MIX'
	DB	'ED struct corrupted', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@JFPHFAJJ@Element?5content?5does?5not?5follow@
CONST	SEGMENT
??_C@_0CJ@JFPHFAJJ@Element?5content?5does?5not?5follow@ DB 'Element conte'
	DB	'nt does not follow the DTD', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@BLHDJNNL@Element?5?$CFs?5content?5does?5not?5fol@
CONST	SEGMENT
??_C@_0CM@BLHDJNNL@Element?5?$CFs?5content?5does?5not?5fol@ DB 'Element %'
	DB	's content does not follow the DTD', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CBELDNAH@Element?5content?5does?5not?5follow@
CONST	SEGMENT
??_C@_0DP@CBELDNAH@Element?5content?5does?5not?5follow@ DB 'Element conte'
	DB	'nt does not follow the DTD, expecting %s, got %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@IAKGOMPC@Element?5?$CFs?5content?5does?5not?5fol@
CONST	SEGMENT
??_C@_0EC@IAKGOMPC@Element?5?$CFs?5content?5does?5not?5fol@ DB 'Element %'
	DB	's content does not follow the DTD, expecting %s, got %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBKEAIF@?$DP?$DP?$DP@
CONST	SEGMENT
??_C@_03BBKEAIF@?$DP?$DP?$DP@ DB '???', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLPNBPGH@CDATA@
CONST	SEGMENT
??_C@_05MLPNBPGH@CDATA@ DB 'CDATA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@DNGFHLPE@Value?5for?5attribute?5xmlns?5of?5?$CFs@
CONST	SEGMENT
??_C@_0CO@DNGFHLPE@Value?5for?5attribute?5xmlns?5of?5?$CFs@ DB 'Value for'
	DB	' attribute xmlns of %s must be "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DPJFCMMB@Value?5for?5attribute?5xmlns?3?$CFs?5of@
CONST	SEGMENT
??_C@_0DB@DPJFCMMB@Value?5for?5attribute?5xmlns?3?$CFs?5of@ DB 'Value for'
	DB	' attribute xmlns:%s of %s must be "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EG@CDCEFKCM@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@
CONST	SEGMENT
??_C@_0EG@CDCEFKCM@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@ DB 'Val'
	DB	'ue "%s" for attribute xmlns of %s is not among the enumerated'
	DB	' set', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@PDIHKDMN@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@
CONST	SEGMENT
??_C@_0EJ@PDIHKDMN@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@ DB 'Val'
	DB	'ue "%s" for attribute xmlns:%s of %s is not among the enumera'
	DB	'ted set', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EM@LDEIIDJK@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@
CONST	SEGMENT
??_C@_0EM@LDEIIDJK@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@ DB 'Val'
	DB	'ue "%s" for attribute xmlns of %s is not among the enumerated'
	DB	' notations', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@PJCDPKEK@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@
CONST	SEGMENT
??_C@_0EP@PJCDPKEK@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@ DB 'Val'
	DB	'ue "%s" for attribute xmlns:%s of %s is not among the enumera'
	DB	'ted notations', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IKNIAELF@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@
CONST	SEGMENT
??_C@_0EB@IKNIAELF@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@ DB 'Val'
	DB	'ue "%s" for attribute xmlns of %s is not a declared Notation', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@ENPHOLHF@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@
CONST	SEGMENT
??_C@_0EE@ENPHOLHF@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@ DB 'Val'
	DB	'ue "%s" for attribute xmlns:%s of %s is not a declared Notati'
	DB	'on', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@HGOHDHBG@Value?5for?5attribute?5xmlns?5of?5?$CFs@
CONST	SEGMENT
??_C@_0EA@HGOHDHBG@Value?5for?5attribute?5xmlns?5of?5?$CFs@ DB 'Value for'
	DB	' attribute xmlns of %s is different from default "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@KAGANNGH@Value?5for?5attribute?5xmlns?3?$CFs?5of@
CONST	SEGMENT
??_C@_0ED@KAGANNGH@Value?5for?5attribute?5xmlns?3?$CFs?5of@ DB 'Value for'
	DB	' attribute xmlns:%s of %s is different from default "%s"', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HAHGLIKC@Syntax?5of?5value?5for?5attribute?5x@
CONST	SEGMENT
??_C@_0DI@HAHGLIKC@Syntax?5of?5value?5for?5attribute?5x@ DB 'Syntax of va'
	DB	'lue for attribute xmlns of %s is not valid', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@CBOACJEL@Syntax?5of?5value?5for?5attribute?5x@
CONST	SEGMENT
??_C@_0DL@CBOACJEL@Syntax?5of?5value?5for?5attribute?5x@ DB 'Syntax of va'
	DB	'lue for attribute xmlns:%s of %s is not valid', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@FPONLEAN@No?5declaration?5for?5attribute?5xm@
CONST	SEGMENT
??_C@_0DC@FPONLEAN@No?5declaration?5for?5attribute?5xm@ DB 'No declaratio'
	DB	'n for attribute xmlns of element %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GJIDMPBO@No?5declaration?5for?5attribute?5xm@
CONST	SEGMENT
??_C@_0DF@GJIDMPBO@No?5declaration?5for?5attribute?5xm@ DB 'No declaratio'
	DB	'n for attribute xmlns:%s of element %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@INLCBMIM@Validating?5namespace@
CONST	SEGMENT
??_C@_0BF@INLCBMIM@Validating?5namespace@ DB 'Validating namespace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KKBPHLEC@Value?5for?5attribute?5?$CFs?5of?5?$CFs?5mu@
CONST	SEGMENT
??_C@_0CL@KKBPHLEC@Value?5for?5attribute?5?$CFs?5of?5?$CFs?5mu@ DB 'Value'
	DB	' for attribute %s of %s must be "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@GMECILPN@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@
CONST	SEGMENT
??_C@_0ED@GMECILPN@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@ DB 'V'
	DB	'alue "%s" for attribute %s of %s is not among the enumerated '
	DB	'set', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@LLDEHINL@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@
CONST	SEGMENT
??_C@_0EJ@LLDEHINL@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@ DB 'V'
	DB	'alue "%s" for attribute %s of %s is not among the enumerated '
	DB	'notations', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@HAIKKCN@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@
CONST	SEGMENT
??_C@_0DO@HAIKKCN@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@ DB 'V'
	DB	'alue "%s" for attribute %s of %s is not a declared Notation', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@BPCEOAOB@Value?5for?5attribute?5?$CFs?5of?5?$CFs?5is@
CONST	SEGMENT
??_C@_0DN@BPCEOAOB@Value?5for?5attribute?5?$CFs?5of?5?$CFs?5is@ DB 'Value'
	DB	' for attribute %s of %s is different from default "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@PPLCGADM@Syntax?5of?5value?5for?5attribute?5?$CF@
CONST	SEGMENT
??_C@_0DF@PPLCGADM@Syntax?5of?5value?5for?5attribute?5?$CF@ DB 'Syntax of'
	DB	' value for attribute %s of %s is not valid', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@IDGJHJLH@No?5declaration?5for?5attribute?5?$CFs@
CONST	SEGMENT
??_C@_0CP@IDGJHJLH@No?5declaration?5for?5attribute?5?$CFs@ DB 'No declara'
	DB	'tion for attribute %s of element %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PAODFKFF@Definition?5of?5?$CFs?5has?5duplicate?5@
CONST	SEGMENT
??_C@_0DE@PAODFKFF@Definition?5of?5?$CFs?5has?5duplicate?5@ DB 'Definitio'
	DB	'n of %s has duplicate references to %s:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@HNLIHGKJ@Definition?5of?5?$CFs?5has?5duplicate?5@
CONST	SEGMENT
??_C@_0DB@HNLIHGKJ@Definition?5of?5?$CFs?5has?5duplicate?5@ DB 'Definitio'
	DB	'n of %s has duplicate references to %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@IDAOJGBB@Definition?5of?5?$CFs?5has?5duplicate?5@
CONST	SEGMENT
??_C@_0DE@IDAOJGBB@Definition?5of?5?$CFs?5has?5duplicate?5@ DB 'Definitio'
	DB	'n of %s has duplicate references of %s:%s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DPGOOPFF@Definition?5of?5?$CFs?5has?5duplicate?5@
CONST	SEGMENT
??_C@_0DB@DPGOOPFF@Definition?5of?5?$CFs?5has?5duplicate?5@ DB 'Definitio'
	DB	'n of %s has duplicate references of %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@MPNELAFE@Default?5value?5?$CC?$CFs?$CC?5for?5attribut@
CONST	SEGMENT
??_C@_0EL@MPNELAFE@Default?5value?5?$CC?$CFs?$CC?5for?5attribut@ DB 'Defa'
	DB	'ult value "%s" for attribute %s of %s is not among the enumer'
	DB	'ated set', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@CFLHEJLO@Element?5?$CFs?5has?5ID?5attributes?5de@
CONST	SEGMENT
??_C@_0EP@CFLHEJLO@Element?5?$CFs?5has?5ID?5attributes?5de@ DB 'Element %'
	DB	's has ID attributes defined in the internal and external subs'
	DB	'et : %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@JDKHGIAG@Element?5?$CFs?5has?5?$CFd?5ID?5attribute?5@
CONST	SEGMENT
??_C@_0EE@JDKHGIAG@Element?5?$CFs?5has?5?$CFd?5ID?5attribute?5@ DB 'Eleme'
	DB	'nt %s has %d ID attribute defined in the external subset : %s'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@MLJMMKCM@Element?5?$CFs?5has?5?$CFd?5ID?5attribute?5@
CONST	SEGMENT
??_C@_0EE@MLJMMKCM@Element?5?$CFs?5has?5?$CFd?5ID?5attribute?5@ DB 'Eleme'
	DB	'nt %s has %d ID attribute defined in the internal subset : %s'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@DNHDHDCI@ID?5attribute?5?$CFs?5of?5?$CFs?5is?5not?5va@
CONST	SEGMENT
??_C@_0EC@DNHDHDCI@ID?5attribute?5?$CFs?5of?5?$CFs?5is?5not?5va@ DB 'ID a'
	DB	'ttribute %s of %s is not valid must be #IMPLIED or #REQUIRED', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MJLCEKEK@Syntax?5of?5default?5value?5for?5att@
CONST	SEGMENT
??_C@_0DN@MJLCEKEK@Syntax?5of?5default?5value?5for?5att@ DB 'Syntax of de'
	DB	'fault value for attribute %s of %s is not valid', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@CJEJIEOP@standalone?3?5?$CFs?5on?5?$CFs?5value?5had?5@
CONST	SEGMENT
??_C@_0FG@CJEJIEOP@standalone?3?5?$CFs?5on?5?$CFs?5value?5had?5@ DB 'stan'
	DB	'dalone: %s on %s value had to be normalized based on external'
	DB	' subset declaration', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@HMAANMLE@NOTATION?5attribute?5?$CFs?5reference@
CONST	SEGMENT
??_C@_0DK@HMAANMLE@NOTATION?5attribute?5?$CFs?5reference@ DB 'NOTATION at'
	DB	'tribute %s reference an unknown notation "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@BNHKOEGN@ENTITIES?5attribute?5?$CFs?5reference@
CONST	SEGMENT
??_C@_0DO@BNHKOEGN@ENTITIES?5attribute?5?$CFs?5reference@ DB 'ENTITIES at'
	DB	'tribute %s reference an entity "%s" of wrong type', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@MOCJGONA@ENTITIES?5attribute?5?$CFs?5reference@
CONST	SEGMENT
??_C@_0DI@MOCJGONA@ENTITIES?5attribute?5?$CFs?5reference@ DB 'ENTITIES at'
	DB	'tribute %s reference an unknown entity "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@CBMBENAH@ENTITY?5attribute?5?$CFs?5reference?5a@
CONST	SEGMENT
??_C@_0DM@CBMBENAH@ENTITY?5attribute?5?$CFs?5reference?5a@ DB 'ENTITY att'
	DB	'ribute %s reference an entity "%s" of wrong type', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NHAJHAEC@ENTITY?5attribute?5?$CFs?5reference?5a@
CONST	SEGMENT
??_C@_0DG@NHAJHAEC@ENTITY?5attribute?5?$CFs?5reference?5a@ DB 'ENTITY att'
	DB	'ribute %s reference an unknown entity "%s"', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NONOBNKE@NOTATION?5?$CFs?5is?5not?5declared?6@
CONST	SEGMENT
??_C@_0BN@NONOBNKE@NOTATION?5?$CFs?5is?5not?5declared?6@ DB 'NOTATION %s '
	DB	'is not declared', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@OJAJCLMD@element?5table?5allocation?5failed@
CONST	SEGMENT
??_C@_0CA@OJAJCLMD@element?5table?5allocation?5failed@ DB 'element table '
	DB	'allocation failed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CLGHPEIK@xmlAddRef?3?5Reference?5list?5inser@
CONST	SEGMENT
??_C@_0CN@CLGHPEIK@xmlAddRef?3?5Reference?5list?5inser@ DB 'xmlAddRef: Re'
	DB	'ference list insertion failed!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EILGCMCJ@xmlAddRef?3?5Reference?5list?5creat@
CONST	SEGMENT
??_C@_0CM@EILGCMCJ@xmlAddRef?3?5Reference?5list?5creat@ DB 'xmlAddRef: Re'
	DB	'ference list creation failed!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JKLLCBGN@xmlAddRef?3?5Table?5creation?5faile@
CONST	SEGMENT
??_C@_0CD@JKLLCBGN@xmlAddRef?3?5Table?5creation?5faile@ DB 'xmlAddRef: Ta'
	DB	'ble creation failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MCMALHOG@a@
CONST	SEGMENT
??_C@_01MCMALHOG@a@ DB 'a', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name@ DB 'name', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PJHHNEEI@xml@
CONST	SEGMENT
??_C@_03PJHHNEEI@xml@ DB 'xml', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id@
CONST	SEGMENT
??_C@_02EGCJHIOB@id@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JKIFIOPN@ID?5?$CFs?5already?5defined?6@
CONST	SEGMENT
??_C@_0BH@JKIFIOPN@ID?5?$CFs?5already?5defined?6@ DB 'ID %s already defin'
	DB	'ed', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HPFDMDEK@xmlAddID?3?5Table?5creation?5failed@
CONST	SEGMENT
??_C@_0CC@HPFDMDEK@xmlAddID?3?5Table?5creation?5failed@ DB 'xmlAddID: Tab'
	DB	'le creation failed!', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KKJDKPMN@?5?$DO?6@
CONST	SEGMENT
??_C@_03KKJDKPMN@?5?$DO?6@ DB ' >', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PAGGLANP@?5SYSTEM?5@
CONST	SEGMENT
??_C@_08PAGGLANP@?5SYSTEM?5@ DB ' SYSTEM ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GBBLECIH@?5PUBLIC?5@
CONST	SEGMENT
??_C@_08GBBLECIH@?5PUBLIC?5@ DB ' PUBLIC ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IOFINGOM@?$DM?$CBNOTATION?5@
CONST	SEGMENT
??_C@_0M@IOFINGOM@?$DM?$CBNOTATION?5@ DB '<!NOTATION ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@HFJJKKEO@xmlAddNotationDecl?3?5?$CFs?5already?5@
CONST	SEGMENT
??_C@_0CI@HFJJKKEO@xmlAddNotationDecl?3?5?$CFs?5already?5@ DB 'xmlAddNota'
	DB	'tionDecl: %s already defined', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@PJBPJANJ@xmlAddNotationDecl?3?5Table?5creat@
CONST	SEGMENT
??_C@_0CM@PJBPJANJ@xmlAddNotationDecl?3?5Table?5creat@ DB 'xmlAddNotation'
	DB	'Decl: Table creation failed!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@EJJFJDDL@Internal?3?5ATTRIBUTE?5struct?5corr@
CONST	SEGMENT
??_C@_0DC@EJJFJDDL@Internal?3?5ATTRIBUTE?5struct?5corr@ DB 'Internal: ATT'
	DB	'RIBUTE struct corrupted invalid def', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PNOBFAOP@?5?$CDFIXED@
CONST	SEGMENT
??_C@_07PNOBFAOP@?5?$CDFIXED@ DB ' #FIXED', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GOIPIIGC@?5?$CDIMPLIED@
CONST	SEGMENT
??_C@_09GOIPIIGC@?5?$CDIMPLIED@ DB ' #IMPLIED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IEBFJPBC@?5?$CDREQUIRED@
CONST	SEGMENT
??_C@_0L@IEBFJPBC@?5?$CDREQUIRED@ DB ' #REQUIRED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGKIMAHJ@?5NOTATION?5?$CI@
CONST	SEGMENT
??_C@_0M@IGKIMAHJ@?5NOTATION?5?$CI@ DB ' NOTATION (', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GFKOMOKH@?5?$CI@
CONST	SEGMENT
??_C@_02GFKOMOKH@?5?$CI@ DB ' (', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGAPIBOH@?5NMTOKENS@
CONST	SEGMENT
??_C@_09LGAPIBOH@?5NMTOKENS@ DB ' NMTOKENS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JLMONKHB@?5NMTOKEN@
CONST	SEGMENT
??_C@_08JLMONKHB@?5NMTOKEN@ DB ' NMTOKEN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09MILPKLMO@?5ENTITIES@
CONST	SEGMENT
??_C@_09MILPKLMO@?5ENTITIES@ DB ' ENTITIES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GLIJGNMP@?5ENTITY@
CONST	SEGMENT
??_C@_07GLIJGNMP@?5ENTITY@ DB ' ENTITY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CNGJPBFB@?5IDREFS@
CONST	SEGMENT
??_C@_07CNGJPBFB@?5IDREFS@ DB ' IDREFS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JJHMNMLB@?5IDREF@
CONST	SEGMENT
??_C@_06JJHMNMLB@?5IDREF@ DB ' IDREF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JFNHLDJD@?5ID@
CONST	SEGMENT
??_C@_03JFNHLDJD@?5ID@ DB ' ID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CIOOFICG@?5CDATA@
CONST	SEGMENT
??_C@_06CIOOFICG@?5CDATA@ DB ' CDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NDHICKFH@?$DM?$CBATTLIST?5@
CONST	SEGMENT
??_C@_0L@NDHICKFH@?$DM?$CBATTLIST?5@ DB '<!ATTLIST ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPEFOGKI@xmlns@
CONST	SEGMENT
??_C@_05PPEFOGKI@xmlns@ DB 'xmlns', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GEPJIIIF@Element?5?$CFs?5has?5too?5may?5ID?5attri@
CONST	SEGMENT
??_C@_0DD@GEPJIIIF@Element?5?$CFs?5has?5too?5may?5ID?5attri@ DB 'Element '
	DB	'%s has too may ID attributes defined : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HJBCFPNE@Attribute?5?$CFs?5of?5element?5?$CFs?3?5alr@
CONST	SEGMENT
??_C@_0CN@HJBCFPNE@Attribute?5?$CFs?5of?5element?5?$CFs?3?5alr@ DB 'Attri'
	DB	'bute %s of element %s: already defined', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LFDBMMCB@xmlAddAttributeDecl?3?5Table?5crea@
CONST	SEGMENT
??_C@_0CN@LFDBMMCB@xmlAddAttributeDecl?3?5Table?5crea@ DB 'xmlAddAttribut'
	DB	'eDecl: Table creation failed!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IHGCOODJ@Attribute?5?$CFs?5of?5?$CFs?3?5invalid?5def@
CONST	SEGMENT
??_C@_0CL@IHGCOODJ@Attribute?5?$CFs?5of?5?$CFs?3?5invalid?5def@ DB 'Attri'
	DB	'bute %s of %s: invalid default value', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NLJCGIHL@Internal?3?5ATTRIBUTE?5struct?5corr@
CONST	SEGMENT
??_C@_0DD@NLJCGIHL@Internal?3?5ATTRIBUTE?5struct?5corr@ DB 'Internal: ATT'
	DB	'RIBUTE struct corrupted invalid type', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@EJGKGKMH@Element?5?$CFs?5has?5too?5many?5ID?5attr@
CONST	SEGMENT
??_C@_0DE@EJGKGKMH@Element?5?$CFs?5has?5too?5many?5ID?5attr@ DB 'Element '
	DB	'%s has too many ID attributes defined : %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NFLGBMMC@Internal?3?5ELEMENT?5struct?5corrup@
CONST	SEGMENT
??_C@_0DB@NFLGBMMC@Internal?3?5ELEMENT?5struct?5corrup@ DB 'Internal: ELE'
	DB	'MENT struct corrupted invalid type', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02NEKEAGPN@?$DO?6@
CONST	SEGMENT
??_C@_02NEKEAGPN@?$DO?6@ DB '>', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMPGEGME@?5ANY?$DO?6@
CONST	SEGMENT
??_C@_06OMPGEGME@?5ANY?$DO?6@ DB ' ANY>', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HMKELAAG@?5EMPTY?$DO?6@
CONST	SEGMENT
??_C@_08HMKELAAG@?5EMPTY?$DO?6@ DB ' EMPTY>', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@
CONST	SEGMENT
??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@ DB '<!ELEMENT ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DLJMKEJ@Redefinition?5of?5element?5?$CFs?6@
CONST	SEGMENT
??_C@_0BM@DLJMKEJ@Redefinition?5of?5element?5?$CFs?6@ DB 'Redefinition of'
	DB	' element %s', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@IICJECDN@xmlAddElementDecl?3?5Table?5creati@
CONST	SEGMENT
??_C@_0CL@IICJECDN@xmlAddElementDecl?3?5Table?5creati@ DB 'xmlAddElementD'
	DB	'ecl: Table creation failed!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HFIOBKAA@Internal?3?5ELEMENT?5decl?5corrupte@
CONST	SEGMENT
??_C@_0CP@HFIOBKAA@Internal?3?5ELEMENT?5decl?5corrupte@ DB 'Internal: ELE'
	DB	'MENT decl corrupted invalid type', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@CFDLEHAD@xmlAddElementDecl?3?5content?5?$DN?$DN?5N@
CONST	SEGMENT
??_C@_0DA@CFDLEHAD@xmlAddElementDecl?3?5content?5?$DN?$DN?5N@ DB 'xmlAddE'
	DB	'lementDecl: content == NULL for ELEMENT', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IMMDEKCP@xmlAddElementDecl?3?5content?5?$DN?$DN?5N@
CONST	SEGMENT
??_C@_0CO@IMMDEKCP@xmlAddElementDecl?3?5content?5?$DN?$DN?5N@ DB 'xmlAddE'
	DB	'lementDecl: content == NULL for MIXED', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@DBFKJMHA@xmlAddElementDecl?3?5content?5?$CB?$DN?5N@
CONST	SEGMENT
??_C@_0CM@DBFKJMHA@xmlAddElementDecl?3?5content?5?$CB?$DN?5N@ DB 'xmlAddE'
	DB	'lementDecl: content != NULL for ANY', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@BLBNCGCL@xmlAddElementDecl?3?5content?5?$CB?$DN?5N@
CONST	SEGMENT
??_C@_0CO@BLBNCGCL@xmlAddElementDecl?3?5content?5?$CB?$DN?5N@ DB 'xmlAddE'
	DB	'lementDecl: content != NULL for EMPTY', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IBCFJNCN@?5?4?4?4@
CONST	SEGMENT
??_C@_04IBCFJNCN@?5?4?4?4@ DB ' ...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LGOGDKEL@?5?$HM?5@
CONST	SEGMENT
??_C@_03LGOGDKEL@?5?$HM?5@ DB ' | ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NKFKBEPL@?5?0?5@
CONST	SEGMENT
??_C@_03NKFKBEPL@?5?0?5@ DB ' , ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELDBONKP@?$CDPCDATA@
CONST	SEGMENT
??_C@_07ELDBONKP@?$CDPCDATA@ DB '#PCDATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GLPLFDD@Internal?3?5ELEMENT?5content?5corru@
CONST	SEGMENT
??_C@_0DC@GLPLFDD@Internal?3?5ELEMENT?5content?5corru@ DB 'Internal: ELEM'
	DB	'ENT content corrupted invalid type', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EHMNFIPD@xmlNewElementContent?5?3?5name?5?$CB?$DN?5@
CONST	SEGMENT
??_C@_0CH@EHMNFIPD@xmlNewElementContent?5?3?5name?5?$CB?$DN?5@ DB 'xmlNew'
	DB	'ElementContent : name != NULL !', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ODCBAOPP@xmlNewElementContent?5?3?5name?5?$DN?$DN?5@
CONST	SEGMENT
??_C@_0CH@ODCBAOPP@xmlNewElementContent?5?3?5name?5?$DN?$DN?5@ DB 'xmlNew'
	DB	'ElementContent : name == NULL !', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GHMIMING@Content?5model?5of?5?$CFs?5is?5not?5dete@
CONST	SEGMENT
??_C@_0CM@GHMIMING@Content?5model?5of?5?$CFs?5is?5not?5dete@ DB 'Content '
	DB	'model of %s is not determinist: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LILACHHH@Cannot?5create?5automata?5for?5elem@
CONST	SEGMENT
??_C@_0CH@LILACHHH@Cannot?5create?5automata?5for?5elem@ DB 'Cannot create'
	DB	' automata for element %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LMBMADBI@ContentModel?5broken?5for?5element@
CONST	SEGMENT
??_C@_0CE@LMBMADBI@ContentModel?5broken?5for?5element@ DB 'ContentModel b'
	DB	'roken for element %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@INHICIGB@Building?5content?5model@
CONST	SEGMENT
??_C@_0BH@INHICIGB@Building?5content?5model@ DB 'Building content model', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IIHAKBAI@Found?5PCDATA?5in?5content?5model?5o@
CONST	SEGMENT
??_C@_0CF@IIHAKBAI@Found?5PCDATA?5in?5content?5model?5o@ DB 'Found PCDATA'
	DB	' in content model of %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FIAOIAHN@Found?5NULL?5content?5in?5content?5m@
CONST	SEGMENT
??_C@_0CL@FIAOIAHN@Found?5NULL?5content?5in?5content?5m@ DB 'Found NULL c'
	DB	'ontent in content model of %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@GEBFHDLO@Failed?5to?5build?5content?5model?5r@
CONST	SEGMENT
??_C@_0CN@GEBFHDLO@Failed?5to?5build?5content?5model?5r@ DB 'Failed to bu'
	DB	'ild content model regexp for %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BHJOIPMJ@realloc?5failed@
CONST	SEGMENT
??_C@_0P@BHJOIPMJ@realloc?5failed@ DB 'realloc failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IMHFIAOC@malloc?5failed@
CONST	SEGMENT
??_C@_0O@IMHFIAOC@malloc?5failed@ DB 'malloc failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@
CONST	SEGMENT
??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@ DB 'Memory allocation fa'
	DB	'iled', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@ DB 'Memory al'
	DB	'location failed : %s', 0aH, 00H		; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlNoValidityErr
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_msg$ = 12						; size = 4
_xmlNoValidityErr PROC					; COMDAT

; 6960 :                                 const char *msg ATTRIBUTE_UNUSED, ...) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6961 :     return;
; 6962 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlNoValidityErr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateAttributeCallback
_TEXT	SEGMENT
tv66 = -28						; size = 4
_tree$1 = -24						; size = 4
_elem$ = -20						; size = 4
_doc$ = -16						; size = 4
_ret$ = -12						; size = 4
_ctxt$ = -8						; size = 4
_cur$ = -4						; size = 4
_payload$ = 8						; size = 4
_data$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlValidateAttributeCallback PROC			; COMDAT

; 6710 : 	                     const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6711 :     xmlAttributePtr cur = (xmlAttributePtr) payload;

	mov	eax, DWORD PTR _payload$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 6712 :     xmlValidCtxtPtr ctxt = (xmlValidCtxtPtr) data;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _ctxt$[ebp], ecx

; 6713 :     int ret;
; 6714 :     xmlDocPtr doc;
; 6715 :     xmlElementPtr elem = NULL;

	mov	DWORD PTR _elem$[ebp], 0

; 6716 : 
; 6717 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN6@xmlValidat

; 6718 : 	return;

	jmp	$LN1@xmlValidat
$LN6@xmlValidat:

; 6719 :     switch (cur->atype) {

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 5
	jl	$LN2@xmlValidat
	cmp	DWORD PTR tv66[ebp], 6
	jle	SHORT $LN8@xmlValidat
	cmp	DWORD PTR tv66[ebp], 10			; 0000000aH
	je	SHORT $LN8@xmlValidat
	jmp	$LN2@xmlValidat

; 6720 : 	case XML_ATTRIBUTE_CDATA:
; 6721 : 	case XML_ATTRIBUTE_ID:
; 6722 : 	case XML_ATTRIBUTE_IDREF	:
; 6723 : 	case XML_ATTRIBUTE_IDREFS:
; 6724 : 	case XML_ATTRIBUTE_NMTOKEN:
; 6725 : 	case XML_ATTRIBUTE_NMTOKENS:
; 6726 : 	case XML_ATTRIBUTE_ENUMERATION:
; 6727 : 	    break;

	jmp	$LN2@xmlValidat
$LN8@xmlValidat:

; 6728 : 	case XML_ATTRIBUTE_ENTITY:
; 6729 : 	case XML_ATTRIBUTE_ENTITIES:
; 6730 : 	case XML_ATTRIBUTE_NOTATION:
; 6731 : 	    if (cur->defaultValue != NULL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN9@xmlValidat

; 6732 : 
; 6733 : 		ret = xmlValidateAttributeValue2(ctxt, ctxt->doc, cur->name,

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidateAttributeValue2
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 6734 : 			                         cur->atype, cur->defaultValue);
; 6735 : 		if ((ret == 0) && (ctxt->valid == 1))

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN9@xmlValidat
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+36], 1
	jne	SHORT $LN9@xmlValidat

; 6736 : 		    ctxt->valid = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN9@xmlValidat:

; 6737 : 	    }
; 6738 : 	    if (cur->tree != NULL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN2@xmlValidat

; 6739 : 		xmlEnumerationPtr tree = cur->tree;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _tree$1[ebp], eax
$LN4@xmlValidat:

; 6740 : 		while (tree != NULL) {

	cmp	DWORD PTR _tree$1[ebp], 0
	je	SHORT $LN2@xmlValidat

; 6741 : 		    ret = xmlValidateAttributeValue2(ctxt, ctxt->doc,

	mov	ecx, DWORD PTR _tree$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlValidateAttributeValue2
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 6742 : 				    cur->name, cur->atype, tree->name);
; 6743 : 		    if ((ret == 0) && (ctxt->valid == 1))

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN12@xmlValidat
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 1
	jne	SHORT $LN12@xmlValidat

; 6744 : 			ctxt->valid = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+36], 0
$LN12@xmlValidat:

; 6745 : 		    tree = tree->next;

	mov	eax, DWORD PTR _tree$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _tree$1[ebp], ecx

; 6746 : 		}

	jmp	SHORT $LN4@xmlValidat
$LN2@xmlValidat:

; 6747 : 	    }
; 6748 :     }
; 6749 :     if (cur->atype == XML_ATTRIBUTE_NOTATION) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+40], 10			; 0000000aH
	jne	$LN1@xmlValidat

; 6750 : 	doc = cur->doc;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _doc$[ebp], ecx

; 6751 : 	if (cur->elem == NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+60], 0
	jne	SHORT $LN14@xmlValidat

; 6752 : 	    xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0DC@EEKBOKHB@xmlValidateAttributeCallback?$CI?$CFs@
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 6753 : 		   "xmlValidateAttributeCallback(%s): internal error\n",
; 6754 : 		   (const char *) cur->name);
; 6755 : 	    return;

	jmp	$LN1@xmlValidat
$LN14@xmlValidat:

; 6756 : 	}
; 6757 : 
; 6758 : 	if (doc != NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN15@xmlValidat

; 6759 : 	    elem = xmlGetDtdElementDesc(doc->intSubset, cur->elem);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _elem$[ebp], eax
$LN15@xmlValidat:

; 6760 : 	if ((elem == NULL) && (doc != NULL))

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN16@xmlValidat
	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN16@xmlValidat

; 6761 : 	    elem = xmlGetDtdElementDesc(doc->extSubset, cur->elem);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _elem$[ebp], eax
$LN16@xmlValidat:

; 6762 : 	if ((elem == NULL) && (cur->parent != NULL) &&

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN17@xmlValidat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN17@xmlValidat
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+4], 14			; 0000000eH
	jne	SHORT $LN17@xmlValidat

; 6763 : 	    (cur->parent->type == XML_DTD_NODE))
; 6764 : 	    elem = xmlGetDtdElementDesc((xmlDtdPtr) cur->parent, cur->elem);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _elem$[ebp], eax
$LN17@xmlValidat:

; 6765 : 	if (elem == NULL) {

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN18@xmlValidat

; 6766 : 	    xmlErrValidNode(ctxt, NULL, XML_DTD_UNKNOWN_ELEM,

	push	0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DC@CHBKELEG@attribute?5?$CFs?3?5could?5not?5find?5de@
	push	534					; 00000216H
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6767 : 		   "attribute %s: could not find decl for element %s\n",
; 6768 : 		   cur->name, cur->elem, NULL);
; 6769 : 	    return;

	jmp	SHORT $LN1@xmlValidat
$LN18@xmlValidat:

; 6770 : 	}
; 6771 : 	if (elem->etype == XML_ELEMENT_TYPE_EMPTY) {

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+36], 1
	jne	SHORT $LN1@xmlValidat

; 6772 : 	    xmlErrValidNode(ctxt, NULL, XML_DTD_EMPTY_NOTATION,

	push	0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DF@KBMCJLCB@NOTATION?5attribute?5?$CFs?5declared?5@
	push	510					; 000001feH
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6773 : 		   "NOTATION attribute %s declared for EMPTY element %s\n",
; 6774 : 		   cur->name, cur->elem, NULL);
; 6775 : 	    ctxt->valid = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+36], 0
$LN1@xmlValidat:

; 6776 : 	}
; 6777 :     }
; 6778 : }

	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateAttributeCallback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNotationCallback
_TEXT	SEGMENT
_ret$1 = -16						; size = 4
_notation$2 = -12					; size = 4
_ctxt$ = -8						; size = 4
_cur$ = -4						; size = 4
_payload$ = 8						; size = 4
_data$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlValidateNotationCallback PROC			; COMDAT

; 6689 : 	                    const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6690 :     xmlEntityPtr cur = (xmlEntityPtr) payload;

	mov	eax, DWORD PTR _payload$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 6691 :     xmlValidCtxtPtr ctxt = (xmlValidCtxtPtr) data;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _ctxt$[ebp], ecx

; 6692 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlValidat

; 6693 : 	return;

	jmp	SHORT $LN1@xmlValidat
$LN2@xmlValidat:

; 6694 :     if (cur->etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+48], 3
	jne	SHORT $LN1@xmlValidat

; 6695 : 	xmlChar *notation = cur->content;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _notation$2[ebp], ecx

; 6696 : 
; 6697 : 	if (notation != NULL) {

	cmp	DWORD PTR _notation$2[ebp], 0
	je	SHORT $LN1@xmlValidat

; 6698 : 	    int ret;
; 6699 : 
; 6700 : 	    ret = xmlValidateNotationUse(ctxt, cur->doc, notation);

	mov	edx, DWORD PTR _notation$2[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidateNotationUse
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$1[ebp], eax

; 6701 : 	    if (ret != 1) {

	cmp	DWORD PTR _ret$1[ebp], 1
	je	SHORT $LN1@xmlValidat

; 6702 : 		ctxt->valid = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN1@xmlValidat:

; 6703 : 	    }
; 6704 : 	}
; 6705 :     }
; 6706 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateNotationCallback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateCheckRefCallback
_TEXT	SEGMENT
_memo$ = -20						; size = 8
_ctxt$ = -8						; size = 4
_ref_list$ = -4						; size = 4
_payload$ = 8						; size = 4
_data$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlValidateCheckRefCallback PROC			; COMDAT

; 6573 : xmlValidateCheckRefCallback(void *payload, void *data, const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6574 :     xmlListPtr ref_list = (xmlListPtr) payload;

	mov	eax, DWORD PTR _payload$[ebp]
	mov	DWORD PTR _ref_list$[ebp], eax

; 6575 :     xmlValidCtxtPtr ctxt = (xmlValidCtxtPtr) data;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _ctxt$[ebp], ecx

; 6576 :     xmlValidateMemo memo;
; 6577 : 
; 6578 :     if (ref_list == NULL)

	cmp	DWORD PTR _ref_list$[ebp], 0
	jne	SHORT $LN2@xmlValidat

; 6579 : 	return;

	jmp	SHORT $LN1@xmlValidat
$LN2@xmlValidat:

; 6580 :     memo.ctxt = ctxt;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR _memo$[ebp], edx

; 6581 :     memo.name = name;

	mov	eax, DWORD PTR _name$[ebp]
	mov	DWORD PTR _memo$[ebp+4], eax

; 6582 : 
; 6583 :     xmlListWalk(ref_list, xmlWalkValidateList, &memo);

	lea	ecx, DWORD PTR _memo$[ebp]
	push	ecx
	push	OFFSET _xmlWalkValidateList
	mov	edx, DWORD PTR _ref_list$[ebp]
	push	edx
	call	_xmlListWalk
	add	esp, 12					; 0000000cH
$LN1@xmlValidat:

; 6584 : 
; 6585 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@xmlValidat:
	DD	1
	DD	$LN5@xmlValidat
$LN5@xmlValidat:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN4@xmlValidat
$LN4@xmlValidat:
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	111					; 0000006fH
	DB	0
_xmlValidateCheckRefCallback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlWalkValidateList
_TEXT	SEGMENT
_memo$ = -4						; size = 4
_data$ = 8						; size = 4
_user$ = 12						; size = 4
_xmlWalkValidateList PROC				; COMDAT

; 6559 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6560 : 	xmlValidateMemoPtr memo = (xmlValidateMemoPtr)user;

	mov	eax, DWORD PTR _user$[ebp]
	mov	DWORD PTR _memo$[ebp], eax

; 6561 : 	xmlValidateRef((xmlRefPtr)data, memo->ctxt, memo->name);

	mov	ecx, DWORD PTR _memo$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _memo$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_xmlValidateRef
	add	esp, 12					; 0000000cH

; 6562 : 	return 1;

	mov	eax, 1

; 6563 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlWalkValidateList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateRef
_TEXT	SEGMENT
_save$1 = -37						; size = 1
_cur$2 = -36						; size = 4
_str$3 = -32						; size = 4
_dup$4 = -28						; size = 4
_save$5 = -21						; size = 1
_cur$6 = -20						; size = 4
_str$7 = -16						; size = 4
_dup$8 = -12						; size = 4
_attr$ = -8						; size = 4
_id$ = -4						; size = 4
_ref$ = 8						; size = 4
_ctxt$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlValidateRef PROC					; COMDAT

; 6475 : 	                   const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6476 :     xmlAttrPtr id;
; 6477 :     xmlAttrPtr attr;
; 6478 : 
; 6479 :     if (ref == NULL)

	cmp	DWORD PTR _ref$[ebp], 0
	jne	SHORT $LN14@xmlValidat

; 6480 : 	return;

	jmp	$LN1@xmlValidat
$LN14@xmlValidat:

; 6481 :     if ((ref->attr == NULL) && (ref->name == NULL))

	mov	eax, DWORD PTR _ref$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN15@xmlValidat
	mov	ecx, DWORD PTR _ref$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN15@xmlValidat

; 6482 : 	return;

	jmp	$LN1@xmlValidat
$LN15@xmlValidat:

; 6483 :     attr = ref->attr;

	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _attr$[ebp], eax

; 6484 :     if (attr == NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	jne	$LN16@xmlValidat

; 6485 : 	xmlChar *dup, *str = NULL, *cur, save;

	mov	DWORD PTR _str$7[ebp], 0

; 6486 : 
; 6487 : 	dup = xmlStrdup(name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _dup$8[ebp], eax

; 6488 : 	if (dup == NULL) {

	cmp	DWORD PTR _dup$8[ebp], 0
	jne	SHORT $LN18@xmlValidat

; 6489 : 	    ctxt->valid = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+36], 0

; 6490 : 	    return;

	jmp	$LN1@xmlValidat
$LN18@xmlValidat:

; 6491 : 	}
; 6492 : 	cur = dup;

	mov	eax, DWORD PTR _dup$8[ebp]
	mov	DWORD PTR _cur$6[ebp], eax
$LN2@xmlValidat:

; 6493 : 	while (*cur != 0) {

	mov	ecx, DWORD PTR _cur$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	$LN3@xmlValidat

; 6494 : 	    str = cur;

	mov	eax, DWORD PTR _cur$6[ebp]
	mov	DWORD PTR _str$7[ebp], eax
$LN4@xmlValidat:

; 6495 : 	    while ((*cur != 0) && (!IS_BLANK_CH(*cur))) cur++;

	mov	ecx, DWORD PTR _cur$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN5@xmlValidat
	mov	eax, DWORD PTR _cur$6[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN5@xmlValidat
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN19@xmlValidat
	mov	ecx, DWORD PTR _cur$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN5@xmlValidat
$LN19@xmlValidat:
	mov	eax, DWORD PTR _cur$6[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	je	SHORT $LN5@xmlValidat
	mov	edx, DWORD PTR _cur$6[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$6[ebp], edx
	jmp	SHORT $LN4@xmlValidat
$LN5@xmlValidat:

; 6496 : 	    save = *cur;

	mov	eax, DWORD PTR _cur$6[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _save$5[ebp], cl

; 6497 : 	    *cur = 0;

	mov	edx, DWORD PTR _cur$6[ebp]
	mov	BYTE PTR [edx], 0

; 6498 : 	    id = xmlGetID(ctxt->doc, str);

	mov	eax, DWORD PTR _str$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlGetID
	add	esp, 8
	mov	DWORD PTR _id$[ebp], eax

; 6499 : 	    if (id == NULL) {

	cmp	DWORD PTR _id$[ebp], 0
	jne	SHORT $LN20@xmlValidat

; 6500 : 		xmlErrValidNodeNr(ctxt, NULL, XML_DTD_UNKNOWN_ID,

	mov	eax, DWORD PTR _str$7[ebp]
	push	eax
	mov	ecx, DWORD PTR _ref$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _ref$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	OFFSET ??_C@_0DE@GLBIFDCC@attribute?5?$CFs?5line?5?$CFd?5references@
	push	536					; 00000218H
	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNodeNr
	add	esp, 28					; 0000001cH

; 6501 : 	   "attribute %s line %d references an unknown ID \"%s\"\n",
; 6502 : 		       ref->name, ref->lineno, str);
; 6503 : 		ctxt->valid = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN20@xmlValidat:

; 6504 : 	    }
; 6505 : 	    if (save == 0)

	movzx	ecx, BYTE PTR _save$5[ebp]
	test	ecx, ecx
	jne	SHORT $LN21@xmlValidat

; 6506 : 		break;

	jmp	SHORT $LN3@xmlValidat
$LN21@xmlValidat:

; 6507 : 	    *cur = save;

	mov	edx, DWORD PTR _cur$6[ebp]
	mov	al, BYTE PTR _save$5[ebp]
	mov	BYTE PTR [edx], al
$LN6@xmlValidat:

; 6508 : 	    while (IS_BLANK_CH(*cur)) cur++;

	mov	ecx, DWORD PTR _cur$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN22@xmlValidat
	mov	eax, DWORD PTR _cur$6[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN23@xmlValidat
	mov	edx, DWORD PTR _cur$6[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN22@xmlValidat
$LN23@xmlValidat:
	mov	ecx, DWORD PTR _cur$6[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN7@xmlValidat
$LN22@xmlValidat:
	mov	eax, DWORD PTR _cur$6[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$6[ebp], eax
	jmp	SHORT $LN6@xmlValidat
$LN7@xmlValidat:

; 6509 : 	}

	jmp	$LN2@xmlValidat
$LN3@xmlValidat:

; 6510 : 	xmlFree(dup);

	mov	esi, esp
	mov	ecx, DWORD PTR _dup$8[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	$LN1@xmlValidat
$LN16@xmlValidat:

; 6511 :     } else if (attr->atype == XML_ATTRIBUTE_IDREF) {

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+40], 3
	jne	SHORT $LN24@xmlValidat

; 6512 : 	id = xmlGetID(ctxt->doc, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlGetID
	add	esp, 8
	mov	DWORD PTR _id$[ebp], eax

; 6513 : 	if (id == NULL) {

	cmp	DWORD PTR _id$[ebp], 0
	jne	SHORT $LN26@xmlValidat

; 6514 : 	    xmlErrValidNode(ctxt, attr->parent, XML_DTD_UNKNOWN_ID,

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0DC@HOBCELJH@IDREF?5attribute?5?$CFs?5references?5a@
	push	536					; 00000218H
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6515 : 	   "IDREF attribute %s references an unknown ID \"%s\"\n",
; 6516 : 		   attr->name, name, NULL);
; 6517 : 	    ctxt->valid = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN26@xmlValidat:

; 6518 : 	}

	jmp	$LN1@xmlValidat
$LN24@xmlValidat:

; 6519 :     } else if (attr->atype == XML_ATTRIBUTE_IDREFS) {

	mov	ecx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [ecx+40], 4
	jne	$LN1@xmlValidat

; 6520 : 	xmlChar *dup, *str = NULL, *cur, save;

	mov	DWORD PTR _str$3[ebp], 0

; 6521 : 
; 6522 : 	dup = xmlStrdup(name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _dup$4[ebp], eax

; 6523 : 	if (dup == NULL) {

	cmp	DWORD PTR _dup$4[ebp], 0
	jne	SHORT $LN28@xmlValidat

; 6524 : 	    xmlVErrMemory(ctxt, "IDREFS split");

	push	OFFSET ??_C@_0N@BBOKCKMC@IDREFS?5split@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlVErrMemory
	add	esp, 8

; 6525 : 	    ctxt->valid = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+36], 0

; 6526 : 	    return;

	jmp	$LN1@xmlValidat
$LN28@xmlValidat:

; 6527 : 	}
; 6528 : 	cur = dup;

	mov	edx, DWORD PTR _dup$4[ebp]
	mov	DWORD PTR _cur$2[ebp], edx
$LN8@xmlValidat:

; 6529 : 	while (*cur != 0) {

	mov	eax, DWORD PTR _cur$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN9@xmlValidat

; 6530 : 	    str = cur;

	mov	edx, DWORD PTR _cur$2[ebp]
	mov	DWORD PTR _str$3[ebp], edx
$LN10@xmlValidat:

; 6531 : 	    while ((*cur != 0) && (!IS_BLANK_CH(*cur))) cur++;

	mov	eax, DWORD PTR _cur$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN11@xmlValidat
	mov	edx, DWORD PTR _cur$2[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN11@xmlValidat
	mov	ecx, DWORD PTR _cur$2[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN29@xmlValidat
	mov	eax, DWORD PTR _cur$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN11@xmlValidat
$LN29@xmlValidat:
	mov	edx, DWORD PTR _cur$2[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN11@xmlValidat
	mov	ecx, DWORD PTR _cur$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$2[ebp], ecx
	jmp	SHORT $LN10@xmlValidat
$LN11@xmlValidat:

; 6532 : 	    save = *cur;

	mov	edx, DWORD PTR _cur$2[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _save$1[ebp], al

; 6533 : 	    *cur = 0;

	mov	ecx, DWORD PTR _cur$2[ebp]
	mov	BYTE PTR [ecx], 0

; 6534 : 	    id = xmlGetID(ctxt->doc, str);

	mov	edx, DWORD PTR _str$3[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlGetID
	add	esp, 8
	mov	DWORD PTR _id$[ebp], eax

; 6535 : 	    if (id == NULL) {

	cmp	DWORD PTR _id$[ebp], 0
	jne	SHORT $LN30@xmlValidat

; 6536 : 		xmlErrValidNode(ctxt, attr->parent, XML_DTD_UNKNOWN_ID,

	push	0
	mov	edx, DWORD PTR _str$3[ebp]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0DD@JBMPIAIH@IDREFS?5attribute?5?$CFs?5references?5@
	push	536					; 00000218H
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6537 : 	   "IDREFS attribute %s references an unknown ID \"%s\"\n",
; 6538 : 			     attr->name, str, NULL);
; 6539 : 		ctxt->valid = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+36], 0
$LN30@xmlValidat:

; 6540 : 	    }
; 6541 : 	    if (save == 0)

	movzx	eax, BYTE PTR _save$1[ebp]
	test	eax, eax
	jne	SHORT $LN31@xmlValidat

; 6542 : 		break;

	jmp	SHORT $LN9@xmlValidat
$LN31@xmlValidat:

; 6543 : 	    *cur = save;

	mov	ecx, DWORD PTR _cur$2[ebp]
	mov	dl, BYTE PTR _save$1[ebp]
	mov	BYTE PTR [ecx], dl
$LN12@xmlValidat:

; 6544 : 	    while (IS_BLANK_CH(*cur)) cur++;

	mov	eax, DWORD PTR _cur$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN32@xmlValidat
	mov	edx, DWORD PTR _cur$2[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 9
	jl	SHORT $LN33@xmlValidat
	mov	ecx, DWORD PTR _cur$2[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN32@xmlValidat
$LN33@xmlValidat:
	mov	eax, DWORD PTR _cur$2[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 13					; 0000000dH
	jne	SHORT $LN13@xmlValidat
$LN32@xmlValidat:
	mov	edx, DWORD PTR _cur$2[ebp]
	add	edx, 1
	mov	DWORD PTR _cur$2[ebp], edx
	jmp	SHORT $LN12@xmlValidat
$LN13@xmlValidat:

; 6545 : 	}

	jmp	$LN8@xmlValidat
$LN9@xmlValidat:

; 6546 : 	xmlFree(dup);

	mov	esi, esp
	mov	eax, DWORD PTR _dup$4[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlValidat:

; 6547 :     }
; 6548 : }

	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateRef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidGetElemDecl
_TEXT	SEGMENT
_prefix$ = -8						; size = 4
_elemDecl$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_extsubset$ = 20					; size = 4
_xmlValidGetElemDecl PROC				; COMDAT

; 5691 : 	            xmlNodePtr elem, int *extsubset) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 5692 :     xmlElementPtr elemDecl = NULL;

	mov	DWORD PTR _elemDecl$[ebp], 0

; 5693 :     const xmlChar *prefix = NULL;

	mov	DWORD PTR _prefix$[ebp], 0

; 5694 : 
; 5695 :     if ((ctxt == NULL) || (doc == NULL) ||
; 5696 :         (elem == NULL) || (elem->name == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlValidGe
	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN3@xmlValidGe
	cmp	DWORD PTR _elem$[ebp], 0
	je	SHORT $LN3@xmlValidGe
	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@xmlValidGe
$LN3@xmlValidGe:

; 5697 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlValidGe
$LN2@xmlValidGe:

; 5698 :     if (extsubset != NULL)

	cmp	DWORD PTR _extsubset$[ebp], 0
	je	SHORT $LN4@xmlValidGe

; 5699 : 	*extsubset = 0;

	mov	ecx, DWORD PTR _extsubset$[ebp]
	mov	DWORD PTR [ecx], 0
$LN4@xmlValidGe:

; 5700 : 
; 5701 :     /*
; 5702 :      * Fetch the declaration for the qualified name
; 5703 :      */
; 5704 :     if ((elem->ns != NULL) && (elem->ns->prefix != NULL))

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN5@xmlValidGe
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN5@xmlValidGe

; 5705 : 	prefix = elem->ns->prefix;

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _prefix$[ebp], ecx
$LN5@xmlValidGe:

; 5706 : 
; 5707 :     if (prefix != NULL) {

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN6@xmlValidGe

; 5708 : 	elemDecl = xmlGetDtdQElementDesc(doc->intSubset,

	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdQElementDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _elemDecl$[ebp], eax

; 5709 : 		                         elem->name, prefix);
; 5710 : 	if ((elemDecl == NULL) && (doc->extSubset != NULL)) {

	cmp	DWORD PTR _elemDecl$[ebp], 0
	jne	SHORT $LN6@xmlValidGe
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN6@xmlValidGe

; 5711 : 	    elemDecl = xmlGetDtdQElementDesc(doc->extSubset,

	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdQElementDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _elemDecl$[ebp], eax

; 5712 : 		                             elem->name, prefix);
; 5713 : 	    if ((elemDecl != NULL) && (extsubset != NULL))

	cmp	DWORD PTR _elemDecl$[ebp], 0
	je	SHORT $LN6@xmlValidGe
	cmp	DWORD PTR _extsubset$[ebp], 0
	je	SHORT $LN6@xmlValidGe

; 5714 : 		*extsubset = 1;

	mov	ecx, DWORD PTR _extsubset$[ebp]
	mov	DWORD PTR [ecx], 1
$LN6@xmlValidGe:

; 5715 : 	}
; 5716 :     }
; 5717 : 
; 5718 :     /*
; 5719 :      * Fetch the declaration for the non qualified name
; 5720 :      * This is "non-strict" validation should be done on the
; 5721 :      * full QName but in that case being flexible makes sense.
; 5722 :      */
; 5723 :     if (elemDecl == NULL) {

	cmp	DWORD PTR _elemDecl$[ebp], 0
	jne	SHORT $LN9@xmlValidGe

; 5724 : 	elemDecl = xmlGetDtdElementDesc(doc->intSubset, elem->name);

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _elemDecl$[ebp], eax

; 5725 : 	if ((elemDecl == NULL) && (doc->extSubset != NULL)) {

	cmp	DWORD PTR _elemDecl$[ebp], 0
	jne	SHORT $LN9@xmlValidGe
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN9@xmlValidGe

; 5726 : 	    elemDecl = xmlGetDtdElementDesc(doc->extSubset, elem->name);

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _elemDecl$[ebp], eax

; 5727 : 	    if ((elemDecl != NULL) && (extsubset != NULL))

	cmp	DWORD PTR _elemDecl$[ebp], 0
	je	SHORT $LN9@xmlValidGe
	cmp	DWORD PTR _extsubset$[ebp], 0
	je	SHORT $LN9@xmlValidGe

; 5728 : 		*extsubset = 1;

	mov	edx, DWORD PTR _extsubset$[ebp]
	mov	DWORD PTR [edx], 1
$LN9@xmlValidGe:

; 5729 : 	}
; 5730 :     }
; 5731 :     if (elemDecl == NULL) {

	cmp	DWORD PTR _elemDecl$[ebp], 0
	jne	SHORT $LN12@xmlValidGe

; 5732 : 	xmlErrValidNode(ctxt, elem,

	push	0
	push	0
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0BP@CMBGNCIM@No?5declaration?5for?5element?5?$CFs?6@
	push	534					; 00000216H
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN12@xmlValidGe:

; 5733 : 			XML_DTD_UNKNOWN_ELEM,
; 5734 : 	       "No declaration for element %s\n",
; 5735 : 	       elem->name, NULL, NULL);
; 5736 :     }
; 5737 :     return(elemDecl);

	mov	eax, DWORD PTR _elemDecl$[ebp]
$LN1@xmlValidGe:

; 5738 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidGetElemDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateCheckMixed
_TEXT	SEGMENT
_plen$ = -12						; size = 4
_name$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_cont$ = 12						; size = 4
_qname$ = 16						; size = 4
_xmlValidateCheckMixed PROC				; COMDAT

; 5623 : 	              xmlElementContentPtr cont, const xmlChar *qname) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 5624 :     const xmlChar *name;
; 5625 :     int plen;
; 5626 :     name = xmlSplitQName3(qname, &plen);

	lea	eax, DWORD PTR _plen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _qname$[ebp]
	push	ecx
	call	_xmlSplitQName3
	add	esp, 8
	mov	DWORD PTR _name$[ebp], eax

; 5627 : 
; 5628 :     if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	$LN4@xmlValidat
$LN2@xmlValidat:

; 5629 : 	while (cont != NULL) {

	cmp	DWORD PTR _cont$[ebp], 0
	je	$LN3@xmlValidat

; 5630 : 	    if (cont->type == XML_ELEMENT_CONTENT_ELEMENT) {

	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx], 2
	jne	SHORT $LN8@xmlValidat

; 5631 : 		if ((cont->prefix == NULL) && (xmlStrEqual(cont->name, qname)))

	mov	eax, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN10@xmlValidat
	mov	ecx, DWORD PTR _qname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cont$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@xmlValidat

; 5632 : 		    return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN10@xmlValidat:

; 5633 : 	    } else if ((cont->type == XML_ELEMENT_CONTENT_OR) &&

	jmp	$LN9@xmlValidat
$LN8@xmlValidat:

; 5634 : 	       (cont->c1 != NULL) &&

	mov	ecx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [ecx], 4
	jne	SHORT $LN11@xmlValidat
	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN11@xmlValidat
	mov	eax, DWORD PTR _cont$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], 2
	jne	SHORT $LN11@xmlValidat

; 5635 : 	       (cont->c1->type == XML_ELEMENT_CONTENT_ELEMENT)){
; 5636 : 		if ((cont->c1->prefix == NULL) &&

	mov	edx, DWORD PTR _cont$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN13@xmlValidat
	mov	ecx, DWORD PTR _qname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cont$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@xmlValidat

; 5637 : 		    (xmlStrEqual(cont->c1->name, qname)))
; 5638 : 		    return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN13@xmlValidat:

; 5639 : 	    } else if ((cont->type != XML_ELEMENT_CONTENT_OR) ||

	jmp	SHORT $LN9@xmlValidat
$LN11@xmlValidat:

; 5640 : 		(cont->c1 == NULL) ||

	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx], 4
	jne	SHORT $LN15@xmlValidat
	mov	eax, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN15@xmlValidat
	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN9@xmlValidat
$LN15@xmlValidat:

; 5641 : 		(cont->c1->type != XML_ELEMENT_CONTENT_PCDATA)){
; 5642 : 		xmlErrValid(NULL, XML_DTD_MIXED_CORRUPT,

	push	0
	push	OFFSET ??_C@_0CC@LMJFIFCG@Internal?3?5MIXED?5struct?5corrupte@
	push	519					; 00000207H
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 5643 : 			"Internal: MIXED struct corrupted\n",
; 5644 : 			NULL);
; 5645 : 		break;

	jmp	SHORT $LN3@xmlValidat
$LN9@xmlValidat:

; 5646 : 	    }
; 5647 : 	    cont = cont->c2;

	mov	eax, DWORD PTR _cont$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _cont$[ebp], ecx

; 5648 : 	}

	jmp	$LN2@xmlValidat
$LN3@xmlValidat:

; 5649 :     } else {

	jmp	$LN7@xmlValidat
$LN4@xmlValidat:

; 5650 : 	while (cont != NULL) {

	cmp	DWORD PTR _cont$[ebp], 0
	je	$LN7@xmlValidat

; 5651 : 	    if (cont->type == XML_ELEMENT_CONTENT_ELEMENT) {

	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx], 2
	jne	SHORT $LN16@xmlValidat

; 5652 : 		if ((cont->prefix != NULL) &&
; 5653 : 		    (xmlStrncmp(cont->prefix, qname, plen) == 0) &&

	mov	eax, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN18@xmlValidat
	mov	ecx, DWORD PTR _plen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _qname$[ebp]
	push	edx
	mov	eax, DWORD PTR _cont$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlStrncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN18@xmlValidat
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _cont$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@xmlValidat

; 5654 : 		    (xmlStrEqual(cont->name, name)))
; 5655 : 		    return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN18@xmlValidat:

; 5656 : 	    } else if ((cont->type == XML_ELEMENT_CONTENT_OR) &&

	jmp	$LN17@xmlValidat
$LN16@xmlValidat:

; 5657 : 	       (cont->c1 != NULL) &&

	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx], 4
	jne	SHORT $LN19@xmlValidat
	mov	eax, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN19@xmlValidat
	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 2
	jne	SHORT $LN19@xmlValidat

; 5658 : 	       (cont->c1->type == XML_ELEMENT_CONTENT_ELEMENT)){
; 5659 : 		if ((cont->c1->prefix != NULL) &&
; 5660 : 		    (xmlStrncmp(cont->c1->prefix, qname, plen) == 0) &&

	mov	eax, DWORD PTR _cont$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN21@xmlValidat
	mov	edx, DWORD PTR _plen$[ebp]
	push	edx
	mov	eax, DWORD PTR _qname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrncmp
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN21@xmlValidat
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cont$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@xmlValidat

; 5661 : 		    (xmlStrEqual(cont->c1->name, name)))
; 5662 : 		    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlValidat
$LN21@xmlValidat:

; 5663 : 	    } else if ((cont->type != XML_ELEMENT_CONTENT_OR) ||

	jmp	SHORT $LN17@xmlValidat
$LN19@xmlValidat:

; 5664 : 		(cont->c1 == NULL) ||

	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx], 4
	jne	SHORT $LN23@xmlValidat
	mov	eax, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN23@xmlValidat
	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN17@xmlValidat
$LN23@xmlValidat:

; 5665 : 		(cont->c1->type != XML_ELEMENT_CONTENT_PCDATA)){
; 5666 : 		xmlErrValid(ctxt, XML_DTD_MIXED_CORRUPT,

	push	0
	push	OFFSET ??_C@_0CC@LMJFIFCG@Internal?3?5MIXED?5struct?5corrupte@
	push	519					; 00000207H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 5667 : 			"Internal: MIXED struct corrupted\n",
; 5668 : 			NULL);
; 5669 : 		break;

	jmp	SHORT $LN7@xmlValidat
$LN17@xmlValidat:

; 5670 : 	    }
; 5671 : 	    cont = cont->c2;

	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _cont$[ebp], edx

; 5672 : 	}

	jmp	$LN4@xmlValidat
$LN7@xmlValidat:

; 5673 :     }
; 5674 :     return(0);

	xor	eax, eax
$LN1@xmlValidat:

; 5675 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN27@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@xmlValidat:
	DD	1
	DD	$LN26@xmlValidat
$LN26@xmlValidat:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN25@xmlValidat
$LN25@xmlValidat:
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_xmlValidateCheckMixed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateOneCdataElement
_TEXT	SEGMENT
tv72 = -16						; size = 4
_child$ = -12						; size = 4
_cur$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_xmlValidateOneCdataElement PROC			; COMDAT

; 5556 :                            xmlNodePtr elem) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 5557 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 5558 :     xmlNodePtr cur, child;
; 5559 : 
; 5560 :     if ((ctxt == NULL) || (doc == NULL) || (elem == NULL) ||

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN9@xmlValidat
	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN9@xmlValidat
	cmp	DWORD PTR _elem$[ebp], 0
	je	SHORT $LN9@xmlValidat
	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN8@xmlValidat
$LN9@xmlValidat:

; 5561 :         (elem->type != XML_ELEMENT_NODE))
; 5562 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN8@xmlValidat:

; 5563 : 
; 5564 :     child = elem->children;

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _child$[ebp], edx

; 5565 : 
; 5566 :     cur = child;

	mov	eax, DWORD PTR _child$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@xmlValidat:

; 5567 :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$done$19

; 5568 : 	switch (cur->type) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv72[ebp], edx
	mov	eax, DWORD PTR tv72[ebp]
	sub	eax, 3
	mov	DWORD PTR tv72[ebp], eax
	cmp	DWORD PTR tv72[ebp], 5
	ja	SHORT $LN13@xmlValidat
	mov	ecx, DWORD PTR tv72[ebp]
	jmp	DWORD PTR $LN18@xmlValidat[ecx*4]
$LN10@xmlValidat:

; 5569 : 	    case XML_ENTITY_REF_NODE:
; 5570 : 		/*
; 5571 : 		 * Push the current node to be able to roll back
; 5572 : 		 * and process within the entity
; 5573 : 		 */
; 5574 : 		if ((cur->children != NULL) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN11@xmlValidat
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN11@xmlValidat

; 5575 : 		    (cur->children->children != NULL)) {
; 5576 : 		    nodeVPush(ctxt, cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_nodeVPush
	add	esp, 8

; 5577 : 		    cur = cur->children->children;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax

; 5578 : 		    continue;

	jmp	SHORT $LN2@xmlValidat
$LN11@xmlValidat:

; 5579 : 		}
; 5580 : 		break;

	jmp	SHORT $LN4@xmlValidat
$LN12@xmlValidat:

; 5581 : 	    case XML_COMMENT_NODE:
; 5582 : 	    case XML_PI_NODE:
; 5583 : 	    case XML_TEXT_NODE:
; 5584 : 	    case XML_CDATA_SECTION_NODE:
; 5585 : 		break;

	jmp	SHORT $LN4@xmlValidat
$LN13@xmlValidat:

; 5586 : 	    default:
; 5587 : 		ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5588 : 		goto done;

	jmp	SHORT $done$19
$LN4@xmlValidat:

; 5589 : 	}
; 5590 : 	/*
; 5591 : 	 * Switch to next element
; 5592 : 	 */
; 5593 : 	cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx
$LN6@xmlValidat:

; 5594 : 	while (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN7@xmlValidat

; 5595 : 	    cur = nodeVPop(ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_nodeVPop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 5596 : 	    if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN14@xmlValidat

; 5597 : 		break;

	jmp	SHORT $LN7@xmlValidat
$LN14@xmlValidat:

; 5598 : 	    cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx

; 5599 : 	}

	jmp	SHORT $LN6@xmlValidat
$LN7@xmlValidat:

; 5600 :     }

	jmp	$LN2@xmlValidat
$done$19:

; 5601 : done:
; 5602 :     ctxt->nodeMax = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+20], 0

; 5603 :     ctxt->nodeNr = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 5604 :     if (ctxt->nodeTab != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN15@xmlValidat

; 5605 : 	xmlFree(ctxt->nodeTab);

	mov	esi, esp
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5606 : 	ctxt->nodeTab = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+24], 0
$LN15@xmlValidat:

; 5607 :     }
; 5608 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 5609 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN18@xmlValidat:
	DD	$LN12@xmlValidat
	DD	$LN12@xmlValidat
	DD	$LN10@xmlValidat
	DD	$LN13@xmlValidat
	DD	$LN12@xmlValidat
	DD	$LN12@xmlValidat
_xmlValidateOneCdataElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateElementContent
_TEXT	SEGMENT
tv91 = -10104						; size = 4
_list$1 = -10096					; size = 5000
_expr$2 = -5088						; size = 5000
_fullname$3 = -84					; size = 4
_fn$4 = -76						; size = 50
_exec$5 = -20						; size = 4
_name$ = -16						; size = 4
_cont$ = -12						; size = 4
_cur$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_child$ = 12						; size = 4
_elemDecl$ = 16						; size = 4
_warn$ = 20						; size = 4
_parent$ = 24						; size = 4
_xmlValidateElementContent PROC				; COMDAT

; 5270 :        xmlElementPtr elemDecl, int warn, xmlNodePtr parent) {

	push	ebp
	mov	ebp, esp
	mov	eax, 10104				; 00002778H
	call	__chkstk
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-10104]
	mov	ecx, 2526				; 000009deH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 5271 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 5272 : #ifndef  LIBXML_REGEXP_ENABLED
; 5273 :     xmlNodePtr repl = NULL, last = NULL, tmp;
; 5274 : #endif
; 5275 :     xmlNodePtr cur;
; 5276 :     xmlElementContentPtr cont;
; 5277 :     const xmlChar *name;
; 5278 : 
; 5279 :     if ((elemDecl == NULL) || (parent == NULL) || (ctxt == NULL))

	cmp	DWORD PTR _elemDecl$[ebp], 0
	je	SHORT $LN9@xmlValidat
	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN9@xmlValidat
	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN8@xmlValidat
$LN9@xmlValidat:

; 5280 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlValidat
$LN8@xmlValidat:

; 5281 :     cont = elemDecl->content;

	mov	eax, DWORD PTR _elemDecl$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _cont$[ebp], ecx

; 5282 :     name = elemDecl->name;

	mov	edx, DWORD PTR _elemDecl$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _name$[ebp], eax

; 5283 : 
; 5284 : #ifdef LIBXML_REGEXP_ENABLED
; 5285 :     /* Build the regexp associated to the content model */
; 5286 :     if (elemDecl->contModel == NULL)

	mov	ecx, DWORD PTR _elemDecl$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	jne	SHORT $LN10@xmlValidat

; 5287 : 	ret = xmlValidBuildContentModel(ctxt, elemDecl);

	mov	edx, DWORD PTR _elemDecl$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlValidBuildContentModel
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
$LN10@xmlValidat:

; 5288 :     if (elemDecl->contModel == NULL) {

	mov	ecx, DWORD PTR _elemDecl$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	jne	SHORT $LN11@xmlValidat

; 5289 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlValidat

; 5290 :     } else {

	jmp	$LN12@xmlValidat
$LN11@xmlValidat:

; 5291 : 	xmlRegExecCtxtPtr exec;
; 5292 : 
; 5293 : 	if (!xmlRegexpIsDeterminist(elemDecl->contModel)) {

	mov	edx, DWORD PTR _elemDecl$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_xmlRegexpIsDeterminist
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN13@xmlValidat

; 5294 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlValidat
$LN13@xmlValidat:

; 5295 : 	}
; 5296 : 	ctxt->nodeMax = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 5297 : 	ctxt->nodeNr = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+16], 0

; 5298 : 	ctxt->nodeTab = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+24], 0

; 5299 : 	exec = xmlRegNewExecCtxt(elemDecl->contModel, NULL, NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _elemDecl$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	_xmlRegNewExecCtxt
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _exec$5[ebp], eax

; 5300 : 	if (exec != NULL) {

	cmp	DWORD PTR _exec$5[ebp], 0
	je	$LN12@xmlValidat

; 5301 : 	    cur = child;

	mov	eax, DWORD PTR _child$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@xmlValidat:

; 5302 : 	    while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN3@xmlValidat

; 5303 : 		switch (cur->type) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv91[ebp], edx
	mov	eax, DWORD PTR tv91[ebp]
	sub	eax, 1
	mov	DWORD PTR tv91[ebp], eax
	cmp	DWORD PTR tv91[ebp], 4
	ja	$LN4@xmlValidat
	mov	ecx, DWORD PTR tv91[ebp]
	jmp	DWORD PTR $LN43@xmlValidat[ecx*4]
$LN15@xmlValidat:

; 5304 : 		    case XML_ENTITY_REF_NODE:
; 5305 : 			/*
; 5306 : 			 * Push the current node to be able to roll back
; 5307 : 			 * and process within the entity
; 5308 : 			 */
; 5309 : 			if ((cur->children != NULL) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN16@xmlValidat
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN16@xmlValidat

; 5310 : 			    (cur->children->children != NULL)) {
; 5311 : 			    nodeVPush(ctxt, cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_nodeVPush
	add	esp, 8

; 5312 : 			    cur = cur->children->children;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax

; 5313 : 			    continue;

	jmp	SHORT $LN2@xmlValidat
$LN16@xmlValidat:

; 5314 : 			}
; 5315 : 			break;

	jmp	$LN4@xmlValidat
$LN17@xmlValidat:

; 5316 : 		    case XML_TEXT_NODE:
; 5317 : 			if (xmlIsBlankNode(cur))

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_xmlIsBlankNode
	add	esp, 4
	test	eax, eax
	je	SHORT $LN18@xmlValidat

; 5318 : 			    break;

	jmp	$LN4@xmlValidat
$LN18@xmlValidat:

; 5319 : 			ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5320 : 			goto fail;

	jmp	$fail$44
$LN19@xmlValidat:

; 5321 : 		    case XML_CDATA_SECTION_NODE:
; 5322 : 			/* TODO */
; 5323 : 			ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5324 : 			goto fail;

	jmp	$fail$44
$LN20@xmlValidat:

; 5325 : 		    case XML_ELEMENT_NODE:
; 5326 : 			if ((cur->ns != NULL) && (cur->ns->prefix != NULL)) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	$LN21@xmlValidat
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN21@xmlValidat

; 5327 : 			    xmlChar fn[50];
; 5328 : 			    xmlChar *fullname;
; 5329 : 
; 5330 : 			    fullname = xmlBuildQName(cur->name,

	push	50					; 00000032H
	lea	edx, DWORD PTR _fn$4[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$3[ebp], eax

; 5331 : 				                     cur->ns->prefix, fn, 50);
; 5332 : 			    if (fullname == NULL) {

	cmp	DWORD PTR _fullname$3[ebp], 0
	jne	SHORT $LN23@xmlValidat

; 5333 : 				ret = -1;

	mov	DWORD PTR _ret$[ebp], -1

; 5334 : 				goto fail;

	jmp	$fail$44
$LN23@xmlValidat:

; 5335 : 			    }
; 5336 :                             ret = xmlRegExecPushString(exec, fullname, NULL);

	push	0
	mov	edx, DWORD PTR _fullname$3[ebp]
	push	edx
	mov	eax, DWORD PTR _exec$5[ebp]
	push	eax
	call	_xmlRegExecPushString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 5337 : 			    if ((fullname != fn) && (fullname != cur->name))

	lea	ecx, DWORD PTR _fn$4[ebp]
	cmp	DWORD PTR _fullname$3[ebp], ecx
	je	SHORT $LN24@xmlValidat
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR _fullname$3[ebp]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN24@xmlValidat

; 5338 : 				xmlFree(fullname);

	mov	esi, esp
	mov	ecx, DWORD PTR _fullname$3[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@xmlValidat:

; 5339 : 			} else {

	jmp	SHORT $LN4@xmlValidat
$LN21@xmlValidat:

; 5340 : 			    ret = xmlRegExecPushString(exec, cur->name, NULL);

	push	0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _exec$5[ebp]
	push	ecx
	call	_xmlRegExecPushString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN4@xmlValidat:

; 5341 : 			}
; 5342 : 			break;
; 5343 : 		    default:
; 5344 : 			break;
; 5345 : 		}
; 5346 : 		/*
; 5347 : 		 * Switch to next element
; 5348 : 		 */
; 5349 : 		cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
$LN6@xmlValidat:

; 5350 : 		while (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN7@xmlValidat

; 5351 : 		    cur = nodeVPop(ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_nodeVPop
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 5352 : 		    if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN26@xmlValidat

; 5353 : 			break;

	jmp	SHORT $LN7@xmlValidat
$LN26@xmlValidat:

; 5354 : 		    cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax

; 5355 : 		}

	jmp	SHORT $LN6@xmlValidat
$LN7@xmlValidat:

; 5356 : 	    }

	jmp	$LN2@xmlValidat
$LN3@xmlValidat:

; 5357 : 	    ret = xmlRegExecPushString(exec, NULL, NULL);

	push	0
	push	0
	mov	ecx, DWORD PTR _exec$5[ebp]
	push	ecx
	call	_xmlRegExecPushString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$fail$44:

; 5358 : fail:
; 5359 : 	    xmlRegFreeExecCtxt(exec);

	mov	edx, DWORD PTR _exec$5[ebp]
	push	edx
	call	_xmlRegFreeExecCtxt
	add	esp, 4
$LN12@xmlValidat:

; 5360 : 	}
; 5361 :     }
; 5362 : #else  /* LIBXML_REGEXP_ENABLED */
; 5363 :     /*
; 5364 :      * Allocate the stack
; 5365 :      */
; 5366 :     ctxt->vstateMax = 8;
; 5367 :     ctxt->vstateTab = (xmlValidState *) xmlMalloc(
; 5368 : 		 ctxt->vstateMax * sizeof(ctxt->vstateTab[0]));
; 5369 :     if (ctxt->vstateTab == NULL) {
; 5370 : 	xmlVErrMemory(ctxt, "malloc failed");
; 5371 : 	return(-1);
; 5372 :     }
; 5373 :     /*
; 5374 :      * The first entry in the stack is reserved to the current state
; 5375 :      */
; 5376 :     ctxt->nodeMax = 0;
; 5377 :     ctxt->nodeNr = 0;
; 5378 :     ctxt->nodeTab = NULL;
; 5379 :     ctxt->vstate = &ctxt->vstateTab[0];
; 5380 :     ctxt->vstateNr = 1;
; 5381 :     CONT = cont;
; 5382 :     NODE = child;
; 5383 :     DEPTH = 0;
; 5384 :     OCCURS = 0;
; 5385 :     STATE = 0;
; 5386 :     ret = xmlValidateElementType(ctxt);
; 5387 :     if ((ret == -3) && (warn)) {
; 5388 : 	xmlErrValidWarning(ctxt, child, XML_DTD_CONTENT_NOT_DETERMINIST,
; 5389 : 	       "Content model for Element %s is ambiguous\n",
; 5390 : 	                   name, NULL, NULL);
; 5391 :     } else if (ret == -2) {
; 5392 : 	/*
; 5393 : 	 * An entities reference appeared at this level.
; 5394 : 	 * Buid a minimal representation of this node content
; 5395 : 	 * sufficient to run the validation process on it
; 5396 : 	 */
; 5397 : 	DEBUG_VALID_MSG("Found an entity reference, linearizing");
; 5398 : 	cur = child;
; 5399 : 	while (cur != NULL) {
; 5400 : 	    switch (cur->type) {
; 5401 : 		case XML_ENTITY_REF_NODE:
; 5402 : 		    /*
; 5403 : 		     * Push the current node to be able to roll back
; 5404 : 		     * and process within the entity
; 5405 : 		     */
; 5406 : 		    if ((cur->children != NULL) &&
; 5407 : 			(cur->children->children != NULL)) {
; 5408 : 			nodeVPush(ctxt, cur);
; 5409 : 			cur = cur->children->children;
; 5410 : 			continue;
; 5411 : 		    }
; 5412 : 		    break;
; 5413 : 		case XML_TEXT_NODE:
; 5414 : 		    if (xmlIsBlankNode(cur))
; 5415 : 			break;
; 5416 : 		    /* no break on purpose */
; 5417 : 		case XML_CDATA_SECTION_NODE:
; 5418 : 		    /* no break on purpose */
; 5419 : 		case XML_ELEMENT_NODE:
; 5420 : 		    /*
; 5421 : 		     * Allocate a new node and minimally fills in
; 5422 : 		     * what's required
; 5423 : 		     */
; 5424 : 		    tmp = (xmlNodePtr) xmlMalloc(sizeof(xmlNode));
; 5425 : 		    if (tmp == NULL) {
; 5426 : 			xmlVErrMemory(ctxt, "malloc failed");
; 5427 : 			xmlFreeNodeList(repl);
; 5428 : 			ret = -1;
; 5429 : 			goto done;
; 5430 : 		    }
; 5431 : 		    tmp->type = cur->type;
; 5432 : 		    tmp->name = cur->name;
; 5433 : 		    tmp->ns = cur->ns;
; 5434 : 		    tmp->next = NULL;
; 5435 : 		    tmp->content = NULL;
; 5436 : 		    if (repl == NULL)
; 5437 : 			repl = last = tmp;
; 5438 : 		    else {
; 5439 : 			last->next = tmp;
; 5440 : 			last = tmp;
; 5441 : 		    }
; 5442 : 		    if (cur->type == XML_CDATA_SECTION_NODE) {
; 5443 : 			/*
; 5444 : 			 * E59 spaces in CDATA does not match the
; 5445 : 			 * nonterminal S
; 5446 : 			 */
; 5447 : 			tmp->content = xmlStrdup(BAD_CAST "CDATA");
; 5448 : 		    }
; 5449 : 		    break;
; 5450 : 		default:
; 5451 : 		    break;
; 5452 : 	    }
; 5453 : 	    /*
; 5454 : 	     * Switch to next element
; 5455 : 	     */
; 5456 : 	    cur = cur->next;
; 5457 : 	    while (cur == NULL) {
; 5458 : 		cur = nodeVPop(ctxt);
; 5459 : 		if (cur == NULL)
; 5460 : 		    break;
; 5461 : 		cur = cur->next;
; 5462 : 	    }
; 5463 : 	}
; 5464 : 
; 5465 : 	/*
; 5466 : 	 * Relaunch the validation
; 5467 : 	 */
; 5468 : 	ctxt->vstate = &ctxt->vstateTab[0];
; 5469 : 	ctxt->vstateNr = 1;
; 5470 : 	CONT = cont;
; 5471 : 	NODE = repl;
; 5472 : 	DEPTH = 0;
; 5473 : 	OCCURS = 0;
; 5474 : 	STATE = 0;
; 5475 : 	ret = xmlValidateElementType(ctxt);
; 5476 :     }
; 5477 : #endif /* LIBXML_REGEXP_ENABLED */
; 5478 :     if ((warn) && ((ret != 1) && (ret != -3))) {

	cmp	DWORD PTR _warn$[ebp], 0
	je	$LN27@xmlValidat
	cmp	DWORD PTR _ret$[ebp], 1
	je	$LN27@xmlValidat
	cmp	DWORD PTR _ret$[ebp], -3		; fffffffdH
	je	$LN27@xmlValidat

; 5479 : 	if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	$LN28@xmlValidat

; 5480 : 	    char expr[5000];
; 5481 : 	    char list[5000];
; 5482 : 
; 5483 : 	    expr[0] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _expr$2[ebp+ecx], 0

; 5484 : 	    xmlSnprintfElementContent(&expr[0], 5000, cont, 1);

	push	1
	mov	edx, DWORD PTR _cont$[ebp]
	push	edx
	push	5000					; 00001388H
	mov	eax, 1
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _expr$2[ebp+ecx]
	push	edx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H

; 5485 : 	    list[0] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	BYTE PTR _list$1[ebp+ecx], 0

; 5486 : #ifndef LIBXML_REGEXP_ENABLED
; 5487 : 	    if (repl != NULL)
; 5488 : 		xmlSnprintfElements(&list[0], 5000, repl, 1);
; 5489 : 	    else
; 5490 : #endif /* LIBXML_REGEXP_ENABLED */
; 5491 : 		xmlSnprintfElements(&list[0], 5000, child, 1);

	push	1
	mov	edx, DWORD PTR _child$[ebp]
	push	edx
	push	5000					; 00001388H
	mov	eax, 1
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _list$1[ebp+ecx]
	push	edx
	call	_xmlSnprintfElements
	add	esp, 16					; 00000010H

; 5492 : 
; 5493 : 	    if (name != NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN30@xmlValidat

; 5494 : 		xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,

	lea	eax, DWORD PTR _list$1[ebp]
	push	eax
	lea	ecx, DWORD PTR _expr$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0EC@IAKGOMPC@Element?5?$CFs?5content?5does?5not?5fol@
	push	504					; 000001f8H
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 5495 : 	   "Element %s content does not follow the DTD, expecting %s, got %s\n",
; 5496 : 		       name, BAD_CAST expr, BAD_CAST list);
; 5497 : 	    } else {

	jmp	SHORT $LN31@xmlValidat
$LN30@xmlValidat:

; 5498 : 		xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,

	push	0
	lea	edx, DWORD PTR _list$1[ebp]
	push	edx
	lea	eax, DWORD PTR _expr$2[ebp]
	push	eax
	push	OFFSET ??_C@_0DP@CBELDNAH@Element?5content?5does?5not?5follow@
	push	504					; 000001f8H
	mov	ecx, DWORD PTR _parent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN31@xmlValidat:

; 5499 : 	   "Element content does not follow the DTD, expecting %s, got %s\n",
; 5500 : 		       BAD_CAST expr, BAD_CAST list, NULL);
; 5501 : 	    }
; 5502 : 	} else {

	jmp	SHORT $LN29@xmlValidat
$LN28@xmlValidat:

; 5503 : 	    if (name != NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN32@xmlValidat

; 5504 : 		xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,

	push	0
	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CM@BLHDJNNL@Element?5?$CFs?5content?5does?5not?5fol@
	push	504					; 000001f8H
	mov	ecx, DWORD PTR _parent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 5505 : 		       "Element %s content does not follow the DTD\n",
; 5506 : 		       name, NULL, NULL);
; 5507 : 	    } else {

	jmp	SHORT $LN29@xmlValidat
$LN32@xmlValidat:

; 5508 : 		xmlErrValidNode(ctxt, parent, XML_DTD_CONTENT_MODEL,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0CJ@JFPHFAJJ@Element?5content?5does?5not?5follow@
	push	504					; 000001f8H
	mov	eax, DWORD PTR _parent$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN29@xmlValidat:

; 5509 : 		       "Element content does not follow the DTD\n",
; 5510 : 		                NULL, NULL, NULL);
; 5511 : 	    }
; 5512 : 	}
; 5513 : 	ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN27@xmlValidat:

; 5514 :     }
; 5515 :     if (ret == -3)

	cmp	DWORD PTR _ret$[ebp], -3		; fffffffdH
	jne	SHORT $LN34@xmlValidat

; 5516 : 	ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
$LN34@xmlValidat:

; 5517 : 
; 5518 : #ifndef  LIBXML_REGEXP_ENABLED
; 5519 : done:
; 5520 :     /*
; 5521 :      * Deallocate the copy if done, and free up the validation stack
; 5522 :      */
; 5523 :     while (repl != NULL) {
; 5524 : 	tmp = repl->next;
; 5525 : 	xmlFree(repl);
; 5526 : 	repl = tmp;
; 5527 :     }
; 5528 :     ctxt->vstateMax = 0;
; 5529 :     if (ctxt->vstateTab != NULL) {
; 5530 : 	xmlFree(ctxt->vstateTab);
; 5531 : 	ctxt->vstateTab = NULL;
; 5532 :     }
; 5533 : #endif
; 5534 :     ctxt->nodeMax = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+20], 0

; 5535 :     ctxt->nodeNr = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+16], 0

; 5536 :     if (ctxt->nodeTab != NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN35@xmlValidat

; 5537 : 	xmlFree(ctxt->nodeTab);

	mov	esi, esp
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5538 : 	ctxt->nodeTab = NULL;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+24], 0
$LN35@xmlValidat:

; 5539 :     }
; 5540 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 5541 : 
; 5542 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN42@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 10104				; 00002778H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN42@xmlValidat:
	DD	3
	DD	$LN41@xmlValidat
$LN41@xmlValidat:
	DD	-76					; ffffffb4H
	DD	50					; 00000032H
	DD	$LN38@xmlValidat
	DD	-5088					; ffffec20H
	DD	5000					; 00001388H
	DD	$LN39@xmlValidat
	DD	-10096					; ffffd890H
	DD	5000					; 00001388H
	DD	$LN40@xmlValidat
$LN40@xmlValidat:
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN39@xmlValidat:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	0
$LN38@xmlValidat:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
	npad	3
$LN43@xmlValidat:
	DD	$LN20@xmlValidat
	DD	$LN4@xmlValidat
	DD	$LN17@xmlValidat
	DD	$LN19@xmlValidat
	DD	$LN15@xmlValidat
_xmlValidateElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlSnprintfElements
_TEXT	SEGMENT
tv448 = -169						; size = 1
tv445 = -168						; size = 4
tv435 = -161						; size = 1
tv432 = -160						; size = 4
tv423 = -153						; size = 1
tv420 = -152						; size = 4
tv412 = -145						; size = 1
tv409 = -144						; size = 4
tv398 = -137						; size = 1
tv395 = -136						; size = 4
tv385 = -129						; size = 1
tv382 = -128						; size = 4
tv365 = -121						; size = 1
tv362 = -120						; size = 4
tv359 = -116						; size = 4
tv358 = -112						; size = 4
tv353 = -105						; size = 1
tv350 = -104						; size = 4
tv348 = -100						; size = 4
tv338 = -93						; size = 1
tv335 = -92						; size = 4
tv321 = -85						; size = 1
tv318 = -84						; size = 4
tv302 = -77						; size = 1
tv299 = -76						; size = 4
tv296 = -72						; size = 4
tv295 = -68						; size = 4
tv290 = -61						; size = 1
tv287 = -60						; size = 4
tv285 = -56						; size = 4
tv275 = -49						; size = 1
tv272 = -48						; size = 4
tv88 = -44						; size = 4
tv249 = -37						; size = 1
tv246 = -36						; size = 4
tv73 = -32						; size = 4
tv236 = -25						; size = 1
tv233 = -24						; size = 4
tv230 = -20						; size = 4
tv222 = -13						; size = 1
tv219 = -12						; size = 4
_len$ = -8						; size = 4
_cur$ = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_node$ = 16						; size = 4
_glob$ = 20						; size = 4
_xmlSnprintfElements PROC				; COMDAT

; 5181 : xmlSnprintfElements(char *buf, int size, xmlNodePtr node, int glob) {

	push	ebp
	mov	ebp, esp
	sub	esp, 172				; 000000acH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 43					; 0000002bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 5182 :     xmlNodePtr cur;
; 5183 :     int len;
; 5184 : 
; 5185 :     if (node == NULL) return;

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN6@xmlSnprint
	jmp	$LN1@xmlSnprint
$LN6@xmlSnprint:

; 5186 :     if (glob) strcat(buf, "(");

	cmp	DWORD PTR _glob$[ebp], 0
	je	SHORT $LN7@xmlSnprint
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv219[ebp], eax
$LL26@xmlSnprint:
	mov	ecx, DWORD PTR tv219[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv222[ebp], dl
	add	DWORD PTR tv219[ebp], 1
	cmp	BYTE PTR tv222[ebp], 0
	jne	SHORT $LL26@xmlSnprint
	mov	edi, DWORD PTR tv219[ebp]
	mov	ax, WORD PTR ??_C@_01ODHLEDKK@?$CI@
	mov	WORD PTR [edi], ax
$LN7@xmlSnprint:

; 5187 :     cur = node;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@xmlSnprint:

; 5188 :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN3@xmlSnprint

; 5189 : 	len = strlen(buf);

	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv230[ebp], edx
	mov	eax, DWORD PTR tv230[ebp]
	add	eax, 1
	mov	DWORD PTR tv233[ebp], eax
$LL27@xmlSnprint:
	mov	ecx, DWORD PTR tv230[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv236[ebp], dl
	add	DWORD PTR tv230[ebp], 1
	cmp	BYTE PTR tv236[ebp], 0
	jne	SHORT $LL27@xmlSnprint
	mov	eax, DWORD PTR tv230[ebp]
	sub	eax, DWORD PTR tv233[ebp]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR _len$[ebp], ecx

; 5190 : 	if (size - len < 50) {

	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR _len$[ebp]
	cmp	edx, 50					; 00000032H
	jge	SHORT $LN8@xmlSnprint

; 5191 : 	    if ((size - len > 4) && (buf[len - 1] != '.'))

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _len$[ebp]
	cmp	eax, 4
	jle	SHORT $LN9@xmlSnprint
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	movsx	edx, BYTE PTR [ecx-1]
	cmp	edx, 46					; 0000002eH
	je	SHORT $LN9@xmlSnprint

; 5192 : 		strcat(buf, " ...");

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv246[ebp], eax
$LL28@xmlSnprint:
	mov	ecx, DWORD PTR tv246[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv249[ebp], dl
	add	DWORD PTR tv246[ebp], 1
	cmp	BYTE PTR tv249[ebp], 0
	jne	SHORT $LL28@xmlSnprint
	mov	edi, DWORD PTR tv246[ebp]
	mov	eax, DWORD PTR ??_C@_04IBCFJNCN@?5?4?4?4@
	mov	DWORD PTR [edi], eax
	mov	cl, BYTE PTR ??_C@_04IBCFJNCN@?5?4?4?4@+4
	mov	BYTE PTR [edi+4], cl
$LN9@xmlSnprint:

; 5193 : 	    return;

	jmp	$LN1@xmlSnprint
$LN8@xmlSnprint:

; 5194 : 	}
; 5195 :         switch (cur->type) {

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv88[ebp], eax
	mov	ecx, DWORD PTR tv88[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv88[ebp], ecx
	cmp	DWORD PTR tv88[ebp], 20			; 00000014H
	ja	$LN4@xmlSnprint
	mov	edx, DWORD PTR tv88[ebp]
	movzx	eax, BYTE PTR $LN29@xmlSnprint[edx]
	jmp	DWORD PTR $LN43@xmlSnprint[eax*4]
$LN10@xmlSnprint:

; 5196 :             case XML_ELEMENT_NODE:
; 5197 : 		if ((cur->ns != NULL) && (cur->ns->prefix != NULL)) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN11@xmlSnprint
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+12], 0
	je	$LN11@xmlSnprint

; 5198 : 		    if (size - len < xmlStrlen(cur->ns->prefix) + 10) {

	mov	esi, DWORD PTR _size$[ebp]
	sub	esi, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlStrlen
	add	esp, 4
	add	eax, 10					; 0000000aH
	cmp	esi, eax
	jge	SHORT $LN12@xmlSnprint

; 5199 : 			if ((size - len > 4) && (buf[len - 1] != '.'))

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, 4
	jle	SHORT $LN13@xmlSnprint
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	movsx	eax, BYTE PTR [edx-1]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN13@xmlSnprint

; 5200 : 			    strcat(buf, " ...");

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv272[ebp], ecx
$LL30@xmlSnprint:
	mov	edx, DWORD PTR tv272[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv275[ebp], al
	add	DWORD PTR tv272[ebp], 1
	cmp	BYTE PTR tv275[ebp], 0
	jne	SHORT $LL30@xmlSnprint
	mov	edi, DWORD PTR tv272[ebp]
	mov	ecx, DWORD PTR ??_C@_04IBCFJNCN@?5?4?4?4@
	mov	DWORD PTR [edi], ecx
	mov	dl, BYTE PTR ??_C@_04IBCFJNCN@?5?4?4?4@+4
	mov	BYTE PTR [edi+4], dl
$LN13@xmlSnprint:

; 5201 : 			return;

	jmp	$LN1@xmlSnprint
$LN12@xmlSnprint:

; 5202 : 		    }
; 5203 : 		    strcat(buf, (char *) cur->ns->prefix);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR tv285[ebp], edx
	mov	eax, DWORD PTR tv285[ebp]
	mov	DWORD PTR tv287[ebp], eax
$LL31@xmlSnprint:
	mov	ecx, DWORD PTR tv285[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv290[ebp], dl
	add	DWORD PTR tv285[ebp], 1
	cmp	BYTE PTR tv290[ebp], 0
	jne	SHORT $LL31@xmlSnprint
	mov	eax, DWORD PTR tv285[ebp]
	sub	eax, DWORD PTR tv287[ebp]
	mov	ecx, DWORD PTR tv287[ebp]
	mov	DWORD PTR tv295[ebp], ecx
	mov	DWORD PTR tv296[ebp], eax
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, -1
	mov	DWORD PTR tv299[ebp], edx
$LL32@xmlSnprint:
	mov	eax, DWORD PTR tv299[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv302[ebp], cl
	add	DWORD PTR tv299[ebp], 1
	cmp	BYTE PTR tv302[ebp], 0
	jne	SHORT $LL32@xmlSnprint
	mov	edi, DWORD PTR tv299[ebp]
	mov	esi, DWORD PTR tv295[ebp]
	mov	edx, DWORD PTR tv296[ebp]
	mov	ecx, edx
	shr	ecx, 2
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb

; 5204 : 		    strcat(buf, ":");

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv318[ebp], eax
$LL33@xmlSnprint:
	mov	ecx, DWORD PTR tv318[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv321[ebp], dl
	add	DWORD PTR tv318[ebp], 1
	cmp	BYTE PTR tv321[ebp], 0
	jne	SHORT $LL33@xmlSnprint
	mov	edi, DWORD PTR tv318[ebp]
	mov	ax, WORD PTR ??_C@_01JLIPDDHJ@?3@
	mov	WORD PTR [edi], ax
$LN11@xmlSnprint:

; 5205 : 		}
; 5206 :                 if (size - len < xmlStrlen(cur->name) + 10) {

	mov	esi, DWORD PTR _size$[ebp]
	sub	esi, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	add	eax, 10					; 0000000aH
	cmp	esi, eax
	jge	SHORT $LN14@xmlSnprint

; 5207 : 		    if ((size - len > 4) && (buf[len - 1] != '.'))

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _len$[ebp]
	cmp	eax, 4
	jle	SHORT $LN15@xmlSnprint
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	movsx	edx, BYTE PTR [ecx-1]
	cmp	edx, 46					; 0000002eH
	je	SHORT $LN15@xmlSnprint

; 5208 : 			strcat(buf, " ...");

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv335[ebp], eax
$LL34@xmlSnprint:
	mov	ecx, DWORD PTR tv335[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv338[ebp], dl
	add	DWORD PTR tv335[ebp], 1
	cmp	BYTE PTR tv338[ebp], 0
	jne	SHORT $LL34@xmlSnprint
	mov	edi, DWORD PTR tv335[ebp]
	mov	eax, DWORD PTR ??_C@_04IBCFJNCN@?5?4?4?4@
	mov	DWORD PTR [edi], eax
	mov	cl, BYTE PTR ??_C@_04IBCFJNCN@?5?4?4?4@+4
	mov	BYTE PTR [edi+4], cl
$LN15@xmlSnprint:

; 5209 : 		    return;

	jmp	$LN1@xmlSnprint
$LN14@xmlSnprint:

; 5210 : 		}
; 5211 : 	        strcat(buf, (char *) cur->name);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv348[ebp], eax
	mov	ecx, DWORD PTR tv348[ebp]
	mov	DWORD PTR tv350[ebp], ecx
$LL35@xmlSnprint:
	mov	edx, DWORD PTR tv348[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv353[ebp], al
	add	DWORD PTR tv348[ebp], 1
	cmp	BYTE PTR tv353[ebp], 0
	jne	SHORT $LL35@xmlSnprint
	mov	ecx, DWORD PTR tv348[ebp]
	sub	ecx, DWORD PTR tv350[ebp]
	mov	edx, DWORD PTR tv350[ebp]
	mov	DWORD PTR tv358[ebp], edx
	mov	DWORD PTR tv359[ebp], ecx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv362[ebp], eax
$LL36@xmlSnprint:
	mov	ecx, DWORD PTR tv362[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv365[ebp], dl
	add	DWORD PTR tv362[ebp], 1
	cmp	BYTE PTR tv365[ebp], 0
	jne	SHORT $LL36@xmlSnprint
	mov	edi, DWORD PTR tv362[ebp]
	mov	esi, DWORD PTR tv358[ebp]
	mov	eax, DWORD PTR tv359[ebp]
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb

; 5212 : 		if (cur->next != NULL)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN16@xmlSnprint

; 5213 : 		    strcat(buf, " ");

	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, -1
	mov	DWORD PTR tv382[ebp], edx
$LL37@xmlSnprint:
	mov	eax, DWORD PTR tv382[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv385[ebp], cl
	add	DWORD PTR tv382[ebp], 1
	cmp	BYTE PTR tv385[ebp], 0
	jne	SHORT $LL37@xmlSnprint
	mov	edi, DWORD PTR tv382[ebp]
	mov	dx, WORD PTR ??_C@_01CLKCMJKC@?5@
	mov	WORD PTR [edi], dx
$LN16@xmlSnprint:

; 5214 : 		break;

	jmp	$LN4@xmlSnprint
$LN17@xmlSnprint:

; 5215 :             case XML_TEXT_NODE:
; 5216 : 		if (xmlIsBlankNode(cur))

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_xmlIsBlankNode
	add	esp, 4
	test	eax, eax
	je	SHORT $LN19@xmlSnprint

; 5217 : 		    break;

	jmp	$LN4@xmlSnprint
$LN19@xmlSnprint:

; 5218 :                 /* Falls through. */
; 5219 :             case XML_CDATA_SECTION_NODE:
; 5220 :             case XML_ENTITY_REF_NODE:
; 5221 : 	        strcat(buf, "CDATA");

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv395[ebp], ecx
$LL38@xmlSnprint:
	mov	edx, DWORD PTR tv395[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv398[ebp], al
	add	DWORD PTR tv395[ebp], 1
	cmp	BYTE PTR tv398[ebp], 0
	jne	SHORT $LL38@xmlSnprint
	mov	edi, DWORD PTR tv395[ebp]
	mov	ecx, DWORD PTR ??_C@_05MLPNBPGH@CDATA@
	mov	DWORD PTR [edi], ecx
	mov	dx, WORD PTR ??_C@_05MLPNBPGH@CDATA@+4
	mov	WORD PTR [edi+4], dx

; 5222 : 		if (cur->next != NULL)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN20@xmlSnprint

; 5223 : 		    strcat(buf, " ");

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv409[ebp], ecx
$LL39@xmlSnprint:
	mov	edx, DWORD PTR tv409[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv412[ebp], al
	add	DWORD PTR tv409[ebp], 1
	cmp	BYTE PTR tv412[ebp], 0
	jne	SHORT $LL39@xmlSnprint
	mov	edi, DWORD PTR tv409[ebp]
	mov	cx, WORD PTR ??_C@_01CLKCMJKC@?5@
	mov	WORD PTR [edi], cx
$LN20@xmlSnprint:

; 5224 : 		break;

	jmp	SHORT $LN4@xmlSnprint
$LN21@xmlSnprint:

; 5225 :             case XML_ATTRIBUTE_NODE:
; 5226 :             case XML_DOCUMENT_NODE:
; 5227 : #ifdef LIBXML_DOCB_ENABLED
; 5228 : 	    case XML_DOCB_DOCUMENT_NODE:
; 5229 : #endif
; 5230 : 	    case XML_HTML_DOCUMENT_NODE:
; 5231 :             case XML_DOCUMENT_TYPE_NODE:
; 5232 :             case XML_DOCUMENT_FRAG_NODE:
; 5233 :             case XML_NOTATION_NODE:
; 5234 : 	    case XML_NAMESPACE_DECL:
; 5235 : 	        strcat(buf, "???");

	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, -1
	mov	DWORD PTR tv420[ebp], edx
$LL40@xmlSnprint:
	mov	eax, DWORD PTR tv420[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv423[ebp], cl
	add	DWORD PTR tv420[ebp], 1
	cmp	BYTE PTR tv423[ebp], 0
	jne	SHORT $LL40@xmlSnprint
	mov	edi, DWORD PTR tv420[ebp]
	mov	edx, DWORD PTR ??_C@_03BBKEAIF@?$DP?$DP?$DP@
	mov	DWORD PTR [edi], edx

; 5236 : 		if (cur->next != NULL)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN4@xmlSnprint

; 5237 : 		    strcat(buf, " ");

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv432[ebp], ecx
$LL41@xmlSnprint:
	mov	edx, DWORD PTR tv432[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv435[ebp], al
	add	DWORD PTR tv432[ebp], 1
	cmp	BYTE PTR tv435[ebp], 0
	jne	SHORT $LL41@xmlSnprint
	mov	edi, DWORD PTR tv432[ebp]
	mov	cx, WORD PTR ??_C@_01CLKCMJKC@?5@
	mov	WORD PTR [edi], cx
$LN4@xmlSnprint:

; 5238 : 		break;
; 5239 :             case XML_ENTITY_NODE:
; 5240 :             case XML_PI_NODE:
; 5241 :             case XML_DTD_NODE:
; 5242 :             case XML_COMMENT_NODE:
; 5243 : 	    case XML_ELEMENT_DECL:
; 5244 : 	    case XML_ATTRIBUTE_DECL:
; 5245 : 	    case XML_ENTITY_DECL:
; 5246 : 	    case XML_XINCLUDE_START:
; 5247 : 	    case XML_XINCLUDE_END:
; 5248 : 		break;
; 5249 : 	}
; 5250 : 	cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax

; 5251 :     }

	jmp	$LN2@xmlSnprint
$LN3@xmlSnprint:

; 5252 :     if (glob) strcat(buf, ")");

	cmp	DWORD PTR _glob$[ebp], 0
	je	SHORT $LN1@xmlSnprint
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv445[ebp], ecx
$LL42@xmlSnprint:
	mov	edx, DWORD PTR tv445[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv448[ebp], al
	add	DWORD PTR tv445[ebp], 1
	cmp	BYTE PTR tv448[ebp], 0
	jne	SHORT $LL42@xmlSnprint
	mov	edi, DWORD PTR tv445[ebp]
	mov	cx, WORD PTR ??_C@_01PKGAHCOL@?$CJ@
	mov	WORD PTR [edi], cx
$LN1@xmlSnprint:

; 5253 : }

	pop	edi
	pop	esi
	add	esp, 172				; 000000acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN43@xmlSnprint:
	DD	$LN10@xmlSnprint
	DD	$LN21@xmlSnprint
	DD	$LN17@xmlSnprint
	DD	$LN19@xmlSnprint
	DD	$LN4@xmlSnprint
$LN29@xmlSnprint:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	3
	DB	4
	DB	4
	DB	4
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	1
_xmlSnprintfElements ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateAttributeIdCallback
_TEXT	SEGMENT
_count$ = -8						; size = 4
_attr$ = -4						; size = 4
_payload$ = 8						; size = 4
_data$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlValidateAttributeIdCallback PROC			; COMDAT

; 4123 : 	                       const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 4124 :     xmlAttributePtr attr = (xmlAttributePtr) payload;

	mov	eax, DWORD PTR _payload$[ebp]
	mov	DWORD PTR _attr$[ebp], eax

; 4125 :     int *count = (int *) data;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _count$[ebp], ecx

; 4126 :     if (attr->atype == XML_ATTRIBUTE_ID) (*count)++;

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+40], 2
	jne	SHORT $LN1@xmlValidat
	mov	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _count$[ebp]
	mov	DWORD PTR [edx], ecx
$LN1@xmlValidat:

; 4127 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateAttributeIdCallback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateAttributeValue2
_TEXT	SEGMENT
tv64 = -36						; size = 4
_nota$1 = -32						; size = 4
_ent$2 = -28						; size = 4
_save$3 = -21						; size = 1
_cur$4 = -20						; size = 4
_nam$5 = -16						; size = 4
_dup$6 = -12						; size = 4
_ent$7 = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_name$ = 16						; size = 4
_type$ = 20						; size = 4
_value$ = 24						; size = 4
_xmlValidateAttributeValue2 PROC			; COMDAT

; 3871 :       const xmlChar *name, xmlAttributeType type, const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3872 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 3873 :     switch (type) {

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 5
	je	SHORT $LN11@xmlValidat
	cmp	DWORD PTR tv64[ebp], 6
	je	$LN16@xmlValidat
	cmp	DWORD PTR tv64[ebp], 10			; 0000000aH
	je	$LN25@xmlValidat
	jmp	$LN2@xmlValidat

; 3874 : 	case XML_ATTRIBUTE_IDREFS:
; 3875 : 	case XML_ATTRIBUTE_IDREF:
; 3876 : 	case XML_ATTRIBUTE_ID:
; 3877 : 	case XML_ATTRIBUTE_NMTOKENS:
; 3878 : 	case XML_ATTRIBUTE_ENUMERATION:
; 3879 : 	case XML_ATTRIBUTE_NMTOKEN:
; 3880 :         case XML_ATTRIBUTE_CDATA:
; 3881 : 	    break;

	jmp	$LN2@xmlValidat
$LN11@xmlValidat:

; 3882 : 	case XML_ATTRIBUTE_ENTITY: {
; 3883 : 	    xmlEntityPtr ent;
; 3884 : 
; 3885 : 	    ent = xmlGetDocEntity(doc, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlGetDocEntity
	add	esp, 8
	mov	DWORD PTR _ent$7[ebp], eax

; 3886 : 	    /* yeah it's a bit messy... */
; 3887 : 	    if ((ent == NULL) && (doc->standalone == 1)) {

	cmp	DWORD PTR _ent$7[ebp], 0
	jne	SHORT $LN12@xmlValidat
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+40], 1
	jne	SHORT $LN12@xmlValidat

; 3888 : 		doc->standalone = 0;

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 3889 : 		ent = xmlGetDocEntity(doc, value);

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlGetDocEntity
	add	esp, 8
	mov	DWORD PTR _ent$7[ebp], eax
$LN12@xmlValidat:

; 3890 : 	    }
; 3891 : 	    if (ent == NULL) {

	cmp	DWORD PTR _ent$7[ebp], 0
	jne	SHORT $LN13@xmlValidat

; 3892 : 		xmlErrValidNode(ctxt, (xmlNodePtr) doc,

	push	0
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0DG@NHAJHAEC@ENTITY?5attribute?5?$CFs?5reference?5a@
	push	535					; 00000217H
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 3893 : 				XML_DTD_UNKNOWN_ENTITY,
; 3894 :    "ENTITY attribute %s reference an unknown entity \"%s\"\n",
; 3895 : 		       name, value, NULL);
; 3896 : 		ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
	jmp	SHORT $LN14@xmlValidat
$LN13@xmlValidat:

; 3897 : 	    } else if (ent->etype != XML_EXTERNAL_GENERAL_UNPARSED_ENTITY) {

	mov	edx, DWORD PTR _ent$7[ebp]
	cmp	DWORD PTR [edx+48], 3
	je	SHORT $LN14@xmlValidat

; 3898 : 		xmlErrValidNode(ctxt, (xmlNodePtr) doc,

	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DM@CBMBENAH@ENTITY?5attribute?5?$CFs?5reference?5a@
	push	511					; 000001ffH
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 3899 : 				XML_DTD_ENTITY_TYPE,
; 3900 :    "ENTITY attribute %s reference an entity \"%s\" of wrong type\n",
; 3901 : 		       name, value, NULL);
; 3902 : 		ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN14@xmlValidat:

; 3903 : 	    }
; 3904 : 	    break;

	jmp	$LN2@xmlValidat
$LN16@xmlValidat:

; 3905 :         }
; 3906 : 	case XML_ATTRIBUTE_ENTITIES: {
; 3907 : 	    xmlChar *dup, *nam = NULL, *cur, save;

	mov	DWORD PTR _nam$5[ebp], 0

; 3908 : 	    xmlEntityPtr ent;
; 3909 : 
; 3910 : 	    dup = xmlStrdup(value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _dup$6[ebp], eax

; 3911 : 	    if (dup == NULL)

	cmp	DWORD PTR _dup$6[ebp], 0
	jne	SHORT $LN17@xmlValidat

; 3912 : 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN17@xmlValidat:

; 3913 : 	    cur = dup;

	mov	edx, DWORD PTR _dup$6[ebp]
	mov	DWORD PTR _cur$4[ebp], edx
$LN4@xmlValidat:

; 3914 : 	    while (*cur != 0) {

	mov	eax, DWORD PTR _cur$4[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	$LN5@xmlValidat

; 3915 : 		nam = cur;

	mov	edx, DWORD PTR _cur$4[ebp]
	mov	DWORD PTR _nam$5[ebp], edx
$LN6@xmlValidat:

; 3916 : 		while ((*cur != 0) && (!IS_BLANK_CH(*cur))) cur++;

	mov	eax, DWORD PTR _cur$4[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN7@xmlValidat
	mov	edx, DWORD PTR _cur$4[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN7@xmlValidat
	mov	ecx, DWORD PTR _cur$4[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN18@xmlValidat
	mov	eax, DWORD PTR _cur$4[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN7@xmlValidat
$LN18@xmlValidat:
	mov	edx, DWORD PTR _cur$4[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN7@xmlValidat
	mov	ecx, DWORD PTR _cur$4[ebp]
	add	ecx, 1
	mov	DWORD PTR _cur$4[ebp], ecx
	jmp	SHORT $LN6@xmlValidat
$LN7@xmlValidat:

; 3917 : 		save = *cur;

	mov	edx, DWORD PTR _cur$4[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _save$3[ebp], al

; 3918 : 		*cur = 0;

	mov	ecx, DWORD PTR _cur$4[ebp]
	mov	BYTE PTR [ecx], 0

; 3919 : 		ent = xmlGetDocEntity(doc, nam);

	mov	edx, DWORD PTR _nam$5[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlGetDocEntity
	add	esp, 8
	mov	DWORD PTR _ent$2[ebp], eax

; 3920 : 		if (ent == NULL) {

	cmp	DWORD PTR _ent$2[ebp], 0
	jne	SHORT $LN19@xmlValidat

; 3921 : 		    xmlErrValidNode(ctxt, (xmlNodePtr) doc,

	push	0
	mov	ecx, DWORD PTR _nam$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0DI@MOCJGONA@ENTITIES?5attribute?5?$CFs?5reference@
	push	535					; 00000217H
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 3922 : 				    XML_DTD_UNKNOWN_ENTITY,
; 3923 :        "ENTITIES attribute %s reference an unknown entity \"%s\"\n",
; 3924 : 			   name, nam, NULL);
; 3925 : 		    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
	jmp	SHORT $LN20@xmlValidat
$LN19@xmlValidat:

; 3926 : 		} else if (ent->etype != XML_EXTERNAL_GENERAL_UNPARSED_ENTITY) {

	mov	edx, DWORD PTR _ent$2[ebp]
	cmp	DWORD PTR [edx+48], 3
	je	SHORT $LN20@xmlValidat

; 3927 : 		    xmlErrValidNode(ctxt, (xmlNodePtr) doc,

	push	0
	mov	eax, DWORD PTR _nam$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DO@BNHKOEGN@ENTITIES?5attribute?5?$CFs?5reference@
	push	511					; 000001ffH
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 3928 : 				    XML_DTD_ENTITY_TYPE,
; 3929 :        "ENTITIES attribute %s reference an entity \"%s\" of wrong type\n",
; 3930 : 			   name, nam, NULL);
; 3931 : 		    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN20@xmlValidat:

; 3932 : 		}
; 3933 : 		if (save == 0)

	movzx	ecx, BYTE PTR _save$3[ebp]
	test	ecx, ecx
	jne	SHORT $LN22@xmlValidat

; 3934 : 		    break;

	jmp	SHORT $LN5@xmlValidat
$LN22@xmlValidat:

; 3935 : 		*cur = save;

	mov	edx, DWORD PTR _cur$4[ebp]
	mov	al, BYTE PTR _save$3[ebp]
	mov	BYTE PTR [edx], al
$LN8@xmlValidat:

; 3936 : 		while (IS_BLANK_CH(*cur)) cur++;

	mov	ecx, DWORD PTR _cur$4[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN23@xmlValidat
	mov	eax, DWORD PTR _cur$4[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN24@xmlValidat
	mov	edx, DWORD PTR _cur$4[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN23@xmlValidat
$LN24@xmlValidat:
	mov	ecx, DWORD PTR _cur$4[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN9@xmlValidat
$LN23@xmlValidat:
	mov	eax, DWORD PTR _cur$4[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$4[ebp], eax
	jmp	SHORT $LN8@xmlValidat
$LN9@xmlValidat:

; 3937 : 	    }

	jmp	$LN4@xmlValidat
$LN5@xmlValidat:

; 3938 : 	    xmlFree(dup);

	mov	esi, esp
	mov	ecx, DWORD PTR _dup$6[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3939 : 	    break;

	jmp	SHORT $LN2@xmlValidat
$LN25@xmlValidat:

; 3940 : 	}
; 3941 : 	case XML_ATTRIBUTE_NOTATION: {
; 3942 : 	    xmlNotationPtr nota;
; 3943 : 
; 3944 : 	    nota = xmlGetDtdNotationDesc(doc->intSubset, value);

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_xmlGetDtdNotationDesc
	add	esp, 8
	mov	DWORD PTR _nota$1[ebp], eax

; 3945 : 	    if ((nota == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _nota$1[ebp], 0
	jne	SHORT $LN26@xmlValidat
	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN26@xmlValidat

; 3946 : 		nota = xmlGetDtdNotationDesc(doc->extSubset, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlGetDtdNotationDesc
	add	esp, 8
	mov	DWORD PTR _nota$1[ebp], eax
$LN26@xmlValidat:

; 3947 : 
; 3948 : 	    if (nota == NULL) {

	cmp	DWORD PTR _nota$1[ebp], 0
	jne	SHORT $LN2@xmlValidat

; 3949 : 		xmlErrValidNode(ctxt, (xmlNodePtr) doc,

	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DK@HMAANMLE@NOTATION?5attribute?5?$CFs?5reference@
	push	537					; 00000219H
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 3950 : 		                XML_DTD_UNKNOWN_NOTATION,
; 3951 :        "NOTATION attribute %s reference an unknown notation \"%s\"\n",
; 3952 : 		       name, value, NULL);
; 3953 : 		ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN2@xmlValidat:

; 3954 : 	    }
; 3955 : 	    break;
; 3956 :         }
; 3957 :     }
; 3958 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 3959 : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateAttributeValue2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNmtokensValueInternal
_TEXT	SEGMENT
tv76 = -28						; size = 4
tv75 = -24						; size = 4
_len$ = -16						; size = 4
_val$ = -8						; size = 4
_cur$ = -4						; size = 4
_doc$ = 8						; size = 4
_value$ = 12						; size = 4
_xmlValidateNmtokensValueInternal PROC			; COMDAT

; 3691 : xmlValidateNmtokensValueInternal(xmlDocPtr doc, const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3692 :     const xmlChar *cur;
; 3693 :     int val, len;
; 3694 : 
; 3695 :     if (value == NULL) return(0);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN12@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN12@xmlValidat:

; 3696 :     cur = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 3697 :     val = xmlStringCurrentChar(NULL, cur, &len);

	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3698 :     cur += len;

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@xmlValidat:

; 3699 : 
; 3700 :     while (IS_BLANK(val)) {

	cmp	DWORD PTR _val$[ebp], 256		; 00000100H
	jge	SHORT $LN21@xmlValidat
	cmp	DWORD PTR _val$[ebp], 32		; 00000020H
	je	SHORT $LN19@xmlValidat
	cmp	DWORD PTR _val$[ebp], 9
	jl	SHORT $LN18@xmlValidat
	cmp	DWORD PTR _val$[ebp], 10		; 0000000aH
	jle	SHORT $LN19@xmlValidat
$LN18@xmlValidat:
	cmp	DWORD PTR _val$[ebp], 13		; 0000000dH
	je	SHORT $LN19@xmlValidat
	mov	DWORD PTR tv75[ebp], 0
	jmp	SHORT $LN20@xmlValidat
$LN19@xmlValidat:
	mov	DWORD PTR tv75[ebp], 1
$LN20@xmlValidat:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	jmp	SHORT $LN22@xmlValidat
$LN21@xmlValidat:
	mov	DWORD PTR tv76[ebp], 0
$LN22@xmlValidat:
	cmp	DWORD PTR tv76[ebp], 0
	je	SHORT $LN3@xmlValidat

; 3701 : 	val = xmlStringCurrentChar(NULL, cur, &len);

	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3702 : 	cur += len;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx

; 3703 :     }

	jmp	SHORT $LN2@xmlValidat
$LN3@xmlValidat:

; 3704 : 
; 3705 :     if (!xmlIsDocNameChar(doc, val))

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlIsDocNameChar
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@xmlValidat

; 3706 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN4@xmlValidat:

; 3707 : 
; 3708 :     while (xmlIsDocNameChar(doc, val)) {

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlIsDocNameChar
	add	esp, 8
	test	eax, eax
	je	SHORT $LN6@xmlValidat

; 3709 : 	val = xmlStringCurrentChar(NULL, cur, &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3710 : 	cur += len;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], edx

; 3711 :     }

	jmp	SHORT $LN4@xmlValidat
$LN6@xmlValidat:

; 3712 : 
; 3713 :     /* Should not test IS_BLANK(val) here -- see erratum E20*/
; 3714 :     while (val == 0x20) {

	cmp	DWORD PTR _val$[ebp], 32		; 00000020H
	jne	$LN7@xmlValidat
$LN8@xmlValidat:

; 3715 : 	while (val == 0x20) {

	cmp	DWORD PTR _val$[ebp], 32		; 00000020H
	jne	SHORT $LN9@xmlValidat

; 3716 : 	    val = xmlStringCurrentChar(NULL, cur, &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3717 : 	    cur += len;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], edx

; 3718 : 	}

	jmp	SHORT $LN8@xmlValidat
$LN9@xmlValidat:

; 3719 : 	if (val == 0) return(1);

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN14@xmlValidat
	mov	eax, 1
	jmp	SHORT $LN1@xmlValidat
$LN14@xmlValidat:

; 3720 : 
; 3721 : 	if (!xmlIsDocNameChar(doc, val))

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlIsDocNameChar
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@xmlValidat

; 3722 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN15@xmlValidat:

; 3723 : 
; 3724 : 	val = xmlStringCurrentChar(NULL, cur, &len);

	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3725 : 	cur += len;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx
$LN10@xmlValidat:

; 3726 : 
; 3727 : 	while (xmlIsDocNameChar(doc, val)) {

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlIsDocNameChar
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@xmlValidat

; 3728 : 	    val = xmlStringCurrentChar(NULL, cur, &len);

	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3729 : 	    cur += len;

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 3730 : 	}

	jmp	SHORT $LN10@xmlValidat
$LN11@xmlValidat:

; 3731 :     }

	jmp	$LN6@xmlValidat
$LN7@xmlValidat:

; 3732 : 
; 3733 :     if (val != 0) return(0);

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN16@xmlValidat
	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN16@xmlValidat:

; 3734 : 
; 3735 :     return(1);

	mov	eax, 1
$LN1@xmlValidat:

; 3736 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN25@xmlValidat:
	DD	1
	DD	$LN24@xmlValidat
$LN24@xmlValidat:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN23@xmlValidat
$LN23@xmlValidat:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_xmlValidateNmtokensValueInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNmtokenValueInternal
_TEXT	SEGMENT
_len$ = -16						; size = 4
_val$ = -8						; size = 4
_cur$ = -4						; size = 4
_doc$ = 8						; size = 4
_value$ = 12						; size = 4
_xmlValidateNmtokenValueInternal PROC			; COMDAT

; 3638 : xmlValidateNmtokenValueInternal(xmlDocPtr doc, const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3639 :     const xmlChar *cur;
; 3640 :     int val, len;
; 3641 : 
; 3642 :     if (value == NULL) return(0);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN4@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN4@xmlValidat:

; 3643 :     cur = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 3644 :     val = xmlStringCurrentChar(NULL, cur, &len);

	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3645 :     cur += len;

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 3646 : 
; 3647 :     if (!xmlIsDocNameChar(doc, val))

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlIsDocNameChar
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@xmlValidat

; 3648 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN5@xmlValidat:

; 3649 : 
; 3650 :     val = xmlStringCurrentChar(NULL, cur, &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3651 :     cur += len;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], edx
$LN2@xmlValidat:

; 3652 :     while (xmlIsDocNameChar(doc, val)) {

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlIsDocNameChar
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@xmlValidat

; 3653 : 	val = xmlStringCurrentChar(NULL, cur, &len);

	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3654 : 	cur += len;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx

; 3655 :     }

	jmp	SHORT $LN2@xmlValidat
$LN3@xmlValidat:

; 3656 : 
; 3657 :     if (val != 0) return(0);

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN6@xmlValidat
	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN6@xmlValidat:

; 3658 : 
; 3659 :     return(1);

	mov	eax, 1
$LN1@xmlValidat:

; 3660 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@xmlValidat:
	DD	1
	DD	$LN9@xmlValidat
$LN9@xmlValidat:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN8@xmlValidat
$LN8@xmlValidat:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_xmlValidateNmtokenValueInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNamesValueInternal
_TEXT	SEGMENT
_len$ = -16						; size = 4
_val$ = -8						; size = 4
_cur$ = -4						; size = 4
_doc$ = 8						; size = 4
_value$ = 12						; size = 4
_xmlValidateNamesValueInternal PROC			; COMDAT

; 3568 : xmlValidateNamesValueInternal(xmlDocPtr doc, const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3569 :     const xmlChar *cur;
; 3570 :     int val, len;
; 3571 : 
; 3572 :     if (value == NULL) return(0);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN10@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN10@xmlValidat:

; 3573 :     cur = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 3574 :     val = xmlStringCurrentChar(NULL, cur, &len);

	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3575 :     cur += len;

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 3576 : 
; 3577 :     if (!xmlIsDocNameStartChar(doc, val))

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlIsDocNameStartChar
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@xmlValidat

; 3578 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN11@xmlValidat:

; 3579 : 
; 3580 :     val = xmlStringCurrentChar(NULL, cur, &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3581 :     cur += len;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], edx
$LN2@xmlValidat:

; 3582 :     while (xmlIsDocNameChar(doc, val)) {

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlIsDocNameChar
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@xmlValidat

; 3583 : 	val = xmlStringCurrentChar(NULL, cur, &len);

	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3584 : 	cur += len;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx

; 3585 :     }

	jmp	SHORT $LN2@xmlValidat
$LN4@xmlValidat:

; 3586 : 
; 3587 :     /* Should not test IS_BLANK(val) here -- see erratum E20*/
; 3588 :     while (val == 0x20) {

	cmp	DWORD PTR _val$[ebp], 32		; 00000020H
	jne	$LN5@xmlValidat
$LN6@xmlValidat:

; 3589 : 	while (val == 0x20) {

	cmp	DWORD PTR _val$[ebp], 32		; 00000020H
	jne	SHORT $LN7@xmlValidat

; 3590 : 	    val = xmlStringCurrentChar(NULL, cur, &len);

	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3591 : 	    cur += len;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx

; 3592 : 	}

	jmp	SHORT $LN6@xmlValidat
$LN7@xmlValidat:

; 3593 : 
; 3594 : 	if (!xmlIsDocNameStartChar(doc, val))

	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlIsDocNameStartChar
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@xmlValidat

; 3595 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN12@xmlValidat:

; 3596 : 
; 3597 : 	val = xmlStringCurrentChar(NULL, cur, &len);

	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3598 : 	cur += len;

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], eax
$LN8@xmlValidat:

; 3599 : 
; 3600 : 	while (xmlIsDocNameChar(doc, val)) {

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlIsDocNameChar
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@xmlValidat

; 3601 : 	    val = xmlStringCurrentChar(NULL, cur, &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3602 : 	    cur += len;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], edx

; 3603 : 	}

	jmp	SHORT $LN8@xmlValidat
$LN9@xmlValidat:

; 3604 :     }

	jmp	$LN4@xmlValidat
$LN5@xmlValidat:

; 3605 : 
; 3606 :     if (val != 0) return(0);

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN13@xmlValidat
	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN13@xmlValidat:

; 3607 : 
; 3608 :     return(1);

	mov	eax, 1
$LN1@xmlValidat:

; 3609 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@xmlValidat:
	DD	1
	DD	$LN16@xmlValidat
$LN16@xmlValidat:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN15@xmlValidat
$LN15@xmlValidat:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_xmlValidateNamesValueInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNameValueInternal
_TEXT	SEGMENT
_len$ = -16						; size = 4
_val$ = -8						; size = 4
_cur$ = -4						; size = 4
_doc$ = 8						; size = 4
_value$ = 12						; size = 4
_xmlValidateNameValueInternal PROC			; COMDAT

; 3520 : xmlValidateNameValueInternal(xmlDocPtr doc, const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3521 :     const xmlChar *cur;
; 3522 :     int val, len;
; 3523 : 
; 3524 :     if (value == NULL) return(0);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN4@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN4@xmlValidat:

; 3525 :     cur = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 3526 :     val = xmlStringCurrentChar(NULL, cur, &len);

	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3527 :     cur += len;

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], eax

; 3528 :     if (!xmlIsDocNameStartChar(doc, val))

	mov	ecx, DWORD PTR _val$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlIsDocNameStartChar
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@xmlValidat

; 3529 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN5@xmlValidat:

; 3530 : 
; 3531 :     val = xmlStringCurrentChar(NULL, cur, &len);

	lea	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3532 :     cur += len;

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], edx
$LN2@xmlValidat:

; 3533 :     while (xmlIsDocNameChar(doc, val)) {

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlIsDocNameChar
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@xmlValidat

; 3534 : 	val = xmlStringCurrentChar(NULL, cur, &len);

	lea	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	push	0
	call	_xmlStringCurrentChar
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 3535 : 	cur += len;

	mov	ecx, DWORD PTR _cur$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx

; 3536 :     }

	jmp	SHORT $LN2@xmlValidat
$LN3@xmlValidat:

; 3537 : 
; 3538 :     if (val != 0) return(0);

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN6@xmlValidat
	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN6@xmlValidat:

; 3539 : 
; 3540 :     return(1);

	mov	eax, 1
$LN1@xmlValidat:

; 3541 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN10@xmlValidat:
	DD	1
	DD	$LN9@xmlValidat
$LN9@xmlValidat:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN8@xmlValidat
$LN8@xmlValidat:
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_xmlValidateNameValueInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlIsDocNameChar
_TEXT	SEGMENT
tv189 = -36						; size = 4
tv188 = -32						; size = 4
tv181 = -28						; size = 4
tv171 = -24						; size = 4
tv170 = -20						; size = 4
tv161 = -16						; size = 4
tv162 = -12						; size = 4
tv153 = -8						; size = 4
tv152 = -4						; size = 4
_doc$ = 8						; size = 4
_c$ = 12						; size = 4
_xmlIsDocNameChar PROC					; COMDAT

; 3472 : xmlIsDocNameChar(xmlDocPtr doc, int c) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3473 :     if ((doc == NULL) || (doc->properties & XML_DOC_OLD10) == 0) {

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN4@xmlIsDocNa
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 4
	jne	$LN2@xmlIsDocNa
$LN4@xmlIsDocNa:

; 3474 :         /*
; 3475 : 	 * Use the new checks of production [4] [4a] amd [5] of the
; 3476 : 	 * Update 5 of XML-1.0
; 3477 : 	 */
; 3478 : 	if (((c >= 'a') && (c <= 'z')) ||
; 3479 : 	    ((c >= 'A') && (c <= 'Z')) ||
; 3480 : 	    ((c >= '0') && (c <= '9')) || /* !start */
; 3481 : 	    (c == '_') || (c == ':') ||
; 3482 : 	    (c == '-') || (c == '.') || (c == 0xB7) || /* !start */
; 3483 : 	    ((c >= 0xC0) && (c <= 0xD6)) ||
; 3484 : 	    ((c >= 0xD8) && (c <= 0xF6)) ||
; 3485 : 	    ((c >= 0xF8) && (c <= 0x2FF)) ||
; 3486 : 	    ((c >= 0x300) && (c <= 0x36F)) || /* !start */
; 3487 : 	    ((c >= 0x370) && (c <= 0x37D)) ||
; 3488 : 	    ((c >= 0x37F) && (c <= 0x1FFF)) ||
; 3489 : 	    ((c >= 0x200C) && (c <= 0x200D)) ||
; 3490 : 	    ((c >= 0x203F) && (c <= 0x2040)) || /* !start */
; 3491 : 	    ((c >= 0x2070) && (c <= 0x218F)) ||
; 3492 : 	    ((c >= 0x2C00) && (c <= 0x2FEF)) ||
; 3493 : 	    ((c >= 0x3001) && (c <= 0xD7FF)) ||
; 3494 : 	    ((c >= 0xF900) && (c <= 0xFDCF)) ||
; 3495 : 	    ((c >= 0xFDF0) && (c <= 0xFFFD)) ||

	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN7@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	$LN6@xmlIsDocNa
$LN7@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN8@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	$LN6@xmlIsDocNa
$LN8@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 48			; 00000030H
	jl	SHORT $LN9@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 57			; 00000039H
	jle	$LN6@xmlIsDocNa
$LN9@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 95			; 0000005fH
	je	$LN6@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	je	$LN6@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 45			; 0000002dH
	je	$LN6@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 46			; 0000002eH
	je	$LN6@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 183			; 000000b7H
	je	$LN6@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN10@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 214			; 000000d6H
	jle	$LN6@xmlIsDocNa
$LN10@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 216			; 000000d8H
	jl	SHORT $LN11@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 246			; 000000f6H
	jle	$LN6@xmlIsDocNa
$LN11@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 248			; 000000f8H
	jl	SHORT $LN12@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 767			; 000002ffH
	jle	$LN6@xmlIsDocNa
$LN12@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 768			; 00000300H
	jl	SHORT $LN13@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 879			; 0000036fH
	jle	$LN6@xmlIsDocNa
$LN13@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 880			; 00000370H
	jl	SHORT $LN14@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 893			; 0000037dH
	jle	$LN6@xmlIsDocNa
$LN14@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 895			; 0000037fH
	jl	SHORT $LN15@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 8191		; 00001fffH
	jle	$LN6@xmlIsDocNa
$LN15@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 8204		; 0000200cH
	jl	SHORT $LN16@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 8205		; 0000200dH
	jle	SHORT $LN6@xmlIsDocNa
$LN16@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 8255		; 0000203fH
	jl	SHORT $LN17@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 8256		; 00002040H
	jle	SHORT $LN6@xmlIsDocNa
$LN17@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 8304		; 00002070H
	jl	SHORT $LN18@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 8591		; 0000218fH
	jle	SHORT $LN6@xmlIsDocNa
$LN18@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 11264		; 00002c00H
	jl	SHORT $LN19@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 12271		; 00002fefH
	jle	SHORT $LN6@xmlIsDocNa
$LN19@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 12289		; 00003001H
	jl	SHORT $LN20@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 55295		; 0000d7ffH
	jle	SHORT $LN6@xmlIsDocNa
$LN20@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 63744		; 0000f900H
	jl	SHORT $LN21@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 64975		; 0000fdcfH
	jle	SHORT $LN6@xmlIsDocNa
$LN21@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 65008		; 0000fdf0H
	jl	SHORT $LN22@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 65533		; 0000fffdH
	jle	SHORT $LN6@xmlIsDocNa
$LN22@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 65536		; 00010000H
	jl	SHORT $LN5@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 983039		; 000effffH
	jg	SHORT $LN5@xmlIsDocNa
$LN6@xmlIsDocNa:

; 3496 : 	    ((c >= 0x10000) && (c <= 0xEFFFF)))
; 3497 : 	     return(1);

	mov	eax, 1
	jmp	$LN1@xmlIsDocNa
$LN5@xmlIsDocNa:

; 3498 :     } else {

	jmp	$LN3@xmlIsDocNa
$LN2@xmlIsDocNa:

; 3499 :         if ((IS_LETTER(c)) || (IS_DIGIT(c)) ||
; 3500 :             (c == '.') || (c == '-') ||
; 3501 : 	    (c == '_') || (c == ':') ||
; 3502 : 	    (IS_COMBINING(c)) ||

	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN32@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN26@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	SHORT $LN28@xmlIsDocNa
$LN26@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN27@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	SHORT $LN28@xmlIsDocNa
$LN27@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN29@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 214			; 000000d6H
	jle	SHORT $LN28@xmlIsDocNa
$LN29@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 216			; 000000d8H
	jl	SHORT $LN30@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 246			; 000000f6H
	jle	SHORT $LN28@xmlIsDocNa
$LN30@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 248			; 000000f8H
	jge	SHORT $LN28@xmlIsDocNa
	mov	DWORD PTR tv152[ebp], 0
	jmp	SHORT $LN31@xmlIsDocNa
$LN28@xmlIsDocNa:
	mov	DWORD PTR tv152[ebp], 1
$LN31@xmlIsDocNa:
	mov	edx, DWORD PTR tv152[ebp]
	mov	DWORD PTR tv153[ebp], edx
	jmp	SHORT $LN33@xmlIsDocNa
$LN32@xmlIsDocNa:
	push	OFFSET _xmlIsBaseCharGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv153[ebp], eax
$LN33@xmlIsDocNa:
	cmp	DWORD PTR tv153[ebp], 0
	jne	$LN24@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN38@xmlIsDocNa
	mov	DWORD PTR tv162[ebp], 0
	jmp	SHORT $LN39@xmlIsDocNa
$LN38@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 19968		; 00004e00H
	jl	SHORT $LN34@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 40869		; 00009fa5H
	jle	SHORT $LN35@xmlIsDocNa
$LN34@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 12295		; 00003007H
	je	SHORT $LN35@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 12321		; 00003021H
	jl	SHORT $LN36@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 12329		; 00003029H
	jle	SHORT $LN35@xmlIsDocNa
$LN36@xmlIsDocNa:
	mov	DWORD PTR tv161[ebp], 0
	jmp	SHORT $LN37@xmlIsDocNa
$LN35@xmlIsDocNa:
	mov	DWORD PTR tv161[ebp], 1
$LN37@xmlIsDocNa:
	mov	ecx, DWORD PTR tv161[ebp]
	mov	DWORD PTR tv162[ebp], ecx
$LN39@xmlIsDocNa:
	cmp	DWORD PTR tv162[ebp], 0
	jne	$LN24@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN42@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 48			; 00000030H
	jl	SHORT $LN40@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 57			; 00000039H
	jg	SHORT $LN40@xmlIsDocNa
	mov	DWORD PTR tv170[ebp], 1
	jmp	SHORT $LN41@xmlIsDocNa
$LN40@xmlIsDocNa:
	mov	DWORD PTR tv170[ebp], 0
$LN41@xmlIsDocNa:
	mov	edx, DWORD PTR tv170[ebp]
	mov	DWORD PTR tv171[ebp], edx
	jmp	SHORT $LN43@xmlIsDocNa
$LN42@xmlIsDocNa:
	push	OFFSET _xmlIsDigitGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv171[ebp], eax
$LN43@xmlIsDocNa:
	cmp	DWORD PTR tv171[ebp], 0
	jne	$LN24@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 46			; 0000002eH
	je	$LN24@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 45			; 0000002dH
	je	SHORT $LN24@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 95			; 0000005fH
	je	SHORT $LN24@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	je	SHORT $LN24@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN44@xmlIsDocNa
	mov	DWORD PTR tv181[ebp], 0
	jmp	SHORT $LN45@xmlIsDocNa
$LN44@xmlIsDocNa:
	push	OFFSET _xmlIsCombiningGroup
	mov	ecx, DWORD PTR _c$[ebp]
	push	ecx
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv181[ebp], eax
$LN45@xmlIsDocNa:
	cmp	DWORD PTR tv181[ebp], 0
	jne	SHORT $LN24@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN48@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 183			; 000000b7H
	jne	SHORT $LN46@xmlIsDocNa
	mov	DWORD PTR tv188[ebp], 1
	jmp	SHORT $LN47@xmlIsDocNa
$LN46@xmlIsDocNa:
	mov	DWORD PTR tv188[ebp], 0
$LN47@xmlIsDocNa:
	mov	edx, DWORD PTR tv188[ebp]
	mov	DWORD PTR tv189[ebp], edx
	jmp	SHORT $LN49@xmlIsDocNa
$LN48@xmlIsDocNa:
	push	OFFSET _xmlIsExtenderGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv189[ebp], eax
$LN49@xmlIsDocNa:
	cmp	DWORD PTR tv189[ebp], 0
	je	SHORT $LN3@xmlIsDocNa
$LN24@xmlIsDocNa:

; 3503 : 	    (IS_EXTENDER(c)))
; 3504 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlIsDocNa
$LN3@xmlIsDocNa:

; 3505 :     }
; 3506 :     return(0);

	xor	eax, eax
$LN1@xmlIsDocNa:

; 3507 : }

	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsDocNameChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlIsDocNameStartChar
_TEXT	SEGMENT
tv152 = -16						; size = 4
tv153 = -12						; size = 4
tv144 = -8						; size = 4
tv143 = -4						; size = 4
_doc$ = 8						; size = 4
_c$ = 12						; size = 4
_xmlIsDocNameStartChar PROC				; COMDAT

; 3442 : xmlIsDocNameStartChar(xmlDocPtr doc, int c) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3443 :     if ((doc == NULL) || (doc->properties & XML_DOC_OLD10) == 0) {

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN4@xmlIsDocNa
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	and	ecx, 4
	jne	$LN2@xmlIsDocNa
$LN4@xmlIsDocNa:

; 3444 :         /*
; 3445 : 	 * Use the new checks of production [4] [4a] amd [5] of the
; 3446 : 	 * Update 5 of XML-1.0
; 3447 : 	 */
; 3448 : 	if (((c >= 'a') && (c <= 'z')) ||
; 3449 : 	    ((c >= 'A') && (c <= 'Z')) ||
; 3450 : 	    (c == '_') || (c == ':') ||
; 3451 : 	    ((c >= 0xC0) && (c <= 0xD6)) ||
; 3452 : 	    ((c >= 0xD8) && (c <= 0xF6)) ||
; 3453 : 	    ((c >= 0xF8) && (c <= 0x2FF)) ||
; 3454 : 	    ((c >= 0x370) && (c <= 0x37D)) ||
; 3455 : 	    ((c >= 0x37F) && (c <= 0x1FFF)) ||
; 3456 : 	    ((c >= 0x200C) && (c <= 0x200D)) ||
; 3457 : 	    ((c >= 0x2070) && (c <= 0x218F)) ||
; 3458 : 	    ((c >= 0x2C00) && (c <= 0x2FEF)) ||
; 3459 : 	    ((c >= 0x3001) && (c <= 0xD7FF)) ||
; 3460 : 	    ((c >= 0xF900) && (c <= 0xFDCF)) ||
; 3461 : 	    ((c >= 0xFDF0) && (c <= 0xFFFD)) ||

	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN7@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	$LN6@xmlIsDocNa
$LN7@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN8@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	$LN6@xmlIsDocNa
$LN8@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 95			; 0000005fH
	je	$LN6@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	je	$LN6@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN9@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 214			; 000000d6H
	jle	$LN6@xmlIsDocNa
$LN9@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 216			; 000000d8H
	jl	SHORT $LN10@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 246			; 000000f6H
	jle	$LN6@xmlIsDocNa
$LN10@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 248			; 000000f8H
	jl	SHORT $LN11@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 767			; 000002ffH
	jle	$LN6@xmlIsDocNa
$LN11@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 880			; 00000370H
	jl	SHORT $LN12@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 893			; 0000037dH
	jle	$LN6@xmlIsDocNa
$LN12@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 895			; 0000037fH
	jl	SHORT $LN13@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 8191		; 00001fffH
	jle	SHORT $LN6@xmlIsDocNa
$LN13@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 8204		; 0000200cH
	jl	SHORT $LN14@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 8205		; 0000200dH
	jle	SHORT $LN6@xmlIsDocNa
$LN14@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 8304		; 00002070H
	jl	SHORT $LN15@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 8591		; 0000218fH
	jle	SHORT $LN6@xmlIsDocNa
$LN15@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 11264		; 00002c00H
	jl	SHORT $LN16@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 12271		; 00002fefH
	jle	SHORT $LN6@xmlIsDocNa
$LN16@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 12289		; 00003001H
	jl	SHORT $LN17@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 55295		; 0000d7ffH
	jle	SHORT $LN6@xmlIsDocNa
$LN17@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 63744		; 0000f900H
	jl	SHORT $LN18@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 64975		; 0000fdcfH
	jle	SHORT $LN6@xmlIsDocNa
$LN18@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 65008		; 0000fdf0H
	jl	SHORT $LN19@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 65533		; 0000fffdH
	jle	SHORT $LN6@xmlIsDocNa
$LN19@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 65536		; 00010000H
	jl	SHORT $LN5@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 983039		; 000effffH
	jg	SHORT $LN5@xmlIsDocNa
$LN6@xmlIsDocNa:

; 3462 : 	    ((c >= 0x10000) && (c <= 0xEFFFF)))
; 3463 : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlIsDocNa
$LN5@xmlIsDocNa:

; 3464 :     } else {

	jmp	$LN3@xmlIsDocNa
$LN2@xmlIsDocNa:

; 3465 :         if (IS_LETTER(c) || (c == '_') || (c == ':'))

	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN29@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 65			; 00000041H
	jl	SHORT $LN23@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 90			; 0000005aH
	jle	SHORT $LN25@xmlIsDocNa
$LN23@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 97			; 00000061H
	jl	SHORT $LN24@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 122			; 0000007aH
	jle	SHORT $LN25@xmlIsDocNa
$LN24@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 192			; 000000c0H
	jl	SHORT $LN26@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 214			; 000000d6H
	jle	SHORT $LN25@xmlIsDocNa
$LN26@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 216			; 000000d8H
	jl	SHORT $LN27@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 246			; 000000f6H
	jle	SHORT $LN25@xmlIsDocNa
$LN27@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 248			; 000000f8H
	jge	SHORT $LN25@xmlIsDocNa
	mov	DWORD PTR tv143[ebp], 0
	jmp	SHORT $LN28@xmlIsDocNa
$LN25@xmlIsDocNa:
	mov	DWORD PTR tv143[ebp], 1
$LN28@xmlIsDocNa:
	mov	edx, DWORD PTR tv143[ebp]
	mov	DWORD PTR tv144[ebp], edx
	jmp	SHORT $LN30@xmlIsDocNa
$LN29@xmlIsDocNa:
	push	OFFSET _xmlIsBaseCharGroup
	mov	eax, DWORD PTR _c$[ebp]
	push	eax
	call	_xmlCharInRange
	add	esp, 8
	mov	DWORD PTR tv144[ebp], eax
$LN30@xmlIsDocNa:
	cmp	DWORD PTR tv144[ebp], 0
	jne	SHORT $LN21@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 256			; 00000100H
	jge	SHORT $LN35@xmlIsDocNa
	mov	DWORD PTR tv153[ebp], 0
	jmp	SHORT $LN36@xmlIsDocNa
$LN35@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 19968		; 00004e00H
	jl	SHORT $LN31@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 40869		; 00009fa5H
	jle	SHORT $LN32@xmlIsDocNa
$LN31@xmlIsDocNa:
	cmp	DWORD PTR _c$[ebp], 12295		; 00003007H
	je	SHORT $LN32@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 12321		; 00003021H
	jl	SHORT $LN33@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 12329		; 00003029H
	jle	SHORT $LN32@xmlIsDocNa
$LN33@xmlIsDocNa:
	mov	DWORD PTR tv152[ebp], 0
	jmp	SHORT $LN34@xmlIsDocNa
$LN32@xmlIsDocNa:
	mov	DWORD PTR tv152[ebp], 1
$LN34@xmlIsDocNa:
	mov	ecx, DWORD PTR tv152[ebp]
	mov	DWORD PTR tv153[ebp], ecx
$LN36@xmlIsDocNa:
	cmp	DWORD PTR tv153[ebp], 0
	jne	SHORT $LN21@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 95			; 0000005fH
	je	SHORT $LN21@xmlIsDocNa
	cmp	DWORD PTR _c$[ebp], 58			; 0000003aH
	jne	SHORT $LN3@xmlIsDocNa
$LN21@xmlIsDocNa:

; 3466 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlIsDocNa
$LN3@xmlIsDocNa:

; 3467 :     }
; 3468 :     return(0);

	xor	eax, eax
$LN1@xmlIsDocNa:

; 3469 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsDocNameStartChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDummyCompare
_TEXT	SEGMENT
_data0$ = 8						; size = 4
_data1$ = 12						; size = 4
_xmlDummyCompare PROC					; COMDAT

; 2914 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2915 :     return (0);

	xor	eax, eax

; 2916 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDummyCompare ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlWalkRemoveRef
_TEXT	SEGMENT
_ref_list$ = -12					; size = 4
_attr1$ = -8						; size = 4
_attr0$ = -4						; size = 4
_data$ = 8						; size = 4
_user$ = 12						; size = 4
_xmlWalkRemoveRef PROC					; COMDAT

; 2892 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2893 :     xmlAttrPtr attr0 = ((xmlRefPtr)data)->attr;

	mov	eax, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _attr0$[ebp], ecx

; 2894 :     xmlAttrPtr attr1 = ((xmlRemoveMemoPtr)user)->ap;

	mov	edx, DWORD PTR _user$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _attr1$[ebp], eax

; 2895 :     xmlListPtr ref_list = ((xmlRemoveMemoPtr)user)->l;

	mov	ecx, DWORD PTR _user$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ref_list$[ebp], edx

; 2896 : 
; 2897 :     if (attr0 == attr1) { /* Matched: remove and terminate walk */

	mov	eax, DWORD PTR _attr0$[ebp]
	cmp	eax, DWORD PTR _attr1$[ebp]
	jne	SHORT $LN2@xmlWalkRem

; 2898 :         xmlListRemoveFirst(ref_list, (void *)data);

	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ref_list$[ebp]
	push	edx
	call	_xmlListRemoveFirst
	add	esp, 8

; 2899 :         return 0;

	xor	eax, eax
	jmp	SHORT $LN1@xmlWalkRem
$LN2@xmlWalkRem:

; 2900 :     }
; 2901 :     return 1;

	mov	eax, 1
$LN1@xmlWalkRem:

; 2902 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlWalkRemoveRef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeRefTableEntry
_TEXT	SEGMENT
_list_ref$ = -4						; size = 4
_payload$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlFreeRefTableEntry PROC				; COMDAT

; 2877 : xmlFreeRefTableEntry(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2878 :     xmlListPtr list_ref = (xmlListPtr) payload;

	mov	eax, DWORD PTR _payload$[ebp]
	mov	DWORD PTR _list_ref$[ebp], eax

; 2879 :     if (list_ref == NULL) return;

	cmp	DWORD PTR _list_ref$[ebp], 0
	jne	SHORT $LN2@xmlFreeRef
	jmp	SHORT $LN1@xmlFreeRef
$LN2@xmlFreeRef:

; 2880 :     xmlListDelete(list_ref);

	mov	ecx, DWORD PTR _list_ref$[ebp]
	push	ecx
	call	_xmlListDelete
	add	esp, 4
$LN1@xmlFreeRef:

; 2881 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlFreeRefTableEntry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeRef
_TEXT	SEGMENT
_ref$ = -4						; size = 4
_lk$ = 8						; size = 4
_xmlFreeRef PROC					; COMDAT

; 2860 : xmlFreeRef(xmlLinkPtr lk) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2861 :     xmlRefPtr ref = (xmlRefPtr)xmlLinkGetData(lk);

	mov	eax, DWORD PTR _lk$[ebp]
	push	eax
	call	_xmlLinkGetData
	add	esp, 4
	mov	DWORD PTR _ref$[ebp], eax

; 2862 :     if (ref == NULL) return;

	cmp	DWORD PTR _ref$[ebp], 0
	jne	SHORT $LN2@xmlFreeRef
	jmp	SHORT $LN1@xmlFreeRef
$LN2@xmlFreeRef:

; 2863 :     if (ref->value != NULL)

	mov	ecx, DWORD PTR _ref$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN3@xmlFreeRef

; 2864 :         xmlFree((xmlChar *)ref->value);

	mov	esi, esp
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlFreeRef:

; 2865 :     if (ref->name != NULL)

	mov	ecx, DWORD PTR _ref$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN4@xmlFreeRef

; 2866 :         xmlFree((xmlChar *)ref->name);

	mov	esi, esp
	mov	edx, DWORD PTR _ref$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlFreeRef:

; 2867 :     xmlFree(ref);

	mov	esi, esp
	mov	ecx, DWORD PTR _ref$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlFreeRef:

; 2868 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlFreeRef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeIDTableEntry
_TEXT	SEGMENT
_id$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlFreeIDTableEntry PROC				; COMDAT

; 2675 : xmlFreeIDTableEntry(void *id, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2676 :     xmlFreeID((xmlIDPtr) id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_xmlFreeID
	add	esp, 4

; 2677 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeIDTableEntry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeID
_TEXT	SEGMENT
_dict$ = -4						; size = 4
_id$ = 8						; size = 4
_xmlFreeID PROC						; COMDAT

; 2574 : xmlFreeID(xmlIDPtr id) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2575 :     xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0

; 2576 : 
; 2577 :     if (id == NULL) return;

	cmp	DWORD PTR _id$[ebp], 0
	jne	SHORT $LN2@xmlFreeID
	jmp	$LN1@xmlFreeID
$LN2@xmlFreeID:

; 2578 : 
; 2579 :     if (id->doc != NULL)

	mov	eax, DWORD PTR _id$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@xmlFreeID

; 2580 :         dict = id->doc->dict;

	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR _dict$[ebp], eax
$LN3@xmlFreeID:

; 2581 : 
; 2582 :     if (id->value != NULL)

	mov	ecx, DWORD PTR _id$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN4@xmlFreeID

; 2583 : 	DICT_FREE(id->value)

	mov	edx, DWORD PTR _id$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN4@xmlFreeID
	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN6@xmlFreeID
	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@xmlFreeID
$LN6@xmlFreeID:
	mov	esi, esp
	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlFreeID:

; 2584 :     if (id->name != NULL)

	mov	edx, DWORD PTR _id$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN7@xmlFreeID

; 2585 : 	DICT_FREE(id->name)

	mov	eax, DWORD PTR _id$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN7@xmlFreeID
	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN9@xmlFreeID
	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _dict$[ebp]
	push	eax
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN7@xmlFreeID
$LN9@xmlFreeID:
	mov	esi, esp
	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@xmlFreeID:

; 2586 :     xmlFree(id);

	mov	esi, esp
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlFreeID:

; 2587 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlFreeID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpNotationDeclScan
_TEXT	SEGMENT
_nota$ = 8						; size = 4
_buf$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlDumpNotationDeclScan PROC				; COMDAT

; 2531 :                         const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2532 :     xmlDumpNotationDecl((xmlBufferPtr) buf, (xmlNotationPtr) nota);

	mov	eax, DWORD PTR _nota$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlDumpNotationDecl
	add	esp, 8

; 2533 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDumpNotationDeclScan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCopyNotation
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_nota$ = -4						; size = 4
_payload$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlCopyNotation PROC					; COMDAT

; 2456 : xmlCopyNotation(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2457 :     xmlNotationPtr nota = (xmlNotationPtr) payload;

	mov	eax, DWORD PTR _payload$[ebp]
	mov	DWORD PTR _nota$[ebp], eax

; 2458 :     xmlNotationPtr cur;
; 2459 : 
; 2460 :     cur = (xmlNotationPtr) xmlMalloc(sizeof(xmlNotation));

	mov	esi, esp
	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur$[ebp], eax

; 2461 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlCopyNot

; 2462 : 	xmlVErrMemory(NULL, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 2463 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlCopyNot
$LN2@xmlCopyNot:

; 2464 :     }
; 2465 :     if (nota->name != NULL)

	mov	ecx, DWORD PTR _nota$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN3@xmlCopyNot

; 2466 : 	cur->name = xmlStrdup(nota->name);

	mov	edx, DWORD PTR _nota$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN4@xmlCopyNot
$LN3@xmlCopyNot:

; 2467 :     else
; 2468 : 	cur->name = NULL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx], 0
$LN4@xmlCopyNot:

; 2469 :     if (nota->PublicID != NULL)

	mov	eax, DWORD PTR _nota$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN5@xmlCopyNot

; 2470 : 	cur->PublicID = xmlStrdup(nota->PublicID);

	mov	ecx, DWORD PTR _nota$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN6@xmlCopyNot
$LN5@xmlCopyNot:

; 2471 :     else
; 2472 : 	cur->PublicID = NULL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN6@xmlCopyNot:

; 2473 :     if (nota->SystemID != NULL)

	mov	eax, DWORD PTR _nota$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN7@xmlCopyNot

; 2474 : 	cur->SystemID = xmlStrdup(nota->SystemID);

	mov	ecx, DWORD PTR _nota$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+8], eax
	jmp	SHORT $LN8@xmlCopyNot
$LN7@xmlCopyNot:

; 2475 :     else
; 2476 : 	cur->SystemID = NULL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+8], 0
$LN8@xmlCopyNot:

; 2477 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlCopyNot:

; 2478 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlCopyNotation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeNotationTableEntry
_TEXT	SEGMENT
_nota$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlFreeNotationTableEntry PROC				; COMDAT

; 2431 : xmlFreeNotationTableEntry(void *nota, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2432 :     xmlFreeNotation((xmlNotationPtr) nota);

	mov	eax, DWORD PTR _nota$[ebp]
	push	eax
	call	_xmlFreeNotation
	add	esp, 4

; 2433 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeNotationTableEntry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeNotation
_TEXT	SEGMENT
_nota$ = 8						; size = 4
_xmlFreeNotation PROC					; COMDAT

; 2340 : xmlFreeNotation(xmlNotationPtr nota) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2341 :     if (nota == NULL) return;

	cmp	DWORD PTR _nota$[ebp], 0
	jne	SHORT $LN2@xmlFreeNot
	jmp	SHORT $LN1@xmlFreeNot
$LN2@xmlFreeNot:

; 2342 :     if (nota->name != NULL)

	mov	eax, DWORD PTR _nota$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlFreeNot

; 2343 : 	xmlFree((xmlChar *) nota->name);

	mov	esi, esp
	mov	ecx, DWORD PTR _nota$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlFreeNot:

; 2344 :     if (nota->PublicID != NULL)

	mov	eax, DWORD PTR _nota$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@xmlFreeNot

; 2345 : 	xmlFree((xmlChar *) nota->PublicID);

	mov	esi, esp
	mov	ecx, DWORD PTR _nota$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlFreeNot:

; 2346 :     if (nota->SystemID != NULL)

	mov	eax, DWORD PTR _nota$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@xmlFreeNot

; 2347 : 	xmlFree((xmlChar *) nota->SystemID);

	mov	esi, esp
	mov	ecx, DWORD PTR _nota$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlFreeNot:

; 2348 :     xmlFree(nota);

	mov	esi, esp
	mov	eax, DWORD PTR _nota$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlFreeNot:

; 2349 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeNotation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpAttributeDeclScan
_TEXT	SEGMENT
_attr$ = 8						; size = 4
_buf$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlDumpAttributeDeclScan PROC				; COMDAT

; 2309 :                          const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2310 :     xmlDumpAttributeDecl((xmlBufferPtr) buf, (xmlAttributePtr) attr);

	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlDumpAttributeDecl
	add	esp, 8

; 2311 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDumpAttributeDeclScan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCopyAttribute
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_attr$ = -4						; size = 4
_payload$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlCopyAttribute PROC					; COMDAT

; 2178 : xmlCopyAttribute(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2179 :     xmlAttributePtr attr = (xmlAttributePtr) payload;

	mov	eax, DWORD PTR _payload$[ebp]
	mov	DWORD PTR _attr$[ebp], eax

; 2180 :     xmlAttributePtr cur;
; 2181 : 
; 2182 :     cur = (xmlAttributePtr) xmlMalloc(sizeof(xmlAttribute));

	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur$[ebp], eax

; 2183 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlCopyAtt

; 2184 : 	xmlVErrMemory(NULL, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 2185 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlCopyAtt
$LN2@xmlCopyAtt:

; 2186 :     }
; 2187 :     memset(cur, 0, sizeof(xmlAttribute));

	push	64					; 00000040H
	push	0
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 2188 :     cur->type = XML_ATTRIBUTE_DECL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], 16			; 00000010H

; 2189 :     cur->atype = attr->atype;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+40], edx

; 2190 :     cur->def = attr->def;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+44], edx

; 2191 :     cur->tree = xmlCopyEnumeration(attr->tree);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_xmlCopyEnumeration
	add	esp, 4
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+52], eax

; 2192 :     if (attr->elem != NULL)

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN3@xmlCopyAtt

; 2193 : 	cur->elem = xmlStrdup(attr->elem);

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN3@xmlCopyAtt:

; 2194 :     if (attr->name != NULL)

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN4@xmlCopyAtt

; 2195 : 	cur->name = xmlStrdup(attr->name);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN4@xmlCopyAtt:

; 2196 :     if (attr->prefix != NULL)

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN5@xmlCopyAtt

; 2197 : 	cur->prefix = xmlStrdup(attr->prefix);

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+56], eax
$LN5@xmlCopyAtt:

; 2198 :     if (attr->defaultValue != NULL)

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN6@xmlCopyAtt

; 2199 : 	cur->defaultValue = xmlStrdup(attr->defaultValue);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+48], eax
$LN6@xmlCopyAtt:

; 2200 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlCopyAtt:

; 2201 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlCopyAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeAttributeTableEntry
_TEXT	SEGMENT
_attr$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlFreeAttributeTableEntry PROC			; COMDAT

; 2153 : xmlFreeAttributeTableEntry(void *attr, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2154 :     xmlFreeAttribute((xmlAttributePtr) attr);

	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	call	_xmlFreeAttribute
	add	esp, 4

; 2155 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeAttributeTableEntry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeAttribute
_TEXT	SEGMENT
_dict$ = -4						; size = 4
_attr$ = 8						; size = 4
_xmlFreeAttribute PROC					; COMDAT

; 1885 : xmlFreeAttribute(xmlAttributePtr attr) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1886 :     xmlDictPtr dict;
; 1887 : 
; 1888 :     if (attr == NULL) return;

	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN2@xmlFreeAtt
	jmp	$LN1@xmlFreeAtt
$LN2@xmlFreeAtt:

; 1889 :     if (attr->doc != NULL)

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN3@xmlFreeAtt

; 1890 : 	dict = attr->doc->dict;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR _dict$[ebp], eax
	jmp	SHORT $LN4@xmlFreeAtt
$LN3@xmlFreeAtt:

; 1891 :     else
; 1892 : 	dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0
$LN4@xmlFreeAtt:

; 1893 :     xmlUnlinkNode((xmlNodePtr) attr);

	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	call	_xmlUnlinkNode
	add	esp, 4

; 1894 :     if (attr->tree != NULL)

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN5@xmlFreeAtt

; 1895 :         xmlFreeEnumeration(attr->tree);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_xmlFreeEnumeration
	add	esp, 4
$LN5@xmlFreeAtt:

; 1896 :     if (dict) {

	cmp	DWORD PTR _dict$[ebp], 0
	je	$LN6@xmlFreeAtt

; 1897 :         if ((attr->elem != NULL) && (!xmlDictOwns(dict, attr->elem)))

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN8@xmlFreeAtt
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@xmlFreeAtt

; 1898 : 	    xmlFree((xmlChar *) attr->elem);

	mov	esi, esp
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@xmlFreeAtt:

; 1899 :         if ((attr->name != NULL) && (!xmlDictOwns(dict, attr->name)))

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN9@xmlFreeAtt
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@xmlFreeAtt

; 1900 : 	    xmlFree((xmlChar *) attr->name);

	mov	esi, esp
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@xmlFreeAtt:

; 1901 :         if ((attr->prefix != NULL) && (!xmlDictOwns(dict, attr->prefix)))

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN10@xmlFreeAtt
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@xmlFreeAtt

; 1902 : 	    xmlFree((xmlChar *) attr->prefix);

	mov	esi, esp
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@xmlFreeAtt:

; 1903 :         if ((attr->defaultValue != NULL) &&

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN11@xmlFreeAtt
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@xmlFreeAtt

; 1904 : 	    (!xmlDictOwns(dict, attr->defaultValue)))
; 1905 : 	    xmlFree((xmlChar *) attr->defaultValue);

	mov	esi, esp
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlFreeAtt:

; 1906 :     } else {

	jmp	$LN7@xmlFreeAtt
$LN6@xmlFreeAtt:

; 1907 : 	if (attr->elem != NULL)

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN12@xmlFreeAtt

; 1908 : 	    xmlFree((xmlChar *) attr->elem);

	mov	esi, esp
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlFreeAtt:

; 1909 : 	if (attr->name != NULL)

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN13@xmlFreeAtt

; 1910 : 	    xmlFree((xmlChar *) attr->name);

	mov	esi, esp
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlFreeAtt:

; 1911 : 	if (attr->defaultValue != NULL)

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN14@xmlFreeAtt

; 1912 : 	    xmlFree((xmlChar *) attr->defaultValue);

	mov	esi, esp
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@xmlFreeAtt:

; 1913 : 	if (attr->prefix != NULL)

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN7@xmlFreeAtt

; 1914 : 	    xmlFree((xmlChar *) attr->prefix);

	mov	esi, esp
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@xmlFreeAtt:

; 1915 :     }
; 1916 :     xmlFree(attr);

	mov	esi, esp
	mov	edx, DWORD PTR _attr$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlFreeAtt:

; 1917 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlFreeAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlScanIDAttributeDecl
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_elem$ = 12						; size = 4
_err$ = 16						; size = 4
_xmlScanIDAttributeDecl PROC				; COMDAT

; 1858 : xmlScanIDAttributeDecl(xmlValidCtxtPtr ctxt, xmlElementPtr elem, int err) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1859 :     xmlAttributePtr cur;
; 1860 :     int ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 1861 : 
; 1862 :     if (elem == NULL) return(0);

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN4@xmlScanIDA
	xor	eax, eax
	jmp	SHORT $LN1@xmlScanIDA
$LN4@xmlScanIDA:

; 1863 :     cur = elem->attributes;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@xmlScanIDA:

; 1864 :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlScanIDA

; 1865 :         if (cur->atype == XML_ATTRIBUTE_ID) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+40], 2
	jne	SHORT $LN5@xmlScanIDA

; 1866 : 	    ret ++;

	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, 1
	mov	DWORD PTR _ret$[ebp], eax

; 1867 : 	    if ((ret > 1) && (err))

	cmp	DWORD PTR _ret$[ebp], 1
	jle	SHORT $LN5@xmlScanIDA
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN5@xmlScanIDA

; 1868 : 		xmlErrValidNode(ctxt, (xmlNodePtr) elem, XML_DTD_MULTIPLE_ID,

	push	0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0DE@EJGKGKMH@Element?5?$CFs?5has?5too?5many?5ID?5attr@
	push	520					; 00000208H
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN5@xmlScanIDA:

; 1869 : 	       "Element %s has too many ID attributes defined : %s\n",
; 1870 : 		       elem->name, cur->name, NULL);
; 1871 : 	}
; 1872 : 	cur = cur->nexth;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _cur$[ebp], edx

; 1873 :     }

	jmp	SHORT $LN2@xmlScanIDA
$LN3@xmlScanIDA:

; 1874 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlScanIDA:

; 1875 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlScanIDAttributeDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpEnumeration
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlDumpEnumeration PROC				; COMDAT

; 1831 : xmlDumpEnumeration(xmlBufferPtr buf, xmlEnumerationPtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1832 :     if ((buf == NULL) || (cur == NULL))

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN3@xmlDumpEnu
	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlDumpEnu
$LN3@xmlDumpEnu:

; 1833 :         return;

	jmp	SHORT $LN1@xmlDumpEnu
$LN2@xmlDumpEnu:

; 1834 : 
; 1835 :     xmlBufferWriteCHAR(buf, cur->name);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1836 :     if (cur->next == NULL)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@xmlDumpEnu

; 1837 : 	xmlBufferWriteChar(buf, ")");

	push	OFFSET ??_C@_01PKGAHCOL@?$CJ@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8
	jmp	SHORT $LN1@xmlDumpEnu
$LN4@xmlDumpEnu:

; 1838 :     else {
; 1839 : 	xmlBufferWriteChar(buf, " | ");

	push	OFFSET ??_C@_03LGOGDKEL@?5?$HM?5@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1840 : 	xmlDumpEnumeration(buf, cur->next);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlDumpEnumeration
	add	esp, 8
$LN1@xmlDumpEnu:

; 1841 :     }
; 1842 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDumpEnumeration ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpElementDeclScan
_TEXT	SEGMENT
_elem$ = 8						; size = 4
_buf$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlDumpElementDeclScan PROC				; COMDAT

; 1737 :                        const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1738 :     xmlDumpElementDecl((xmlBufferPtr) buf, (xmlElementPtr) elem);

	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlDumpElementDecl
	add	esp, 8

; 1739 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDumpElementDeclScan ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCopyElement
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_elem$ = -4						; size = 4
_payload$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlCopyElement PROC					; COMDAT

; 1626 : xmlCopyElement(void *payload, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1627 :     xmlElementPtr elem = (xmlElementPtr) payload;

	mov	eax, DWORD PTR _payload$[ebp]
	mov	DWORD PTR _elem$[ebp], eax

; 1628 :     xmlElementPtr cur;
; 1629 : 
; 1630 :     cur = (xmlElementPtr) xmlMalloc(sizeof(xmlElement));

	mov	esi, esp
	push	56					; 00000038H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur$[ebp], eax

; 1631 :     if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlCopyEle

; 1632 : 	xmlVErrMemory(NULL, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 1633 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlCopyEle
$LN2@xmlCopyEle:

; 1634 :     }
; 1635 :     memset(cur, 0, sizeof(xmlElement));

	push	56					; 00000038H
	push	0
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 1636 :     cur->type = XML_ELEMENT_DECL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], 15			; 0000000fH

; 1637 :     cur->etype = elem->etype;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+36], edx

; 1638 :     if (elem->name != NULL)

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@xmlCopyEle

; 1639 : 	cur->name = xmlStrdup(elem->name);

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+8], eax
	jmp	SHORT $LN4@xmlCopyEle
$LN3@xmlCopyEle:

; 1640 :     else
; 1641 : 	cur->name = NULL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+8], 0
$LN4@xmlCopyEle:

; 1642 :     if (elem->prefix != NULL)

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN5@xmlCopyEle

; 1643 : 	cur->prefix = xmlStrdup(elem->prefix);

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+48], eax
	jmp	SHORT $LN6@xmlCopyEle
$LN5@xmlCopyEle:

; 1644 :     else
; 1645 : 	cur->prefix = NULL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+48], 0
$LN6@xmlCopyEle:

; 1646 :     cur->content = xmlCopyElementContent(elem->content);

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_xmlCopyElementContent
	add	esp, 4
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+40], eax

; 1647 :     /* TODO : rebuild the attribute list on the copy */
; 1648 :     cur->attributes = NULL;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+44], 0

; 1649 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlCopyEle:

; 1650 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlCopyElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeElementTableEntry
_TEXT	SEGMENT
_elem$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlFreeElementTableEntry PROC				; COMDAT

; 1601 : xmlFreeElementTableEntry(void *elem, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1602 :     xmlFreeElement((xmlElementPtr) elem);

	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	call	_xmlFreeElement
	add	esp, 4

; 1603 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeElementTableEntry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeElement
_TEXT	SEGMENT
_elem$ = 8						; size = 4
_xmlFreeElement PROC					; COMDAT

; 1358 : xmlFreeElement(xmlElementPtr elem) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1359 :     if (elem == NULL) return;

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN2@xmlFreeEle
	jmp	$LN1@xmlFreeEle
$LN2@xmlFreeEle:

; 1360 :     xmlUnlinkNode((xmlNodePtr) elem);

	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	call	_xmlUnlinkNode
	add	esp, 4

; 1361 :     xmlFreeDocElementContent(elem->doc, elem->content);

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlFreeDocElementContent
	add	esp, 8

; 1362 :     if (elem->name != NULL)

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN3@xmlFreeEle

; 1363 : 	xmlFree((xmlChar *) elem->name);

	mov	esi, esp
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlFreeEle:

; 1364 :     if (elem->prefix != NULL)

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN4@xmlFreeEle

; 1365 : 	xmlFree((xmlChar *) elem->prefix);

	mov	esi, esp
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlFreeEle:

; 1366 : #ifdef LIBXML_REGEXP_ENABLED
; 1367 :     if (elem->contModel != NULL)

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN5@xmlFreeEle

; 1368 : 	xmlRegFreeRegexp(elem->contModel);

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_xmlRegFreeRegexp
	add	esp, 4
$LN5@xmlFreeEle:

; 1369 : #endif
; 1370 :     xmlFree(elem);

	mov	esi, esp
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlFreeEle:

; 1371 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpElementContent
_TEXT	SEGMENT
tv198 = -8						; size = 4
tv69 = -4						; size = 4
_buf$ = 8						; size = 4
_content$ = 12						; size = 4
_glob$ = 16						; size = 4
_xmlDumpElementContent PROC				; COMDAT

; 1159 : xmlDumpElementContent(xmlBufferPtr buf, xmlElementContentPtr content, int glob) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1160 :     if (content == NULL) return;

	cmp	DWORD PTR _content$[ebp], 0
	jne	SHORT $LN6@xmlDumpEle
	jmp	$LN1@xmlDumpEle
$LN6@xmlDumpEle:

; 1161 : 
; 1162 :     if (glob) xmlBufferWriteChar(buf, "(");

	cmp	DWORD PTR _glob$[ebp], 0
	je	SHORT $LN7@xmlDumpEle
	push	OFFSET ??_C@_01ODHLEDKK@?$CI@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8
$LN7@xmlDumpEle:

; 1163 :     switch (content->type) {

	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv69[ebp], edx
	mov	eax, DWORD PTR tv69[ebp]
	sub	eax, 1
	mov	DWORD PTR tv69[ebp], eax
	cmp	DWORD PTR tv69[ebp], 3
	ja	$LN25@xmlDumpEle
	mov	ecx, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN32@xmlDumpEle[ecx*4]
$LN8@xmlDumpEle:

; 1164 :         case XML_ELEMENT_CONTENT_PCDATA:
; 1165 :             xmlBufferWriteChar(buf, "#PCDATA");

	push	OFFSET ??_C@_07ELDBONKP@?$CDPCDATA@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1166 : 	    break;

	jmp	$LN2@xmlDumpEle
$LN9@xmlDumpEle:

; 1167 : 	case XML_ELEMENT_CONTENT_ELEMENT:
; 1168 : 	    if (content->prefix != NULL) {

	mov	eax, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN10@xmlDumpEle

; 1169 : 		xmlBufferWriteCHAR(buf, content->prefix);

	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1170 : 		xmlBufferWriteChar(buf, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8
$LN10@xmlDumpEle:

; 1171 : 	    }
; 1172 : 	    xmlBufferWriteCHAR(buf, content->name);

	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1173 : 	    break;

	jmp	$LN2@xmlDumpEle
$LN11@xmlDumpEle:

; 1174 : 	case XML_ELEMENT_CONTENT_SEQ:
; 1175 : 	    if ((content->c1 != NULL) &&

	mov	edx, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN12@xmlDumpEle
	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN14@xmlDumpEle
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax], 3
	jne	SHORT $LN12@xmlDumpEle
$LN14@xmlDumpEle:

; 1176 : 	        ((content->c1->type == XML_ELEMENT_CONTENT_OR) ||
; 1177 : 	         (content->c1->type == XML_ELEMENT_CONTENT_SEQ)))
; 1178 : 		xmlDumpElementContent(buf, content->c1, 1);

	push	1
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN13@xmlDumpEle
$LN12@xmlDumpEle:

; 1179 : 	    else
; 1180 : 		xmlDumpElementContent(buf, content->c1, 0);

	push	0
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH
$LN13@xmlDumpEle:

; 1181 :             xmlBufferWriteChar(buf, " , ");

	push	OFFSET ??_C@_03NKFKBEPL@?5?0?5@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1182 : 	    if ((content->c2 != NULL) &&

	mov	edx, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN15@xmlDumpEle
	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN17@xmlDumpEle
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 3
	jne	SHORT $LN15@xmlDumpEle
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN15@xmlDumpEle
$LN17@xmlDumpEle:

; 1183 : 	        ((content->c2->type == XML_ELEMENT_CONTENT_OR) ||
; 1184 : 	         ((content->c2->type == XML_ELEMENT_CONTENT_SEQ) &&
; 1185 : 		  (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE))))
; 1186 : 		xmlDumpElementContent(buf, content->c2, 1);

	push	1
	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN16@xmlDumpEle
$LN15@xmlDumpEle:

; 1187 : 	    else
; 1188 : 		xmlDumpElementContent(buf, content->c2, 0);

	push	0
	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH
$LN16@xmlDumpEle:

; 1189 : 	    break;

	jmp	$LN2@xmlDumpEle
$LN18@xmlDumpEle:

; 1190 : 	case XML_ELEMENT_CONTENT_OR:
; 1191 : 	    if ((content->c1 != NULL) &&

	mov	eax, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN19@xmlDumpEle
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN21@xmlDumpEle
	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], 3
	jne	SHORT $LN19@xmlDumpEle
$LN21@xmlDumpEle:

; 1192 : 	        ((content->c1->type == XML_ELEMENT_CONTENT_OR) ||
; 1193 : 	         (content->c1->type == XML_ELEMENT_CONTENT_SEQ)))
; 1194 : 		xmlDumpElementContent(buf, content->c1, 1);

	push	1
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN20@xmlDumpEle
$LN19@xmlDumpEle:

; 1195 : 	    else
; 1196 : 		xmlDumpElementContent(buf, content->c1, 0);

	push	0
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH
$LN20@xmlDumpEle:

; 1197 :             xmlBufferWriteChar(buf, " | ");

	push	OFFSET ??_C@_03LGOGDKEL@?5?$HM?5@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1198 : 	    if ((content->c2 != NULL) &&

	mov	eax, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN22@xmlDumpEle
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN24@xmlDumpEle
	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx], 4
	jne	SHORT $LN22@xmlDumpEle
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN22@xmlDumpEle
$LN24@xmlDumpEle:

; 1199 : 	        ((content->c2->type == XML_ELEMENT_CONTENT_SEQ) ||
; 1200 : 	         ((content->c2->type == XML_ELEMENT_CONTENT_OR) &&
; 1201 : 		  (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE))))
; 1202 : 		xmlDumpElementContent(buf, content->c2, 1);

	push	1
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN23@xmlDumpEle
$LN22@xmlDumpEle:

; 1203 : 	    else
; 1204 : 		xmlDumpElementContent(buf, content->c2, 0);

	push	0
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH
$LN23@xmlDumpEle:

; 1205 : 	    break;

	jmp	SHORT $LN2@xmlDumpEle
$LN25@xmlDumpEle:

; 1206 : 	default:
; 1207 : 	    xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0DC@GLPLFDD@Internal?3?5ELEMENT?5content?5corru@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H
$LN2@xmlDumpEle:

; 1208 : 		    "Internal: ELEMENT content corrupted invalid type\n",
; 1209 : 		    NULL);
; 1210 :     }
; 1211 :     if (glob)

	cmp	DWORD PTR _glob$[ebp], 0
	je	SHORT $LN26@xmlDumpEle

; 1212 :         xmlBufferWriteChar(buf, ")");

	push	OFFSET ??_C@_01PKGAHCOL@?$CJ@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8
$LN26@xmlDumpEle:

; 1213 :     switch (content->ocur) {

	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv198[ebp], eax
	cmp	DWORD PTR tv198[ebp], 2
	je	SHORT $LN28@xmlDumpEle
	cmp	DWORD PTR tv198[ebp], 3
	je	SHORT $LN29@xmlDumpEle
	cmp	DWORD PTR tv198[ebp], 4
	je	SHORT $LN30@xmlDumpEle
	jmp	SHORT $LN1@xmlDumpEle

; 1214 :         case XML_ELEMENT_CONTENT_ONCE:
; 1215 : 	    break;

	jmp	SHORT $LN1@xmlDumpEle
$LN28@xmlDumpEle:

; 1216 :         case XML_ELEMENT_CONTENT_OPT:
; 1217 : 	    xmlBufferWriteChar(buf, "?");

	push	OFFSET ??_C@_01OGPIMHDM@?$DP@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1218 : 	    break;

	jmp	SHORT $LN1@xmlDumpEle
$LN29@xmlDumpEle:

; 1219 :         case XML_ELEMENT_CONTENT_MULT:
; 1220 : 	    xmlBufferWriteChar(buf, "*");

	push	OFFSET ??_C@_01NBENCBCI@?$CK@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1221 : 	    break;

	jmp	SHORT $LN1@xmlDumpEle
$LN30@xmlDumpEle:

; 1222 :         case XML_ELEMENT_CONTENT_PLUS:
; 1223 : 	    xmlBufferWriteChar(buf, "+");

	push	OFFSET ??_C@_01MIFGBAGJ@?$CL@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8
$LN1@xmlDumpEle:

; 1224 : 	    break;
; 1225 :     }
; 1226 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN32@xmlDumpEle:
	DD	$LN8@xmlDumpEle
	DD	$LN9@xmlDumpEle
	DD	$LN11@xmlDumpEle
	DD	$LN18@xmlDumpEle
_xmlDumpElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidBuildAContentModel
_TEXT	SEGMENT
tv282 = -108						; size = 4
tv216 = -104						; size = 4
tv93 = -100						; size = 4
tv73 = -96						; size = 4
_ocur$1 = -92						; size = 4
_oldend$2 = -88						; size = 4
_oldstate$3 = -84					; size = 4
_ocur$4 = -80						; size = 4
_oldend$5 = -76						; size = 4
_oldstate$6 = -72					; size = 4
_fullname$7 = -68					; size = 4
_fn$8 = -60						; size = 50
_oldstate$9 = -4					; size = 4
_content$ = 8						; size = 4
_ctxt$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlValidBuildAContentModel PROC			; COMDAT

; 661  : 		           const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-108]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 662  :     if (content == NULL) {

	cmp	DWORD PTR _content$[ebp], 0
	jne	SHORT $LN16@xmlValidBu

; 663  : 	xmlErrValidNode(ctxt, NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CL@FIAOIAHN@Found?5NULL?5content?5in?5content?5m@
	push	1
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 664  : 			"Found NULL content in content model of %s\n",
; 665  : 			name, NULL, NULL);
; 666  : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidBu
$LN16@xmlValidBu:

; 667  :     }
; 668  :     switch (content->type) {

	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR tv73[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv73[ebp], ecx
	cmp	DWORD PTR tv73[ebp], 3
	ja	$LN40@xmlValidBu
	mov	edx, DWORD PTR tv73[ebp]
	jmp	DWORD PTR $LN45@xmlValidBu[edx*4]
$LN17@xmlValidBu:

; 669  : 	case XML_ELEMENT_CONTENT_PCDATA:
; 670  : 	    xmlErrValidNode(ctxt, NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@IIHAKBAI@Found?5PCDATA?5in?5content?5model?5o@
	push	1
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 671  : 			    "Found PCDATA in content model of %s\n",
; 672  : 		            name, NULL, NULL);
; 673  : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidBu

; 674  : 	    break;

	jmp	$LN2@xmlValidBu
$LN18@xmlValidBu:

; 675  : 	case XML_ELEMENT_CONTENT_ELEMENT: {
; 676  : 	    xmlAutomataStatePtr oldstate = ctxt->state;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _oldstate$9[ebp], eax

; 677  : 	    xmlChar fn[50];
; 678  : 	    xmlChar *fullname;
; 679  : 
; 680  : 	    fullname = xmlBuildQName(content->name, content->prefix, fn, 50);

	push	50					; 00000032H
	lea	ecx, DWORD PTR _fn$8[ebp]
	push	ecx
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$7[ebp], eax

; 681  : 	    if (fullname == NULL) {

	cmp	DWORD PTR _fullname$7[ebp], 0
	jne	SHORT $LN19@xmlValidBu

; 682  : 	        xmlVErrMemory(ctxt, "Building content model");

	push	OFFSET ??_C@_0BH@INHICIGB@Building?5content?5model@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlVErrMemory
	add	esp, 8

; 683  : 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidBu
$LN19@xmlValidBu:

; 684  : 	    }
; 685  : 
; 686  : 	    switch (content->ocur) {

	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv93[ebp], edx
	mov	eax, DWORD PTR tv93[ebp]
	sub	eax, 1
	mov	DWORD PTR tv93[ebp], eax
	cmp	DWORD PTR tv93[ebp], 3
	ja	$LN4@xmlValidBu
	mov	ecx, DWORD PTR tv93[ebp]
	jmp	DWORD PTR $LN46@xmlValidBu[ecx*4]
$LN20@xmlValidBu:

; 687  : 		case XML_ELEMENT_CONTENT_ONCE:
; 688  : 		    ctxt->state = xmlAutomataNewTransition(ctxt->am,

	push	0
	mov	edx, DWORD PTR _fullname$7[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlAutomataNewTransition
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 689  : 			    ctxt->state, NULL, fullname, NULL);
; 690  : 		    break;

	jmp	$LN4@xmlValidBu
$LN21@xmlValidBu:

; 691  : 		case XML_ELEMENT_CONTENT_OPT:
; 692  : 		    ctxt->state = xmlAutomataNewTransition(ctxt->am,

	push	0
	mov	edx, DWORD PTR _fullname$7[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlAutomataNewTransition
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 693  : 			    ctxt->state, NULL, fullname, NULL);
; 694  : 		    xmlAutomataNewEpsilon(ctxt->am, oldstate, ctxt->state);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _oldstate$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH

; 695  : 		    break;

	jmp	$LN4@xmlValidBu
$LN22@xmlValidBu:

; 696  : 		case XML_ELEMENT_CONTENT_PLUS:
; 697  : 		    ctxt->state = xmlAutomataNewTransition(ctxt->am,

	push	0
	mov	ecx, DWORD PTR _fullname$7[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlAutomataNewTransition
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 698  : 			    ctxt->state, NULL, fullname, NULL);
; 699  : 		    xmlAutomataNewTransition(ctxt->am, ctxt->state,

	push	0
	mov	edx, DWORD PTR _fullname$7[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlAutomataNewTransition
	add	esp, 20					; 00000014H

; 700  : 			                     ctxt->state, fullname, NULL);
; 701  : 		    break;

	jmp	SHORT $LN4@xmlValidBu
$LN23@xmlValidBu:

; 702  : 		case XML_ELEMENT_CONTENT_MULT:
; 703  : 		    ctxt->state = xmlAutomataNewEpsilon(ctxt->am,

	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 704  : 					    ctxt->state, NULL);
; 705  : 		    xmlAutomataNewTransition(ctxt->am,

	push	0
	mov	edx, DWORD PTR _fullname$7[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlAutomataNewTransition
	add	esp, 20					; 00000014H
$LN4@xmlValidBu:

; 706  : 			    ctxt->state, ctxt->state, fullname, NULL);
; 707  : 		    break;
; 708  : 	    }
; 709  : 	    if ((fullname != fn) && (fullname != content->name))

	lea	eax, DWORD PTR _fn$8[ebp]
	cmp	DWORD PTR _fullname$7[ebp], eax
	je	SHORT $LN24@xmlValidBu
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR _fullname$7[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN24@xmlValidBu

; 710  : 		xmlFree(fullname);

	mov	esi, esp
	mov	eax, DWORD PTR _fullname$7[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@xmlValidBu:

; 711  : 	    break;

	jmp	$LN2@xmlValidBu
$LN25@xmlValidBu:

; 712  : 	}
; 713  : 	case XML_ELEMENT_CONTENT_SEQ: {
; 714  : 	    xmlAutomataStatePtr oldstate, oldend;
; 715  : 	    xmlElementContentOccur ocur;
; 716  : 
; 717  : 	    /*
; 718  : 	     * Simply iterate over the content
; 719  : 	     */
; 720  : 	    oldstate = ctxt->state;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _oldstate$6[ebp], edx

; 721  : 	    ocur = content->ocur;

	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ocur$4[ebp], ecx

; 722  : 	    if (ocur != XML_ELEMENT_CONTENT_ONCE) {

	cmp	DWORD PTR _ocur$4[ebp], 1
	je	SHORT $LN8@xmlValidBu

; 723  : 		ctxt->state = xmlAutomataNewEpsilon(ctxt->am, oldstate, NULL);

	push	0
	mov	edx, DWORD PTR _oldstate$6[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+60], eax

; 724  : 		oldstate = ctxt->state;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _oldstate$6[ebp], ecx
$LN8@xmlValidBu:

; 725  : 	    }
; 726  : 	    do {
; 727  : 		xmlValidBuildAContentModel(content->c1, ctxt, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlValidBuildAContentModel
	add	esp, 12					; 0000000cH

; 728  : 		content = content->c2;

	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _content$[ebp], ecx

; 729  : 	    } while ((content->type == XML_ELEMENT_CONTENT_SEQ) &&

	mov	edx, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [edx], 3
	jne	SHORT $LN7@xmlValidBu
	mov	eax, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN8@xmlValidBu
$LN7@xmlValidBu:

; 730  : 		     (content->ocur == XML_ELEMENT_CONTENT_ONCE));
; 731  : 	    xmlValidBuildAContentModel(content, ctxt, name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	mov	eax, DWORD PTR _content$[ebp]
	push	eax
	call	_xmlValidBuildAContentModel
	add	esp, 12					; 0000000cH

; 732  : 	    oldend = ctxt->state;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	mov	DWORD PTR _oldend$5[ebp], edx

; 733  : 	    ctxt->state = xmlAutomataNewEpsilon(ctxt->am, oldend, NULL);

	push	0
	mov	eax, DWORD PTR _oldend$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 734  : 	    switch (ocur) {

	mov	edx, DWORD PTR _ocur$4[ebp]
	mov	DWORD PTR tv216[ebp], edx
	cmp	DWORD PTR tv216[ebp], 2
	je	SHORT $LN29@xmlValidBu
	cmp	DWORD PTR tv216[ebp], 3
	je	SHORT $LN30@xmlValidBu
	cmp	DWORD PTR tv216[ebp], 4
	je	SHORT $LN31@xmlValidBu
	jmp	SHORT $LN9@xmlValidBu

; 735  : 		case XML_ELEMENT_CONTENT_ONCE:
; 736  : 		    break;

	jmp	SHORT $LN9@xmlValidBu
$LN29@xmlValidBu:

; 737  : 		case XML_ELEMENT_CONTENT_OPT:
; 738  : 		    xmlAutomataNewEpsilon(ctxt->am, oldstate, ctxt->state);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _oldstate$6[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH

; 739  : 		    break;

	jmp	SHORT $LN9@xmlValidBu
$LN30@xmlValidBu:

; 740  : 		case XML_ELEMENT_CONTENT_MULT:
; 741  : 		    xmlAutomataNewEpsilon(ctxt->am, oldstate, ctxt->state);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _oldstate$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH

; 742  : 		    xmlAutomataNewEpsilon(ctxt->am, oldend, oldstate);

	mov	ecx, DWORD PTR _oldstate$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldend$5[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH

; 743  : 		    break;

	jmp	SHORT $LN9@xmlValidBu
$LN31@xmlValidBu:

; 744  : 		case XML_ELEMENT_CONTENT_PLUS:
; 745  : 		    xmlAutomataNewEpsilon(ctxt->am, oldend, oldstate);

	mov	edx, DWORD PTR _oldstate$6[ebp]
	push	edx
	mov	eax, DWORD PTR _oldend$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH
$LN9@xmlValidBu:

; 746  : 		    break;
; 747  : 	    }
; 748  : 	    break;

	jmp	$LN2@xmlValidBu
$LN32@xmlValidBu:

; 749  : 	}
; 750  : 	case XML_ELEMENT_CONTENT_OR: {
; 751  : 	    xmlAutomataStatePtr oldstate, oldend;
; 752  : 	    xmlElementContentOccur ocur;
; 753  : 
; 754  : 	    ocur = content->ocur;

	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _ocur$1[ebp], ecx

; 755  : 	    if ((ocur == XML_ELEMENT_CONTENT_PLUS) ||

	cmp	DWORD PTR _ocur$1[ebp], 4
	je	SHORT $LN34@xmlValidBu
	cmp	DWORD PTR _ocur$1[ebp], 3
	jne	SHORT $LN33@xmlValidBu
$LN34@xmlValidBu:

; 756  : 		(ocur == XML_ELEMENT_CONTENT_MULT)) {
; 757  : 		ctxt->state = xmlAutomataNewEpsilon(ctxt->am,

	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN33@xmlValidBu:

; 758  : 			ctxt->state, NULL);
; 759  : 	    }
; 760  : 	    oldstate = ctxt->state;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _oldstate$3[ebp], eax

; 761  : 	    oldend = xmlAutomataNewState(ctxt->am);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlAutomataNewState
	add	esp, 4
	mov	DWORD PTR _oldend$2[ebp], eax
$LN13@xmlValidBu:

; 762  : 
; 763  : 	    /*
; 764  : 	     * iterate over the subtypes and remerge the end with an
; 765  : 	     * epsilon transition
; 766  : 	     */
; 767  : 	    do {
; 768  : 		ctxt->state = oldstate;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _oldstate$3[ebp]
	mov	DWORD PTR [eax+60], ecx

; 769  : 		xmlValidBuildAContentModel(content->c1, ctxt, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlValidBuildAContentModel
	add	esp, 12					; 0000000cH

; 770  : 		xmlAutomataNewEpsilon(ctxt->am, ctxt->state, oldend);

	mov	eax, DWORD PTR _oldend$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH

; 771  : 		content = content->c2;

	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _content$[ebp], eax

; 772  : 	    } while ((content->type == XML_ELEMENT_CONTENT_OR) &&

	mov	ecx, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [ecx], 4
	jne	SHORT $LN12@xmlValidBu
	mov	edx, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN13@xmlValidBu
$LN12@xmlValidBu:

; 773  : 		     (content->ocur == XML_ELEMENT_CONTENT_ONCE));
; 774  : 	    ctxt->state = oldstate;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _oldstate$3[ebp]
	mov	DWORD PTR [eax+60], ecx

; 775  : 	    xmlValidBuildAContentModel(content, ctxt, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _content$[ebp]
	push	ecx
	call	_xmlValidBuildAContentModel
	add	esp, 12					; 0000000cH

; 776  : 	    xmlAutomataNewEpsilon(ctxt->am, ctxt->state, oldend);

	mov	edx, DWORD PTR _oldend$2[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH

; 777  : 	    ctxt->state = xmlAutomataNewEpsilon(ctxt->am, oldend, NULL);

	push	0
	mov	ecx, DWORD PTR _oldend$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 778  : 	    switch (ocur) {

	mov	edx, DWORD PTR _ocur$1[ebp]
	mov	DWORD PTR tv282[ebp], edx
	cmp	DWORD PTR tv282[ebp], 2
	je	SHORT $LN37@xmlValidBu
	cmp	DWORD PTR tv282[ebp], 3
	je	SHORT $LN38@xmlValidBu
	cmp	DWORD PTR tv282[ebp], 4
	je	SHORT $LN39@xmlValidBu
	jmp	SHORT $LN14@xmlValidBu

; 779  : 		case XML_ELEMENT_CONTENT_ONCE:
; 780  : 		    break;

	jmp	SHORT $LN14@xmlValidBu
$LN37@xmlValidBu:

; 781  : 		case XML_ELEMENT_CONTENT_OPT:
; 782  : 		    xmlAutomataNewEpsilon(ctxt->am, oldstate, ctxt->state);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _oldstate$3[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH

; 783  : 		    break;

	jmp	SHORT $LN14@xmlValidBu
$LN38@xmlValidBu:

; 784  : 		case XML_ELEMENT_CONTENT_MULT:
; 785  : 		    xmlAutomataNewEpsilon(ctxt->am, oldstate, ctxt->state);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _oldstate$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH

; 786  : 		    xmlAutomataNewEpsilon(ctxt->am, oldend, oldstate);

	mov	ecx, DWORD PTR _oldstate$3[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldend$2[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH

; 787  : 		    break;

	jmp	SHORT $LN14@xmlValidBu
$LN39@xmlValidBu:

; 788  : 		case XML_ELEMENT_CONTENT_PLUS:
; 789  : 		    xmlAutomataNewEpsilon(ctxt->am, oldend, oldstate);

	mov	edx, DWORD PTR _oldstate$3[ebp]
	push	edx
	mov	eax, DWORD PTR _oldend$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlAutomataNewEpsilon
	add	esp, 12					; 0000000cH
$LN14@xmlValidBu:

; 790  : 		    break;
; 791  : 	    }
; 792  : 	    break;

	jmp	SHORT $LN2@xmlValidBu
$LN40@xmlValidBu:

; 793  : 	}
; 794  : 	default:
; 795  : 	    xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0CE@LMBMADBI@ContentModel?5broken?5for?5element@
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 796  : 	                "ContentModel broken for element %s\n",
; 797  : 			(const char *) name);
; 798  : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidBu
$LN2@xmlValidBu:

; 799  :     }
; 800  :     return(1);

	mov	eax, 1
$LN1@xmlValidBu:

; 801  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN44@xmlValidBu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 108				; 0000006cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN44@xmlValidBu:
	DD	1
	DD	$LN43@xmlValidBu
$LN43@xmlValidBu:
	DD	-60					; ffffffc4H
	DD	50					; 00000032H
	DD	$LN42@xmlValidBu
$LN42@xmlValidBu:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
	npad	1
$LN45@xmlValidBu:
	DD	$LN17@xmlValidBu
	DD	$LN18@xmlValidBu
	DD	$LN25@xmlValidBu
	DD	$LN32@xmlValidBu
$LN46@xmlValidBu:
	DD	$LN20@xmlValidBu
	DD	$LN21@xmlValidBu
	DD	$LN23@xmlValidBu
	DD	$LN22@xmlValidBu
_xmlValidBuildAContentModel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _nodeVPop
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_nodeVPop PROC						; COMDAT

; 467  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 468  :     xmlNodePtr ret;
; 469  : 
; 470  :     if (ctxt->nodeNr <= 0)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jg	SHORT $LN2@nodeVPop

; 471  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@nodeVPop
$LN2@nodeVPop:

; 472  :     ctxt->nodeNr--;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	sub	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+16], edx

; 473  :     if (ctxt->nodeNr > 0)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jle	SHORT $LN3@nodeVPop

; 474  :         ctxt->node = ctxt->nodeTab[ctxt->nodeNr - 1];

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [edx+eax*4-4]
	mov	DWORD PTR [ecx+12], edx
	jmp	SHORT $LN4@nodeVPop
$LN3@nodeVPop:

; 475  :     else
; 476  :         ctxt->node = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+12], 0
$LN4@nodeVPop:

; 477  :     ret = ctxt->nodeTab[ctxt->nodeNr];

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _ret$[ebp], edx

; 478  :     ctxt->nodeTab[ctxt->nodeNr] = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+ecx*4], 0

; 479  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@nodeVPop:

; 480  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nodeVPop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _nodeVPush
_TEXT	SEGMENT
tv135 = -8						; size = 4
_tmp$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_value$ = 12						; size = 4
_nodeVPush PROC						; COMDAT

; 438  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 439  :     if (ctxt->nodeMax <= 0) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jg	SHORT $LN2@nodeVPush

; 440  :         ctxt->nodeMax = 4;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+20], 4

; 441  :         ctxt->nodeTab =

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shl	eax, 2
	mov	esi, esp
	push	eax
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 442  :             (xmlNodePtr *) xmlMalloc(ctxt->nodeMax *
; 443  :                                      sizeof(ctxt->nodeTab[0]));
; 444  :         if (ctxt->nodeTab == NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN2@nodeVPush

; 445  : 	    xmlVErrMemory(ctxt, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlVErrMemory
	add	esp, 8

; 446  :             ctxt->nodeMax = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+20], 0

; 447  :             return (0);

	xor	eax, eax
	jmp	$LN1@nodeVPush
$LN2@nodeVPush:

; 448  :         }
; 449  :     }
; 450  :     if (ctxt->nodeNr >= ctxt->nodeMax) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	cmp	ecx, DWORD PTR [eax+20]
	jl	SHORT $LN4@nodeVPush

; 451  :         xmlNodePtr *tmp;
; 452  :         tmp = (xmlNodePtr *) xmlRealloc(ctxt->nodeTab,

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+20]
	shl	eax, 1
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$1[ebp], eax

; 453  : 			      ctxt->nodeMax * 2 * sizeof(ctxt->nodeTab[0]));
; 454  :         if (tmp == NULL) {

	cmp	DWORD PTR _tmp$1[ebp], 0
	jne	SHORT $LN5@nodeVPush

; 455  : 	    xmlVErrMemory(ctxt, "realloc failed");

	push	OFFSET ??_C@_0P@BHJOIPMJ@realloc?5failed@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlVErrMemory
	add	esp, 8

; 456  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@nodeVPush
$LN5@nodeVPush:

; 457  :         }
; 458  :         ctxt->nodeMax *= 2;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	shl	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+20], edx

; 459  : 	ctxt->nodeTab = tmp;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [ecx+24], edx
$LN4@nodeVPush:

; 460  :     }
; 461  :     ctxt->nodeTab[ctxt->nodeNr] = value;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx

; 462  :     ctxt->node = value;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 463  :     return (ctxt->nodeNr++);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv135[ebp], eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+16], edx
	mov	eax, DWORD PTR tv135[ebp]
$LN1@nodeVPush:

; 464  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_nodeVPush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _vstateVPop
_TEXT	SEGMENT
_elemDecl$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_vstateVPop PROC					; COMDAT

; 318  : vstateVPop(xmlValidCtxtPtr ctxt) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 319  :     xmlElementPtr elemDecl;
; 320  : 
; 321  :     if (ctxt->vstateNr < 1) return(-1);

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+44], 1
	jge	SHORT $LN2@vstateVPop
	or	eax, -1
	jmp	$LN1@vstateVPop
$LN2@vstateVPop:

; 322  :     ctxt->vstateNr--;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+44], edx

; 323  :     elemDecl = ctxt->vstateTab[ctxt->vstateNr].elemDecl;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	imul	edx, DWORD PTR [ecx+44], 12
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR [ecx+edx]
	mov	DWORD PTR _elemDecl$[ebp], edx

; 324  :     ctxt->vstateTab[ctxt->vstateNr].elemDecl = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	imul	ecx, DWORD PTR [eax+44], 12
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [eax+ecx], 0

; 325  :     ctxt->vstateTab[ctxt->vstateNr].node = NULL;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	imul	edx, DWORD PTR [ecx+44], 12
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [ecx+edx+4], 0

; 326  :     if ((elemDecl != NULL) && (elemDecl->etype == XML_ELEMENT_TYPE_ELEMENT)) {

	cmp	DWORD PTR _elemDecl$[ebp], 0
	je	SHORT $LN3@vstateVPop
	mov	edx, DWORD PTR _elemDecl$[ebp]
	cmp	DWORD PTR [edx+36], 4
	jne	SHORT $LN3@vstateVPop

; 327  : 	xmlRegFreeExecCtxt(ctxt->vstateTab[ctxt->vstateNr].exec);

	mov	eax, DWORD PTR _ctxt$[ebp]
	imul	ecx, DWORD PTR [eax+44], 12
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+ecx+8]
	push	ecx
	call	_xmlRegFreeExecCtxt
	add	esp, 4
$LN3@vstateVPop:

; 328  :     }
; 329  :     ctxt->vstateTab[ctxt->vstateNr].exec = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	imul	eax, DWORD PTR [edx+44], 12
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [edx+eax+8], 0

; 330  :     if (ctxt->vstateNr >= 1)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+44], 1
	jl	SHORT $LN4@vstateVPop

; 331  : 	ctxt->vstate = &ctxt->vstateTab[ctxt->vstateNr - 1];

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	sub	edx, 1
	imul	eax, edx, 12
	mov	ecx, DWORD PTR _ctxt$[ebp]
	add	eax, DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+40], eax
	jmp	SHORT $LN5@vstateVPop
$LN4@vstateVPop:

; 332  :     else
; 333  : 	ctxt->vstate = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+40], 0
$LN5@vstateVPop:

; 334  :     return(ctxt->vstateNr);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [ecx+44]
$LN1@vstateVPop:

; 335  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_vstateVPop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _vstateVPush
_TEXT	SEGMENT
tv178 = -8						; size = 4
_tmp$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_elemDecl$ = 12						; size = 4
_node$ = 16						; size = 4
_vstateVPush PROC					; COMDAT

; 274  : vstateVPush(xmlValidCtxtPtr ctxt, xmlElementPtr elemDecl, xmlNodePtr node) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 275  :     if ((ctxt->vstateMax == 0) || (ctxt->vstateTab == NULL)) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN3@vstateVPus
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	jne	SHORT $LN2@vstateVPus
$LN3@vstateVPus:

; 276  : 	ctxt->vstateMax = 10;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+48], 10			; 0000000aH

; 277  : 	ctxt->vstateTab = (xmlValidState *) xmlMalloc(ctxt->vstateMax *

	mov	eax, DWORD PTR _ctxt$[ebp]
	imul	ecx, DWORD PTR [eax+48], 12
	mov	esi, esp
	push	ecx
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+52], eax

; 278  : 		              sizeof(ctxt->vstateTab[0]));
; 279  :         if (ctxt->vstateTab == NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN2@vstateVPus

; 280  : 	    xmlVErrMemory(ctxt, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlVErrMemory
	add	esp, 8

; 281  : 	    return(-1);

	or	eax, -1
	jmp	$LN1@vstateVPus
$LN2@vstateVPus:

; 282  : 	}
; 283  :     }
; 284  : 
; 285  :     if (ctxt->vstateNr >= ctxt->vstateMax) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	cmp	ecx, DWORD PTR [eax+48]
	jl	SHORT $LN5@vstateVPus

; 286  :         xmlValidState *tmp;
; 287  : 
; 288  : 	tmp = (xmlValidState *) xmlRealloc(ctxt->vstateTab,

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shl	eax, 1
	imul	ecx, eax, 12
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$1[ebp], eax

; 289  : 	             2 * ctxt->vstateMax * sizeof(ctxt->vstateTab[0]));
; 290  :         if (tmp == NULL) {

	cmp	DWORD PTR _tmp$1[ebp], 0
	jne	SHORT $LN6@vstateVPus

; 291  : 	    xmlVErrMemory(ctxt, "realloc failed");

	push	OFFSET ??_C@_0P@BHJOIPMJ@realloc?5failed@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlVErrMemory
	add	esp, 8

; 292  : 	    return(-1);

	or	eax, -1
	jmp	$LN1@vstateVPus
$LN6@vstateVPus:

; 293  : 	}
; 294  : 	ctxt->vstateMax *= 2;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shl	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 295  : 	ctxt->vstateTab = tmp;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [edx+52], eax
$LN5@vstateVPus:

; 296  :     }
; 297  :     ctxt->vstate = &ctxt->vstateTab[ctxt->vstateNr];

	mov	ecx, DWORD PTR _ctxt$[ebp]
	imul	edx, DWORD PTR [ecx+44], 12
	mov	eax, DWORD PTR _ctxt$[ebp]
	add	edx, DWORD PTR [eax+52]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+40], edx

; 298  :     ctxt->vstateTab[ctxt->vstateNr].elemDecl = elemDecl;

	mov	edx, DWORD PTR _ctxt$[ebp]
	imul	eax, DWORD PTR [edx+44], 12
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _elemDecl$[ebp]
	mov	DWORD PTR [edx+eax], ecx

; 299  :     ctxt->vstateTab[ctxt->vstateNr].node = node;

	mov	edx, DWORD PTR _ctxt$[ebp]
	imul	eax, DWORD PTR [edx+44], 12
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+eax+4], ecx

; 300  :     if ((elemDecl != NULL) && (elemDecl->etype == XML_ELEMENT_TYPE_ELEMENT)) {

	cmp	DWORD PTR _elemDecl$[ebp], 0
	je	$LN7@vstateVPus
	mov	edx, DWORD PTR _elemDecl$[ebp]
	cmp	DWORD PTR [edx+36], 4
	jne	SHORT $LN7@vstateVPus

; 301  : 	if (elemDecl->contModel == NULL)

	mov	eax, DWORD PTR _elemDecl$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN8@vstateVPus

; 302  : 	    xmlValidBuildContentModel(ctxt, elemDecl);

	mov	ecx, DWORD PTR _elemDecl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidBuildContentModel
	add	esp, 8
$LN8@vstateVPus:

; 303  : 	if (elemDecl->contModel != NULL) {

	mov	eax, DWORD PTR _elemDecl$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN9@vstateVPus

; 304  : 	    ctxt->vstateTab[ctxt->vstateNr].exec =

	push	0
	push	0
	mov	ecx, DWORD PTR _elemDecl$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	_xmlRegNewExecCtxt
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	imul	edx, DWORD PTR [ecx+44], 12
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [ecx+edx+8], eax

; 305  : 		xmlRegNewExecCtxt(elemDecl->contModel, NULL, NULL);
; 306  : 	} else {

	jmp	SHORT $LN7@vstateVPus
$LN9@vstateVPus:

; 307  : 	    ctxt->vstateTab[ctxt->vstateNr].exec = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	imul	eax, DWORD PTR [edx+44], 12
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR [edx+eax+8], 0

; 308  : 	    xmlErrValidNode(ctxt, (xmlNodePtr) elemDecl,

	push	0
	push	0
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0CN@GEBFHDLO@Failed?5to?5build?5content?5model?5r@
	push	1
	mov	edx, DWORD PTR _elemDecl$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN7@vstateVPus:

; 309  : 	                    XML_ERR_INTERNAL_ERROR,
; 310  : 			    "Failed to build content model regexp for %s\n",
; 311  : 			    node->name, NULL, NULL);
; 312  : 	}
; 313  :     }
; 314  :     return(ctxt->vstateNr++);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR tv178[ebp], edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+44], ecx
	mov	eax, DWORD PTR tv178[ebp]
$LN1@vstateVPus:

; 315  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_vstateVPush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlErrValidWarning
_TEXT	SEGMENT
_delta$1 = -20						; size = 4
_data$ = -16						; size = 4
_pctxt$ = -12						; size = 4
_channel$ = -8						; size = 4
_schannel$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_node$ = 12						; size = 4
_error$ = 16						; size = 4
_msg$ = 20						; size = 4
_str1$ = 24						; size = 4
_str2$ = 28						; size = 4
_str3$ = 32						; size = 4
_xmlErrValidWarning PROC				; COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 230  :     xmlStructuredErrorFunc schannel = NULL;

	mov	DWORD PTR _schannel$[ebp], 0

; 231  :     xmlGenericErrorFunc channel = NULL;

	mov	DWORD PTR _channel$[ebp], 0

; 232  :     xmlParserCtxtPtr pctxt = NULL;

	mov	DWORD PTR _pctxt$[ebp], 0

; 233  :     void *data = NULL;

	mov	DWORD PTR _data$[ebp], 0

; 234  : 
; 235  :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlErrVali

; 236  :         channel = ctxt->warning;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _channel$[ebp], ecx

; 237  :         data = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _data$[ebp], eax

; 238  : 	/* Use the special values to detect if it is part of a parsing
; 239  : 	   context */
; 240  : 	if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+28], -1412623820		; abcd1234H
	je	SHORT $LN4@xmlErrVali
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+28], -1412623819		; abcd1235H
	jne	SHORT $LN2@xmlErrVali
$LN4@xmlErrVali:

; 241  : 	    (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {
; 242  : 	    long delta = (char *) ctxt - (char *) ctxt->userData;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _delta$1[ebp], ecx

; 243  : 	    if ((delta > 0) && (delta < 250))

	cmp	DWORD PTR _delta$1[ebp], 0
	jle	SHORT $LN2@xmlErrVali
	cmp	DWORD PTR _delta$1[ebp], 250		; 000000faH
	jge	SHORT $LN2@xmlErrVali

; 244  : 		pctxt = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pctxt$[ebp], eax
$LN2@xmlErrVali:

; 245  : 	}
; 246  :     }
; 247  :     __xmlRaiseError(schannel, channel, data, pctxt, node, XML_FROM_VALID, error,

	mov	ecx, DWORD PTR _str3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str2$[ebp]
	push	edx
	mov	eax, DWORD PTR _str1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _str3$[ebp]
	push	edx
	mov	eax, DWORD PTR _str2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str1$[ebp]
	push	ecx
	push	0
	push	0
	push	1
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctxt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _channel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _schannel$[ebp]
	push	ecx
	call	___xmlRaiseError
	add	esp, 76					; 0000004cH

; 248  :                     XML_ERR_WARNING, NULL, 0,
; 249  :                     (const char *) str1,
; 250  :                     (const char *) str2,
; 251  :                     (const char *) str3, 0, 0, msg, str1, str2, str3);
; 252  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlErrValidWarning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlErrValidNodeNr
_TEXT	SEGMENT
_delta$1 = -20						; size = 4
_data$ = -16						; size = 4
_pctxt$ = -12						; size = 4
_channel$ = -8						; size = 4
_schannel$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_node$ = 12						; size = 4
_error$ = 16						; size = 4
_msg$ = 20						; size = 4
_str1$ = 24						; size = 4
_int2$ = 28						; size = 4
_str3$ = 32						; size = 4
_xmlErrValidNodeNr PROC					; COMDAT

; 188  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 189  :     xmlStructuredErrorFunc schannel = NULL;

	mov	DWORD PTR _schannel$[ebp], 0

; 190  :     xmlGenericErrorFunc channel = NULL;

	mov	DWORD PTR _channel$[ebp], 0

; 191  :     xmlParserCtxtPtr pctxt = NULL;

	mov	DWORD PTR _pctxt$[ebp], 0

; 192  :     void *data = NULL;

	mov	DWORD PTR _data$[ebp], 0

; 193  : 
; 194  :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlErrVali

; 195  :         channel = ctxt->error;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _channel$[ebp], ecx

; 196  :         data = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _data$[ebp], eax

; 197  : 	/* Use the special values to detect if it is part of a parsing
; 198  : 	   context */
; 199  : 	if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+28], -1412623820		; abcd1234H
	je	SHORT $LN4@xmlErrVali
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+28], -1412623819		; abcd1235H
	jne	SHORT $LN2@xmlErrVali
$LN4@xmlErrVali:

; 200  : 	    (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {
; 201  : 	    long delta = (char *) ctxt - (char *) ctxt->userData;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _delta$1[ebp], ecx

; 202  : 	    if ((delta > 0) && (delta < 250))

	cmp	DWORD PTR _delta$1[ebp], 0
	jle	SHORT $LN2@xmlErrVali
	cmp	DWORD PTR _delta$1[ebp], 250		; 000000faH
	jge	SHORT $LN2@xmlErrVali

; 203  : 		pctxt = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pctxt$[ebp], eax
$LN2@xmlErrVali:

; 204  : 	}
; 205  :     }
; 206  :     __xmlRaiseError(schannel, channel, data, pctxt, node, XML_FROM_VALID, error,

	mov	ecx, DWORD PTR _str3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _int2$[ebp]
	push	edx
	mov	eax, DWORD PTR _str1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _int2$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _str3$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str1$[ebp]
	push	ecx
	push	0
	push	0
	push	2
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctxt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _channel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _schannel$[ebp]
	push	ecx
	call	___xmlRaiseError
	add	esp, 76					; 0000004cH

; 207  :                     XML_ERR_ERROR, NULL, 0,
; 208  :                     (const char *) str1,
; 209  :                     (const char *) str3,
; 210  :                     NULL, int2, 0, msg, str1, int2, str3);
; 211  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlErrValidNodeNr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlErrValidNode
_TEXT	SEGMENT
_delta$1 = -20						; size = 4
_data$ = -16						; size = 4
_pctxt$ = -12						; size = 4
_channel$ = -8						; size = 4
_schannel$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_node$ = 12						; size = 4
_error$ = 16						; size = 4
_msg$ = 20						; size = 4
_str1$ = 24						; size = 4
_str2$ = 28						; size = 4
_str3$ = 32						; size = 4
_xmlErrValidNode PROC					; COMDAT

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 146  :     xmlStructuredErrorFunc schannel = NULL;

	mov	DWORD PTR _schannel$[ebp], 0

; 147  :     xmlGenericErrorFunc channel = NULL;

	mov	DWORD PTR _channel$[ebp], 0

; 148  :     xmlParserCtxtPtr pctxt = NULL;

	mov	DWORD PTR _pctxt$[ebp], 0

; 149  :     void *data = NULL;

	mov	DWORD PTR _data$[ebp], 0

; 150  : 
; 151  :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlErrVali

; 152  :         channel = ctxt->error;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _channel$[ebp], ecx

; 153  :         data = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _data$[ebp], eax

; 154  : 	/* Use the special values to detect if it is part of a parsing
; 155  : 	   context */
; 156  : 	if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+28], -1412623820		; abcd1234H
	je	SHORT $LN4@xmlErrVali
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+28], -1412623819		; abcd1235H
	jne	SHORT $LN2@xmlErrVali
$LN4@xmlErrVali:

; 157  : 	    (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {
; 158  : 	    long delta = (char *) ctxt - (char *) ctxt->userData;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _delta$1[ebp], ecx

; 159  : 	    if ((delta > 0) && (delta < 250))

	cmp	DWORD PTR _delta$1[ebp], 0
	jle	SHORT $LN2@xmlErrVali
	cmp	DWORD PTR _delta$1[ebp], 250		; 000000faH
	jge	SHORT $LN2@xmlErrVali

; 160  : 		pctxt = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pctxt$[ebp], eax
$LN2@xmlErrVali:

; 161  : 	}
; 162  :     }
; 163  :     __xmlRaiseError(schannel, channel, data, pctxt, node, XML_FROM_VALID, error,

	mov	ecx, DWORD PTR _str3$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str2$[ebp]
	push	edx
	mov	eax, DWORD PTR _str1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _str3$[ebp]
	push	edx
	mov	eax, DWORD PTR _str2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str1$[ebp]
	push	ecx
	push	0
	push	0
	push	2
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	push	23					; 00000017H
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pctxt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _channel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _schannel$[ebp]
	push	ecx
	call	___xmlRaiseError
	add	esp, 76					; 0000004cH

; 164  :                     XML_ERR_ERROR, NULL, 0,
; 165  :                     (const char *) str1,
; 166  :                     (const char *) str2,
; 167  :                     (const char *) str3, 0, 0, msg, str1, str2, str3);
; 168  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlErrValidNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlErrValid
_TEXT	SEGMENT
_delta$1 = -16						; size = 4
_data$ = -12						; size = 4
_pctxt$ = -8						; size = 4
_channel$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_msg$ = 16						; size = 4
_extra$ = 20						; size = 4
_xmlErrValid PROC					; COMDAT

; 99   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 100  :     xmlGenericErrorFunc channel = NULL;

	mov	DWORD PTR _channel$[ebp], 0

; 101  :     xmlParserCtxtPtr pctxt = NULL;

	mov	DWORD PTR _pctxt$[ebp], 0

; 102  :     void *data = NULL;

	mov	DWORD PTR _data$[ebp], 0

; 103  : 
; 104  :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlErrVali

; 105  :         channel = ctxt->error;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _channel$[ebp], ecx

; 106  :         data = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _data$[ebp], eax

; 107  : 	/* Use the special values to detect if it is part of a parsing
; 108  : 	   context */
; 109  : 	if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+28], -1412623820		; abcd1234H
	je	SHORT $LN4@xmlErrVali
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+28], -1412623819		; abcd1235H
	jne	SHORT $LN2@xmlErrVali
$LN4@xmlErrVali:

; 110  : 	    (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {
; 111  : 	    long delta = (char *) ctxt - (char *) ctxt->userData;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _delta$1[ebp], ecx

; 112  : 	    if ((delta > 0) && (delta < 250))

	cmp	DWORD PTR _delta$1[ebp], 0
	jle	SHORT $LN2@xmlErrVali
	cmp	DWORD PTR _delta$1[ebp], 250		; 000000faH
	jge	SHORT $LN2@xmlErrVali

; 113  : 		pctxt = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pctxt$[ebp], eax
$LN2@xmlErrVali:

; 114  : 	}
; 115  :     }
; 116  :     if (extra)

	cmp	DWORD PTR _extra$[ebp], 0
	je	SHORT $LN6@xmlErrVali

; 117  :         __xmlRaiseError(NULL, channel, data,

	mov	ecx, DWORD PTR _extra$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	0
	push	0
	push	2
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	push	23					; 00000017H
	push	0
	mov	edx, DWORD PTR _pctxt$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _channel$[ebp]
	push	ecx
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
	jmp	SHORT $LN1@xmlErrVali
$LN6@xmlErrVali:

; 118  :                         pctxt, NULL, XML_FROM_VALID, error,
; 119  :                         XML_ERR_ERROR, NULL, 0, extra, NULL, NULL, 0, 0,
; 120  :                         msg, extra);
; 121  :     else
; 122  :         __xmlRaiseError(NULL, channel, data,

	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	2
	mov	eax, DWORD PTR _error$[ebp]
	push	eax
	push	23					; 00000017H
	push	0
	mov	ecx, DWORD PTR _pctxt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _channel$[ebp]
	push	eax
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
$LN1@xmlErrVali:

; 123  :                         pctxt, NULL, XML_FROM_VALID, error,
; 124  :                         XML_ERR_ERROR, NULL, 0, NULL, NULL, NULL, 0, 0,
; 125  :                         "%s", msg);
; 126  : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlErrValid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlVErrMemory
_TEXT	SEGMENT
_delta$1 = -16						; size = 4
_data$ = -12						; size = 4
_pctxt$ = -8						; size = 4
_channel$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_extra$ = 12						; size = 4
_xmlVErrMemory PROC					; COMDAT

; 59   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 60   :     xmlGenericErrorFunc channel = NULL;

	mov	DWORD PTR _channel$[ebp], 0

; 61   :     xmlParserCtxtPtr pctxt = NULL;

	mov	DWORD PTR _pctxt$[ebp], 0

; 62   :     void *data = NULL;

	mov	DWORD PTR _data$[ebp], 0

; 63   : 
; 64   :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlVErrMem

; 65   :         channel = ctxt->error;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _channel$[ebp], ecx

; 66   :         data = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _data$[ebp], eax

; 67   : 	/* Use the special values to detect if it is part of a parsing
; 68   : 	   context */
; 69   : 	if ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+28], -1412623820		; abcd1234H
	je	SHORT $LN4@xmlVErrMem
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+28], -1412623819		; abcd1235H
	jne	SHORT $LN2@xmlVErrMem
$LN4@xmlVErrMem:

; 70   : 	    (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1)) {
; 71   : 	    long delta = (char *) ctxt - (char *) ctxt->userData;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	DWORD PTR _delta$1[ebp], ecx

; 72   : 	    if ((delta > 0) && (delta < 250))

	cmp	DWORD PTR _delta$1[ebp], 0
	jle	SHORT $LN2@xmlVErrMem
	cmp	DWORD PTR _delta$1[ebp], 250		; 000000faH
	jge	SHORT $LN2@xmlVErrMem

; 73   : 		pctxt = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pctxt$[ebp], eax
$LN2@xmlVErrMem:

; 74   : 	}
; 75   :     }
; 76   :     if (extra)

	cmp	DWORD PTR _extra$[ebp], 0
	je	SHORT $LN6@xmlVErrMem

; 77   :         __xmlRaiseError(NULL, channel, data,

	mov	ecx, DWORD PTR _extra$[ebp]
	push	ecx
	push	OFFSET ??_C@_0BP@DJFHNAOK@Memory?5allocation?5failed?5?3?5?$CFs?6@
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _extra$[ebp]
	push	edx
	push	0
	push	0
	push	3
	push	2
	push	23					; 00000017H
	push	0
	mov	eax, DWORD PTR _pctxt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _channel$[ebp]
	push	edx
	push	0
	call	___xmlRaiseError
	add	esp, 68					; 00000044H
	jmp	SHORT $LN1@xmlVErrMem
$LN6@xmlVErrMem:

; 78   :                         pctxt, NULL, XML_FROM_VALID, XML_ERR_NO_MEMORY,
; 79   :                         XML_ERR_FATAL, NULL, 0, extra, NULL, NULL, 0, 0,
; 80   :                         "Memory allocation failed : %s\n", extra);
; 81   :     else
; 82   :         __xmlRaiseError(NULL, channel, data,

	push	OFFSET ??_C@_0BK@GDFDKGPJ@Memory?5allocation?5failed?6@
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	3
	push	2
	push	23					; 00000017H
	push	0
	mov	eax, DWORD PTR _pctxt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _channel$[ebp]
	push	edx
	push	0
	call	___xmlRaiseError
	add	esp, 64					; 00000040H
$LN1@xmlVErrMem:

; 83   :                         pctxt, NULL, XML_FROM_VALID, XML_ERR_NO_MEMORY,
; 84   :                         XML_ERR_FATAL, NULL, 0, NULL, NULL, NULL, 0, 0,
; 85   :                         "Memory allocation failed\n");
; 86   : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlVErrMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateAttributeValueInternal
_TEXT	SEGMENT
tv64 = -4						; size = 4
_doc$ = 8						; size = 4
_type$ = 12						; size = 4
_value$ = 16						; size = 4
_xmlValidateAttributeValueInternal PROC			; COMDAT

; 3790 :                                   const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3791 :     switch (type) {

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	mov	ecx, DWORD PTR tv64[ebp]
	sub	ecx, 2
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 8
	ja	SHORT $LN2@xmlValidat
	mov	edx, DWORD PTR tv64[ebp]
	jmp	DWORD PTR $LN10@xmlValidat[edx*4]
$LN4@xmlValidat:

; 3792 : 	case XML_ATTRIBUTE_ENTITIES:
; 3793 : 	case XML_ATTRIBUTE_IDREFS:
; 3794 : 	    return(xmlValidateNamesValueInternal(doc, value));

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlValidateNamesValueInternal
	add	esp, 8
	jmp	SHORT $LN1@xmlValidat
$LN5@xmlValidat:

; 3795 : 	case XML_ATTRIBUTE_ENTITY:
; 3796 : 	case XML_ATTRIBUTE_IDREF:
; 3797 : 	case XML_ATTRIBUTE_ID:
; 3798 : 	case XML_ATTRIBUTE_NOTATION:
; 3799 : 	    return(xmlValidateNameValueInternal(doc, value));

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlValidateNameValueInternal
	add	esp, 8
	jmp	SHORT $LN1@xmlValidat
$LN6@xmlValidat:

; 3800 : 	case XML_ATTRIBUTE_NMTOKENS:
; 3801 : 	case XML_ATTRIBUTE_ENUMERATION:
; 3802 : 	    return(xmlValidateNmtokensValueInternal(doc, value));

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlValidateNmtokensValueInternal
	add	esp, 8
	jmp	SHORT $LN1@xmlValidat
$LN7@xmlValidat:

; 3803 : 	case XML_ATTRIBUTE_NMTOKEN:
; 3804 : 	    return(xmlValidateNmtokenValueInternal(doc, value));

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlValidateNmtokenValueInternal
	add	esp, 8
	jmp	SHORT $LN1@xmlValidat
$LN2@xmlValidat:

; 3805 :         case XML_ATTRIBUTE_CDATA:
; 3806 : 	    break;
; 3807 :     }
; 3808 :     return(1);

	mov	eax, 1
$LN1@xmlValidat:

; 3809 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN10@xmlValidat:
	DD	$LN5@xmlValidat
	DD	$LN5@xmlValidat
	DD	$LN4@xmlValidat
	DD	$LN5@xmlValidat
	DD	$LN4@xmlValidat
	DD	$LN7@xmlValidat
	DD	$LN6@xmlValidat
	DD	$LN6@xmlValidat
	DD	$LN5@xmlValidat
_xmlValidateAttributeValueInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlGetDtdElementDesc2
_TEXT	SEGMENT
_dict$1 = -28						; size = 4
_prefix$ = -20						; size = 4
_uqname$ = -12						; size = 4
_cur$ = -8						; size = 4
_table$ = -4						; size = 4
_dtd$ = 8						; size = 4
_name$ = 12						; size = 4
_create$ = 16						; size = 4
_xmlGetDtdElementDesc2 PROC				; COMDAT

; 3206 : xmlGetDtdElementDesc2(xmlDtdPtr dtd, const xmlChar *name, int create) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3207 :     xmlElementTablePtr table;
; 3208 :     xmlElementPtr cur;
; 3209 :     xmlChar *uqname = NULL, *prefix = NULL;

	mov	DWORD PTR _uqname$[ebp], 0
	mov	DWORD PTR _prefix$[ebp], 0

; 3210 : 
; 3211 :     if (dtd == NULL) return(NULL);

	cmp	DWORD PTR _dtd$[ebp], 0
	jne	SHORT $LN2@xmlGetDtdE
	xor	eax, eax
	jmp	$LN1@xmlGetDtdE
$LN2@xmlGetDtdE:

; 3212 :     if (dtd->elements == NULL) {

	mov	eax, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN3@xmlGetDtdE

; 3213 : 	xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$1[ebp], 0

; 3214 : 
; 3215 : 	if (dtd->doc != NULL)

	mov	ecx, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN4@xmlGetDtdE

; 3216 : 	    dict = dtd->doc->dict;

	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _dict$1[ebp], ecx
$LN4@xmlGetDtdE:

; 3217 : 
; 3218 : 	if (!create)

	cmp	DWORD PTR _create$[ebp], 0
	jne	SHORT $LN5@xmlGetDtdE

; 3219 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlGetDtdE
$LN5@xmlGetDtdE:

; 3220 : 	/*
; 3221 : 	 * Create the Element table if needed.
; 3222 : 	 */
; 3223 : 	table = (xmlElementTablePtr) dtd->elements;

	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _table$[ebp], eax

; 3224 : 	if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN6@xmlGetDtdE

; 3225 : 	    table = xmlHashCreateDict(0, dict);

	mov	ecx, DWORD PTR _dict$1[ebp]
	push	ecx
	push	0
	call	_xmlHashCreateDict
	add	esp, 8
	mov	DWORD PTR _table$[ebp], eax

; 3226 : 	    dtd->elements = (void *) table;

	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR _table$[ebp]
	mov	DWORD PTR [edx+40], eax
$LN6@xmlGetDtdE:

; 3227 : 	}
; 3228 : 	if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN3@xmlGetDtdE

; 3229 : 	    xmlVErrMemory(NULL, "element table allocation failed");

	push	OFFSET ??_C@_0CA@OJAJCLMD@element?5table?5allocation?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 3230 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlGetDtdE
$LN3@xmlGetDtdE:

; 3231 : 	}
; 3232 :     }
; 3233 :     table = (xmlElementTablePtr) dtd->elements;

	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _table$[ebp], edx

; 3234 : 
; 3235 :     uqname = xmlSplitQName2(name, &prefix);

	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlSplitQName2
	add	esp, 8
	mov	DWORD PTR _uqname$[ebp], eax

; 3236 :     if (uqname != NULL)

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN8@xmlGetDtdE

; 3237 :         name = uqname;

	mov	edx, DWORD PTR _uqname$[ebp]
	mov	DWORD PTR _name$[ebp], edx
$LN8@xmlGetDtdE:

; 3238 :     cur = xmlHashLookup2(table, name, prefix);

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_xmlHashLookup2
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur$[ebp], eax

; 3239 :     if ((cur == NULL) && (create)) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	$LN9@xmlGetDtdE
	cmp	DWORD PTR _create$[ebp], 0
	je	$LN9@xmlGetDtdE

; 3240 : 	cur = (xmlElementPtr) xmlMalloc(sizeof(xmlElement));

	mov	esi, esp
	push	56					; 00000038H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _cur$[ebp], eax

; 3241 : 	if (cur == NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN10@xmlGetDtdE

; 3242 : 	    xmlVErrMemory(NULL, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 3243 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlGetDtdE
$LN10@xmlGetDtdE:

; 3244 : 	}
; 3245 : 	memset(cur, 0, sizeof(xmlElement));

	push	56					; 00000038H
	push	0
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 3246 : 	cur->type = XML_ELEMENT_DECL;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], 15			; 0000000fH

; 3247 : 
; 3248 : 	/*
; 3249 : 	 * fill the structure.
; 3250 : 	 */
; 3251 : 	cur->name = xmlStrdup(name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 3252 : 	cur->prefix = xmlStrdup(prefix);

	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 3253 : 	cur->etype = XML_ELEMENT_TYPE_UNDEFINED;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+36], 0

; 3254 : 
; 3255 : 	xmlHashAddEntry2(table, name, prefix, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashAddEntry2
	add	esp, 16					; 00000010H
$LN9@xmlGetDtdE:

; 3256 :     }
; 3257 :     if (prefix != NULL) xmlFree(prefix);

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN11@xmlGetDtdE
	mov	esi, esp
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlGetDtdE:

; 3258 :     if (uqname != NULL) xmlFree(uqname);

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN12@xmlGetDtdE
	mov	esi, esp
	mov	edx, DWORD PTR _uqname$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlGetDtdE:

; 3259 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlGetDtdE:

; 3260 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@xmlGetDtdE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@xmlGetDtdE:
	DD	1
	DD	$LN15@xmlGetDtdE
$LN15@xmlGetDtdE:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN14@xmlGetDtdE
$LN14@xmlGetDtdE:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlGetDtdElementDesc2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidatePopElement
_TEXT	SEGMENT
_elemDecl$1 = -12					; size = 4
_state$2 = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_qname$ = 20						; size = 4
_xmlValidatePopElement PROC				; COMDAT

; 5922 : 		      const xmlChar *qname ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 5923 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 5924 : 
; 5925 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlValidat

; 5926 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN2@xmlValidat:

; 5927 : /* printf("PopElem %s\n", qname); */
; 5928 :     if ((ctxt->vstateNr > 0) && (ctxt->vstate != NULL)) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jle	$LN3@xmlValidat
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	$LN3@xmlValidat

; 5929 : 	xmlValidStatePtr state = ctxt->vstate;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _state$2[ebp], eax

; 5930 : 	xmlElementPtr elemDecl;
; 5931 : 
; 5932 : 	/*
; 5933 : 	 * Check the new element against the content model of the new elem.
; 5934 : 	 */
; 5935 : 	if (state->elemDecl != NULL) {

	mov	ecx, DWORD PTR _state$2[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@xmlValidat

; 5936 : 	    elemDecl = state->elemDecl;

	mov	edx, DWORD PTR _state$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _elemDecl$1[ebp], eax

; 5937 : 
; 5938 : 	    if (elemDecl->etype == XML_ELEMENT_TYPE_ELEMENT) {

	mov	ecx, DWORD PTR _elemDecl$1[ebp]
	cmp	DWORD PTR [ecx+36], 4
	jne	SHORT $LN4@xmlValidat

; 5939 : 		if (state->exec != NULL) {

	mov	edx, DWORD PTR _state$2[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN4@xmlValidat

; 5940 : 		    ret = xmlRegExecPushString(state->exec, NULL, NULL);

	push	0
	push	0
	mov	eax, DWORD PTR _state$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlRegExecPushString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 5941 : 		    if (ret == 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN7@xmlValidat

; 5942 : 			xmlErrValidNode(ctxt, state->node,

	push	0
	push	0
	mov	edx, DWORD PTR _state$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0EC@JDBIOCJK@Element?5?$CFs?5content?5does?5not?5fol@
	push	504					; 000001f8H
	mov	edx, DWORD PTR _state$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 5943 : 			                XML_DTD_CONTENT_MODEL,
; 5944 : 	   "Element %s content does not follow the DTD, Expecting more child\n",
; 5945 : 			       state->node->name, NULL,NULL);
; 5946 : 		    } else {

	jmp	SHORT $LN4@xmlValidat
$LN7@xmlValidat:

; 5947 : 			/*
; 5948 : 			 * previous validation errors should not generate
; 5949 : 			 * a new one here
; 5950 : 			 */
; 5951 : 			ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
$LN4@xmlValidat:

; 5952 : 		    }
; 5953 : 		}
; 5954 : 	    }
; 5955 : 	}
; 5956 : 	vstateVPop(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_vstateVPop
	add	esp, 4
$LN3@xmlValidat:

; 5957 :     }
; 5958 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 5959 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidatePopElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidatePushCData
_TEXT	SEGMENT
tv75 = -20						; size = 4
_i$1 = -16						; size = 4
_elemDecl$2 = -12					; size = 4
_state$3 = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlValidatePushCData PROC				; COMDAT

; 5846 : xmlValidatePushCData(xmlValidCtxtPtr ctxt, const xmlChar *data, int len) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 5847 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 5848 : 
; 5849 : /* printf("CDATA %s %d\n", data, len); */
; 5850 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN7@xmlValidat

; 5851 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN7@xmlValidat:

; 5852 :     if (len <= 0)

	cmp	DWORD PTR _len$[ebp], 0
	jg	SHORT $LN8@xmlValidat

; 5853 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlValidat
$LN8@xmlValidat:

; 5854 :     if ((ctxt->vstateNr > 0) && (ctxt->vstate != NULL)) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jle	$done$20
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	$done$20

; 5855 : 	xmlValidStatePtr state = ctxt->vstate;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _state$3[ebp], eax

; 5856 : 	xmlElementPtr elemDecl;
; 5857 : 
; 5858 : 	/*
; 5859 : 	 * Check the new element against the content model of the new elem.
; 5860 : 	 */
; 5861 : 	if (state->elemDecl != NULL) {

	mov	ecx, DWORD PTR _state$3[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$done$20

; 5862 : 	    elemDecl = state->elemDecl;

	mov	edx, DWORD PTR _state$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _elemDecl$2[ebp], eax

; 5863 : 
; 5864 : 	    switch(elemDecl->etype) {

	mov	ecx, DWORD PTR _elemDecl$2[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv75[ebp], edx
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN11@xmlValidat
	cmp	DWORD PTR tv75[ebp], 1
	je	SHORT $LN12@xmlValidat
	cmp	DWORD PTR tv75[ebp], 4
	je	SHORT $LN15@xmlValidat
	jmp	$done$20
$LN11@xmlValidat:

; 5865 : 		case XML_ELEMENT_TYPE_UNDEFINED:
; 5866 : 		    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5867 : 		    break;

	jmp	$done$20
$LN12@xmlValidat:

; 5868 : 		case XML_ELEMENT_TYPE_EMPTY:
; 5869 : 		    xmlErrValidNode(ctxt, state->node,

	push	0
	push	0
	mov	eax, DWORD PTR _state$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0DE@KLKCMFPH@Element?5?$CFs?5was?5declared?5EMPTY?5t@
	push	528					; 00000210H
	mov	eax, DWORD PTR _state$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 5870 : 				    XML_DTD_NOT_EMPTY,
; 5871 : 	       "Element %s was declared EMPTY this one has content\n",
; 5872 : 			   state->node->name, NULL, NULL);
; 5873 : 		    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5874 : 		    break;

	jmp	$done$20

; 5875 : 		case XML_ELEMENT_TYPE_ANY:
; 5876 : 		    break;

	jmp	$done$20

; 5877 : 		case XML_ELEMENT_TYPE_MIXED:
; 5878 : 		    break;

	jmp	$done$20
$LN15@xmlValidat:

; 5879 : 		case XML_ELEMENT_TYPE_ELEMENT:
; 5880 : 		    if (len > 0) {

	cmp	DWORD PTR _len$[ebp], 0
	jle	$done$20

; 5881 : 			int i;
; 5882 : 
; 5883 : 			for (i = 0;i < len;i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN6@xmlValidat
$LN4@xmlValidat:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN6@xmlValidat:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jge	SHORT $done$20

; 5884 : 			    if (!IS_BLANK_CH(data[i])) {

	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN17@xmlValidat
	mov	ecx, DWORD PTR _data$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 9
	jl	SHORT $LN18@xmlValidat
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _i$1[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 10					; 0000000aH
	jle	SHORT $LN17@xmlValidat
$LN18@xmlValidat:
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$1[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN17@xmlValidat

; 5885 : 				xmlErrValidNode(ctxt, state->node,

	push	0
	push	0
	mov	ecx, DWORD PTR _state$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DO@HNMIGKJO@Element?5?$CFs?5content?5does?5not?5fol@
	push	504					; 000001f8H
	mov	ecx, DWORD PTR _state$3[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 5886 : 						XML_DTD_CONTENT_MODEL,
; 5887 : 	   "Element %s content does not follow the DTD, Text not allowed\n",
; 5888 : 				       state->node->name, NULL, NULL);
; 5889 : 				ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5890 : 				goto done;

	jmp	SHORT $done$20
$LN17@xmlValidat:

; 5891 : 			    }
; 5892 : 			}

	jmp	SHORT $LN4@xmlValidat
$done$20:

; 5893 : 			/*
; 5894 : 			 * TODO:
; 5895 : 			 * VC: Standalone Document Declaration
; 5896 : 			 *  element types with element content, if white space
; 5897 : 			 *  occurs directly within any instance of those types.
; 5898 : 			 */
; 5899 : 		    }
; 5900 : 		    break;
; 5901 : 	    }
; 5902 : 	}
; 5903 :     }
; 5904 : done:
; 5905 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 5906 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidatePushCData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidatePushElement
_TEXT	SEGMENT
tv74 = -32						; size = 4
_elemDecl$1 = -28					; size = 4
_state$2 = -24						; size = 4
_extsubset$ = -16					; size = 4
_eDecl$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_qname$ = 20						; size = 4
_xmlValidatePushElement PROC				; COMDAT

; 5754 :                        xmlNodePtr elem, const xmlChar *qname) {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 5755 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 5756 :     xmlElementPtr eDecl;
; 5757 :     int extsubset = 0;

	mov	DWORD PTR _extsubset$[ebp], 0

; 5758 : 
; 5759 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN4@xmlValidat

; 5760 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN4@xmlValidat:

; 5761 : /* printf("PushElem %s\n", qname); */
; 5762 :     if ((ctxt->vstateNr > 0) && (ctxt->vstate != NULL)) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jle	$LN5@xmlValidat
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	$LN5@xmlValidat

; 5763 : 	xmlValidStatePtr state = ctxt->vstate;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _state$2[ebp], eax

; 5764 : 	xmlElementPtr elemDecl;
; 5765 : 
; 5766 : 	/*
; 5767 : 	 * Check the new element against the content model of the new elem.
; 5768 : 	 */
; 5769 : 	if (state->elemDecl != NULL) {

	mov	ecx, DWORD PTR _state$2[ebp]
	cmp	DWORD PTR [ecx], 0
	je	$LN5@xmlValidat

; 5770 : 	    elemDecl = state->elemDecl;

	mov	edx, DWORD PTR _state$2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _elemDecl$1[ebp], eax

; 5771 : 
; 5772 : 	    switch(elemDecl->etype) {

	mov	ecx, DWORD PTR _elemDecl$1[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR tv74[ebp], edx
	cmp	DWORD PTR tv74[ebp], 4
	ja	$LN5@xmlValidat
	mov	eax, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN22@xmlValidat[eax*4]
$LN7@xmlValidat:

; 5773 : 		case XML_ELEMENT_TYPE_UNDEFINED:
; 5774 : 		    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5775 : 		    break;

	jmp	$LN5@xmlValidat
$LN8@xmlValidat:

; 5776 : 		case XML_ELEMENT_TYPE_EMPTY:
; 5777 : 		    xmlErrValidNode(ctxt, state->node,

	push	0
	push	0
	mov	ecx, DWORD PTR _state$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DE@KLKCMFPH@Element?5?$CFs?5was?5declared?5EMPTY?5t@
	push	528					; 00000210H
	mov	ecx, DWORD PTR _state$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 5778 : 				    XML_DTD_NOT_EMPTY,
; 5779 : 	       "Element %s was declared EMPTY this one has content\n",
; 5780 : 			   state->node->name, NULL, NULL);
; 5781 : 		    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5782 : 		    break;

	jmp	$LN5@xmlValidat

; 5783 : 		case XML_ELEMENT_TYPE_ANY:
; 5784 : 		    /* I don't think anything is required then */
; 5785 : 		    break;

	jmp	$LN5@xmlValidat
$LN10@xmlValidat:

; 5786 : 		case XML_ELEMENT_TYPE_MIXED:
; 5787 : 		    /* simple case of declared as #PCDATA */
; 5788 : 		    if ((elemDecl->content != NULL) &&

	mov	ecx, DWORD PTR _elemDecl$1[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN11@xmlValidat
	mov	edx, DWORD PTR _elemDecl$1[ebp]
	mov	eax, DWORD PTR [edx+40]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN11@xmlValidat

; 5789 : 			(elemDecl->content->type ==
; 5790 : 			 XML_ELEMENT_CONTENT_PCDATA)) {
; 5791 : 			xmlErrValidNode(ctxt, state->node,

	push	0
	push	0
	mov	ecx, DWORD PTR _state$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DN@CFJCCMLK@Element?5?$CFs?5was?5declared?5?$CDPCDATA@
	push	529					; 00000211H
	mov	ecx, DWORD PTR _state$2[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 5792 : 					XML_DTD_NOT_PCDATA,
; 5793 : 	       "Element %s was declared #PCDATA but contains non text nodes\n",
; 5794 : 				state->node->name, NULL, NULL);
; 5795 : 			ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5796 : 		    } else {

	jmp	SHORT $LN12@xmlValidat
$LN11@xmlValidat:

; 5797 : 			ret = xmlValidateCheckMixed(ctxt, elemDecl->content,

	mov	ecx, DWORD PTR _qname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elemDecl$1[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidateCheckMixed
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 5798 : 				                    qname);
; 5799 : 			if (ret != 1) {

	cmp	DWORD PTR _ret$[ebp], 1
	je	SHORT $LN12@xmlValidat

; 5800 : 			    xmlErrValidNode(ctxt, state->node,

	push	0
	mov	edx, DWORD PTR _state$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _qname$[ebp]
	push	edx
	push	OFFSET ??_C@_0DM@IPIENEI@Element?5?$CFs?5is?5not?5declared?5in?5?$CF@
	push	515					; 00000203H
	mov	eax, DWORD PTR _state$2[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN12@xmlValidat:

; 5801 : 					    XML_DTD_INVALID_CHILD,
; 5802 : 	       "Element %s is not declared in %s list of possible children\n",
; 5803 : 				    qname, state->node->name, NULL);
; 5804 : 			}
; 5805 : 		    }
; 5806 : 		    break;

	jmp	SHORT $LN5@xmlValidat
$LN14@xmlValidat:

; 5807 : 		case XML_ELEMENT_TYPE_ELEMENT:
; 5808 : 		    /*
; 5809 : 		     * TODO:
; 5810 : 		     * VC: Standalone Document Declaration
; 5811 : 		     *     - element types with element content, if white space
; 5812 : 		     *       occurs directly within any instance of those types.
; 5813 : 		     */
; 5814 : 		    if (state->exec != NULL) {

	mov	eax, DWORD PTR _state$2[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN5@xmlValidat

; 5815 : 			ret = xmlRegExecPushString(state->exec, qname, NULL);

	push	0
	mov	ecx, DWORD PTR _qname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$2[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlRegExecPushString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 5816 : 			if (ret < 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN16@xmlValidat

; 5817 : 			    xmlErrValidNode(ctxt, state->node,

	push	0
	mov	ecx, DWORD PTR _qname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _state$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0DK@BGIDCAIC@Element?5?$CFs?5content?5does?5not?5fol@
	push	504					; 000001f8H
	mov	edx, DWORD PTR _state$2[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 5818 : 					    XML_DTD_CONTENT_MODEL,
; 5819 : 	       "Element %s content does not follow the DTD, Misplaced %s\n",
; 5820 : 				   state->node->name, qname, NULL);
; 5821 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 5822 : 			} else {

	jmp	SHORT $LN5@xmlValidat
$LN16@xmlValidat:

; 5823 : 			    ret = 1;

	mov	DWORD PTR _ret$[ebp], 1
$LN5@xmlValidat:

; 5824 : 			}
; 5825 : 		    }
; 5826 : 		    break;
; 5827 : 	    }
; 5828 : 	}
; 5829 :     }
; 5830 :     eDecl = xmlValidGetElemDecl(ctxt, doc, elem, &extsubset);

	lea	edx, DWORD PTR _extsubset$[ebp]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidGetElemDecl
	add	esp, 16					; 00000010H
	mov	DWORD PTR _eDecl$[ebp], eax

; 5831 :     vstateVPush(ctxt, eDecl, elem);

	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _eDecl$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_vstateVPush
	add	esp, 12					; 0000000cH

; 5832 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 5833 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@xmlValidat:
	DD	1
	DD	$LN20@xmlValidat
$LN20@xmlValidat:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN19@xmlValidat
$LN19@xmlValidat:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
	npad	2
$LN22@xmlValidat:
	DD	$LN7@xmlValidat
	DD	$LN8@xmlValidat
	DD	$LN5@xmlValidat
	DD	$LN10@xmlValidat
	DD	$LN14@xmlValidat
_xmlValidatePushElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidBuildContentModel
_TEXT	SEGMENT
_expr$1 = -5004						; size = 5000
_ctxt$ = 8						; size = 4
_elem$ = 12						; size = 4
_xmlValidBuildContentModel PROC				; COMDAT

; 813  : xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem) {

	push	ebp
	mov	ebp, esp
	mov	eax, 5008				; 00001390H
	call	__chkstk
	push	edi
	lea	edi, DWORD PTR [ebp-5008]
	mov	ecx, 1252				; 000004e4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 814  : 
; 815  :     if ((ctxt == NULL) || (elem == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlValidBu
	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN2@xmlValidBu
$LN3@xmlValidBu:

; 816  : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidBu
$LN2@xmlValidBu:

; 817  :     if (elem->type != XML_ELEMENT_DECL)

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+4], 15			; 0000000fH
	je	SHORT $LN4@xmlValidBu

; 818  : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidBu
$LN4@xmlValidBu:

; 819  :     if (elem->etype != XML_ELEMENT_TYPE_ELEMENT)

	mov	ecx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [ecx+36], 4
	je	SHORT $LN5@xmlValidBu

; 820  : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidBu
$LN5@xmlValidBu:

; 821  :     /* TODO: should we rebuild in this case ? */
; 822  :     if (elem->contModel != NULL) {

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+52], 0
	je	SHORT $LN6@xmlValidBu

; 823  : 	if (!xmlRegexpIsDeterminist(elem->contModel)) {

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	_xmlRegexpIsDeterminist
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN7@xmlValidBu

; 824  : 	    ctxt->valid = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+36], 0

; 825  : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidBu
$LN7@xmlValidBu:

; 826  : 	}
; 827  : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidBu
$LN6@xmlValidBu:

; 828  :     }
; 829  : 
; 830  :     ctxt->am = xmlNewAutomata();

	call	_xmlNewAutomata
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 831  :     if (ctxt->am == NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN8@xmlValidBu

; 832  : 	xmlErrValidNode(ctxt, (xmlNodePtr) elem,

	push	0
	push	0
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0CH@LILACHHH@Cannot?5create?5automata?5for?5elem@
	push	1
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 833  : 	                XML_ERR_INTERNAL_ERROR,
; 834  : 	                "Cannot create automata for element %s\n",
; 835  : 		        elem->name, NULL, NULL);
; 836  : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidBu
$LN8@xmlValidBu:

; 837  :     }
; 838  :     ctxt->state = xmlAutomataGetInitState(ctxt->am);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlAutomataGetInitState
	add	esp, 4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 839  :     xmlValidBuildAContentModel(elem->content, ctxt, elem->name);

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_xmlValidBuildAContentModel
	add	esp, 12					; 0000000cH

; 840  :     xmlAutomataSetFinalState(ctxt->am, ctxt->state);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	call	_xmlAutomataSetFinalState
	add	esp, 8

; 841  :     elem->contModel = xmlAutomataCompile(ctxt->am);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlAutomataCompile
	add	esp, 4
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 842  :     if (xmlRegexpIsDeterminist(elem->contModel) != 1) {

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_xmlRegexpIsDeterminist
	add	esp, 4
	cmp	eax, 1
	je	$LN9@xmlValidBu

; 843  : 	char expr[5000];
; 844  : 	expr[0] = 0;

	mov	ecx, 1
	imul	edx, ecx, 0
	mov	BYTE PTR _expr$1[ebp+edx], 0

; 845  : 	xmlSnprintfElementContent(expr, 5000, elem->content, 1);

	push	1
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	push	5000					; 00001388H
	lea	edx, DWORD PTR _expr$1[ebp]
	push	edx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H

; 846  : 	xmlErrValidNode(ctxt, (xmlNodePtr) elem,

	push	0
	lea	eax, DWORD PTR _expr$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0CM@GHMIMING@Content?5model?5of?5?$CFs?5is?5not?5dete@
	push	505					; 000001f9H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 847  : 	                XML_DTD_CONTENT_NOT_DETERMINIST,
; 848  : 	       "Content model of %s is not determinist: %s\n",
; 849  : 	       elem->name, BAD_CAST expr, NULL);
; 850  : #ifdef DEBUG_REGEXP_ALGO
; 851  :         xmlRegexpPrint(stderr, elem->contModel);
; 852  : #endif
; 853  :         ctxt->valid = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+36], 0

; 854  : 	ctxt->state = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+60], 0

; 855  : 	xmlFreeAutomata(ctxt->am);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	_xmlFreeAutomata
	add	esp, 4

; 856  : 	ctxt->am = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+56], 0

; 857  : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidBu
$LN9@xmlValidBu:

; 858  :     }
; 859  :     ctxt->state = NULL;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+60], 0

; 860  :     xmlFreeAutomata(ctxt->am);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlFreeAutomata
	add	esp, 4

; 861  :     ctxt->am = NULL;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+56], 0

; 862  :     return(1);

	mov	eax, 1
$LN1@xmlValidBu:

; 863  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@xmlValidBu
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 5008				; 00001390H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN13@xmlValidBu:
	DD	1
	DD	$LN12@xmlValidBu
$LN12@xmlValidBu:
	DD	-5004					; ffffec74H
	DD	5000					; 00001388H
	DD	$LN11@xmlValidBu
$LN11@xmlValidBu:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	0
_xmlValidBuildContentModel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNmtokensValue
_TEXT	SEGMENT
_value$ = 8						; size = 4
_xmlValidateNmtokensValue PROC				; COMDAT

; 3750 : xmlValidateNmtokensValue(const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3751 :     return(xmlValidateNmtokensValueInternal(NULL, value));

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	0
	call	_xmlValidateNmtokensValueInternal
	add	esp, 8

; 3752 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlValidateNmtokensValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNmtokenValue
_TEXT	SEGMENT
_value$ = 8						; size = 4
_xmlValidateNmtokenValue PROC				; COMDAT

; 3674 : xmlValidateNmtokenValue(const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3675 :     return(xmlValidateNmtokenValueInternal(NULL, value));

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	0
	call	_xmlValidateNmtokenValueInternal
	add	esp, 8

; 3676 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlValidateNmtokenValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNamesValue
_TEXT	SEGMENT
_value$ = 8						; size = 4
_xmlValidateNamesValue PROC				; COMDAT

; 3621 : xmlValidateNamesValue(const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3622 :     return(xmlValidateNamesValueInternal(NULL, value));

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	0
	call	_xmlValidateNamesValueInternal
	add	esp, 8

; 3623 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlValidateNamesValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNameValue
_TEXT	SEGMENT
_value$ = 8						; size = 4
_xmlValidateNameValue PROC				; COMDAT

; 3553 : xmlValidateNameValue(const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3554 :     return(xmlValidateNameValueInternal(NULL, value));

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	0
	call	_xmlValidateNameValueInternal
	add	esp, 8

; 3555 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlValidateNameValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidGetValidElements
_TEXT	SEGMENT
tv131 = -1176						; size = 4
tv128 = -1172						; size = 4
tv75 = -1168						; size = 4
_j$1 = -1164						; size = 4
_element_desc$ = -1160					; size = 4
_parent_last$ = -1156					; size = 4
_parent_childs$ = -1152					; size = 4
_next_prev$ = -1148					; size = 4
_prev_next$ = -1144					; size = 4
_test_node$ = -1140					; size = 4
_parent$ = -1136					; size = 4
_ref_node$ = -1132					; size = 4
_name$ = -1128						; size = 4
_i$ = -1124						; size = 4
_nb_elements$ = -1116					; size = 4
_elements$ = -1104					; size = 1024
_nb_valid_elements$ = -76				; size = 4
_vctxt$ = -68						; size = 64
_prev$ = 8						; size = 4
_next$ = 12						; size = 4
_names$ = 16						; size = 4
_max$ = 20						; size = 4
_xmlValidGetValidElements PROC				; COMDAT

; 6991 :                          int max) {

	push	ebp
	mov	ebp, esp
	sub	esp, 1176				; 00000498H
	push	edi
	lea	edi, DWORD PTR [ebp-1176]
	mov	ecx, 294				; 00000126H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6992 :     xmlValidCtxt vctxt;
; 6993 :     int nb_valid_elements = 0;

	mov	DWORD PTR _nb_valid_elements$[ebp], 0

; 6994 :     const xmlChar *elements[256]={0};

	push	1024					; 00000400H
	push	0
	lea	eax, DWORD PTR _elements$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 6995 :     int nb_elements = 0, i;

	mov	DWORD PTR _nb_elements$[ebp], 0

; 6996 :     const xmlChar *name;
; 6997 : 
; 6998 :     xmlNode *ref_node;
; 6999 :     xmlNode *parent;
; 7000 :     xmlNode *test_node;
; 7001 : 
; 7002 :     xmlNode *prev_next;
; 7003 :     xmlNode *next_prev;
; 7004 :     xmlNode *parent_childs;
; 7005 :     xmlNode *parent_last;
; 7006 : 
; 7007 :     xmlElement *element_desc;
; 7008 : 
; 7009 :     if (prev == NULL && next == NULL)

	cmp	DWORD PTR _prev$[ebp], 0
	jne	SHORT $LN8@xmlValidGe
	cmp	DWORD PTR _next$[ebp], 0
	jne	SHORT $LN8@xmlValidGe

; 7010 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlValidGe
$LN8@xmlValidGe:

; 7011 : 
; 7012 :     if (names == NULL) return(-1);

	cmp	DWORD PTR _names$[ebp], 0
	jne	SHORT $LN9@xmlValidGe
	or	eax, -1
	jmp	$LN1@xmlValidGe
$LN9@xmlValidGe:

; 7013 :     if (max <= 0) return(-1);

	cmp	DWORD PTR _max$[ebp], 0
	jg	SHORT $LN10@xmlValidGe
	or	eax, -1
	jmp	$LN1@xmlValidGe
$LN10@xmlValidGe:

; 7014 : 
; 7015 :     memset(&vctxt, 0, sizeof (xmlValidCtxt));

	push	64					; 00000040H
	push	0
	lea	ecx, DWORD PTR _vctxt$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 7016 :     vctxt.error = xmlNoValidityErr;	/* this suppresses err/warn output */

	mov	DWORD PTR _vctxt$[ebp+4], OFFSET _xmlNoValidityErr

; 7017 : 
; 7018 :     nb_valid_elements = 0;

	mov	DWORD PTR _nb_valid_elements$[ebp], 0

; 7019 :     ref_node = prev ? prev : next;

	cmp	DWORD PTR _prev$[ebp], 0
	je	SHORT $LN24@xmlValidGe
	mov	edx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR tv75[ebp], edx
	jmp	SHORT $LN25@xmlValidGe
$LN24@xmlValidGe:
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR tv75[ebp], eax
$LN25@xmlValidGe:
	mov	ecx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _ref_node$[ebp], ecx

; 7020 :     parent = ref_node->parent;

	mov	edx, DWORD PTR _ref_node$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _parent$[ebp], eax

; 7021 : 
; 7022 :     /*
; 7023 :      * Retrieves the parent element declaration
; 7024 :      */
; 7025 :     element_desc = xmlGetDtdElementDesc(parent->doc->intSubset,

	mov	ecx, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _element_desc$[ebp], eax

; 7026 :                                          parent->name);
; 7027 :     if ((element_desc == NULL) && (parent->doc->extSubset != NULL))

	cmp	DWORD PTR _element_desc$[ebp], 0
	jne	SHORT $LN11@xmlValidGe
	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN11@xmlValidGe

; 7028 :         element_desc = xmlGetDtdElementDesc(parent->doc->extSubset,

	mov	edx, DWORD PTR _parent$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _element_desc$[ebp], eax
$LN11@xmlValidGe:

; 7029 :                                              parent->name);
; 7030 :     if (element_desc == NULL) return(-1);

	cmp	DWORD PTR _element_desc$[ebp], 0
	jne	SHORT $LN12@xmlValidGe
	or	eax, -1
	jmp	$LN1@xmlValidGe
$LN12@xmlValidGe:

; 7031 : 
; 7032 :     /*
; 7033 :      * Do a backup of the current tree structure
; 7034 :      */
; 7035 :     prev_next = prev ? prev->next : NULL;

	cmp	DWORD PTR _prev$[ebp], 0
	je	SHORT $LN26@xmlValidGe
	mov	ecx, DWORD PTR _prev$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR tv128[ebp], edx
	jmp	SHORT $LN27@xmlValidGe
$LN26@xmlValidGe:
	mov	DWORD PTR tv128[ebp], 0
$LN27@xmlValidGe:
	mov	eax, DWORD PTR tv128[ebp]
	mov	DWORD PTR _prev_next$[ebp], eax

; 7036 :     next_prev = next ? next->prev : NULL;

	cmp	DWORD PTR _next$[ebp], 0
	je	SHORT $LN28@xmlValidGe
	mov	ecx, DWORD PTR _next$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR tv131[ebp], edx
	jmp	SHORT $LN29@xmlValidGe
$LN28@xmlValidGe:
	mov	DWORD PTR tv131[ebp], 0
$LN29@xmlValidGe:
	mov	eax, DWORD PTR tv131[ebp]
	mov	DWORD PTR _next_prev$[ebp], eax

; 7037 :     parent_childs = parent->children;

	mov	ecx, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _parent_childs$[ebp], edx

; 7038 :     parent_last = parent->last;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _parent_last$[ebp], ecx

; 7039 : 
; 7040 :     /*
; 7041 :      * Creates a dummy node and insert it into the tree
; 7042 :      */
; 7043 :     test_node = xmlNewDocNode (ref_node->doc, NULL, BAD_CAST "<!dummy?>", NULL);

	push	0
	push	OFFSET ??_C@_09LMMMMLKM@?$DM?$CBdummy?$DP?$DO@
	push	0
	mov	edx, DWORD PTR _ref_node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlNewDocNode
	add	esp, 16					; 00000010H
	mov	DWORD PTR _test_node$[ebp], eax

; 7044 :     if (test_node == NULL)

	cmp	DWORD PTR _test_node$[ebp], 0
	jne	SHORT $LN13@xmlValidGe

; 7045 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlValidGe
$LN13@xmlValidGe:

; 7046 : 
; 7047 :     test_node->parent = parent;

	mov	ecx, DWORD PTR _test_node$[ebp]
	mov	edx, DWORD PTR _parent$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 7048 :     test_node->prev = prev;

	mov	eax, DWORD PTR _test_node$[ebp]
	mov	ecx, DWORD PTR _prev$[ebp]
	mov	DWORD PTR [eax+28], ecx

; 7049 :     test_node->next = next;

	mov	edx, DWORD PTR _test_node$[ebp]
	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR [edx+24], eax

; 7050 :     name = test_node->name;

	mov	ecx, DWORD PTR _test_node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _name$[ebp], edx

; 7051 : 
; 7052 :     if (prev) prev->next = test_node;

	cmp	DWORD PTR _prev$[ebp], 0
	je	SHORT $LN14@xmlValidGe
	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _test_node$[ebp]
	mov	DWORD PTR [eax+24], ecx
	jmp	SHORT $LN15@xmlValidGe
$LN14@xmlValidGe:

; 7053 :     else parent->children = test_node;

	mov	edx, DWORD PTR _parent$[ebp]
	mov	eax, DWORD PTR _test_node$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN15@xmlValidGe:

; 7054 : 
; 7055 :     if (next) next->prev = test_node;

	cmp	DWORD PTR _next$[ebp], 0
	je	SHORT $LN16@xmlValidGe
	mov	ecx, DWORD PTR _next$[ebp]
	mov	edx, DWORD PTR _test_node$[ebp]
	mov	DWORD PTR [ecx+28], edx
	jmp	SHORT $LN17@xmlValidGe
$LN16@xmlValidGe:

; 7056 :     else parent->last = test_node;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR _test_node$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN17@xmlValidGe:

; 7057 : 
; 7058 :     /*
; 7059 :      * Insert each potential child node and check if the parent is
; 7060 :      * still valid
; 7061 :      */
; 7062 :     nb_elements = xmlValidGetPotentialChildren(element_desc->content,

	push	256					; 00000100H
	lea	edx, DWORD PTR _nb_elements$[ebp]
	push	edx
	lea	eax, DWORD PTR _elements$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element_desc$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_xmlValidGetPotentialChildren
	add	esp, 16					; 00000010H
	mov	DWORD PTR _nb_elements$[ebp], eax

; 7063 : 		       elements, &nb_elements, 256);
; 7064 : 
; 7065 :     for (i = 0;i < nb_elements;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlValidGe
$LN2@xmlValidGe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlValidGe:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _nb_elements$[ebp]
	jge	$LN3@xmlValidGe

; 7066 : 	test_node->name = elements[i];

	mov	edx, DWORD PTR _test_node$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _elements$[ebp+eax*4]
	mov	DWORD PTR [edx+8], ecx

; 7067 : 	if (xmlValidateOneElement(&vctxt, parent->doc, parent)) {

	mov	edx, DWORD PTR _parent$[ebp]
	push	edx
	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	lea	edx, DWORD PTR _vctxt$[ebp]
	push	edx
	call	_xmlValidateOneElement
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN18@xmlValidGe

; 7068 : 	    int j;
; 7069 : 
; 7070 : 	    for (j = 0; j < nb_valid_elements;j++)

	mov	DWORD PTR _j$1[ebp], 0
	jmp	SHORT $LN7@xmlValidGe
$LN5@xmlValidGe:
	mov	eax, DWORD PTR _j$1[ebp]
	add	eax, 1
	mov	DWORD PTR _j$1[ebp], eax
$LN7@xmlValidGe:
	mov	ecx, DWORD PTR _j$1[ebp]
	cmp	ecx, DWORD PTR _nb_valid_elements$[ebp]
	jge	SHORT $LN6@xmlValidGe

; 7071 : 		if (xmlStrEqual(elements[i], names[j])) break;

	mov	edx, DWORD PTR _j$1[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _elements$[ebp+edx*4]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@xmlValidGe
	jmp	SHORT $LN6@xmlValidGe
$LN19@xmlValidGe:
	jmp	SHORT $LN5@xmlValidGe
$LN6@xmlValidGe:

; 7072 : 	    names[nb_valid_elements++] = elements[i];

	mov	ecx, DWORD PTR _nb_valid_elements$[ebp]
	mov	edx, DWORD PTR _names$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _elements$[ebp+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
	mov	ecx, DWORD PTR _nb_valid_elements$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nb_valid_elements$[ebp], ecx

; 7073 : 	    if (nb_valid_elements >= max) break;

	mov	edx, DWORD PTR _nb_valid_elements$[ebp]
	cmp	edx, DWORD PTR _max$[ebp]
	jl	SHORT $LN18@xmlValidGe
	jmp	SHORT $LN3@xmlValidGe
$LN18@xmlValidGe:

; 7074 : 	}
; 7075 :     }

	jmp	$LN2@xmlValidGe
$LN3@xmlValidGe:

; 7076 : 
; 7077 :     /*
; 7078 :      * Restore the tree structure
; 7079 :      */
; 7080 :     if (prev) prev->next = prev_next;

	cmp	DWORD PTR _prev$[ebp], 0
	je	SHORT $LN21@xmlValidGe
	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _prev_next$[ebp]
	mov	DWORD PTR [eax+24], ecx
$LN21@xmlValidGe:

; 7081 :     if (next) next->prev = next_prev;

	cmp	DWORD PTR _next$[ebp], 0
	je	SHORT $LN22@xmlValidGe
	mov	edx, DWORD PTR _next$[ebp]
	mov	eax, DWORD PTR _next_prev$[ebp]
	mov	DWORD PTR [edx+28], eax
$LN22@xmlValidGe:

; 7082 :     parent->children = parent_childs;

	mov	ecx, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR _parent_childs$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 7083 :     parent->last = parent_last;

	mov	eax, DWORD PTR _parent$[ebp]
	mov	ecx, DWORD PTR _parent_last$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 7084 : 
; 7085 :     /*
; 7086 :      * Free up the dummy node
; 7087 :      */
; 7088 :     test_node->name = name;

	mov	edx, DWORD PTR _test_node$[ebp]
	mov	eax, DWORD PTR _name$[ebp]
	mov	DWORD PTR [edx+8], eax

; 7089 :     xmlFreeNode(test_node);

	mov	ecx, DWORD PTR _test_node$[ebp]
	push	ecx
	call	_xmlFreeNode
	add	esp, 4

; 7090 : 
; 7091 :     return(nb_valid_elements);

	mov	eax, DWORD PTR _nb_valid_elements$[ebp]
$LN1@xmlValidGe:

; 7092 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN34@xmlValidGe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 1176				; 00000498H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN34@xmlValidGe:
	DD	3
	DD	$LN33@xmlValidGe
$LN33@xmlValidGe:
	DD	-68					; ffffffbcH
	DD	64					; 00000040H
	DD	$LN30@xmlValidGe
	DD	-1104					; fffffbb0H
	DD	1024					; 00000400H
	DD	$LN31@xmlValidGe
	DD	-1116					; fffffba4H
	DD	4
	DD	$LN32@xmlValidGe
$LN32@xmlValidGe:
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	95					; 0000005fH
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN31@xmlValidGe:
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN30@xmlValidGe:
	DB	118					; 00000076H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
_xmlValidGetValidElements ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidGetPotentialChildren
_TEXT	SEGMENT
tv69 = -8						; size = 4
_i$ = -4						; size = 4
_ctree$ = 8						; size = 4
_names$ = 12						; size = 4
_len$ = 16						; size = 4
_max$ = 20						; size = 4
_xmlValidGetPotentialChildren PROC			; COMDAT

; 6925 :                              int *len, int max) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6926 :     int i;
; 6927 : 
; 6928 :     if ((ctree == NULL) || (names == NULL) || (len == NULL))

	cmp	DWORD PTR _ctree$[ebp], 0
	je	SHORT $LN11@xmlValidGe
	cmp	DWORD PTR _names$[ebp], 0
	je	SHORT $LN11@xmlValidGe
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN10@xmlValidGe
$LN11@xmlValidGe:

; 6929 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlValidGe
$LN10@xmlValidGe:

; 6930 :     if (*len >= max) return(*len);

	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	ecx, DWORD PTR _max$[ebp]
	jl	SHORT $LN12@xmlValidGe
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [edx]
	jmp	$LN1@xmlValidGe
$LN12@xmlValidGe:

; 6931 : 
; 6932 :     switch (ctree->type) {

	mov	eax, DWORD PTR _ctree$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	mov	edx, DWORD PTR tv69[ebp]
	sub	edx, 1
	mov	DWORD PTR tv69[ebp], edx
	cmp	DWORD PTR tv69[ebp], 3
	ja	$LN2@xmlValidGe
	mov	eax, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN20@xmlValidGe[eax*4]
$LN13@xmlValidGe:

; 6933 : 	case XML_ELEMENT_CONTENT_PCDATA:
; 6934 : 	    for (i = 0; i < *len;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@xmlValidGe
$LN4@xmlValidGe:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN6@xmlValidGe:
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx]
	jge	SHORT $LN5@xmlValidGe

; 6935 : 		if (xmlStrEqual(BAD_CAST "#PCDATA", names[i])) return(*len);

	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _names$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	push	OFFSET ??_C@_07ELDBONKP@?$CDPCDATA@
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@xmlValidGe
	mov	ecx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [ecx]
	jmp	$LN1@xmlValidGe
$LN14@xmlValidGe:
	jmp	SHORT $LN4@xmlValidGe
$LN5@xmlValidGe:

; 6936 : 	    names[(*len)++] = BAD_CAST "#PCDATA";

	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _names$[ebp]
	mov	DWORD PTR [ecx+eax*4], OFFSET ??_C@_07ELDBONKP@?$CDPCDATA@
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, 1
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx], eax

; 6937 : 	    break;

	jmp	$LN2@xmlValidGe
$LN15@xmlValidGe:

; 6938 : 	case XML_ELEMENT_CONTENT_ELEMENT:
; 6939 : 	    for (i = 0; i < *len;i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@xmlValidGe
$LN7@xmlValidGe:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN9@xmlValidGe:
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax]
	jge	SHORT $LN8@xmlValidGe

; 6940 : 		if (xmlStrEqual(ctree->name, names[i])) return(*len);

	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	mov	edx, DWORD PTR _ctree$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@xmlValidGe
	mov	ecx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [ecx]
	jmp	$LN1@xmlValidGe
$LN16@xmlValidGe:
	jmp	SHORT $LN7@xmlValidGe
$LN8@xmlValidGe:

; 6941 : 	    names[(*len)++] = ctree->name;

	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _names$[ebp]
	mov	edx, DWORD PTR _ctree$[ebp]
	mov	edx, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx], ecx

; 6942 : 	    break;

	jmp	SHORT $LN2@xmlValidGe
$LN17@xmlValidGe:

; 6943 : 	case XML_ELEMENT_CONTENT_SEQ:
; 6944 : 	    xmlValidGetPotentialChildren(ctree->c1, names, len, max);

	mov	eax, DWORD PTR _max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _names$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctree$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlValidGetPotentialChildren
	add	esp, 16					; 00000010H

; 6945 : 	    xmlValidGetPotentialChildren(ctree->c2, names, len, max);

	mov	edx, DWORD PTR _max$[ebp]
	push	edx
	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _names$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctree$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlValidGetPotentialChildren
	add	esp, 16					; 00000010H

; 6946 : 	    break;

	jmp	SHORT $LN2@xmlValidGe
$LN18@xmlValidGe:

; 6947 : 	case XML_ELEMENT_CONTENT_OR:
; 6948 : 	    xmlValidGetPotentialChildren(ctree->c1, names, len, max);

	mov	ecx, DWORD PTR _max$[ebp]
	push	ecx
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _names$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctree$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlValidGetPotentialChildren
	add	esp, 16					; 00000010H

; 6949 : 	    xmlValidGetPotentialChildren(ctree->c2, names, len, max);

	mov	eax, DWORD PTR _max$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _names$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctree$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlValidGetPotentialChildren
	add	esp, 16					; 00000010H
$LN2@xmlValidGe:

; 6950 : 	    break;
; 6951 :    }
; 6952 : 
; 6953 :    return(*len);

	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR [edx]
$LN1@xmlValidGe:

; 6954 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@xmlValidGe:
	DD	$LN13@xmlValidGe
	DD	$LN15@xmlValidGe
	DD	$LN17@xmlValidGe
	DD	$LN18@xmlValidGe
_xmlValidGetPotentialChildren ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlGetDtdElementDesc
_TEXT	SEGMENT
_prefix$ = -20						; size = 4
_uqname$ = -12						; size = 4
_cur$ = -8						; size = 4
_table$ = -4						; size = 4
_dtd$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlGetDtdElementDesc PROC				; COMDAT

; 3176 : xmlGetDtdElementDesc(xmlDtdPtr dtd, const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3177 :     xmlElementTablePtr table;
; 3178 :     xmlElementPtr cur;
; 3179 :     xmlChar *uqname = NULL, *prefix = NULL;

	mov	DWORD PTR _uqname$[ebp], 0
	mov	DWORD PTR _prefix$[ebp], 0

; 3180 : 
; 3181 :     if ((dtd == NULL) || (name == NULL)) return(NULL);

	cmp	DWORD PTR _dtd$[ebp], 0
	je	SHORT $LN3@xmlGetDtdE
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN2@xmlGetDtdE
$LN3@xmlGetDtdE:
	xor	eax, eax
	jmp	$LN1@xmlGetDtdE
$LN2@xmlGetDtdE:

; 3182 :     if (dtd->elements == NULL)

	mov	eax, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN4@xmlGetDtdE

; 3183 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlGetDtdE
$LN4@xmlGetDtdE:

; 3184 :     table = (xmlElementTablePtr) dtd->elements;

	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _table$[ebp], edx

; 3185 : 
; 3186 :     uqname = xmlSplitQName2(name, &prefix);

	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlSplitQName2
	add	esp, 8
	mov	DWORD PTR _uqname$[ebp], eax

; 3187 :     if (uqname != NULL)

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN5@xmlGetDtdE

; 3188 :         name = uqname;

	mov	edx, DWORD PTR _uqname$[ebp]
	mov	DWORD PTR _name$[ebp], edx
$LN5@xmlGetDtdE:

; 3189 :     cur = xmlHashLookup2(table, name, prefix);

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_xmlHashLookup2
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _cur$[ebp], eax

; 3190 :     if (prefix != NULL) xmlFree(prefix);

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN6@xmlGetDtdE
	mov	esi, esp
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlGetDtdE:

; 3191 :     if (uqname != NULL) xmlFree(uqname);

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN7@xmlGetDtdE
	mov	esi, esp
	mov	ecx, DWORD PTR _uqname$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@xmlGetDtdE:

; 3192 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlGetDtdE:

; 3193 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@xmlGetDtdE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@xmlGetDtdE:
	DD	1
	DD	$LN10@xmlGetDtdE
$LN10@xmlGetDtdE:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@xmlGetDtdE
$LN9@xmlGetDtdE:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlGetDtdElementDesc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlGetDtdQElementDesc
_TEXT	SEGMENT
_table$ = -4						; size = 4
_dtd$ = 8						; size = 4
_name$ = 12						; size = 4
_prefix$ = 16						; size = 4
_xmlGetDtdQElementDesc PROC				; COMDAT

; 3275 : 	              const xmlChar *prefix) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3276 :     xmlElementTablePtr table;
; 3277 : 
; 3278 :     if (dtd == NULL) return(NULL);

	cmp	DWORD PTR _dtd$[ebp], 0
	jne	SHORT $LN2@xmlGetDtdQ
	xor	eax, eax
	jmp	SHORT $LN1@xmlGetDtdQ
$LN2@xmlGetDtdQ:

; 3279 :     if (dtd->elements == NULL) return(NULL);

	mov	eax, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN3@xmlGetDtdQ
	xor	eax, eax
	jmp	SHORT $LN1@xmlGetDtdQ
$LN3@xmlGetDtdQ:

; 3280 :     table = (xmlElementTablePtr) dtd->elements;

	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR _table$[ebp], edx

; 3281 : 
; 3282 :     return(xmlHashLookup2(table, name, prefix));

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_xmlHashLookup2
	add	esp, 12					; 0000000cH
$LN1@xmlGetDtdQ:

; 3283 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlGetDtdQElementDesc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlGetDtdNotationDesc
_TEXT	SEGMENT
_table$ = -4						; size = 4
_dtd$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlGetDtdNotationDesc PROC				; COMDAT

; 3357 : xmlGetDtdNotationDesc(xmlDtdPtr dtd, const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3358 :     xmlNotationTablePtr table;
; 3359 : 
; 3360 :     if (dtd == NULL) return(NULL);

	cmp	DWORD PTR _dtd$[ebp], 0
	jne	SHORT $LN2@xmlGetDtdN
	xor	eax, eax
	jmp	SHORT $LN1@xmlGetDtdN
$LN2@xmlGetDtdN:

; 3361 :     if (dtd->notations == NULL) return(NULL);

	mov	eax, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN3@xmlGetDtdN
	xor	eax, eax
	jmp	SHORT $LN1@xmlGetDtdN
$LN3@xmlGetDtdN:

; 3362 :     table = (xmlNotationTablePtr) dtd->notations;

	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _table$[ebp], edx

; 3363 : 
; 3364 :     return(xmlHashLookup(table, name));

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_xmlHashLookup
	add	esp, 8
$LN1@xmlGetDtdN:

; 3365 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlGetDtdNotationDesc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlGetDtdQAttrDesc
_TEXT	SEGMENT
_table$ = -4						; size = 4
_dtd$ = 8						; size = 4
_elem$ = 12						; size = 4
_name$ = 16						; size = 4
_prefix$ = 20						; size = 4
_xmlGetDtdQAttrDesc PROC				; COMDAT

; 3336 : 	          const xmlChar *prefix) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3337 :     xmlAttributeTablePtr table;
; 3338 : 
; 3339 :     if (dtd == NULL) return(NULL);

	cmp	DWORD PTR _dtd$[ebp], 0
	jne	SHORT $LN2@xmlGetDtdQ
	xor	eax, eax
	jmp	SHORT $LN1@xmlGetDtdQ
$LN2@xmlGetDtdQ:

; 3340 :     if (dtd->attributes == NULL) return(NULL);

	mov	eax, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN3@xmlGetDtdQ
	xor	eax, eax
	jmp	SHORT $LN1@xmlGetDtdQ
$LN3@xmlGetDtdQ:

; 3341 :     table = (xmlAttributeTablePtr) dtd->attributes;

	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _table$[ebp], edx

; 3342 : 
; 3343 :     return(xmlHashLookup3(table, name, prefix, elem));

	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashLookup3
	add	esp, 16					; 00000010H
$LN1@xmlGetDtdQ:

; 3344 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlGetDtdQAttrDesc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlGetDtdAttrDesc
_TEXT	SEGMENT
_prefix$ = -20						; size = 4
_uqname$ = -12						; size = 4
_cur$ = -8						; size = 4
_table$ = -4						; size = 4
_dtd$ = 8						; size = 4
_elem$ = 12						; size = 4
_name$ = 16						; size = 4
_xmlGetDtdAttrDesc PROC					; COMDAT

; 3298 : xmlGetDtdAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3299 :     xmlAttributeTablePtr table;
; 3300 :     xmlAttributePtr cur;
; 3301 :     xmlChar *uqname = NULL, *prefix = NULL;

	mov	DWORD PTR _uqname$[ebp], 0
	mov	DWORD PTR _prefix$[ebp], 0

; 3302 : 
; 3303 :     if (dtd == NULL) return(NULL);

	cmp	DWORD PTR _dtd$[ebp], 0
	jne	SHORT $LN2@xmlGetDtdA
	xor	eax, eax
	jmp	$LN1@xmlGetDtdA
$LN2@xmlGetDtdA:

; 3304 :     if (dtd->attributes == NULL) return(NULL);

	mov	eax, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN3@xmlGetDtdA
	xor	eax, eax
	jmp	$LN1@xmlGetDtdA
$LN3@xmlGetDtdA:

; 3305 : 
; 3306 :     table = (xmlAttributeTablePtr) dtd->attributes;

	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _table$[ebp], edx

; 3307 :     if (table == NULL)

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN4@xmlGetDtdA

; 3308 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlGetDtdA
$LN4@xmlGetDtdA:

; 3309 : 
; 3310 :     uqname = xmlSplitQName2(name, &prefix);

	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlSplitQName2
	add	esp, 8
	mov	DWORD PTR _uqname$[ebp], eax

; 3311 : 
; 3312 :     if (uqname != NULL) {

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN5@xmlGetDtdA

; 3313 : 	cur = xmlHashLookup3(table, uqname, prefix, elem);

	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _uqname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_xmlHashLookup3
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cur$[ebp], eax

; 3314 : 	if (prefix != NULL) xmlFree(prefix);

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN7@xmlGetDtdA
	mov	esi, esp
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@xmlGetDtdA:

; 3315 : 	if (uqname != NULL) xmlFree(uqname);

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN8@xmlGetDtdA
	mov	esi, esp
	mov	ecx, DWORD PTR _uqname$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@xmlGetDtdA:

; 3316 :     } else

	jmp	SHORT $LN6@xmlGetDtdA
$LN5@xmlGetDtdA:

; 3317 : 	cur = xmlHashLookup3(table, name, NULL, elem);

	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_xmlHashLookup3
	add	esp, 16					; 00000010H
	mov	DWORD PTR _cur$[ebp], eax
$LN6@xmlGetDtdA:

; 3318 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlGetDtdA:

; 3319 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@xmlGetDtdA
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@xmlGetDtdA:
	DD	1
	DD	$LN11@xmlGetDtdA
$LN11@xmlGetDtdA:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN10@xmlGetDtdA
$LN10@xmlGetDtdA:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlGetDtdAttrDesc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlIsMixedElement
_TEXT	SEGMENT
tv80 = -8						; size = 4
_elemDecl$ = -4						; size = 4
_doc$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlIsMixedElement PROC					; COMDAT

; 3413 : xmlIsMixedElement(xmlDocPtr doc, const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3414 :     xmlElementPtr elemDecl;
; 3415 : 
; 3416 :     if ((doc == NULL) || (doc->intSubset == NULL)) return(-1);

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN5@xmlIsMixed
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN4@xmlIsMixed
$LN5@xmlIsMixed:
	or	eax, -1
	jmp	SHORT $LN1@xmlIsMixed
$LN4@xmlIsMixed:

; 3417 : 
; 3418 :     elemDecl = xmlGetDtdElementDesc(doc->intSubset, name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _elemDecl$[ebp], eax

; 3419 :     if ((elemDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _elemDecl$[ebp], 0
	jne	SHORT $LN6@xmlIsMixed
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN6@xmlIsMixed

; 3420 : 	elemDecl = xmlGetDtdElementDesc(doc->extSubset, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _elemDecl$[ebp], eax
$LN6@xmlIsMixed:

; 3421 :     if (elemDecl == NULL) return(-1);

	cmp	DWORD PTR _elemDecl$[ebp], 0
	jne	SHORT $LN7@xmlIsMixed
	or	eax, -1
	jmp	SHORT $LN1@xmlIsMixed
$LN7@xmlIsMixed:

; 3422 :     switch (elemDecl->etype) {

	mov	edx, DWORD PTR _elemDecl$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR tv80[ebp], eax
	cmp	DWORD PTR tv80[ebp], 4
	ja	SHORT $LN2@xmlIsMixed
	mov	ecx, DWORD PTR tv80[ebp]
	jmp	DWORD PTR $LN12@xmlIsMixed[ecx*4]
$LN8@xmlIsMixed:

; 3423 : 	case XML_ELEMENT_TYPE_UNDEFINED:
; 3424 : 	    return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlIsMixed
$LN9@xmlIsMixed:

; 3425 : 	case XML_ELEMENT_TYPE_ELEMENT:
; 3426 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlIsMixed
$LN10@xmlIsMixed:

; 3427 :         case XML_ELEMENT_TYPE_EMPTY:
; 3428 : 	    /*
; 3429 : 	     * return 1 for EMPTY since we want VC error to pop up
; 3430 : 	     * on <empty>     </empty> for example
; 3431 : 	     */
; 3432 : 	case XML_ELEMENT_TYPE_ANY:
; 3433 : 	case XML_ELEMENT_TYPE_MIXED:
; 3434 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlIsMixed
$LN2@xmlIsMixed:

; 3435 :     }
; 3436 :     return(1);

	mov	eax, 1
$LN1@xmlIsMixed:

; 3437 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@xmlIsMixed:
	DD	$LN8@xmlIsMixed
	DD	$LN10@xmlIsMixed
	DD	$LN10@xmlIsMixed
	DD	$LN10@xmlIsMixed
	DD	$LN9@xmlIsMixed
_xmlIsMixedElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNotationUse
_TEXT	SEGMENT
_notaDecl$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_notationName$ = 16					; size = 4
_xmlValidateNotationUse PROC				; COMDAT

; 3382 :                        const xmlChar *notationName) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3383 :     xmlNotationPtr notaDecl;
; 3384 :     if ((doc == NULL) || (doc->intSubset == NULL) ||

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN3@xmlValidat
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN3@xmlValidat
	cmp	DWORD PTR _notationName$[ebp], 0
	jne	SHORT $LN2@xmlValidat
$LN3@xmlValidat:

; 3385 :         (notationName == NULL)) return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlValidat
$LN2@xmlValidat:

; 3386 : 
; 3387 :     notaDecl = xmlGetDtdNotationDesc(doc->intSubset, notationName);

	mov	ecx, DWORD PTR _notationName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdNotationDesc
	add	esp, 8
	mov	DWORD PTR _notaDecl$[ebp], eax

; 3388 :     if ((notaDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _notaDecl$[ebp], 0
	jne	SHORT $LN4@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN4@xmlValidat

; 3389 : 	notaDecl = xmlGetDtdNotationDesc(doc->extSubset, notationName);

	mov	edx, DWORD PTR _notationName$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlGetDtdNotationDesc
	add	esp, 8
	mov	DWORD PTR _notaDecl$[ebp], eax
$LN4@xmlValidat:

; 3390 : 
; 3391 :     if ((notaDecl == NULL) && (ctxt != NULL)) {

	cmp	DWORD PTR _notaDecl$[ebp], 0
	jne	SHORT $LN5@xmlValidat
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlValidat

; 3392 : 	xmlErrValidNode(ctxt, (xmlNodePtr) doc, XML_DTD_UNKNOWN_NOTATION,

	push	0
	push	0
	mov	edx, DWORD PTR _notationName$[ebp]
	push	edx
	push	OFFSET ??_C@_0BN@NONOBNKE@NOTATION?5?$CFs?5is?5not?5declared?6@
	push	537					; 00000219H
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 3393 : 	                "NOTATION %s is not declared\n",
; 3394 : 		        notationName, NULL, NULL);
; 3395 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN5@xmlValidat:

; 3396 :     }
; 3397 :     return(1);

	mov	eax, 1
$LN1@xmlValidat:

; 3398 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateNotationUse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateDocumentFinal
_TEXT	SEGMENT
_save$ = -8						; size = 4
_table$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_xmlValidateDocumentFinal PROC				; COMDAT

; 6603 : xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6604 :     xmlRefTablePtr table;
; 6605 :     unsigned int save;
; 6606 : 
; 6607 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlValidat

; 6608 :         return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN2@xmlValidat:

; 6609 :     if (doc == NULL) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN3@xmlValidat

; 6610 :         xmlErrValid(ctxt, XML_DTD_NO_DOC,

	push	0
	push	OFFSET ??_C@_0CH@PKJJCFEM@xmlValidateDocumentFinal?3?5doc?5?$DN@
	push	521					; 00000209H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 6611 : 		"xmlValidateDocumentFinal: doc == NULL\n", NULL);
; 6612 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN3@xmlValidat:

; 6613 :     }
; 6614 : 
; 6615 :     /* trick to get correct line id report */
; 6616 :     save = ctxt->finishDtd;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _save$[ebp], edx

; 6617 :     ctxt->finishDtd = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+28], 0

; 6618 : 
; 6619 :     /*
; 6620 :      * Check all the NOTATION/NOTATIONS attributes
; 6621 :      */
; 6622 :     /*
; 6623 :      * Check all the ENTITY/ENTITIES attributes definition for validity
; 6624 :      */
; 6625 :     /*
; 6626 :      * Check all the IDREF/IDREFS attributes definition for validity
; 6627 :      */
; 6628 :     table = (xmlRefTablePtr) doc->refs;

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _table$[ebp], edx

; 6629 :     ctxt->doc = doc;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [eax+32], ecx

; 6630 :     ctxt->valid = 1;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+36], 1

; 6631 :     xmlHashScan(table, xmlValidateCheckRefCallback, ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	push	OFFSET _xmlValidateCheckRefCallback
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_xmlHashScan
	add	esp, 12					; 0000000cH

; 6632 : 
; 6633 :     ctxt->finishDtd = save;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _save$[ebp]
	mov	DWORD PTR [edx+28], eax

; 6634 :     return(ctxt->valid);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [ecx+36]
$LN1@xmlValidat:

; 6635 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateDocumentFinal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateOneNamespace
_TEXT	SEGMENT
_tree$1 = -88						; size = 4
_nota$2 = -84						; size = 4
_tree$3 = -80						; size = 4
_fullname$4 = -76					; size = 4
_fn$5 = -68						; size = 50
_ret$ = -12						; size = 4
_val$ = -8						; size = 4
_attrDecl$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_prefix$ = 20						; size = 4
_ns$ = 24						; size = 4
_value$ = 28						; size = 4
_xmlValidateOneNamespace PROC				; COMDAT

; 4559 : xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 4560 :     /* xmlElementPtr elemDecl; */
; 4561 :     xmlAttributePtr attrDecl =  NULL;

	mov	DWORD PTR _attrDecl$[ebp], 0

; 4562 :     int val;
; 4563 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 4564 : 
; 4565 :     CHECK_DTD;

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN6@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
	jmp	SHORT $LN7@xmlValidat
$LN6@xmlValidat:
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN7@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN7@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN7@xmlValidat:

; 4566 :     if ((elem == NULL) || (elem->name == NULL)) return(0);

	cmp	DWORD PTR _elem$[ebp], 0
	je	SHORT $LN10@xmlValidat
	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN9@xmlValidat
$LN10@xmlValidat:
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN9@xmlValidat:

; 4567 :     if ((ns == NULL) || (ns->href == NULL)) return(0);

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN12@xmlValidat
	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@xmlValidat
$LN12@xmlValidat:
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN11@xmlValidat:

; 4568 : 
; 4569 :     if (prefix != NULL) {

	cmp	DWORD PTR _prefix$[ebp], 0
	je	$LN13@xmlValidat

; 4570 : 	xmlChar fn[50];
; 4571 : 	xmlChar *fullname;
; 4572 : 
; 4573 : 	fullname = xmlBuildQName(elem->name, prefix, fn, 50);

	push	50					; 00000032H
	lea	ecx, DWORD PTR _fn$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$4[ebp], eax

; 4574 : 	if (fullname == NULL) {

	cmp	DWORD PTR _fullname$4[ebp], 0
	jne	SHORT $LN14@xmlValidat

; 4575 : 	    xmlVErrMemory(ctxt, "Validating namespace");

	push	OFFSET ??_C@_0BF@INLCBMIM@Validating?5namespace@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlVErrMemory
	add	esp, 8

; 4576 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN14@xmlValidat:

; 4577 : 	}
; 4578 : 	if (ns->prefix != NULL) {

	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN15@xmlValidat

; 4579 : 	    attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, fullname,

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _fullname$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4580 : 		                          ns->prefix, BAD_CAST "xmlns");
; 4581 : 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN17@xmlValidat
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN17@xmlValidat

; 4582 : 		attrDecl = xmlGetDtdQAttrDesc(doc->extSubset, fullname,

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _fullname$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN17@xmlValidat:

; 4583 : 					  ns->prefix, BAD_CAST "xmlns");
; 4584 : 	} else {

	jmp	SHORT $LN16@xmlValidat
$LN15@xmlValidat:

; 4585 : 	    attrDecl = xmlGetDtdAttrDesc(doc->intSubset, fullname,

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _fullname$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4586 : 		                         BAD_CAST "xmlns");
; 4587 : 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN16@xmlValidat
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN16@xmlValidat

; 4588 : 		attrDecl = xmlGetDtdAttrDesc(doc->extSubset, fullname,

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	ecx, DWORD PTR _fullname$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN16@xmlValidat:

; 4589 : 			                 BAD_CAST "xmlns");
; 4590 : 	}
; 4591 : 	if ((fullname != fn) && (fullname != elem->name))

	lea	ecx, DWORD PTR _fn$5[ebp]
	cmp	DWORD PTR _fullname$4[ebp], ecx
	je	SHORT $LN13@xmlValidat
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR _fullname$4[ebp]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN13@xmlValidat

; 4592 : 	    xmlFree(fullname);

	mov	esi, esp
	mov	ecx, DWORD PTR _fullname$4[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlValidat:

; 4593 :     }
; 4594 :     if (attrDecl == NULL) {

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	$LN20@xmlValidat

; 4595 : 	if (ns->prefix != NULL) {

	mov	edx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN21@xmlValidat

; 4596 : 	    attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, elem->name,

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4597 : 		                          ns->prefix, BAD_CAST "xmlns");
; 4598 : 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN23@xmlValidat
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN23@xmlValidat

; 4599 : 		attrDecl = xmlGetDtdQAttrDesc(doc->extSubset, elem->name,

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN23@xmlValidat:

; 4600 : 					      ns->prefix, BAD_CAST "xmlns");
; 4601 : 	} else {

	jmp	SHORT $LN20@xmlValidat
$LN21@xmlValidat:

; 4602 : 	    attrDecl = xmlGetDtdAttrDesc(doc->intSubset,

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4603 : 		                         elem->name, BAD_CAST "xmlns");
; 4604 : 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN20@xmlValidat
	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN20@xmlValidat

; 4605 : 		attrDecl = xmlGetDtdAttrDesc(doc->extSubset,

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN20@xmlValidat:

; 4606 : 					     elem->name, BAD_CAST "xmlns");
; 4607 : 	}
; 4608 :     }
; 4609 : 
; 4610 : 
; 4611 :     /* Validity Constraint: Attribute Value Type */
; 4612 :     if (attrDecl == NULL) {

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN25@xmlValidat

; 4613 : 	if (ns->prefix != NULL) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN26@xmlValidat

; 4614 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,

	push	0
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	OFFSET ??_C@_0DF@GJIDMPBO@No?5declaration?5for?5attribute?5xm@
	push	533					; 00000215H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4615 : 		   "No declaration for attribute xmlns:%s of element %s\n",
; 4616 : 		   ns->prefix, elem->name, NULL);
; 4617 : 	} else {

	jmp	SHORT $LN27@xmlValidat
$LN26@xmlValidat:

; 4618 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,

	push	0
	push	0
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DC@FPONLEAN@No?5declaration?5for?5attribute?5xm@
	push	533					; 00000215H
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN27@xmlValidat:

; 4619 : 		   "No declaration for attribute xmlns of element %s\n",
; 4620 : 		   elem->name, NULL, NULL);
; 4621 : 	}
; 4622 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN25@xmlValidat:

; 4623 :     }
; 4624 : 
; 4625 :     val = xmlValidateAttributeValueInternal(doc, attrDecl->atype, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attrDecl$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlValidateAttributeValueInternal
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 4626 :     if (val == 0) {

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN28@xmlValidat

; 4627 : 	if (ns->prefix != NULL) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN29@xmlValidat

; 4628 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_INVALID_DEFAULT,

	push	0
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	OFFSET ??_C@_0DL@CBOACJEL@Syntax?5of?5value?5for?5attribute?5x@
	push	516					; 00000204H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4629 : 	       "Syntax of value for attribute xmlns:%s of %s is not valid\n",
; 4630 : 		   ns->prefix, elem->name, NULL);
; 4631 : 	} else {

	jmp	SHORT $LN30@xmlValidat
$LN29@xmlValidat:

; 4632 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_INVALID_DEFAULT,

	push	0
	push	0
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DI@HAHGLIKC@Syntax?5of?5value?5for?5attribute?5x@
	push	516					; 00000204H
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN30@xmlValidat:

; 4633 : 	       "Syntax of value for attribute xmlns of %s is not valid\n",
; 4634 : 		   elem->name, NULL, NULL);
; 4635 : 	}
; 4636 :         ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN28@xmlValidat:

; 4637 :     }
; 4638 : 
; 4639 :     /* Validity constraint: Fixed Attribute Default */
; 4640 :     if (attrDecl->def == XML_ATTRIBUTE_FIXED) {

	mov	eax, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [eax+44], 4
	jne	$LN31@xmlValidat

; 4641 : 	if (!xmlStrEqual(value, attrDecl->defaultValue)) {

	mov	ecx, DWORD PTR _attrDecl$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@xmlValidat

; 4642 : 	    if (ns->prefix != NULL) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN33@xmlValidat

; 4643 : 		xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_DEFAULT,

	mov	edx, DWORD PTR _attrDecl$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	push	OFFSET ??_C@_0ED@KAGANNGH@Value?5for?5attribute?5xmlns?3?$CFs?5of@
	push	500					; 000001f4H
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4644 :        "Value for attribute xmlns:%s of %s is different from default \"%s\"\n",
; 4645 : 		       ns->prefix, elem->name, attrDecl->defaultValue);
; 4646 : 	    } else {

	jmp	SHORT $LN34@xmlValidat
$LN33@xmlValidat:

; 4647 : 		xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_DEFAULT,

	push	0
	mov	ecx, DWORD PTR _attrDecl$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0EA@HGOHDHBG@Value?5for?5attribute?5xmlns?5of?5?$CFs@
	push	500					; 000001f4H
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN34@xmlValidat:

; 4648 :        "Value for attribute xmlns of %s is different from default \"%s\"\n",
; 4649 : 		       elem->name, attrDecl->defaultValue, NULL);
; 4650 : 	    }
; 4651 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN31@xmlValidat:

; 4652 : 	}
; 4653 :     }
; 4654 : 
; 4655 :     /*
; 4656 :      * Casting ns to xmlAttrPtr is wrong. We'd need separate functions
; 4657 :      * xmlAddID and xmlAddRef for namespace declarations, but it makes
; 4658 :      * no practical sense to use ID types anyway.
; 4659 :      */
; 4660 : #if 0
; 4661 :     /* Validity Constraint: ID uniqueness */
; 4662 :     if (attrDecl->atype == XML_ATTRIBUTE_ID) {
; 4663 :         if (xmlAddID(ctxt, doc, value, (xmlAttrPtr) ns) == NULL)
; 4664 : 	    ret = 0;
; 4665 :     }
; 4666 : 
; 4667 :     if ((attrDecl->atype == XML_ATTRIBUTE_IDREF) ||
; 4668 : 	(attrDecl->atype == XML_ATTRIBUTE_IDREFS)) {
; 4669 :         if (xmlAddRef(ctxt, doc, value, (xmlAttrPtr) ns) == NULL)
; 4670 : 	    ret = 0;
; 4671 :     }
; 4672 : #endif
; 4673 : 
; 4674 :     /* Validity Constraint: Notation Attributes */
; 4675 :     if (attrDecl->atype == XML_ATTRIBUTE_NOTATION) {

	mov	ecx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [ecx+40], 10			; 0000000aH
	jne	$LN35@xmlValidat

; 4676 :         xmlEnumerationPtr tree = attrDecl->tree;

	mov	edx, DWORD PTR _attrDecl$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _tree$3[ebp], eax

; 4677 :         xmlNotationPtr nota;
; 4678 : 
; 4679 :         /* First check that the given NOTATION was declared */
; 4680 : 	nota = xmlGetDtdNotationDesc(doc->intSubset, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdNotationDesc
	add	esp, 8
	mov	DWORD PTR _nota$2[ebp], eax

; 4681 : 	if (nota == NULL)

	cmp	DWORD PTR _nota$2[ebp], 0
	jne	SHORT $LN36@xmlValidat

; 4682 : 	    nota = xmlGetDtdNotationDesc(doc->extSubset, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdNotationDesc
	add	esp, 8
	mov	DWORD PTR _nota$2[ebp], eax
$LN36@xmlValidat:

; 4683 : 
; 4684 : 	if (nota == NULL) {

	cmp	DWORD PTR _nota$2[ebp], 0
	jne	SHORT $LN2@xmlValidat

; 4685 : 	    if (ns->prefix != NULL) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN38@xmlValidat

; 4686 : 		xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_NOTATION,

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_0EE@ENPHOLHF@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@
	push	537					; 00000219H
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4687 :        "Value \"%s\" for attribute xmlns:%s of %s is not a declared Notation\n",
; 4688 : 		       value, ns->prefix, elem->name);
; 4689 : 	    } else {

	jmp	SHORT $LN39@xmlValidat
$LN38@xmlValidat:

; 4690 : 		xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_NOTATION,

	push	0
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_0EB@IKNIAELF@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@
	push	537					; 00000219H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN39@xmlValidat:

; 4691 :        "Value \"%s\" for attribute xmlns of %s is not a declared Notation\n",
; 4692 : 		       value, elem->name, NULL);
; 4693 : 	    }
; 4694 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN2@xmlValidat:

; 4695 :         }
; 4696 : 
; 4697 : 	/* Second, verify that it's among the list */
; 4698 : 	while (tree != NULL) {

	cmp	DWORD PTR _tree$3[ebp], 0
	je	SHORT $LN3@xmlValidat

; 4699 : 	    if (xmlStrEqual(tree->name, value)) break;

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _tree$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN40@xmlValidat
	jmp	SHORT $LN3@xmlValidat
$LN40@xmlValidat:

; 4700 : 	    tree = tree->next;

	mov	edx, DWORD PTR _tree$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tree$3[ebp], eax

; 4701 : 	}

	jmp	SHORT $LN2@xmlValidat
$LN3@xmlValidat:

; 4702 : 	if (tree == NULL) {

	cmp	DWORD PTR _tree$3[ebp], 0
	jne	SHORT $LN35@xmlValidat

; 4703 : 	    if (ns->prefix != NULL) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN42@xmlValidat

; 4704 : 		xmlErrValidNode(ctxt, elem, XML_DTD_NOTATION_VALUE,

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_0EP@PJCDPKEK@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@
	push	527					; 0000020fH
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4705 : "Value \"%s\" for attribute xmlns:%s of %s is not among the enumerated notations\n",
; 4706 : 		       value, ns->prefix, elem->name);
; 4707 : 	    } else {

	jmp	SHORT $LN43@xmlValidat
$LN42@xmlValidat:

; 4708 : 		xmlErrValidNode(ctxt, elem, XML_DTD_NOTATION_VALUE,

	push	0
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_0EM@LDEIIDJK@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@
	push	527					; 0000020fH
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN43@xmlValidat:

; 4709 : "Value \"%s\" for attribute xmlns of %s is not among the enumerated notations\n",
; 4710 : 		       value, elem->name, NULL);
; 4711 : 	    }
; 4712 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN35@xmlValidat:

; 4713 : 	}
; 4714 :     }
; 4715 : 
; 4716 :     /* Validity Constraint: Enumeration */
; 4717 :     if (attrDecl->atype == XML_ATTRIBUTE_ENUMERATION) {

	mov	edx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [edx+40], 9
	jne	$LN44@xmlValidat

; 4718 :         xmlEnumerationPtr tree = attrDecl->tree;

	mov	eax, DWORD PTR _attrDecl$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _tree$1[ebp], ecx
$LN4@xmlValidat:

; 4719 : 	while (tree != NULL) {

	cmp	DWORD PTR _tree$1[ebp], 0
	je	SHORT $LN5@xmlValidat

; 4720 : 	    if (xmlStrEqual(tree->name, value)) break;

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _tree$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN45@xmlValidat
	jmp	SHORT $LN5@xmlValidat
$LN45@xmlValidat:

; 4721 : 	    tree = tree->next;

	mov	edx, DWORD PTR _tree$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tree$1[ebp], eax

; 4722 : 	}

	jmp	SHORT $LN4@xmlValidat
$LN5@xmlValidat:

; 4723 : 	if (tree == NULL) {

	cmp	DWORD PTR _tree$1[ebp], 0
	jne	SHORT $LN44@xmlValidat

; 4724 : 	    if (ns->prefix != NULL) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN47@xmlValidat

; 4725 : 		xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_VALUE,

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_0EJ@PDIHKDMN@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?3@
	push	502					; 000001f6H
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4726 : "Value \"%s\" for attribute xmlns:%s of %s is not among the enumerated set\n",
; 4727 : 		       value, ns->prefix, elem->name);
; 4728 : 	    } else {

	jmp	SHORT $LN48@xmlValidat
$LN47@xmlValidat:

; 4729 : 		xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_VALUE,

	push	0
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_0EG@CDCEFKCM@Value?5?$CC?$CFs?$CC?5for?5attribute?5xmlns?5@
	push	502					; 000001f6H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN48@xmlValidat:

; 4730 : "Value \"%s\" for attribute xmlns of %s is not among the enumerated set\n",
; 4731 : 		       value, elem->name, NULL);
; 4732 : 	    }
; 4733 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN44@xmlValidat:

; 4734 : 	}
; 4735 :     }
; 4736 : 
; 4737 :     /* Fixed Attribute Default */
; 4738 :     if ((attrDecl->def == XML_ATTRIBUTE_FIXED) &&

	mov	edx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [edx+44], 4
	jne	$LN49@xmlValidat
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attrDecl$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN49@xmlValidat

; 4739 :         (!xmlStrEqual(attrDecl->defaultValue, value))) {
; 4740 : 	if (ns->prefix != NULL) {

	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN50@xmlValidat

; 4741 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_ELEM_NAMESPACE,

	mov	ecx, DWORD PTR _attrDecl$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	OFFSET ??_C@_0DB@DPJFCMMB@Value?5for?5attribute?5xmlns?3?$CFs?5of@
	push	508					; 000001fcH
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4742 : 		   "Value for attribute xmlns:%s of %s must be \"%s\"\n",
; 4743 : 		   ns->prefix, elem->name, attrDecl->defaultValue);
; 4744 : 	} else {

	jmp	SHORT $LN51@xmlValidat
$LN50@xmlValidat:

; 4745 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_ELEM_NAMESPACE,

	push	0
	mov	eax, DWORD PTR _attrDecl$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0CO@DNGFHLPE@Value?5for?5attribute?5xmlns?5of?5?$CFs@
	push	508					; 000001fcH
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN51@xmlValidat:

; 4746 : 		   "Value for attribute xmlns of %s must be \"%s\"\n",
; 4747 : 		   elem->name, attrDecl->defaultValue, NULL);
; 4748 : 	}
; 4749 :         ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN49@xmlValidat:

; 4750 :     }
; 4751 : 
; 4752 :     /* Extra check for the attribute value */
; 4753 :     if (ns->prefix != NULL) {

	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN52@xmlValidat

; 4754 : 	ret &= xmlValidateAttributeValue2(ctxt, doc, ns->prefix,

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _attrDecl$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidateAttributeValue2
	add	esp, 20					; 00000014H
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 4755 : 					  attrDecl->atype, value);
; 4756 :     } else {

	jmp	SHORT $LN53@xmlValidat
$LN52@xmlValidat:

; 4757 : 	ret &= xmlValidateAttributeValue2(ctxt, doc, BAD_CAST "xmlns",

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _attrDecl$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlValidateAttributeValue2
	add	esp, 20					; 00000014H
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
$LN53@xmlValidat:

; 4758 : 					  attrDecl->atype, value);
; 4759 :     }
; 4760 : 
; 4761 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 4762 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN57@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN57@xmlValidat:
	DD	1
	DD	$LN56@xmlValidat
$LN56@xmlValidat:
	DD	-68					; ffffffbcH
	DD	50					; 00000032H
	DD	$LN55@xmlValidat
$LN55@xmlValidat:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_xmlValidateOneNamespace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateOneAttribute
_TEXT	SEGMENT
_tree$1 = -88						; size = 4
_nota$2 = -84						; size = 4
_tree$3 = -80						; size = 4
_fullname$4 = -76					; size = 4
_fn$5 = -68						; size = 50
_ret$ = -12						; size = 4
_val$ = -8						; size = 4
_attrDecl$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_attr$ = 20						; size = 4
_value$ = 24						; size = 4
_xmlValidateOneAttribute PROC				; COMDAT

; 4383 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 4384 :     xmlAttributePtr attrDecl =  NULL;

	mov	DWORD PTR _attrDecl$[ebp], 0

; 4385 :     int val;
; 4386 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 4387 : 
; 4388 :     CHECK_DTD;

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN6@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
	jmp	SHORT $LN7@xmlValidat
$LN6@xmlValidat:
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN7@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN7@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN7@xmlValidat:

; 4389 :     if ((elem == NULL) || (elem->name == NULL)) return(0);

	cmp	DWORD PTR _elem$[ebp], 0
	je	SHORT $LN10@xmlValidat
	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN9@xmlValidat
$LN10@xmlValidat:
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN9@xmlValidat:

; 4390 :     if ((attr == NULL) || (attr->name == NULL)) return(0);

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN12@xmlValidat
	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN11@xmlValidat
$LN12@xmlValidat:
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN11@xmlValidat:

; 4391 : 
; 4392 :     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {

	mov	ecx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN13@xmlValidat
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+12], 0
	je	$LN13@xmlValidat

; 4393 : 	xmlChar fn[50];
; 4394 : 	xmlChar *fullname;
; 4395 : 
; 4396 : 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);

	push	50					; 00000032H
	lea	ecx, DWORD PTR _fn$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$4[ebp], eax

; 4397 : 	if (fullname == NULL)

	cmp	DWORD PTR _fullname$4[ebp], 0
	jne	SHORT $LN14@xmlValidat

; 4398 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN14@xmlValidat:

; 4399 : 	if (attr->ns != NULL) {

	mov	ecx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN15@xmlValidat

; 4400 : 	    attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, fullname,

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _fullname$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4401 : 		                          attr->name, attr->ns->prefix);
; 4402 : 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN17@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN17@xmlValidat

; 4403 : 		attrDecl = xmlGetDtdQAttrDesc(doc->extSubset, fullname,

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _fullname$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN17@xmlValidat:

; 4404 : 					      attr->name, attr->ns->prefix);
; 4405 : 	} else {

	jmp	SHORT $LN16@xmlValidat
$LN15@xmlValidat:

; 4406 : 	    attrDecl = xmlGetDtdAttrDesc(doc->intSubset, fullname, attr->name);

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _fullname$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4407 : 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN16@xmlValidat
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN16@xmlValidat

; 4408 : 		attrDecl = xmlGetDtdAttrDesc(doc->extSubset,

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _fullname$4[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN16@xmlValidat:

; 4409 : 					     fullname, attr->name);
; 4410 : 	}
; 4411 : 	if ((fullname != fn) && (fullname != elem->name))

	lea	eax, DWORD PTR _fn$5[ebp]
	cmp	DWORD PTR _fullname$4[ebp], eax
	je	SHORT $LN13@xmlValidat
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR _fullname$4[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN13@xmlValidat

; 4412 : 	    xmlFree(fullname);

	mov	esi, esp
	mov	eax, DWORD PTR _fullname$4[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlValidat:

; 4413 :     }
; 4414 :     if (attrDecl == NULL) {

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	$LN20@xmlValidat

; 4415 : 	if (attr->ns != NULL) {

	mov	ecx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN21@xmlValidat

; 4416 : 	    attrDecl = xmlGetDtdQAttrDesc(doc->intSubset, elem->name,

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4417 : 		                          attr->name, attr->ns->prefix);
; 4418 : 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN23@xmlValidat
	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN23@xmlValidat

; 4419 : 		attrDecl = xmlGetDtdQAttrDesc(doc->extSubset, elem->name,

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlGetDtdQAttrDesc
	add	esp, 16					; 00000010H
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN23@xmlValidat:

; 4420 : 					      attr->name, attr->ns->prefix);
; 4421 : 	} else {

	jmp	SHORT $LN20@xmlValidat
$LN21@xmlValidat:

; 4422 : 	    attrDecl = xmlGetDtdAttrDesc(doc->intSubset,

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4423 : 		                         elem->name, attr->name);
; 4424 : 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN20@xmlValidat
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN20@xmlValidat

; 4425 : 		attrDecl = xmlGetDtdAttrDesc(doc->extSubset,

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN20@xmlValidat:

; 4426 : 					     elem->name, attr->name);
; 4427 : 	}
; 4428 :     }
; 4429 : 
; 4430 : 
; 4431 :     /* Validity Constraint: Attribute Value Type */
; 4432 :     if (attrDecl == NULL) {

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN25@xmlValidat

; 4433 : 	xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ATTRIBUTE,

	push	0
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0CP@IDGJHJLH@No?5declaration?5for?5attribute?5?$CFs@
	push	533					; 00000215H
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4434 : 	       "No declaration for attribute %s of element %s\n",
; 4435 : 	       attr->name, elem->name, NULL);
; 4436 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN25@xmlValidat:

; 4437 :     }
; 4438 :     attr->atype = attrDecl->atype;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR _attrDecl$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR [ecx+40], eax

; 4439 : 
; 4440 :     val = xmlValidateAttributeValueInternal(doc, attrDecl->atype, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _attrDecl$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlValidateAttributeValueInternal
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 4441 :     if (val == 0) {

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN26@xmlValidat

; 4442 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_VALUE,

	push	0
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0DF@PPLCGADM@Syntax?5of?5value?5for?5attribute?5?$CF@
	push	502					; 000001f6H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4443 : 	   "Syntax of value for attribute %s of %s is not valid\n",
; 4444 : 	       attr->name, elem->name, NULL);
; 4445 :         ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN26@xmlValidat:

; 4446 :     }
; 4447 : 
; 4448 :     /* Validity constraint: Fixed Attribute Default */
; 4449 :     if (attrDecl->def == XML_ATTRIBUTE_FIXED) {

	mov	edx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [edx+44], 4
	jne	SHORT $LN27@xmlValidat

; 4450 : 	if (!xmlStrEqual(value, attrDecl->defaultValue)) {

	mov	eax, DWORD PTR _attrDecl$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@xmlValidat

; 4451 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_DEFAULT,

	mov	eax, DWORD PTR _attrDecl$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0DN@BPCEOAOB@Value?5for?5attribute?5?$CFs?5of?5?$CFs?5is@
	push	500					; 000001f4H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4452 : 	   "Value for attribute %s of %s is different from default \"%s\"\n",
; 4453 : 		   attr->name, elem->name, attrDecl->defaultValue);
; 4454 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN27@xmlValidat:

; 4455 : 	}
; 4456 :     }
; 4457 : 
; 4458 :     /* Validity Constraint: ID uniqueness */
; 4459 :     if (attrDecl->atype == XML_ATTRIBUTE_ID) {

	mov	edx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [edx+40], 2
	jne	SHORT $LN29@xmlValidat

; 4460 :         if (xmlAddID(ctxt, doc, value, attr) == NULL)

	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlAddID
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN29@xmlValidat

; 4461 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN29@xmlValidat:

; 4462 :     }
; 4463 : 
; 4464 :     if ((attrDecl->atype == XML_ATTRIBUTE_IDREF) ||

	mov	ecx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [ecx+40], 3
	je	SHORT $LN32@xmlValidat
	mov	edx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [edx+40], 4
	jne	SHORT $LN31@xmlValidat
$LN32@xmlValidat:

; 4465 : 	(attrDecl->atype == XML_ATTRIBUTE_IDREFS)) {
; 4466 :         if (xmlAddRef(ctxt, doc, value, attr) == NULL)

	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlAddRef
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	SHORT $LN31@xmlValidat

; 4467 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN31@xmlValidat:

; 4468 :     }
; 4469 : 
; 4470 :     /* Validity Constraint: Notation Attributes */
; 4471 :     if (attrDecl->atype == XML_ATTRIBUTE_NOTATION) {

	mov	ecx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [ecx+40], 10			; 0000000aH
	jne	$LN34@xmlValidat

; 4472 :         xmlEnumerationPtr tree = attrDecl->tree;

	mov	edx, DWORD PTR _attrDecl$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _tree$3[ebp], eax

; 4473 :         xmlNotationPtr nota;
; 4474 : 
; 4475 :         /* First check that the given NOTATION was declared */
; 4476 : 	nota = xmlGetDtdNotationDesc(doc->intSubset, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdNotationDesc
	add	esp, 8
	mov	DWORD PTR _nota$2[ebp], eax

; 4477 : 	if (nota == NULL)

	cmp	DWORD PTR _nota$2[ebp], 0
	jne	SHORT $LN35@xmlValidat

; 4478 : 	    nota = xmlGetDtdNotationDesc(doc->extSubset, value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdNotationDesc
	add	esp, 8
	mov	DWORD PTR _nota$2[ebp], eax
$LN35@xmlValidat:

; 4479 : 
; 4480 : 	if (nota == NULL) {

	cmp	DWORD PTR _nota$2[ebp], 0
	jne	SHORT $LN2@xmlValidat

; 4481 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_NOTATION,

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_0DO@HAIKKCN@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@
	push	537					; 00000219H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4482 :        "Value \"%s\" for attribute %s of %s is not a declared Notation\n",
; 4483 : 		   value, attr->name, elem->name);
; 4484 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN2@xmlValidat:

; 4485 :         }
; 4486 : 
; 4487 : 	/* Second, verify that it's among the list */
; 4488 : 	while (tree != NULL) {

	cmp	DWORD PTR _tree$3[ebp], 0
	je	SHORT $LN3@xmlValidat

; 4489 : 	    if (xmlStrEqual(tree->name, value)) break;

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _tree$3[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN37@xmlValidat
	jmp	SHORT $LN3@xmlValidat
$LN37@xmlValidat:

; 4490 : 	    tree = tree->next;

	mov	edx, DWORD PTR _tree$3[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tree$3[ebp], eax

; 4491 : 	}

	jmp	SHORT $LN2@xmlValidat
$LN3@xmlValidat:

; 4492 : 	if (tree == NULL) {

	cmp	DWORD PTR _tree$3[ebp], 0
	jne	SHORT $LN34@xmlValidat

; 4493 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_NOTATION_VALUE,

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_0EJ@LLDEHINL@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@
	push	527					; 0000020fH
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4494 : "Value \"%s\" for attribute %s of %s is not among the enumerated notations\n",
; 4495 : 		   value, attr->name, elem->name);
; 4496 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN34@xmlValidat:

; 4497 : 	}
; 4498 :     }
; 4499 : 
; 4500 :     /* Validity Constraint: Enumeration */
; 4501 :     if (attrDecl->atype == XML_ATTRIBUTE_ENUMERATION) {

	mov	edx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [edx+40], 9
	jne	SHORT $LN39@xmlValidat

; 4502 :         xmlEnumerationPtr tree = attrDecl->tree;

	mov	eax, DWORD PTR _attrDecl$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _tree$1[ebp], ecx
$LN4@xmlValidat:

; 4503 : 	while (tree != NULL) {

	cmp	DWORD PTR _tree$1[ebp], 0
	je	SHORT $LN5@xmlValidat

; 4504 : 	    if (xmlStrEqual(tree->name, value)) break;

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _tree$1[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN40@xmlValidat
	jmp	SHORT $LN5@xmlValidat
$LN40@xmlValidat:

; 4505 : 	    tree = tree->next;

	mov	edx, DWORD PTR _tree$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _tree$1[ebp], eax

; 4506 : 	}

	jmp	SHORT $LN4@xmlValidat
$LN5@xmlValidat:

; 4507 : 	if (tree == NULL) {

	cmp	DWORD PTR _tree$1[ebp], 0
	jne	SHORT $LN39@xmlValidat

; 4508 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_VALUE,

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	push	OFFSET ??_C@_0ED@GMECILPN@Value?5?$CC?$CFs?$CC?5for?5attribute?5?$CFs?5of?5@
	push	502					; 000001f6H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4509 :        "Value \"%s\" for attribute %s of %s is not among the enumerated set\n",
; 4510 : 		   value, attr->name, elem->name);
; 4511 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN39@xmlValidat:

; 4512 : 	}
; 4513 :     }
; 4514 : 
; 4515 :     /* Fixed Attribute Default */
; 4516 :     if ((attrDecl->def == XML_ATTRIBUTE_FIXED) &&

	mov	edx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [edx+44], 4
	jne	SHORT $LN42@xmlValidat
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attrDecl$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN42@xmlValidat

; 4517 :         (!xmlStrEqual(attrDecl->defaultValue, value))) {
; 4518 : 	xmlErrValidNode(ctxt, elem, XML_DTD_ATTRIBUTE_VALUE,

	mov	eax, DWORD PTR _attrDecl$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0CL@KKBPHLEC@Value?5for?5attribute?5?$CFs?5of?5?$CFs?5mu@
	push	502					; 000001f6H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4519 : 	   "Value for attribute %s of %s must be \"%s\"\n",
; 4520 : 	       attr->name, elem->name, attrDecl->defaultValue);
; 4521 :         ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN42@xmlValidat:

; 4522 :     }
; 4523 : 
; 4524 :     /* Extra check for the attribute value */
; 4525 :     ret &= xmlValidateAttributeValue2(ctxt, doc, attr->name,

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _attrDecl$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidateAttributeValue2
	add	esp, 20					; 00000014H
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 4526 : 				      attrDecl->atype, value);
; 4527 : 
; 4528 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 4529 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN46@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN46@xmlValidat:
	DD	1
	DD	$LN45@xmlValidat
$LN45@xmlValidat:
	DD	-68					; ffffffbcH
	DD	50					; 00000032H
	DD	$LN44@xmlValidat
$LN44@xmlValidat:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_xmlValidateOneAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateOneElement
_TEXT	SEGMENT
tv184 = -144						; size = 4
tv71 = -140						; size = 4
_ns$1 = -136						; size = 4
_ns$2 = -132						; size = 4
_nameSpace$3 = -128					; size = 4
_attrib$4 = -124					; size = 4
_ns$5 = -120						; size = 4
_ns$6 = -116						; size = 4
_qualified$7 = -112					; size = 4
_content$8 = -108					; size = 4
_fullname$9 = -104					; size = 4
_fn$10 = -96						; size = 50
_extsubset$ = -36					; size = 4
_name$ = -28						; size = 4
_tmp$ = -24						; size = 4
_ret$ = -20						; size = 4
_child$ = -16						; size = 4
_attr$ = -12						; size = 4
_cont$ = -8						; size = 4
_elemDecl$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_xmlValidateOneElement PROC				; COMDAT

; 5982 :                       xmlNodePtr elem) {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-144]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 5983 :     xmlElementPtr elemDecl = NULL;

	mov	DWORD PTR _elemDecl$[ebp], 0

; 5984 :     xmlElementContentPtr cont;
; 5985 :     xmlAttributePtr attr;
; 5986 :     xmlNodePtr child;
; 5987 :     int ret = 1, tmp;

	mov	DWORD PTR _ret$[ebp], 1

; 5988 :     const xmlChar *name;
; 5989 :     int extsubset = 0;

	mov	DWORD PTR _extsubset$[ebp], 0

; 5990 : 
; 5991 :     CHECK_DTD;

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN28@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
	jmp	SHORT $LN29@xmlValidat
$LN28@xmlValidat:
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN29@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN29@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN29@xmlValidat:

; 5992 : 
; 5993 :     if (elem == NULL) return(0);

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN31@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN31@xmlValidat:

; 5994 :     switch (elem->type) {

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR tv71[ebp], eax
	mov	ecx, DWORD PTR tv71[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv71[ebp], ecx
	cmp	DWORD PTR tv71[ebp], 19			; 00000013H
	ja	$LN44@xmlValidat
	mov	edx, DWORD PTR tv71[ebp]
	movzx	eax, BYTE PTR $LN117@xmlValidat[edx]
	jmp	DWORD PTR $LN122@xmlValidat[eax*4]
$LN32@xmlValidat:

; 5995 :         case XML_ATTRIBUTE_NODE:
; 5996 : 	    xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0CA@EPFCDFAG@Attribute?5element?5not?5expected?6@
	push	1
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 5997 : 		   "Attribute element not expected\n", NULL, NULL ,NULL);
; 5998 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN33@xmlValidat:

; 5999 :         case XML_TEXT_NODE:
; 6000 : 	    if (elem->children != NULL) {

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN34@xmlValidat

; 6001 : 		xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0BN@JALMDBBB@Text?5element?5has?5children?5?$CB?6@
	push	1
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6002 : 		                "Text element has children !\n",
; 6003 : 				NULL,NULL,NULL);
; 6004 : 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN34@xmlValidat:

; 6005 : 	    }
; 6006 : 	    if (elem->ns != NULL) {

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN35@xmlValidat

; 6007 : 		xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0BO@NIGEHALL@Text?5element?5has?5namespace?5?$CB?6@
	push	1
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6008 : 		                "Text element has namespace !\n",
; 6009 : 				NULL,NULL,NULL);
; 6010 : 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN35@xmlValidat:

; 6011 : 	    }
; 6012 : 	    if (elem->content == NULL) {

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN36@xmlValidat

; 6013 : 		xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0BP@DPPADDEP@Text?5element?5has?5no?5content?5?$CB?6@
	push	1
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6014 : 		                "Text element has no content !\n",
; 6015 : 				NULL,NULL,NULL);
; 6016 : 		return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN36@xmlValidat:

; 6017 : 	    }
; 6018 : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN37@xmlValidat:

; 6019 :         case XML_XINCLUDE_START:
; 6020 :         case XML_XINCLUDE_END:
; 6021 :             return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN38@xmlValidat:

; 6022 :         case XML_CDATA_SECTION_NODE:
; 6023 :         case XML_ENTITY_REF_NODE:
; 6024 :         case XML_PI_NODE:
; 6025 :         case XML_COMMENT_NODE:
; 6026 : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN39@xmlValidat:

; 6027 :         case XML_ENTITY_NODE:
; 6028 : 	    xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0BN@CJFFIPOP@Entity?5element?5not?5expected?6@
	push	1
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6029 : 		   "Entity element not expected\n", NULL, NULL ,NULL);
; 6030 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN40@xmlValidat:

; 6031 :         case XML_NOTATION_NODE:
; 6032 : 	    xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0BP@FEDJMKLA@Notation?5element?5not?5expected?6@
	push	1
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6033 : 		   "Notation element not expected\n", NULL, NULL ,NULL);
; 6034 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN41@xmlValidat:

; 6035 :         case XML_DOCUMENT_NODE:
; 6036 :         case XML_DOCUMENT_TYPE_NODE:
; 6037 :         case XML_DOCUMENT_FRAG_NODE:
; 6038 : 	    xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0BP@LPODOPI@Document?5element?5not?5expected?6@
	push	1
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6039 : 		   "Document element not expected\n", NULL, NULL ,NULL);
; 6040 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN42@xmlValidat:

; 6041 :         case XML_HTML_DOCUMENT_NODE:
; 6042 : 	    xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0BM@DIBMDMIN@HTML?5Document?5not?5expected?6@
	push	1
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6043 : 		   "HTML Document not expected\n", NULL, NULL ,NULL);
; 6044 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN43@xmlValidat:

; 6045 :         case XML_ELEMENT_NODE:
; 6046 : 	    break;

	jmp	SHORT $LN2@xmlValidat
$LN44@xmlValidat:

; 6047 : 	default:
; 6048 : 	    xmlErrValidNode(ctxt, elem, XML_ERR_INTERNAL_ERROR,

	push	0
	push	0
	push	0
	push	OFFSET ??_C@_0BG@CJHPKHPI@unknown?5element?5type?6@
	push	1
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6049 : 		   "unknown element type\n", NULL, NULL ,NULL);
; 6050 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN2@xmlValidat:

; 6051 :     }
; 6052 : 
; 6053 :     /*
; 6054 :      * Fetch the declaration
; 6055 :      */
; 6056 :     elemDecl = xmlValidGetElemDecl(ctxt, doc, elem, &extsubset);

	lea	ecx, DWORD PTR _extsubset$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidGetElemDecl
	add	esp, 16					; 00000010H
	mov	DWORD PTR _elemDecl$[ebp], eax

; 6057 :     if (elemDecl == NULL)

	cmp	DWORD PTR _elemDecl$[ebp], 0
	jne	SHORT $LN45@xmlValidat

; 6058 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN45@xmlValidat:

; 6059 : 
; 6060 :     /*
; 6061 :      * If vstateNr is not zero that means continuous validation is
; 6062 :      * activated, do not try to check the content model at that level.
; 6063 :      */
; 6064 :     if (ctxt->vstateNr == 0) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+44], 0
	jne	$LN46@xmlValidat

; 6065 :     /* Check that the element content matches the definition */
; 6066 :     switch (elemDecl->etype) {

	mov	eax, DWORD PTR _elemDecl$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv184[ebp], ecx
	cmp	DWORD PTR tv184[ebp], 4
	ja	$LN46@xmlValidat
	mov	edx, DWORD PTR tv184[ebp]
	jmp	DWORD PTR $LN123@xmlValidat[edx*4]
$LN47@xmlValidat:

; 6067 :         case XML_ELEMENT_TYPE_UNDEFINED:
; 6068 : 	    xmlErrValidNode(ctxt, elem, XML_DTD_UNKNOWN_ELEM,

	push	0
	push	0
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0BP@CMBGNCIM@No?5declaration?5for?5element?5?$CFs?6@
	push	534					; 00000216H
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6069 : 	                    "No declaration for element %s\n",
; 6070 : 		   elem->name, NULL, NULL);
; 6071 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN48@xmlValidat:

; 6072 :         case XML_ELEMENT_TYPE_EMPTY:
; 6073 : 	    if (elem->children != NULL) {

	mov	ecx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN49@xmlValidat

; 6074 : 		xmlErrValidNode(ctxt, elem, XML_DTD_NOT_EMPTY,

	push	0
	push	0
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DE@KLKCMFPH@Element?5?$CFs?5was?5declared?5EMPTY?5t@
	push	528					; 00000210H
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6075 : 	       "Element %s was declared EMPTY this one has content\n",
; 6076 : 	               elem->name, NULL, NULL);
; 6077 : 		ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN49@xmlValidat:

; 6078 : 	    }
; 6079 : 	    break;

	jmp	$LN46@xmlValidat

; 6080 :         case XML_ELEMENT_TYPE_ANY:
; 6081 : 	    /* I don't think anything is required then */
; 6082 : 	    break;

	jmp	$LN46@xmlValidat
$LN51@xmlValidat:

; 6083 :         case XML_ELEMENT_TYPE_MIXED:
; 6084 : 
; 6085 : 	    /* simple case of declared as #PCDATA */
; 6086 : 	    if ((elemDecl->content != NULL) &&

	mov	eax, DWORD PTR _elemDecl$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN52@xmlValidat
	mov	ecx, DWORD PTR _elemDecl$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	cmp	DWORD PTR [edx], 1
	jne	SHORT $LN52@xmlValidat

; 6087 : 		(elemDecl->content->type == XML_ELEMENT_CONTENT_PCDATA)) {
; 6088 : 		ret = xmlValidateOneCdataElement(ctxt, doc, elem);

	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidateOneCdataElement
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 6089 : 		if (!ret) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN53@xmlValidat

; 6090 : 		    xmlErrValidNode(ctxt, elem, XML_DTD_NOT_PCDATA,

	push	0
	push	0
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0DN@CFJCCMLK@Element?5?$CFs?5was?5declared?5?$CDPCDATA@
	push	529					; 00000211H
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN53@xmlValidat:

; 6091 : 	       "Element %s was declared #PCDATA but contains non text nodes\n",
; 6092 : 			   elem->name, NULL, NULL);
; 6093 : 		}
; 6094 : 		break;

	jmp	$LN46@xmlValidat
$LN52@xmlValidat:

; 6095 : 	    }
; 6096 : 	    child = elem->children;

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _child$[ebp], edx
$LN6@xmlValidat:

; 6097 : 	    /* Hum, this start to get messy */
; 6098 : 	    while (child != NULL) {

	cmp	DWORD PTR _child$[ebp], 0
	je	$LN7@xmlValidat

; 6099 : 	        if (child->type == XML_ELEMENT_NODE) {

	mov	eax, DWORD PTR _child$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	$child_ok$124

; 6100 : 		    name = child->name;

	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _name$[ebp], edx

; 6101 : 		    if ((child->ns != NULL) && (child->ns->prefix != NULL)) {

	mov	eax, DWORD PTR _child$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN55@xmlValidat
	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [edx+12], 0
	je	$LN55@xmlValidat

; 6102 : 			xmlChar fn[50];
; 6103 : 			xmlChar *fullname;
; 6104 : 
; 6105 : 			fullname = xmlBuildQName(child->name, child->ns->prefix,

	push	50					; 00000032H
	lea	eax, DWORD PTR _fn$10[ebp]
	push	eax
	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$9[ebp], eax

; 6106 : 				                 fn, 50);
; 6107 : 			if (fullname == NULL)

	cmp	DWORD PTR _fullname$9[ebp], 0
	jne	SHORT $LN56@xmlValidat

; 6108 : 			    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN56@xmlValidat:

; 6109 : 			cont = elemDecl->content;

	mov	eax, DWORD PTR _elemDecl$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _cont$[ebp], ecx
$LN8@xmlValidat:

; 6110 : 			while (cont != NULL) {

	cmp	DWORD PTR _cont$[ebp], 0
	je	$LN9@xmlValidat

; 6111 : 			    if (cont->type == XML_ELEMENT_CONTENT_ELEMENT) {

	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx], 2
	jne	SHORT $LN57@xmlValidat

; 6112 : 				if (xmlStrEqual(cont->name, fullname))

	mov	eax, DWORD PTR _fullname$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN59@xmlValidat

; 6113 : 				    break;

	jmp	SHORT $LN9@xmlValidat
$LN59@xmlValidat:

; 6114 : 			    } else if ((cont->type == XML_ELEMENT_CONTENT_OR) &&

	jmp	SHORT $LN58@xmlValidat
$LN57@xmlValidat:

; 6115 : 			       (cont->c1 != NULL) &&

	mov	eax, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [eax], 4
	jne	SHORT $LN60@xmlValidat
	mov	ecx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN60@xmlValidat
	mov	edx, DWORD PTR _cont$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN60@xmlValidat

; 6116 : 			       (cont->c1->type == XML_ELEMENT_CONTENT_ELEMENT)){
; 6117 : 				if (xmlStrEqual(cont->c1->name, fullname))

	mov	ecx, DWORD PTR _fullname$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _cont$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN62@xmlValidat

; 6118 : 				    break;

	jmp	SHORT $LN9@xmlValidat
$LN62@xmlValidat:

; 6119 : 			    } else if ((cont->type != XML_ELEMENT_CONTENT_OR) ||

	jmp	SHORT $LN58@xmlValidat
$LN60@xmlValidat:

; 6120 : 				(cont->c1 == NULL) ||

	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx], 4
	jne	SHORT $LN64@xmlValidat
	mov	eax, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN64@xmlValidat
	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN58@xmlValidat
$LN64@xmlValidat:

; 6121 : 				(cont->c1->type != XML_ELEMENT_CONTENT_PCDATA)){
; 6122 : 				xmlErrValid(NULL, XML_DTD_MIXED_CORRUPT,

	push	0
	push	OFFSET ??_C@_0CC@LMJFIFCG@Internal?3?5MIXED?5struct?5corrupte@
	push	519					; 00000207H
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 6123 : 					"Internal: MIXED struct corrupted\n",
; 6124 : 					NULL);
; 6125 : 				break;

	jmp	SHORT $LN9@xmlValidat
$LN58@xmlValidat:

; 6126 : 			    }
; 6127 : 			    cont = cont->c2;

	mov	eax, DWORD PTR _cont$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _cont$[ebp], ecx

; 6128 : 			}

	jmp	$LN8@xmlValidat
$LN9@xmlValidat:

; 6129 : 			if ((fullname != fn) && (fullname != child->name))

	lea	edx, DWORD PTR _fn$10[ebp]
	cmp	DWORD PTR _fullname$9[ebp], edx
	je	SHORT $LN65@xmlValidat
	mov	eax, DWORD PTR _child$[ebp]
	mov	ecx, DWORD PTR _fullname$9[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN65@xmlValidat

; 6130 : 			    xmlFree(fullname);

	mov	esi, esp
	mov	edx, DWORD PTR _fullname$9[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN65@xmlValidat:

; 6131 : 			if (cont != NULL)

	cmp	DWORD PTR _cont$[ebp], 0
	je	SHORT $LN55@xmlValidat

; 6132 : 			    goto child_ok;

	jmp	$child_ok$124
$LN55@xmlValidat:

; 6133 : 		    }
; 6134 : 		    cont = elemDecl->content;

	mov	eax, DWORD PTR _elemDecl$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _cont$[ebp], ecx
$LN10@xmlValidat:

; 6135 : 		    while (cont != NULL) {

	cmp	DWORD PTR _cont$[ebp], 0
	je	$LN11@xmlValidat

; 6136 : 		        if (cont->type == XML_ELEMENT_CONTENT_ELEMENT) {

	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx], 2
	jne	SHORT $LN67@xmlValidat

; 6137 : 			    if (xmlStrEqual(cont->name, name)) break;

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN69@xmlValidat
	jmp	$LN11@xmlValidat
$LN69@xmlValidat:

; 6138 : 			} else if ((cont->type == XML_ELEMENT_CONTENT_OR) &&

	jmp	SHORT $LN68@xmlValidat
$LN67@xmlValidat:

; 6139 : 			   (cont->c1 != NULL) &&

	mov	eax, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [eax], 4
	jne	SHORT $LN70@xmlValidat
	mov	ecx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN70@xmlValidat
	mov	edx, DWORD PTR _cont$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax], 2
	jne	SHORT $LN70@xmlValidat

; 6140 : 			   (cont->c1->type == XML_ELEMENT_CONTENT_ELEMENT)) {
; 6141 : 			    if (xmlStrEqual(cont->c1->name, name)) break;

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cont$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN72@xmlValidat
	jmp	SHORT $LN11@xmlValidat
$LN72@xmlValidat:

; 6142 : 			} else if ((cont->type != XML_ELEMENT_CONTENT_OR) ||

	jmp	SHORT $LN68@xmlValidat
$LN70@xmlValidat:

; 6143 : 			    (cont->c1 == NULL) ||

	mov	edx, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [edx], 4
	jne	SHORT $LN74@xmlValidat
	mov	eax, DWORD PTR _cont$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN74@xmlValidat
	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 1
	je	SHORT $LN68@xmlValidat
$LN74@xmlValidat:

; 6144 : 			    (cont->c1->type != XML_ELEMENT_CONTENT_PCDATA)) {
; 6145 : 			    xmlErrValid(ctxt, XML_DTD_MIXED_CORRUPT,

	push	0
	push	OFFSET ??_C@_0CC@LMJFIFCG@Internal?3?5MIXED?5struct?5corrupte@
	push	519					; 00000207H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 6146 : 				    "Internal: MIXED struct corrupted\n",
; 6147 : 				    NULL);
; 6148 : 			    break;

	jmp	SHORT $LN11@xmlValidat
$LN68@xmlValidat:

; 6149 : 			}
; 6150 : 			cont = cont->c2;

	mov	ecx, DWORD PTR _cont$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _cont$[ebp], edx

; 6151 : 		    }

	jmp	$LN10@xmlValidat
$LN11@xmlValidat:

; 6152 : 		    if (cont == NULL) {

	cmp	DWORD PTR _cont$[ebp], 0
	jne	SHORT $child_ok$124

; 6153 : 			xmlErrValidNode(ctxt, elem, XML_DTD_INVALID_CHILD,

	push	0
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0DM@IPIENEI@Element?5?$CFs?5is?5not?5declared?5in?5?$CF@
	push	515					; 00000203H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6154 : 	       "Element %s is not declared in %s list of possible children\n",
; 6155 : 			       name, elem->name, NULL);
; 6156 : 			ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$child_ok$124:

; 6157 : 		    }
; 6158 : 		}
; 6159 : child_ok:
; 6160 : 	        child = child->next;

	mov	edx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _child$[ebp], eax

; 6161 : 	    }

	jmp	$LN6@xmlValidat
$LN7@xmlValidat:

; 6162 : 	    break;

	jmp	$LN46@xmlValidat
$LN76@xmlValidat:

; 6163 :         case XML_ELEMENT_TYPE_ELEMENT:
; 6164 : 	    if ((doc->standalone == 1) && (extsubset == 1)) {

	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+40], 1
	jne	$LN77@xmlValidat
	cmp	DWORD PTR _extsubset$[ebp], 1
	jne	$LN77@xmlValidat

; 6165 : 		/*
; 6166 : 		 * VC: Standalone Document Declaration
; 6167 : 		 *     - element types with element content, if white space
; 6168 : 		 *       occurs directly within any instance of those types.
; 6169 : 		 */
; 6170 : 		child = elem->children;

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _child$[ebp], eax
$LN12@xmlValidat:

; 6171 : 		while (child != NULL) {

	cmp	DWORD PTR _child$[ebp], 0
	je	$LN77@xmlValidat

; 6172 : 		    if (child->type == XML_TEXT_NODE) {

	mov	ecx, DWORD PTR _child$[ebp]
	cmp	DWORD PTR [ecx+4], 3
	jne	SHORT $LN78@xmlValidat

; 6173 : 			const xmlChar *content = child->content;

	mov	edx, DWORD PTR _child$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _content$8[ebp], eax
$LN14@xmlValidat:

; 6174 : 
; 6175 : 			while (IS_BLANK_CH(*content))

	mov	ecx, DWORD PTR _content$8[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN79@xmlValidat
	mov	eax, DWORD PTR _content$8[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 9
	jl	SHORT $LN80@xmlValidat
	mov	edx, DWORD PTR _content$8[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 10					; 0000000aH
	jle	SHORT $LN79@xmlValidat
$LN80@xmlValidat:
	mov	ecx, DWORD PTR _content$8[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 13					; 0000000dH
	jne	SHORT $LN15@xmlValidat
$LN79@xmlValidat:

; 6176 : 			    content++;

	mov	eax, DWORD PTR _content$8[ebp]
	add	eax, 1
	mov	DWORD PTR _content$8[ebp], eax
	jmp	SHORT $LN14@xmlValidat
$LN15@xmlValidat:

; 6177 : 			if (*content == 0) {

	mov	ecx, DWORD PTR _content$8[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN78@xmlValidat

; 6178 : 			    xmlErrValidNode(ctxt, elem,

	push	0
	push	0
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0EM@LHPMEFBO@standalone?3?5?$CFs?5declared?5in?5the?5@
	push	532					; 00000214H
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6179 : 			                    XML_DTD_STANDALONE_WHITE_SPACE,
; 6180 : "standalone: %s declared in the external subset contains white spaces nodes\n",
; 6181 : 				   elem->name, NULL, NULL);
; 6182 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6183 : 			    break;

	jmp	SHORT $LN77@xmlValidat
$LN78@xmlValidat:

; 6184 : 			}
; 6185 : 		    }
; 6186 : 		    child =child->next;

	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _child$[ebp], edx

; 6187 : 		}

	jmp	$LN12@xmlValidat
$LN77@xmlValidat:

; 6188 : 	    }
; 6189 : 	    child = elem->children;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _child$[ebp], ecx

; 6190 : 	    cont = elemDecl->content;

	mov	edx, DWORD PTR _elemDecl$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _cont$[ebp], eax

; 6191 : 	    tmp = xmlValidateElementContent(ctxt, child, elemDecl, 1, elem);

	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _elemDecl$[ebp]
	push	edx
	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidateElementContent
	add	esp, 20					; 00000014H
	mov	DWORD PTR _tmp$[ebp], eax

; 6192 : 	    if (tmp <= 0)

	cmp	DWORD PTR _tmp$[ebp], 0
	jg	SHORT $LN46@xmlValidat

; 6193 : 		ret = tmp;

	mov	edx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _ret$[ebp], edx
$LN46@xmlValidat:

; 6194 : 	    break;
; 6195 :     }
; 6196 :     } /* not continuous */
; 6197 : 
; 6198 :     /* [ VC: Required Attribute ] */
; 6199 :     attr = elemDecl->attributes;

	mov	eax, DWORD PTR _elemDecl$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _attr$[ebp], ecx
$LN16@xmlValidat:

; 6200 :     while (attr != NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	$LN17@xmlValidat

; 6201 : 	if (attr->def == XML_ATTRIBUTE_REQUIRED) {

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+44], 2
	jne	$LN83@xmlValidat

; 6202 : 	    int qualified = -1;

	mov	DWORD PTR _qualified$7[ebp], -1

; 6203 : 
; 6204 : 	    if ((attr->prefix == NULL) &&

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+56], 0
	jne	SHORT $LN85@xmlValidat
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN85@xmlValidat

; 6205 : 		(xmlStrEqual(attr->name, BAD_CAST "xmlns"))) {
; 6206 : 		xmlNsPtr ns;
; 6207 : 
; 6208 : 		ns = elem->nsDef;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _ns$6[ebp], ecx
$LN18@xmlValidat:

; 6209 : 		while (ns != NULL) {

	cmp	DWORD PTR _ns$6[ebp], 0
	je	SHORT $LN19@xmlValidat

; 6210 : 		    if (ns->prefix == NULL)

	mov	edx, DWORD PTR _ns$6[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN87@xmlValidat

; 6211 : 			goto found;

	jmp	$found$125
$LN87@xmlValidat:

; 6212 : 		    ns = ns->next;

	mov	eax, DWORD PTR _ns$6[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ns$6[ebp], ecx

; 6213 : 		}

	jmp	SHORT $LN18@xmlValidat
$LN19@xmlValidat:

; 6214 : 	    } else if (xmlStrEqual(attr->prefix, BAD_CAST "xmlns")) {

	jmp	$LN86@xmlValidat
$LN85@xmlValidat:
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN88@xmlValidat

; 6215 : 		xmlNsPtr ns;
; 6216 : 
; 6217 : 		ns = elem->nsDef;

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _ns$5[ebp], edx
$LN20@xmlValidat:

; 6218 : 		while (ns != NULL) {

	cmp	DWORD PTR _ns$5[ebp], 0
	je	SHORT $LN21@xmlValidat

; 6219 : 		    if (xmlStrEqual(attr->name, ns->prefix))

	mov	eax, DWORD PTR _ns$5[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN90@xmlValidat

; 6220 : 			goto found;

	jmp	$found$125
$LN90@xmlValidat:

; 6221 : 		    ns = ns->next;

	mov	ecx, DWORD PTR _ns$5[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ns$5[ebp], edx

; 6222 : 		}

	jmp	SHORT $LN20@xmlValidat
$LN21@xmlValidat:

; 6223 : 	    } else {

	jmp	$LN86@xmlValidat
$LN88@xmlValidat:

; 6224 : 		xmlAttrPtr attrib;
; 6225 : 
; 6226 : 		attrib = elem->properties;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _attrib$4[ebp], ecx
$LN22@xmlValidat:

; 6227 : 		while (attrib != NULL) {

	cmp	DWORD PTR _attrib$4[ebp], 0
	je	$LN86@xmlValidat

; 6228 : 		    if (xmlStrEqual(attrib->name, attr->name)) {

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attrib$4[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN91@xmlValidat

; 6229 : 			if (attr->prefix != NULL) {

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN92@xmlValidat

; 6230 : 			    xmlNsPtr nameSpace = attrib->ns;

	mov	ecx, DWORD PTR _attrib$4[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _nameSpace$3[ebp], edx

; 6231 : 
; 6232 : 			    if (nameSpace == NULL)

	cmp	DWORD PTR _nameSpace$3[ebp], 0
	jne	SHORT $LN94@xmlValidat

; 6233 : 				nameSpace = elem->ns;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _nameSpace$3[ebp], ecx
$LN94@xmlValidat:

; 6234 : 			    /*
; 6235 : 			     * qualified names handling is problematic, having a
; 6236 : 			     * different prefix should be possible but DTDs don't
; 6237 : 			     * allow to define the URI instead of the prefix :-(
; 6238 : 			     */
; 6239 : 			    if (nameSpace == NULL) {

	cmp	DWORD PTR _nameSpace$3[ebp], 0
	jne	SHORT $LN95@xmlValidat

; 6240 : 				if (qualified < 0)

	cmp	DWORD PTR _qualified$7[ebp], 0
	jge	SHORT $LN97@xmlValidat

; 6241 : 				    qualified = 0;

	mov	DWORD PTR _qualified$7[ebp], 0
$LN97@xmlValidat:

; 6242 : 			    } else if (!xmlStrEqual(nameSpace->prefix,

	jmp	SHORT $LN96@xmlValidat
$LN95@xmlValidat:
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _nameSpace$3[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN98@xmlValidat

; 6243 : 						    attr->prefix)) {
; 6244 : 				if (qualified < 1)

	cmp	DWORD PTR _qualified$7[ebp], 1
	jge	SHORT $LN100@xmlValidat

; 6245 : 				    qualified = 1;

	mov	DWORD PTR _qualified$7[ebp], 1
$LN100@xmlValidat:

; 6246 : 			    } else

	jmp	SHORT $LN96@xmlValidat
$LN98@xmlValidat:

; 6247 : 				goto found;

	jmp	$found$125
$LN96@xmlValidat:

; 6248 : 			} else {

	jmp	SHORT $LN91@xmlValidat
$LN92@xmlValidat:

; 6249 : 			    /*
; 6250 : 			     * We should allow applications to define namespaces
; 6251 : 			     * for their application even if the DTD doesn't
; 6252 : 			     * carry one, otherwise, basically we would always
; 6253 : 			     * break.
; 6254 : 			     */
; 6255 : 			    goto found;

	jmp	$found$125
$LN91@xmlValidat:

; 6256 : 			}
; 6257 : 		    }
; 6258 : 		    attrib = attrib->next;

	mov	eax, DWORD PTR _attrib$4[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _attrib$4[ebp], ecx

; 6259 : 		}

	jmp	$LN22@xmlValidat
$LN86@xmlValidat:

; 6260 : 	    }
; 6261 : 	    if (qualified == -1) {

	cmp	DWORD PTR _qualified$7[ebp], -1
	jne	SHORT $LN101@xmlValidat

; 6262 : 		if (attr->prefix == NULL) {

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN103@xmlValidat

; 6263 : 		    xmlErrValidNode(ctxt, elem, XML_DTD_MISSING_ATTRIBUTE,

	push	0
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0CI@KOGIECMM@Element?5?$CFs?5does?5not?5carry?5attri@
	push	518					; 00000206H
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6264 : 		       "Element %s does not carry attribute %s\n",
; 6265 : 			   elem->name, attr->name, NULL);
; 6266 : 		    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 6267 : 	        } else {

	jmp	SHORT $LN104@xmlValidat
$LN103@xmlValidat:

; 6268 : 		    xmlErrValidNode(ctxt, elem, XML_DTD_MISSING_ATTRIBUTE,

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0CL@IDAGHCGO@Element?5?$CFs?5does?5not?5carry?5attri@
	push	518					; 00000206H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6269 : 		       "Element %s does not carry attribute %s:%s\n",
; 6270 : 			   elem->name, attr->prefix,attr->name);
; 6271 : 		    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN104@xmlValidat:

; 6272 : 		}

	jmp	SHORT $LN102@xmlValidat
$LN101@xmlValidat:

; 6273 : 	    } else if (qualified == 0) {

	cmp	DWORD PTR _qualified$7[ebp], 0
	jne	SHORT $LN105@xmlValidat

; 6274 : 		xmlErrValidWarning(ctxt, elem, XML_DTD_NO_PREFIX,

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0DD@KAGCOGBM@Element?5?$CFs?5required?5attribute?5?$CF@
	push	524					; 0000020cH
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidWarning
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN102@xmlValidat
$LN105@xmlValidat:

; 6275 : 		   "Element %s required attribute %s:%s has no prefix\n",
; 6276 : 		       elem->name, attr->prefix, attr->name);
; 6277 : 	    } else if (qualified == 1) {

	cmp	DWORD PTR _qualified$7[ebp], 1
	jne	SHORT $LN102@xmlValidat

; 6278 : 		xmlErrValidWarning(ctxt, elem, XML_DTD_DIFFERENT_PREFIX,

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DK@IGLOKJLK@Element?5?$CFs?5required?5attribute?5?$CF@
	push	506					; 000001faH
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidWarning
	add	esp, 28					; 0000001cH
$LN102@xmlValidat:

; 6279 : 		   "Element %s required attribute %s:%s has different prefix\n",
; 6280 : 		       elem->name, attr->prefix, attr->name);
; 6281 : 	    }

	jmp	$found$125
$LN83@xmlValidat:

; 6282 : 	} else if (attr->def == XML_ATTRIBUTE_FIXED) {

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+44], 4
	jne	$found$125

; 6283 : 	    /*
; 6284 : 	     * Special tests checking #FIXED namespace declarations
; 6285 : 	     * have the right value since this is not done as an
; 6286 : 	     * attribute checking
; 6287 : 	     */
; 6288 : 	    if ((attr->prefix == NULL) &&

	mov	ecx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	jne	$LN109@xmlValidat
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN109@xmlValidat

; 6289 : 		(xmlStrEqual(attr->name, BAD_CAST "xmlns"))) {
; 6290 : 		xmlNsPtr ns;
; 6291 : 
; 6292 : 		ns = elem->nsDef;

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _ns$2[ebp], edx
$LN24@xmlValidat:

; 6293 : 		while (ns != NULL) {

	cmp	DWORD PTR _ns$2[ebp], 0
	je	SHORT $LN25@xmlValidat

; 6294 : 		    if (ns->prefix == NULL) {

	mov	eax, DWORD PTR _ns$2[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN111@xmlValidat

; 6295 : 			if (!xmlStrEqual(attr->defaultValue, ns->href)) {

	mov	ecx, DWORD PTR _ns$2[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN112@xmlValidat

; 6296 : 			    xmlErrValidNode(ctxt, elem,

	push	0
	push	0
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0EI@BIBADMEK@Element?5?$CFs?5namespace?5name?5for?5d@
	push	507					; 000001fbH
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6297 : 			           XML_DTD_ELEM_DEFAULT_NAMESPACE,
; 6298 :    "Element %s namespace name for default namespace does not match the DTD\n",
; 6299 : 				   elem->name, NULL, NULL);
; 6300 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN112@xmlValidat:

; 6301 : 			}
; 6302 : 			goto found;

	jmp	$found$125
$LN111@xmlValidat:

; 6303 : 		    }
; 6304 : 		    ns = ns->next;

	mov	eax, DWORD PTR _ns$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ns$2[ebp], ecx

; 6305 : 		}

	jmp	SHORT $LN24@xmlValidat
$LN25@xmlValidat:

; 6306 : 	    } else if (xmlStrEqual(attr->prefix, BAD_CAST "xmlns")) {

	jmp	$found$125
$LN109@xmlValidat:
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$found$125

; 6307 : 		xmlNsPtr ns;
; 6308 : 
; 6309 : 		ns = elem->nsDef;

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _ns$1[ebp], edx
$LN26@xmlValidat:

; 6310 : 		while (ns != NULL) {

	cmp	DWORD PTR _ns$1[ebp], 0
	je	$found$125

; 6311 : 		    if (xmlStrEqual(attr->name, ns->prefix)) {

	mov	eax, DWORD PTR _ns$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN114@xmlValidat

; 6312 : 			if (!xmlStrEqual(attr->defaultValue, ns->href)) {

	mov	ecx, DWORD PTR _ns$1[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN115@xmlValidat

; 6313 : 			    xmlErrValidNode(ctxt, elem, XML_DTD_ELEM_NAMESPACE,

	push	0
	mov	edx, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0DJ@DDNBGMLL@Element?5?$CFs?5namespace?5name?5for?5?$CF@
	push	508					; 000001fcH
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6314 : 		   "Element %s namespace name for %s does not match the DTD\n",
; 6315 : 				   elem->name, ns->prefix, NULL);
; 6316 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN115@xmlValidat:

; 6317 : 			}
; 6318 : 			goto found;

	jmp	SHORT $found$125
$LN114@xmlValidat:

; 6319 : 		    }
; 6320 : 		    ns = ns->next;

	mov	edx, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _ns$1[ebp], eax

; 6321 : 		}

	jmp	$LN26@xmlValidat
$found$125:

; 6322 : 	    }
; 6323 : 	}
; 6324 : found:
; 6325 :         attr = attr->nexth;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _attr$[ebp], edx

; 6326 :     }

	jmp	$LN16@xmlValidat
$LN17@xmlValidat:

; 6327 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 6328 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN121@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 144				; 00000090H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN121@xmlValidat:
	DD	2
	DD	$LN120@xmlValidat
$LN120@xmlValidat:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN118@xmlValidat
	DD	-96					; ffffffa0H
	DD	50					; 00000032H
	DD	$LN119@xmlValidat
$LN119@xmlValidat:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
$LN118@xmlValidat:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
	npad	3
$LN122@xmlValidat:
	DD	$LN43@xmlValidat
	DD	$LN32@xmlValidat
	DD	$LN33@xmlValidat
	DD	$LN38@xmlValidat
	DD	$LN39@xmlValidat
	DD	$LN41@xmlValidat
	DD	$LN40@xmlValidat
	DD	$LN42@xmlValidat
	DD	$LN37@xmlValidat
	DD	$LN44@xmlValidat
$LN117@xmlValidat:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	3
	DB	4
	DB	3
	DB	3
	DB	5
	DB	5
	DB	5
	DB	6
	DB	7
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	8
	DB	8
$LN123@xmlValidat:
	DD	$LN47@xmlValidat
	DD	$LN48@xmlValidat
	DD	$LN46@xmlValidat
	DD	$LN51@xmlValidat
	DD	$LN76@xmlValidat
_xmlValidateOneElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateElement
_TEXT	SEGMENT
_ret$ = -20						; size = 4
_value$ = -16						; size = 4
_ns$ = -12						; size = 4
_attr$ = -8						; size = 4
_child$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_xmlValidateElement PROC				; COMDAT

; 6409 : xmlValidateElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6410 :     xmlNodePtr child;
; 6411 :     xmlAttrPtr attr;
; 6412 :     xmlNsPtr ns;
; 6413 :     const xmlChar *value;
; 6414 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 6415 : 
; 6416 :     if (elem == NULL) return(0);

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN8@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN8@xmlValidat:

; 6417 : 
; 6418 :     /*
; 6419 :      * XInclude elements were added after parsing in the infoset,
; 6420 :      * they don't really mean anything validation wise.
; 6421 :      */
; 6422 :     if ((elem->type == XML_XINCLUDE_START) ||
; 6423 : 	(elem->type == XML_XINCLUDE_END) ||

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+4], 19			; 00000013H
	je	SHORT $LN10@xmlValidat
	mov	ecx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [ecx+4], 20			; 00000014H
	je	SHORT $LN10@xmlValidat
	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN9@xmlValidat
$LN10@xmlValidat:

; 6424 : 	(elem->type == XML_NAMESPACE_DECL))
; 6425 : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN9@xmlValidat:

; 6426 : 
; 6427 :     CHECK_DTD;

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN11@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
	jmp	SHORT $LN12@xmlValidat
$LN11@xmlValidat:
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN12@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN12@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN12@xmlValidat:

; 6428 : 
; 6429 :     /*
; 6430 :      * Entities references have to be handled separately
; 6431 :      */
; 6432 :     if (elem->type == XML_ENTITY_REF_NODE) {

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+4], 5
	jne	SHORT $LN14@xmlValidat

; 6433 : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN14@xmlValidat:

; 6434 :     }
; 6435 : 
; 6436 :     ret &= xmlValidateOneElement(ctxt, doc, elem);

	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidateOneElement
	add	esp, 12					; 0000000cH
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 6437 :     if (elem->type == XML_ELEMENT_NODE) {

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	$LN15@xmlValidat

; 6438 : 	attr = elem->properties;

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _attr$[ebp], edx
$LN2@xmlValidat:

; 6439 : 	while (attr != NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN3@xmlValidat

; 6440 : 	    value = xmlNodeListGetString(doc, attr->children, 0);

	push	0
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _value$[ebp], eax

; 6441 : 	    ret &= xmlValidateOneAttribute(ctxt, doc, elem, attr, value);

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidateOneAttribute
	add	esp, 20					; 00000014H
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 6442 : 	    if (value != NULL)

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN16@xmlValidat

; 6443 : 		xmlFree((char *)value);

	mov	esi, esp
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@xmlValidat:

; 6444 : 	    attr= attr->next;

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _attr$[ebp], ecx

; 6445 : 	}

	jmp	SHORT $LN2@xmlValidat
$LN3@xmlValidat:

; 6446 : 	ns = elem->nsDef;

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _ns$[ebp], eax
$LN4@xmlValidat:

; 6447 : 	while (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN15@xmlValidat

; 6448 : 	    if (elem->ns == NULL)

	mov	ecx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN17@xmlValidat

; 6449 : 		ret &= xmlValidateOneNamespace(ctxt, doc, elem, NULL,

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidateOneNamespace
	add	esp, 24					; 00000018H
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN18@xmlValidat
$LN17@xmlValidat:

; 6450 : 					       ns, ns->href);
; 6451 : 	    else
; 6452 : 		ret &= xmlValidateOneNamespace(ctxt, doc, elem,

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidateOneNamespace
	add	esp, 24					; 00000018H
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax
$LN18@xmlValidat:

; 6453 : 		                               elem->ns->prefix, ns, ns->href);
; 6454 : 	    ns = ns->next;

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _ns$[ebp], eax

; 6455 : 	}

	jmp	SHORT $LN4@xmlValidat
$LN15@xmlValidat:

; 6456 :     }
; 6457 :     child = elem->children;

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _child$[ebp], edx
$LN6@xmlValidat:

; 6458 :     while (child != NULL) {

	cmp	DWORD PTR _child$[ebp], 0
	je	SHORT $LN7@xmlValidat

; 6459 :         ret &= xmlValidateElement(ctxt, doc, child);

	mov	eax, DWORD PTR _child$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidateElement
	add	esp, 12					; 0000000cH
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 6460 :         child = child->next;

	mov	eax, DWORD PTR _child$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _child$[ebp], ecx

; 6461 :     }

	jmp	SHORT $LN6@xmlValidat
$LN7@xmlValidat:

; 6462 : 
; 6463 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 6464 : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateDocument
_TEXT	SEGMENT
_sysID$1 = -12						; size = 4
_root$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_xmlValidateDocument PROC				; COMDAT

; 6844 : xmlValidateDocument(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6845 :     int ret;
; 6846 :     xmlNodePtr root;
; 6847 : 
; 6848 :     if (doc == NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlValidat

; 6849 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN2@xmlValidat:

; 6850 :     if ((doc->intSubset == NULL) && (doc->extSubset == NULL)) {

	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN3@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN3@xmlValidat

; 6851 :         xmlErrValid(ctxt, XML_DTD_NO_DTD,

	push	0
	push	OFFSET ??_C@_0P@GBEHLCJD@no?5DTD?5found?$CB?6@
	push	522					; 0000020aH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 6852 : 	            "no DTD found!\n", NULL);
; 6853 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN3@xmlValidat:

; 6854 :     }
; 6855 :     if ((doc->intSubset != NULL) && ((doc->intSubset->SystemID != NULL) ||
; 6856 : 	(doc->intSubset->ExternalID != NULL)) && (doc->extSubset == NULL)) {

	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$LN4@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [edx+56], 0
	jne	SHORT $LN5@xmlValidat
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	cmp	DWORD PTR [ecx+52], 0
	je	$LN4@xmlValidat
$LN5@xmlValidat:
	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	$LN4@xmlValidat

; 6857 : 	xmlChar *sysID;
; 6858 : 	if (doc->intSubset->SystemID != NULL) {

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN6@xmlValidat

; 6859 : 	    sysID = xmlBuildURI(doc->intSubset->SystemID,

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlBuildURI
	add	esp, 8
	mov	DWORD PTR _sysID$1[ebp], eax

; 6860 : 			doc->URL);
; 6861 : 	    if (sysID == NULL) {

	cmp	DWORD PTR _sysID$1[ebp], 0
	jne	SHORT $LN8@xmlValidat

; 6862 : 	        xmlErrValid(ctxt, XML_DTD_LOAD_ERROR,

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	push	OFFSET ??_C@_0CO@FGGICOAP@Could?5not?5build?5URI?5for?5externa@
	push	517					; 00000205H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 6863 : 			"Could not build URI for external subset \"%s\"\n",
; 6864 : 			(const char *) doc->intSubset->SystemID);
; 6865 : 		return 0;

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN8@xmlValidat:

; 6866 : 	    }
; 6867 : 	} else

	jmp	SHORT $LN7@xmlValidat
$LN6@xmlValidat:

; 6868 : 	    sysID = NULL;

	mov	DWORD PTR _sysID$1[ebp], 0
$LN7@xmlValidat:

; 6869 :         doc->extSubset = xmlParseDTD(doc->intSubset->ExternalID,

	mov	edx, DWORD PTR _sysID$1[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	_xmlParseDTD
	add	esp, 8
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [ecx+48], eax

; 6870 : 			(const xmlChar *)sysID);
; 6871 : 	if (sysID != NULL)

	cmp	DWORD PTR _sysID$1[ebp], 0
	je	SHORT $LN9@xmlValidat

; 6872 : 	    xmlFree(sysID);

	mov	esi, esp
	mov	edx, DWORD PTR _sysID$1[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@xmlValidat:

; 6873 :         if (doc->extSubset == NULL) {

	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN4@xmlValidat

; 6874 : 	    if (doc->intSubset->SystemID != NULL) {

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN11@xmlValidat

; 6875 : 		xmlErrValid(ctxt, XML_DTD_LOAD_ERROR,

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	push	OFFSET ??_C@_0CJ@BNOHLKCI@Could?5not?5load?5the?5external?5sub@
	push	517					; 00000205H
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 6876 : 		       "Could not load the external subset \"%s\"\n",
; 6877 : 		       (const char *) doc->intSubset->SystemID);
; 6878 : 	    } else {

	jmp	SHORT $LN12@xmlValidat
$LN11@xmlValidat:

; 6879 : 		xmlErrValid(ctxt, XML_DTD_LOAD_ERROR,

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	push	OFFSET ??_C@_0CJ@BNOHLKCI@Could?5not?5load?5the?5external?5sub@
	push	517					; 00000205H
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValid
	add	esp, 16					; 00000010H
$LN12@xmlValidat:

; 6880 : 		       "Could not load the external subset \"%s\"\n",
; 6881 : 		       (const char *) doc->intSubset->ExternalID);
; 6882 : 	    }
; 6883 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN4@xmlValidat:

; 6884 : 	}
; 6885 :     }
; 6886 : 
; 6887 :     if (doc->ids != NULL) {

	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN13@xmlValidat

; 6888 :           xmlFreeIDTable(doc->ids);

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_xmlFreeIDTable
	add	esp, 4

; 6889 :           doc->ids = NULL;

	mov	edx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+64], 0
$LN13@xmlValidat:

; 6890 :     }
; 6891 :     if (doc->refs != NULL) {

	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN14@xmlValidat

; 6892 :           xmlFreeRefTable(doc->refs);

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_xmlFreeRefTable
	add	esp, 4

; 6893 :           doc->refs = NULL;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [eax+68], 0
$LN14@xmlValidat:

; 6894 :     }
; 6895 :     ret = xmlValidateDtdFinal(ctxt, doc);

	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidateDtdFinal
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 6896 :     if (!xmlValidateRoot(ctxt, doc)) return(0);

	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidateRoot
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN15@xmlValidat
	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$LN15@xmlValidat:

; 6897 : 
; 6898 :     root = xmlDocGetRootElement(doc);

	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlDocGetRootElement
	add	esp, 4
	mov	DWORD PTR _root$[ebp], eax

; 6899 :     ret &= xmlValidateElement(ctxt, doc, root);

	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidateElement
	add	esp, 12					; 0000000cH
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 6900 :     ret &= xmlValidateDocumentFinal(ctxt, doc);

	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlValidateDocumentFinal
	add	esp, 8
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 6901 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 6902 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateDocument ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateDtdFinal
_TEXT	SEGMENT
_entities$ = -12					; size = 4
_table$ = -8						; size = 4
_dtd$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_xmlValidateDtdFinal PROC				; COMDAT

; 6798 : xmlValidateDtdFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6799 :     xmlDtdPtr dtd;
; 6800 :     xmlAttributeTablePtr table;
; 6801 :     xmlEntitiesTablePtr entities;
; 6802 : 
; 6803 :     if ((doc == NULL) || (ctxt == NULL)) return(0);

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN3@xmlValidat
	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlValidat
$LN3@xmlValidat:
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN2@xmlValidat:

; 6804 :     if ((doc->intSubset == NULL) && (doc->extSubset == NULL))

	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN4@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN4@xmlValidat

; 6805 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN4@xmlValidat:

; 6806 :     ctxt->doc = doc;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+32], eax

; 6807 :     ctxt->valid = 1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+36], 1

; 6808 :     dtd = doc->intSubset;

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _dtd$[ebp], eax

; 6809 :     if ((dtd != NULL) && (dtd->attributes != NULL)) {

	cmp	DWORD PTR _dtd$[ebp], 0
	je	SHORT $LN5@xmlValidat
	mov	ecx, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN5@xmlValidat

; 6810 : 	table = (xmlAttributeTablePtr) dtd->attributes;

	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _table$[ebp], eax

; 6811 : 	xmlHashScan(table, xmlValidateAttributeCallback, ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	push	OFFSET _xmlValidateAttributeCallback
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_xmlHashScan
	add	esp, 12					; 0000000cH
$LN5@xmlValidat:

; 6812 :     }
; 6813 :     if ((dtd != NULL) && (dtd->entities != NULL)) {

	cmp	DWORD PTR _dtd$[ebp], 0
	je	SHORT $LN6@xmlValidat
	mov	eax, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN6@xmlValidat

; 6814 : 	entities = (xmlEntitiesTablePtr) dtd->entities;

	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _entities$[ebp], edx

; 6815 : 	xmlHashScan(entities, xmlValidateNotationCallback, ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	push	OFFSET _xmlValidateNotationCallback
	mov	ecx, DWORD PTR _entities$[ebp]
	push	ecx
	call	_xmlHashScan
	add	esp, 12					; 0000000cH
$LN6@xmlValidat:

; 6816 :     }
; 6817 :     dtd = doc->extSubset;

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _dtd$[ebp], eax

; 6818 :     if ((dtd != NULL) && (dtd->attributes != NULL)) {

	cmp	DWORD PTR _dtd$[ebp], 0
	je	SHORT $LN7@xmlValidat
	mov	ecx, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN7@xmlValidat

; 6819 : 	table = (xmlAttributeTablePtr) dtd->attributes;

	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _table$[ebp], eax

; 6820 : 	xmlHashScan(table, xmlValidateAttributeCallback, ctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	push	OFFSET _xmlValidateAttributeCallback
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_xmlHashScan
	add	esp, 12					; 0000000cH
$LN7@xmlValidat:

; 6821 :     }
; 6822 :     if ((dtd != NULL) && (dtd->entities != NULL)) {

	cmp	DWORD PTR _dtd$[ebp], 0
	je	SHORT $LN8@xmlValidat
	mov	eax, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN8@xmlValidat

; 6823 : 	entities = (xmlEntitiesTablePtr) dtd->entities;

	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _entities$[ebp], edx

; 6824 : 	xmlHashScan(entities, xmlValidateNotationCallback, ctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	push	OFFSET _xmlValidateNotationCallback
	mov	ecx, DWORD PTR _entities$[ebp]
	push	ecx
	call	_xmlHashScan
	add	esp, 12					; 0000000cH
$LN8@xmlValidat:

; 6825 :     }
; 6826 :     return(ctxt->valid);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
$LN1@xmlValidat:

; 6827 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateDtdFinal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateDtd
_TEXT	SEGMENT
_root$ = -16						; size = 4
_oldInt$ = -12						; size = 4
_oldExt$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_dtd$ = 16						; size = 4
_xmlValidateDtd PROC					; COMDAT

; 6654 : xmlValidateDtd(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlDtdPtr dtd) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6655 :     int ret;
; 6656 :     xmlDtdPtr oldExt, oldInt;
; 6657 :     xmlNodePtr root;
; 6658 : 
; 6659 :     if (dtd == NULL) return(0);

	cmp	DWORD PTR _dtd$[ebp], 0
	jne	SHORT $LN2@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN2@xmlValidat:

; 6660 :     if (doc == NULL) return(0);

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN3@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN3@xmlValidat:

; 6661 :     oldExt = doc->extSubset;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _oldExt$[ebp], ecx

; 6662 :     oldInt = doc->intSubset;

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _oldInt$[ebp], eax

; 6663 :     doc->extSubset = dtd;

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR _dtd$[ebp]
	mov	DWORD PTR [ecx+48], edx

; 6664 :     doc->intSubset = NULL;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [eax+44], 0

; 6665 :     ret = xmlValidateRoot(ctxt, doc);

	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidateRoot
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 6666 :     if (ret == 0) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN4@xmlValidat

; 6667 : 	doc->extSubset = oldExt;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR _oldExt$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 6668 : 	doc->intSubset = oldInt;

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR _oldInt$[ebp]
	mov	DWORD PTR [edx+44], eax

; 6669 : 	return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlValidat
$LN4@xmlValidat:

; 6670 :     }
; 6671 :     if (doc->ids != NULL) {

	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN5@xmlValidat

; 6672 :           xmlFreeIDTable(doc->ids);

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_xmlFreeIDTable
	add	esp, 4

; 6673 :           doc->ids = NULL;

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [ecx+64], 0
$LN5@xmlValidat:

; 6674 :     }
; 6675 :     if (doc->refs != NULL) {

	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+68], 0
	je	SHORT $LN6@xmlValidat

; 6676 :           xmlFreeRefTable(doc->refs);

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	call	_xmlFreeRefTable
	add	esp, 4

; 6677 :           doc->refs = NULL;

	mov	edx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+68], 0
$LN6@xmlValidat:

; 6678 :     }
; 6679 :     root = xmlDocGetRootElement(doc);

	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlDocGetRootElement
	add	esp, 4
	mov	DWORD PTR _root$[ebp], eax

; 6680 :     ret = xmlValidateElement(ctxt, doc, root);

	mov	ecx, DWORD PTR _root$[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlValidateElement
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 6681 :     ret &= xmlValidateDocumentFinal(ctxt, doc);

	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlValidateDocumentFinal
	add	esp, 8
	and	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _ret$[ebp], eax

; 6682 :     doc->extSubset = oldExt;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR _oldExt$[ebp]
	mov	DWORD PTR [eax+48], ecx

; 6683 :     doc->intSubset = oldInt;

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR _oldInt$[ebp]
	mov	DWORD PTR [edx+44], eax

; 6684 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 6685 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateDtd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateNotationDecl
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_nota$ = 16						; size = 4
_xmlValidateNotationDecl PROC				; COMDAT

; 3771 :                          xmlNotationPtr nota ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3772 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 3773 : 
; 3774 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]

; 3775 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateNotationDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateAttributeValue
_TEXT	SEGMENT
_type$ = 8						; size = 4
_value$ = 12						; size = 4
_xmlValidateAttributeValue PROC				; COMDAT

; 3836 : xmlValidateAttributeValue(xmlAttributeType type, const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3837 :     return(xmlValidateAttributeValueInternal(NULL, type, value));

	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	push	0
	call	_xmlValidateAttributeValueInternal
	add	esp, 12					; 0000000cH

; 3838 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlValidateAttributeValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateAttributeDecl
_TEXT	SEGMENT
_tree$1 = -36						; size = 4
_extId$2 = -32						; size = 4
_table$3 = -28						; size = 4
_elem$4 = -24						; size = 4
_nbId$5 = -16						; size = 4
_val$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_attr$ = 16						; size = 4
_xmlValidateAttributeDecl PROC				; COMDAT

; 4149 :                          xmlAttributePtr attr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 4150 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 4151 :     int val;
; 4152 :     CHECK_DTD;

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN4@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
	jmp	SHORT $LN5@xmlValidat
$LN4@xmlValidat:
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN5@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN5@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN5@xmlValidat:

; 4153 :     if(attr == NULL) return(1);

	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN7@xmlValidat
	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN7@xmlValidat:

; 4154 : 
; 4155 :     /* Attribute Default Legal */
; 4156 :     /* Enumeration */
; 4157 :     if (attr->defaultValue != NULL) {

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN8@xmlValidat

; 4158 : 	val = xmlValidateAttributeValueInternal(doc, attr->atype,

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlValidateAttributeValueInternal
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _val$[ebp], eax

; 4159 : 	                                        attr->defaultValue);
; 4160 : 	if (val == 0) {

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN9@xmlValidat

; 4161 : 	    xmlErrValidNode(ctxt, (xmlNodePtr) attr, XML_DTD_ATTRIBUTE_DEFAULT,

	push	0
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0DN@MJLCEKEK@Syntax?5of?5default?5value?5for?5att@
	push	500					; 000001f4H
	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN9@xmlValidat:

; 4162 : 	       "Syntax of default value for attribute %s of %s is not valid\n",
; 4163 : 	           attr->name, attr->elem, NULL);
; 4164 : 	}
; 4165 :         ret &= val;

	mov	edx, DWORD PTR _ret$[ebp]
	and	edx, DWORD PTR _val$[ebp]
	mov	DWORD PTR _ret$[ebp], edx
$LN8@xmlValidat:

; 4166 :     }
; 4167 : 
; 4168 :     /* ID Attribute Default */
; 4169 :     if ((attr->atype == XML_ATTRIBUTE_ID)&&
; 4170 :         (attr->def != XML_ATTRIBUTE_IMPLIED) &&

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+40], 2
	jne	SHORT $LN10@xmlValidat
	mov	ecx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [ecx+44], 3
	je	SHORT $LN10@xmlValidat
	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+44], 2
	je	SHORT $LN10@xmlValidat

; 4171 : 	(attr->def != XML_ATTRIBUTE_REQUIRED)) {
; 4172 : 	xmlErrValidNode(ctxt, (xmlNodePtr) attr, XML_DTD_ID_FIXED,

	push	0
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0EC@DNHDHDCI@ID?5attribute?5?$CFs?5of?5?$CFs?5is?5not?5va@
	push	512					; 00000200H
	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4173 :           "ID attribute %s of %s is not valid must be #IMPLIED or #REQUIRED\n",
; 4174 : 	       attr->name, attr->elem, NULL);
; 4175 : 	ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN10@xmlValidat:

; 4176 :     }
; 4177 : 
; 4178 :     /* One ID per Element Type */
; 4179 :     if (attr->atype == XML_ATTRIBUTE_ID) {

	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+40], 2
	jne	$LN11@xmlValidat

; 4180 :         int nbId;
; 4181 : 
; 4182 : 	/* the trick is that we parse DtD as their own internal subset */
; 4183 :         xmlElementPtr elem = xmlGetDtdElementDesc(doc->intSubset,

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _elem$4[ebp], eax

; 4184 : 	                                          attr->elem);
; 4185 : 	if (elem != NULL) {

	cmp	DWORD PTR _elem$4[ebp], 0
	je	SHORT $LN12@xmlValidat

; 4186 : 	    nbId = xmlScanIDAttributeDecl(NULL, elem, 0);

	push	0
	mov	edx, DWORD PTR _elem$4[ebp]
	push	edx
	push	0
	call	_xmlScanIDAttributeDecl
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _nbId$5[ebp], eax

; 4187 : 	} else {

	jmp	SHORT $LN13@xmlValidat
$LN12@xmlValidat:

; 4188 : 	    xmlAttributeTablePtr table;
; 4189 : 
; 4190 : 	    /*
; 4191 : 	     * The attribute may be declared in the internal subset and the
; 4192 : 	     * element in the external subset.
; 4193 : 	     */
; 4194 : 	    nbId = 0;

	mov	DWORD PTR _nbId$5[ebp], 0

; 4195 : 	    if (doc->intSubset != NULL) {

	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN13@xmlValidat

; 4196 : 		table = (xmlAttributeTablePtr) doc->intSubset->attributes;

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _table$3[ebp], eax

; 4197 : 		xmlHashScan3(table, NULL, NULL, attr->elem,

	lea	ecx, DWORD PTR _nbId$5[ebp]
	push	ecx
	push	OFFSET _xmlValidateAttributeIdCallback
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _table$3[ebp]
	push	ecx
	call	_xmlHashScan3
	add	esp, 24					; 00000018H
$LN13@xmlValidat:

; 4198 : 			     xmlValidateAttributeIdCallback, &nbId);
; 4199 : 	    }
; 4200 : 	}
; 4201 : 	if (nbId > 1) {

	cmp	DWORD PTR _nbId$5[ebp], 1
	jle	SHORT $LN15@xmlValidat

; 4202 : 
; 4203 : 	    xmlErrValidNodeNr(ctxt, (xmlNodePtr) attr, XML_DTD_ID_SUBSET,

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _nbId$5[ebp]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	push	OFFSET ??_C@_0EE@MLJMMKCM@Element?5?$CFs?5has?5?$CFd?5ID?5attribute?5@
	push	514					; 00000202H
	mov	ecx, DWORD PTR _attr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNodeNr
	add	esp, 28					; 0000001cH
	jmp	$LN11@xmlValidat
$LN15@xmlValidat:

; 4204 :        "Element %s has %d ID attribute defined in the internal subset : %s\n",
; 4205 : 		   attr->elem, nbId, attr->name);
; 4206 : 	} else if (doc->extSubset != NULL) {

	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN11@xmlValidat

; 4207 : 	    int extId = 0;

	mov	DWORD PTR _extId$2[ebp], 0

; 4208 : 	    elem = xmlGetDtdElementDesc(doc->extSubset, attr->elem);

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _elem$4[ebp], eax

; 4209 : 	    if (elem != NULL) {

	cmp	DWORD PTR _elem$4[ebp], 0
	je	SHORT $LN18@xmlValidat

; 4210 : 		extId = xmlScanIDAttributeDecl(NULL, elem, 0);

	push	0
	mov	edx, DWORD PTR _elem$4[ebp]
	push	edx
	push	0
	call	_xmlScanIDAttributeDecl
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _extId$2[ebp], eax
$LN18@xmlValidat:

; 4211 : 	    }
; 4212 : 	    if (extId > 1) {

	cmp	DWORD PTR _extId$2[ebp], 1
	jle	SHORT $LN19@xmlValidat

; 4213 : 		xmlErrValidNodeNr(ctxt, (xmlNodePtr) attr, XML_DTD_ID_SUBSET,

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _extId$2[ebp]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	push	OFFSET ??_C@_0EE@JDKHGIAG@Element?5?$CFs?5has?5?$CFd?5ID?5attribute?5@
	push	514					; 00000202H
	mov	edx, DWORD PTR _attr$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNodeNr
	add	esp, 28					; 0000001cH
	jmp	SHORT $LN11@xmlValidat
$LN19@xmlValidat:

; 4214 :        "Element %s has %d ID attribute defined in the external subset : %s\n",
; 4215 : 		       attr->elem, extId, attr->name);
; 4216 : 	    } else if (extId + nbId > 1) {

	mov	ecx, DWORD PTR _extId$2[ebp]
	add	ecx, DWORD PTR _nbId$5[ebp]
	cmp	ecx, 1
	jle	SHORT $LN11@xmlValidat

; 4217 : 		xmlErrValidNode(ctxt, (xmlNodePtr) attr, XML_DTD_ID_SUBSET,

	push	0
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	push	OFFSET ??_C@_0EP@CFLHEJLO@Element?5?$CFs?5has?5ID?5attributes?5de@
	push	514					; 00000202H
	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN11@xmlValidat:

; 4218 : "Element %s has ID attributes defined in the internal and external subset : %s\n",
; 4219 : 		       attr->elem, attr->name, NULL);
; 4220 : 	    }
; 4221 : 	}
; 4222 :     }
; 4223 : 
; 4224 :     /* Validity Constraint: Enumeration */
; 4225 :     if ((attr->defaultValue != NULL) && (attr->tree != NULL)) {

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN22@xmlValidat
	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN22@xmlValidat

; 4226 :         xmlEnumerationPtr tree = attr->tree;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR _tree$1[ebp], edx
$LN2@xmlValidat:

; 4227 : 	while (tree != NULL) {

	cmp	DWORD PTR _tree$1[ebp], 0
	je	SHORT $LN3@xmlValidat

; 4228 : 	    if (xmlStrEqual(tree->name, attr->defaultValue)) break;

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _tree$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@xmlValidat
	jmp	SHORT $LN3@xmlValidat
$LN23@xmlValidat:

; 4229 : 	    tree = tree->next;

	mov	ecx, DWORD PTR _tree$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _tree$1[ebp], edx

; 4230 : 	}

	jmp	SHORT $LN2@xmlValidat
$LN3@xmlValidat:

; 4231 : 	if (tree == NULL) {

	cmp	DWORD PTR _tree$1[ebp], 0
	jne	SHORT $LN22@xmlValidat

; 4232 : 	    xmlErrValidNode(ctxt, (xmlNodePtr) attr, XML_DTD_ATTRIBUTE_VALUE,

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	push	OFFSET ??_C@_0EL@MPNELAFE@Default?5value?5?$CC?$CFs?$CC?5for?5attribut@
	push	502					; 000001f6H
	mov	eax, DWORD PTR _attr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4233 : "Default value \"%s\" for attribute %s of %s is not among the enumerated set\n",
; 4234 : 		   attr->defaultValue, attr->name, attr->elem);
; 4235 : 	    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN22@xmlValidat:

; 4236 : 	}
; 4237 :     }
; 4238 : 
; 4239 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 4240 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@xmlValidat:
	DD	1
	DD	$LN27@xmlValidat
$LN27@xmlValidat:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN26@xmlValidat
$LN26@xmlValidat:
	DB	110					; 0000006eH
	DB	98					; 00000062H
	DB	73					; 00000049H
	DB	100					; 00000064H
	DB	0
_xmlValidateAttributeDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidCtxtNormalizeAttributeValue
_TEXT	SEGMENT
_fullname$1 = -84					; size = 4
_fn$2 = -76						; size = 50
_extsubset$ = -20					; size = 4
_attrDecl$ = -16					; size = 4
_src$ = -12						; size = 4
_dst$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_name$ = 20						; size = 4
_value$ = 24						; size = 4
_xmlValidCtxtNormalizeAttributeValue PROC		; COMDAT

; 3987 : 	     xmlNodePtr elem, const xmlChar *name, const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3988 :     xmlChar *ret, *dst;
; 3989 :     const xmlChar *src;
; 3990 :     xmlAttributePtr attrDecl = NULL;

	mov	DWORD PTR _attrDecl$[ebp], 0

; 3991 :     int extsubset = 0;

	mov	DWORD PTR _extsubset$[ebp], 0

; 3992 : 
; 3993 :     if (doc == NULL) return(NULL);

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN8@xmlValidCt
	xor	eax, eax
	jmp	$LN1@xmlValidCt
$LN8@xmlValidCt:

; 3994 :     if (elem == NULL) return(NULL);

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN9@xmlValidCt
	xor	eax, eax
	jmp	$LN1@xmlValidCt
$LN9@xmlValidCt:

; 3995 :     if (name == NULL) return(NULL);

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN10@xmlValidCt
	xor	eax, eax
	jmp	$LN1@xmlValidCt
$LN10@xmlValidCt:

; 3996 :     if (value == NULL) return(NULL);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN11@xmlValidCt
	xor	eax, eax
	jmp	$LN1@xmlValidCt
$LN11@xmlValidCt:

; 3997 : 
; 3998 :     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	$LN12@xmlValidCt
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [edx+12], 0
	je	$LN12@xmlValidCt

; 3999 : 	xmlChar fn[50];
; 4000 : 	xmlChar *fullname;
; 4001 : 
; 4002 : 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);

	push	50					; 00000032H
	lea	eax, DWORD PTR _fn$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$1[ebp], eax

; 4003 : 	if (fullname == NULL)

	cmp	DWORD PTR _fullname$1[ebp], 0
	jne	SHORT $LN13@xmlValidCt

; 4004 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlValidCt
$LN13@xmlValidCt:

; 4005 : 	attrDecl = xmlGetDtdAttrDesc(doc->intSubset, fullname, name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _fullname$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4006 : 	if ((attrDecl == NULL) && (doc->extSubset != NULL)) {

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN14@xmlValidCt
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN14@xmlValidCt

; 4007 : 	    attrDecl = xmlGetDtdAttrDesc(doc->extSubset, fullname, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _fullname$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4008 : 	    if (attrDecl != NULL)

	cmp	DWORD PTR _attrDecl$[ebp], 0
	je	SHORT $LN14@xmlValidCt

; 4009 : 		extsubset = 1;

	mov	DWORD PTR _extsubset$[ebp], 1
$LN14@xmlValidCt:

; 4010 : 	}
; 4011 : 	if ((fullname != fn) && (fullname != elem->name))

	lea	eax, DWORD PTR _fn$2[ebp]
	cmp	DWORD PTR _fullname$1[ebp], eax
	je	SHORT $LN12@xmlValidCt
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR _fullname$1[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN12@xmlValidCt

; 4012 : 	    xmlFree(fullname);

	mov	esi, esp
	mov	eax, DWORD PTR _fullname$1[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlValidCt:

; 4013 :     }
; 4014 :     if ((attrDecl == NULL) && (doc->intSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN17@xmlValidCt
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN17@xmlValidCt

; 4015 : 	attrDecl = xmlGetDtdAttrDesc(doc->intSubset, elem->name, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN17@xmlValidCt:

; 4016 :     if ((attrDecl == NULL) && (doc->extSubset != NULL)) {

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN18@xmlValidCt
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN18@xmlValidCt

; 4017 : 	attrDecl = xmlGetDtdAttrDesc(doc->extSubset, elem->name, name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4018 : 	if (attrDecl != NULL)

	cmp	DWORD PTR _attrDecl$[ebp], 0
	je	SHORT $LN18@xmlValidCt

; 4019 : 	    extsubset = 1;

	mov	DWORD PTR _extsubset$[ebp], 1
$LN18@xmlValidCt:

; 4020 :     }
; 4021 : 
; 4022 :     if (attrDecl == NULL)

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN20@xmlValidCt

; 4023 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlValidCt
$LN20@xmlValidCt:

; 4024 :     if (attrDecl->atype == XML_ATTRIBUTE_CDATA)

	mov	ecx, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [ecx+40], 1
	jne	SHORT $LN21@xmlValidCt

; 4025 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlValidCt
$LN21@xmlValidCt:

; 4026 : 
; 4027 :     ret = xmlStrdup(value);

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4028 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN22@xmlValidCt

; 4029 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlValidCt
$LN22@xmlValidCt:

; 4030 :     src = value;

	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR _src$[ebp], eax

; 4031 :     dst = ret;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _dst$[ebp], ecx
$LN2@xmlValidCt:

; 4032 :     while (*src == 0x20) src++;

	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN4@xmlValidCt
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
	jmp	SHORT $LN2@xmlValidCt
$LN4@xmlValidCt:

; 4033 :     while (*src != 0) {

	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN5@xmlValidCt

; 4034 : 	if (*src == 0x20) {

	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN23@xmlValidCt
$LN6@xmlValidCt:

; 4035 : 	    while (*src == 0x20) src++;

	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN7@xmlValidCt
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 1
	mov	DWORD PTR _src$[ebp], edx
	jmp	SHORT $LN6@xmlValidCt
$LN7@xmlValidCt:

; 4036 : 	    if (*src != 0)

	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN25@xmlValidCt

; 4037 : 		*dst++ = 0x20;

	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx], 32			; 00000020H
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 1
	mov	DWORD PTR _dst$[ebp], eax
$LN25@xmlValidCt:

; 4038 : 	} else {

	jmp	SHORT $LN24@xmlValidCt
$LN23@xmlValidCt:

; 4039 : 	    *dst++ = *src++;

	mov	ecx, DWORD PTR _dst$[ebp]
	mov	edx, DWORD PTR _src$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx], al
	mov	ecx, DWORD PTR _dst$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dst$[ebp], ecx
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 1
	mov	DWORD PTR _src$[ebp], edx
$LN24@xmlValidCt:

; 4040 : 	}
; 4041 :     }

	jmp	SHORT $LN4@xmlValidCt
$LN5@xmlValidCt:

; 4042 :     *dst = 0;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [eax], 0

; 4043 :     if ((doc->standalone) && (extsubset == 1) && (!xmlStrEqual(value, ret))) {

	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN26@xmlValidCt
	cmp	DWORD PTR _extsubset$[ebp], 1
	jne	SHORT $LN26@xmlValidCt
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN26@xmlValidCt

; 4044 : 	xmlErrValidNode(ctxt, elem, XML_DTD_NOT_STANDALONE,

	push	0
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	push	OFFSET ??_C@_0FG@CJEJIEOP@standalone?3?5?$CFs?5on?5?$CFs?5value?5had?5@
	push	530					; 00000212H
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4045 : "standalone: %s on %s value had to be normalized based on external subset declaration\n",
; 4046 : 	       name, elem->name, NULL);
; 4047 : 	ctxt->valid = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN26@xmlValidCt:

; 4048 :     }
; 4049 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidCt:

; 4050 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@xmlValidCt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN30@xmlValidCt:
	DD	1
	DD	$LN29@xmlValidCt
$LN29@xmlValidCt:
	DD	-76					; ffffffb4H
	DD	50					; 00000032H
	DD	$LN28@xmlValidCt
$LN28@xmlValidCt:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_xmlValidCtxtNormalizeAttributeValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidNormalizeAttributeValue
_TEXT	SEGMENT
_fullname$1 = -80					; size = 4
_fn$2 = -72						; size = 50
_attrDecl$ = -16					; size = 4
_src$ = -12						; size = 4
_dst$ = -8						; size = 4
_ret$ = -4						; size = 4
_doc$ = 8						; size = 4
_elem$ = 12						; size = 4
_name$ = 16						; size = 4
_value$ = 20						; size = 4
_xmlValidNormalizeAttributeValue PROC			; COMDAT

; 4073 : 			        const xmlChar *name, const xmlChar *value) {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 4074 :     xmlChar *ret, *dst;
; 4075 :     const xmlChar *src;
; 4076 :     xmlAttributePtr attrDecl = NULL;

	mov	DWORD PTR _attrDecl$[ebp], 0

; 4077 : 
; 4078 :     if (doc == NULL) return(NULL);

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN8@xmlValidNo
	xor	eax, eax
	jmp	$LN1@xmlValidNo
$LN8@xmlValidNo:

; 4079 :     if (elem == NULL) return(NULL);

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN9@xmlValidNo
	xor	eax, eax
	jmp	$LN1@xmlValidNo
$LN9@xmlValidNo:

; 4080 :     if (name == NULL) return(NULL);

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN10@xmlValidNo
	xor	eax, eax
	jmp	$LN1@xmlValidNo
$LN10@xmlValidNo:

; 4081 :     if (value == NULL) return(NULL);

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN11@xmlValidNo
	xor	eax, eax
	jmp	$LN1@xmlValidNo
$LN11@xmlValidNo:

; 4082 : 
; 4083 :     if ((elem->ns != NULL) && (elem->ns->prefix != NULL)) {

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN12@xmlValidNo
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN12@xmlValidNo

; 4084 : 	xmlChar fn[50];
; 4085 : 	xmlChar *fullname;
; 4086 : 
; 4087 : 	fullname = xmlBuildQName(elem->name, elem->ns->prefix, fn, 50);

	push	50					; 00000032H
	lea	eax, DWORD PTR _fn$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$1[ebp], eax

; 4088 : 	if (fullname == NULL)

	cmp	DWORD PTR _fullname$1[ebp], 0
	jne	SHORT $LN13@xmlValidNo

; 4089 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlValidNo
$LN13@xmlValidNo:

; 4090 : 	if ((fullname != fn) && (fullname != elem->name))

	lea	eax, DWORD PTR _fn$2[ebp]
	cmp	DWORD PTR _fullname$1[ebp], eax
	je	SHORT $LN12@xmlValidNo
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR _fullname$1[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN12@xmlValidNo

; 4091 : 	    xmlFree(fullname);

	mov	esi, esp
	mov	eax, DWORD PTR _fullname$1[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlValidNo:

; 4092 :     }
; 4093 :     attrDecl = xmlGetDtdAttrDesc(doc->intSubset, elem->name, name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax

; 4094 :     if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN15@xmlValidNo
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN15@xmlValidNo

; 4095 : 	attrDecl = xmlGetDtdAttrDesc(doc->extSubset, elem->name, name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$[ebp], eax
$LN15@xmlValidNo:

; 4096 : 
; 4097 :     if (attrDecl == NULL)

	cmp	DWORD PTR _attrDecl$[ebp], 0
	jne	SHORT $LN16@xmlValidNo

; 4098 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlValidNo
$LN16@xmlValidNo:

; 4099 :     if (attrDecl->atype == XML_ATTRIBUTE_CDATA)

	mov	eax, DWORD PTR _attrDecl$[ebp]
	cmp	DWORD PTR [eax+40], 1
	jne	SHORT $LN17@xmlValidNo

; 4100 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlValidNo
$LN17@xmlValidNo:

; 4101 : 
; 4102 :     ret = xmlStrdup(value);

	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4103 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN18@xmlValidNo

; 4104 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlValidNo
$LN18@xmlValidNo:

; 4105 :     src = value;

	mov	edx, DWORD PTR _value$[ebp]
	mov	DWORD PTR _src$[ebp], edx

; 4106 :     dst = ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _dst$[ebp], eax
$LN2@xmlValidNo:

; 4107 :     while (*src == 0x20) src++;

	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 32					; 00000020H
	jne	SHORT $LN4@xmlValidNo
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
	jmp	SHORT $LN2@xmlValidNo
$LN4@xmlValidNo:

; 4108 :     while (*src != 0) {

	mov	ecx, DWORD PTR _src$[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN5@xmlValidNo

; 4109 : 	if (*src == 0x20) {

	mov	eax, DWORD PTR _src$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 32					; 00000020H
	jne	SHORT $LN19@xmlValidNo
$LN6@xmlValidNo:

; 4110 : 	    while (*src == 0x20) src++;

	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN7@xmlValidNo
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
	jmp	SHORT $LN6@xmlValidNo
$LN7@xmlValidNo:

; 4111 : 	    if (*src != 0)

	mov	edx, DWORD PTR _src$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN21@xmlValidNo

; 4112 : 		*dst++ = 0x20;

	mov	ecx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [ecx], 32			; 00000020H
	mov	edx, DWORD PTR _dst$[ebp]
	add	edx, 1
	mov	DWORD PTR _dst$[ebp], edx
$LN21@xmlValidNo:

; 4113 : 	} else {

	jmp	SHORT $LN20@xmlValidNo
$LN19@xmlValidNo:

; 4114 : 	    *dst++ = *src++;

	mov	eax, DWORD PTR _dst$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _dst$[ebp]
	add	eax, 1
	mov	DWORD PTR _dst$[ebp], eax
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
$LN20@xmlValidNo:

; 4115 : 	}
; 4116 :     }

	jmp	SHORT $LN4@xmlValidNo
$LN5@xmlValidNo:

; 4117 :     *dst = 0;

	mov	edx, DWORD PTR _dst$[ebp]
	mov	BYTE PTR [edx], 0

; 4118 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidNo:

; 4119 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@xmlValidNo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN25@xmlValidNo:
	DD	1
	DD	$LN24@xmlValidNo
$LN24@xmlValidNo:
	DD	-72					; ffffffb8H
	DD	50					; 00000032H
	DD	$LN23@xmlValidNo
$LN23@xmlValidNo:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_xmlValidNormalizeAttributeValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateElementDecl
_TEXT	SEGMENT
_name$1 = -20						; size = 4
_next$2 = -16						; size = 4
_cur$3 = -12						; size = 4
_tst$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_elem$ = 16						; size = 4
_xmlValidateElementDecl PROC				; COMDAT

; 4260 :                        xmlElementPtr elem) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 4261 :     int ret = 1;

	mov	DWORD PTR _ret$[ebp], 1

; 4262 :     xmlElementPtr tst;
; 4263 : 
; 4264 :     CHECK_DTD;

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN6@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
	jmp	SHORT $LN7@xmlValidat
$LN6@xmlValidat:
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	jne	SHORT $LN7@xmlValidat
	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN7@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN7@xmlValidat:

; 4265 : 
; 4266 :     if (elem == NULL) return(1);

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN9@xmlValidat
	mov	eax, 1
	jmp	$LN1@xmlValidat
$LN9@xmlValidat:

; 4267 : 
; 4268 : #if 0
; 4269 : #ifdef LIBXML_REGEXP_ENABLED
; 4270 :     /* Build the regexp associated to the content model */
; 4271 :     ret = xmlValidBuildContentModel(ctxt, elem);
; 4272 : #endif
; 4273 : #endif
; 4274 : 
; 4275 :     /* No Duplicate Types */
; 4276 :     if (elem->etype == XML_ELEMENT_TYPE_MIXED) {

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+36], 3
	jne	$LN10@xmlValidat

; 4277 : 	xmlElementContentPtr cur, next;
; 4278 :         const xmlChar *name;
; 4279 : 
; 4280 : 	cur = elem->content;

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _cur$3[ebp], ecx
$LN2@xmlValidat:

; 4281 : 	while (cur != NULL) {

	cmp	DWORD PTR _cur$3[ebp], 0
	je	$LN10@xmlValidat

; 4282 : 	    if (cur->type != XML_ELEMENT_CONTENT_OR) break;

	mov	edx, DWORD PTR _cur$3[ebp]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN11@xmlValidat
	jmp	$LN10@xmlValidat
$LN11@xmlValidat:

; 4283 : 	    if (cur->c1 == NULL) break;

	mov	eax, DWORD PTR _cur$3[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN12@xmlValidat
	jmp	$LN10@xmlValidat
$LN12@xmlValidat:

; 4284 : 	    if (cur->c1->type == XML_ELEMENT_CONTENT_ELEMENT) {

	mov	ecx, DWORD PTR _cur$3[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx], 2
	jne	$LN13@xmlValidat

; 4285 : 		name = cur->c1->name;

	mov	eax, DWORD PTR _cur$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _name$1[ebp], edx

; 4286 : 		next = cur->c2;

	mov	eax, DWORD PTR _cur$3[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _next$2[ebp], ecx
$LN4@xmlValidat:

; 4287 : 		while (next != NULL) {

	cmp	DWORD PTR _next$2[ebp], 0
	je	$LN13@xmlValidat

; 4288 : 		    if (next->type == XML_ELEMENT_CONTENT_ELEMENT) {

	mov	edx, DWORD PTR _next$2[ebp]
	cmp	DWORD PTR [edx], 2
	jne	$LN14@xmlValidat

; 4289 : 		        if ((xmlStrEqual(next->name, name)) &&

	mov	eax, DWORD PTR _name$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _next$2[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN15@xmlValidat
	mov	eax, DWORD PTR _cur$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _next$2[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlValidat

; 4290 : 			    (xmlStrEqual(next->prefix, cur->c1->prefix))) {
; 4291 : 			    if (cur->c1->prefix == NULL) {

	mov	edx, DWORD PTR _cur$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN16@xmlValidat

; 4292 : 				xmlErrValidNode(ctxt, (xmlNodePtr) elem, XML_DTD_CONTENT_ERROR,

	push	0
	mov	ecx, DWORD PTR _name$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DB@DPGOOPFF@Definition?5of?5?$CFs?5has?5duplicate?5@
	push	503					; 000001f7H
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4293 : 		   "Definition of %s has duplicate references of %s\n",
; 4294 : 				       elem->name, name, NULL);
; 4295 : 			    } else {

	jmp	SHORT $LN17@xmlValidat
$LN16@xmlValidat:

; 4296 : 				xmlErrValidNode(ctxt, (xmlNodePtr) elem, XML_DTD_CONTENT_ERROR,

	mov	eax, DWORD PTR _name$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$3[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0DE@IDAOJGBB@Definition?5of?5?$CFs?5has?5duplicate?5@
	push	503					; 000001f7H
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN17@xmlValidat:

; 4297 : 		   "Definition of %s has duplicate references of %s:%s\n",
; 4298 : 				       elem->name, cur->c1->prefix, name);
; 4299 : 			    }
; 4300 : 			    ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN15@xmlValidat:

; 4301 : 			}
; 4302 : 			break;

	jmp	$LN13@xmlValidat
$LN14@xmlValidat:

; 4303 : 		    }
; 4304 : 		    if (next->c1 == NULL) break;

	mov	edx, DWORD PTR _next$2[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN18@xmlValidat
	jmp	$LN13@xmlValidat
$LN18@xmlValidat:

; 4305 : 		    if (next->c1->type != XML_ELEMENT_CONTENT_ELEMENT) break;

	mov	eax, DWORD PTR _next$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], 2
	je	SHORT $LN19@xmlValidat
	jmp	$LN13@xmlValidat
$LN19@xmlValidat:

; 4306 : 		    if ((xmlStrEqual(next->c1->name, name)) &&

	mov	edx, DWORD PTR _name$1[ebp]
	push	edx
	mov	eax, DWORD PTR _next$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN20@xmlValidat
	mov	eax, DWORD PTR _cur$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _next$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@xmlValidat

; 4307 : 		        (xmlStrEqual(next->c1->prefix, cur->c1->prefix))) {
; 4308 : 			if (cur->c1->prefix == NULL) {

	mov	eax, DWORD PTR _cur$3[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN21@xmlValidat

; 4309 : 			    xmlErrValidNode(ctxt, (xmlNodePtr) elem, XML_DTD_CONTENT_ERROR,

	push	0
	mov	edx, DWORD PTR _name$1[ebp]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0DB@HNLIHGKJ@Definition?5of?5?$CFs?5has?5duplicate?5@
	push	503					; 000001f7H
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4310 : 	       "Definition of %s has duplicate references to %s\n",
; 4311 : 				   elem->name, name, NULL);
; 4312 : 			} else {

	jmp	SHORT $LN22@xmlValidat
$LN21@xmlValidat:

; 4313 : 			    xmlErrValidNode(ctxt, (xmlNodePtr) elem, XML_DTD_CONTENT_ERROR,

	mov	ecx, DWORD PTR _name$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$3[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0DE@PAODFKFF@Definition?5of?5?$CFs?5has?5duplicate?5@
	push	503					; 000001f7H
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN22@xmlValidat:

; 4314 : 	       "Definition of %s has duplicate references to %s:%s\n",
; 4315 : 				   elem->name, cur->c1->prefix, name);
; 4316 : 			}
; 4317 : 			ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN20@xmlValidat:

; 4318 : 		    }
; 4319 : 		    next = next->c2;

	mov	eax, DWORD PTR _next$2[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _next$2[ebp], ecx

; 4320 : 		}

	jmp	$LN4@xmlValidat
$LN13@xmlValidat:

; 4321 : 	    }
; 4322 : 	    cur = cur->c2;

	mov	edx, DWORD PTR _cur$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _cur$3[ebp], eax

; 4323 : 	}

	jmp	$LN2@xmlValidat
$LN10@xmlValidat:

; 4324 :     }
; 4325 : 
; 4326 :     /* VC: Unique Element Type Declaration */
; 4327 :     tst = xmlGetDtdElementDesc(doc->intSubset, elem->name);

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _tst$[ebp], eax

; 4328 :     if ((tst != NULL ) && (tst != elem) &&
; 4329 : 	((tst->prefix == elem->prefix) ||
; 4330 : 	 (xmlStrEqual(tst->prefix, elem->prefix))) &&

	cmp	DWORD PTR _tst$[ebp], 0
	je	SHORT $LN23@xmlValidat
	mov	edx, DWORD PTR _tst$[ebp]
	cmp	edx, DWORD PTR _elem$[ebp]
	je	SHORT $LN23@xmlValidat
	mov	eax, DWORD PTR _tst$[ebp]
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [eax+48]
	cmp	edx, DWORD PTR [ecx+48]
	je	SHORT $LN24@xmlValidat
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _tst$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN23@xmlValidat
$LN24@xmlValidat:
	mov	ecx, DWORD PTR _tst$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN23@xmlValidat

; 4331 : 	(tst->etype != XML_ELEMENT_TYPE_UNDEFINED)) {
; 4332 : 	xmlErrValidNode(ctxt, (xmlNodePtr) elem, XML_DTD_ELEM_REDEFINED,

	push	0
	push	0
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0BM@DLJMKEJ@Redefinition?5of?5element?5?$CFs?6@
	push	509					; 000001fdH
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4333 : 	                "Redefinition of element %s\n",
; 4334 : 		       elem->name, NULL, NULL);
; 4335 : 	ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN23@xmlValidat:

; 4336 :     }
; 4337 :     tst = xmlGetDtdElementDesc(doc->extSubset, elem->name);

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_xmlGetDtdElementDesc
	add	esp, 8
	mov	DWORD PTR _tst$[ebp], eax

; 4338 :     if ((tst != NULL ) && (tst != elem) &&
; 4339 : 	((tst->prefix == elem->prefix) ||
; 4340 : 	 (xmlStrEqual(tst->prefix, elem->prefix))) &&

	cmp	DWORD PTR _tst$[ebp], 0
	je	SHORT $LN25@xmlValidat
	mov	ecx, DWORD PTR _tst$[ebp]
	cmp	ecx, DWORD PTR _elem$[ebp]
	je	SHORT $LN25@xmlValidat
	mov	edx, DWORD PTR _tst$[ebp]
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [edx+48]
	cmp	ecx, DWORD PTR [eax+48]
	je	SHORT $LN26@xmlValidat
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _tst$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN25@xmlValidat
$LN26@xmlValidat:
	mov	eax, DWORD PTR _tst$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN25@xmlValidat

; 4341 : 	(tst->etype != XML_ELEMENT_TYPE_UNDEFINED)) {
; 4342 : 	xmlErrValidNode(ctxt, (xmlNodePtr) elem, XML_DTD_ELEM_REDEFINED,

	push	0
	push	0
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0BM@DLJMKEJ@Redefinition?5of?5element?5?$CFs?6@
	push	509					; 000001fdH
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 4343 : 	                "Redefinition of element %s\n",
; 4344 : 		       elem->name, NULL, NULL);
; 4345 : 	ret = 0;

	mov	DWORD PTR _ret$[ebp], 0
$LN25@xmlValidat:

; 4346 :     }
; 4347 :     /* One ID per Element Type
; 4348 :      * already done when registering the attribute
; 4349 :     if (xmlScanIDAttributeDecl(ctxt, elem) > 1) {
; 4350 : 	ret = 0;
; 4351 :     } */
; 4352 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlValidat:

; 4353 : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlValidateElementDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlValidateRoot
_TEXT	SEGMENT
_fullname$1 = -72					; size = 4
_fn$2 = -64						; size = 50
_ret$ = -8						; size = 4
_root$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_xmlValidateRoot PROC					; COMDAT

; 6345 : xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc) {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 6346 :     xmlNodePtr root;
; 6347 :     int ret;
; 6348 : 
; 6349 :     if (doc == NULL) return(0);

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlValidat
	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN2@xmlValidat:

; 6350 : 
; 6351 :     root = xmlDocGetRootElement(doc);

	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlDocGetRootElement
	add	esp, 4
	mov	DWORD PTR _root$[ebp], eax

; 6352 :     if ((root == NULL) || (root->name == NULL)) {

	cmp	DWORD PTR _root$[ebp], 0
	je	SHORT $LN4@xmlValidat
	mov	ecx, DWORD PTR _root$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN3@xmlValidat
$LN4@xmlValidat:

; 6353 : 	xmlErrValid(ctxt, XML_DTD_NO_ROOT,

	push	0
	push	OFFSET ??_C@_0BB@JNDFICHA@no?5root?5element?6@
	push	525					; 0000020dH
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 6354 : 	            "no root element\n", NULL);
; 6355 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN3@xmlValidat:

; 6356 :     }
; 6357 : 
; 6358 :     /*
; 6359 :      * When doing post validation against a separate DTD, those may
; 6360 :      * no internal subset has been generated
; 6361 :      */
; 6362 :     if ((doc->intSubset != NULL) &&

	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	$name_ok$16
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	cmp	DWORD PTR [edx+8], 0
	je	$name_ok$16

; 6363 : 	(doc->intSubset->name != NULL)) {
; 6364 : 	/*
; 6365 : 	 * Check first the document root against the NQName
; 6366 : 	 */
; 6367 : 	if (!xmlStrEqual(doc->intSubset->name, root->name)) {

	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	$name_ok$16

; 6368 : 	    if ((root->ns != NULL) && (root->ns->prefix != NULL)) {

	mov	edx, DWORD PTR _root$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	$LN7@xmlValidat
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	je	$LN7@xmlValidat

; 6369 : 		xmlChar fn[50];
; 6370 : 		xmlChar *fullname;
; 6371 : 
; 6372 : 		fullname = xmlBuildQName(root->name, root->ns->prefix, fn, 50);

	push	50					; 00000032H
	lea	edx, DWORD PTR _fn$2[ebp]
	push	edx
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR _fullname$1[ebp], eax

; 6373 : 		if (fullname == NULL) {

	cmp	DWORD PTR _fullname$1[ebp], 0
	jne	SHORT $LN8@xmlValidat

; 6374 : 		    xmlVErrMemory(ctxt, NULL);

	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlVErrMemory
	add	esp, 8

; 6375 : 		    return(0);

	xor	eax, eax
	jmp	$LN1@xmlValidat
$LN8@xmlValidat:

; 6376 : 		}
; 6377 : 		ret = xmlStrEqual(doc->intSubset->name, fullname);

	mov	eax, DWORD PTR _fullname$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 6378 : 		if ((fullname != fn) && (fullname != root->name))

	lea	ecx, DWORD PTR _fn$2[ebp]
	cmp	DWORD PTR _fullname$1[ebp], ecx
	je	SHORT $LN9@xmlValidat
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR _fullname$1[ebp]
	cmp	eax, DWORD PTR [edx+8]
	je	SHORT $LN9@xmlValidat

; 6379 : 		    xmlFree(fullname);

	mov	esi, esp
	mov	ecx, DWORD PTR _fullname$1[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@xmlValidat:

; 6380 : 		if (ret == 1)

	cmp	DWORD PTR _ret$[ebp], 1
	jne	SHORT $LN7@xmlValidat

; 6381 : 		    goto name_ok;

	jmp	SHORT $name_ok$16
$LN7@xmlValidat:

; 6382 : 	    }
; 6383 : 	    if ((xmlStrEqual(doc->intSubset->name, BAD_CAST "HTML")) &&

	push	OFFSET ??_C@_04DBLPJNAF@HTML@
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@xmlValidat
	push	OFFSET ??_C@_04PNIFHPHN@html@
	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@xmlValidat

; 6384 : 		(xmlStrEqual(root->name, BAD_CAST "html")))
; 6385 : 		goto name_ok;

	jmp	SHORT $name_ok$16
$LN11@xmlValidat:

; 6386 : 	    xmlErrValidNode(ctxt, root, XML_DTD_ROOT_NAME,

	push	0
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0CO@PMJDAMAF@root?5and?5DTD?5name?5do?5not?5match?5@
	push	531					; 00000213H
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 6387 : 		   "root and DTD name do not match '%s' and '%s'\n",
; 6388 : 		   root->name, doc->intSubset->name, NULL);
; 6389 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlValidat
$name_ok$16:

; 6390 : 	}
; 6391 :     }
; 6392 : name_ok:
; 6393 :     return(1);

	mov	eax, 1
$LN1@xmlValidat:

; 6394 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@xmlValidat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN15@xmlValidat:
	DD	1
	DD	$LN14@xmlValidat
$LN14@xmlValidat:
	DD	-64					; ffffffc0H
	DD	50					; 00000032H
	DD	$LN13@xmlValidat
$LN13@xmlValidat:
	DB	102					; 00000066H
	DB	110					; 0000006eH
	DB	0
_xmlValidateRoot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeValidCtxt
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_xmlFreeValidCtxt PROC					; COMDAT

; 900  : xmlFreeValidCtxt(xmlValidCtxtPtr cur) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 901  :     if (cur->vstateTab != NULL)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN2@xmlFreeVal

; 902  :         xmlFree(cur->vstateTab);

	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlFreeVal:

; 903  :     if (cur->nodeTab != NULL)

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN3@xmlFreeVal

; 904  :         xmlFree(cur->nodeTab);

	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlFreeVal:

; 905  :     xmlFree(cur);

	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 906  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeValidCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlNewValidCtxt
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_xmlNewValidCtxt PROC					; COMDAT

; 880  : xmlValidCtxtPtr xmlNewValidCtxt(void) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 881  :     xmlValidCtxtPtr ret;
; 882  : 
; 883  :     if ((ret = xmlMalloc(sizeof (xmlValidCtxt))) == NULL) {

	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax
	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlNewVali

; 884  : 	xmlVErrMemory(NULL, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 885  : 	return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlNewVali
$LN2@xmlNewVali:

; 886  :     }
; 887  : 
; 888  :     (void) memset(ret, 0, sizeof (xmlValidCtxt));

	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 889  : 
; 890  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlNewVali:

; 891  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlNewValidCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlGetRefs
_TEXT	SEGMENT
_table$ = -4						; size = 4
_doc$ = 8						; size = 4
_ID$ = 12						; size = 4
_xmlGetRefs PROC					; COMDAT

; 3141 : xmlGetRefs(xmlDocPtr doc, const xmlChar *ID) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3142 :     xmlRefTablePtr table;
; 3143 : 
; 3144 :     if (doc == NULL) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlGetRefs

; 3145 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlGetRefs
$LN2@xmlGetRefs:

; 3146 :     }
; 3147 : 
; 3148 :     if (ID == NULL) {

	cmp	DWORD PTR _ID$[ebp], 0
	jne	SHORT $LN3@xmlGetRefs

; 3149 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlGetRefs
$LN3@xmlGetRefs:

; 3150 :     }
; 3151 : 
; 3152 :     table = (xmlRefTablePtr) doc->refs;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _table$[ebp], ecx

; 3153 :     if (table == NULL)

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN4@xmlGetRefs

; 3154 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlGetRefs
$LN4@xmlGetRefs:

; 3155 : 
; 3156 :     return (xmlHashLookup(table, ID));

	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashLookup
	add	esp, 8
$LN1@xmlGetRefs:

; 3157 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlGetRefs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlRemoveRef
_TEXT	SEGMENT
_target$ = -24						; size = 8
_ID$ = -12						; size = 4
_table$ = -8						; size = 4
_ref_list$ = -4						; size = 4
_doc$ = 8						; size = 4
_attr$ = 12						; size = 4
_xmlRemoveRef PROC					; COMDAT

; 3085 : xmlRemoveRef(xmlDocPtr doc, xmlAttrPtr attr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3086 :     xmlListPtr ref_list;
; 3087 :     xmlRefTablePtr table;
; 3088 :     xmlChar *ID;
; 3089 :     xmlRemoveMemo target;
; 3090 : 
; 3091 :     if (doc == NULL) return(-1);

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlRemoveR
	or	eax, -1
	jmp	$LN1@xmlRemoveR
$LN2@xmlRemoveR:

; 3092 :     if (attr == NULL) return(-1);

	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN3@xmlRemoveR
	or	eax, -1
	jmp	$LN1@xmlRemoveR
$LN3@xmlRemoveR:

; 3093 : 
; 3094 :     table = (xmlRefTablePtr) doc->refs;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _table$[ebp], ecx

; 3095 :     if (table == NULL)

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN4@xmlRemoveR

; 3096 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlRemoveR
$LN4@xmlRemoveR:

; 3097 : 
; 3098 :     ID = xmlNodeListGetString(doc, attr->children, 1);

	push	1
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ID$[ebp], eax

; 3099 :     if (ID == NULL)

	cmp	DWORD PTR _ID$[ebp], 0
	jne	SHORT $LN5@xmlRemoveR

; 3100 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlRemoveR
$LN5@xmlRemoveR:

; 3101 : 
; 3102 :     ref_list = xmlHashLookup(table, ID);

	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashLookup
	add	esp, 8
	mov	DWORD PTR _ref_list$[ebp], eax

; 3103 :     if(ref_list == NULL) {

	cmp	DWORD PTR _ref_list$[ebp], 0
	jne	SHORT $LN6@xmlRemoveR

; 3104 :         xmlFree(ID);

	mov	esi, esp
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3105 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlRemoveR
$LN6@xmlRemoveR:

; 3106 :     }
; 3107 : 
; 3108 :     /* At this point, ref_list refers to a list of references which
; 3109 :      * have the same key as the supplied attr. Our list of references
; 3110 :      * is ordered by reference address and we don't have that information
; 3111 :      * here to use when removing. We'll have to walk the list and
; 3112 :      * check for a matching attribute, when we find one stop the walk
; 3113 :      * and remove the entry.
; 3114 :      * The list is ordered by reference, so that means we don't have the
; 3115 :      * key. Passing the list and the reference to the walker means we
; 3116 :      * will have enough data to be able to remove the entry.
; 3117 :      */
; 3118 :     target.l = ref_list;

	mov	edx, DWORD PTR _ref_list$[ebp]
	mov	DWORD PTR _target$[ebp], edx

; 3119 :     target.ap = attr;

	mov	eax, DWORD PTR _attr$[ebp]
	mov	DWORD PTR _target$[ebp+4], eax

; 3120 : 
; 3121 :     /* Remove the supplied attr from our list */
; 3122 :     xmlListWalk(ref_list, xmlWalkRemoveRef, &target);

	lea	ecx, DWORD PTR _target$[ebp]
	push	ecx
	push	OFFSET _xmlWalkRemoveRef
	mov	edx, DWORD PTR _ref_list$[ebp]
	push	edx
	call	_xmlListWalk
	add	esp, 12					; 0000000cH

; 3123 : 
; 3124 :     /*If the list is empty then remove the list entry in the hash */
; 3125 :     if (xmlListEmpty(ref_list))

	mov	eax, DWORD PTR _ref_list$[ebp]
	push	eax
	call	_xmlListEmpty
	add	esp, 4
	test	eax, eax
	je	SHORT $LN7@xmlRemoveR

; 3126 :         xmlHashUpdateEntry(table, ID, NULL, xmlFreeRefTableEntry);

	push	OFFSET _xmlFreeRefTableEntry
	push	0
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_xmlHashUpdateEntry
	add	esp, 16					; 00000010H
$LN7@xmlRemoveR:

; 3127 :     xmlFree(ID);

	mov	esi, esp
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3128 :     return(0);

	xor	eax, eax
$LN1@xmlRemoveR:

; 3129 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@xmlRemoveR
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@xmlRemoveR:
	DD	1
	DD	$LN10@xmlRemoveR
$LN10@xmlRemoveR:
	DD	-24					; ffffffe8H
	DD	8
	DD	$LN9@xmlRemoveR
$LN9@xmlRemoveR:
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_xmlRemoveRef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlIsRef
_TEXT	SEGMENT
_attrDecl$1 = -4					; size = 4
_doc$ = 8						; size = 4
_elem$ = 12						; size = 4
_attr$ = 16						; size = 4
_xmlIsRef PROC						; COMDAT

; 3045 : xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3046 :     if (attr == NULL)

	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN2@xmlIsRef

; 3047 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlIsRef
$LN2@xmlIsRef:

; 3048 :     if (doc == NULL) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN3@xmlIsRef

; 3049 :         doc = attr->doc;

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _doc$[ebp], ecx

; 3050 : 	if (doc == NULL) return(0);

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN3@xmlIsRef
	xor	eax, eax
	jmp	$LN1@xmlIsRef
$LN3@xmlIsRef:

; 3051 :     }
; 3052 : 
; 3053 :     if ((doc->intSubset == NULL) && (doc->extSubset == NULL)) {

	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN5@xmlIsRef
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	jne	SHORT $LN5@xmlIsRef

; 3054 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlIsRef
	jmp	$LN6@xmlIsRef
$LN5@xmlIsRef:

; 3055 :     } else if (doc->type == XML_HTML_DOCUMENT_NODE) {

	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+4], 13			; 0000000dH
	jne	SHORT $LN7@xmlIsRef

; 3056 :         /* TODO @@@ */
; 3057 :         return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlIsRef

; 3058 :     } else {

	jmp	SHORT $LN6@xmlIsRef
$LN7@xmlIsRef:

; 3059 :         xmlAttributePtr attrDecl;
; 3060 : 
; 3061 :         if (elem == NULL) return(0);

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN9@xmlIsRef
	xor	eax, eax
	jmp	SHORT $LN1@xmlIsRef
$LN9@xmlIsRef:

; 3062 :         attrDecl = xmlGetDtdAttrDesc(doc->intSubset, elem->name, attr->name);

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$1[ebp], eax

; 3063 :         if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$1[ebp], 0
	jne	SHORT $LN10@xmlIsRef
	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN10@xmlIsRef

; 3064 :             attrDecl = xmlGetDtdAttrDesc(doc->extSubset,

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$1[ebp], eax
$LN10@xmlIsRef:

; 3065 : 		                         elem->name, attr->name);
; 3066 : 
; 3067 : 	if ((attrDecl != NULL) &&

	cmp	DWORD PTR _attrDecl$1[ebp], 0
	je	SHORT $LN6@xmlIsRef
	mov	eax, DWORD PTR _attrDecl$1[ebp]
	cmp	DWORD PTR [eax+40], 3
	je	SHORT $LN12@xmlIsRef
	mov	ecx, DWORD PTR _attrDecl$1[ebp]
	cmp	DWORD PTR [ecx+40], 4
	jne	SHORT $LN6@xmlIsRef
$LN12@xmlIsRef:

; 3068 : 	    (attrDecl->atype == XML_ATTRIBUTE_IDREF ||
; 3069 : 	     attrDecl->atype == XML_ATTRIBUTE_IDREFS))
; 3070 : 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlIsRef
$LN6@xmlIsRef:

; 3071 :     }
; 3072 :     return(0);

	xor	eax, eax
$LN1@xmlIsRef:

; 3073 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlIsRef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeRefTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_xmlFreeRefTable PROC					; COMDAT

; 3028 : xmlFreeRefTable(xmlRefTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 3029 :     xmlHashFree(table, xmlFreeRefTableEntry);

	push	OFFSET _xmlFreeRefTableEntry
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashFree
	add	esp, 8

; 3030 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeRefTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlAddRef
_TEXT	SEGMENT
_ref_list$ = -12					; size = 4
_table$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_value$ = 16						; size = 4
_attr$ = 20						; size = 4
_xmlAddRef PROC						; COMDAT

; 2931 :     xmlAttrPtr attr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2932 :     xmlRefPtr ret;
; 2933 :     xmlRefTablePtr table;
; 2934 :     xmlListPtr ref_list;
; 2935 : 
; 2936 :     if (doc == NULL) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlAddRef

; 2937 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddRef
$LN2@xmlAddRef:

; 2938 :     }
; 2939 :     if (value == NULL) {

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN3@xmlAddRef

; 2940 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddRef
$LN3@xmlAddRef:

; 2941 :     }
; 2942 :     if (attr == NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN4@xmlAddRef

; 2943 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddRef
$LN4@xmlAddRef:

; 2944 :     }
; 2945 : 
; 2946 :     /*
; 2947 :      * Create the Ref table if needed.
; 2948 :      */
; 2949 :     table = (xmlRefTablePtr) doc->refs;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _table$[ebp], ecx

; 2950 :     if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN5@xmlAddRef

; 2951 :         doc->refs = table = xmlHashCreateDict(0, doc->dict);

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	push	0
	call	_xmlHashCreateDict
	add	esp, 8
	mov	DWORD PTR _table$[ebp], eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+68], edx
$LN5@xmlAddRef:

; 2952 :     }
; 2953 :     if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN6@xmlAddRef

; 2954 : 	xmlVErrMemory(ctxt,

	push	OFFSET ??_C@_0CD@JKLLCBGN@xmlAddRef?3?5Table?5creation?5faile@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlVErrMemory
	add	esp, 8

; 2955 :             "xmlAddRef: Table creation failed!\n");
; 2956 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddRef
$LN6@xmlAddRef:

; 2957 :     }
; 2958 : 
; 2959 :     ret = (xmlRefPtr) xmlMalloc(sizeof(xmlRef));

	mov	esi, esp
	push	20					; 00000014H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 2960 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN7@xmlAddRef

; 2961 : 	xmlVErrMemory(ctxt, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlVErrMemory
	add	esp, 8

; 2962 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddRef
$LN7@xmlAddRef:

; 2963 :     }
; 2964 : 
; 2965 :     /*
; 2966 :      * fill the structure.
; 2967 :      */
; 2968 :     ret->value = xmlStrdup(value);

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2969 :     if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN8@xmlAddRef
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN8@xmlAddRef

; 2970 : 	/*
; 2971 : 	 * Operating in streaming mode, attr is gonna disapear
; 2972 : 	 */
; 2973 : 	ret->name = xmlStrdup(attr->name);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+12], eax

; 2974 : 	ret->attr = NULL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+8], 0

; 2975 :     } else {

	jmp	SHORT $LN9@xmlAddRef
$LN8@xmlAddRef:

; 2976 : 	ret->name = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 2977 : 	ret->attr = attr;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN9@xmlAddRef:

; 2978 :     }
; 2979 :     ret->lineno = xmlGetLineNo(attr->parent);

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_xmlGetLineNo
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+16], eax

; 2980 : 
; 2981 :     /* To add a reference :-
; 2982 :      * References are maintained as a list of references,
; 2983 :      * Lookup the entry, if no entry create new nodelist
; 2984 :      * Add the owning node to the NodeList
; 2985 :      * Return the ref
; 2986 :      */
; 2987 : 
; 2988 :     if (NULL == (ref_list = xmlHashLookup(table, value))) {

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashLookup
	add	esp, 8
	mov	DWORD PTR _ref_list$[ebp], eax
	cmp	DWORD PTR _ref_list$[ebp], 0
	jne	SHORT $LN10@xmlAddRef

; 2989 :         if (NULL == (ref_list = xmlListCreate(xmlFreeRef, xmlDummyCompare))) {

	push	OFFSET _xmlDummyCompare
	push	OFFSET _xmlFreeRef
	call	_xmlListCreate
	add	esp, 8
	mov	DWORD PTR _ref_list$[ebp], eax
	cmp	DWORD PTR _ref_list$[ebp], 0
	jne	SHORT $LN11@xmlAddRef

; 2990 : 	    xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0CM@EILGCMCJ@xmlAddRef?3?5Reference?5list?5creat@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 2991 : 		    "xmlAddRef: Reference list creation failed!\n",
; 2992 : 		    NULL);
; 2993 : 	    goto failed;

	jmp	SHORT $failed$18
$LN11@xmlAddRef:

; 2994 :         }
; 2995 :         if (xmlHashAddEntry(table, value, ref_list) < 0) {

	mov	ecx, DWORD PTR _ref_list$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashAddEntry
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN10@xmlAddRef

; 2996 :             xmlListDelete(ref_list);

	mov	ecx, DWORD PTR _ref_list$[ebp]
	push	ecx
	call	_xmlListDelete
	add	esp, 4

; 2997 : 	    xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0CN@CLGHPEIK@xmlAddRef?3?5Reference?5list?5inser@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 2998 : 		    "xmlAddRef: Reference list insertion failed!\n",
; 2999 : 		    NULL);
; 3000 : 	    goto failed;

	jmp	SHORT $failed$18
$LN10@xmlAddRef:

; 3001 :         }
; 3002 :     }
; 3003 :     if (xmlListAppend(ref_list, ret) != 0) {

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ref_list$[ebp]
	push	eax
	call	_xmlListAppend
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@xmlAddRef

; 3004 : 	xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0CN@CLGHPEIK@xmlAddRef?3?5Reference?5list?5inser@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 3005 : 		    "xmlAddRef: Reference list insertion failed!\n",
; 3006 : 		    NULL);
; 3007 :         goto failed;

	jmp	SHORT $failed$18
$LN13@xmlAddRef:

; 3008 :     }
; 3009 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN1@xmlAddRef
$failed$18:

; 3010 : failed:
; 3011 :     if (ret != NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN14@xmlAddRef

; 3012 :         if (ret->value != NULL)

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN15@xmlAddRef

; 3013 : 	    xmlFree((char *)ret->value);

	mov	esi, esp
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN15@xmlAddRef:

; 3014 :         if (ret->name != NULL)

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN16@xmlAddRef

; 3015 : 	    xmlFree((char *)ret->name);

	mov	esi, esp
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@xmlAddRef:

; 3016 :         xmlFree(ret);

	mov	esi, esp
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@xmlAddRef:

; 3017 :     }
; 3018 :     return(NULL);

	xor	eax, eax
$LN1@xmlAddRef:

; 3019 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlAddRef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlRemoveID
_TEXT	SEGMENT
_ID$ = -12						; size = 4
_id$ = -8						; size = 4
_table$ = -4						; size = 4
_doc$ = 8						; size = 4
_attr$ = 12						; size = 4
_xmlRemoveID PROC					; COMDAT

; 2765 : xmlRemoveID(xmlDocPtr doc, xmlAttrPtr attr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2766 :     xmlIDTablePtr table;
; 2767 :     xmlIDPtr id;
; 2768 :     xmlChar *ID;
; 2769 : 
; 2770 :     if (doc == NULL) return(-1);

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlRemoveI
	or	eax, -1
	jmp	$LN1@xmlRemoveI
$LN2@xmlRemoveI:

; 2771 :     if (attr == NULL) return(-1);

	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN3@xmlRemoveI
	or	eax, -1
	jmp	$LN1@xmlRemoveI
$LN3@xmlRemoveI:

; 2772 : 
; 2773 :     table = (xmlIDTablePtr) doc->ids;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _table$[ebp], ecx

; 2774 :     if (table == NULL)

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN4@xmlRemoveI

; 2775 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlRemoveI
$LN4@xmlRemoveI:

; 2776 : 
; 2777 :     ID = xmlNodeListGetString(doc, attr->children, 1);

	push	1
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ID$[ebp], eax

; 2778 :     if (ID == NULL)

	cmp	DWORD PTR _ID$[ebp], 0
	jne	SHORT $LN5@xmlRemoveI

; 2779 :         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlRemoveI
$LN5@xmlRemoveI:

; 2780 : 
; 2781 :     id = xmlHashLookup(table, ID);

	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashLookup
	add	esp, 8
	mov	DWORD PTR _id$[ebp], eax

; 2782 :     if (id == NULL || id->attr != attr) {

	cmp	DWORD PTR _id$[ebp], 0
	je	SHORT $LN7@xmlRemoveI
	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR _attr$[ebp]
	je	SHORT $LN6@xmlRemoveI
$LN7@xmlRemoveI:

; 2783 :         xmlFree(ID);

	mov	esi, esp
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2784 :         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlRemoveI
$LN6@xmlRemoveI:

; 2785 :     }
; 2786 : 
; 2787 :     xmlHashRemoveEntry(table, ID, xmlFreeIDTableEntry);

	push	OFFSET _xmlFreeIDTableEntry
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_xmlHashRemoveEntry
	add	esp, 12					; 0000000cH

; 2788 :     xmlFree(ID);

	mov	esi, esp
	mov	eax, DWORD PTR _ID$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2789 :     attr->atype = 0;

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 2790 :     return(0);

	xor	eax, eax
$LN1@xmlRemoveI:

; 2791 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlRemoveID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlIsID
_TEXT	SEGMENT
tv172 = -180						; size = 4
tv157 = -176						; size = 4
tv83 = -172						; size = 4
tv250 = -168						; size = 4
tv245 = -162						; size = 1
tv238 = -161						; size = 1
tv233 = -160						; size = 4
tv235 = -156						; size = 4
tv76 = -152						; size = 4
tv228 = -148						; size = 4
tv223 = -142						; size = 1
tv216 = -141						; size = 1
tv211 = -140						; size = 4
tv213 = -136						; size = 4
_fullattrname$1 = -132					; size = 4
_fullelemname$2 = -128					; size = 4
_fattr$3 = -120						; size = 50
_felem$4 = -60						; size = 50
_attrDecl$5 = -4					; size = 4
_doc$ = 8						; size = 4
_elem$ = 12						; size = 4
_attr$ = 16						; size = 4
_xmlIsID PROC						; COMDAT

; 2704 : xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 180				; 000000b4H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-180]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2705 :     if ((attr == NULL) || (attr->name == NULL)) return(0);

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN3@xmlIsID
	mov	eax, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN2@xmlIsID
$LN3@xmlIsID:
	xor	eax, eax
	jmp	$LN1@xmlIsID
$LN2@xmlIsID:

; 2706 :     if ((attr->ns != NULL) && (attr->ns->prefix != NULL) &&
; 2707 :         (!strcmp((char *) attr->name, "id")) &&

	mov	ecx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN4@xmlIsID
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+12], 0
	je	$LN4@xmlIsID
	mov	DWORD PTR tv213[ebp], OFFSET ??_C@_02EGCJHIOB@id@
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR tv211[ebp], edx
$LL25@xmlIsID:
	mov	eax, DWORD PTR tv211[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv216[ebp], cl
	mov	edx, DWORD PTR tv213[ebp]
	cmp	cl, BYTE PTR [edx]
	jne	SHORT $LN26@xmlIsID
	cmp	BYTE PTR tv216[ebp], 0
	je	SHORT $LN27@xmlIsID
	mov	eax, DWORD PTR tv211[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv223[ebp], cl
	mov	edx, DWORD PTR tv213[ebp]
	cmp	cl, BYTE PTR [edx+1]
	jne	SHORT $LN26@xmlIsID
	add	DWORD PTR tv211[ebp], 2
	add	DWORD PTR tv213[ebp], 2
	cmp	BYTE PTR tv223[ebp], 0
	jne	SHORT $LL25@xmlIsID
$LN27@xmlIsID:
	mov	DWORD PTR tv228[ebp], 0
	jmp	SHORT $LN28@xmlIsID
$LN26@xmlIsID:
	sbb	eax, eax
	or	eax, 1
	mov	DWORD PTR tv228[ebp], eax
$LN28@xmlIsID:
	mov	ecx, DWORD PTR tv228[ebp]
	mov	DWORD PTR tv76[ebp], ecx
	cmp	DWORD PTR tv76[ebp], 0
	jne	$LN4@xmlIsID
	mov	DWORD PTR tv235[ebp], OFFSET ??_C@_03PJHHNEEI@xml@
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv233[ebp], ecx
$LL29@xmlIsID:
	mov	edx, DWORD PTR tv233[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv238[ebp], al
	mov	ecx, DWORD PTR tv235[ebp]
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $LN30@xmlIsID
	cmp	BYTE PTR tv238[ebp], 0
	je	SHORT $LN31@xmlIsID
	mov	edx, DWORD PTR tv233[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv245[ebp], al
	mov	ecx, DWORD PTR tv235[ebp]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN30@xmlIsID
	add	DWORD PTR tv233[ebp], 2
	add	DWORD PTR tv235[ebp], 2
	cmp	BYTE PTR tv245[ebp], 0
	jne	SHORT $LL29@xmlIsID
$LN31@xmlIsID:
	mov	DWORD PTR tv250[ebp], 0
	jmp	SHORT $LN32@xmlIsID
$LN30@xmlIsID:
	sbb	edx, edx
	or	edx, 1
	mov	DWORD PTR tv250[ebp], edx
$LN32@xmlIsID:
	mov	eax, DWORD PTR tv250[ebp]
	mov	DWORD PTR tv83[ebp], eax
	cmp	DWORD PTR tv83[ebp], 0
	jne	SHORT $LN4@xmlIsID

; 2708 :         (!strcmp((char *) attr->ns->prefix, "xml")))
; 2709 : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlIsID
$LN4@xmlIsID:

; 2710 :     if (doc == NULL) return(0);

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN5@xmlIsID
	xor	eax, eax
	jmp	$LN1@xmlIsID
$LN5@xmlIsID:

; 2711 :     if ((doc->intSubset == NULL) && (doc->extSubset == NULL) &&

	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN6@xmlIsID
	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+48], 0
	jne	SHORT $LN6@xmlIsID
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+4], 13			; 0000000dH
	je	SHORT $LN6@xmlIsID

; 2712 :         (doc->type != XML_HTML_DOCUMENT_NODE)) {
; 2713 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlIsID
	jmp	$LN7@xmlIsID
$LN6@xmlIsID:

; 2714 :     } else if (doc->type == XML_HTML_DOCUMENT_NODE) {

	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+4], 13			; 0000000dH
	jne	SHORT $LN8@xmlIsID

; 2715 :         if ((xmlStrEqual(BAD_CAST "id", attr->name)) ||

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_02EGCJHIOB@id@
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@xmlIsID
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_04MEMAJGDJ@name@
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@xmlIsID
	cmp	DWORD PTR _elem$[ebp], 0
	je	SHORT $LN11@xmlIsID
	push	OFFSET ??_C@_01MCMALHOG@a@
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@xmlIsID
$LN11@xmlIsID:

; 2716 : 	    ((xmlStrEqual(BAD_CAST "name", attr->name)) &&
; 2717 : 	    ((elem == NULL) || (xmlStrEqual(elem->name, BAD_CAST "a")))))
; 2718 : 	    return(1);

	mov	eax, 1
	jmp	$LN1@xmlIsID
$LN10@xmlIsID:

; 2719 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlIsID
	jmp	$LN7@xmlIsID
$LN8@xmlIsID:

; 2720 :     } else if (elem == NULL) {

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN13@xmlIsID

; 2721 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlIsID

; 2722 :     } else {

	jmp	$LN7@xmlIsID
$LN13@xmlIsID:

; 2723 : 	xmlAttributePtr attrDecl = NULL;

	mov	DWORD PTR _attrDecl$5[ebp], 0

; 2724 : 
; 2725 : 	xmlChar felem[50], fattr[50];
; 2726 : 	xmlChar *fullelemname, *fullattrname;
; 2727 : 
; 2728 : 	fullelemname = (elem->ns != NULL && elem->ns->prefix != NULL) ?

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN21@xmlIsID
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN21@xmlIsID
	push	50					; 00000032H
	lea	edx, DWORD PTR _felem$4[ebp]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv157[ebp], eax
	jmp	SHORT $LN22@xmlIsID
$LN21@xmlIsID:
	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv157[ebp], eax
$LN22@xmlIsID:
	mov	ecx, DWORD PTR tv157[ebp]
	mov	DWORD PTR _fullelemname$2[ebp], ecx

; 2729 : 	    xmlBuildQName(elem->name, elem->ns->prefix, felem, 50) :
; 2730 : 	    (xmlChar *)elem->name;
; 2731 : 
; 2732 : 	fullattrname = (attr->ns != NULL && attr->ns->prefix != NULL) ?

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN23@xmlIsID
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN23@xmlIsID
	push	50					; 00000032H
	lea	edx, DWORD PTR _fattr$3[ebp]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlBuildQName
	add	esp, 16					; 00000010H
	mov	DWORD PTR tv172[ebp], eax
	jmp	SHORT $LN24@xmlIsID
$LN23@xmlIsID:
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR tv172[ebp], eax
$LN24@xmlIsID:
	mov	ecx, DWORD PTR tv172[ebp]
	mov	DWORD PTR _fullattrname$1[ebp], ecx

; 2733 : 	    xmlBuildQName(attr->name, attr->ns->prefix, fattr, 50) :
; 2734 : 	    (xmlChar *)attr->name;
; 2735 : 
; 2736 : 	if (fullelemname != NULL && fullattrname != NULL) {

	cmp	DWORD PTR _fullelemname$2[ebp], 0
	je	SHORT $LN15@xmlIsID
	cmp	DWORD PTR _fullattrname$1[ebp], 0
	je	SHORT $LN15@xmlIsID

; 2737 : 	    attrDecl = xmlGetDtdAttrDesc(doc->intSubset, fullelemname,

	mov	edx, DWORD PTR _fullattrname$1[ebp]
	push	edx
	mov	eax, DWORD PTR _fullelemname$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$5[ebp], eax

; 2738 : 		                         fullattrname);
; 2739 : 	    if ((attrDecl == NULL) && (doc->extSubset != NULL))

	cmp	DWORD PTR _attrDecl$5[ebp], 0
	jne	SHORT $LN15@xmlIsID
	mov	eax, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN15@xmlIsID

; 2740 : 		attrDecl = xmlGetDtdAttrDesc(doc->extSubset, fullelemname,

	mov	ecx, DWORD PTR _fullattrname$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _fullelemname$2[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlGetDtdAttrDesc
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _attrDecl$5[ebp], eax
$LN15@xmlIsID:

; 2741 : 					     fullattrname);
; 2742 : 	}
; 2743 : 
; 2744 : 	if ((fullattrname != fattr) && (fullattrname != attr->name))

	lea	edx, DWORD PTR _fattr$3[ebp]
	cmp	DWORD PTR _fullattrname$1[ebp], edx
	je	SHORT $LN17@xmlIsID
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR _fullattrname$1[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	je	SHORT $LN17@xmlIsID

; 2745 : 	    xmlFree(fullattrname);

	mov	esi, esp
	mov	edx, DWORD PTR _fullattrname$1[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@xmlIsID:

; 2746 : 	if ((fullelemname != felem) && (fullelemname != elem->name))

	lea	eax, DWORD PTR _felem$4[ebp]
	cmp	DWORD PTR _fullelemname$2[ebp], eax
	je	SHORT $LN18@xmlIsID
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR _fullelemname$2[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN18@xmlIsID

; 2747 : 	    xmlFree(fullelemname);

	mov	esi, esp
	mov	eax, DWORD PTR _fullelemname$2[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@xmlIsID:

; 2748 : 
; 2749 :         if ((attrDecl != NULL) && (attrDecl->atype == XML_ATTRIBUTE_ID))

	cmp	DWORD PTR _attrDecl$5[ebp], 0
	je	SHORT $LN7@xmlIsID
	mov	ecx, DWORD PTR _attrDecl$5[ebp]
	cmp	DWORD PTR [ecx+40], 2
	jne	SHORT $LN7@xmlIsID

; 2750 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlIsID
$LN7@xmlIsID:

; 2751 :     }
; 2752 :     return(0);

	xor	eax, eax
$LN1@xmlIsID:

; 2753 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@xmlIsID
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 180				; 000000b4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN36@xmlIsID:
	DD	2
	DD	$LN35@xmlIsID
$LN35@xmlIsID:
	DD	-60					; ffffffc4H
	DD	50					; 00000032H
	DD	$LN33@xmlIsID
	DD	-120					; ffffff88H
	DD	50					; 00000032H
	DD	$LN34@xmlIsID
$LN34@xmlIsID:
	DB	102					; 00000066H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	0
$LN33@xmlIsID:
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
_xmlIsID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlGetID
_TEXT	SEGMENT
_id$ = -8						; size = 4
_table$ = -4						; size = 4
_doc$ = 8						; size = 4
_ID$ = 12						; size = 4
_xmlGetID PROC						; COMDAT

; 2803 : xmlGetID(xmlDocPtr doc, const xmlChar *ID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2804 :     xmlIDTablePtr table;
; 2805 :     xmlIDPtr id;
; 2806 : 
; 2807 :     if (doc == NULL) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlGetID

; 2808 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlGetID
$LN2@xmlGetID:

; 2809 :     }
; 2810 : 
; 2811 :     if (ID == NULL) {

	cmp	DWORD PTR _ID$[ebp], 0
	jne	SHORT $LN3@xmlGetID

; 2812 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlGetID
$LN3@xmlGetID:

; 2813 :     }
; 2814 : 
; 2815 :     table = (xmlIDTablePtr) doc->ids;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _table$[ebp], ecx

; 2816 :     if (table == NULL)

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN4@xmlGetID

; 2817 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlGetID
$LN4@xmlGetID:

; 2818 : 
; 2819 :     id = xmlHashLookup(table, ID);

	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashLookup
	add	esp, 8
	mov	DWORD PTR _id$[ebp], eax

; 2820 :     if (id == NULL)

	cmp	DWORD PTR _id$[ebp], 0
	jne	SHORT $LN5@xmlGetID

; 2821 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlGetID
$LN5@xmlGetID:

; 2822 :     if (id->attr == NULL) {

	mov	ecx, DWORD PTR _id$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN6@xmlGetID

; 2823 : 	/*
; 2824 : 	 * We are operating on a stream, return a well known reference
; 2825 : 	 * since the attribute node doesn't exist anymore
; 2826 : 	 */
; 2827 : 	return((xmlAttrPtr) doc);

	mov	eax, DWORD PTR _doc$[ebp]
	jmp	SHORT $LN1@xmlGetID
$LN6@xmlGetID:

; 2828 :     }
; 2829 :     return(id->attr);

	mov	edx, DWORD PTR _id$[ebp]
	mov	eax, DWORD PTR [edx+8]
$LN1@xmlGetID:

; 2830 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlGetID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeIDTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_xmlFreeIDTable PROC					; COMDAT

; 2686 : xmlFreeIDTable(xmlIDTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2687 :     xmlHashFree(table, xmlFreeIDTableEntry);

	push	OFFSET _xmlFreeIDTableEntry
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashFree
	add	esp, 8

; 2688 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeIDTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlAddID
_TEXT	SEGMENT
_table$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_doc$ = 12						; size = 4
_value$ = 16						; size = 4
_attr$ = 20						; size = 4
_xmlAddID PROC						; COMDAT

; 2603 :          xmlAttrPtr attr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2604 :     xmlIDPtr ret;
; 2605 :     xmlIDTablePtr table;
; 2606 : 
; 2607 :     if (doc == NULL) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlAddID

; 2608 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddID
$LN2@xmlAddID:

; 2609 :     }
; 2610 :     if (value == NULL) {

	cmp	DWORD PTR _value$[ebp], 0
	jne	SHORT $LN3@xmlAddID

; 2611 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddID
$LN3@xmlAddID:

; 2612 :     }
; 2613 :     if (attr == NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN4@xmlAddID

; 2614 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddID
$LN4@xmlAddID:

; 2615 :     }
; 2616 : 
; 2617 :     /*
; 2618 :      * Create the ID table if needed.
; 2619 :      */
; 2620 :     table = (xmlIDTablePtr) doc->ids;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _table$[ebp], ecx

; 2621 :     if (table == NULL)  {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN5@xmlAddID

; 2622 :         doc->ids = table = xmlHashCreateDict(0, doc->dict);

	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	push	0
	call	_xmlHashCreateDict
	add	esp, 8
	mov	DWORD PTR _table$[ebp], eax
	mov	ecx, DWORD PTR _doc$[ebp]
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+64], edx
$LN5@xmlAddID:

; 2623 :     }
; 2624 :     if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN6@xmlAddID

; 2625 : 	xmlVErrMemory(ctxt,

	push	OFFSET ??_C@_0CC@HPFDMDEK@xmlAddID?3?5Table?5creation?5failed@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlVErrMemory
	add	esp, 8

; 2626 : 		"xmlAddID: Table creation failed!\n");
; 2627 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddID
$LN6@xmlAddID:

; 2628 :     }
; 2629 : 
; 2630 :     ret = (xmlIDPtr) xmlMalloc(sizeof(xmlID));

	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 2631 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN7@xmlAddID

; 2632 : 	xmlVErrMemory(ctxt, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlVErrMemory
	add	esp, 8

; 2633 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddID
$LN7@xmlAddID:

; 2634 :     }
; 2635 : 
; 2636 :     /*
; 2637 :      * fill the structure.
; 2638 :      */
; 2639 :     ret->value = xmlStrdup(value);

	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 2640 :     ret->doc = doc;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2641 :     if ((ctxt != NULL) && (ctxt->vstateNr != 0)) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN8@xmlAddID
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN8@xmlAddID

; 2642 : 	/*
; 2643 : 	 * Operating in streaming mode, attr is gonna disapear
; 2644 : 	 */
; 2645 : 	if (doc->dict != NULL)

	mov	edx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [edx+80], 0
	je	SHORT $LN10@xmlAddID

; 2646 : 	    ret->name = xmlDictLookup(doc->dict, attr->name, -1);

	push	-1
	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+80]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN11@xmlAddID
$LN10@xmlAddID:

; 2647 : 	else
; 2648 : 	    ret->name = xmlStrdup(attr->name);

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN11@xmlAddID:

; 2649 : 	ret->attr = NULL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], 0

; 2650 :     } else {

	jmp	SHORT $LN9@xmlAddID
$LN8@xmlAddID:

; 2651 : 	ret->attr = attr;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 2652 : 	ret->name = NULL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN9@xmlAddID:

; 2653 :     }
; 2654 :     ret->lineno = xmlGetLineNo(attr->parent);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlGetLineNo
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+16], eax

; 2655 : 
; 2656 :     if (xmlHashAddEntry(table, value, ret) < 0) {

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _table$[ebp]
	push	edx
	call	_xmlHashAddEntry
	add	esp, 12					; 0000000cH
	test	eax, eax
	jge	SHORT $LN12@xmlAddID

; 2657 : #ifdef LIBXML_VALID_ENABLED
; 2658 : 	/*
; 2659 : 	 * The id is already defined in this DTD.
; 2660 : 	 */
; 2661 : 	if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN13@xmlAddID

; 2662 : 	    xmlErrValidNode(ctxt, attr->parent, XML_DTD_ID_REDEFINED,

	push	0
	push	0
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	push	OFFSET ??_C@_0BH@JKIFIOPN@ID?5?$CFs?5already?5defined?6@
	push	513					; 00000201H
	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH
$LN13@xmlAddID:

; 2663 : 			    "ID %s already defined\n", value, NULL, NULL);
; 2664 : 	}
; 2665 : #endif /* LIBXML_VALID_ENABLED */
; 2666 : 	xmlFreeID(ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlFreeID
	add	esp, 4

; 2667 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlAddID
$LN12@xmlAddID:

; 2668 :     }
; 2669 :     if (attr != NULL)

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN14@xmlAddID

; 2670 : 	attr->atype = XML_ATTRIBUTE_ID;

	mov	edx, DWORD PTR _attr$[ebp]
	mov	DWORD PTR [edx+40], 2
$LN14@xmlAddID:

; 2671 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlAddID:

; 2672 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlAddID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpAttributeDecl
_TEXT	SEGMENT
tv150 = -8						; size = 4
tv84 = -4						; size = 4
_buf$ = 8						; size = 4
_attr$ = 12						; size = 4
_xmlDumpAttributeDecl PROC				; COMDAT

; 2227 : xmlDumpAttributeDecl(xmlBufferPtr buf, xmlAttributePtr attr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2228 :     if ((buf == NULL) || (attr == NULL))

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN7@xmlDumpAtt
	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN6@xmlDumpAtt
$LN7@xmlDumpAtt:

; 2229 :         return;

	jmp	$LN1@xmlDumpAtt
$LN6@xmlDumpAtt:

; 2230 :     xmlBufferWriteChar(buf, "<!ATTLIST ");

	push	OFFSET ??_C@_0L@NDHICKFH@?$DM?$CBATTLIST?5@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8

; 2231 :     xmlBufferWriteCHAR(buf, attr->elem);

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 2232 :     xmlBufferWriteChar(buf, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2233 :     if (attr->prefix != NULL) {

	mov	edx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [edx+56], 0
	je	SHORT $LN8@xmlDumpAtt

; 2234 : 	xmlBufferWriteCHAR(buf, attr->prefix);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 2235 : 	xmlBufferWriteChar(buf, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8
$LN8@xmlDumpAtt:

; 2236 :     }
; 2237 :     xmlBufferWriteCHAR(buf, attr->name);

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 2238 :     switch (attr->atype) {

	mov	ecx, DWORD PTR _attr$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	mov	DWORD PTR tv84[ebp], edx
	mov	eax, DWORD PTR tv84[ebp]
	sub	eax, 1
	mov	DWORD PTR tv84[ebp], eax
	cmp	DWORD PTR tv84[ebp], 9
	ja	$LN19@xmlDumpAtt
	mov	ecx, DWORD PTR tv84[ebp]
	jmp	DWORD PTR $LN27@xmlDumpAtt[ecx*4]
$LN9@xmlDumpAtt:

; 2239 : 	case XML_ATTRIBUTE_CDATA:
; 2240 : 	    xmlBufferWriteChar(buf, " CDATA");

	push	OFFSET ??_C@_06CIOOFICG@?5CDATA@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2241 : 	    break;

	jmp	$LN2@xmlDumpAtt
$LN10@xmlDumpAtt:

; 2242 : 	case XML_ATTRIBUTE_ID:
; 2243 : 	    xmlBufferWriteChar(buf, " ID");

	push	OFFSET ??_C@_03JFNHLDJD@?5ID@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8

; 2244 : 	    break;

	jmp	$LN2@xmlDumpAtt
$LN11@xmlDumpAtt:

; 2245 : 	case XML_ATTRIBUTE_IDREF:
; 2246 : 	    xmlBufferWriteChar(buf, " IDREF");

	push	OFFSET ??_C@_06JJHMNMLB@?5IDREF@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2247 : 	    break;

	jmp	$LN2@xmlDumpAtt
$LN12@xmlDumpAtt:

; 2248 : 	case XML_ATTRIBUTE_IDREFS:
; 2249 : 	    xmlBufferWriteChar(buf, " IDREFS");

	push	OFFSET ??_C@_07CNGJPBFB@?5IDREFS@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2250 : 	    break;

	jmp	$LN2@xmlDumpAtt
$LN13@xmlDumpAtt:

; 2251 : 	case XML_ATTRIBUTE_ENTITY:
; 2252 : 	    xmlBufferWriteChar(buf, " ENTITY");

	push	OFFSET ??_C@_07GLIJGNMP@?5ENTITY@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8

; 2253 : 	    break;

	jmp	$LN2@xmlDumpAtt
$LN14@xmlDumpAtt:

; 2254 : 	case XML_ATTRIBUTE_ENTITIES:
; 2255 : 	    xmlBufferWriteChar(buf, " ENTITIES");

	push	OFFSET ??_C@_09MILPKLMO@?5ENTITIES@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2256 : 	    break;

	jmp	$LN2@xmlDumpAtt
$LN15@xmlDumpAtt:

; 2257 : 	case XML_ATTRIBUTE_NMTOKEN:
; 2258 : 	    xmlBufferWriteChar(buf, " NMTOKEN");

	push	OFFSET ??_C@_08JLMONKHB@?5NMTOKEN@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2259 : 	    break;

	jmp	SHORT $LN2@xmlDumpAtt
$LN16@xmlDumpAtt:

; 2260 : 	case XML_ATTRIBUTE_NMTOKENS:
; 2261 : 	    xmlBufferWriteChar(buf, " NMTOKENS");

	push	OFFSET ??_C@_09LGAPIBOH@?5NMTOKENS@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8

; 2262 : 	    break;

	jmp	SHORT $LN2@xmlDumpAtt
$LN17@xmlDumpAtt:

; 2263 : 	case XML_ATTRIBUTE_ENUMERATION:
; 2264 : 	    xmlBufferWriteChar(buf, " (");

	push	OFFSET ??_C@_02GFKOMOKH@?5?$CI@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2265 : 	    xmlDumpEnumeration(buf, attr->tree);

	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlDumpEnumeration
	add	esp, 8

; 2266 : 	    break;

	jmp	SHORT $LN2@xmlDumpAtt
$LN18@xmlDumpAtt:

; 2267 : 	case XML_ATTRIBUTE_NOTATION:
; 2268 : 	    xmlBufferWriteChar(buf, " NOTATION (");

	push	OFFSET ??_C@_0M@IGKIMAHJ@?5NOTATION?5?$CI@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2269 : 	    xmlDumpEnumeration(buf, attr->tree);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlDumpEnumeration
	add	esp, 8

; 2270 : 	    break;

	jmp	SHORT $LN2@xmlDumpAtt
$LN19@xmlDumpAtt:

; 2271 : 	default:
; 2272 : 	    xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0DD@NLJCGIHL@Internal?3?5ATTRIBUTE?5struct?5corr@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H
$LN2@xmlDumpAtt:

; 2273 : 		    "Internal: ATTRIBUTE struct corrupted invalid type\n",
; 2274 : 		    NULL);
; 2275 :     }
; 2276 :     switch (attr->def) {

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR tv150[ebp], ecx
	mov	edx, DWORD PTR tv150[ebp]
	sub	edx, 1
	mov	DWORD PTR tv150[ebp], edx
	cmp	DWORD PTR tv150[ebp], 3
	ja	SHORT $LN24@xmlDumpAtt
	mov	eax, DWORD PTR tv150[ebp]
	jmp	DWORD PTR $LN28@xmlDumpAtt[eax*4]
$LN20@xmlDumpAtt:

; 2277 : 	case XML_ATTRIBUTE_NONE:
; 2278 : 	    break;

	jmp	SHORT $LN4@xmlDumpAtt
$LN21@xmlDumpAtt:

; 2279 : 	case XML_ATTRIBUTE_REQUIRED:
; 2280 : 	    xmlBufferWriteChar(buf, " #REQUIRED");

	push	OFFSET ??_C@_0L@IEBFJPBC@?5?$CDREQUIRED@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2281 : 	    break;

	jmp	SHORT $LN4@xmlDumpAtt
$LN22@xmlDumpAtt:

; 2282 : 	case XML_ATTRIBUTE_IMPLIED:
; 2283 : 	    xmlBufferWriteChar(buf, " #IMPLIED");

	push	OFFSET ??_C@_09GOIPIIGC@?5?$CDIMPLIED@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2284 : 	    break;

	jmp	SHORT $LN4@xmlDumpAtt
$LN23@xmlDumpAtt:

; 2285 : 	case XML_ATTRIBUTE_FIXED:
; 2286 : 	    xmlBufferWriteChar(buf, " #FIXED");

	push	OFFSET ??_C@_07PNOBFAOP@?5?$CDFIXED@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8

; 2287 : 	    break;

	jmp	SHORT $LN4@xmlDumpAtt
$LN24@xmlDumpAtt:

; 2288 : 	default:
; 2289 : 	    xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0DC@EJJFJDDL@Internal?3?5ATTRIBUTE?5struct?5corr@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H
$LN4@xmlDumpAtt:

; 2290 : 		    "Internal: ATTRIBUTE struct corrupted invalid def\n",
; 2291 : 		    NULL);
; 2292 :     }
; 2293 :     if (attr->defaultValue != NULL) {

	mov	ecx, DWORD PTR _attr$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN25@xmlDumpAtt

; 2294 : 	xmlBufferWriteChar(buf, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2295 : 	xmlBufferWriteQuotedString(buf, attr->defaultValue);

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteQuotedString
	add	esp, 8
$LN25@xmlDumpAtt:

; 2296 :     }
; 2297 :     xmlBufferWriteChar(buf, ">\n");

	push	OFFSET ??_C@_02NEKEAGPN@?$DO?6@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8
$LN1@xmlDumpAtt:

; 2298 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN27@xmlDumpAtt:
	DD	$LN9@xmlDumpAtt
	DD	$LN10@xmlDumpAtt
	DD	$LN11@xmlDumpAtt
	DD	$LN12@xmlDumpAtt
	DD	$LN13@xmlDumpAtt
	DD	$LN14@xmlDumpAtt
	DD	$LN15@xmlDumpAtt
	DD	$LN16@xmlDumpAtt
	DD	$LN17@xmlDumpAtt
	DD	$LN18@xmlDumpAtt
$LN28@xmlDumpAtt:
	DD	$LN20@xmlDumpAtt
	DD	$LN21@xmlDumpAtt
	DD	$LN22@xmlDumpAtt
	DD	$LN23@xmlDumpAtt
_xmlDumpAttributeDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpAttributeTable
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_table$ = 12						; size = 4
_xmlDumpAttributeTable PROC				; COMDAT

; 2321 : xmlDumpAttributeTable(xmlBufferPtr buf, xmlAttributeTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2322 :     if ((buf == NULL) || (table == NULL))

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN3@xmlDumpAtt
	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN2@xmlDumpAtt
$LN3@xmlDumpAtt:

; 2323 :         return;

	jmp	SHORT $LN1@xmlDumpAtt
$LN2@xmlDumpAtt:

; 2324 :     xmlHashScan(table, xmlDumpAttributeDeclScan, buf);

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	OFFSET _xmlDumpAttributeDeclScan
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_xmlHashScan
	add	esp, 12					; 0000000cH
$LN1@xmlDumpAtt:

; 2325 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDumpAttributeTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeAttributeTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_xmlFreeAttributeTable PROC				; COMDAT

; 2164 : xmlFreeAttributeTable(xmlAttributeTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2165 :     xmlHashFree(table, xmlFreeAttributeTableEntry);

	push	OFFSET _xmlFreeAttributeTableEntry
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashFree
	add	esp, 8

; 2166 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeAttributeTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCopyAttributeTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_xmlCopyAttributeTable PROC				; COMDAT

; 2212 : xmlCopyAttributeTable(xmlAttributeTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2213 :     return((xmlAttributeTablePtr) xmlHashCopy(table, xmlCopyAttribute));

	push	OFFSET _xmlCopyAttribute
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashCopy
	add	esp, 8

; 2214 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlCopyAttributeTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlAddAttributeDecl
_TEXT	SEGMENT
tv74 = -24						; size = 4
_tmp$1 = -20						; size = 4
_dict$ = -16						; size = 4
_elemDef$ = -12						; size = 4
_table$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_dtd$ = 12						; size = 4
_elem$ = 16						; size = 4
_name$ = 20						; size = 4
_ns$ = 24						; size = 4
_type$ = 28						; size = 4
_def$ = 32						; size = 4
_defaultValue$ = 36					; size = 4
_tree$ = 40						; size = 4
_xmlAddAttributeDecl PROC				; COMDAT

; 1942 : 		    const xmlChar *defaultValue, xmlEnumerationPtr tree) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1943 :     xmlAttributePtr ret;
; 1944 :     xmlAttributeTablePtr table;
; 1945 :     xmlElementPtr elemDef;
; 1946 :     xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0

; 1947 : 
; 1948 :     if (dtd == NULL) {

	cmp	DWORD PTR _dtd$[ebp], 0
	jne	SHORT $LN6@xmlAddAttr

; 1949 : 	xmlFreeEnumeration(tree);

	mov	eax, DWORD PTR _tree$[ebp]
	push	eax
	call	_xmlFreeEnumeration
	add	esp, 4

; 1950 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddAttr
$LN6@xmlAddAttr:

; 1951 :     }
; 1952 :     if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN7@xmlAddAttr

; 1953 : 	xmlFreeEnumeration(tree);

	mov	ecx, DWORD PTR _tree$[ebp]
	push	ecx
	call	_xmlFreeEnumeration
	add	esp, 4

; 1954 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddAttr
$LN7@xmlAddAttr:

; 1955 :     }
; 1956 :     if (elem == NULL) {

	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN8@xmlAddAttr

; 1957 : 	xmlFreeEnumeration(tree);

	mov	edx, DWORD PTR _tree$[ebp]
	push	edx
	call	_xmlFreeEnumeration
	add	esp, 4

; 1958 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddAttr
$LN8@xmlAddAttr:

; 1959 :     }
; 1960 :     if (dtd->doc != NULL)

	mov	eax, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	SHORT $LN9@xmlAddAttr

; 1961 : 	dict = dtd->doc->dict;

	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR _dict$[ebp], eax
$LN9@xmlAddAttr:

; 1962 : 
; 1963 : #ifdef LIBXML_VALID_ENABLED
; 1964 :     /*
; 1965 :      * Check the type and possibly the default value.
; 1966 :      */
; 1967 :     switch (type) {

	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv74[ebp], ecx
	mov	edx, DWORD PTR tv74[ebp]
	sub	edx, 1
	mov	DWORD PTR tv74[ebp], edx
	cmp	DWORD PTR tv74[ebp], 9
	ja	SHORT $LN20@xmlAddAttr
	mov	eax, DWORD PTR tv74[ebp]
	jmp	DWORD PTR $LN47@xmlAddAttr[eax*4]
$LN10@xmlAddAttr:

; 1968 :         case XML_ATTRIBUTE_CDATA:
; 1969 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN11@xmlAddAttr:

; 1970 :         case XML_ATTRIBUTE_ID:
; 1971 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN12@xmlAddAttr:

; 1972 :         case XML_ATTRIBUTE_IDREF:
; 1973 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN13@xmlAddAttr:

; 1974 :         case XML_ATTRIBUTE_IDREFS:
; 1975 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN14@xmlAddAttr:

; 1976 :         case XML_ATTRIBUTE_ENTITY:
; 1977 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN15@xmlAddAttr:

; 1978 :         case XML_ATTRIBUTE_ENTITIES:
; 1979 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN16@xmlAddAttr:

; 1980 :         case XML_ATTRIBUTE_NMTOKEN:
; 1981 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN17@xmlAddAttr:

; 1982 :         case XML_ATTRIBUTE_NMTOKENS:
; 1983 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN18@xmlAddAttr:

; 1984 :         case XML_ATTRIBUTE_ENUMERATION:
; 1985 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN19@xmlAddAttr:

; 1986 :         case XML_ATTRIBUTE_NOTATION:
; 1987 : 	    break;

	jmp	SHORT $LN2@xmlAddAttr
$LN20@xmlAddAttr:

; 1988 : 	default:
; 1989 : 	    xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0DD@NLJCGIHL@Internal?3?5ATTRIBUTE?5struct?5corr@
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 1990 : 		    "Internal: ATTRIBUTE struct corrupted invalid type\n",
; 1991 : 		    NULL);
; 1992 : 	    xmlFreeEnumeration(tree);

	mov	edx, DWORD PTR _tree$[ebp]
	push	edx
	call	_xmlFreeEnumeration
	add	esp, 4

; 1993 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddAttr
$LN2@xmlAddAttr:

; 1994 :     }
; 1995 :     if ((defaultValue != NULL) &&

	cmp	DWORD PTR _defaultValue$[ebp], 0
	je	SHORT $LN21@xmlAddAttr
	mov	eax, DWORD PTR _defaultValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlValidateAttributeValueInternal
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	SHORT $LN21@xmlAddAttr

; 1996 :         (!xmlValidateAttributeValueInternal(dtd->doc, type, defaultValue))) {
; 1997 : 	xmlErrValidNode(ctxt, (xmlNodePtr) dtd, XML_DTD_ATTRIBUTE_DEFAULT,

	mov	ecx, DWORD PTR _defaultValue$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	push	OFFSET ??_C@_0CL@IHGCOODJ@Attribute?5?$CFs?5of?5?$CFs?3?5invalid?5def@
	push	500					; 000001f4H
	mov	ecx, DWORD PTR _dtd$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 1998 : 	                "Attribute %s of %s: invalid default value\n",
; 1999 : 	                elem, name, defaultValue);
; 2000 : 	defaultValue = NULL;

	mov	DWORD PTR _defaultValue$[ebp], 0

; 2001 : 	if (ctxt != NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN21@xmlAddAttr

; 2002 : 	    ctxt->valid = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+36], 0
$LN21@xmlAddAttr:

; 2003 :     }
; 2004 : #endif /* LIBXML_VALID_ENABLED */
; 2005 : 
; 2006 :     /*
; 2007 :      * Check first that an attribute defined in the external subset wasn't
; 2008 :      * already defined in the internal subset
; 2009 :      */
; 2010 :     if ((dtd->doc != NULL) && (dtd->doc->extSubset == dtd) &&
; 2011 : 	(dtd->doc->intSubset != NULL) &&

	mov	ecx, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN23@xmlAddAttr
	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, DWORD PTR _dtd$[ebp]
	jne	SHORT $LN23@xmlAddAttr
	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+32]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN23@xmlAddAttr
	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+44]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN23@xmlAddAttr

; 2012 : 	(dtd->doc->intSubset->attributes != NULL)) {
; 2013 :         ret = xmlHashLookup3(dtd->doc->intSubset->attributes, name, ns, elem);

	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	call	_xmlHashLookup3
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ret$[ebp], eax

; 2014 : 	if (ret != NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN23@xmlAddAttr

; 2015 : 	    xmlFreeEnumeration(tree);

	mov	edx, DWORD PTR _tree$[ebp]
	push	edx
	call	_xmlFreeEnumeration
	add	esp, 4

; 2016 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddAttr
$LN23@xmlAddAttr:

; 2017 : 	}
; 2018 :     }
; 2019 : 
; 2020 :     /*
; 2021 :      * Create the Attribute table if needed.
; 2022 :      */
; 2023 :     table = (xmlAttributeTablePtr) dtd->attributes;

	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _table$[ebp], ecx

; 2024 :     if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN25@xmlAddAttr

; 2025 :         table = xmlHashCreateDict(0, dict);

	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	push	0
	call	_xmlHashCreateDict
	add	esp, 8
	mov	DWORD PTR _table$[ebp], eax

; 2026 : 	dtd->attributes = (void *) table;

	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN25@xmlAddAttr:

; 2027 :     }
; 2028 :     if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN26@xmlAddAttr

; 2029 : 	xmlVErrMemory(ctxt,

	push	OFFSET ??_C@_0CN@LFDBMMCB@xmlAddAttributeDecl?3?5Table?5crea@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlVErrMemory
	add	esp, 8

; 2030 :             "xmlAddAttributeDecl: Table creation failed!\n");
; 2031 : 	xmlFreeEnumeration(tree);

	mov	eax, DWORD PTR _tree$[ebp]
	push	eax
	call	_xmlFreeEnumeration
	add	esp, 4

; 2032 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddAttr
$LN26@xmlAddAttr:

; 2033 :     }
; 2034 : 
; 2035 : 
; 2036 :     ret = (xmlAttributePtr) xmlMalloc(sizeof(xmlAttribute));

	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 2037 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN27@xmlAddAttr

; 2038 : 	xmlVErrMemory(ctxt, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlVErrMemory
	add	esp, 8

; 2039 : 	xmlFreeEnumeration(tree);

	mov	edx, DWORD PTR _tree$[ebp]
	push	edx
	call	_xmlFreeEnumeration
	add	esp, 4

; 2040 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddAttr
$LN27@xmlAddAttr:

; 2041 :     }
; 2042 :     memset(ret, 0, sizeof(xmlAttribute));

	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2043 :     ret->type = XML_ATTRIBUTE_DECL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 16			; 00000010H

; 2044 : 
; 2045 :     /*
; 2046 :      * fill the structure.
; 2047 :      */
; 2048 :     ret->atype = type;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx+40], eax

; 2049 :     /*
; 2050 :      * doc must be set before possible error causes call
; 2051 :      * to xmlFreeAttribute (because it's used to check on
; 2052 :      * dict use)
; 2053 :      */
; 2054 :     ret->doc = dtd->doc;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax

; 2055 :     if (dict) {

	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN28@xmlAddAttr

; 2056 : 	ret->name = xmlDictLookup(dict, name, -1);

	push	-1
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 2057 : 	ret->prefix = xmlDictLookup(dict, ns, -1);

	push	-1
	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _dict$[ebp]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 2058 : 	ret->elem = xmlDictLookup(dict, elem, -1);

	push	-1
	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	mov	eax, DWORD PTR _dict$[ebp]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 2059 :     } else {

	jmp	SHORT $LN29@xmlAddAttr
$LN28@xmlAddAttr:

; 2060 : 	ret->name = xmlStrdup(name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 2061 : 	ret->prefix = xmlStrdup(ns);

	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 2062 : 	ret->elem = xmlStrdup(elem);

	mov	edx, DWORD PTR _elem$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN29@xmlAddAttr:

; 2063 :     }
; 2064 :     ret->def = def;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _def$[ebp]
	mov	DWORD PTR [edx+44], eax

; 2065 :     ret->tree = tree;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _tree$[ebp]
	mov	DWORD PTR [ecx+52], edx

; 2066 :     if (defaultValue != NULL) {

	cmp	DWORD PTR _defaultValue$[ebp], 0
	je	SHORT $LN30@xmlAddAttr

; 2067 :         if (dict)

	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN31@xmlAddAttr

; 2068 : 	    ret->defaultValue = xmlDictLookup(dict, defaultValue, -1);

	push	-1
	mov	eax, DWORD PTR _defaultValue$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dict$[ebp]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+48], eax
	jmp	SHORT $LN30@xmlAddAttr
$LN31@xmlAddAttr:

; 2069 : 	else
; 2070 : 	    ret->defaultValue = xmlStrdup(defaultValue);

	mov	eax, DWORD PTR _defaultValue$[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+48], eax
$LN30@xmlAddAttr:

; 2071 :     }
; 2072 : 
; 2073 :     /*
; 2074 :      * Validity Check:
; 2075 :      * Search the DTD for previous declarations of the ATTLIST
; 2076 :      */
; 2077 :     if (xmlHashAddEntry3(table, ret->name, ret->prefix, ret->elem, ret) < 0) {

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashAddEntry3
	add	esp, 20					; 00000014H
	test	eax, eax
	jge	SHORT $LN33@xmlAddAttr

; 2078 : #ifdef LIBXML_VALID_ENABLED
; 2079 : 	/*
; 2080 : 	 * The attribute is already defined in this DTD.
; 2081 : 	 */
; 2082 : 	xmlErrValidWarning(ctxt, (xmlNodePtr) dtd, XML_DTD_ATTRIBUTE_REDEFINED,

	push	0
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0CN@HJBCFPNE@Attribute?5?$CFs?5of?5element?5?$CFs?3?5alr@
	push	501					; 000001f5H
	mov	eax, DWORD PTR _dtd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidWarning
	add	esp, 28					; 0000001cH

; 2083 : 		 "Attribute %s of element %s: already defined\n",
; 2084 : 		 name, elem, NULL);
; 2085 : #endif /* LIBXML_VALID_ENABLED */
; 2086 : 	xmlFreeAttribute(ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlFreeAttribute
	add	esp, 4

; 2087 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddAttr
$LN33@xmlAddAttr:

; 2088 :     }
; 2089 : 
; 2090 :     /*
; 2091 :      * Validity Check:
; 2092 :      * Multiple ID per element
; 2093 :      */
; 2094 :     elemDef = xmlGetDtdElementDesc2(dtd, elem, 1);

	push	1
	mov	eax, DWORD PTR _elem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dtd$[ebp]
	push	ecx
	call	_xmlGetDtdElementDesc2
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _elemDef$[ebp], eax

; 2095 :     if (elemDef != NULL) {

	cmp	DWORD PTR _elemDef$[ebp], 0
	je	$LN34@xmlAddAttr

; 2096 : 
; 2097 : #ifdef LIBXML_VALID_ENABLED
; 2098 :         if ((type == XML_ATTRIBUTE_ID) &&

	cmp	DWORD PTR _type$[ebp], 2
	jne	SHORT $LN35@xmlAddAttr
	push	1
	mov	edx, DWORD PTR _elemDef$[ebp]
	push	edx
	push	0
	call	_xmlScanIDAttributeDecl
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN35@xmlAddAttr

; 2099 : 	    (xmlScanIDAttributeDecl(NULL, elemDef, 1) != 0)) {
; 2100 : 	    xmlErrValidNode(ctxt, (xmlNodePtr) dtd, XML_DTD_MULTIPLE_ID,

	push	0
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _elem$[ebp]
	push	ecx
	push	OFFSET ??_C@_0DD@GEPJIIIF@Element?5?$CFs?5has?5too?5may?5ID?5attri@
	push	520					; 00000208H
	mov	edx, DWORD PTR _dtd$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 2101 : 	   "Element %s has too may ID attributes defined : %s\n",
; 2102 : 		   elem, name, NULL);
; 2103 : 	    if (ctxt != NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN35@xmlAddAttr

; 2104 : 		ctxt->valid = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+36], 0
$LN35@xmlAddAttr:

; 2105 : 	}
; 2106 : #endif /* LIBXML_VALID_ENABLED */
; 2107 : 
; 2108 : 	/*
; 2109 : 	 * Insert namespace default def first they need to be
; 2110 : 	 * processed first.
; 2111 : 	 */
; 2112 : 	if ((xmlStrEqual(ret->name, BAD_CAST "xmlns")) ||

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN39@xmlAddAttr
	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN37@xmlAddAttr
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN37@xmlAddAttr
$LN39@xmlAddAttr:

; 2113 : 	    ((ret->prefix != NULL &&
; 2114 : 	     (xmlStrEqual(ret->prefix, BAD_CAST "xmlns"))))) {
; 2115 : 	    ret->nexth = elemDef->attributes;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _elemDef$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR [ecx+36], eax

; 2116 : 	    elemDef->attributes = ret;

	mov	ecx, DWORD PTR _elemDef$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+44], edx

; 2117 : 	} else {

	jmp	$LN34@xmlAddAttr
$LN37@xmlAddAttr:

; 2118 : 	    xmlAttributePtr tmp = elemDef->attributes;

	mov	eax, DWORD PTR _elemDef$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _tmp$1[ebp], ecx
$LN4@xmlAddAttr:

; 2119 : 
; 2120 : 	    while ((tmp != NULL) &&

	cmp	DWORD PTR _tmp$1[ebp], 0
	je	SHORT $LN5@xmlAddAttr
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN40@xmlAddAttr
	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	je	SHORT $LN5@xmlAddAttr
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN5@xmlAddAttr
$LN40@xmlAddAttr:

; 2121 : 		   ((xmlStrEqual(tmp->name, BAD_CAST "xmlns")) ||
; 2122 : 		    ((ret->prefix != NULL &&
; 2123 : 		     (xmlStrEqual(ret->prefix, BAD_CAST "xmlns")))))) {
; 2124 : 		if (tmp->nexth == NULL)

	mov	ecx, DWORD PTR _tmp$1[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN41@xmlAddAttr

; 2125 : 		    break;

	jmp	SHORT $LN5@xmlAddAttr
$LN41@xmlAddAttr:

; 2126 : 		tmp = tmp->nexth;

	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR _tmp$1[ebp], eax

; 2127 : 	    }

	jmp	SHORT $LN4@xmlAddAttr
$LN5@xmlAddAttr:

; 2128 : 	    if (tmp != NULL) {

	cmp	DWORD PTR _tmp$1[ebp], 0
	je	SHORT $LN42@xmlAddAttr

; 2129 : 		ret->nexth = tmp->nexth;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _tmp$1[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	DWORD PTR [ecx+36], eax

; 2130 : 	        tmp->nexth = ret;

	mov	ecx, DWORD PTR _tmp$1[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+36], edx

; 2131 : 	    } else {

	jmp	SHORT $LN34@xmlAddAttr
$LN42@xmlAddAttr:

; 2132 : 		ret->nexth = elemDef->attributes;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _elemDef$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR [eax+36], edx

; 2133 : 		elemDef->attributes = ret;

	mov	eax, DWORD PTR _elemDef$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+44], ecx
$LN34@xmlAddAttr:

; 2134 : 	    }
; 2135 : 	}
; 2136 :     }
; 2137 : 
; 2138 :     /*
; 2139 :      * Link it to the DTD
; 2140 :      */
; 2141 :     ret->parent = dtd;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _dtd$[ebp]
	mov	DWORD PTR [edx+20], eax

; 2142 :     if (dtd->last == NULL) {

	mov	ecx, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN44@xmlAddAttr

; 2143 : 	dtd->children = dtd->last = (xmlNodePtr) ret;

	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 2144 :     } else {

	jmp	SHORT $LN45@xmlAddAttr
$LN44@xmlAddAttr:

; 2145 :         dtd->last->next = (xmlNodePtr) ret;

	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 2146 : 	ret->prev = dtd->last;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+28], edx

; 2147 : 	dtd->last = (xmlNodePtr) ret;

	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN45@xmlAddAttr:

; 2148 :     }
; 2149 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlAddAttr:

; 2150 : }

	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN47@xmlAddAttr:
	DD	$LN10@xmlAddAttr
	DD	$LN11@xmlAddAttr
	DD	$LN12@xmlAddAttr
	DD	$LN13@xmlAddAttr
	DD	$LN14@xmlAddAttr
	DD	$LN15@xmlAddAttr
	DD	$LN16@xmlAddAttr
	DD	$LN17@xmlAddAttr
	DD	$LN18@xmlAddAttr
	DD	$LN19@xmlAddAttr
_xmlAddAttributeDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCopyEnumeration
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_cur$ = 8						; size = 4
_xmlCopyEnumeration PROC				; COMDAT

; 1808 : xmlCopyEnumeration(xmlEnumerationPtr cur) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1809 :     xmlEnumerationPtr ret;
; 1810 : 
; 1811 :     if (cur == NULL) return(NULL);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlCopyEnu
	xor	eax, eax
	jmp	SHORT $LN1@xmlCopyEnu
$LN2@xmlCopyEnu:

; 1812 :     ret = xmlCreateEnumeration((xmlChar *) cur->name);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_xmlCreateEnumeration
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 1813 :     if (ret == NULL) return(NULL);

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@xmlCopyEnu
	xor	eax, eax
	jmp	SHORT $LN1@xmlCopyEnu
$LN3@xmlCopyEnu:

; 1814 : 
; 1815 :     if (cur->next != NULL) ret->next = xmlCopyEnumeration(cur->next);

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN4@xmlCopyEnu
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_xmlCopyEnumeration
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@xmlCopyEnu
$LN4@xmlCopyEnu:

; 1816 :     else ret->next = NULL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], 0
$LN5@xmlCopyEnu:

; 1817 : 
; 1818 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlCopyEnu:

; 1819 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlCopyEnumeration ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeEnumeration
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_xmlFreeEnumeration PROC				; COMDAT

; 1788 : xmlFreeEnumeration(xmlEnumerationPtr cur) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1789 :     if (cur == NULL) return;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlFreeEnu
	jmp	SHORT $LN1@xmlFreeEnu
$LN2@xmlFreeEnu:

; 1790 : 
; 1791 :     if (cur->next != NULL) xmlFreeEnumeration(cur->next);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlFreeEnu
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_xmlFreeEnumeration
	add	esp, 4
$LN3@xmlFreeEnu:

; 1792 : 
; 1793 :     if (cur->name != NULL) xmlFree((xmlChar *) cur->name);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN4@xmlFreeEnu
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlFreeEnu:

; 1794 :     xmlFree(cur);

	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlFreeEnu:

; 1795 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeEnumeration ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCreateEnumeration
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_name$ = 8						; size = 4
_xmlCreateEnumeration PROC				; COMDAT

; 1766 : xmlCreateEnumeration(const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1767 :     xmlEnumerationPtr ret;
; 1768 : 
; 1769 :     ret = (xmlEnumerationPtr) xmlMalloc(sizeof(xmlEnumeration));

	mov	esi, esp
	push	8
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 1770 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlCreateE

; 1771 : 	xmlVErrMemory(NULL, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 1772 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlCreateE
$LN2@xmlCreateE:

; 1773 :     }
; 1774 :     memset(ret, 0, sizeof(xmlEnumeration));

	xor	eax, eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], eax

; 1775 : 
; 1776 :     if (name != NULL)

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN3@xmlCreateE

; 1777 :         ret->name = xmlStrdup(name);

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@xmlCreateE:

; 1778 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlCreateE:

; 1779 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlCreateEnumeration ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpElementDecl
_TEXT	SEGMENT
tv67 = -4						; size = 4
_buf$ = 8						; size = 4
_elem$ = 12						; size = 4
_xmlDumpElementDecl PROC				; COMDAT

; 1676 : xmlDumpElementDecl(xmlBufferPtr buf, xmlElementPtr elem) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1677 :     if ((buf == NULL) || (elem == NULL))

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN5@xmlDumpEle
	cmp	DWORD PTR _elem$[ebp], 0
	jne	SHORT $LN4@xmlDumpEle
$LN5@xmlDumpEle:

; 1678 :         return;

	jmp	$LN1@xmlDumpEle
$LN4@xmlDumpEle:

; 1679 :     switch (elem->etype) {

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	sub	edx, 1
	mov	DWORD PTR tv67[ebp], edx
	cmp	DWORD PTR tv67[ebp], 3
	ja	$LN14@xmlDumpEle
	mov	eax, DWORD PTR tv67[ebp]
	jmp	DWORD PTR $LN16@xmlDumpEle[eax*4]
$LN6@xmlDumpEle:

; 1680 : 	case XML_ELEMENT_TYPE_EMPTY:
; 1681 : 	    xmlBufferWriteChar(buf, "<!ELEMENT ");

	push	OFFSET ??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1682 : 	    if (elem->prefix != NULL) {

	mov	edx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN7@xmlDumpEle

; 1683 : 		xmlBufferWriteCHAR(buf, elem->prefix);

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1684 : 		xmlBufferWriteChar(buf, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8
$LN7@xmlDumpEle:

; 1685 : 	    }
; 1686 : 	    xmlBufferWriteCHAR(buf, elem->name);

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1687 : 	    xmlBufferWriteChar(buf, " EMPTY>\n");

	push	OFFSET ??_C@_08HMKELAAG@?5EMPTY?$DO?6@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1688 : 	    break;

	jmp	$LN1@xmlDumpEle
$LN8@xmlDumpEle:

; 1689 : 	case XML_ELEMENT_TYPE_ANY:
; 1690 : 	    xmlBufferWriteChar(buf, "<!ELEMENT ");

	push	OFFSET ??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1691 : 	    if (elem->prefix != NULL) {

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN9@xmlDumpEle

; 1692 : 		xmlBufferWriteCHAR(buf, elem->prefix);

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1693 : 		xmlBufferWriteChar(buf, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8
$LN9@xmlDumpEle:

; 1694 : 	    }
; 1695 : 	    xmlBufferWriteCHAR(buf, elem->name);

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1696 : 	    xmlBufferWriteChar(buf, " ANY>\n");

	push	OFFSET ??_C@_06OMPGEGME@?5ANY?$DO?6@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1697 : 	    break;

	jmp	$LN1@xmlDumpEle
$LN10@xmlDumpEle:

; 1698 : 	case XML_ELEMENT_TYPE_MIXED:
; 1699 : 	    xmlBufferWriteChar(buf, "<!ELEMENT ");

	push	OFFSET ??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8

; 1700 : 	    if (elem->prefix != NULL) {

	mov	ecx, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN11@xmlDumpEle

; 1701 : 		xmlBufferWriteCHAR(buf, elem->prefix);

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1702 : 		xmlBufferWriteChar(buf, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8
$LN11@xmlDumpEle:

; 1703 : 	    }
; 1704 : 	    xmlBufferWriteCHAR(buf, elem->name);

	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1705 : 	    xmlBufferWriteChar(buf, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8

; 1706 : 	    xmlDumpElementContent(buf, elem->content, 1);

	push	1
	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH

; 1707 : 	    xmlBufferWriteChar(buf, ">\n");

	push	OFFSET ??_C@_02NEKEAGPN@?$DO?6@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1708 : 	    break;

	jmp	$LN1@xmlDumpEle
$LN12@xmlDumpEle:

; 1709 : 	case XML_ELEMENT_TYPE_ELEMENT:
; 1710 : 	    xmlBufferWriteChar(buf, "<!ELEMENT ");

	push	OFFSET ??_C@_0L@EMLMHHFJ@?$DM?$CBELEMENT?5@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1711 : 	    if (elem->prefix != NULL) {

	mov	eax, DWORD PTR _elem$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN13@xmlDumpEle

; 1712 : 		xmlBufferWriteCHAR(buf, elem->prefix);

	mov	ecx, DWORD PTR _elem$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1713 : 		xmlBufferWriteChar(buf, ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8
$LN13@xmlDumpEle:

; 1714 : 	    }
; 1715 : 	    xmlBufferWriteCHAR(buf, elem->name);

	mov	edx, DWORD PTR _elem$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 1716 : 	    xmlBufferWriteChar(buf, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 1717 : 	    xmlDumpElementContent(buf, elem->content, 1);

	push	1
	mov	eax, DWORD PTR _elem$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlDumpElementContent
	add	esp, 12					; 0000000cH

; 1718 : 	    xmlBufferWriteChar(buf, ">\n");

	push	OFFSET ??_C@_02NEKEAGPN@?$DO?6@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8

; 1719 : 	    break;

	jmp	SHORT $LN1@xmlDumpEle
$LN14@xmlDumpEle:

; 1720 : 	default:
; 1721 : 	    xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0DB@NFLGBMMC@Internal?3?5ELEMENT?5struct?5corrup@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H
$LN1@xmlDumpEle:

; 1722 : 		    "Internal: ELEMENT struct corrupted invalid type\n",
; 1723 : 		    NULL);
; 1724 :     }
; 1725 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN16@xmlDumpEle:
	DD	$LN6@xmlDumpEle
	DD	$LN8@xmlDumpEle
	DD	$LN10@xmlDumpEle
	DD	$LN12@xmlDumpEle
_xmlDumpElementDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpElementTable
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_table$ = 12						; size = 4
_xmlDumpElementTable PROC				; COMDAT

; 1749 : xmlDumpElementTable(xmlBufferPtr buf, xmlElementTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1750 :     if ((buf == NULL) || (table == NULL))

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN3@xmlDumpEle
	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN2@xmlDumpEle
$LN3@xmlDumpEle:

; 1751 :         return;

	jmp	SHORT $LN1@xmlDumpEle
$LN2@xmlDumpEle:

; 1752 :     xmlHashScan(table, xmlDumpElementDeclScan, buf);

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	OFFSET _xmlDumpElementDeclScan
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_xmlHashScan
	add	esp, 12					; 0000000cH
$LN1@xmlDumpEle:

; 1753 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDumpElementTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeElementTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_xmlFreeElementTable PROC				; COMDAT

; 1612 : xmlFreeElementTable(xmlElementTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1613 :     xmlHashFree(table, xmlFreeElementTableEntry);

	push	OFFSET _xmlFreeElementTableEntry
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashFree
	add	esp, 8

; 1614 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeElementTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCopyElementTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_xmlCopyElementTable PROC				; COMDAT

; 1661 : xmlCopyElementTable(xmlElementTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1662 :     return((xmlElementTablePtr) xmlHashCopy(table, xmlCopyElement));

	push	OFFSET _xmlCopyElement
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashCopy
	add	esp, 8

; 1663 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlCopyElementTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlAddElementDecl
_TEXT	SEGMENT
tv66 = -36						; size = 4
_dict$1 = -32						; size = 4
_uqname$ = -28						; size = 4
_ns$ = -20						; size = 4
_oldAttributes$ = -12					; size = 4
_table$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_dtd$ = 12						; size = 4
_name$ = 16						; size = 4
_type$ = 20						; size = 4
_content$ = 24						; size = 4
_xmlAddElementDecl PROC					; COMDAT

; 1390 : 		  xmlElementContentPtr content) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1391 :     xmlElementPtr ret;
; 1392 :     xmlElementTablePtr table;
; 1393 :     xmlAttributePtr oldAttributes = NULL;

	mov	DWORD PTR _oldAttributes$[ebp], 0

; 1394 :     xmlChar *ns, *uqname;
; 1395 : 
; 1396 :     if (dtd == NULL) {

	cmp	DWORD PTR _dtd$[ebp], 0
	jne	SHORT $LN4@xmlAddElem

; 1397 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN4@xmlAddElem:

; 1398 :     }
; 1399 :     if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN5@xmlAddElem

; 1400 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN5@xmlAddElem:

; 1401 :     }
; 1402 : 
; 1403 :     switch (type) {

	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv66[ebp], eax
	mov	ecx, DWORD PTR tv66[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv66[ebp], ecx
	cmp	DWORD PTR tv66[ebp], 3
	ja	$LN14@xmlAddElem
	mov	edx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN48@xmlAddElem[edx*4]
$LN6@xmlAddElem:

; 1404 :         case XML_ELEMENT_TYPE_EMPTY:
; 1405 : 	    if (content != NULL) {

	cmp	DWORD PTR _content$[ebp], 0
	je	SHORT $LN7@xmlAddElem

; 1406 : 		xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0CO@BLBNCGCL@xmlAddElementDecl?3?5content?5?$CB?$DN?5N@
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 1407 : 		        "xmlAddElementDecl: content != NULL for EMPTY\n",
; 1408 : 			NULL);
; 1409 : 		return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN7@xmlAddElem:

; 1410 : 	    }
; 1411 : 	    break;

	jmp	$LN2@xmlAddElem
$LN8@xmlAddElem:

; 1412 : 	case XML_ELEMENT_TYPE_ANY:
; 1413 : 	    if (content != NULL) {

	cmp	DWORD PTR _content$[ebp], 0
	je	SHORT $LN9@xmlAddElem

; 1414 : 		xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0CM@DBFKJMHA@xmlAddElementDecl?3?5content?5?$CB?$DN?5N@
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 1415 : 		        "xmlAddElementDecl: content != NULL for ANY\n",
; 1416 : 			NULL);
; 1417 : 		return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN9@xmlAddElem:

; 1418 : 	    }
; 1419 : 	    break;

	jmp	SHORT $LN2@xmlAddElem
$LN10@xmlAddElem:

; 1420 : 	case XML_ELEMENT_TYPE_MIXED:
; 1421 : 	    if (content == NULL) {

	cmp	DWORD PTR _content$[ebp], 0
	jne	SHORT $LN11@xmlAddElem

; 1422 : 		xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0CO@IMMDEKCP@xmlAddElementDecl?3?5content?5?$DN?$DN?5N@
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 1423 : 		        "xmlAddElementDecl: content == NULL for MIXED\n",
; 1424 : 			NULL);
; 1425 : 		return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN11@xmlAddElem:

; 1426 : 	    }
; 1427 : 	    break;

	jmp	SHORT $LN2@xmlAddElem
$LN12@xmlAddElem:

; 1428 : 	case XML_ELEMENT_TYPE_ELEMENT:
; 1429 : 	    if (content == NULL) {

	cmp	DWORD PTR _content$[ebp], 0
	jne	SHORT $LN13@xmlAddElem

; 1430 : 		xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0DA@CFDLEHAD@xmlAddElementDecl?3?5content?5?$DN?$DN?5N@
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 1431 : 		        "xmlAddElementDecl: content == NULL for ELEMENT\n",
; 1432 : 			NULL);
; 1433 : 		return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN13@xmlAddElem:

; 1434 : 	    }
; 1435 : 	    break;

	jmp	SHORT $LN2@xmlAddElem
$LN14@xmlAddElem:

; 1436 : 	default:
; 1437 : 	    xmlErrValid(ctxt, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0CP@HFIOBKAA@Internal?3?5ELEMENT?5decl?5corrupte@
	push	1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 1438 : 		    "Internal: ELEMENT decl corrupted invalid type\n",
; 1439 : 		    NULL);
; 1440 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN2@xmlAddElem:

; 1441 :     }
; 1442 : 
; 1443 :     /*
; 1444 :      * check if name is a QName
; 1445 :      */
; 1446 :     uqname = xmlSplitQName2(name, &ns);

	lea	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlSplitQName2
	add	esp, 8
	mov	DWORD PTR _uqname$[ebp], eax

; 1447 :     if (uqname != NULL)

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN15@xmlAddElem

; 1448 : 	name = uqname;

	mov	ecx, DWORD PTR _uqname$[ebp]
	mov	DWORD PTR _name$[ebp], ecx
$LN15@xmlAddElem:

; 1449 : 
; 1450 :     /*
; 1451 :      * Create the Element table if needed.
; 1452 :      */
; 1453 :     table = (xmlElementTablePtr) dtd->elements;

	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	DWORD PTR _table$[ebp], eax

; 1454 :     if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN16@xmlAddElem

; 1455 : 	xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$1[ebp], 0

; 1456 : 
; 1457 : 	if (dtd->doc != NULL)

	mov	ecx, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN17@xmlAddElem

; 1458 : 	    dict = dtd->doc->dict;

	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _dict$1[ebp], ecx
$LN17@xmlAddElem:

; 1459 :         table = xmlHashCreateDict(0, dict);

	mov	edx, DWORD PTR _dict$1[ebp]
	push	edx
	push	0
	call	_xmlHashCreateDict
	add	esp, 8
	mov	DWORD PTR _table$[ebp], eax

; 1460 : 	dtd->elements = (void *) table;

	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [eax+40], ecx
$LN16@xmlAddElem:

; 1461 :     }
; 1462 :     if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN18@xmlAddElem

; 1463 : 	xmlVErrMemory(ctxt,

	push	OFFSET ??_C@_0CL@IICJECDN@xmlAddElementDecl?3?5Table?5creati@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlVErrMemory
	add	esp, 8

; 1464 :             "xmlAddElementDecl: Table creation failed!\n");
; 1465 : 	if (uqname != NULL)

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN19@xmlAddElem

; 1466 : 	    xmlFree(uqname);

	mov	esi, esp
	mov	eax, DWORD PTR _uqname$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN19@xmlAddElem:

; 1467 : 	if (ns != NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN20@xmlAddElem

; 1468 : 	    xmlFree(ns);

	mov	esi, esp
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN20@xmlAddElem:

; 1469 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN18@xmlAddElem:

; 1470 :     }
; 1471 : 
; 1472 :     /*
; 1473 :      * lookup old attributes inserted on an undefined element in the
; 1474 :      * internal subset.
; 1475 :      */
; 1476 :     if ((dtd->doc != NULL) && (dtd->doc->intSubset != NULL)) {

	mov	edx, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN21@xmlAddElem
	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN21@xmlAddElem

; 1477 : 	ret = xmlHashLookup2(dtd->doc->intSubset->elements, name, ns);

	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [edx+44]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_xmlHashLookup2
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 1478 : 	if ((ret != NULL) && (ret->etype == XML_ELEMENT_TYPE_UNDEFINED)) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN21@xmlAddElem
	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN21@xmlAddElem

; 1479 : 	    oldAttributes = ret->attributes;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _oldAttributes$[ebp], ecx

; 1480 : 	    ret->attributes = NULL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+44], 0

; 1481 : 	    xmlHashRemoveEntry2(dtd->doc->intSubset->elements, name, ns, NULL);

	push	0
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR [eax+44]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_xmlHashRemoveEntry2
	add	esp, 16					; 00000010H

; 1482 : 	    xmlFreeElement(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlFreeElement
	add	esp, 4
$LN21@xmlAddElem:

; 1483 : 	}
; 1484 :     }
; 1485 : 
; 1486 :     /*
; 1487 :      * The element may already be present if one of its attribute
; 1488 :      * was registered first
; 1489 :      */
; 1490 :     ret = xmlHashLookup2(table, name, ns);

	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashLookup2
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 1491 :     if (ret != NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	$LN23@xmlAddElem

; 1492 : 	if (ret->etype != XML_ELEMENT_TYPE_UNDEFINED) {

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN25@xmlAddElem

; 1493 : #ifdef LIBXML_VALID_ENABLED
; 1494 : 	    /*
; 1495 : 	     * The element is already defined in this DTD.
; 1496 : 	     */
; 1497 : 	    xmlErrValidNode(ctxt, (xmlNodePtr) dtd, XML_DTD_ELEM_REDEFINED,

	push	0
	push	0
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0BM@DLJMKEJ@Redefinition?5of?5element?5?$CFs?6@
	push	509					; 000001fdH
	mov	eax, DWORD PTR _dtd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 1498 : 	                    "Redefinition of element %s\n",
; 1499 : 			    name, NULL, NULL);
; 1500 : #endif /* LIBXML_VALID_ENABLED */
; 1501 : 	    if (uqname != NULL)

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN26@xmlAddElem

; 1502 : 		xmlFree(uqname);

	mov	esi, esp
	mov	edx, DWORD PTR _uqname$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@xmlAddElem:

; 1503 :             if (ns != NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN27@xmlAddElem

; 1504 : 	        xmlFree(ns);

	mov	esi, esp
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN27@xmlAddElem:

; 1505 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN25@xmlAddElem:

; 1506 : 	}
; 1507 : 	if (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN28@xmlAddElem

; 1508 : 	    xmlFree(ns);

	mov	esi, esp
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1509 : 	    ns = NULL;

	mov	DWORD PTR _ns$[ebp], 0
$LN28@xmlAddElem:

; 1510 : 	}
; 1511 :     } else {

	jmp	$LN24@xmlAddElem
$LN23@xmlAddElem:

; 1512 : 	ret = (xmlElementPtr) xmlMalloc(sizeof(xmlElement));

	mov	esi, esp
	push	56					; 00000038H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 1513 : 	if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN29@xmlAddElem

; 1514 : 	    xmlVErrMemory(ctxt, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlVErrMemory
	add	esp, 8

; 1515 : 	    if (uqname != NULL)

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN30@xmlAddElem

; 1516 : 		xmlFree(uqname);

	mov	esi, esp
	mov	eax, DWORD PTR _uqname$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN30@xmlAddElem:

; 1517 :             if (ns != NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN31@xmlAddElem

; 1518 : 	        xmlFree(ns);

	mov	esi, esp
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN31@xmlAddElem:

; 1519 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN29@xmlAddElem:

; 1520 : 	}
; 1521 : 	memset(ret, 0, sizeof(xmlElement));

	push	56					; 00000038H
	push	0
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 1522 : 	ret->type = XML_ELEMENT_DECL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+4], 15			; 0000000fH

; 1523 : 
; 1524 : 	/*
; 1525 : 	 * fill the structure.
; 1526 : 	 */
; 1527 : 	ret->name = xmlStrdup(name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1528 : 	if (ret->name == NULL) {

	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+8], 0
	jne	SHORT $LN32@xmlAddElem

; 1529 : 	    xmlVErrMemory(ctxt, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlVErrMemory
	add	esp, 8

; 1530 : 	    if (uqname != NULL)

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN33@xmlAddElem

; 1531 : 		xmlFree(uqname);

	mov	esi, esp
	mov	edx, DWORD PTR _uqname$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN33@xmlAddElem:

; 1532 :             if (ns != NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN34@xmlAddElem

; 1533 : 	        xmlFree(ns);

	mov	esi, esp
	mov	eax, DWORD PTR _ns$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN34@xmlAddElem:

; 1534 : 	    xmlFree(ret);

	mov	esi, esp
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1535 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN32@xmlAddElem:

; 1536 : 	}
; 1537 : 	ret->prefix = ns;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _ns$[ebp]
	mov	DWORD PTR [edx+48], eax

; 1538 : 
; 1539 : 	/*
; 1540 : 	 * Validity Check:
; 1541 : 	 * Insertion must not fail
; 1542 : 	 */
; 1543 : 	if (xmlHashAddEntry2(table, name, ns, ret)) {

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_xmlHashAddEntry2
	add	esp, 16					; 00000010H
	test	eax, eax
	je	SHORT $LN35@xmlAddElem

; 1544 : #ifdef LIBXML_VALID_ENABLED
; 1545 : 	    /*
; 1546 : 	     * The element is already defined in this DTD.
; 1547 : 	     */
; 1548 : 	    xmlErrValidNode(ctxt, (xmlNodePtr) dtd, XML_DTD_ELEM_REDEFINED,

	push	0
	push	0
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0BM@DLJMKEJ@Redefinition?5of?5element?5?$CFs?6@
	push	509					; 000001fdH
	mov	eax, DWORD PTR _dtd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlErrValidNode
	add	esp, 28					; 0000001cH

; 1549 : 	                    "Redefinition of element %s\n",
; 1550 : 			    name, NULL, NULL);
; 1551 : #endif /* LIBXML_VALID_ENABLED */
; 1552 : 	    xmlFreeElement(ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlFreeElement
	add	esp, 4

; 1553 : 	    if (uqname != NULL)

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN36@xmlAddElem

; 1554 : 		xmlFree(uqname);

	mov	esi, esp
	mov	eax, DWORD PTR _uqname$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN36@xmlAddElem:

; 1555 : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddElem
$LN35@xmlAddElem:

; 1556 : 	}
; 1557 : 	/*
; 1558 : 	 * For new element, may have attributes from earlier
; 1559 : 	 * definition in internal subset
; 1560 : 	 */
; 1561 : 	ret->attributes = oldAttributes;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _oldAttributes$[ebp]
	mov	DWORD PTR [ecx+44], edx
$LN24@xmlAddElem:

; 1562 :     }
; 1563 : 
; 1564 :     /*
; 1565 :      * Finish to fill the structure.
; 1566 :      */
; 1567 :     ret->etype = type;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 1568 :     /*
; 1569 :      * Avoid a stupid copy when called by the parser
; 1570 :      * and flag it by setting a special parent value
; 1571 :      * so the parser doesn't unallocate it.
; 1572 :      */
; 1573 :     if ((ctxt != NULL) &&

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN37@xmlAddElem
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+28], -1412623820		; abcd1234H
	je	SHORT $LN39@xmlAddElem
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+28], -1412623819		; abcd1235H
	jne	SHORT $LN37@xmlAddElem
$LN39@xmlAddElem:

; 1574 :         ((ctxt->finishDtd == XML_CTXT_FINISH_DTD_0) ||
; 1575 :          (ctxt->finishDtd == XML_CTXT_FINISH_DTD_1))) {
; 1576 : 	ret->content = content;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _content$[ebp]
	mov	DWORD PTR [ecx+40], edx

; 1577 : 	if (content != NULL)

	cmp	DWORD PTR _content$[ebp], 0
	je	SHORT $LN40@xmlAddElem

; 1578 : 	    content->parent = (xmlElementContentPtr) 1;

	mov	eax, DWORD PTR _content$[ebp]
	mov	DWORD PTR [eax+20], 1
$LN40@xmlAddElem:

; 1579 :     } else {

	jmp	SHORT $LN38@xmlAddElem
$LN37@xmlAddElem:

; 1580 : 	ret->content = xmlCopyDocElementContent(dtd->doc, content);

	mov	ecx, DWORD PTR _content$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlCopyDocElementContent
	add	esp, 8
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+40], eax
$LN38@xmlAddElem:

; 1581 :     }
; 1582 : 
; 1583 :     /*
; 1584 :      * Link it to the DTD
; 1585 :      */
; 1586 :     ret->parent = dtd;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _dtd$[ebp]
	mov	DWORD PTR [edx+20], eax

; 1587 :     ret->doc = dtd->doc;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+32], eax

; 1588 :     if (dtd->last == NULL) {

	mov	ecx, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	SHORT $LN41@xmlAddElem

; 1589 : 	dtd->children = dtd->last = (xmlNodePtr) ret;

	mov	edx, DWORD PTR _dtd$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], edx

; 1590 :     } else {

	jmp	SHORT $LN42@xmlAddElem
$LN41@xmlAddElem:

; 1591 :         dtd->last->next = (xmlNodePtr) ret;

	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], edx

; 1592 : 	ret->prev = dtd->last;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+28], edx

; 1593 : 	dtd->last = (xmlNodePtr) ret;

	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN42@xmlAddElem:

; 1594 :     }
; 1595 :     if (uqname != NULL)

	cmp	DWORD PTR _uqname$[ebp], 0
	je	SHORT $LN43@xmlAddElem

; 1596 : 	xmlFree(uqname);

	mov	esi, esp
	mov	edx, DWORD PTR _uqname$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN43@xmlAddElem:

; 1597 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlAddElem:

; 1598 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN47@xmlAddElem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN47@xmlAddElem:
	DD	1
	DD	$LN46@xmlAddElem
$LN46@xmlAddElem:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN45@xmlAddElem
$LN45@xmlAddElem:
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
	npad	1
$LN48@xmlAddElem:
	DD	$LN6@xmlAddElem
	DD	$LN8@xmlAddElem
	DD	$LN10@xmlAddElem
	DD	$LN12@xmlAddElem
_xmlAddElementDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlSprintfElementContent
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_content$ = 12						; size = 4
_englob$ = 16						; size = 4
_xmlSprintfElementContent PROC				; COMDAT

; 1239 : 			 int englob ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1240 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSprintfElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlSnprintfElementContent
_TEXT	SEGMENT
tv639 = -237						; size = 1
tv636 = -236						; size = 4
tv628 = -229						; size = 1
tv625 = -228						; size = 4
tv617 = -221						; size = 1
tv614 = -220						; size = 4
tv282 = -216						; size = 4
tv604 = -209						; size = 1
tv601 = -208						; size = 4
tv273 = -204						; size = 4
tv594 = -197						; size = 1
tv591 = -196						; size = 4
tv588 = -192						; size = 4
tv570 = -185						; size = 1
tv567 = -184						; size = 4
tv557 = -177						; size = 1
tv554 = -176						; size = 4
tv232 = -172						; size = 4
tv544 = -165						; size = 1
tv541 = -164						; size = 4
tv538 = -160						; size = 4
tv510 = -153						; size = 1
tv507 = -152						; size = 4
tv497 = -145						; size = 1
tv494 = -144						; size = 4
tv177 = -140						; size = 4
tv484 = -133						; size = 1
tv481 = -132						; size = 4
tv478 = -128						; size = 4
tv453 = -121						; size = 1
tv450 = -120						; size = 4
tv447 = -116						; size = 4
tv446 = -112						; size = 4
tv441 = -105						; size = 1
tv438 = -104						; size = 4
tv436 = -100						; size = 4
tv427 = -93						; size = 1
tv424 = -92						; size = 4
tv408 = -85						; size = 1
tv405 = -84						; size = 4
tv402 = -80						; size = 4
tv401 = -76						; size = 4
tv396 = -69						; size = 1
tv393 = -68						; size = 4
tv391 = -64						; size = 4
tv380 = -57						; size = 1
tv377 = -56						; size = 4
tv357 = -49						; size = 1
tv354 = -48						; size = 4
tv87 = -44						; size = 4
tv342 = -37						; size = 1
tv339 = -36						; size = 4
tv329 = -29						; size = 1
tv326 = -28						; size = 4
tv67 = -24						; size = 4
tv316 = -17						; size = 1
tv313 = -16						; size = 4
tv310 = -12						; size = 4
_qnameLen$1 = -8					; size = 4
_len$ = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
_content$ = 16						; size = 4
_englob$ = 20						; size = 4
_xmlSnprintfElementContent PROC				; COMDAT

; 1254 : xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int englob) {

	push	ebp
	mov	ebp, esp
	sub	esp, 240				; 000000f0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-240]
	mov	ecx, 60					; 0000003cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1255 :     int len;
; 1256 : 
; 1257 :     if (content == NULL) return;

	cmp	DWORD PTR _content$[ebp], 0
	jne	SHORT $LN6@xmlSnprint
	jmp	$LN1@xmlSnprint
$LN6@xmlSnprint:

; 1258 :     len = strlen(buf);

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv310[ebp], eax
	mov	ecx, DWORD PTR tv310[ebp]
	add	ecx, 1
	mov	DWORD PTR tv313[ebp], ecx
$LL41@xmlSnprint:
	mov	edx, DWORD PTR tv310[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv316[ebp], al
	add	DWORD PTR tv310[ebp], 1
	cmp	BYTE PTR tv316[ebp], 0
	jne	SHORT $LL41@xmlSnprint
	mov	ecx, DWORD PTR tv310[ebp]
	sub	ecx, DWORD PTR tv313[ebp]
	mov	DWORD PTR tv67[ebp], ecx
	mov	edx, DWORD PTR tv67[ebp]
	mov	DWORD PTR _len$[ebp], edx

; 1259 :     if (size - len < 50) {

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _len$[ebp]
	cmp	eax, 50					; 00000032H
	jge	SHORT $LN7@xmlSnprint

; 1260 : 	if ((size - len > 4) && (buf[len - 1] != '.'))

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, 4
	jle	SHORT $LN8@xmlSnprint
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	movsx	eax, BYTE PTR [edx-1]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN8@xmlSnprint

; 1261 : 	    strcat(buf, " ...");

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv326[ebp], ecx
$LL42@xmlSnprint:
	mov	edx, DWORD PTR tv326[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv329[ebp], al
	add	DWORD PTR tv326[ebp], 1
	cmp	BYTE PTR tv329[ebp], 0
	jne	SHORT $LL42@xmlSnprint
	mov	edi, DWORD PTR tv326[ebp]
	mov	ecx, DWORD PTR ??_C@_04IBCFJNCN@?5?4?4?4@
	mov	DWORD PTR [edi], ecx
	mov	dl, BYTE PTR ??_C@_04IBCFJNCN@?5?4?4?4@+4
	mov	BYTE PTR [edi+4], dl
$LN8@xmlSnprint:

; 1262 : 	return;

	jmp	$LN1@xmlSnprint
$LN7@xmlSnprint:

; 1263 :     }
; 1264 :     if (englob) strcat(buf, "(");

	cmp	DWORD PTR _englob$[ebp], 0
	je	SHORT $LN9@xmlSnprint
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv339[ebp], eax
$LL43@xmlSnprint:
	mov	ecx, DWORD PTR tv339[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv342[ebp], dl
	add	DWORD PTR tv339[ebp], 1
	cmp	BYTE PTR tv342[ebp], 0
	jne	SHORT $LL43@xmlSnprint
	mov	edi, DWORD PTR tv339[ebp]
	mov	ax, WORD PTR ??_C@_01ODHLEDKK@?$CI@
	mov	WORD PTR [edi], ax
$LN9@xmlSnprint:

; 1265 :     switch (content->type) {

	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv87[ebp], edx
	mov	eax, DWORD PTR tv87[ebp]
	sub	eax, 1
	mov	DWORD PTR tv87[ebp], eax
	cmp	DWORD PTR tv87[ebp], 3
	ja	$LN2@xmlSnprint
	mov	ecx, DWORD PTR tv87[ebp]
	jmp	DWORD PTR $LN62@xmlSnprint[ecx*4]
$LN10@xmlSnprint:

; 1266 :         case XML_ELEMENT_CONTENT_PCDATA:
; 1267 :             strcat(buf, "#PCDATA");

	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, -1
	mov	DWORD PTR tv354[ebp], edx
$LL44@xmlSnprint:
	mov	eax, DWORD PTR tv354[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv357[ebp], cl
	add	DWORD PTR tv354[ebp], 1
	cmp	BYTE PTR tv357[ebp], 0
	jne	SHORT $LL44@xmlSnprint
	mov	edi, DWORD PTR tv354[ebp]
	mov	edx, DWORD PTR ??_C@_07ELDBONKP@?$CDPCDATA@
	mov	DWORD PTR [edi], edx
	mov	eax, DWORD PTR ??_C@_07ELDBONKP@?$CDPCDATA@+4
	mov	DWORD PTR [edi+4], eax

; 1268 : 	    break;

	jmp	$LN2@xmlSnprint
$LN11@xmlSnprint:

; 1269 : 	case XML_ELEMENT_CONTENT_ELEMENT: {
; 1270 :             int qnameLen = xmlStrlen(content->name);

	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	mov	DWORD PTR _qnameLen$1[ebp], eax

; 1271 : 
; 1272 : 	    if (content->prefix != NULL)

	mov	eax, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN12@xmlSnprint

; 1273 :                 qnameLen += xmlStrlen(content->prefix) + 1;

	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	mov	ecx, DWORD PTR _qnameLen$1[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _qnameLen$1[ebp], edx
$LN12@xmlSnprint:

; 1274 : 	    if (size - len < qnameLen + 10) {

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _qnameLen$1[ebp]
	add	ecx, 10					; 0000000aH
	cmp	eax, ecx
	jge	SHORT $LN13@xmlSnprint

; 1275 : 		strcat(buf, " ...");

	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, -1
	mov	DWORD PTR tv377[ebp], edx
$LL45@xmlSnprint:
	mov	eax, DWORD PTR tv377[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv380[ebp], cl
	add	DWORD PTR tv377[ebp], 1
	cmp	BYTE PTR tv380[ebp], 0
	jne	SHORT $LL45@xmlSnprint
	mov	edi, DWORD PTR tv377[ebp]
	mov	edx, DWORD PTR ??_C@_04IBCFJNCN@?5?4?4?4@
	mov	DWORD PTR [edi], edx
	mov	al, BYTE PTR ??_C@_04IBCFJNCN@?5?4?4?4@+4
	mov	BYTE PTR [edi+4], al

; 1276 : 		return;

	jmp	$LN1@xmlSnprint
$LN13@xmlSnprint:

; 1277 : 	    }
; 1278 : 	    if (content->prefix != NULL) {

	mov	ecx, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	$LN14@xmlSnprint

; 1279 : 		strcat(buf, (char *) content->prefix);

	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv391[ebp], eax
	mov	ecx, DWORD PTR tv391[ebp]
	mov	DWORD PTR tv393[ebp], ecx
$LL46@xmlSnprint:
	mov	edx, DWORD PTR tv391[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv396[ebp], al
	add	DWORD PTR tv391[ebp], 1
	cmp	BYTE PTR tv396[ebp], 0
	jne	SHORT $LL46@xmlSnprint
	mov	ecx, DWORD PTR tv391[ebp]
	sub	ecx, DWORD PTR tv393[ebp]
	mov	edx, DWORD PTR tv393[ebp]
	mov	DWORD PTR tv401[ebp], edx
	mov	DWORD PTR tv402[ebp], ecx
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv405[ebp], eax
$LL47@xmlSnprint:
	mov	ecx, DWORD PTR tv405[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv408[ebp], dl
	add	DWORD PTR tv405[ebp], 1
	cmp	BYTE PTR tv408[ebp], 0
	jne	SHORT $LL47@xmlSnprint
	mov	edi, DWORD PTR tv405[ebp]
	mov	esi, DWORD PTR tv401[ebp]
	mov	eax, DWORD PTR tv402[ebp]
	mov	ecx, eax
	shr	ecx, 2
	rep movsd
	mov	ecx, eax
	and	ecx, 3
	rep movsb

; 1280 : 		strcat(buf, ":");

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv424[ebp], ecx
$LL48@xmlSnprint:
	mov	edx, DWORD PTR tv424[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv427[ebp], al
	add	DWORD PTR tv424[ebp], 1
	cmp	BYTE PTR tv427[ebp], 0
	jne	SHORT $LL48@xmlSnprint
	mov	edi, DWORD PTR tv424[ebp]
	mov	cx, WORD PTR ??_C@_01JLIPDDHJ@?3@
	mov	WORD PTR [edi], cx
$LN14@xmlSnprint:

; 1281 : 	    }
; 1282 : 	    if (content->name != NULL)

	mov	edx, DWORD PTR _content$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN15@xmlSnprint

; 1283 : 		strcat(buf, (char *) content->name);

	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv436[ebp], ecx
	mov	edx, DWORD PTR tv436[ebp]
	mov	DWORD PTR tv438[ebp], edx
$LL49@xmlSnprint:
	mov	eax, DWORD PTR tv436[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv441[ebp], cl
	add	DWORD PTR tv436[ebp], 1
	cmp	BYTE PTR tv441[ebp], 0
	jne	SHORT $LL49@xmlSnprint
	mov	edx, DWORD PTR tv436[ebp]
	sub	edx, DWORD PTR tv438[ebp]
	mov	eax, DWORD PTR tv438[ebp]
	mov	DWORD PTR tv446[ebp], eax
	mov	DWORD PTR tv447[ebp], edx
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv450[ebp], ecx
$LL50@xmlSnprint:
	mov	edx, DWORD PTR tv450[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv453[ebp], al
	add	DWORD PTR tv450[ebp], 1
	cmp	BYTE PTR tv453[ebp], 0
	jne	SHORT $LL50@xmlSnprint
	mov	edi, DWORD PTR tv450[ebp]
	mov	esi, DWORD PTR tv446[ebp]
	mov	edx, DWORD PTR tv447[ebp]
	mov	ecx, edx
	shr	ecx, 2
	rep movsd
	mov	ecx, edx
	and	ecx, 3
	rep movsb
$LN15@xmlSnprint:

; 1284 : 	    break;

	jmp	$LN2@xmlSnprint
$LN16@xmlSnprint:

; 1285 :         }
; 1286 : 	case XML_ELEMENT_CONTENT_SEQ:
; 1287 : 	    if ((content->c1->type == XML_ELEMENT_CONTENT_OR) ||

	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN19@xmlSnprint
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax], 3
	jne	SHORT $LN17@xmlSnprint
$LN19@xmlSnprint:

; 1288 : 	        (content->c1->type == XML_ELEMENT_CONTENT_SEQ))
; 1289 : 		xmlSnprintfElementContent(buf, size, content->c1, 1);

	push	1
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H
	jmp	SHORT $LN18@xmlSnprint
$LN17@xmlSnprint:

; 1290 : 	    else
; 1291 : 		xmlSnprintfElementContent(buf, size, content->c1, 0);

	push	0
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H
$LN18@xmlSnprint:

; 1292 : 	    len = strlen(buf);

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv478[ebp], eax
	mov	ecx, DWORD PTR tv478[ebp]
	add	ecx, 1
	mov	DWORD PTR tv481[ebp], ecx
$LL51@xmlSnprint:
	mov	edx, DWORD PTR tv478[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv484[ebp], al
	add	DWORD PTR tv478[ebp], 1
	cmp	BYTE PTR tv484[ebp], 0
	jne	SHORT $LL51@xmlSnprint
	mov	ecx, DWORD PTR tv478[ebp]
	sub	ecx, DWORD PTR tv481[ebp]
	mov	DWORD PTR tv177[ebp], ecx
	mov	edx, DWORD PTR tv177[ebp]
	mov	DWORD PTR _len$[ebp], edx

; 1293 : 	    if (size - len < 50) {

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _len$[ebp]
	cmp	eax, 50					; 00000032H
	jge	SHORT $LN20@xmlSnprint

; 1294 : 		if ((size - len > 4) && (buf[len - 1] != '.'))

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, 4
	jle	SHORT $LN21@xmlSnprint
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	movsx	eax, BYTE PTR [edx-1]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN21@xmlSnprint

; 1295 : 		    strcat(buf, " ...");

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv494[ebp], ecx
$LL52@xmlSnprint:
	mov	edx, DWORD PTR tv494[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv497[ebp], al
	add	DWORD PTR tv494[ebp], 1
	cmp	BYTE PTR tv497[ebp], 0
	jne	SHORT $LL52@xmlSnprint
	mov	edi, DWORD PTR tv494[ebp]
	mov	ecx, DWORD PTR ??_C@_04IBCFJNCN@?5?4?4?4@
	mov	DWORD PTR [edi], ecx
	mov	dl, BYTE PTR ??_C@_04IBCFJNCN@?5?4?4?4@+4
	mov	BYTE PTR [edi+4], dl
$LN21@xmlSnprint:

; 1296 : 		return;

	jmp	$LN1@xmlSnprint
$LN20@xmlSnprint:

; 1297 : 	    }
; 1298 :             strcat(buf, " , ");

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv507[ebp], eax
$LL53@xmlSnprint:
	mov	ecx, DWORD PTR tv507[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv510[ebp], dl
	add	DWORD PTR tv507[ebp], 1
	cmp	BYTE PTR tv510[ebp], 0
	jne	SHORT $LL53@xmlSnprint
	mov	edi, DWORD PTR tv507[ebp]
	mov	eax, DWORD PTR ??_C@_03NKFKBEPL@?5?0?5@
	mov	DWORD PTR [edi], eax

; 1299 : 	    if (((content->c2->type == XML_ELEMENT_CONTENT_OR) ||
; 1300 : 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&

	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 4
	je	SHORT $LN24@xmlSnprint
	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+4], 1
	je	SHORT $LN22@xmlSnprint
$LN24@xmlSnprint:
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 2
	je	SHORT $LN22@xmlSnprint

; 1301 : 		(content->c2->type != XML_ELEMENT_CONTENT_ELEMENT))
; 1302 : 		xmlSnprintfElementContent(buf, size, content->c2, 1);

	push	1
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H
	jmp	SHORT $LN23@xmlSnprint
$LN22@xmlSnprint:

; 1303 : 	    else
; 1304 : 		xmlSnprintfElementContent(buf, size, content->c2, 0);

	push	0
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H
$LN23@xmlSnprint:

; 1305 : 	    break;

	jmp	$LN2@xmlSnprint
$LN25@xmlSnprint:

; 1306 : 	case XML_ELEMENT_CONTENT_OR:
; 1307 : 	    if ((content->c1->type == XML_ELEMENT_CONTENT_OR) ||

	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx], 4
	je	SHORT $LN28@xmlSnprint
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax], 3
	jne	SHORT $LN26@xmlSnprint
$LN28@xmlSnprint:

; 1308 : 	        (content->c1->type == XML_ELEMENT_CONTENT_SEQ))
; 1309 : 		xmlSnprintfElementContent(buf, size, content->c1, 1);

	push	1
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H
	jmp	SHORT $LN27@xmlSnprint
$LN26@xmlSnprint:

; 1310 : 	    else
; 1311 : 		xmlSnprintfElementContent(buf, size, content->c1, 0);

	push	0
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H
$LN27@xmlSnprint:

; 1312 : 	    len = strlen(buf);

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv538[ebp], eax
	mov	ecx, DWORD PTR tv538[ebp]
	add	ecx, 1
	mov	DWORD PTR tv541[ebp], ecx
$LL54@xmlSnprint:
	mov	edx, DWORD PTR tv538[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv544[ebp], al
	add	DWORD PTR tv538[ebp], 1
	cmp	BYTE PTR tv544[ebp], 0
	jne	SHORT $LL54@xmlSnprint
	mov	ecx, DWORD PTR tv538[ebp]
	sub	ecx, DWORD PTR tv541[ebp]
	mov	DWORD PTR tv232[ebp], ecx
	mov	edx, DWORD PTR tv232[ebp]
	mov	DWORD PTR _len$[ebp], edx

; 1313 : 	    if (size - len < 50) {

	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _len$[ebp]
	cmp	eax, 50					; 00000032H
	jge	SHORT $LN29@xmlSnprint

; 1314 : 		if ((size - len > 4) && (buf[len - 1] != '.'))

	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, 4
	jle	SHORT $LN30@xmlSnprint
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _len$[ebp]
	movsx	eax, BYTE PTR [edx-1]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN30@xmlSnprint

; 1315 : 		    strcat(buf, " ...");

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv554[ebp], ecx
$LL55@xmlSnprint:
	mov	edx, DWORD PTR tv554[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv557[ebp], al
	add	DWORD PTR tv554[ebp], 1
	cmp	BYTE PTR tv557[ebp], 0
	jne	SHORT $LL55@xmlSnprint
	mov	edi, DWORD PTR tv554[ebp]
	mov	ecx, DWORD PTR ??_C@_04IBCFJNCN@?5?4?4?4@
	mov	DWORD PTR [edi], ecx
	mov	dl, BYTE PTR ??_C@_04IBCFJNCN@?5?4?4?4@+4
	mov	BYTE PTR [edi+4], dl
$LN30@xmlSnprint:

; 1316 : 		return;

	jmp	$LN1@xmlSnprint
$LN29@xmlSnprint:

; 1317 : 	    }
; 1318 :             strcat(buf, " | ");

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv567[ebp], eax
$LL56@xmlSnprint:
	mov	ecx, DWORD PTR tv567[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv570[ebp], dl
	add	DWORD PTR tv567[ebp], 1
	cmp	BYTE PTR tv570[ebp], 0
	jne	SHORT $LL56@xmlSnprint
	mov	edi, DWORD PTR tv567[ebp]
	mov	eax, DWORD PTR ??_C@_03LGOGDKEL@?5?$HM?5@
	mov	DWORD PTR [edi], eax

; 1319 : 	    if (((content->c2->type == XML_ELEMENT_CONTENT_SEQ) ||
; 1320 : 		 (content->c2->ocur != XML_ELEMENT_CONTENT_ONCE)) &&

	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN33@xmlSnprint
	mov	eax, DWORD PTR _content$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	DWORD PTR [ecx+4], 1
	je	SHORT $LN31@xmlSnprint
$LN33@xmlSnprint:
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+16]
	cmp	DWORD PTR [eax], 2
	je	SHORT $LN31@xmlSnprint

; 1321 : 		(content->c2->type != XML_ELEMENT_CONTENT_ELEMENT))
; 1322 : 		xmlSnprintfElementContent(buf, size, content->c2, 1);

	push	1
	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H
	jmp	SHORT $LN2@xmlSnprint
$LN31@xmlSnprint:

; 1323 : 	    else
; 1324 : 		xmlSnprintfElementContent(buf, size, content->c2, 0);

	push	0
	mov	edx, DWORD PTR _content$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlSnprintfElementContent
	add	esp, 16					; 00000010H
$LN2@xmlSnprint:

; 1325 : 	    break;
; 1326 :     }
; 1327 :     if (size - strlen(buf) <= 2) return;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR tv588[ebp], eax
	mov	ecx, DWORD PTR tv588[ebp]
	add	ecx, 1
	mov	DWORD PTR tv591[ebp], ecx
$LL57@xmlSnprint:
	mov	edx, DWORD PTR tv588[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR tv594[ebp], al
	add	DWORD PTR tv588[ebp], 1
	cmp	BYTE PTR tv594[ebp], 0
	jne	SHORT $LL57@xmlSnprint
	mov	ecx, DWORD PTR tv588[ebp]
	sub	ecx, DWORD PTR tv591[ebp]
	mov	DWORD PTR tv273[ebp], ecx
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, DWORD PTR tv273[ebp]
	cmp	edx, 2
	ja	SHORT $LN34@xmlSnprint
	jmp	$LN1@xmlSnprint
$LN34@xmlSnprint:

; 1328 :     if (englob)

	cmp	DWORD PTR _englob$[ebp], 0
	je	SHORT $LN35@xmlSnprint

; 1329 :         strcat(buf, ")");

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv601[ebp], eax
$LL58@xmlSnprint:
	mov	ecx, DWORD PTR tv601[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv604[ebp], dl
	add	DWORD PTR tv601[ebp], 1
	cmp	BYTE PTR tv604[ebp], 0
	jne	SHORT $LL58@xmlSnprint
	mov	edi, DWORD PTR tv601[ebp]
	mov	ax, WORD PTR ??_C@_01PKGAHCOL@?$CJ@
	mov	WORD PTR [edi], ax
$LN35@xmlSnprint:

; 1330 :     switch (content->ocur) {

	mov	ecx, DWORD PTR _content$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv282[ebp], edx
	cmp	DWORD PTR tv282[ebp], 2
	je	SHORT $LN37@xmlSnprint
	cmp	DWORD PTR tv282[ebp], 3
	je	SHORT $LN38@xmlSnprint
	cmp	DWORD PTR tv282[ebp], 4
	je	$LN39@xmlSnprint
	jmp	$LN1@xmlSnprint

; 1331 :         case XML_ELEMENT_CONTENT_ONCE:
; 1332 : 	    break;

	jmp	$LN1@xmlSnprint
$LN37@xmlSnprint:

; 1333 :         case XML_ELEMENT_CONTENT_OPT:
; 1334 : 	    strcat(buf, "?");

	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, -1
	mov	DWORD PTR tv614[ebp], eax
$LL59@xmlSnprint:
	mov	ecx, DWORD PTR tv614[ebp]
	mov	dl, BYTE PTR [ecx+1]
	mov	BYTE PTR tv617[ebp], dl
	add	DWORD PTR tv614[ebp], 1
	cmp	BYTE PTR tv617[ebp], 0
	jne	SHORT $LL59@xmlSnprint
	mov	edi, DWORD PTR tv614[ebp]
	mov	ax, WORD PTR ??_C@_01OGPIMHDM@?$DP@
	mov	WORD PTR [edi], ax

; 1335 : 	    break;

	jmp	SHORT $LN1@xmlSnprint
$LN38@xmlSnprint:

; 1336 :         case XML_ELEMENT_CONTENT_MULT:
; 1337 : 	    strcat(buf, "*");

	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, -1
	mov	DWORD PTR tv625[ebp], ecx
$LL60@xmlSnprint:
	mov	edx, DWORD PTR tv625[ebp]
	mov	al, BYTE PTR [edx+1]
	mov	BYTE PTR tv628[ebp], al
	add	DWORD PTR tv625[ebp], 1
	cmp	BYTE PTR tv628[ebp], 0
	jne	SHORT $LL60@xmlSnprint
	mov	edi, DWORD PTR tv625[ebp]
	mov	cx, WORD PTR ??_C@_01NBENCBCI@?$CK@
	mov	WORD PTR [edi], cx

; 1338 : 	    break;

	jmp	SHORT $LN1@xmlSnprint
$LN39@xmlSnprint:

; 1339 :         case XML_ELEMENT_CONTENT_PLUS:
; 1340 : 	    strcat(buf, "+");

	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, -1
	mov	DWORD PTR tv636[ebp], edx
$LL61@xmlSnprint:
	mov	eax, DWORD PTR tv636[ebp]
	mov	cl, BYTE PTR [eax+1]
	mov	BYTE PTR tv639[ebp], cl
	add	DWORD PTR tv636[ebp], 1
	cmp	BYTE PTR tv639[ebp], 0
	jne	SHORT $LL61@xmlSnprint
	mov	edi, DWORD PTR tv636[ebp]
	mov	dx, WORD PTR ??_C@_01MIFGBAGJ@?$CL@
	mov	WORD PTR [edi], dx
$LN1@xmlSnprint:

; 1341 : 	    break;
; 1342 :     }
; 1343 : }

	pop	edi
	pop	esi
	add	esp, 240				; 000000f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN62@xmlSnprint:
	DD	$LN10@xmlSnprint
	DD	$LN11@xmlSnprint
	DD	$LN16@xmlSnprint
	DD	$LN25@xmlSnprint
_xmlSnprintfElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeDocElementContent
_TEXT	SEGMENT
tv69 = -12						; size = 4
_dict$ = -8						; size = 4
_next$ = -4						; size = 4
_doc$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlFreeDocElementContent PROC				; COMDAT

; 1101 : xmlFreeDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1102 :     xmlElementContentPtr next;
; 1103 :     xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0

; 1104 : 
; 1105 :     if (doc != NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN2@xmlFreeDoc

; 1106 :         dict = doc->dict;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _dict$[ebp], ecx
$LN2@xmlFreeDoc:

; 1107 : 
; 1108 :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN1@xmlFreeDoc

; 1109 :         next = cur->c2;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _next$[ebp], eax

; 1110 : 	switch (cur->type) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv69[ebp], edx
	cmp	DWORD PTR tv69[ebp], 0
	jle	SHORT $LN8@xmlFreeDoc
	cmp	DWORD PTR tv69[ebp], 4
	jle	SHORT $LN7@xmlFreeDoc
	jmp	SHORT $LN8@xmlFreeDoc
$LN7@xmlFreeDoc:

; 1111 : 	    case XML_ELEMENT_CONTENT_PCDATA:
; 1112 : 	    case XML_ELEMENT_CONTENT_ELEMENT:
; 1113 : 	    case XML_ELEMENT_CONTENT_SEQ:
; 1114 : 	    case XML_ELEMENT_CONTENT_OR:
; 1115 : 		break;

	jmp	SHORT $LN4@xmlFreeDoc
$LN8@xmlFreeDoc:

; 1116 : 	    default:
; 1117 : 		xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0DC@GLPLFDD@Internal?3?5ELEMENT?5content?5corru@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 1118 : 			"Internal: ELEMENT content corrupted invalid type\n",
; 1119 : 			NULL);
; 1120 : 		return;

	jmp	$LN1@xmlFreeDoc
$LN4@xmlFreeDoc:

; 1121 : 	}
; 1122 : 	if (cur->c1 != NULL) xmlFreeDocElementContent(doc, cur->c1);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN9@xmlFreeDoc
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlFreeDocElementContent
	add	esp, 8
$LN9@xmlFreeDoc:

; 1123 : 	if (dict) {

	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN10@xmlFreeDoc

; 1124 : 	    if ((cur->name != NULL) && (!xmlDictOwns(dict, cur->name)))

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN12@xmlFreeDoc
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _dict$[ebp]
	push	ecx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@xmlFreeDoc

; 1125 : 	        xmlFree((xmlChar *) cur->name);

	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlFreeDoc:

; 1126 : 	    if ((cur->prefix != NULL) && (!xmlDictOwns(dict, cur->prefix)))

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN13@xmlFreeDoc
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _dict$[ebp]
	push	ecx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@xmlFreeDoc

; 1127 : 	        xmlFree((xmlChar *) cur->prefix);

	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlFreeDoc:

; 1128 : 	} else {

	jmp	SHORT $LN11@xmlFreeDoc
$LN10@xmlFreeDoc:

; 1129 : 	    if (cur->name != NULL) xmlFree((xmlChar *) cur->name);

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN14@xmlFreeDoc
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@xmlFreeDoc:

; 1130 : 	    if (cur->prefix != NULL) xmlFree((xmlChar *) cur->prefix);

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN11@xmlFreeDoc
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlFreeDoc:

; 1131 : 	}
; 1132 : 	xmlFree(cur);

	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1133 : 	cur = next;

	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _cur$[ebp], edx

; 1134 :     }

	jmp	$LN2@xmlFreeDoc
$LN1@xmlFreeDoc:

; 1135 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlFreeDocElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCopyDocElementContent
_TEXT	SEGMENT
_dict$ = -16						; size = 4
_tmp$ = -12						; size = 4
_prev$ = -8						; size = 4
_ret$ = -4						; size = 4
_doc$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlCopyDocElementContent PROC				; COMDAT

; 1008 : xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1009 :     xmlElementContentPtr ret = NULL, prev = NULL, tmp;

	mov	DWORD PTR _ret$[ebp], 0
	mov	DWORD PTR _prev$[ebp], 0

; 1010 :     xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0

; 1011 : 
; 1012 :     if (cur == NULL) return(NULL);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN4@xmlCopyDoc
	xor	eax, eax
	jmp	$LN1@xmlCopyDoc
$LN4@xmlCopyDoc:

; 1013 : 
; 1014 :     if (doc != NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN5@xmlCopyDoc

; 1015 :         dict = doc->dict;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _dict$[ebp], ecx
$LN5@xmlCopyDoc:

; 1016 : 
; 1017 :     ret = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));

	mov	esi, esp
	push	28					; 0000001cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 1018 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN6@xmlCopyDoc

; 1019 : 	xmlVErrMemory(NULL, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 1020 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlCopyDoc
$LN6@xmlCopyDoc:

; 1021 :     }
; 1022 :     memset(ret, 0, sizeof(xmlElementContent));

	xor	edx, edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], edx
	mov	DWORD PTR [eax+24], edx

; 1023 :     ret->type = cur->type;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 1024 :     ret->ocur = cur->ocur;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 1025 :     if (cur->name != NULL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN7@xmlCopyDoc

; 1026 : 	if (dict)

	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN8@xmlCopyDoc

; 1027 : 	    ret->name = xmlDictLookup(dict, cur->name, -1);

	push	-1
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _dict$[ebp]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], eax
	jmp	SHORT $LN7@xmlCopyDoc
$LN8@xmlCopyDoc:

; 1028 : 	else
; 1029 : 	    ret->name = xmlStrdup(cur->name);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN7@xmlCopyDoc:

; 1030 :     }
; 1031 : 
; 1032 :     if (cur->prefix != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN10@xmlCopyDoc

; 1033 : 	if (dict)

	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN11@xmlCopyDoc

; 1034 : 	    ret->prefix = xmlDictLookup(dict, cur->prefix, -1);

	push	-1
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _dict$[ebp]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], eax
	jmp	SHORT $LN10@xmlCopyDoc
$LN11@xmlCopyDoc:

; 1035 : 	else
; 1036 : 	    ret->prefix = xmlStrdup(cur->prefix);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN10@xmlCopyDoc:

; 1037 :     }
; 1038 :     if (cur->c1 != NULL)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN13@xmlCopyDoc

; 1039 :         ret->c1 = xmlCopyDocElementContent(doc, cur->c1);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlCopyDocElementContent
	add	esp, 8
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN13@xmlCopyDoc:

; 1040 :     if (ret->c1 != NULL)

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN14@xmlCopyDoc

; 1041 : 	ret->c1->parent = ret;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN14@xmlCopyDoc:

; 1042 :     if (cur->c2 != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN15@xmlCopyDoc

; 1043 :         prev = ret;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR _prev$[ebp], ecx

; 1044 : 	cur = cur->c2;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@xmlCopyDoc:

; 1045 : 	while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN15@xmlCopyDoc

; 1046 : 	    tmp = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));

	mov	esi, esp
	push	28					; 0000001cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$[ebp], eax

; 1047 : 	    if (tmp == NULL) {

	cmp	DWORD PTR _tmp$[ebp], 0
	jne	SHORT $LN16@xmlCopyDoc

; 1048 : 		xmlVErrMemory(NULL, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 1049 : 		return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlCopyDoc
$LN16@xmlCopyDoc:

; 1050 : 	    }
; 1051 : 	    memset(tmp, 0, sizeof(xmlElementContent));

	xor	ecx, ecx
	mov	edx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], ecx
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR [edx+16], ecx
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR [edx+24], ecx

; 1052 : 	    tmp->type = cur->type;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx

; 1053 : 	    tmp->ocur = cur->ocur;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx

; 1054 : 	    prev->c2 = tmp;

	mov	eax, DWORD PTR _prev$[ebp]
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 1055 : 	    if (cur->name != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN17@xmlCopyDoc

; 1056 : 		if (dict)

	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN18@xmlCopyDoc

; 1057 : 		    tmp->name = xmlDictLookup(dict, cur->name, -1);

	push	-1
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [ecx+8], eax
	jmp	SHORT $LN17@xmlCopyDoc
$LN18@xmlCopyDoc:

; 1058 : 		else
; 1059 : 		    tmp->name = xmlStrdup(cur->name);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN17@xmlCopyDoc:

; 1060 : 	    }
; 1061 : 
; 1062 : 	    if (cur->prefix != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN20@xmlCopyDoc

; 1063 : 		if (dict)

	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN21@xmlCopyDoc

; 1064 : 		    tmp->prefix = xmlDictLookup(dict, cur->prefix, -1);

	push	-1
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [ecx+24], eax
	jmp	SHORT $LN20@xmlCopyDoc
$LN21@xmlCopyDoc:

; 1065 : 		else
; 1066 : 		    tmp->prefix = xmlStrdup(cur->prefix);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [ecx+24], eax
$LN20@xmlCopyDoc:

; 1067 : 	    }
; 1068 : 	    if (cur->c1 != NULL)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN23@xmlCopyDoc

; 1069 : 	        tmp->c1 = xmlCopyDocElementContent(doc,cur->c1);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlCopyDocElementContent
	add	esp, 8
	mov	ecx, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN23@xmlCopyDoc:

; 1070 : 	    if (tmp->c1 != NULL)

	mov	edx, DWORD PTR _tmp$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN24@xmlCopyDoc

; 1071 : 		tmp->c1->parent = ret;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], edx
$LN24@xmlCopyDoc:

; 1072 : 	    prev = tmp;

	mov	eax, DWORD PTR _tmp$[ebp]
	mov	DWORD PTR _prev$[ebp], eax

; 1073 : 	    cur = cur->c2;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _cur$[ebp], edx

; 1074 : 	}

	jmp	$LN2@xmlCopyDoc
$LN15@xmlCopyDoc:

; 1075 :     }
; 1076 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlCopyDoc:

; 1077 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlCopyDocElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlNewDocElementContent
_TEXT	SEGMENT
tv66 = -28						; size = 4
_tmp$1 = -24						; size = 4
_l$2 = -16						; size = 4
_dict$ = -8						; size = 4
_ret$ = -4						; size = 4
_doc$ = 8						; size = 4
_name$ = 12						; size = 4
_type$ = 16						; size = 4
_xmlNewDocElementContent PROC				; COMDAT

; 922  :                         xmlElementContentType type) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 923  :     xmlElementContentPtr ret;
; 924  :     xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0

; 925  : 
; 926  :     if (doc != NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	je	SHORT $LN4@xmlNewDocE

; 927  :         dict = doc->dict;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _dict$[ebp], ecx
$LN4@xmlNewDocE:

; 928  : 
; 929  :     switch(type) {

	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR tv66[ebp], edx
	mov	eax, DWORD PTR tv66[ebp]
	sub	eax, 1
	mov	DWORD PTR tv66[ebp], eax
	cmp	DWORD PTR tv66[ebp], 3
	ja	SHORT $LN9@xmlNewDocE
	mov	ecx, DWORD PTR tv66[ebp]
	jmp	DWORD PTR $LN22@xmlNewDocE[ecx*4]
$LN5@xmlNewDocE:

; 930  : 	case XML_ELEMENT_CONTENT_ELEMENT:
; 931  : 	    if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN6@xmlNewDocE

; 932  : 	        xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0CH@ODCBAOPP@xmlNewElementContent?5?3?5name?5?$DN?$DN?5@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H
$LN6@xmlNewDocE:

; 933  : 			"xmlNewElementContent : name == NULL !\n",
; 934  : 			NULL);
; 935  : 	    }
; 936  : 	    break;

	jmp	SHORT $LN2@xmlNewDocE
$LN7@xmlNewDocE:

; 937  :         case XML_ELEMENT_CONTENT_PCDATA:
; 938  : 	case XML_ELEMENT_CONTENT_SEQ:
; 939  : 	case XML_ELEMENT_CONTENT_OR:
; 940  : 	    if (name != NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	je	SHORT $LN8@xmlNewDocE

; 941  : 	        xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0CH@EHMNFIPD@xmlNewElementContent?5?3?5name?5?$CB?$DN?5@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H
$LN8@xmlNewDocE:

; 942  : 			"xmlNewElementContent : name != NULL !\n",
; 943  : 			NULL);
; 944  : 	    }
; 945  : 	    break;

	jmp	SHORT $LN2@xmlNewDocE
$LN9@xmlNewDocE:

; 946  : 	default:
; 947  : 	    xmlErrValid(NULL, XML_ERR_INTERNAL_ERROR,

	push	0
	push	OFFSET ??_C@_0DC@GLPLFDD@Internal?3?5ELEMENT?5content?5corru@
	push	1
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 948  : 		    "Internal: ELEMENT content corrupted invalid type\n",
; 949  : 		    NULL);
; 950  : 	    return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlNewDocE
$LN2@xmlNewDocE:

; 951  :     }
; 952  :     ret = (xmlElementContentPtr) xmlMalloc(sizeof(xmlElementContent));

	mov	esi, esp
	push	28					; 0000001cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 953  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN10@xmlNewDocE

; 954  : 	xmlVErrMemory(NULL, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	push	0
	call	_xmlVErrMemory
	add	esp, 8

; 955  : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlNewDocE
$LN10@xmlNewDocE:

; 956  :     }
; 957  :     memset(ret, 0, sizeof(xmlElementContent));

	xor	edx, edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], edx
	mov	DWORD PTR [eax+24], edx

; 958  :     ret->type = type;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [ecx], edx

; 959  :     ret->ocur = XML_ELEMENT_CONTENT_ONCE;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+4], 1

; 960  :     if (name != NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	je	$LN11@xmlNewDocE

; 961  :         int l;
; 962  : 	const xmlChar *tmp;
; 963  : 
; 964  : 	tmp = xmlSplitQName3(name, &l);

	lea	ecx, DWORD PTR _l$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlSplitQName3
	add	esp, 8
	mov	DWORD PTR _tmp$1[ebp], eax

; 965  : 	if (tmp == NULL) {

	cmp	DWORD PTR _tmp$1[ebp], 0
	jne	SHORT $LN12@xmlNewDocE

; 966  : 	    if (dict == NULL)

	cmp	DWORD PTR _dict$[ebp], 0
	jne	SHORT $LN14@xmlNewDocE

; 967  : 		ret->name = xmlStrdup(name);

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], eax
	jmp	SHORT $LN15@xmlNewDocE
$LN14@xmlNewDocE:

; 968  : 	    else
; 969  : 	        ret->name = xmlDictLookup(dict, name, -1);

	push	-1
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _dict$[ebp]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN15@xmlNewDocE:

; 970  : 	} else {

	jmp	SHORT $LN11@xmlNewDocE
$LN12@xmlNewDocE:

; 971  : 	    if (dict == NULL) {

	cmp	DWORD PTR _dict$[ebp], 0
	jne	SHORT $LN16@xmlNewDocE

; 972  : 		ret->prefix = xmlStrndup(name, l);

	mov	edx, DWORD PTR _l$2[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrndup
	add	esp, 8
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 973  : 		ret->name = xmlStrdup(tmp);

	mov	edx, DWORD PTR _tmp$1[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 974  : 	    } else {

	jmp	SHORT $LN11@xmlNewDocE
$LN16@xmlNewDocE:

; 975  : 	        ret->prefix = xmlDictLookup(dict, name, l);

	mov	edx, DWORD PTR _l$2[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dict$[ebp]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], eax

; 976  : 		ret->name = xmlDictLookup(dict, tmp, -1);

	push	-1
	mov	eax, DWORD PTR _tmp$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _dict$[ebp]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN11@xmlNewDocE:

; 977  : 	    }
; 978  : 	}
; 979  :     }
; 980  :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlNewDocE:

; 981  : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@xmlNewDocE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN21@xmlNewDocE:
	DD	1
	DD	$LN20@xmlNewDocE
$LN20@xmlNewDocE:
	DD	-16					; fffffff0H
	DD	4
	DD	$LN19@xmlNewDocE
$LN19@xmlNewDocE:
	DB	108					; 0000006cH
	DB	0
	npad	2
$LN22@xmlNewDocE:
	DD	$LN7@xmlNewDocE
	DD	$LN5@xmlNewDocE
	DD	$LN7@xmlNewDocE
	DD	$LN7@xmlNewDocE
_xmlNewDocElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeElementContent
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_xmlFreeElementContent PROC				; COMDAT

; 1145 : xmlFreeElementContent(xmlElementContentPtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1146 :     xmlFreeDocElementContent(NULL, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	push	0
	call	_xmlFreeDocElementContent
	add	esp, 8

; 1147 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCopyElementContent
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_xmlCopyElementContent PROC				; COMDAT

; 1089 : xmlCopyElementContent(xmlElementContentPtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 1090 :     return(xmlCopyDocElementContent(NULL, cur));

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	push	0
	call	_xmlCopyDocElementContent
	add	esp, 8

; 1091 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlCopyElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlNewElementContent
_TEXT	SEGMENT
_name$ = 8						; size = 4
_type$ = 12						; size = 4
_xmlNewElementContent PROC				; COMDAT

; 994  : xmlNewElementContent(const xmlChar *name, xmlElementContentType type) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 995  :     return(xmlNewDocElementContent(NULL, name, type));

	mov	eax, DWORD PTR _type$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	push	0
	call	_xmlNewDocElementContent
	add	esp, 12					; 0000000cH

; 996  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlNewElementContent ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpNotationTable
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_table$ = 12						; size = 4
_xmlDumpNotationTable PROC				; COMDAT

; 2543 : xmlDumpNotationTable(xmlBufferPtr buf, xmlNotationTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2544 :     if ((buf == NULL) || (table == NULL))

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN3@xmlDumpNot
	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN2@xmlDumpNot
$LN3@xmlDumpNot:

; 2545 :         return;

	jmp	SHORT $LN1@xmlDumpNot
$LN2@xmlDumpNot:

; 2546 :     xmlHashScan(table, xmlDumpNotationDeclScan, buf);

	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	OFFSET _xmlDumpNotationDeclScan
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_xmlHashScan
	add	esp, 12					; 0000000cH
$LN1@xmlDumpNot:

; 2547 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDumpNotationTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlDumpNotationDecl
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_nota$ = 12						; size = 4
_xmlDumpNotationDecl PROC				; COMDAT

; 2503 : xmlDumpNotationDecl(xmlBufferPtr buf, xmlNotationPtr nota) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2504 :     if ((buf == NULL) || (nota == NULL))

	cmp	DWORD PTR _buf$[ebp], 0
	je	SHORT $LN3@xmlDumpNot
	cmp	DWORD PTR _nota$[ebp], 0
	jne	SHORT $LN2@xmlDumpNot
$LN3@xmlDumpNot:

; 2505 :         return;

	jmp	$LN1@xmlDumpNot
$LN2@xmlDumpNot:

; 2506 :     xmlBufferWriteChar(buf, "<!NOTATION ");

	push	OFFSET ??_C@_0M@IOFINGOM@?$DM?$CBNOTATION?5@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8

; 2507 :     xmlBufferWriteCHAR(buf, nota->name);

	mov	ecx, DWORD PTR _nota$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteCHAR
	add	esp, 8

; 2508 :     if (nota->PublicID != NULL) {

	mov	ecx, DWORD PTR _nota$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN4@xmlDumpNot

; 2509 : 	xmlBufferWriteChar(buf, " PUBLIC ");

	push	OFFSET ??_C@_08GBBLECIH@?5PUBLIC?5@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2510 : 	xmlBufferWriteQuotedString(buf, nota->PublicID);

	mov	eax, DWORD PTR _nota$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteQuotedString
	add	esp, 8

; 2511 : 	if (nota->SystemID != NULL) {

	mov	eax, DWORD PTR _nota$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN6@xmlDumpNot

; 2512 : 	    xmlBufferWriteChar(buf, " ");

	push	OFFSET ??_C@_01CLKCMJKC@?5@
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2513 : 	    xmlBufferWriteQuotedString(buf, nota->SystemID);

	mov	edx, DWORD PTR _nota$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlBufferWriteQuotedString
	add	esp, 8
$LN6@xmlDumpNot:

; 2514 : 	}
; 2515 :     } else {

	jmp	SHORT $LN5@xmlDumpNot
$LN4@xmlDumpNot:

; 2516 : 	xmlBufferWriteChar(buf, " SYSTEM ");

	push	OFFSET ??_C@_08PAGGLANP@?5SYSTEM?5@
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteChar
	add	esp, 8

; 2517 : 	xmlBufferWriteQuotedString(buf, nota->SystemID);

	mov	eax, DWORD PTR _nota$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_xmlBufferWriteQuotedString
	add	esp, 8
$LN5@xmlDumpNot:

; 2518 :     }
; 2519 :     xmlBufferWriteChar(buf, " >\n");

	push	OFFSET ??_C@_03KKJDKPMN@?5?$DO?6@
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlBufferWriteChar
	add	esp, 8
$LN1@xmlDumpNot:

; 2520 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlDumpNotationDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlFreeNotationTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_xmlFreeNotationTable PROC				; COMDAT

; 2442 : xmlFreeNotationTable(xmlNotationTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2443 :     xmlHashFree(table, xmlFreeNotationTableEntry);

	push	OFFSET _xmlFreeNotationTableEntry
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashFree
	add	esp, 8

; 2444 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlFreeNotationTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlCopyNotationTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_xmlCopyNotationTable PROC				; COMDAT

; 2489 : xmlCopyNotationTable(xmlNotationTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2490 :     return((xmlNotationTablePtr) xmlHashCopy(table, xmlCopyNotation));

	push	OFFSET _xmlCopyNotation
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashCopy
	add	esp, 8

; 2491 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlCopyNotationTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\valid.c
;	COMDAT _xmlAddNotationDecl
_TEXT	SEGMENT
_dict$1 = -12						; size = 4
_table$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_dtd$ = 12						; size = 4
_name$ = 16						; size = 4
_PublicID$ = 20						; size = 4
_SystemID$ = 24						; size = 4
_xmlAddNotationDecl PROC				; COMDAT

; 2367 :                    const xmlChar *PublicID, const xmlChar *SystemID) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __56F63275_valid@c
	call	@__CheckForDebuggerJustMyCode@4

; 2368 :     xmlNotationPtr ret;
; 2369 :     xmlNotationTablePtr table;
; 2370 : 
; 2371 :     if (dtd == NULL) {

	cmp	DWORD PTR _dtd$[ebp], 0
	jne	SHORT $LN2@xmlAddNota

; 2372 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddNota
$LN2@xmlAddNota:

; 2373 :     }
; 2374 :     if (name == NULL) {

	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN3@xmlAddNota

; 2375 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddNota
$LN3@xmlAddNota:

; 2376 :     }
; 2377 :     if ((PublicID == NULL) && (SystemID == NULL)) {

	cmp	DWORD PTR _PublicID$[ebp], 0
	jne	SHORT $LN4@xmlAddNota
	cmp	DWORD PTR _SystemID$[ebp], 0
	jne	SHORT $LN4@xmlAddNota

; 2378 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddNota
$LN4@xmlAddNota:

; 2379 :     }
; 2380 : 
; 2381 :     /*
; 2382 :      * Create the Notation table if needed.
; 2383 :      */
; 2384 :     table = (xmlNotationTablePtr) dtd->notations;

	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _table$[ebp], ecx

; 2385 :     if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN5@xmlAddNota

; 2386 : 	xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$1[ebp], 0

; 2387 : 	if (dtd->doc != NULL)

	mov	edx, DWORD PTR _dtd$[ebp]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN6@xmlAddNota

; 2388 : 	    dict = dtd->doc->dict;

	mov	eax, DWORD PTR _dtd$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR _dict$1[ebp], edx
$LN6@xmlAddNota:

; 2389 : 
; 2390 :         dtd->notations = table = xmlHashCreateDict(0, dict);

	mov	eax, DWORD PTR _dict$1[ebp]
	push	eax
	push	0
	call	_xmlHashCreateDict
	add	esp, 8
	mov	DWORD PTR _table$[ebp], eax
	mov	ecx, DWORD PTR _dtd$[ebp]
	mov	edx, DWORD PTR _table$[ebp]
	mov	DWORD PTR [ecx+36], edx
$LN5@xmlAddNota:

; 2391 :     }
; 2392 :     if (table == NULL) {

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN7@xmlAddNota

; 2393 : 	xmlVErrMemory(ctxt,

	push	OFFSET ??_C@_0CM@PJBPJANJ@xmlAddNotationDecl?3?5Table?5creat@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlVErrMemory
	add	esp, 8

; 2394 : 		"xmlAddNotationDecl: Table creation failed!\n");
; 2395 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddNota
$LN7@xmlAddNota:

; 2396 :     }
; 2397 : 
; 2398 :     ret = (xmlNotationPtr) xmlMalloc(sizeof(xmlNotation));

	mov	esi, esp
	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 2399 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN8@xmlAddNota

; 2400 : 	xmlVErrMemory(ctxt, "malloc failed");

	push	OFFSET ??_C@_0O@IMHFIAOC@malloc?5failed@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlVErrMemory
	add	esp, 8

; 2401 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlAddNota
$LN8@xmlAddNota:

; 2402 :     }
; 2403 :     memset(ret, 0, sizeof(xmlNotation));

	xor	edx, edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx

; 2404 : 
; 2405 :     /*
; 2406 :      * fill the structure.
; 2407 :      */
; 2408 :     ret->name = xmlStrdup(name);

	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], eax

; 2409 :     if (SystemID != NULL)

	cmp	DWORD PTR _SystemID$[ebp], 0
	je	SHORT $LN9@xmlAddNota

; 2410 :         ret->SystemID = xmlStrdup(SystemID);

	mov	eax, DWORD PTR _SystemID$[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN9@xmlAddNota:

; 2411 :     if (PublicID != NULL)

	cmp	DWORD PTR _PublicID$[ebp], 0
	je	SHORT $LN10@xmlAddNota

; 2412 :         ret->PublicID = xmlStrdup(PublicID);

	mov	edx, DWORD PTR _PublicID$[ebp]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN10@xmlAddNota:

; 2413 : 
; 2414 :     /*
; 2415 :      * Validity Check:
; 2416 :      * Check the DTD for previous declarations of the ATTLIST
; 2417 :      */
; 2418 :     if (xmlHashAddEntry(table, name, ret)) {

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _table$[ebp]
	push	ecx
	call	_xmlHashAddEntry
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN11@xmlAddNota

; 2419 : #ifdef LIBXML_VALID_ENABLED
; 2420 : 	xmlErrValid(NULL, XML_DTD_NOTATION_REDEFINED,

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	push	OFFSET ??_C@_0CI@HFJJKKEO@xmlAddNotationDecl?3?5?$CFs?5already?5@
	push	526					; 0000020eH
	push	0
	call	_xmlErrValid
	add	esp, 16					; 00000010H

; 2421 : 		    "xmlAddNotationDecl: %s already defined\n",
; 2422 : 		    (const char *) name);
; 2423 : #endif /* LIBXML_VALID_ENABLED */
; 2424 : 	xmlFreeNotation(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlFreeNotation
	add	esp, 4

; 2425 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlAddNota
$LN11@xmlAddNota:

; 2426 :     }
; 2427 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlAddNota:

; 2428 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlAddNotationDecl ENDP
_TEXT	ENDS
END
