; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\xmlreader.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_xmlIsBaseCharGroup:BYTE:010H
COMM	_xmlIsCharGroup:BYTE:010H
COMM	_xmlIsCombiningGroup:BYTE:010H
COMM	_xmlIsDigitGroup:BYTE:010H
COMM	_xmlIsExtenderGroup:BYTE:010H
COMM	_xmlIsIdeographicGroup:BYTE:010H
COMM	_xmlIsPubidChar_tab:BYTE:0100H
COMM	_xmlParserMaxDepth:DWORD
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__7B7A869E_ctype@h DB 01H
__BC13D883_xmlreader@c DB 01H
msvcjmc	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_printf
PUBLIC	_xmlNewTextReader
PUBLIC	_xmlNewTextReaderFilename
PUBLIC	_xmlFreeTextReader
PUBLIC	_xmlTextReaderSetup
PUBLIC	_xmlTextReaderRead
PUBLIC	_xmlTextReaderReadInnerXml
PUBLIC	_xmlTextReaderReadOuterXml
PUBLIC	_xmlTextReaderReadString
PUBLIC	_xmlTextReaderReadAttributeValue
PUBLIC	_xmlTextReaderAttributeCount
PUBLIC	_xmlTextReaderDepth
PUBLIC	_xmlTextReaderHasAttributes
PUBLIC	_xmlTextReaderHasValue
PUBLIC	_xmlTextReaderIsDefault
PUBLIC	_xmlTextReaderIsEmptyElement
PUBLIC	_xmlTextReaderNodeType
PUBLIC	_xmlTextReaderQuoteChar
PUBLIC	_xmlTextReaderReadState
PUBLIC	_xmlTextReaderIsNamespaceDecl
PUBLIC	_xmlTextReaderConstBaseUri
PUBLIC	_xmlTextReaderConstLocalName
PUBLIC	_xmlTextReaderConstName
PUBLIC	_xmlTextReaderConstNamespaceUri
PUBLIC	_xmlTextReaderConstPrefix
PUBLIC	_xmlTextReaderConstXmlLang
PUBLIC	_xmlTextReaderConstString
PUBLIC	_xmlTextReaderConstValue
PUBLIC	_xmlTextReaderBaseUri
PUBLIC	_xmlTextReaderLocalName
PUBLIC	_xmlTextReaderName
PUBLIC	_xmlTextReaderNamespaceUri
PUBLIC	_xmlTextReaderPrefix
PUBLIC	_xmlTextReaderXmlLang
PUBLIC	_xmlTextReaderValue
PUBLIC	_xmlTextReaderClose
PUBLIC	_xmlTextReaderGetAttributeNo
PUBLIC	_xmlTextReaderGetAttribute
PUBLIC	_xmlTextReaderGetAttributeNs
PUBLIC	_xmlTextReaderGetRemainder
PUBLIC	_xmlTextReaderLookupNamespace
PUBLIC	_xmlTextReaderMoveToAttributeNo
PUBLIC	_xmlTextReaderMoveToAttribute
PUBLIC	_xmlTextReaderMoveToAttributeNs
PUBLIC	_xmlTextReaderMoveToFirstAttribute
PUBLIC	_xmlTextReaderMoveToNextAttribute
PUBLIC	_xmlTextReaderMoveToElement
PUBLIC	_xmlTextReaderNormalization
PUBLIC	_xmlTextReaderConstEncoding
PUBLIC	_xmlTextReaderSetParserProp
PUBLIC	_xmlTextReaderGetParserProp
PUBLIC	_xmlTextReaderCurrentNode
PUBLIC	_xmlTextReaderGetParserLineNumber
PUBLIC	_xmlTextReaderGetParserColumnNumber
PUBLIC	_xmlTextReaderPreserve
PUBLIC	_xmlTextReaderPreservePattern
PUBLIC	_xmlTextReaderCurrentDoc
PUBLIC	_xmlTextReaderExpand
PUBLIC	_xmlTextReaderNext
PUBLIC	_xmlTextReaderNextSibling
PUBLIC	_xmlTextReaderIsValid
PUBLIC	_xmlTextReaderRelaxNGValidate
PUBLIC	_xmlTextReaderRelaxNGValidateCtxt
PUBLIC	_xmlTextReaderRelaxNGSetSchema
PUBLIC	_xmlTextReaderSchemaValidate
PUBLIC	_xmlTextReaderSchemaValidateCtxt
PUBLIC	_xmlTextReaderSetSchema
PUBLIC	_xmlTextReaderConstXmlVersion
PUBLIC	_xmlTextReaderStandalone
PUBLIC	_xmlTextReaderByteConsumed
PUBLIC	_xmlReaderWalker
PUBLIC	_xmlReaderForDoc
PUBLIC	_xmlReaderForFile
PUBLIC	_xmlReaderForMemory
PUBLIC	_xmlReaderForFd
PUBLIC	_xmlReaderForIO
PUBLIC	_xmlReaderNewWalker
PUBLIC	_xmlReaderNewDoc
PUBLIC	_xmlReaderNewFile
PUBLIC	_xmlReaderNewMemory
PUBLIC	_xmlReaderNewFd
PUBLIC	_xmlReaderNewIO
PUBLIC	_xmlTextReaderLocatorLineNumber
PUBLIC	_xmlTextReaderLocatorBaseURI
PUBLIC	_xmlTextReaderSetErrorHandler
PUBLIC	_xmlTextReaderSetStructuredErrorHandler
PUBLIC	_xmlTextReaderGetErrorHandler
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0BE@MPMNBMMA@xmlMalloc?5failed?5?$CB?6@	; `string'
PUBLIC	??_C@_0BF@DCPGEBNC@xmlRealloc?5failed?5?$CB?6@	; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3@				; `string'
PUBLIC	??_C@_0BB@DOFEEJAH@Expand?5failed?5?$CB?6@	; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_0CA@MIIEHMNN@http?3?1?1www?4w3?4org?12003?1XInclude@ ; `string'
PUBLIC	??_C@_0CA@JAOIMFBM@http?3?1?1www?4w3?4org?12001?1XInclude@ ; `string'
PUBLIC	??_C@_0GL@PIJMIJNC@c?3?2users?2dag?2documents?2_clients@ ; `string'
PUBLIC	??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@ ; `string'
PUBLIC	??_C@_0CC@HCDAIILG@xmlNewTextReader?5?3?5malloc?5faile@ ; `string'
PUBLIC	??_C@_05PPEFOGKI@xmlns@				; `string'
PUBLIC	??_C@_0BO@GBJIDPIB@http?3?1?1www?4w3?4org?12000?1xmlns?1@ ; `string'
PUBLIC	??_C@_05NOBOONOA@?$CDtext@			; `string'
PUBLIC	??_C@_0P@LIENAFBO@?$CDcdata?9section@		; `string'
PUBLIC	??_C@_08FBDKDMPC@?$CDcomment@			; `string'
PUBLIC	??_C@_09DFKKGJPK@?$CDdocument@			; `string'
PUBLIC	??_C@_0BD@FMMPJIKP@?$CDdocument?9fragment@	; `string'
PUBLIC	??_C@_0CE@MNBJMFAB@xmlTextReaderSetup?5?3?5malloc?5fai@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BE@KJPJIHAO@vsnprintf?5failed?5?$CB?6@	; `string'
PUBLIC	??_C@_07FHOHOHLG@include@			; `string'
EXTRN	_xmlStrdup:PROC
EXTRN	_xmlStrEqual:PROC
EXTRN	_xmlStrlen:PROC
EXTRN	_xmlStrcat:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_xmlBufContent:PROC
EXTRN	_xmlBufUse:PROC
EXTRN	_xmlBufShrink:PROC
EXTRN	_xmlDictCreate:PROC
EXTRN	_xmlDictFree:PROC
EXTRN	_xmlDictLookup:PROC
EXTRN	_xmlDictQLookup:PROC
EXTRN	_xmlDictOwns:PROC
EXTRN	_xmlSplitQName2:PROC
EXTRN	_xmlBufferCreate:PROC
EXTRN	_xmlBufferFree:PROC
EXTRN	_xmlBufferCat:PROC
EXTRN	_xmlFreeDtd:PROC
EXTRN	_xmlFreeNs:PROC
EXTRN	_xmlFreeNsList:PROC
EXTRN	_xmlFreeDoc:PROC
EXTRN	_xmlCopyDtd:PROC
EXTRN	_xmlNewDocText:PROC
EXTRN	_xmlDocCopyNode:PROC
EXTRN	_xmlGetLineNo:PROC
EXTRN	_xmlIsBlankNode:PROC
EXTRN	_xmlUnlinkNode:PROC
EXTRN	_xmlFreeNode:PROC
EXTRN	_xmlSearchNs:PROC
EXTRN	_xmlGetNoNsProp:PROC
EXTRN	_xmlGetNsProp:PROC
EXTRN	_xmlNodeListGetString:PROC
EXTRN	_xmlBufGetNodeContent:PROC
EXTRN	_xmlNodeGetLang:PROC
EXTRN	_xmlNodeGetSpacePreserve:PROC
EXTRN	_xmlNodeGetBase:PROC
EXTRN	_xmlNodeDump:PROC
EXTRN	_xmlHashFree:PROC
EXTRN	_xmlHashLookup:PROC
EXTRN	_xmlParserError:PROC
EXTRN	_xmlParserWarning:PROC
EXTRN	_xmlParserValidityError:PROC
EXTRN	_xmlParserValidityWarning:PROC
EXTRN	_xmlIsID:PROC
EXTRN	_xmlFreeRefTable:PROC
EXTRN	_xmlValidatePushElement:PROC
EXTRN	_xmlValidatePushCData:PROC
EXTRN	_xmlValidatePopElement:PROC
EXTRN	_xmlFindCharEncodingHandler:PROC
EXTRN	_xmlAllocParserInputBuffer:PROC
EXTRN	_xmlParserInputBufferCreateFilename:PROC
EXTRN	_xmlParserInputBufferCreateFd:PROC
EXTRN	_xmlParserInputBufferCreateStatic:PROC
EXTRN	_xmlParserInputBufferCreateIO:PROC
EXTRN	_xmlParserInputBufferRead:PROC
EXTRN	_xmlFreeParserInputBuffer:PROC
EXTRN	_xmlParserGetDirectory:PROC
EXTRN	_xmlStopParser:PROC
EXTRN	_xmlFreeParserCtxt:PROC
EXTRN	_xmlCreatePushParserCtxt:PROC
EXTRN	_xmlParseChunk:PROC
EXTRN	_xmlByteConsumed:PROC
EXTRN	_xmlCtxtReset:PROC
EXTRN	_xmlCtxtUseOptions:PROC
EXTRN	_xmlSAXVersion:PROC
EXTRN	___xmlGenericError:PROC
EXTRN	___xmlGenericErrorContext:PROC
EXTRN	___xmlDeregisterNodeDefaultValue:PROC
EXTRN	_xmlRelaxNGNewParserCtxt:PROC
EXTRN	_xmlRelaxNGFreeParserCtxt:PROC
EXTRN	_xmlRelaxNGSetParserErrors:PROC
EXTRN	_xmlRelaxNGParse:PROC
EXTRN	_xmlRelaxNGFree:PROC
EXTRN	_xmlRelaxNGSetValidErrors:PROC
EXTRN	_xmlRelaxNGSetValidStructuredErrors:PROC
EXTRN	_xmlRelaxNGNewValidCtxt:PROC
EXTRN	_xmlRelaxNGFreeValidCtxt:PROC
EXTRN	_xmlRelaxNGValidatePushElement:PROC
EXTRN	_xmlRelaxNGValidatePushCData:PROC
EXTRN	_xmlRelaxNGValidatePopElement:PROC
EXTRN	_xmlRelaxNGValidateFullElement:PROC
EXTRN	_xmlSchemaNewParserCtxt:PROC
EXTRN	_xmlSchemaFreeParserCtxt:PROC
EXTRN	_xmlSchemaSetParserErrors:PROC
EXTRN	_xmlSchemaIsValid:PROC
EXTRN	_xmlSchemaParse:PROC
EXTRN	_xmlSchemaFree:PROC
EXTRN	_xmlSchemaSetValidErrors:PROC
EXTRN	_xmlSchemaSetValidStructuredErrors:PROC
EXTRN	_xmlSchemaNewValidCtxt:PROC
EXTRN	_xmlSchemaFreeValidCtxt:PROC
EXTRN	_xmlSchemaSAXPlug:PROC
EXTRN	_xmlSchemaSAXUnplug:PROC
EXTRN	_xmlSchemaValidateSetLocator:PROC
EXTRN	_xmlSwitchToEncoding:PROC
EXTRN	_xmlNewInputStream:PROC
EXTRN	_inputPush:PROC
EXTRN	_xmlCanonicPath:PROC
EXTRN	_xmlXIncludeNewContext:PROC
EXTRN	_xmlXIncludeSetFlags:PROC
EXTRN	_xmlXIncludeFreeContext:PROC
EXTRN	_xmlXIncludeProcessNode:PROC
EXTRN	_xmlFreePattern:PROC
EXTRN	_xmlPatterncompile:PROC
EXTRN	_xmlPatternMatch:PROC
EXTRN	_xmlBufCreateSize:PROC
EXTRN	_xmlBufSetAllocationScheme:PROC
EXTRN	_xmlBufGetAllocationScheme:PROC
EXTRN	_xmlBufFree:PROC
EXTRN	_xmlBufEmpty:PROC
EXTRN	_xmlBufResetInput:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	___xmlRegisterCallbacks:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_07FHOHOHLG@include@
CONST	SEGMENT
??_C@_07FHOHOHLG@include@ DB 'include', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KJPJIHAO@vsnprintf?5failed?5?$CB?6@
CONST	SEGMENT
??_C@_0BE@KJPJIHAO@vsnprintf?5failed?5?$CB?6@ DB 'vsnprintf failed !', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MNBJMFAB@xmlTextReaderSetup?5?3?5malloc?5fai@
CONST	SEGMENT
??_C@_0CE@MNBJMFAB@xmlTextReaderSetup?5?3?5malloc?5fai@ DB 'xmlTextReader'
	DB	'Setup : malloc failed', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FMMPJIKP@?$CDdocument?9fragment@
CONST	SEGMENT
??_C@_0BD@FMMPJIKP@?$CDdocument?9fragment@ DB '#document-fragment', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DFKKGJPK@?$CDdocument@
CONST	SEGMENT
??_C@_09DFKKGJPK@?$CDdocument@ DB '#document', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBDKDMPC@?$CDcomment@
CONST	SEGMENT
??_C@_08FBDKDMPC@?$CDcomment@ DB '#comment', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LIENAFBO@?$CDcdata?9section@
CONST	SEGMENT
??_C@_0P@LIENAFBO@?$CDcdata?9section@ DB '#cdata-section', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NOBOONOA@?$CDtext@
CONST	SEGMENT
??_C@_05NOBOONOA@?$CDtext@ DB '#text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GBJIDPIB@http?3?1?1www?4w3?4org?12000?1xmlns?1@
CONST	SEGMENT
??_C@_0BO@GBJIDPIB@http?3?1?1www?4w3?4org?12000?1xmlns?1@ DB 'http://www.'
	DB	'w3.org/2000/xmlns/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPEFOGKI@xmlns@
CONST	SEGMENT
??_C@_05PPEFOGKI@xmlns@ DB 'xmlns', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HCDAIILG@xmlNewTextReader?5?3?5malloc?5faile@
CONST	SEGMENT
??_C@_0CC@HCDAIILG@xmlNewTextReader?5?3?5malloc?5faile@ DB 'xmlNewTextRea'
	DB	'der : malloc failed', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
CONST	SEGMENT
??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@ DB 'Unimplem'
	DB	'ented block at %s:%d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GL@PIJMIJNC@c?3?2users?2dag?2documents?2_clients@
CONST	SEGMENT
??_C@_0GL@PIJMIJNC@c?3?2users?2dag?2documents?2_clients@ DB 'c:\users\dag'
	DB	'\documents\_clients\codeproject authors group\windows on arm\'
	DB	'libxml2\libxml2-2.9.9\xmlreader.c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JAOIMFBM@http?3?1?1www?4w3?4org?12001?1XInclude@
CONST	SEGMENT
??_C@_0CA@JAOIMFBM@http?3?1?1www?4w3?4org?12001?1XInclude@ DB 'http://www'
	DB	'.w3.org/2001/XInclude', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MIIEHMNN@http?3?1?1www?4w3?4org?12003?1XInclude@
CONST	SEGMENT
??_C@_0CA@MIIEHMNN@http?3?1?1www?4w3?4org?12003?1XInclude@ DB 'http://www'
	DB	'.w3.org/2003/XInclude', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DOFEEJAH@Expand?5failed?5?$CB?6@
CONST	SEGMENT
??_C@_0BB@DOFEEJAH@Expand?5failed?5?$CB?6@ DB 'Expand failed !', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@DCPGEBNC@xmlRealloc?5failed?5?$CB?6@
CONST	SEGMENT
??_C@_0BF@DCPGEBNC@xmlRealloc?5failed?5?$CB?6@ DB 'xmlRealloc failed !', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MPMNBMMA@xmlMalloc?5failed?5?$CB?6@
CONST	SEGMENT
??_C@_0BE@MPMNBMMA@xmlMalloc?5failed?5?$CB?6@ DB 'xmlMalloc failed !', 0aH
	DB	00H						; `string'
CONST	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderWarning
_TEXT	SEGMENT
_ap$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_msg$ = 12						; size = 4
_xmlTextReaderWarning PROC				; COMDAT

; 4878 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4879 :     va_list ap;
; 4880 : 
; 4881 :     va_start(ap, msg);

	lea	eax, DWORD PTR _msg$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax

; 4882 :     xmlTextReaderGenericError(ctxt,

	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_xmlTextReaderBuildMessage
	add	esp, 8
	push	eax
	push	3
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlTextReaderGenericError
	add	esp, 12					; 0000000cH

; 4883 :                               XML_PARSER_SEVERITY_WARNING,
; 4884 :                               xmlTextReaderBuildMessage(msg, ap));
; 4885 :     va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0

; 4886 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderWarning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderError
_TEXT	SEGMENT
_ap$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_msg$ = 12						; size = 4
_xmlTextReaderError PROC				; COMDAT

; 4865 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4866 :     va_list ap;
; 4867 : 
; 4868 :     va_start(ap, msg);

	lea	eax, DWORD PTR _msg$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax

; 4869 :     xmlTextReaderGenericError(ctxt,

	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_xmlTextReaderBuildMessage
	add	esp, 8
	push	eax
	push	4
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlTextReaderGenericError
	add	esp, 12					; 0000000cH

; 4870 :                               XML_PARSER_SEVERITY_ERROR,
; 4871 :                               xmlTextReaderBuildMessage(msg, ap));
; 4872 :     va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0

; 4873 : 
; 4874 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGenericError
_TEXT	SEGMENT
_reader$ = -8						; size = 4
_ctx$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_severity$ = 12						; size = 4
_str$ = 16						; size = 4
_xmlTextReaderGenericError PROC				; COMDAT

; 4838 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4839 :     xmlParserCtxtPtr ctx = (xmlParserCtxtPtr) ctxt;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax

; 4840 : 
; 4841 :     xmlTextReaderPtr reader = (xmlTextReaderPtr) ctx->_private;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _reader$[ebp], edx

; 4842 : 
; 4843 :     if (str != NULL) {

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN1@xmlTextRea

; 4844 :         if (reader->errorFunc)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN3@xmlTextRea

; 4845 :             reader->errorFunc(reader->errorFuncArg, str, severity,

	mov	esi, esp
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _severity$[ebp]
	push	edx
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlTextRea:

; 4846 :                               (xmlTextReaderLocatorPtr) ctx);
; 4847 :         xmlFree(str);

	mov	esi, esp
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlTextRea:

; 4848 :     }
; 4849 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderGenericError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderSchemaValidateInternal
_TEXT	SEGMENT
_pctxt$1 = -4						; size = 4
_reader$ = 8						; size = 4
_xsd$ = 12						; size = 4
_ctxt$ = 16						; size = 4
_options$ = 20						; size = 4
_xmlTextReaderSchemaValidateInternal PROC		; COMDAT

; 4457 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4458 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4459 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 4460 : 
; 4461 :     if ((xsd != NULL) && (ctxt != NULL))

	cmp	DWORD PTR _xsd$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 4462 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN3@xmlTextRea:

; 4463 : 
; 4464 :     if (((xsd != NULL) || (ctxt != NULL)) &&

	cmp	DWORD PTR _xsd$[ebp], 0
	jne	SHORT $LN5@xmlTextRea
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN4@xmlTextRea
$LN6@xmlTextRea:

; 4465 : 	((reader->mode != XML_TEXTREADER_MODE_INITIAL) ||
; 4466 :         (reader->ctxt == NULL)))
; 4467 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 4468 : 
; 4469 :     /* Cleanup previous validation stuff. */
; 4470 :     if (reader->xsdPlug != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+152], 0
	je	SHORT $LN7@xmlTextRea

; 4471 : 	xmlSchemaSAXUnplug(reader->xsdPlug);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+152]
	push	ecx
	call	_xmlSchemaSAXUnplug
	add	esp, 4

; 4472 : 	reader->xsdPlug = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+152], 0
$LN7@xmlTextRea:

; 4473 :     }
; 4474 :     if (reader->xsdValidCtxt != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+140], 0
	je	SHORT $LN8@xmlTextRea

; 4475 : 	if (! reader->xsdPreserveCtxt)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+144], 0
	jne	SHORT $LN9@xmlTextRea

; 4476 : 	    xmlSchemaFreeValidCtxt(reader->xsdValidCtxt);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	call	_xmlSchemaFreeValidCtxt
	add	esp, 4
$LN9@xmlTextRea:

; 4477 : 	reader->xsdValidCtxt = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+140], 0
$LN8@xmlTextRea:

; 4478 :     }
; 4479 :     reader->xsdPreserveCtxt = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+144], 0

; 4480 :     if (reader->xsdSchemas != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	SHORT $LN10@xmlTextRea

; 4481 : 	xmlSchemaFree(reader->xsdSchemas);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	call	_xmlSchemaFree
	add	esp, 4

; 4482 : 	reader->xsdSchemas = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+136], 0
$LN10@xmlTextRea:

; 4483 :     }
; 4484 : 
; 4485 :     if ((xsd == NULL) && (ctxt == NULL)) {

	cmp	DWORD PTR _xsd$[ebp], 0
	jne	SHORT $LN11@xmlTextRea
	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN11@xmlTextRea

; 4486 : 	/* We just want to deactivate the validation, so get out. */
; 4487 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN11@xmlTextRea:

; 4488 :     }
; 4489 : 
; 4490 :     if (xsd != NULL) {

	cmp	DWORD PTR _xsd$[ebp], 0
	je	$LN12@xmlTextRea

; 4491 : 	xmlSchemaParserCtxtPtr pctxt;
; 4492 : 	/* Parse the schema and create validation environment. */
; 4493 : 	pctxt = xmlSchemaNewParserCtxt(xsd);

	mov	ecx, DWORD PTR _xsd$[ebp]
	push	ecx
	call	_xmlSchemaNewParserCtxt
	add	esp, 4
	mov	DWORD PTR _pctxt$1[ebp], eax

; 4494 : 	if (reader->errorFunc != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+108], 0
	je	SHORT $LN14@xmlTextRea

; 4495 : 	    xmlSchemaSetParserErrors(pctxt,

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	push	OFFSET _xmlTextReaderValidityWarningRelay
	push	OFFSET _xmlTextReaderValidityErrorRelay
	mov	ecx, DWORD PTR _pctxt$1[ebp]
	push	ecx
	call	_xmlSchemaSetParserErrors
	add	esp, 16					; 00000010H
$LN14@xmlTextRea:

; 4496 : 		xmlTextReaderValidityErrorRelay,
; 4497 : 		xmlTextReaderValidityWarningRelay,
; 4498 : 		reader);
; 4499 : 	}
; 4500 : 	reader->xsdSchemas = xmlSchemaParse(pctxt);

	mov	edx, DWORD PTR _pctxt$1[ebp]
	push	edx
	call	_xmlSchemaParse
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 4501 : 	xmlSchemaFreeParserCtxt(pctxt);

	mov	edx, DWORD PTR _pctxt$1[ebp]
	push	edx
	call	_xmlSchemaFreeParserCtxt
	add	esp, 4

; 4502 : 	if (reader->xsdSchemas == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+136], 0
	jne	SHORT $LN15@xmlTextRea

; 4503 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN15@xmlTextRea:

; 4504 : 	reader->xsdValidCtxt = xmlSchemaNewValidCtxt(reader->xsdSchemas);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	call	_xmlSchemaNewValidCtxt
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 4505 : 	if (reader->xsdValidCtxt == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+140], 0
	jne	SHORT $LN16@xmlTextRea

; 4506 : 	    xmlSchemaFree(reader->xsdSchemas);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	_xmlSchemaFree
	add	esp, 4

; 4507 : 	    reader->xsdSchemas = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+136], 0

; 4508 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN16@xmlTextRea:

; 4509 : 	}
; 4510 : 	reader->xsdPlug = xmlSchemaSAXPlug(reader->xsdValidCtxt,

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	_xmlSchemaSAXPlug
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+152], eax

; 4511 : 	    &(reader->ctxt->sax),
; 4512 : 	    &(reader->ctxt->userData));
; 4513 : 	if (reader->xsdPlug == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+152], 0
	jne	SHORT $LN17@xmlTextRea

; 4514 : 	    xmlSchemaFree(reader->xsdSchemas);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	_xmlSchemaFree
	add	esp, 4

; 4515 : 	    reader->xsdSchemas = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+136], 0

; 4516 : 	    xmlSchemaFreeValidCtxt(reader->xsdValidCtxt);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaFreeValidCtxt
	add	esp, 4

; 4517 : 	    reader->xsdValidCtxt = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+140], 0

; 4518 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN17@xmlTextRea:

; 4519 : 	}
; 4520 :     } else {

	jmp	SHORT $LN13@xmlTextRea
$LN12@xmlTextRea:

; 4521 : 	/* Use the given validation context. */
; 4522 : 	reader->xsdValidCtxt = ctxt;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+140], ecx

; 4523 : 	reader->xsdPreserveCtxt = 1;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+144], 1

; 4524 : 	reader->xsdPlug = xmlSchemaSAXPlug(reader->xsdValidCtxt,

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	_xmlSchemaSAXPlug
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+152], eax

; 4525 : 	    &(reader->ctxt->sax),
; 4526 : 	    &(reader->ctxt->userData));
; 4527 : 	if (reader->xsdPlug == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+152], 0
	jne	SHORT $LN13@xmlTextRea

; 4528 : 	    reader->xsdValidCtxt = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+140], 0

; 4529 : 	    reader->xsdPreserveCtxt = 0;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+144], 0

; 4530 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN13@xmlTextRea:

; 4531 : 	}
; 4532 :     }
; 4533 :     xmlSchemaValidateSetLocator(reader->xsdValidCtxt,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	OFFSET _xmlTextReaderLocator
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaValidateSetLocator
	add	esp, 12					; 0000000cH

; 4534 :                                 xmlTextReaderLocator,
; 4535 : 				(void *) reader);
; 4536 :     /*
; 4537 :     * Redirect the validation context's error channels to use
; 4538 :     * the reader channels.
; 4539 :     * TODO: In case the user provides the validation context we
; 4540 :     *   could make this redirection optional.
; 4541 :     */
; 4542 :     if (reader->errorFunc != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+108], 0
	je	SHORT $LN19@xmlTextRea

; 4543 : 	xmlSchemaSetValidErrors(reader->xsdValidCtxt,

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	push	OFFSET _xmlTextReaderValidityWarningRelay
	push	OFFSET _xmlTextReaderValidityErrorRelay
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	_xmlSchemaSetValidErrors
	add	esp, 16					; 00000010H
$LN19@xmlTextRea:

; 4544 : 			 xmlTextReaderValidityErrorRelay,
; 4545 : 			 xmlTextReaderValidityWarningRelay,
; 4546 : 			 reader);
; 4547 :     }
; 4548 : 	if (reader->sErrorFunc != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	SHORT $LN20@xmlTextRea

; 4549 : 		xmlSchemaSetValidStructuredErrors(reader->xsdValidCtxt,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	OFFSET _xmlTextReaderValidityStructuredRelay
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	call	_xmlSchemaSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN20@xmlTextRea:

; 4550 : 			xmlTextReaderValidityStructuredRelay,
; 4551 : 			reader);
; 4552 :     }
; 4553 :     reader->xsdValidErrors = 0;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 4554 :     reader->validate = XML_TEXTREADER_VALIDATE_XSD;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+8], 4

; 4555 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 4556 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderSchemaValidateInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderRelaxNGValidateInternal
_TEXT	SEGMENT
_pctxt$1 = -4						; size = 4
_reader$ = 8						; size = 4
_rng$ = 12						; size = 4
_ctxt$ = 16						; size = 4
_options$ = 20						; size = 4
_xmlTextReaderRelaxNGValidateInternal PROC		; COMDAT

; 4354 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4355 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4356 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 4357 : 
; 4358 :     if ((rng != NULL) && (ctxt != NULL))

	cmp	DWORD PTR _rng$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 4359 : 	return (-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN3@xmlTextRea:

; 4360 : 
; 4361 :     if (((rng != NULL) || (ctxt != NULL)) &&

	cmp	DWORD PTR _rng$[ebp], 0
	jne	SHORT $LN5@xmlTextRea
	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN6@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN4@xmlTextRea
$LN6@xmlTextRea:

; 4362 : 	((reader->mode != XML_TEXTREADER_MODE_INITIAL) ||
; 4363 : 	 (reader->ctxt == NULL)))
; 4364 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 4365 : 
; 4366 :     /* Cleanup previous validation stuff. */
; 4367 :     if (reader->rngValidCtxt != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+120], 0
	je	SHORT $LN7@xmlTextRea

; 4368 : 	if ( !reader->rngPreserveCtxt)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+124], 0
	jne	SHORT $LN8@xmlTextRea

; 4369 : 	    xmlRelaxNGFreeValidCtxt(reader->rngValidCtxt);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+120]
	push	edx
	call	_xmlRelaxNGFreeValidCtxt
	add	esp, 4
$LN8@xmlTextRea:

; 4370 : 	reader->rngValidCtxt = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+120], 0
$LN7@xmlTextRea:

; 4371 :     }
; 4372 :     reader->rngPreserveCtxt = 0;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+124], 0

; 4373 :     if (reader->rngSchemas != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+116], 0
	je	SHORT $LN9@xmlTextRea

; 4374 : 	xmlRelaxNGFree(reader->rngSchemas);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	call	_xmlRelaxNGFree
	add	esp, 4

; 4375 : 	reader->rngSchemas = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+116], 0
$LN9@xmlTextRea:

; 4376 :     }
; 4377 : 
; 4378 :     if ((rng == NULL) && (ctxt == NULL)) {

	cmp	DWORD PTR _rng$[ebp], 0
	jne	SHORT $LN10@xmlTextRea
	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN10@xmlTextRea

; 4379 : 	/* We just want to deactivate the validation, so get out. */
; 4380 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN10@xmlTextRea:

; 4381 :     }
; 4382 : 
; 4383 : 
; 4384 :     if (rng != NULL) {

	cmp	DWORD PTR _rng$[ebp], 0
	je	$LN11@xmlTextRea

; 4385 : 	xmlRelaxNGParserCtxtPtr pctxt;
; 4386 : 	/* Parse the schema and create validation environment. */
; 4387 : 
; 4388 : 	pctxt = xmlRelaxNGNewParserCtxt(rng);

	mov	eax, DWORD PTR _rng$[ebp]
	push	eax
	call	_xmlRelaxNGNewParserCtxt
	add	esp, 4
	mov	DWORD PTR _pctxt$1[ebp], eax

; 4389 : 	if (reader->errorFunc != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+108], 0
	je	SHORT $LN13@xmlTextRea

; 4390 : 	    xmlRelaxNGSetParserErrors(pctxt,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	OFFSET _xmlTextReaderValidityWarningRelay
	push	OFFSET _xmlTextReaderValidityErrorRelay
	mov	eax, DWORD PTR _pctxt$1[ebp]
	push	eax
	call	_xmlRelaxNGSetParserErrors
	add	esp, 16					; 00000010H
$LN13@xmlTextRea:

; 4391 : 		xmlTextReaderValidityErrorRelay,
; 4392 : 		xmlTextReaderValidityWarningRelay,
; 4393 : 		reader);
; 4394 : 	}
; 4395 : 	if (reader->sErrorFunc != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN14@xmlTextRea

; 4396 : 	    xmlRelaxNGSetValidStructuredErrors(reader->rngValidCtxt,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	OFFSET _xmlTextReaderValidityStructuredRelay
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_xmlRelaxNGSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN14@xmlTextRea:

; 4397 : 		xmlTextReaderValidityStructuredRelay,
; 4398 : 		reader);
; 4399 : 	}
; 4400 : 	reader->rngSchemas = xmlRelaxNGParse(pctxt);

	mov	edx, DWORD PTR _pctxt$1[ebp]
	push	edx
	call	_xmlRelaxNGParse
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+116], eax

; 4401 : 	xmlRelaxNGFreeParserCtxt(pctxt);

	mov	edx, DWORD PTR _pctxt$1[ebp]
	push	edx
	call	_xmlRelaxNGFreeParserCtxt
	add	esp, 4

; 4402 : 	if (reader->rngSchemas == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+116], 0
	jne	SHORT $LN15@xmlTextRea

; 4403 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN15@xmlTextRea:

; 4404 : 	reader->rngValidCtxt = xmlRelaxNGNewValidCtxt(reader->rngSchemas);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	call	_xmlRelaxNGNewValidCtxt
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+120], eax

; 4405 : 	if (reader->rngValidCtxt == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+120], 0
	jne	SHORT $LN16@xmlTextRea

; 4406 : 	    xmlRelaxNGFree(reader->rngSchemas);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	call	_xmlRelaxNGFree
	add	esp, 4

; 4407 : 	    reader->rngSchemas = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+116], 0

; 4408 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN16@xmlTextRea:

; 4409 : 	}
; 4410 :     } else {

	jmp	SHORT $LN12@xmlTextRea
$LN11@xmlTextRea:

; 4411 : 	/* Use the given validation context. */
; 4412 : 	reader->rngValidCtxt = ctxt;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+120], ecx

; 4413 : 	reader->rngPreserveCtxt = 1;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+124], 1
$LN12@xmlTextRea:

; 4414 :     }
; 4415 :     /*
; 4416 :     * Redirect the validation context's error channels to use
; 4417 :     * the reader channels.
; 4418 :     * TODO: In case the user provides the validation context we
; 4419 :     *	could make this redirection optional.
; 4420 :     */
; 4421 :     if (reader->errorFunc != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN17@xmlTextRea

; 4422 : 	xmlRelaxNGSetValidErrors(reader->rngValidCtxt,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	OFFSET _xmlTextReaderValidityWarningRelay
	push	OFFSET _xmlTextReaderValidityErrorRelay
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidErrors
	add	esp, 16					; 00000010H
$LN17@xmlTextRea:

; 4423 : 			 xmlTextReaderValidityErrorRelay,
; 4424 : 			 xmlTextReaderValidityWarningRelay,
; 4425 : 			 reader);
; 4426 :     }
; 4427 : 	if (reader->sErrorFunc != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN18@xmlTextRea

; 4428 : 		xmlRelaxNGSetValidStructuredErrors(reader->rngValidCtxt,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	OFFSET _xmlTextReaderValidityStructuredRelay
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_xmlRelaxNGSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN18@xmlTextRea:

; 4429 : 			xmlTextReaderValidityStructuredRelay,
; 4430 : 			reader);
; 4431 :     }
; 4432 :     reader->rngValidErrors = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+128], 0

; 4433 :     reader->rngFullNode = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+132], 0

; 4434 :     reader->validate = XML_TEXTREADER_VALIDATE_RNG;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+8], 2

; 4435 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 4436 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderRelaxNGValidateInternal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderLocator
_TEXT	SEGMENT
_doc$1 = -16						; size = 4
_ret$2 = -12						; size = 4
_res$3 = -8						; size = 4
_reader$ = -4						; size = 4
_ctx$ = 8						; size = 4
_file$ = 12						; size = 4
_line$ = 16						; size = 4
_xmlTextReaderLocator PROC				; COMDAT

; 4206 : xmlTextReaderLocator(void *ctx, const char **file, unsigned long *line) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4207 :     xmlTextReaderPtr reader;
; 4208 : 
; 4209 :     if ((ctx == NULL) || ((file == NULL) && (line == NULL)))

	cmp	DWORD PTR _ctx$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	cmp	DWORD PTR _file$[ebp], 0
	jne	SHORT $LN2@xmlTextRea
	cmp	DWORD PTR _line$[ebp], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 4210 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 4211 : 
; 4212 :     if (file != NULL)

	cmp	DWORD PTR _file$[ebp], 0
	je	SHORT $LN4@xmlTextRea

; 4213 :         *file = NULL;

	mov	eax, DWORD PTR _file$[ebp]
	mov	DWORD PTR [eax], 0
$LN4@xmlTextRea:

; 4214 :     if (line != NULL)

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN5@xmlTextRea

; 4215 :         *line = 0;

	mov	ecx, DWORD PTR _line$[ebp]
	mov	DWORD PTR [ecx], 0
$LN5@xmlTextRea:

; 4216 : 
; 4217 :     reader = (xmlTextReaderPtr) ctx;

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _reader$[ebp], edx

; 4218 :     if ((reader->ctxt != NULL) && (reader->ctxt->input != NULL)) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN6@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN6@xmlTextRea

; 4219 : 	if (file != NULL)

	cmp	DWORD PTR _file$[ebp], 0
	je	SHORT $LN7@xmlTextRea

; 4220 : 	    *file = reader->ctxt->input->filename;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _file$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR [eax], ecx
$LN7@xmlTextRea:

; 4221 : 	if (line != NULL)

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN8@xmlTextRea

; 4222 : 	    *line = reader->ctxt->input->line;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR _line$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	mov	DWORD PTR [edx], eax
$LN8@xmlTextRea:

; 4223 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 4224 :     }
; 4225 :     if (reader->node != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN9@xmlTextRea

; 4226 :         long res;
; 4227 : 	int ret = 0;

	mov	DWORD PTR _ret$2[ebp], 0

; 4228 : 
; 4229 : 	if (line != NULL) {

	cmp	DWORD PTR _line$[ebp], 0
	je	SHORT $LN10@xmlTextRea

; 4230 : 	    res = xmlGetLineNo(reader->node);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_xmlGetLineNo
	add	esp, 4
	mov	DWORD PTR _res$3[ebp], eax

; 4231 : 	    if (res > 0)

	cmp	DWORD PTR _res$3[ebp], 0
	jle	SHORT $LN11@xmlTextRea

; 4232 : 	        *line = (unsigned long) res;

	mov	ecx, DWORD PTR _line$[ebp]
	mov	edx, DWORD PTR _res$3[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN10@xmlTextRea
$LN11@xmlTextRea:

; 4233 : 	    else
; 4234 :                 ret = -1;

	mov	DWORD PTR _ret$2[ebp], -1
$LN10@xmlTextRea:

; 4235 : 	}
; 4236 :         if (file != NULL) {

	cmp	DWORD PTR _file$[ebp], 0
	je	SHORT $LN13@xmlTextRea

; 4237 : 	    xmlDocPtr doc = reader->node->doc;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+32]
	mov	DWORD PTR _doc$1[ebp], edx

; 4238 : 	    if ((doc != NULL) && (doc->URL != NULL))

	cmp	DWORD PTR _doc$1[ebp], 0
	je	SHORT $LN14@xmlTextRea
	mov	eax, DWORD PTR _doc$1[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN14@xmlTextRea

; 4239 : 	        *file = (const char *) doc->URL;

	mov	ecx, DWORD PTR _file$[ebp]
	mov	edx, DWORD PTR _doc$1[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR [ecx], eax
	jmp	SHORT $LN13@xmlTextRea
$LN14@xmlTextRea:

; 4240 : 	    else
; 4241 :                 ret = -1;

	mov	DWORD PTR _ret$2[ebp], -1
$LN13@xmlTextRea:

; 4242 : 	}
; 4243 : 	return(ret);

	mov	eax, DWORD PTR _ret$2[ebp]
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 4244 :     }
; 4245 :     return(-1);

	or	eax, -1
$LN1@xmlTextRea:

; 4246 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderLocator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValidityStructuredRelay
_TEXT	SEGMENT
_reader$ = -4						; size = 4
_userData$ = 8						; size = 4
_error$ = 12						; size = 4
_xmlTextReaderValidityStructuredRelay PROC		; COMDAT

; 4122 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4123 :     xmlTextReaderPtr reader = (xmlTextReaderPtr) userData;

	mov	eax, DWORD PTR _userData$[ebp]
	mov	DWORD PTR _reader$[ebp], eax

; 4124 : 
; 4125 :     if (reader->sErrorFunc) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN2@xmlTextRea

; 4126 :         reader->sErrorFunc(reader->errorFuncArg, error);

	mov	esi, esp
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+192]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4127 :     } else {

	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 4128 :         xmlTextReaderStructuredError(reader, error);

	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderStructuredError
	add	esp, 8
$LN1@xmlTextRea:

; 4129 :     }
; 4130 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderValidityStructuredRelay ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderStructuredError
_TEXT	SEGMENT
_reader$ = -8						; size = 4
_ctx$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_error$ = 12						; size = 4
_xmlTextReaderStructuredError PROC			; COMDAT

; 4853 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4854 :     xmlParserCtxtPtr ctx = (xmlParserCtxtPtr) ctxt;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax

; 4855 : 
; 4856 :     xmlTextReaderPtr reader = (xmlTextReaderPtr) ctx->_private;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _reader$[ebp], edx

; 4857 : 
; 4858 :     if (error && reader->sErrorFunc) {

	cmp	DWORD PTR _error$[ebp], 0
	je	SHORT $LN1@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+192], 0
	je	SHORT $LN1@xmlTextRea

; 4859 :         reader->sErrorFunc(reader->errorFuncArg, (xmlErrorPtr) error);

	mov	esi, esp
	mov	ecx, DWORD PTR _error$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+192]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlTextRea:

; 4860 :     }
; 4861 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderStructuredError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValidityWarningRelay
_TEXT	SEGMENT
_ap$ = -12						; size = 4
_str$ = -8						; size = 4
_reader$ = -4						; size = 4
_ctx$ = 8						; size = 4
_msg$ = 12						; size = 4
_xmlTextReaderValidityWarningRelay PROC			; COMDAT

; 4096 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4097 :     xmlTextReaderPtr reader = (xmlTextReaderPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _reader$[ebp], eax

; 4098 : 
; 4099 :     char *str;
; 4100 : 
; 4101 :     va_list ap;
; 4102 : 
; 4103 :     va_start(ap, msg);

	lea	ecx, DWORD PTR _msg$[ebp+4]
	mov	DWORD PTR _ap$[ebp], ecx

; 4104 :     str = xmlTextReaderBuildMessage(msg, ap);

	mov	edx, DWORD PTR _ap$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_xmlTextReaderBuildMessage
	add	esp, 8
	mov	DWORD PTR _str$[ebp], eax

; 4105 :     if (!reader->errorFunc) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+108], 0
	jne	SHORT $LN2@xmlTextRea

; 4106 :         xmlTextReaderValidityWarning(ctx, "%s", str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_xmlTextReaderValidityWarning
	add	esp, 12					; 0000000cH

; 4107 :     } else {

	jmp	SHORT $LN3@xmlTextRea
$LN2@xmlTextRea:

; 4108 :         reader->errorFunc(reader->errorFuncArg, str,

	mov	esi, esp
	push	0
	push	1
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlTextRea:

; 4109 :                           XML_PARSER_SEVERITY_VALIDITY_WARNING,
; 4110 :                           NULL /* locator */ );
; 4111 :     }
; 4112 :     if (str != NULL)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN4@xmlTextRea

; 4113 :         xmlFree(str);

	mov	esi, esp
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlTextRea:

; 4114 :     va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0

; 4115 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderValidityWarningRelay ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValidityErrorRelay
_TEXT	SEGMENT
_ap$ = -12						; size = 4
_str$ = -8						; size = 4
_reader$ = -4						; size = 4
_ctx$ = 8						; size = 4
_msg$ = 12						; size = 4
_xmlTextReaderValidityErrorRelay PROC			; COMDAT

; 4073 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4074 :     xmlTextReaderPtr reader = (xmlTextReaderPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _reader$[ebp], eax

; 4075 : 
; 4076 :     char *str;
; 4077 : 
; 4078 :     va_list ap;
; 4079 : 
; 4080 :     va_start(ap, msg);

	lea	ecx, DWORD PTR _msg$[ebp+4]
	mov	DWORD PTR _ap$[ebp], ecx

; 4081 :     str = xmlTextReaderBuildMessage(msg, ap);

	mov	edx, DWORD PTR _ap$[ebp]
	push	edx
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_xmlTextReaderBuildMessage
	add	esp, 8
	mov	DWORD PTR _str$[ebp], eax

; 4082 :     if (!reader->errorFunc) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+108], 0
	jne	SHORT $LN2@xmlTextRea

; 4083 :         xmlTextReaderValidityError(ctx, "%s", str);

	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	call	_xmlTextReaderValidityError
	add	esp, 12					; 0000000cH

; 4084 :     } else {

	jmp	SHORT $LN3@xmlTextRea
$LN2@xmlTextRea:

; 4085 :         reader->errorFunc(reader->errorFuncArg, str,

	mov	esi, esp
	push	0
	push	2
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+112]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlTextRea:

; 4086 :                           XML_PARSER_SEVERITY_VALIDITY_ERROR,
; 4087 :                           NULL /* locator */ );
; 4088 :     }
; 4089 :     if (str != NULL)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN4@xmlTextRea

; 4090 :         xmlFree(str);

	mov	esi, esp
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlTextRea:

; 4091 :     va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0

; 4092 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderValidityErrorRelay ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValidityWarning
_TEXT	SEGMENT
_len$ = -8						; size = 4
_ap$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_msg$ = 12						; size = 4
_xmlTextReaderValidityWarning PROC			; COMDAT

; 4910 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4911 :     va_list ap;
; 4912 : 
; 4913 :     int len = xmlStrlen((const xmlChar *) msg);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_xmlStrlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 4914 : 
; 4915 :     if ((len != 0) && (msg[len - 1] != ':')) {

	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN1@xmlTextRea
	mov	ecx, DWORD PTR _msg$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	movsx	edx, BYTE PTR [ecx-1]
	cmp	edx, 58					; 0000003aH
	je	SHORT $LN1@xmlTextRea

; 4916 :         /*
; 4917 :          * some callbacks only report locator information:
; 4918 :          * skip them (mimicking behaviour in error.c)
; 4919 :          */
; 4920 :         va_start(ap, msg);

	lea	eax, DWORD PTR _msg$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax

; 4921 :         xmlTextReaderGenericError(ctxt,

	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_xmlTextReaderBuildMessage
	add	esp, 8
	push	eax
	push	1
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlTextReaderGenericError
	add	esp, 12					; 0000000cH

; 4922 :                                   XML_PARSER_SEVERITY_VALIDITY_WARNING,
; 4923 :                                   xmlTextReaderBuildMessage(msg, ap));
; 4924 :         va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0
$LN1@xmlTextRea:

; 4925 :     }
; 4926 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderValidityWarning ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValidityError
_TEXT	SEGMENT
_len$ = -8						; size = 4
_ap$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_msg$ = 12						; size = 4
_xmlTextReaderValidityError PROC			; COMDAT

; 4890 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4891 :     va_list ap;
; 4892 : 
; 4893 :     int len = xmlStrlen((const xmlChar *) msg);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	_xmlStrlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 4894 : 
; 4895 :     if ((len > 1) && (msg[len - 2] != ':')) {

	cmp	DWORD PTR _len$[ebp], 1
	jle	SHORT $LN1@xmlTextRea
	mov	ecx, DWORD PTR _msg$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	movsx	edx, BYTE PTR [ecx-2]
	cmp	edx, 58					; 0000003aH
	je	SHORT $LN1@xmlTextRea

; 4896 :         /*
; 4897 :          * some callbacks only report locator information:
; 4898 :          * skip them (mimicking behaviour in error.c)
; 4899 :          */
; 4900 :         va_start(ap, msg);

	lea	eax, DWORD PTR _msg$[ebp+4]
	mov	DWORD PTR _ap$[ebp], eax

; 4901 :         xmlTextReaderGenericError(ctxt,

	mov	ecx, DWORD PTR _ap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	_xmlTextReaderBuildMessage
	add	esp, 8
	push	eax
	push	2
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlTextReaderGenericError
	add	esp, 12					; 0000000cH

; 4902 :                                   XML_PARSER_SEVERITY_VALIDITY_ERROR,
; 4903 :                                   xmlTextReaderBuildMessage(msg, ap));
; 4904 :         va_end(ap);

	mov	DWORD PTR _ap$[ebp], 0
$LN1@xmlTextRea:

; 4905 :     }
; 4906 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderValidityError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderBuildMessage
_TEXT	SEGMENT
tv134 = -28						; size = 4
__Result$1 = -24					; size = 4
_aq$ = -20						; size = 4
_str$ = -16						; size = 4
_larger$ = -12						; size = 4
_chars$ = -8						; size = 4
_size$ = -4						; size = 4
_msg$ = 8						; size = 4
_ap$ = 12						; size = 4
_xmlTextReaderBuildMessage PROC				; COMDAT

; 4727 : xmlTextReaderBuildMessage(const char *msg, va_list ap) {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4728 :     int size = 0;

	mov	DWORD PTR _size$[ebp], 0

; 4729 :     int chars;
; 4730 :     char *larger;
; 4731 :     char *str = NULL;

	mov	DWORD PTR _str$[ebp], 0
$LN2@xmlTextRea:

; 4732 :     va_list aq;
; 4733 : 
; 4734 :     while (1) {

	mov	eax, 1
	test	eax, eax
	je	$LN3@xmlTextRea

; 4735 :         VA_COPY(aq, ap);

	mov	ecx, DWORD PTR _ap$[ebp]
	mov	DWORD PTR _aq$[ebp], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h

; 1440 :         int const _Result = __stdio_common_vsprintf(

	mov	esi, esp
	mov	edx, DWORD PTR _aq$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2
	mov	edx, DWORD PTR [eax+4]
	push	edx
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Result$1[ebp], eax

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$1[ebp], 0
	jge	SHORT $LN15@xmlTextRea
	mov	DWORD PTR tv134[ebp], -1
	jmp	SHORT $LN13@xmlTextRea
$LN15@xmlTextRea:
	mov	eax, DWORD PTR __Result$1[ebp]
	mov	DWORD PTR tv134[ebp], eax
$LN13@xmlTextRea:
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c

; 4736 :         chars = vsnprintf(str, size, msg, aq);

	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR _chars$[ebp], ecx

; 4737 :         va_end(aq);

	mov	DWORD PTR _aq$[ebp], 0

; 4738 :         if (chars < 0) {

	cmp	DWORD PTR _chars$[ebp], 0
	jge	SHORT $LN4@xmlTextRea

; 4739 : 	    xmlGenericError(xmlGenericErrorContext, "vsnprintf failed !\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BE@KJPJIHAO@vsnprintf?5failed?5?$CB?6@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4740 : 	    if (str)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN5@xmlTextRea

; 4741 : 		xmlFree(str);

	mov	esi, esp
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlTextRea:

; 4742 : 	    return NULL;

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 4743 : 	}
; 4744 : 	if ((chars < size) || (size == MAX_ERR_MSG_SIZE))

	mov	edx, DWORD PTR _chars$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jl	SHORT $LN7@xmlTextRea
	cmp	DWORD PTR _size$[ebp], 64000		; 0000fa00H
	jne	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 4745 :             break;

	jmp	$LN3@xmlTextRea
$LN6@xmlTextRea:

; 4746 :         if (chars < MAX_ERR_MSG_SIZE)

	cmp	DWORD PTR _chars$[ebp], 64000		; 0000fa00H
	jge	SHORT $LN8@xmlTextRea

; 4747 : 	size = chars + 1;

	mov	eax, DWORD PTR _chars$[ebp]
	add	eax, 1
	mov	DWORD PTR _size$[ebp], eax
	jmp	SHORT $LN9@xmlTextRea
$LN8@xmlTextRea:

; 4748 : 	else
; 4749 : 		size = MAX_ERR_MSG_SIZE;

	mov	DWORD PTR _size$[ebp], 64000		; 0000fa00H
$LN9@xmlTextRea:

; 4750 :         if ((larger = (char *) xmlRealloc(str, size)) == NULL) {

	mov	esi, esp
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _larger$[ebp], eax
	cmp	DWORD PTR _larger$[ebp], 0
	jne	SHORT $LN10@xmlTextRea

; 4751 : 	    xmlGenericError(xmlGenericErrorContext, "xmlRealloc failed !\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BF@DCPGEBNC@xmlRealloc?5failed?5?$CB?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4752 : 	    if (str)

	cmp	DWORD PTR _str$[ebp], 0
	je	SHORT $LN11@xmlTextRea

; 4753 :                 xmlFree(str);

	mov	esi, esp
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlTextRea:

; 4754 :             return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN10@xmlTextRea:

; 4755 :         }
; 4756 :         str = larger;

	mov	eax, DWORD PTR _larger$[ebp]
	mov	DWORD PTR _str$[ebp], eax

; 4757 :     }

	jmp	$LN2@xmlTextRea
$LN3@xmlTextRea:

; 4758 : 
; 4759 :     return str;

	mov	eax, DWORD PTR _str$[ebp]
$LN1@xmlTextRea:

; 4760 : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderBuildMessage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderCollectSiblings
_TEXT	SEGMENT
tv72 = -16						; size = 4
_tmp$1 = -12						; size = 4
_ret$ = -8						; size = 4
_buffer$ = -4						; size = 4
_node$ = 8						; size = 4
_xmlTextReaderCollectSiblings PROC			; COMDAT

; 1245 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1246 :     xmlBufferPtr buffer;
; 1247 :     xmlChar *ret;
; 1248 : 
; 1249 :     if ((node == NULL) || (node->type == XML_NAMESPACE_DECL))

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN8@xmlTextRea
	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN7@xmlTextRea
$LN8@xmlTextRea:

; 1250 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN7@xmlTextRea:

; 1251 : 
; 1252 :     buffer = xmlBufferCreate();

	call	_xmlBufferCreate
	mov	DWORD PTR _buffer$[ebp], eax

; 1253 :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN9@xmlTextRea

; 1254 :        return NULL;

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 1255 : 
; 1256 :     for ( ; node != NULL; node = node->next) {

	jmp	SHORT $LN4@xmlTextRea
$LN2@xmlTextRea:
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _node$[ebp], edx
$LN4@xmlTextRea:
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 1257 :        switch (node->type) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	cmp	DWORD PTR tv72[ebp], 1
	je	SHORT $LN11@xmlTextRea
	cmp	DWORD PTR tv72[ebp], 2
	jle	SHORT $LN5@xmlTextRea
	cmp	DWORD PTR tv72[ebp], 4
	jle	SHORT $LN10@xmlTextRea
	jmp	SHORT $LN5@xmlTextRea
$LN10@xmlTextRea:

; 1258 :        case XML_TEXT_NODE:
; 1259 :        case XML_CDATA_SECTION_NODE:
; 1260 :            xmlBufferCat(buffer, node->content);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_xmlBufferCat
	add	esp, 8

; 1261 :            break;

	jmp	SHORT $LN5@xmlTextRea
$LN11@xmlTextRea:

; 1262 :        case XML_ELEMENT_NODE: {
; 1263 :            xmlChar *tmp;
; 1264 : 
; 1265 : 	   tmp = xmlTextReaderCollectSiblings(node->children);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlTextReaderCollectSiblings
	add	esp, 4
	mov	DWORD PTR _tmp$1[ebp], eax

; 1266 :            xmlBufferCat(buffer, tmp);

	mov	ecx, DWORD PTR _tmp$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	push	edx
	call	_xmlBufferCat
	add	esp, 8

; 1267 : 	   xmlFree(tmp);

	mov	esi, esp
	mov	eax, DWORD PTR _tmp$1[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlTextRea:

; 1268 : 	   break;
; 1269 :        }
; 1270 :        default:
; 1271 :            break;
; 1272 :        }
; 1273 :     }

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 1274 :     ret = buffer->content;

	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ret$[ebp], edx

; 1275 :     buffer->content = NULL;

	mov	eax, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax], 0

; 1276 :     xmlBufferFree(buffer);

	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_xmlBufferFree
	add	esp, 4

; 1277 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 1278 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderCollectSiblings ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderDoExpand
_TEXT	SEGMENT
_val$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderDoExpand PROC				; COMDAT

; 1210 : xmlTextReaderDoExpand(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1211 :     int val;
; 1212 : 
; 1213 :     if ((reader == NULL) || (reader->node == NULL) || (reader->ctxt == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN6@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN6@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN4@xmlTextRea
$LN6@xmlTextRea:

; 1214 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 1215 :     do {
; 1216 : 	if (reader->ctxt->instate == XML_PARSER_EOF) return(1);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+172], -1
	jne	SHORT $LN7@xmlTextRea
	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 1217 : 
; 1218 :         if (xmlTextReaderGetSuccessor(reader->node) != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	_xmlTextReaderGetSuccessor
	add	esp, 4
	test	eax, eax
	je	SHORT $LN8@xmlTextRea

; 1219 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 1220 : 	if (reader->ctxt->nodeNr < reader->depth)

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	cmp	eax, DWORD PTR [edx+72]
	jge	SHORT $LN9@xmlTextRea

; 1221 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 1222 : 	if (reader->mode == XML_TEXTREADER_MODE_EOF)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	SHORT $LN10@xmlTextRea

; 1223 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN10@xmlTextRea:

; 1224 : 	val = xmlTextReaderPushData(reader);

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderPushData
	add	esp, 4
	mov	DWORD PTR _val$[ebp], eax

; 1225 : 	if (val < 0){

	cmp	DWORD PTR _val$[ebp], 0
	jge	SHORT $LN2@xmlTextRea

; 1226 : 	    reader->mode = XML_TEXTREADER_MODE_ERROR;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax], 2

; 1227 : 	    return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 1228 : 	}
; 1229 :     } while(reader->mode != XML_TEXTREADER_MODE_EOF);

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	$LN4@xmlTextRea

; 1230 :     return(1);

	mov	eax, 1
$LN1@xmlTextRea:

; 1231 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderDoExpand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGetSuccessor
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_xmlTextReaderGetSuccessor PROC				; COMDAT

; 1187 : xmlTextReaderGetSuccessor(xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1188 :     if (cur == NULL) return(NULL) ; /* ERROR */

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN5@xmlTextRea
	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 1189 :     if (cur->next != NULL) return(cur->next) ;

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN4@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 1190 :     do {
; 1191 :         cur = cur->parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax

; 1192 :         if (cur == NULL) break;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN7@xmlTextRea
	jmp	SHORT $LN3@xmlTextRea
$LN7@xmlTextRea:

; 1193 :         if (cur->next != NULL) return(cur->next);

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN2@xmlTextRea
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 1194 :     } while (cur != NULL);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN4@xmlTextRea
$LN3@xmlTextRea:

; 1195 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlTextRea:

; 1196 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderGetSuccessor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValidateEntity
_TEXT	SEGMENT
_tmp$1 = -16						; size = 4
_ctxt$ = -12						; size = 4
_node$ = -8						; size = 4
_oldnode$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderValidateEntity PROC			; COMDAT

; 1090 : xmlTextReaderValidateEntity(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1091 :     xmlNodePtr oldnode = reader->node;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _oldnode$[ebp], ecx

; 1092 :     xmlNodePtr node = reader->node;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _node$[ebp], eax

; 1093 :     xmlParserCtxtPtr ctxt = reader->ctxt;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _ctxt$[ebp], edx
$LN4@xmlTextRea:

; 1094 : 
; 1095 :     do {
; 1096 : 	if (node->type == XML_ENTITY_REF_NODE) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 5
	jne	$LN10@xmlTextRea

; 1097 : 	    /*
; 1098 : 	     * Case where the underlying tree is not availble, lookup the entity
; 1099 : 	     * and walk it.
; 1100 : 	     */
; 1101 : 	    if ((node->children == NULL) && (ctxt->sax != NULL) &&

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN12@xmlTextRea
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN12@xmlTextRea
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN12@xmlTextRea

; 1102 : 		(ctxt->sax->getEntity != NULL)) {
; 1103 : 		node->children = (xmlNodePtr)

	mov	esi, esp
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+12], eax
$LN12@xmlTextRea:

; 1104 : 		    ctxt->sax->getEntity(ctxt, node->name);
; 1105 : 	    }
; 1106 : 
; 1107 : 	    if ((node->children != NULL) &&
; 1108 : 		(node->children->type == XML_ENTITY_DECL) &&

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN13@xmlTextRea
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 17			; 00000011H
	jne	SHORT $LN13@xmlTextRea
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN13@xmlTextRea

; 1109 : 		(node->children->children != NULL)) {
; 1110 : 		xmlTextReaderEntPush(reader, node);

	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderEntPush
	add	esp, 8

; 1111 : 		node = node->children->children;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _node$[ebp], eax

; 1112 : 		continue;

	jmp	$LN2@xmlTextRea

; 1113 : 	    } else {

	jmp	SHORT $LN14@xmlTextRea
$LN13@xmlTextRea:

; 1114 : 		/*
; 1115 : 		 * The error has probably be raised already.
; 1116 : 		 */
; 1117 : 		if (node == oldnode)

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	ecx, DWORD PTR _oldnode$[ebp]
	jne	SHORT $LN15@xmlTextRea

; 1118 : 		    break;

	jmp	$LN3@xmlTextRea
$LN15@xmlTextRea:

; 1119 : 		node = node->next;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _node$[ebp], eax
$LN14@xmlTextRea:

; 1120 : 	    }

	jmp	SHORT $LN11@xmlTextRea
$LN10@xmlTextRea:

; 1121 : #ifdef LIBXML_REGEXP_ENABLED
; 1122 : 	} else if (node->type == XML_ELEMENT_NODE) {

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN16@xmlTextRea

; 1123 : 	    reader->node = node;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+64], eax

; 1124 : 	    xmlTextReaderValidatePush(reader);

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderValidatePush
	add	esp, 4
	jmp	SHORT $LN11@xmlTextRea
$LN16@xmlTextRea:

; 1125 : 	} else if ((node->type == XML_TEXT_NODE) ||

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+4], 3
	je	SHORT $LN19@xmlTextRea
	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jne	SHORT $LN11@xmlTextRea
$LN19@xmlTextRea:

; 1126 : 		   (node->type == XML_CDATA_SECTION_NODE)) {
; 1127 :             xmlTextReaderValidateCData(reader, node->content,

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_xmlStrlen
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderValidateCData
	add	esp, 12					; 0000000cH
$LN11@xmlTextRea:

; 1128 : 	                               xmlStrlen(node->content));
; 1129 : #endif
; 1130 : 	}
; 1131 : 
; 1132 : 	/*
; 1133 : 	 * go to next node
; 1134 : 	 */
; 1135 : 	if (node->children != NULL) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN20@xmlTextRea

; 1136 : 	    node = node->children;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _node$[ebp], edx

; 1137 : 	    continue;

	jmp	$LN2@xmlTextRea
	jmp	SHORT $LN21@xmlTextRea
$LN20@xmlTextRea:

; 1138 : 	} else if (node->type == XML_ELEMENT_NODE) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN21@xmlTextRea

; 1139 : 	    xmlTextReaderValidatePop(reader);

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderValidatePop
	add	esp, 4
$LN21@xmlTextRea:

; 1140 : 	}
; 1141 : 	if (node->next != NULL) {

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN7@xmlTextRea

; 1142 : 	    node = node->next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$[ebp], ecx

; 1143 : 	    continue;

	jmp	$LN2@xmlTextRea
$LN7@xmlTextRea:

; 1144 : 	}
; 1145 : 	do {
; 1146 : 	    node = node->parent;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _node$[ebp], eax

; 1147 : 	    if (node->type == XML_ELEMENT_NODE) {

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN24@xmlTextRea

; 1148 : 	        xmlNodePtr tmp;
; 1149 : 		if (reader->entNr == 0) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+96], 0
	jne	SHORT $LN25@xmlTextRea
$LN8@xmlTextRea:

; 1150 : 		    while ((tmp = node->last) != NULL) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _tmp$1[ebp], ecx
	cmp	DWORD PTR _tmp$1[ebp], 0
	je	SHORT $LN25@xmlTextRea

; 1151 : 			if ((tmp->extra & NODE_IS_PRESERVED) == 0) {

	mov	edx, DWORD PTR _tmp$1[ebp]
	movzx	eax, WORD PTR [edx+58]
	and	eax, 2
	jne	SHORT $LN26@xmlTextRea

; 1152 : 			    xmlUnlinkNode(tmp);

	mov	ecx, DWORD PTR _tmp$1[ebp]
	push	ecx
	call	_xmlUnlinkNode
	add	esp, 4

; 1153 : 			    xmlTextReaderFreeNode(reader, tmp);

	mov	edx, DWORD PTR _tmp$1[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderFreeNode
	add	esp, 8

; 1154 : 			} else

	jmp	SHORT $LN27@xmlTextRea
$LN26@xmlTextRea:

; 1155 : 			    break;

	jmp	SHORT $LN25@xmlTextRea
$LN27@xmlTextRea:

; 1156 : 		    }

	jmp	SHORT $LN8@xmlTextRea
$LN25@xmlTextRea:

; 1157 : 		}
; 1158 : 		reader->node = node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [ecx+64], edx

; 1159 : 		xmlTextReaderValidatePop(reader);

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderValidatePop
	add	esp, 4
$LN24@xmlTextRea:

; 1160 : 	    }
; 1161 : 	    if ((node->type == XML_ENTITY_DECL) &&
; 1162 : 		(reader->ent != NULL) && (reader->ent->children == node)) {

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 17			; 00000011H
	jne	SHORT $LN28@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+92], 0
	je	SHORT $LN28@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _node$[ebp]
	jne	SHORT $LN28@xmlTextRea

; 1163 : 		node = xmlTextReaderEntPop(reader);

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderEntPop
	add	esp, 4
	mov	DWORD PTR _node$[ebp], eax
$LN28@xmlTextRea:

; 1164 : 	    }
; 1165 : 	    if (node == oldnode)

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	ecx, DWORD PTR _oldnode$[ebp]
	jne	SHORT $LN29@xmlTextRea

; 1166 : 		break;

	jmp	SHORT $LN2@xmlTextRea
$LN29@xmlTextRea:

; 1167 : 	    if (node->next != NULL) {

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN5@xmlTextRea

; 1168 : 		node = node->next;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _node$[ebp], ecx

; 1169 : 		break;

	jmp	SHORT $LN2@xmlTextRea
$LN5@xmlTextRea:

; 1170 : 	    }
; 1171 : 	} while ((node != NULL) && (node != oldnode));

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN2@xmlTextRea
	mov	edx, DWORD PTR _node$[ebp]
	cmp	edx, DWORD PTR _oldnode$[ebp]
	jne	$LN7@xmlTextRea
$LN2@xmlTextRea:

; 1172 :     } while ((node != NULL) && (node != oldnode));

	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _node$[ebp]
	cmp	eax, DWORD PTR _oldnode$[ebp]
	jne	$LN4@xmlTextRea
$LN3@xmlTextRea:

; 1173 :     reader->node = oldnode;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _oldnode$[ebp]
	mov	DWORD PTR [ecx+64], edx

; 1174 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderValidateEntity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValidatePop
_TEXT	SEGMENT
_ret$1 = -12						; size = 4
_qname$2 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderValidatePop PROC				; COMDAT

; 1039 : xmlTextReaderValidatePop(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1040 :     xmlNodePtr node = reader->node;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _node$[ebp], ecx

; 1041 : 
; 1042 : #ifdef LIBXML_VALID_ENABLED
; 1043 :     if ((reader->validate == XML_TEXTREADER_VALIDATE_DTD) &&
; 1044 :         (reader->ctxt != NULL) && (reader->ctxt->validate == 1)) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+8], 1
	jne	$LN2@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN2@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+104], 1
	jne	$LN2@xmlTextRea

; 1045 : 	if ((node->ns == NULL) || (node->ns->prefix == NULL)) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@xmlTextRea
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN3@xmlTextRea
$LN5@xmlTextRea:

; 1046 : 	    reader->ctxt->valid &= xmlValidatePopElement(&reader->ctxt->vctxt,

	mov	eax, DWORD PTR _reader$[ebp]
	mov	esi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidatePopElement
	add	esp, 16					; 00000010H
	and	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+100], eax

; 1047 : 				    reader->ctxt->myDoc, node, node->name);
; 1048 : 	} else {

	jmp	$LN2@xmlTextRea
$LN3@xmlTextRea:

; 1049 : 	    /* TODO use the BuildQName interface */
; 1050 : 	    xmlChar *qname;
; 1051 : 
; 1052 : 	    qname = xmlStrdup(node->ns->prefix);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _qname$2[ebp], eax

; 1053 : 	    qname = xmlStrcat(qname, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	eax, DWORD PTR _qname$2[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _qname$2[ebp], eax

; 1054 : 	    qname = xmlStrcat(qname, node->name);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _qname$2[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _qname$2[ebp], eax

; 1055 : 	    reader->ctxt->valid &= xmlValidatePopElement(&reader->ctxt->vctxt,

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	esi, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _qname$2[ebp]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidatePopElement
	add	esp, 16					; 00000010H
	and	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+100], eax

; 1056 : 				    reader->ctxt->myDoc, node, qname);
; 1057 : 	    if (qname != NULL)

	cmp	DWORD PTR _qname$2[ebp], 0
	je	SHORT $LN2@xmlTextRea

; 1058 : 		xmlFree(qname);

	mov	esi, esp
	mov	eax, DWORD PTR _qname$2[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlTextRea:

; 1059 : 	}
; 1060 :     }
; 1061 : #endif /* LIBXML_VALID_ENABLED */
; 1062 : #ifdef LIBXML_SCHEMAS_ENABLED
; 1063 :     if ((reader->validate == XML_TEXTREADER_VALIDATE_RNG) &&

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+8], 2
	jne	SHORT $LN1@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+120], 0
	je	SHORT $LN1@xmlTextRea

; 1064 :                (reader->rngValidCtxt != NULL)) {
; 1065 : 	int ret;
; 1066 : 
; 1067 : 	if (reader->rngFullNode != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+132], 0
	je	SHORT $LN8@xmlTextRea

; 1068 : 	    if (node == reader->rngFullNode)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _node$[ebp]
	cmp	edx, DWORD PTR [ecx+132]
	jne	SHORT $LN9@xmlTextRea

; 1069 : 	        reader->rngFullNode = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+132], 0
$LN9@xmlTextRea:

; 1070 : 	    return;

	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 1071 : 	}
; 1072 : 	ret = xmlRelaxNGValidatePopElement(reader->rngValidCtxt,

	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGValidatePopElement
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$1[ebp], eax

; 1073 : 	                                   reader->ctxt->myDoc,
; 1074 : 					   node);
; 1075 : 	if (ret != 1)

	cmp	DWORD PTR _ret$1[ebp], 1
	je	SHORT $LN1@xmlTextRea

; 1076 : 	    reader->rngValidErrors++;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+128], edx
$LN1@xmlTextRea:

; 1077 :     }
; 1078 : #endif
; 1079 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderValidatePop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValidateCData
_TEXT	SEGMENT
_ret$1 = -4						; size = 4
_reader$ = 8						; size = 4
_data$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlTextReaderValidateCData PROC			; COMDAT

; 1011 :                            const xmlChar *data, int len) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1012 : #ifdef LIBXML_VALID_ENABLED
; 1013 :     if ((reader->validate == XML_TEXTREADER_VALIDATE_DTD) &&
; 1014 :         (reader->ctxt != NULL) && (reader->ctxt->validate == 1)) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jne	SHORT $LN2@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN2@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+104], 1
	jne	SHORT $LN2@xmlTextRea

; 1015 : 	reader->ctxt->valid &= xmlValidatePushCData(&reader->ctxt->vctxt,

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	esi, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidatePushCData
	add	esp, 12					; 0000000cH
	and	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+100], eax
$LN2@xmlTextRea:

; 1016 : 	                                            data, len);
; 1017 :     }
; 1018 : #endif /* LIBXML_VALID_ENABLED */
; 1019 : #ifdef LIBXML_SCHEMAS_ENABLED
; 1020 :     if ((reader->validate == XML_TEXTREADER_VALIDATE_RNG) &&

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+8], 2
	jne	SHORT $LN1@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+120], 0
	je	SHORT $LN1@xmlTextRea

; 1021 :                (reader->rngValidCtxt != NULL)) {
; 1022 : 	int ret;
; 1023 : 
; 1024 : 	if (reader->rngFullNode != NULL) return;

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+132], 0
	je	SHORT $LN4@xmlTextRea
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 1025 : 	ret = xmlRelaxNGValidatePushCData(reader->rngValidCtxt, data, len);

	mov	eax, DWORD PTR _len$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGValidatePushCData
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$1[ebp], eax

; 1026 : 	if (ret != 1)

	cmp	DWORD PTR _ret$1[ebp], 1
	je	SHORT $LN1@xmlTextRea

; 1027 : 	    reader->rngValidErrors++;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+128], edx
$LN1@xmlTextRea:

; 1028 :     }
; 1029 : #endif
; 1030 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderValidateCData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValidatePush
_TEXT	SEGMENT
_ret$1 = -12						; size = 4
_qname$2 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderValidatePush PROC				; COMDAT

; 948  : xmlTextReaderValidatePush(xmlTextReaderPtr reader ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 949  :     xmlNodePtr node = reader->node;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _node$[ebp], ecx

; 950  : 
; 951  : #ifdef LIBXML_VALID_ENABLED
; 952  :     if ((reader->validate == XML_TEXTREADER_VALIDATE_DTD) &&
; 953  :         (reader->ctxt != NULL) && (reader->ctxt->validate == 1)) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+8], 1
	jne	$LN2@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	$LN2@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+104], 1
	jne	$LN2@xmlTextRea

; 954  : 	if ((node->ns == NULL) || (node->ns->prefix == NULL)) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN5@xmlTextRea
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN3@xmlTextRea
$LN5@xmlTextRea:

; 955  : 	    reader->ctxt->valid &= xmlValidatePushElement(&reader->ctxt->vctxt,

	mov	eax, DWORD PTR _reader$[ebp]
	mov	esi, DWORD PTR [eax+20]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidatePushElement
	add	esp, 16					; 00000010H
	and	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+100], eax

; 956  : 				    reader->ctxt->myDoc, node, node->name);
; 957  : 	} else {

	jmp	$LN2@xmlTextRea
$LN3@xmlTextRea:

; 958  : 	    /* TODO use the BuildQName interface */
; 959  : 	    xmlChar *qname;
; 960  : 
; 961  : 	    qname = xmlStrdup(node->ns->prefix);

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _qname$2[ebp], eax

; 962  : 	    qname = xmlStrcat(qname, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	eax, DWORD PTR _qname$2[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _qname$2[ebp], eax

; 963  : 	    qname = xmlStrcat(qname, node->name);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _qname$2[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _qname$2[ebp], eax

; 964  : 	    reader->ctxt->valid &= xmlValidatePushElement(&reader->ctxt->vctxt,

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	esi, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _qname$2[ebp]
	push	edx
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	add	edx, 108				; 0000006cH
	push	edx
	call	_xmlValidatePushElement
	add	esp, 16					; 00000010H
	and	eax, DWORD PTR [esi+100]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+100], eax

; 965  : 				    reader->ctxt->myDoc, node, qname);
; 966  : 	    if (qname != NULL)

	cmp	DWORD PTR _qname$2[ebp], 0
	je	SHORT $LN2@xmlTextRea

; 967  : 		xmlFree(qname);

	mov	esi, esp
	mov	eax, DWORD PTR _qname$2[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlTextRea:

; 968  : 	}
; 969  :     }
; 970  : #endif /* LIBXML_VALID_ENABLED */
; 971  : #ifdef LIBXML_SCHEMAS_ENABLED
; 972  :     if ((reader->validate == XML_TEXTREADER_VALIDATE_RNG) &&

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+8], 2
	jne	$LN1@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+120], 0
	je	$LN1@xmlTextRea

; 973  :                (reader->rngValidCtxt != NULL)) {
; 974  : 	int ret;
; 975  : 
; 976  : 	if (reader->rngFullNode != NULL) return;

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+132], 0
	je	SHORT $LN8@xmlTextRea
	jmp	$LN1@xmlTextRea
$LN8@xmlTextRea:

; 977  : 	ret = xmlRelaxNGValidatePushElement(reader->rngValidCtxt,

	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGValidatePushElement
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$1[ebp], eax

; 978  : 	                                    reader->ctxt->myDoc,
; 979  : 					    node);
; 980  : 	if (ret == 0) {

	cmp	DWORD PTR _ret$1[ebp], 0
	jne	SHORT $LN9@xmlTextRea

; 981  : 	    /*
; 982  : 	     * this element requires a full tree
; 983  : 	     */
; 984  : 	    node = xmlTextReaderExpand(reader);

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderExpand
	add	esp, 4
	mov	DWORD PTR _node$[ebp], eax

; 985  : 	    if (node == NULL) {

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN10@xmlTextRea

; 986  : printf("Expand failed !\n");

	push	OFFSET ??_C@_0BB@DOFEEJAH@Expand?5failed?5?$CB?6@
	call	_printf
	add	esp, 4

; 987  : 	        ret = -1;

	mov	DWORD PTR _ret$1[ebp], -1

; 988  : 	    } else {

	jmp	SHORT $LN9@xmlTextRea
$LN10@xmlTextRea:

; 989  : 		ret = xmlRelaxNGValidateFullElement(reader->rngValidCtxt,

	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_xmlRelaxNGValidateFullElement
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$1[ebp], eax

; 990  : 						    reader->ctxt->myDoc,
; 991  : 						    node);
; 992  : 		reader->rngFullNode = node;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR [edx+132], eax
$LN9@xmlTextRea:

; 993  : 	    }
; 994  : 	}
; 995  : 	if (ret != 1)

	cmp	DWORD PTR _ret$1[ebp], 1
	je	SHORT $LN1@xmlTextRea

; 996  : 	    reader->rngValidErrors++;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	add	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+128], edx
$LN1@xmlTextRea:

; 997  :     }
; 998  : #endif
; 999  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderValidatePush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderPushData
_TEXT	SEGMENT
_alloc$ = -20						; size = 4
_oldstate$ = -16					; size = 4
_s$ = -12						; size = 4
_val$ = -8						; size = 4
_inbuf$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderPushData PROC				; COMDAT

; 829  : xmlTextReaderPushData(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 830  :     xmlBufPtr inbuf;
; 831  :     int val, s;
; 832  :     xmlTextReaderState oldstate;
; 833  :     int alloc;
; 834  : 
; 835  :     if ((reader->input == NULL) || (reader->input->buffer == NULL))

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN5@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 836  : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 837  : 
; 838  :     oldstate = reader->state;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _oldstate$[ebp], ecx

; 839  :     reader->state = XML_TEXTREADER_NONE;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], -1

; 840  :     inbuf = reader->input->buffer;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR _inbuf$[ebp], edx

; 841  :     alloc = xmlBufGetAllocationScheme(inbuf);

	mov	eax, DWORD PTR _inbuf$[ebp]
	push	eax
	call	_xmlBufGetAllocationScheme
	add	esp, 4
	mov	DWORD PTR _alloc$[ebp], eax
$LN2@xmlTextRea:

; 842  : 
; 843  :     while (reader->state == XML_TEXTREADER_NONE) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+16], -1
	jne	$LN3@xmlTextRea

; 844  : 	if (xmlBufUse(inbuf) < reader->cur + CHUNK_SIZE) {

	mov	edx, DWORD PTR _inbuf$[ebp]
	push	edx
	call	_xmlBufUse
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 512				; 00000200H
	cmp	eax, edx
	jae	$LN6@xmlTextRea

; 845  : 	    /*
; 846  : 	     * Refill the buffer unless we are at the end of the stream
; 847  : 	     */
; 848  : 	    if (reader->mode != XML_TEXTREADER_MODE_EOF) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax], 3
	je	$LN7@xmlTextRea

; 849  : 		val = xmlParserInputBufferRead(reader->input, 4096);

	push	4096					; 00001000H
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlParserInputBufferRead
	add	esp, 8
	mov	DWORD PTR _val$[ebp], eax

; 850  : 		if ((val == 0) &&

	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN9@xmlTextRea
	cmp	DWORD PTR _alloc$[ebp], 2
	jne	SHORT $LN9@xmlTextRea

; 851  : 		    (alloc == XML_BUFFER_ALLOC_IMMUTABLE)) {
; 852  : 		    if (xmlBufUse(inbuf) == reader->cur) {

	mov	eax, DWORD PTR _inbuf$[ebp]
	push	eax
	call	_xmlBufUse
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	eax, DWORD PTR [ecx+60]
	jne	SHORT $LN11@xmlTextRea

; 853  : 			reader->mode = XML_TEXTREADER_MODE_EOF;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx], 3

; 854  : 			reader->state = oldstate;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR _oldstate$[ebp]
	mov	DWORD PTR [eax+16], ecx
$LN11@xmlTextRea:

; 855  : 		    }

	jmp	SHORT $LN10@xmlTextRea
$LN9@xmlTextRea:

; 856  : 		} else if (val < 0) {

	cmp	DWORD PTR _val$[ebp], 0
	jge	SHORT $LN12@xmlTextRea

; 857  : 		    reader->mode = XML_TEXTREADER_MODE_EOF;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx], 3

; 858  : 		    reader->state = oldstate;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR _oldstate$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 859  : 		    if ((oldstate != XML_TEXTREADER_START) ||

	cmp	DWORD PTR _oldstate$[ebp], 0
	jne	SHORT $LN15@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN14@xmlTextRea
$LN15@xmlTextRea:

; 860  : 			(reader->ctxt->myDoc != NULL))
; 861  : 			return(val);

	mov	eax, DWORD PTR _val$[ebp]
	jmp	$LN1@xmlTextRea
$LN14@xmlTextRea:

; 862  : 		} else if (val == 0) {

	jmp	SHORT $LN10@xmlTextRea
$LN12@xmlTextRea:
	cmp	DWORD PTR _val$[ebp], 0
	jne	SHORT $LN10@xmlTextRea

; 863  : 		    /* mark the end of the stream and process the remains */
; 864  : 		    reader->mode = XML_TEXTREADER_MODE_EOF;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx], 3

; 865  : 		    break;

	jmp	$LN3@xmlTextRea
$LN10@xmlTextRea:

; 866  : 		}
; 867  : 
; 868  : 	    } else

	jmp	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 869  : 		break;

	jmp	$LN3@xmlTextRea
$LN6@xmlTextRea:

; 870  : 	}
; 871  : 	/*
; 872  : 	 * parse by block of CHUNK_SIZE bytes, various tests show that
; 873  : 	 * it's the best tradeoff at least on a 1.2GH Duron
; 874  : 	 */
; 875  : 	if (xmlBufUse(inbuf) >= reader->cur + CHUNK_SIZE) {

	mov	edx, DWORD PTR _inbuf$[ebp]
	push	edx
	call	_xmlBufUse
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 512				; 00000200H
	cmp	eax, edx
	jb	SHORT $LN17@xmlTextRea

; 876  : 	    val = xmlParseChunk(reader->ctxt,

	push	0
	push	512					; 00000200H
	mov	eax, DWORD PTR _inbuf$[ebp]
	push	eax
	call	_xmlBufContent
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	add	eax, DWORD PTR [ecx+60]
	push	eax
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_xmlParseChunk
	add	esp, 16					; 00000010H
	mov	DWORD PTR _val$[ebp], eax

; 877  :                  (const char *) xmlBufContent(inbuf) + reader->cur,
; 878  :                                 CHUNK_SIZE, 0);
; 879  : 	    reader->cur += CHUNK_SIZE;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, 512				; 00000200H
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+60], edx

; 880  : 	    if (val != 0)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN19@xmlTextRea

; 881  : 		reader->ctxt->wellFormed = 0;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+12], 0
$LN19@xmlTextRea:

; 882  : 	    if (reader->ctxt->wellFormed == 0)

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN20@xmlTextRea

; 883  : 		break;

	jmp	SHORT $LN3@xmlTextRea
$LN20@xmlTextRea:

; 884  : 	} else {

	jmp	SHORT $LN18@xmlTextRea
$LN17@xmlTextRea:

; 885  : 	    s = xmlBufUse(inbuf) - reader->cur;

	mov	edx, DWORD PTR _inbuf$[ebp]
	push	edx
	call	_xmlBufUse
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	sub	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR _s$[ebp], eax

; 886  : 	    val = xmlParseChunk(reader->ctxt,

	push	0
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _inbuf$[ebp]
	push	eax
	call	_xmlBufContent
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	add	eax, DWORD PTR [ecx+60]
	push	eax
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_xmlParseChunk
	add	esp, 16					; 00000010H
	mov	DWORD PTR _val$[ebp], eax

; 887  : 		 (const char *) xmlBufContent(inbuf) + reader->cur,
; 888  : 			        s, 0);
; 889  : 	    reader->cur += s;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	add	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+60], edx

; 890  : 	    if (val != 0)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN21@xmlTextRea

; 891  : 		reader->ctxt->wellFormed = 0;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+12], 0
$LN21@xmlTextRea:

; 892  : 	    break;

	jmp	SHORT $LN3@xmlTextRea
$LN18@xmlTextRea:

; 893  : 	}
; 894  :     }

	jmp	$LN2@xmlTextRea
$LN3@xmlTextRea:

; 895  : 
; 896  :     /*
; 897  :      * Discard the consumed input when needed and possible
; 898  :      */
; 899  :     if (reader->mode == XML_TEXTREADER_MODE_INTERACTIVE) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax], 1
	jne	SHORT $LN22@xmlTextRea

; 900  :         if (alloc != XML_BUFFER_ALLOC_IMMUTABLE) {

	cmp	DWORD PTR _alloc$[ebp], 2
	je	SHORT $LN24@xmlTextRea

; 901  : 	    if ((reader->cur >= 4096) &&

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+60], 4096		; 00001000H
	jb	SHORT $LN24@xmlTextRea
	mov	edx, DWORD PTR _inbuf$[ebp]
	push	edx
	call	_xmlBufUse
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	sub	eax, DWORD PTR [ecx+60]
	cmp	eax, 512				; 00000200H
	ja	SHORT $LN24@xmlTextRea

; 902  : 		(xmlBufUse(inbuf) - reader->cur <= CHUNK_SIZE)) {
; 903  : 		val = xmlBufShrink(inbuf, reader->cur);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _inbuf$[ebp]
	push	ecx
	call	_xmlBufShrink
	add	esp, 8
	mov	DWORD PTR _val$[ebp], eax

; 904  : 		if (val >= 0) {

	cmp	DWORD PTR _val$[ebp], 0
	jl	SHORT $LN24@xmlTextRea

; 905  : 		    reader->cur -= val;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+60]
	sub	eax, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+60], eax
$LN24@xmlTextRea:

; 906  : 		}
; 907  : 	    }
; 908  : 	}
; 909  :     }

	jmp	$LN23@xmlTextRea
$LN22@xmlTextRea:

; 910  : 
; 911  :     /*
; 912  :      * At the end of the stream signal that the work is done to the Push
; 913  :      * parser.
; 914  :      */
; 915  :     else if (reader->mode == XML_TEXTREADER_MODE_EOF) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx], 3
	jne	$LN23@xmlTextRea

; 916  : 	if (reader->state != XML_TEXTREADER_DONE) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+16], 5
	je	$LN23@xmlTextRea

; 917  : 	    s = xmlBufUse(inbuf) - reader->cur;

	mov	ecx, DWORD PTR _inbuf$[ebp]
	push	ecx
	call	_xmlBufUse
	add	esp, 4
	mov	edx, DWORD PTR _reader$[ebp]
	sub	eax, DWORD PTR [edx+60]
	mov	DWORD PTR _s$[ebp], eax

; 918  : 	    val = xmlParseChunk(reader->ctxt,

	push	1
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inbuf$[ebp]
	push	ecx
	call	_xmlBufContent
	add	esp, 4
	mov	edx, DWORD PTR _reader$[ebp]
	add	eax, DWORD PTR [edx+60]
	push	eax
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlParseChunk
	add	esp, 16					; 00000010H
	mov	DWORD PTR _val$[ebp], eax

; 919  : 		 (const char *) xmlBufContent(inbuf) + reader->cur,
; 920  : 			        s, 1);
; 921  : 	    reader->cur = xmlBufUse(inbuf);

	mov	edx, DWORD PTR _inbuf$[ebp]
	push	edx
	call	_xmlBufUse
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+60], eax

; 922  : 	    reader->state  = XML_TEXTREADER_DONE;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 5

; 923  : 	    if (val != 0) {

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN23@xmlTextRea

; 924  : 	        if (reader->ctxt->wellFormed)

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN30@xmlTextRea

; 925  : 		    reader->ctxt->wellFormed = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+12], 0
	jmp	SHORT $LN23@xmlTextRea
$LN30@xmlTextRea:

; 926  : 		else
; 927  : 		    return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN23@xmlTextRea:

; 928  : 	    }
; 929  : 	}
; 930  :     }
; 931  :     reader->state = oldstate;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _oldstate$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 932  :     if (reader->ctxt->wellFormed == 0) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN32@xmlTextRea

; 933  : 	reader->mode = XML_TEXTREADER_MODE_EOF;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx], 3

; 934  :         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN32@xmlTextRea:

; 935  :     }
; 936  : 
; 937  :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 938  : }

	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderPushData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderCDataBlock
_TEXT	SEGMENT
_reader$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_ch$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlTextReaderCDataBlock PROC				; COMDAT

; 807  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 808  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 809  :     xmlTextReaderPtr reader = ctxt->_private;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _reader$[ebp], edx

; 810  : 
; 811  : #ifdef DEBUG_CALLBACKS
; 812  :     printf("xmlTextReaderCDataBlock()\n");
; 813  : #endif
; 814  :     if ((reader != NULL) && (reader->cdataBlock != NULL)) {

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN1@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN1@xmlTextRea

; 815  : 	reader->cdataBlock(ctx, ch, len);

	mov	esi, esp
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ch$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlTextRea:

; 816  :     }
; 817  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderCDataBlock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderCharacters
_TEXT	SEGMENT
_reader$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_ch$ = 12						; size = 4
_len$ = 16						; size = 4
_xmlTextReaderCharacters PROC				; COMDAT

; 785  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 786  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 787  :     xmlTextReaderPtr reader = ctxt->_private;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _reader$[ebp], edx

; 788  : 
; 789  : #ifdef DEBUG_CALLBACKS
; 790  :     printf("xmlTextReaderCharacters()\n");
; 791  : #endif
; 792  :     if ((reader != NULL) && (reader->characters != NULL)) {

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN1@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN1@xmlTextRea

; 793  : 	reader->characters(ctx, ch, len);

	mov	esi, esp
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ch$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlTextRea:

; 794  :     }
; 795  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderCharacters ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderEndElementNs
_TEXT	SEGMENT
_reader$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_localname$ = 12					; size = 4
_prefix$ = 16						; size = 4
_URI$ = 20						; size = 4
_xmlTextReaderEndElementNs PROC				; COMDAT

; 762  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 763  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 764  :     xmlTextReaderPtr reader = ctxt->_private;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _reader$[ebp], edx

; 765  : 
; 766  : #ifdef DEBUG_CALLBACKS
; 767  :     printf("xmlTextReaderEndElementNs(%s)\n", localname);
; 768  : #endif
; 769  :     if ((reader != NULL) && (reader->endElementNs != NULL)) {

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN1@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN1@xmlTextRea

; 770  : 	reader->endElementNs(ctx, localname, prefix, URI);

	mov	esi, esp
	mov	ecx, DWORD PTR _URI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _localname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlTextRea:

; 771  :     }
; 772  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderEndElementNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderStartElementNs
_TEXT	SEGMENT
_reader$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_localname$ = 12					; size = 4
_prefix$ = 16						; size = 4
_URI$ = 20						; size = 4
_nb_namespaces$ = 24					; size = 4
_namespaces$ = 28					; size = 4
_nb_attributes$ = 32					; size = 4
_nb_defaulted$ = 36					; size = 4
_attributes$ = 40					; size = 4
_xmlTextReaderStartElementNs PROC			; COMDAT

; 728  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 729  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 730  :     xmlTextReaderPtr reader = ctxt->_private;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _reader$[ebp], edx

; 731  : 
; 732  : #ifdef DEBUG_CALLBACKS
; 733  :     printf("xmlTextReaderStartElementNs(%s)\n", localname);
; 734  : #endif
; 735  :     if ((reader != NULL) && (reader->startElementNs != NULL)) {

	cmp	DWORD PTR _reader$[ebp], 0
	je	$LN2@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN2@xmlTextRea

; 736  : 	reader->startElementNs(ctx, localname, prefix, URI, nb_namespaces,

	mov	esi, esp
	mov	ecx, DWORD PTR _attributes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nb_defaulted$[ebp]
	push	edx
	mov	eax, DWORD PTR _nb_attributes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _namespaces$[ebp]
	push	ecx
	mov	edx, DWORD PTR _nb_namespaces$[ebp]
	push	edx
	mov	eax, DWORD PTR _URI$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	add	esp, 36					; 00000024H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 737  : 	                       namespaces, nb_attributes, nb_defaulted,
; 738  : 			       attributes);
; 739  : 	if ((ctxt->node != NULL) && (ctxt->input != NULL) &&
; 740  : 	    (ctxt->input->cur != NULL) && (ctxt->input->cur[0] == '/') &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN2@xmlTextRea
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN2@xmlTextRea
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@xmlTextRea
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+16]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN2@xmlTextRea
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR [edx+16]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 62					; 0000003eH
	jne	SHORT $LN2@xmlTextRea

; 741  : 	    (ctxt->input->cur[1] == '>'))
; 742  : 	    ctxt->node->extra = NODE_IS_EMPTY;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, 1
	mov	WORD PTR [ecx+58], dx
$LN2@xmlTextRea:

; 743  :     }
; 744  :     if (reader != NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN1@xmlTextRea

; 745  : 	reader->state = XML_TEXTREADER_ELEMENT;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 1
$LN1@xmlTextRea:

; 746  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderStartElementNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderEndElement
_TEXT	SEGMENT
_reader$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_fullname$ = 12						; size = 4
_xmlTextReaderEndElement PROC				; COMDAT

; 691  : xmlTextReaderEndElement(void *ctx, const xmlChar *fullname) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 692  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 693  :     xmlTextReaderPtr reader = ctxt->_private;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _reader$[ebp], edx

; 694  : 
; 695  : #ifdef DEBUG_CALLBACKS
; 696  :     printf("xmlTextReaderEndElement(%s)\n", fullname);
; 697  : #endif
; 698  :     if ((reader != NULL) && (reader->endElement != NULL)) {

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN1@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN1@xmlTextRea

; 699  : 	reader->endElement(ctx, fullname);

	mov	esi, esp
	mov	ecx, DWORD PTR _fullname$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctx$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlTextRea:

; 700  :     }
; 701  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderEndElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderStartElement
_TEXT	SEGMENT
_reader$ = -8						; size = 4
_ctxt$ = -4						; size = 4
_ctx$ = 8						; size = 4
_fullname$ = 12						; size = 4
_atts$ = 16						; size = 4
_xmlTextReaderStartElement PROC				; COMDAT

; 665  : 	                  const xmlChar **atts) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 666  :     xmlParserCtxtPtr ctxt = (xmlParserCtxtPtr) ctx;

	mov	eax, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR _ctxt$[ebp], eax

; 667  :     xmlTextReaderPtr reader = ctxt->_private;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+272]
	mov	DWORD PTR _reader$[ebp], edx

; 668  : 
; 669  : #ifdef DEBUG_CALLBACKS
; 670  :     printf("xmlTextReaderStartElement(%s)\n", fullname);
; 671  : #endif
; 672  :     if ((reader != NULL) && (reader->startElement != NULL)) {

	cmp	DWORD PTR _reader$[ebp], 0
	je	$LN2@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+32], 0
	je	$LN2@xmlTextRea

; 673  : 	reader->startElement(ctx, fullname, atts);

	mov	esi, esp
	mov	ecx, DWORD PTR _atts$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fullname$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp

; 674  : 	if ((ctxt->node != NULL) && (ctxt->input != NULL) &&
; 675  : 	    (ctxt->input->cur != NULL) && (ctxt->input->cur[0] == '/') &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN2@xmlTextRea
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN2@xmlTextRea
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@xmlTextRea
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+16]
	movzx	eax, BYTE PTR [edx+ecx]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN2@xmlTextRea
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, 1
	shl	eax, 0
	mov	ecx, DWORD PTR [edx+16]
	movzx	edx, BYTE PTR [ecx+eax]
	cmp	edx, 62					; 0000003eH
	jne	SHORT $LN2@xmlTextRea

; 676  : 	    (ctxt->input->cur[1] == '>'))
; 677  : 	    ctxt->node->extra = NODE_IS_EMPTY;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, 1
	mov	WORD PTR [ecx+58], dx
$LN2@xmlTextRea:

; 678  :     }
; 679  :     if (reader != NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN1@xmlTextRea

; 680  : 	reader->state = XML_TEXTREADER_ELEMENT;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 1
$LN1@xmlTextRea:

; 681  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderStartElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderEntPop
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderEntPop PROC				; COMDAT

; 640  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 641  :     xmlNodePtr ret;
; 642  : 
; 643  :     if (reader->entNr <= 0)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jg	SHORT $LN2@xmlTextRea

; 644  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 645  :     reader->entNr--;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	sub	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+96], edx

; 646  :     if (reader->entNr > 0)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+96], 0
	jle	SHORT $LN3@xmlTextRea

; 647  :         reader->ent = reader->entTab[reader->entNr - 1];

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [edx+eax*4-4]
	mov	DWORD PTR [ecx+92], edx
	jmp	SHORT $LN4@xmlTextRea
$LN3@xmlTextRea:

; 648  :     else
; 649  :         reader->ent = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+92], 0
$LN4@xmlTextRea:

; 650  :     ret = reader->entTab[reader->entNr];

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+104]
	mov	edx, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _ret$[ebp], edx

; 651  :     reader->entTab[reader->entNr] = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+104]
	mov	DWORD PTR [eax+ecx*4], 0

; 652  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 653  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderEntPop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderEntPush
_TEXT	SEGMENT
tv138 = -4						; size = 4
_reader$ = 8						; size = 4
_value$ = 12						; size = 4
_xmlTextReaderEntPush PROC				; COMDAT

; 604  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 605  :     if (reader->entMax <= 0) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jg	SHORT $LN2@xmlTextRea

; 606  : 	reader->entMax = 10;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+100], 10			; 0000000aH

; 607  : 	reader->entTab = (xmlNodePtr *) xmlMalloc(reader->entMax *

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+100]
	shl	eax, 2
	mov	esi, esp
	push	eax
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+104], eax

; 608  : 		                                  sizeof(reader->entTab[0]));
; 609  :         if (reader->entTab == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+104], 0
	jne	SHORT $LN2@xmlTextRea

; 610  :             xmlGenericError(xmlGenericErrorContext, "xmlMalloc failed !\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BE@MPMNBMMA@xmlMalloc?5failed?5?$CB?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 611  :             return (0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 612  :         }
; 613  :     }
; 614  :     if (reader->entNr >= reader->entMax) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	cmp	ecx, DWORD PTR [eax+100]
	jl	SHORT $LN4@xmlTextRea

; 615  :         reader->entMax *= 2;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+100]
	shl	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+100], eax

; 616  :         reader->entTab =

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+100]
	shl	eax, 2
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+104], eax

; 617  :             (xmlNodePtr *) xmlRealloc(reader->entTab,
; 618  :                                       reader->entMax *
; 619  :                                       sizeof(reader->entTab[0]));
; 620  :         if (reader->entTab == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+104], 0
	jne	SHORT $LN4@xmlTextRea

; 621  :             xmlGenericError(xmlGenericErrorContext, "xmlRealloc failed !\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BF@DCPGEBNC@xmlRealloc?5failed?5?$CB?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 622  :             return (0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 623  :         }
; 624  :     }
; 625  :     reader->entTab[reader->entNr] = value;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx

; 626  :     reader->ent = value;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _value$[ebp]
	mov	DWORD PTR [edx+92], eax

; 627  :     return (reader->entNr++);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	DWORD PTR tv138[ebp], edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	add	ecx, 1
	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+96], ecx
	mov	eax, DWORD PTR tv138[ebp]
$LN1@xmlTextRea:

; 628  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderEntPush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderFreeDoc
_TEXT	SEGMENT
_intSubset$ = -8					; size = 4
_extSubset$ = -4					; size = 4
_reader$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlTextReaderFreeDoc PROC				; COMDAT

; 518  : xmlTextReaderFreeDoc(xmlTextReaderPtr reader, xmlDocPtr cur) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 519  :     xmlDtdPtr extSubset, intSubset;
; 520  : 
; 521  :     if (cur == NULL) return;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlTextRea
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 522  : 
; 523  :     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))

	cmp	DWORD PTR ___xmlRegisterCallbacks, 0
	je	SHORT $LN3@xmlTextRea
	call	___xmlDeregisterNodeDefaultValue
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlTextRea

; 524  : 	xmlDeregisterNodeDefaultValue((xmlNodePtr) cur);

	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	___xmlDeregisterNodeDefaultValue
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@xmlTextRea:

; 525  : 
; 526  :     /*
; 527  :      * Do this before freeing the children list to avoid ID lookups
; 528  :      */
; 529  :     if (cur->ids != NULL) xmlTextReaderFreeIDTable((xmlIDTablePtr) cur->ids);

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN4@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_xmlTextReaderFreeIDTable
	add	esp, 4
$LN4@xmlTextRea:

; 530  :     cur->ids = NULL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+64], 0

; 531  :     if (cur->refs != NULL) xmlFreeRefTable((xmlRefTablePtr) cur->refs);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN5@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	_xmlFreeRefTable
	add	esp, 4
$LN5@xmlTextRea:

; 532  :     cur->refs = NULL;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+68], 0

; 533  :     extSubset = cur->extSubset;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _extSubset$[ebp], edx

; 534  :     intSubset = cur->intSubset;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _intSubset$[ebp], ecx

; 535  :     if (intSubset == extSubset)

	mov	edx, DWORD PTR _intSubset$[ebp]
	cmp	edx, DWORD PTR _extSubset$[ebp]
	jne	SHORT $LN6@xmlTextRea

; 536  : 	extSubset = NULL;

	mov	DWORD PTR _extSubset$[ebp], 0
$LN6@xmlTextRea:

; 537  :     if (extSubset != NULL) {

	cmp	DWORD PTR _extSubset$[ebp], 0
	je	SHORT $LN7@xmlTextRea

; 538  : 	xmlUnlinkNode((xmlNodePtr) cur->extSubset);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlUnlinkNode
	add	esp, 4

; 539  : 	cur->extSubset = NULL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+48], 0

; 540  : 	xmlFreeDtd(extSubset);

	mov	eax, DWORD PTR _extSubset$[ebp]
	push	eax
	call	_xmlFreeDtd
	add	esp, 4
$LN7@xmlTextRea:

; 541  :     }
; 542  :     if (intSubset != NULL) {

	cmp	DWORD PTR _intSubset$[ebp], 0
	je	SHORT $LN8@xmlTextRea

; 543  : 	xmlUnlinkNode((xmlNodePtr) cur->intSubset);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	call	_xmlUnlinkNode
	add	esp, 4

; 544  : 	cur->intSubset = NULL;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+44], 0

; 545  : 	xmlFreeDtd(intSubset);

	mov	ecx, DWORD PTR _intSubset$[ebp]
	push	ecx
	call	_xmlFreeDtd
	add	esp, 4
$LN8@xmlTextRea:

; 546  :     }
; 547  : 
; 548  :     if (cur->children != NULL) xmlTextReaderFreeNodeList(reader, cur->children);

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN9@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderFreeNodeList
	add	esp, 8
$LN9@xmlTextRea:

; 549  : 
; 550  :     if (cur->version != NULL) xmlFree((char *) cur->version);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+56], 0
	je	SHORT $LN10@xmlTextRea
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@xmlTextRea:

; 551  :     if (cur->name != NULL) xmlFree((char *) cur->name);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN11@xmlTextRea
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@xmlTextRea:

; 552  :     if (cur->encoding != NULL) xmlFree((char *) cur->encoding);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+60], 0
	je	SHORT $LN12@xmlTextRea
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlTextRea:

; 553  :     if (cur->oldNs != NULL) xmlFreeNsList(cur->oldNs);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+52], 0
	je	SHORT $LN13@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	call	_xmlFreeNsList
	add	esp, 4
$LN13@xmlTextRea:

; 554  :     if (cur->URL != NULL) xmlFree((char *) cur->URL);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN14@xmlTextRea
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@xmlTextRea:

; 555  :     if (cur->dict != NULL) xmlDictFree(cur->dict);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+80], 0
	je	SHORT $LN15@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	push	edx
	call	_xmlDictFree
	add	esp, 4
$LN15@xmlTextRea:

; 556  : 
; 557  :     xmlFree(cur);

	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlTextRea:

; 558  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderFreeDoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderFreeIDTable
_TEXT	SEGMENT
_table$ = 8						; size = 4
_xmlTextReaderFreeIDTable PROC				; COMDAT

; 506  : xmlTextReaderFreeIDTable(xmlIDTablePtr table) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 507  :     xmlHashFree(table, xmlTextReaderFreeIDTableEntry);

	push	OFFSET _xmlTextReaderFreeIDTableEntry
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashFree
	add	esp, 8

; 508  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderFreeIDTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderFreeIDTableEntry
_TEXT	SEGMENT
_id$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlTextReaderFreeIDTableEntry PROC			; COMDAT

; 495  : xmlTextReaderFreeIDTableEntry(void *id, const xmlChar *name ATTRIBUTE_UNUSED) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 496  :     xmlFreeID((xmlIDPtr) id);

	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	call	_xmlFreeID
	add	esp, 4

; 497  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderFreeIDTableEntry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderFreePropList
_TEXT	SEGMENT
_next$ = -4						; size = 4
_reader$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlTextReaderFreePropList PROC				; COMDAT

; 327  : xmlTextReaderFreePropList(xmlTextReaderPtr reader, xmlAttrPtr cur) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@xmlTextRea:

; 328  :     xmlAttrPtr next;
; 329  : 
; 330  :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN1@xmlTextRea

; 331  :         next = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _next$[ebp], ecx

; 332  :         xmlTextReaderFreeProp(reader, cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderFreeProp
	add	esp, 8

; 333  : 	cur = next;

	mov	ecx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx

; 334  :     }

	jmp	SHORT $LN2@xmlTextRea
$LN1@xmlTextRea:

; 335  : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderFreePropList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderFreeProp
_TEXT	SEGMENT
_dict$ = -4						; size = 4
_reader$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlTextReaderFreeProp PROC				; COMDAT

; 286  : xmlTextReaderFreeProp(xmlTextReaderPtr reader, xmlAttrPtr cur) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 287  :     xmlDictPtr dict;
; 288  : 
; 289  :     if ((reader != NULL) && (reader->ctxt != NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN2@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@xmlTextRea

; 290  : 	dict = reader->ctxt->dict;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+296]
	mov	DWORD PTR _dict$[ebp], eax
	jmp	SHORT $LN3@xmlTextRea
$LN2@xmlTextRea:

; 291  :     else
; 292  :         dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0
$LN3@xmlTextRea:

; 293  :     if (cur == NULL) return;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN4@xmlTextRea
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 294  : 
; 295  :     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))

	cmp	DWORD PTR ___xmlRegisterCallbacks, 0
	je	SHORT $LN5@xmlTextRea
	call	___xmlDeregisterNodeDefaultValue
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@xmlTextRea

; 296  : 	xmlDeregisterNodeDefaultValue((xmlNodePtr) cur);

	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	___xmlDeregisterNodeDefaultValue
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlTextRea:

; 297  : 
; 298  :     /* Check for ID removal -> leading to invalid references ! */
; 299  :     if ((cur->parent != NULL) && (cur->parent->doc != NULL) &&

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN6@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+32], 0
	je	SHORT $LN6@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+32]
	cmp	DWORD PTR [edx+44], 0
	jne	SHORT $LN7@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+32]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 300  : 	((cur->parent->doc->intSubset != NULL) ||
; 301  : 	 (cur->parent->doc->extSubset != NULL))) {
; 302  :         if (xmlIsID(cur->parent->doc, cur->parent, cur))

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlIsID
	add	esp, 12					; 0000000cH
	test	eax, eax
	je	SHORT $LN6@xmlTextRea

; 303  : 	    xmlTextReaderRemoveID(cur->parent->doc, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlTextReaderRemoveID
	add	esp, 8
$LN6@xmlTextRea:

; 304  :     }
; 305  :     if (cur->children != NULL)

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN9@xmlTextRea

; 306  :         xmlTextReaderFreeNodeList(reader, cur->children);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderFreeNodeList
	add	esp, 8
$LN9@xmlTextRea:

; 307  : 
; 308  :     DICT_FREE(cur->name);

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN10@xmlTextRea
	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN11@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@xmlTextRea
$LN11@xmlTextRea:
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@xmlTextRea:

; 309  :     if ((reader != NULL) && (reader->ctxt != NULL) &&

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN12@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN12@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+376], 100		; 00000064H
	jge	SHORT $LN12@xmlTextRea

; 310  :         (reader->ctxt->freeAttrsNr < 100)) {
; 311  :         cur->next = reader->ctxt->freeAttrs;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [eax+380]
	mov	DWORD PTR [ecx+24], edx

; 312  : 	reader->ctxt->freeAttrs = cur;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+380], edx

; 313  : 	reader->ctxt->freeAttrsNr++;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+376]
	add	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+376], edx

; 314  :     } else {

	jmp	SHORT $LN1@xmlTextRea
$LN12@xmlTextRea:

; 315  : 	xmlFree(cur);

	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlTextRea:

; 316  :     }
; 317  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderFreeProp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderRemoveID
_TEXT	SEGMENT
_ID$ = -12						; size = 4
_id$ = -8						; size = 4
_table$ = -4						; size = 4
_doc$ = 8						; size = 4
_attr$ = 12						; size = 4
_xmlTextReaderRemoveID PROC				; COMDAT

; 254  : xmlTextReaderRemoveID(xmlDocPtr doc, xmlAttrPtr attr) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 255  :     xmlIDTablePtr table;
; 256  :     xmlIDPtr id;
; 257  :     xmlChar *ID;
; 258  : 
; 259  :     if (doc == NULL) return(-1);

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlTextRea
	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 260  :     if (attr == NULL) return(-1);

	cmp	DWORD PTR _attr$[ebp], 0
	jne	SHORT $LN3@xmlTextRea
	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN3@xmlTextRea:

; 261  :     table = (xmlIDTablePtr) doc->ids;

	mov	eax, DWORD PTR _doc$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _table$[ebp], ecx

; 262  :     if (table == NULL)

	cmp	DWORD PTR _table$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 263  :         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 264  : 
; 265  :     ID = xmlNodeListGetString(doc, attr->children, 1);

	push	1
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ID$[ebp], eax

; 266  :     if (ID == NULL)

	cmp	DWORD PTR _ID$[ebp], 0
	jne	SHORT $LN5@xmlTextRea

; 267  : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 268  :     id = xmlHashLookup(table, ID);

	mov	edx, DWORD PTR _ID$[ebp]
	push	edx
	mov	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_xmlHashLookup
	add	esp, 8
	mov	DWORD PTR _id$[ebp], eax

; 269  :     xmlFree(ID);

	mov	esi, esp
	mov	ecx, DWORD PTR _ID$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 270  :     if (id == NULL || id->attr != attr) {

	cmp	DWORD PTR _id$[ebp], 0
	je	SHORT $LN7@xmlTextRea
	mov	edx, DWORD PTR _id$[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _attr$[ebp]
	je	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 271  : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 272  :     }
; 273  :     id->name = attr->name;

	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR _attr$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+12], eax

; 274  :     id->attr = NULL;

	mov	ecx, DWORD PTR _id$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 275  :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 276  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderRemoveID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlFreeID
_TEXT	SEGMENT
_dict$ = -4						; size = 4
_id$ = 8						; size = 4
_xmlFreeID PROC						; COMDAT

; 231  : xmlFreeID(xmlIDPtr id) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 232  :     xmlDictPtr dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0

; 233  : 
; 234  :     if (id == NULL) return;

	cmp	DWORD PTR _id$[ebp], 0
	jne	SHORT $LN2@xmlFreeID
	jmp	SHORT $LN1@xmlFreeID
$LN2@xmlFreeID:

; 235  : 
; 236  :     if (id->doc != NULL)

	mov	eax, DWORD PTR _id$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@xmlFreeID

; 237  :         dict = id->doc->dict;

	mov	ecx, DWORD PTR _id$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+80]
	mov	DWORD PTR _dict$[ebp], eax
$LN3@xmlFreeID:

; 238  : 
; 239  :     if (id->value != NULL)

	mov	ecx, DWORD PTR _id$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN4@xmlFreeID

; 240  : 	DICT_FREE(id->value)

	mov	edx, DWORD PTR _id$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN4@xmlFreeID
	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN6@xmlFreeID
	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN4@xmlFreeID
$LN6@xmlFreeID:
	mov	esi, esp
	mov	eax, DWORD PTR _id$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlFreeID:

; 241  :     xmlFree(id);

	mov	esi, esp
	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlFreeID:

; 242  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlFreeID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderFreeNodeList
_TEXT	SEGMENT
_dict$ = -8						; size = 4
_next$ = -4						; size = 4
_reader$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlTextReaderFreeNodeList PROC				; COMDAT

; 346  : xmlTextReaderFreeNodeList(xmlTextReaderPtr reader, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 347  :     xmlNodePtr next;
; 348  :     xmlDictPtr dict;
; 349  : 
; 350  :     if ((reader != NULL) && (reader->ctxt != NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN4@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@xmlTextRea

; 351  : 	dict = reader->ctxt->dict;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+296]
	mov	DWORD PTR _dict$[ebp], eax
	jmp	SHORT $LN5@xmlTextRea
$LN4@xmlTextRea:

; 352  :     else
; 353  :         dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0
$LN5@xmlTextRea:

; 354  :     if (cur == NULL) return;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN6@xmlTextRea
	jmp	$LN1@xmlTextRea
$LN6@xmlTextRea:

; 355  :     if (cur->type == XML_NAMESPACE_DECL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 18			; 00000012H
	jne	SHORT $LN7@xmlTextRea

; 356  : 	xmlFreeNsList((xmlNsPtr) cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlFreeNsList
	add	esp, 4

; 357  : 	return;

	jmp	$LN1@xmlTextRea
$LN7@xmlTextRea:

; 358  :     }
; 359  :     if ((cur->type == XML_DOCUMENT_NODE) ||

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 9
	je	SHORT $LN9@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 13			; 0000000dH
	jne	SHORT $LN2@xmlTextRea
$LN9@xmlTextRea:

; 360  : 	(cur->type == XML_HTML_DOCUMENT_NODE)) {
; 361  : 	xmlFreeDoc((xmlDocPtr) cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlFreeDoc
	add	esp, 4

; 362  : 	return;

	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 363  :     }
; 364  :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN1@xmlTextRea

; 365  :         next = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _next$[ebp], ecx

; 366  : 	/* unroll to speed up freeing the document */
; 367  : 	if (cur->type != XML_DTD_NODE) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 14			; 0000000eH
	je	$LN10@xmlTextRea

; 368  : 
; 369  : 	    if ((cur->children != NULL) &&

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN11@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 5
	je	SHORT $LN11@xmlTextRea

; 370  : 		(cur->type != XML_ENTITY_REF_NODE)) {
; 371  : 		if (cur->children->parent == cur)

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [eax+20]
	cmp	ecx, DWORD PTR _cur$[ebp]
	jne	SHORT $LN12@xmlTextRea

; 372  : 		    xmlTextReaderFreeNodeList(reader, cur->children);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderFreeNodeList
	add	esp, 8
$LN12@xmlTextRea:

; 373  : 		cur->children = NULL;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN11@xmlTextRea:

; 374  : 	    }
; 375  : 
; 376  : 	    if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))

	cmp	DWORD PTR ___xmlRegisterCallbacks, 0
	je	SHORT $LN13@xmlTextRea
	call	___xmlDeregisterNodeDefaultValue
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN13@xmlTextRea

; 377  : 		xmlDeregisterNodeDefaultValue(cur);

	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	___xmlDeregisterNodeDefaultValue
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN13@xmlTextRea:

; 378  : 
; 379  : 	    if (((cur->type == XML_ELEMENT_NODE) ||
; 380  : 		 (cur->type == XML_XINCLUDE_START) ||
; 381  : 		 (cur->type == XML_XINCLUDE_END)) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN15@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 19			; 00000013H
	je	SHORT $LN15@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 20			; 00000014H
	jne	SHORT $LN14@xmlTextRea
$LN15@xmlTextRea:
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN14@xmlTextRea

; 382  : 		(cur->properties != NULL))
; 383  : 		xmlTextReaderFreePropList(reader, cur->properties);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderFreePropList
	add	esp, 8
$LN14@xmlTextRea:

; 384  : 	    if ((cur->content != (xmlChar *) &(cur->properties)) &&
; 385  : 	        (cur->type != XML_ELEMENT_NODE) &&
; 386  : 		(cur->type != XML_XINCLUDE_START) &&
; 387  : 		(cur->type != XML_XINCLUDE_END) &&

	mov	eax, DWORD PTR _cur$[ebp]
	add	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+40], eax
	je	SHORT $LN16@xmlTextRea
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN16@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 19			; 00000013H
	je	SHORT $LN16@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 20			; 00000014H
	je	SHORT $LN16@xmlTextRea
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 5
	je	SHORT $LN16@xmlTextRea

; 388  : 		(cur->type != XML_ENTITY_REF_NODE)) {
; 389  : 		DICT_FREE(cur->content);

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN16@xmlTextRea
	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN18@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _dict$[ebp]
	push	eax
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@xmlTextRea
$LN18@xmlTextRea:
	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN16@xmlTextRea:

; 390  : 	    }
; 391  : 	    if (((cur->type == XML_ELEMENT_NODE) ||
; 392  : 	         (cur->type == XML_XINCLUDE_START) ||
; 393  : 		 (cur->type == XML_XINCLUDE_END)) &&

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN20@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 19			; 00000013H
	je	SHORT $LN20@xmlTextRea
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 20			; 00000014H
	jne	SHORT $LN19@xmlTextRea
$LN20@xmlTextRea:
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN19@xmlTextRea

; 394  : 		(cur->nsDef != NULL))
; 395  : 		xmlFreeNsList(cur->nsDef);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	push	edx
	call	_xmlFreeNsList
	add	esp, 4
$LN19@xmlTextRea:

; 396  : 
; 397  : 	    /*
; 398  : 	     * we don't free element names here they are interned now
; 399  : 	     */
; 400  : 	    if ((cur->type != XML_TEXT_NODE) &&

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 3
	je	SHORT $LN21@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 8
	je	SHORT $LN21@xmlTextRea

; 401  : 		(cur->type != XML_COMMENT_NODE))
; 402  : 		DICT_FREE(cur->name);

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN21@xmlTextRea
	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN23@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN21@xmlTextRea
$LN23@xmlTextRea:
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@xmlTextRea:

; 403  : 	    if (((cur->type == XML_ELEMENT_NODE) ||
; 404  : 		 (cur->type == XML_TEXT_NODE)) &&
; 405  : 	        (reader != NULL) && (reader->ctxt != NULL) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN26@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 3
	jne	SHORT $LN24@xmlTextRea
$LN26@xmlTextRea:
	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN24@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN24@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+368], 100		; 00000064H
	jge	SHORT $LN24@xmlTextRea

; 406  : 		(reader->ctxt->freeElemsNr < 100)) {
; 407  : 	        cur->next = reader->ctxt->freeElems;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [edx+372]
	mov	DWORD PTR [eax+24], ecx

; 408  : 		reader->ctxt->freeElems = cur;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [eax+372], ecx

; 409  : 		reader->ctxt->freeElemsNr++;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+368]
	add	ecx, 1
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+368], ecx

; 410  : 	    } else {

	jmp	SHORT $LN10@xmlTextRea
$LN24@xmlTextRea:

; 411  : 		xmlFree(cur);

	mov	esi, esp
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN10@xmlTextRea:

; 412  : 	    }
; 413  : 	}
; 414  : 	cur = next;

	mov	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _cur$[ebp], edx

; 415  :     }

	jmp	$LN2@xmlTextRea
$LN1@xmlTextRea:

; 416  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderFreeNodeList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderFreeNode
_TEXT	SEGMENT
_dict$ = -4						; size = 4
_reader$ = 8						; size = 4
_cur$ = 12						; size = 4
_xmlTextReaderFreeNode PROC				; COMDAT

; 427  : xmlTextReaderFreeNode(xmlTextReaderPtr reader, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 428  :     xmlDictPtr dict;
; 429  : 
; 430  :     if ((reader != NULL) && (reader->ctxt != NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN2@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN2@xmlTextRea

; 431  : 	dict = reader->ctxt->dict;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+296]
	mov	DWORD PTR _dict$[ebp], eax
	jmp	SHORT $LN3@xmlTextRea
$LN2@xmlTextRea:

; 432  :     else
; 433  :         dict = NULL;

	mov	DWORD PTR _dict$[ebp], 0
$LN3@xmlTextRea:

; 434  :     if (cur->type == XML_DTD_NODE) {

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 14			; 0000000eH
	jne	SHORT $LN4@xmlTextRea

; 435  : 	xmlFreeDtd((xmlDtdPtr) cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlFreeDtd
	add	esp, 4

; 436  : 	return;

	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 437  :     }
; 438  :     if (cur->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN5@xmlTextRea

; 439  : 	xmlFreeNs((xmlNsPtr) cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_xmlFreeNs
	add	esp, 4

; 440  :         return;

	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 441  :     }
; 442  :     if (cur->type == XML_ATTRIBUTE_NODE) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN6@xmlTextRea

; 443  : 	xmlTextReaderFreeProp(reader, (xmlAttrPtr) cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderFreeProp
	add	esp, 8

; 444  : 	return;

	jmp	$LN1@xmlTextRea
$LN6@xmlTextRea:

; 445  :     }
; 446  : 
; 447  :     if ((cur->children != NULL) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN7@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 5
	je	SHORT $LN7@xmlTextRea

; 448  : 	(cur->type != XML_ENTITY_REF_NODE)) {
; 449  : 	if (cur->children->parent == cur)

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _cur$[ebp]
	jne	SHORT $LN8@xmlTextRea

; 450  : 	    xmlTextReaderFreeNodeList(reader, cur->children);

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderFreeNodeList
	add	esp, 8
$LN8@xmlTextRea:

; 451  : 	cur->children = NULL;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN7@xmlTextRea:

; 452  :     }
; 453  : 
; 454  :     if ((__xmlRegisterCallbacks) && (xmlDeregisterNodeDefaultValue))

	cmp	DWORD PTR ___xmlRegisterCallbacks, 0
	je	SHORT $LN9@xmlTextRea
	call	___xmlDeregisterNodeDefaultValue
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN9@xmlTextRea

; 455  : 	xmlDeregisterNodeDefaultValue(cur);

	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	___xmlDeregisterNodeDefaultValue
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN9@xmlTextRea:

; 456  : 
; 457  :     if (((cur->type == XML_ELEMENT_NODE) ||
; 458  : 	 (cur->type == XML_XINCLUDE_START) ||
; 459  : 	 (cur->type == XML_XINCLUDE_END)) &&

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	je	SHORT $LN11@xmlTextRea
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 19			; 00000013H
	je	SHORT $LN11@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 20			; 00000014H
	jne	SHORT $LN10@xmlTextRea
$LN11@xmlTextRea:
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN10@xmlTextRea

; 460  : 	(cur->properties != NULL))
; 461  : 	xmlTextReaderFreePropList(reader, cur->properties);

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderFreePropList
	add	esp, 8
$LN10@xmlTextRea:

; 462  :     if ((cur->content != (xmlChar *) &(cur->properties)) &&
; 463  :         (cur->type != XML_ELEMENT_NODE) &&
; 464  : 	(cur->type != XML_XINCLUDE_START) &&
; 465  : 	(cur->type != XML_XINCLUDE_END) &&

	mov	edx, DWORD PTR _cur$[ebp]
	add	edx, 44					; 0000002cH
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+40], edx
	je	SHORT $LN12@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	je	SHORT $LN12@xmlTextRea
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 19			; 00000013H
	je	SHORT $LN12@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 20			; 00000014H
	je	SHORT $LN12@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 5
	je	SHORT $LN12@xmlTextRea

; 466  : 	(cur->type != XML_ENTITY_REF_NODE)) {
; 467  : 	DICT_FREE(cur->content);

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN12@xmlTextRea
	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN14@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	edx, DWORD PTR _dict$[ebp]
	push	edx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@xmlTextRea
$LN14@xmlTextRea:
	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlTextRea:

; 468  :     }
; 469  :     if (((cur->type == XML_ELEMENT_NODE) ||
; 470  : 	 (cur->type == XML_XINCLUDE_START) ||
; 471  : 	 (cur->type == XML_XINCLUDE_END)) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN16@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 19			; 00000013H
	je	SHORT $LN16@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 20			; 00000014H
	jne	SHORT $LN15@xmlTextRea
$LN16@xmlTextRea:
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN15@xmlTextRea

; 472  : 	(cur->nsDef != NULL))
; 473  : 	xmlFreeNsList(cur->nsDef);

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	push	ecx
	call	_xmlFreeNsList
	add	esp, 4
$LN15@xmlTextRea:

; 474  : 
; 475  :     /*
; 476  :      * we don't free names here they are interned now
; 477  :      */
; 478  :     if ((cur->type != XML_TEXT_NODE) &&

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 3
	je	SHORT $LN17@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 8
	je	SHORT $LN17@xmlTextRea

; 479  :         (cur->type != XML_COMMENT_NODE))
; 480  : 	DICT_FREE(cur->name);

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN17@xmlTextRea
	cmp	DWORD PTR _dict$[ebp], 0
	je	SHORT $LN19@xmlTextRea
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _dict$[ebp]
	push	ecx
	call	_xmlDictOwns
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@xmlTextRea
$LN19@xmlTextRea:
	mov	esi, esp
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN17@xmlTextRea:

; 481  : 
; 482  :     if (((cur->type == XML_ELEMENT_NODE) ||
; 483  : 	 (cur->type == XML_TEXT_NODE)) &&
; 484  : 	(reader != NULL) && (reader->ctxt != NULL) &&

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	je	SHORT $LN22@xmlTextRea
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 3
	jne	SHORT $LN20@xmlTextRea
$LN22@xmlTextRea:
	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN20@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN20@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+368], 100		; 00000064H
	jge	SHORT $LN20@xmlTextRea

; 485  : 	(reader->ctxt->freeElemsNr < 100)) {
; 486  : 	cur->next = reader->ctxt->freeElems;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [ecx+372]
	mov	DWORD PTR [edx+24], eax

; 487  : 	reader->ctxt->freeElems = cur;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+372], eax

; 488  : 	reader->ctxt->freeElemsNr++;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+368]
	add	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+368], eax

; 489  :     } else {

	jmp	SHORT $LN1@xmlTextRea
$LN20@xmlTextRea:

; 490  : 	xmlFree(cur);

	mov	esi, esp
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlTextRea:

; 491  :     }
; 492  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderFreeNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderNextTree
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderNextTree PROC				; COMDAT

; 1892 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1893 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 1894 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 1895 : 
; 1896 :     if (reader->state == XML_TEXTREADER_END)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+16], 2
	jne	SHORT $LN3@xmlTextRea

; 1897 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN3@xmlTextRea:

; 1898 : 
; 1899 :     if (reader->node == NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN4@xmlTextRea

; 1900 :         if (reader->doc->children == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN5@xmlTextRea

; 1901 :             reader->state = XML_TEXTREADER_END;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 2

; 1902 :             return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 1903 :         }
; 1904 : 
; 1905 :         reader->node = reader->doc->children;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+64], edx

; 1906 :         reader->state = XML_TEXTREADER_START;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1907 :         return(1);

	mov	eax, 1
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 1908 :     }
; 1909 : 
; 1910 :     if (reader->state != XML_TEXTREADER_BACKTRACK) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+16], 4
	je	SHORT $LN6@xmlTextRea

; 1911 : 	/* Here removed traversal to child, because we want to skip the subtree,
; 1912 : 	replace with traversal to sibling to skip subtree */
; 1913 :         if (reader->node->next != 0) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN7@xmlTextRea

; 1914 : 	    /* Move to sibling if present,skipping sub-tree */
; 1915 :             reader->node = reader->node->next;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+64], ecx

; 1916 :             reader->state = XML_TEXTREADER_START;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1917 :             return(1);

	mov	eax, 1
	jmp	$LN1@xmlTextRea
$LN7@xmlTextRea:

; 1918 :         }
; 1919 : 
; 1920 : 	/* if reader->node->next is NULL mean no subtree for current node,
; 1921 : 	so need to move to sibling of parent node if present */
; 1922 : 	reader->state = XML_TEXTREADER_BACKTRACK;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 4

; 1923 : 	/* This will move to parent if present */
; 1924 : 	xmlTextReaderRead(reader);

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderRead
	add	esp, 4
$LN6@xmlTextRea:

; 1925 :     }
; 1926 : 
; 1927 :     if (reader->node->next != 0) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN8@xmlTextRea

; 1928 :         reader->node = reader->node->next;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+64], ecx

; 1929 :         reader->state = XML_TEXTREADER_START;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1930 :         return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 1931 :     }
; 1932 : 
; 1933 :     if (reader->node->parent != 0) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN9@xmlTextRea

; 1934 :         if (reader->node->parent->type == XML_DOCUMENT_NODE) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+4], 9
	jne	SHORT $LN10@xmlTextRea

; 1935 :             reader->state = XML_TEXTREADER_END;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 2

; 1936 :             return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN10@xmlTextRea:

; 1937 :         }
; 1938 : 
; 1939 :         reader->node = reader->node->parent;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+64], eax

; 1940 :         reader->depth--;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	sub	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+72], edx

; 1941 :         reader->state = XML_TEXTREADER_BACKTRACK;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 4

; 1942 : 	/* Repeat process to move to sibling of parent node if present */
; 1943 :         xmlTextReaderNextTree(reader);

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderNextTree
	add	esp, 4
$LN9@xmlTextRea:

; 1944 :     }
; 1945 : 
; 1946 :     reader->state = XML_TEXTREADER_END;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 2

; 1947 : 
; 1948 :     return(1);

	mov	eax, 1
$LN1@xmlTextRea:

; 1949 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderNextTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderReadTree
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderReadTree PROC				; COMDAT

; 1962 : xmlTextReaderReadTree(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1963 :     if (reader->state == XML_TEXTREADER_END)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+16], 2
	jne	SHORT $next_node$15

; 1964 :         return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$next_node$15:

; 1965 : 
; 1966 : next_node:
; 1967 :     if (reader->node == NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN3@xmlTextRea

; 1968 :         if (reader->doc->children == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN4@xmlTextRea

; 1969 :             reader->state = XML_TEXTREADER_END;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 2

; 1970 :             return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 1971 :         }
; 1972 : 
; 1973 :         reader->node = reader->doc->children;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+64], edx

; 1974 :         reader->state = XML_TEXTREADER_START;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1975 :         goto found_node;

	jmp	$found_node$16
$LN3@xmlTextRea:

; 1976 :     }
; 1977 : 
; 1978 :     if ((reader->state != XML_TEXTREADER_BACKTRACK) &&
; 1979 :         (reader->node->type != XML_DTD_NODE) &&
; 1980 :         (reader->node->type != XML_XINCLUDE_START) &&

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+16], 4
	je	SHORT $LN5@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 14			; 0000000eH
	je	SHORT $LN5@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 19			; 00000013H
	je	SHORT $LN5@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 5
	je	SHORT $LN5@xmlTextRea

; 1981 : 	(reader->node->type != XML_ENTITY_REF_NODE)) {
; 1982 :         if (reader->node->children != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN6@xmlTextRea

; 1983 :             reader->node = reader->node->children;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+64], ecx

; 1984 :             reader->depth++;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+72]
	add	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 1985 :             reader->state = XML_TEXTREADER_START;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 0

; 1986 :             goto found_node;

	jmp	$found_node$16
$LN6@xmlTextRea:

; 1987 :         }
; 1988 : 
; 1989 :         if (reader->node->type == XML_ATTRIBUTE_NODE) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN5@xmlTextRea

; 1990 :             reader->state = XML_TEXTREADER_BACKTRACK;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 4

; 1991 :             goto found_node;

	jmp	$found_node$16
$LN5@xmlTextRea:

; 1992 :         }
; 1993 :     }
; 1994 : 
; 1995 :     if (reader->node->next != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN8@xmlTextRea

; 1996 :         reader->node = reader->node->next;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+64], edx

; 1997 :         reader->state = XML_TEXTREADER_START;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 0

; 1998 :         goto found_node;

	jmp	SHORT $found_node$16
$LN8@xmlTextRea:

; 1999 :     }
; 2000 : 
; 2001 :     if (reader->node->parent != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN9@xmlTextRea

; 2002 :         if ((reader->node->parent->type == XML_DOCUMENT_NODE) ||

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+4], 9
	je	SHORT $LN11@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+4], 13			; 0000000dH
	jne	SHORT $LN10@xmlTextRea
$LN11@xmlTextRea:

; 2003 : 	    (reader->node->parent->type == XML_HTML_DOCUMENT_NODE)) {
; 2004 :             reader->state = XML_TEXTREADER_END;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 2

; 2005 :             return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN10@xmlTextRea:

; 2006 :         }
; 2007 : 
; 2008 :         reader->node = reader->node->parent;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+64], ecx

; 2009 :         reader->depth--;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+72]
	sub	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 2010 :         reader->state = XML_TEXTREADER_BACKTRACK;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 4

; 2011 :         goto found_node;

	jmp	SHORT $found_node$16
$LN9@xmlTextRea:

; 2012 :     }
; 2013 : 
; 2014 :     reader->state = XML_TEXTREADER_END;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 2
$found_node$16:

; 2015 : 
; 2016 : found_node:
; 2017 :     if ((reader->node->type == XML_XINCLUDE_START) ||

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 19			; 00000013H
	je	SHORT $LN13@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 20			; 00000014H
	jne	SHORT $LN12@xmlTextRea
$LN13@xmlTextRea:

; 2018 :         (reader->node->type == XML_XINCLUDE_END))
; 2019 : 	goto next_node;

	jmp	$next_node$15
$LN12@xmlTextRea:

; 2020 : 
; 2021 :     return(1);

	mov	eax, 1
$LN1@xmlTextRea:

; 2022 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderReadTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGetErrorHandler
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_f$ = 12						; size = 4
_arg$ = 16						; size = 4
_xmlTextReaderGetErrorHandler PROC			; COMDAT

; 5096 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5097 :     if (f != NULL)

	cmp	DWORD PTR _f$[ebp], 0
	je	SHORT $LN2@xmlTextRea

; 5098 :         *f = reader->errorFunc;

	mov	eax, DWORD PTR _f$[ebp]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR [eax], edx
$LN2@xmlTextRea:

; 5099 :     if (arg != NULL)

	cmp	DWORD PTR _arg$[ebp], 0
	je	SHORT $LN1@xmlTextRea

; 5100 :         *arg = reader->errorFuncArg;

	mov	eax, DWORD PTR _arg$[ebp]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR [eax], edx
$LN1@xmlTextRea:

; 5101 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderGetErrorHandler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderSetStructuredErrorHandler
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_f$ = 12						; size = 4
_arg$ = 16						; size = 4
_xmlTextReaderSetStructuredErrorHandler PROC		; COMDAT

; 5008 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5009 :     if (f != NULL) {

	cmp	DWORD PTR _f$[ebp], 0
	je	$LN2@xmlTextRea

; 5010 :         reader->ctxt->sax->error = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+88], 0

; 5011 :         reader->ctxt->sax->serror = xmlTextReaderStructuredError;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+124], OFFSET _xmlTextReaderStructuredError

; 5012 :         reader->ctxt->vctxt.error = xmlTextReaderValidityError;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+112], OFFSET _xmlTextReaderValidityError

; 5013 :         reader->ctxt->sax->warning = xmlTextReaderWarning;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+84], OFFSET _xmlTextReaderWarning

; 5014 :         reader->ctxt->vctxt.warning = xmlTextReaderValidityWarning;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+116], OFFSET _xmlTextReaderValidityWarning

; 5015 :         reader->sErrorFunc = f;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+192], edx

; 5016 :         reader->errorFunc = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+108], 0

; 5017 :         reader->errorFuncArg = arg;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _arg$[ebp]
	mov	DWORD PTR [ecx+112], edx

; 5018 : #ifdef LIBXML_SCHEMAS_ENABLED
; 5019 :         if (reader->rngValidCtxt) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN4@xmlTextRea

; 5020 :             xmlRelaxNGSetValidErrors(reader->rngValidCtxt, NULL, NULL,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidErrors
	add	esp, 16					; 00000010H

; 5021 :                                      reader);
; 5022 :             xmlRelaxNGSetValidStructuredErrors(reader->rngValidCtxt,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	OFFSET _xmlTextReaderValidityStructuredRelay
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN4@xmlTextRea:

; 5023 :                                         xmlTextReaderValidityStructuredRelay,
; 5024 :                                                reader);
; 5025 :         }
; 5026 :         if (reader->xsdValidCtxt) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN5@xmlTextRea

; 5027 :             xmlSchemaSetValidErrors(reader->xsdValidCtxt, NULL, NULL,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaSetValidErrors
	add	esp, 16					; 00000010H

; 5028 :                                     reader);
; 5029 :             xmlSchemaSetValidStructuredErrors(reader->xsdValidCtxt,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	OFFSET _xmlTextReaderValidityStructuredRelay
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN5@xmlTextRea:

; 5030 :                                        xmlTextReaderValidityStructuredRelay,
; 5031 :                                               reader);
; 5032 :         }
; 5033 : #endif
; 5034 :     } else {

	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 5035 :         /* restore defaults */
; 5036 :         reader->ctxt->sax->error = xmlParserError;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+88], OFFSET _xmlParserError

; 5037 :         reader->ctxt->sax->serror = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+124], 0

; 5038 :         reader->ctxt->vctxt.error = xmlParserValidityError;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+112], OFFSET _xmlParserValidityError

; 5039 :         reader->ctxt->sax->warning = xmlParserWarning;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+84], OFFSET _xmlParserWarning

; 5040 :         reader->ctxt->vctxt.warning = xmlParserValidityWarning;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+116], OFFSET _xmlParserValidityWarning

; 5041 :         reader->errorFunc = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+108], 0

; 5042 :         reader->sErrorFunc = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+192], 0

; 5043 :         reader->errorFuncArg = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+112], 0

; 5044 : #ifdef LIBXML_SCHEMAS_ENABLED
; 5045 :         if (reader->rngValidCtxt) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN6@xmlTextRea

; 5046 :             xmlRelaxNGSetValidErrors(reader->rngValidCtxt, NULL, NULL,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidErrors
	add	esp, 16					; 00000010H

; 5047 :                                      reader);
; 5048 :             xmlRelaxNGSetValidStructuredErrors(reader->rngValidCtxt, NULL,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN6@xmlTextRea:

; 5049 :                                                reader);
; 5050 :         }
; 5051 :         if (reader->xsdValidCtxt) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN1@xmlTextRea

; 5052 :             xmlSchemaSetValidErrors(reader->xsdValidCtxt, NULL, NULL,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaSetValidErrors
	add	esp, 16					; 00000010H

; 5053 :                                     reader);
; 5054 :             xmlSchemaSetValidStructuredErrors(reader->xsdValidCtxt, NULL,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN1@xmlTextRea:

; 5055 :                                               reader);
; 5056 :         }
; 5057 : #endif
; 5058 :     }
; 5059 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderSetStructuredErrorHandler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderSetErrorHandler
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_f$ = 12						; size = 4
_arg$ = 16						; size = 4
_xmlTextReaderSetErrorHandler PROC			; COMDAT

; 4941 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4942 :     if (f != NULL) {

	cmp	DWORD PTR _f$[ebp], 0
	je	$LN2@xmlTextRea

; 4943 :         reader->ctxt->sax->error = xmlTextReaderError;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+88], OFFSET _xmlTextReaderError

; 4944 :         reader->ctxt->sax->serror = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+124], 0

; 4945 :         reader->ctxt->vctxt.error = xmlTextReaderValidityError;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+112], OFFSET _xmlTextReaderValidityError

; 4946 :         reader->ctxt->sax->warning = xmlTextReaderWarning;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+84], OFFSET _xmlTextReaderWarning

; 4947 :         reader->ctxt->vctxt.warning = xmlTextReaderValidityWarning;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+116], OFFSET _xmlTextReaderValidityWarning

; 4948 :         reader->errorFunc = f;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _f$[ebp]
	mov	DWORD PTR [ecx+108], edx

; 4949 :         reader->sErrorFunc = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+192], 0

; 4950 :         reader->errorFuncArg = arg;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _arg$[ebp]
	mov	DWORD PTR [ecx+112], edx

; 4951 : #ifdef LIBXML_SCHEMAS_ENABLED
; 4952 :         if (reader->rngValidCtxt) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN4@xmlTextRea

; 4953 :             xmlRelaxNGSetValidErrors(reader->rngValidCtxt,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	OFFSET _xmlTextReaderValidityWarningRelay
	push	OFFSET _xmlTextReaderValidityErrorRelay
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidErrors
	add	esp, 16					; 00000010H

; 4954 :                                      xmlTextReaderValidityErrorRelay,
; 4955 :                                      xmlTextReaderValidityWarningRelay,
; 4956 :                                      reader);
; 4957 :             xmlRelaxNGSetValidStructuredErrors(reader->rngValidCtxt, NULL,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN4@xmlTextRea:

; 4958 :                                                reader);
; 4959 :         }
; 4960 :         if (reader->xsdValidCtxt) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN5@xmlTextRea

; 4961 :             xmlSchemaSetValidErrors(reader->xsdValidCtxt,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	OFFSET _xmlTextReaderValidityWarningRelay
	push	OFFSET _xmlTextReaderValidityErrorRelay
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaSetValidErrors
	add	esp, 16					; 00000010H

; 4962 :                                     xmlTextReaderValidityErrorRelay,
; 4963 :                                     xmlTextReaderValidityWarningRelay,
; 4964 :                                     reader);
; 4965 :             xmlSchemaSetValidStructuredErrors(reader->xsdValidCtxt, NULL,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN5@xmlTextRea:

; 4966 :                                               reader);
; 4967 :         }
; 4968 : #endif
; 4969 :     } else {

	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 4970 :         /* restore defaults */
; 4971 :         reader->ctxt->sax->error = xmlParserError;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+88], OFFSET _xmlParserError

; 4972 :         reader->ctxt->vctxt.error = xmlParserValidityError;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+112], OFFSET _xmlParserValidityError

; 4973 :         reader->ctxt->sax->warning = xmlParserWarning;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [eax+84], OFFSET _xmlParserWarning

; 4974 :         reader->ctxt->vctxt.warning = xmlParserValidityWarning;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+116], OFFSET _xmlParserValidityWarning

; 4975 :         reader->errorFunc = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+108], 0

; 4976 :         reader->sErrorFunc = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+192], 0

; 4977 :         reader->errorFuncArg = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+112], 0

; 4978 : #ifdef LIBXML_SCHEMAS_ENABLED
; 4979 :         if (reader->rngValidCtxt) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN6@xmlTextRea

; 4980 :             xmlRelaxNGSetValidErrors(reader->rngValidCtxt, NULL, NULL,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidErrors
	add	esp, 16					; 00000010H

; 4981 :                                      reader);
; 4982 :             xmlRelaxNGSetValidStructuredErrors(reader->rngValidCtxt, NULL,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN6@xmlTextRea:

; 4983 :                                                reader);
; 4984 :         }
; 4985 :         if (reader->xsdValidCtxt) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN1@xmlTextRea

; 4986 :             xmlSchemaSetValidErrors(reader->xsdValidCtxt, NULL, NULL,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaSetValidErrors
	add	esp, 16					; 00000010H

; 4987 :                                     reader);
; 4988 :             xmlSchemaSetValidStructuredErrors(reader->xsdValidCtxt, NULL,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN1@xmlTextRea:

; 4989 :                                               reader);
; 4990 :         }
; 4991 : #endif
; 4992 :     }
; 4993 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderSetErrorHandler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderLocatorBaseURI
_TEXT	SEGMENT
_input$1 = -12						; size = 4
_ret$ = -8						; size = 4
_ctx$ = -4						; size = 4
_locator$ = 8						; size = 4
_xmlTextReaderLocatorBaseURI PROC			; COMDAT

; 4808 : xmlTextReaderLocatorBaseURI(xmlTextReaderLocatorPtr locator) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4809 :     /* we know that locator is a xmlParserCtxtPtr */
; 4810 :     xmlParserCtxtPtr ctx = (xmlParserCtxtPtr)locator;

	mov	eax, DWORD PTR _locator$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax

; 4811 :     xmlChar *ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 4812 : 
; 4813 :     if (locator == NULL)

	cmp	DWORD PTR _locator$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4814 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 4815 :     if (ctx->node != NULL) {

	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN3@xmlTextRea

; 4816 : 	ret = xmlNodeGetBase(NULL,ctx->node);

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	push	0
	call	_xmlNodeGetBase
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 4817 :     }

	jmp	SHORT $LN4@xmlTextRea
$LN3@xmlTextRea:

; 4818 :     else {
; 4819 : 	/* inspired from error.c */
; 4820 : 	xmlParserInputPtr input;
; 4821 : 	input = ctx->input;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _input$1[ebp], edx

; 4822 : 	if ((input->filename == NULL) && (ctx->inputNr > 1))

	mov	eax, DWORD PTR _input$1[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@xmlTextRea
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+40], 1
	jle	SHORT $LN5@xmlTextRea

; 4823 : 	    input = ctx->inputTab[ctx->inputNr - 2];

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax*4-8]
	mov	DWORD PTR _input$1[ebp], eax
$LN5@xmlTextRea:

; 4824 : 	if (input != NULL) {

	cmp	DWORD PTR _input$1[ebp], 0
	je	SHORT $LN6@xmlTextRea

; 4825 : 	    ret = xmlStrdup(BAD_CAST input->filename);

	mov	ecx, DWORD PTR _input$1[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4826 : 	}

	jmp	SHORT $LN4@xmlTextRea
$LN6@xmlTextRea:

; 4827 : 	else {
; 4828 : 	    ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0
$LN4@xmlTextRea:

; 4829 : 	}
; 4830 :     }
; 4831 : 
; 4832 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 4833 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderLocatorBaseURI ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderLocatorLineNumber
_TEXT	SEGMENT
_input$1 = -12						; size = 4
_ret$ = -8						; size = 4
_ctx$ = -4						; size = 4
_locator$ = 8						; size = 4
_xmlTextReaderLocatorLineNumber PROC			; COMDAT

; 4771 : xmlTextReaderLocatorLineNumber(xmlTextReaderLocatorPtr locator) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4772 :     /* we know that locator is a xmlParserCtxtPtr */
; 4773 :     xmlParserCtxtPtr ctx = (xmlParserCtxtPtr)locator;

	mov	eax, DWORD PTR _locator$[ebp]
	mov	DWORD PTR _ctx$[ebp], eax

; 4774 :     int ret = -1;

	mov	DWORD PTR _ret$[ebp], -1

; 4775 : 
; 4776 :     if (locator == NULL)

	cmp	DWORD PTR _locator$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4777 :         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 4778 :     if (ctx->node != NULL) {

	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN3@xmlTextRea

; 4779 : 	ret = xmlGetLineNo(ctx->node);

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	_xmlGetLineNo
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 4780 :     }

	jmp	SHORT $LN4@xmlTextRea
$LN3@xmlTextRea:

; 4781 :     else {
; 4782 : 	/* inspired from error.c */
; 4783 : 	xmlParserInputPtr input;
; 4784 : 	input = ctx->input;

	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _input$1[ebp], edx

; 4785 : 	if ((input->filename == NULL) && (ctx->inputNr > 1))

	mov	eax, DWORD PTR _input$1[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@xmlTextRea
	mov	ecx, DWORD PTR _ctx$[ebp]
	cmp	DWORD PTR [ecx+40], 1
	jle	SHORT $LN5@xmlTextRea

; 4786 : 	    input = ctx->inputTab[ctx->inputNr - 2];

	mov	edx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR [edx+40]
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	eax, DWORD PTR [edx+eax*4-8]
	mov	DWORD PTR _input$1[ebp], eax
$LN5@xmlTextRea:

; 4787 : 	if (input != NULL) {

	cmp	DWORD PTR _input$1[ebp], 0
	je	SHORT $LN6@xmlTextRea

; 4788 : 	    ret = input->line;

	mov	ecx, DWORD PTR _input$1[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	DWORD PTR _ret$[ebp], edx

; 4789 : 	}

	jmp	SHORT $LN4@xmlTextRea
$LN6@xmlTextRea:

; 4790 : 	else {
; 4791 : 	    ret = -1;

	mov	DWORD PTR _ret$[ebp], -1
$LN4@xmlTextRea:

; 4792 : 	}
; 4793 :     }
; 4794 : 
; 4795 :     return ret;

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 4796 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderLocatorLineNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderNewIO
_TEXT	SEGMENT
_input$ = -4						; size = 4
_reader$ = 8						; size = 4
_ioread$ = 12						; size = 4
_ioclose$ = 16						; size = 4
_ioctx$ = 20						; size = 4
_URL$ = 24						; size = 4
_encoding$ = 28						; size = 4
_options$ = 32						; size = 4
_xmlReaderNewIO PROC					; COMDAT

; 5732 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5733 :     xmlParserInputBufferPtr input;
; 5734 : 
; 5735 :     if (ioread == NULL)

	cmp	DWORD PTR _ioread$[ebp], 0
	jne	SHORT $LN2@xmlReaderN

; 5736 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN2@xmlReaderN:

; 5737 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN3@xmlReaderN

; 5738 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN3@xmlReaderN:

; 5739 : 
; 5740 :     input = xmlParserInputBufferCreateIO(ioread, ioclose, ioctx,

	push	0
	mov	eax, DWORD PTR _ioctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ioclose$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ioread$[ebp]
	push	edx
	call	_xmlParserInputBufferCreateIO
	add	esp, 16					; 00000010H
	mov	DWORD PTR _input$[ebp], eax

; 5741 :                                          XML_CHAR_ENCODING_NONE);
; 5742 :     if (input == NULL) {

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN4@xmlReaderN

; 5743 :         if (ioclose != NULL)

	cmp	DWORD PTR _ioclose$[ebp], 0
	je	SHORT $LN5@xmlReaderN

; 5744 :             ioclose(ioctx);

	mov	esi, esp
	mov	eax, DWORD PTR _ioctx$[ebp]
	push	eax
	call	DWORD PTR _ioclose$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlReaderN:

; 5745 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN4@xmlReaderN:

; 5746 :     }
; 5747 :     return (xmlTextReaderSetup(reader, input, URL, encoding, options));

	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoding$[ebp]
	push	edx
	mov	eax, DWORD PTR _URL$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderSetup
	add	esp, 20					; 00000014H
$LN1@xmlReaderN:

; 5748 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderNewIO ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderNewFd
_TEXT	SEGMENT
_input$ = -4						; size = 4
_reader$ = 8						; size = 4
_fd$ = 12						; size = 4
_URL$ = 16						; size = 4
_encoding$ = 20						; size = 4
_options$ = 24						; size = 4
_xmlReaderNewFd PROC					; COMDAT

; 5696 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5697 :     xmlParserInputBufferPtr input;
; 5698 : 
; 5699 :     if (fd < 0)

	cmp	DWORD PTR _fd$[ebp], 0
	jge	SHORT $LN2@xmlReaderN

; 5700 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN2@xmlReaderN:

; 5701 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN3@xmlReaderN

; 5702 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN3@xmlReaderN:

; 5703 : 
; 5704 :     input = xmlParserInputBufferCreateFd(fd, XML_CHAR_ENCODING_NONE);

	push	0
	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_xmlParserInputBufferCreateFd
	add	esp, 8
	mov	DWORD PTR _input$[ebp], eax

; 5705 :     if (input == NULL)

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN4@xmlReaderN

; 5706 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN4@xmlReaderN:

; 5707 :     input->closecallback = NULL;

	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 5708 :     return (xmlTextReaderSetup(reader, input, URL, encoding, options));

	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _URL$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderSetup
	add	esp, 20					; 00000014H
$LN1@xmlReaderN:

; 5709 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderNewFd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderNewMemory
_TEXT	SEGMENT
_input$ = -4						; size = 4
_reader$ = 8						; size = 4
_buffer$ = 12						; size = 4
_size$ = 16						; size = 4
_URL$ = 20						; size = 4
_encoding$ = 24						; size = 4
_options$ = 28						; size = 4
_xmlReaderNewMemory PROC				; COMDAT

; 5661 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5662 :     xmlParserInputBufferPtr input;
; 5663 : 
; 5664 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlReaderN

; 5665 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN2@xmlReaderN:

; 5666 :     if (buffer == NULL)

	cmp	DWORD PTR _buffer$[ebp], 0
	jne	SHORT $LN3@xmlReaderN

; 5667 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN3@xmlReaderN:

; 5668 : 
; 5669 :     input = xmlParserInputBufferCreateStatic(buffer, size,

	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_xmlParserInputBufferCreateStatic
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _input$[ebp], eax

; 5670 :                                       XML_CHAR_ENCODING_NONE);
; 5671 :     if (input == NULL) {

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN4@xmlReaderN

; 5672 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN4@xmlReaderN:

; 5673 :     }
; 5674 :     return (xmlTextReaderSetup(reader, input, URL, encoding, options));

	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _URL$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderSetup
	add	esp, 20					; 00000014H
$LN1@xmlReaderN:

; 5675 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderNewMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderNewFile
_TEXT	SEGMENT
_input$ = -4						; size = 4
_reader$ = 8						; size = 4
_filename$ = 12						; size = 4
_encoding$ = 16						; size = 4
_options$ = 20						; size = 4
_xmlReaderNewFile PROC					; COMDAT

; 5627 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5628 :     xmlParserInputBufferPtr input;
; 5629 : 
; 5630 :     if (filename == NULL)

	cmp	DWORD PTR _filename$[ebp], 0
	jne	SHORT $LN2@xmlReaderN

; 5631 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN2@xmlReaderN:

; 5632 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN3@xmlReaderN

; 5633 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN3@xmlReaderN:

; 5634 : 
; 5635 :     input =

	push	0
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_xmlParserInputBufferCreateFilename
	add	esp, 8
	mov	DWORD PTR _input$[ebp], eax

; 5636 :         xmlParserInputBufferCreateFilename(filename,
; 5637 :                                            XML_CHAR_ENCODING_NONE);
; 5638 :     if (input == NULL)

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN4@xmlReaderN

; 5639 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN4@xmlReaderN:

; 5640 :     return (xmlTextReaderSetup(reader, input, filename, encoding, options));

	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoding$[ebp]
	push	edx
	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderSetup
	add	esp, 20					; 00000014H
$LN1@xmlReaderN:

; 5641 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderNewFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderNewDoc
_TEXT	SEGMENT
_len$ = -4						; size = 4
_reader$ = 8						; size = 4
_cur$ = 12						; size = 4
_URL$ = 16						; size = 4
_encoding$ = 20						; size = 4
_options$ = 24						; size = 4
_xmlReaderNewDoc PROC					; COMDAT

; 5597 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5598 : 
; 5599 :     int len;
; 5600 : 
; 5601 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlReaderN

; 5602 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN2@xmlReaderN:

; 5603 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN3@xmlReaderN

; 5604 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlReaderN
$LN3@xmlReaderN:

; 5605 : 
; 5606 :     len = xmlStrlen(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_xmlStrlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 5607 :     return (xmlReaderNewMemory(reader, (const char *)cur, len,

	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoding$[ebp]
	push	edx
	mov	eax, DWORD PTR _URL$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlReaderNewMemory
	add	esp, 24					; 00000018H
$LN1@xmlReaderN:

; 5608 :                                URL, encoding, options));
; 5609 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderNewDoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderNewWalker
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_doc$ = 12						; size = 4
_xmlReaderNewWalker PROC				; COMDAT

; 5548 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5549 :     if (doc == NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlReaderN

; 5550 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlReaderN
$LN2@xmlReaderN:

; 5551 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN3@xmlReaderN

; 5552 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlReaderN
$LN3@xmlReaderN:

; 5553 : 
; 5554 :     if (reader->input != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN4@xmlReaderN

; 5555 :         xmlFreeParserInputBuffer(reader->input);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlFreeParserInputBuffer
	add	esp, 4
$LN4@xmlReaderN:

; 5556 :     }
; 5557 :     if (reader->ctxt != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN5@xmlReaderN

; 5558 : 	xmlCtxtReset(reader->ctxt);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_xmlCtxtReset
	add	esp, 4
$LN5@xmlReaderN:

; 5559 :     }
; 5560 : 
; 5561 :     reader->entNr = 0;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+96], 0

; 5562 :     reader->input = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 5563 :     reader->mode = XML_TEXTREADER_MODE_INITIAL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx], 0

; 5564 :     reader->node = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+64], 0

; 5565 :     reader->curnode = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 5566 :     reader->base = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+56], 0

; 5567 :     reader->cur = 0;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+60], 0

; 5568 :     reader->allocs = XML_TEXTREADER_CTXT;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 5569 :     reader->doc = doc;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+4], eax

; 5570 :     reader->state = XML_TEXTREADER_START;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 5571 :     if (reader->dict == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+88], 0
	jne	SHORT $LN6@xmlReaderN

; 5572 :         if ((reader->ctxt != NULL) && (reader->ctxt->dict != NULL))

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN7@xmlReaderN
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+296], 0
	je	SHORT $LN7@xmlReaderN

; 5573 : 	    reader->dict = reader->ctxt->dict;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+296]
	mov	DWORD PTR [edx+88], eax
	jmp	SHORT $LN6@xmlReaderN
$LN7@xmlReaderN:

; 5574 : 	else
; 5575 : 	    reader->dict = xmlDictCreate();

	call	_xmlDictCreate
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+88], eax
$LN6@xmlReaderN:

; 5576 :     }
; 5577 :     return(0);

	xor	eax, eax
$LN1@xmlReaderN:

; 5578 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlReaderNewWalker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderForIO
_TEXT	SEGMENT
_input$ = -8						; size = 4
_reader$ = -4						; size = 4
_ioread$ = 8						; size = 4
_ioclose$ = 12						; size = 4
_ioctx$ = 16						; size = 4
_URL$ = 20						; size = 4
_encoding$ = 24						; size = 4
_options$ = 28						; size = 4
_xmlReaderForIO PROC					; COMDAT

; 5512 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5513 :     xmlTextReaderPtr reader;
; 5514 :     xmlParserInputBufferPtr input;
; 5515 : 
; 5516 :     if (ioread == NULL)

	cmp	DWORD PTR _ioread$[ebp], 0
	jne	SHORT $LN2@xmlReaderF

; 5517 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlReaderF
$LN2@xmlReaderF:

; 5518 : 
; 5519 :     input = xmlParserInputBufferCreateIO(ioread, ioclose, ioctx,

	push	0
	mov	eax, DWORD PTR _ioctx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ioclose$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ioread$[ebp]
	push	edx
	call	_xmlParserInputBufferCreateIO
	add	esp, 16					; 00000010H
	mov	DWORD PTR _input$[ebp], eax

; 5520 :                                          XML_CHAR_ENCODING_NONE);
; 5521 :     if (input == NULL) {

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN3@xmlReaderF

; 5522 :         if (ioclose != NULL)

	cmp	DWORD PTR _ioclose$[ebp], 0
	je	SHORT $LN4@xmlReaderF

; 5523 :             ioclose(ioctx);

	mov	esi, esp
	mov	eax, DWORD PTR _ioctx$[ebp]
	push	eax
	call	DWORD PTR _ioclose$[ebp]
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlReaderF:

; 5524 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlReaderF
$LN3@xmlReaderF:

; 5525 :     }
; 5526 :     reader = xmlNewTextReader(input, URL);

	mov	ecx, DWORD PTR _URL$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_xmlNewTextReader
	add	esp, 8
	mov	DWORD PTR _reader$[ebp], eax

; 5527 :     if (reader == NULL) {

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN5@xmlReaderF

; 5528 :         xmlFreeParserInputBuffer(input);

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_xmlFreeParserInputBuffer
	add	esp, 4

; 5529 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlReaderF
$LN5@xmlReaderF:

; 5530 :     }
; 5531 :     reader->allocs |= XML_TEXTREADER_INPUT;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+12], edx

; 5532 :     xmlTextReaderSetup(reader, NULL, URL, encoding, options);

	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoding$[ebp]
	push	edx
	mov	eax, DWORD PTR _URL$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderSetup
	add	esp, 20					; 00000014H

; 5533 :     return (reader);

	mov	eax, DWORD PTR _reader$[ebp]
$LN1@xmlReaderF:

; 5534 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderForIO ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderForFd
_TEXT	SEGMENT
_input$ = -8						; size = 4
_reader$ = -4						; size = 4
_fd$ = 8						; size = 4
_URL$ = 12						; size = 4
_encoding$ = 16						; size = 4
_options$ = 20						; size = 4
_xmlReaderForFd PROC					; COMDAT

; 5473 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5474 :     xmlTextReaderPtr reader;
; 5475 :     xmlParserInputBufferPtr input;
; 5476 : 
; 5477 :     if (fd < 0)

	cmp	DWORD PTR _fd$[ebp], 0
	jge	SHORT $LN2@xmlReaderF

; 5478 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlReaderF
$LN2@xmlReaderF:

; 5479 : 
; 5480 :     input = xmlParserInputBufferCreateFd(fd, XML_CHAR_ENCODING_NONE);

	push	0
	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	_xmlParserInputBufferCreateFd
	add	esp, 8
	mov	DWORD PTR _input$[ebp], eax

; 5481 :     if (input == NULL)

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN3@xmlReaderF

; 5482 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlReaderF
$LN3@xmlReaderF:

; 5483 :     input->closecallback = NULL;

	mov	ecx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx+8], 0

; 5484 :     reader = xmlNewTextReader(input, URL);

	mov	edx, DWORD PTR _URL$[ebp]
	push	edx
	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_xmlNewTextReader
	add	esp, 8
	mov	DWORD PTR _reader$[ebp], eax

; 5485 :     if (reader == NULL) {

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN4@xmlReaderF

; 5486 :         xmlFreeParserInputBuffer(input);

	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_xmlFreeParserInputBuffer
	add	esp, 4

; 5487 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlReaderF
$LN4@xmlReaderF:

; 5488 :     }
; 5489 :     reader->allocs |= XML_TEXTREADER_INPUT;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 5490 :     xmlTextReaderSetup(reader, NULL, URL, encoding, options);

	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _URL$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderSetup
	add	esp, 20					; 00000014H

; 5491 :     return (reader);

	mov	eax, DWORD PTR _reader$[ebp]
$LN1@xmlReaderF:

; 5492 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderForFd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderForMemory
_TEXT	SEGMENT
_buf$ = -8						; size = 4
_reader$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_URL$ = 16						; size = 4
_encoding$ = 20						; size = 4
_options$ = 24						; size = 4
_xmlReaderForMemory PROC				; COMDAT

; 5438 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5439 :     xmlTextReaderPtr reader;
; 5440 :     xmlParserInputBufferPtr buf;
; 5441 : 
; 5442 :     buf = xmlParserInputBufferCreateStatic(buffer, size,

	push	0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	push	ecx
	call	_xmlParserInputBufferCreateStatic
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _buf$[ebp], eax

; 5443 :                                       XML_CHAR_ENCODING_NONE);
; 5444 :     if (buf == NULL) {

	cmp	DWORD PTR _buf$[ebp], 0
	jne	SHORT $LN2@xmlReaderF

; 5445 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlReaderF
$LN2@xmlReaderF:

; 5446 :     }
; 5447 :     reader = xmlNewTextReader(buf, URL);

	mov	edx, DWORD PTR _URL$[ebp]
	push	edx
	mov	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_xmlNewTextReader
	add	esp, 8
	mov	DWORD PTR _reader$[ebp], eax

; 5448 :     if (reader == NULL) {

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN3@xmlReaderF

; 5449 :         xmlFreeParserInputBuffer(buf);

	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	call	_xmlFreeParserInputBuffer
	add	esp, 4

; 5450 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlReaderF
$LN3@xmlReaderF:

; 5451 :     }
; 5452 :     reader->allocs |= XML_TEXTREADER_INPUT;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+12]
	or	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+12], eax

; 5453 :     xmlTextReaderSetup(reader, NULL, URL, encoding, options);

	mov	edx, DWORD PTR _options$[ebp]
	push	edx
	mov	eax, DWORD PTR _encoding$[ebp]
	push	eax
	mov	ecx, DWORD PTR _URL$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderSetup
	add	esp, 20					; 00000014H

; 5454 :     return (reader);

	mov	eax, DWORD PTR _reader$[ebp]
$LN1@xmlReaderF:

; 5455 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderForMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderForFile
_TEXT	SEGMENT
_reader$ = -4						; size = 4
_filename$ = 8						; size = 4
_encoding$ = 12						; size = 4
_options$ = 16						; size = 4
_xmlReaderForFile PROC					; COMDAT

; 5412 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5413 :     xmlTextReaderPtr reader;
; 5414 : 
; 5415 :     reader = xmlNewTextReaderFilename(filename);

	mov	eax, DWORD PTR _filename$[ebp]
	push	eax
	call	_xmlNewTextReaderFilename
	add	esp, 4
	mov	DWORD PTR _reader$[ebp], eax

; 5416 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlReaderF

; 5417 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlReaderF
$LN2@xmlReaderF:

; 5418 :     xmlTextReaderSetup(reader, NULL, NULL, encoding, options);

	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoding$[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderSetup
	add	esp, 20					; 00000014H

; 5419 :     return (reader);

	mov	eax, DWORD PTR _reader$[ebp]
$LN1@xmlReaderF:

; 5420 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderForFile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderForDoc
_TEXT	SEGMENT
_len$ = -4						; size = 4
_cur$ = 8						; size = 4
_URL$ = 12						; size = 4
_encoding$ = 16						; size = 4
_options$ = 20						; size = 4
_xmlReaderForDoc PROC					; COMDAT

; 5388 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5389 :     int len;
; 5390 : 
; 5391 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN2@xmlReaderF

; 5392 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlReaderF
$LN2@xmlReaderF:

; 5393 :     len = xmlStrlen(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_xmlStrlen
	add	esp, 4
	mov	DWORD PTR _len$[ebp], eax

; 5394 : 
; 5395 :     return (xmlReaderForMemory

	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _encoding$[ebp]
	push	edx
	mov	eax, DWORD PTR _URL$[ebp]
	push	eax
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlReaderForMemory
	add	esp, 20					; 00000014H
$LN1@xmlReaderF:

; 5396 :             ((const char *) cur, len, URL, encoding, options));
; 5397 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderForDoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlReaderWalker
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_doc$ = 8						; size = 4
_xmlReaderWalker PROC					; COMDAT

; 5346 : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5347 :     xmlTextReaderPtr ret;
; 5348 : 
; 5349 :     if (doc == NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlReaderW

; 5350 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlReaderW
$LN2@xmlReaderW:

; 5351 : 
; 5352 :     ret = xmlMalloc(sizeof(xmlTextReader));

	mov	esi, esp
	push	196					; 000000c4H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 5353 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@xmlReaderW

; 5354 :         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CC@HCDAIILG@xmlNewTextReader?5?3?5malloc?5faile@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5355 : 		"xmlNewTextReader : malloc failed\n");
; 5356 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlReaderW
$LN3@xmlReaderW:

; 5357 :     }
; 5358 :     memset(ret, 0, sizeof(xmlTextReader));

	push	196					; 000000c4H
	push	0
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 5359 :     ret->entNr = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+96], 0

; 5360 :     ret->input = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+28], 0

; 5361 :     ret->mode = XML_TEXTREADER_MODE_INITIAL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], 0

; 5362 :     ret->node = NULL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+64], 0

; 5363 :     ret->curnode = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 5364 :     ret->base = 0;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+56], 0

; 5365 :     ret->cur = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+60], 0

; 5366 :     ret->allocs = XML_TEXTREADER_CTXT;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+12], 2

; 5367 :     ret->doc = doc;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+4], eax

; 5368 :     ret->state = XML_TEXTREADER_START;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 5369 :     ret->dict = xmlDictCreate();

	call	_xmlDictCreate
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+88], eax

; 5370 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlReaderW:

; 5371 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlReaderWalker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderByteConsumed
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderByteConsumed PROC				; COMDAT

; 5329 : xmlTextReaderByteConsumed(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5330 :     if ((reader == NULL) || (reader->ctxt == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 5331 :         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 5332 :     return(xmlByteConsumed(reader->ctxt));

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_xmlByteConsumed
	add	esp, 4
$LN1@xmlTextRea:

; 5333 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderByteConsumed ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderStandalone
_TEXT	SEGMENT
_doc$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderStandalone PROC				; COMDAT

; 4705 : xmlTextReaderStandalone(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4706 :     xmlDocPtr doc = NULL;

	mov	DWORD PTR _doc$[ebp], 0

; 4707 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4708 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 4709 :     if (reader->doc != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@xmlTextRea

; 4710 :         doc = reader->doc;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _doc$[ebp], edx
	jmp	SHORT $LN4@xmlTextRea
$LN3@xmlTextRea:

; 4711 :     else if (reader->ctxt != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@xmlTextRea

; 4712 : 	doc = reader->ctxt->myDoc;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _doc$[ebp], eax
$LN4@xmlTextRea:

; 4713 :     if (doc == NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN6@xmlTextRea

; 4714 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 4715 : 
; 4716 :     return(doc->standalone);

	mov	ecx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [ecx+40]
$LN1@xmlTextRea:

; 4717 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderStandalone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstXmlVersion
_TEXT	SEGMENT
_doc$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderConstXmlVersion PROC			; COMDAT

; 4677 : xmlTextReaderConstXmlVersion(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4678 :     xmlDocPtr doc = NULL;

	mov	DWORD PTR _doc$[ebp], 0

; 4679 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4680 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 4681 :     if (reader->doc != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@xmlTextRea

; 4682 :         doc = reader->doc;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _doc$[ebp], edx
	jmp	SHORT $LN4@xmlTextRea
$LN3@xmlTextRea:

; 4683 :     else if (reader->ctxt != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@xmlTextRea

; 4684 : 	doc = reader->ctxt->myDoc;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _doc$[ebp], eax
$LN4@xmlTextRea:

; 4685 :     if (doc == NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN6@xmlTextRea

; 4686 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 4687 : 
; 4688 :     if (doc->version == NULL)

	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+56], 0
	jne	SHORT $LN7@xmlTextRea

; 4689 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 4690 :     else
; 4691 :       return(CONSTSTR(doc->version));

	push	-1
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+56]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
$LN1@xmlTextRea:

; 4692 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderConstXmlVersion ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderSetSchema
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_schema$ = 12						; size = 4
_xmlTextReaderSetSchema PROC				; COMDAT

; 4263 : xmlTextReaderSetSchema(xmlTextReaderPtr reader, xmlSchemaPtr schema) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4264 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4265 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 4266 :     if (schema == NULL) {

	cmp	DWORD PTR _schema$[ebp], 0
	jne	$LN3@xmlTextRea

; 4267 : 	if (reader->xsdPlug != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN4@xmlTextRea

; 4268 : 	    xmlSchemaSAXUnplug(reader->xsdPlug);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	push	edx
	call	_xmlSchemaSAXUnplug
	add	esp, 4

; 4269 : 	    reader->xsdPlug = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+152], 0
$LN4@xmlTextRea:

; 4270 : 	}
; 4271 :         if (reader->xsdValidCtxt != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN5@xmlTextRea

; 4272 : 	    if (! reader->xsdPreserveCtxt)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+144], 0
	jne	SHORT $LN6@xmlTextRea

; 4273 : 		xmlSchemaFreeValidCtxt(reader->xsdValidCtxt);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaFreeValidCtxt
	add	esp, 4
$LN6@xmlTextRea:

; 4274 : 	    reader->xsdValidCtxt = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+140], 0
$LN5@xmlTextRea:

; 4275 :         }
; 4276 : 	reader->xsdPreserveCtxt = 0;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+144], 0

; 4277 :         if (reader->xsdSchemas != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+136], 0
	je	SHORT $LN7@xmlTextRea

; 4278 : 	    xmlSchemaFree(reader->xsdSchemas);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	call	_xmlSchemaFree
	add	esp, 4

; 4279 : 	    reader->xsdSchemas = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+136], 0
$LN7@xmlTextRea:

; 4280 : 	}
; 4281 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN3@xmlTextRea:

; 4282 :     }
; 4283 :     if (reader->mode != XML_TEXTREADER_MODE_INITIAL)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN8@xmlTextRea

; 4284 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN8@xmlTextRea:

; 4285 :     if (reader->xsdPlug != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN9@xmlTextRea

; 4286 : 	xmlSchemaSAXUnplug(reader->xsdPlug);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	push	edx
	call	_xmlSchemaSAXUnplug
	add	esp, 4

; 4287 : 	reader->xsdPlug = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+152], 0
$LN9@xmlTextRea:

; 4288 :     }
; 4289 :     if (reader->xsdValidCtxt != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN10@xmlTextRea

; 4290 : 	if (! reader->xsdPreserveCtxt)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+144], 0
	jne	SHORT $LN11@xmlTextRea

; 4291 : 	    xmlSchemaFreeValidCtxt(reader->xsdValidCtxt);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaFreeValidCtxt
	add	esp, 4
$LN11@xmlTextRea:

; 4292 : 	reader->xsdValidCtxt = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+140], 0
$LN10@xmlTextRea:

; 4293 :     }
; 4294 :     reader->xsdPreserveCtxt = 0;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+144], 0

; 4295 :     if (reader->xsdSchemas != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+136], 0
	je	SHORT $LN12@xmlTextRea

; 4296 : 	xmlSchemaFree(reader->xsdSchemas);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	call	_xmlSchemaFree
	add	esp, 4

; 4297 : 	reader->xsdSchemas = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+136], 0
$LN12@xmlTextRea:

; 4298 :     }
; 4299 :     reader->xsdValidCtxt = xmlSchemaNewValidCtxt(schema);

	mov	edx, DWORD PTR _schema$[ebp]
	push	edx
	call	_xmlSchemaNewValidCtxt
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+140], eax

; 4300 :     if (reader->xsdValidCtxt == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+140], 0
	jne	SHORT $LN13@xmlTextRea

; 4301 : 	xmlSchemaFree(reader->xsdSchemas);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	_xmlSchemaFree
	add	esp, 4

; 4302 : 	reader->xsdSchemas = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+136], 0

; 4303 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN13@xmlTextRea:

; 4304 :     }
; 4305 :     reader->xsdPlug = xmlSchemaSAXPlug(reader->xsdValidCtxt,

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	_xmlSchemaSAXPlug
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+152], eax

; 4306 :                                        &(reader->ctxt->sax),
; 4307 : 				       &(reader->ctxt->userData));
; 4308 :     if (reader->xsdPlug == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+152], 0
	jne	SHORT $LN14@xmlTextRea

; 4309 : 	xmlSchemaFree(reader->xsdSchemas);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	_xmlSchemaFree
	add	esp, 4

; 4310 : 	reader->xsdSchemas = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+136], 0

; 4311 : 	xmlSchemaFreeValidCtxt(reader->xsdValidCtxt);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaFreeValidCtxt
	add	esp, 4

; 4312 : 	reader->xsdValidCtxt = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+140], 0

; 4313 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN14@xmlTextRea:

; 4314 :     }
; 4315 :     xmlSchemaValidateSetLocator(reader->xsdValidCtxt,

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	push	OFFSET _xmlTextReaderLocator
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	call	_xmlSchemaValidateSetLocator
	add	esp, 12					; 0000000cH

; 4316 :                                 xmlTextReaderLocator,
; 4317 : 				(void *) reader);
; 4318 : 
; 4319 :     if (reader->errorFunc != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN15@xmlTextRea

; 4320 : 	xmlSchemaSetValidErrors(reader->xsdValidCtxt,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	OFFSET _xmlTextReaderValidityWarningRelay
	push	OFFSET _xmlTextReaderValidityErrorRelay
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+140]
	push	eax
	call	_xmlSchemaSetValidErrors
	add	esp, 16					; 00000010H
$LN15@xmlTextRea:

; 4321 : 			xmlTextReaderValidityErrorRelay,
; 4322 : 			xmlTextReaderValidityWarningRelay,
; 4323 : 			reader);
; 4324 :     }
; 4325 : 	if (reader->sErrorFunc != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN16@xmlTextRea

; 4326 : 		xmlSchemaSetValidStructuredErrors(reader->xsdValidCtxt,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	OFFSET _xmlTextReaderValidityStructuredRelay
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN16@xmlTextRea:

; 4327 : 			xmlTextReaderValidityStructuredRelay,
; 4328 : 			reader);
; 4329 :     }
; 4330 :     reader->xsdValidErrors = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+148], 0

; 4331 :     reader->validate = XML_TEXTREADER_VALIDATE_XSD;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+8], 4

; 4332 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 4333 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderSetSchema ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderSchemaValidateCtxt
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_ctxt$ = 12						; size = 4
_options$ = 16						; size = 4
_xmlTextReaderSchemaValidateCtxt PROC			; COMDAT

; 4575 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4576 :     return(xmlTextReaderSchemaValidateInternal(reader, NULL, ctxt, options));

	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderSchemaValidateInternal
	add	esp, 16					; 00000010H

; 4577 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderSchemaValidateCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderSchemaValidate
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xsd$ = 12						; size = 4
_xmlTextReaderSchemaValidate PROC			; COMDAT

; 4593 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4594 :     return(xmlTextReaderSchemaValidateInternal(reader, xsd, NULL, 0));

	push	0
	push	0
	mov	eax, DWORD PTR _xsd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderSchemaValidateInternal
	add	esp, 16					; 00000010H

; 4595 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderSchemaValidate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderRelaxNGSetSchema
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_schema$ = 12						; size = 4
_xmlTextReaderRelaxNGSetSchema PROC			; COMDAT

; 4146 : xmlTextReaderRelaxNGSetSchema(xmlTextReaderPtr reader, xmlRelaxNGPtr schema) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4147 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4148 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 4149 :     if (schema == NULL) {

	cmp	DWORD PTR _schema$[ebp], 0
	jne	SHORT $LN3@xmlTextRea

; 4150 :         if (reader->rngSchemas != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN4@xmlTextRea

; 4151 : 	    xmlRelaxNGFree(reader->rngSchemas);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	call	_xmlRelaxNGFree
	add	esp, 4

; 4152 : 	    reader->rngSchemas = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+116], 0
$LN4@xmlTextRea:

; 4153 : 	}
; 4154 :         if (reader->rngValidCtxt != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+120], 0
	je	SHORT $LN5@xmlTextRea

; 4155 : 	    if (! reader->rngPreserveCtxt)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+124], 0
	jne	SHORT $LN6@xmlTextRea

; 4156 : 		xmlRelaxNGFreeValidCtxt(reader->rngValidCtxt);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_xmlRelaxNGFreeValidCtxt
	add	esp, 4
$LN6@xmlTextRea:

; 4157 : 	    reader->rngValidCtxt = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+120], 0
$LN5@xmlTextRea:

; 4158 :         }
; 4159 : 	reader->rngPreserveCtxt = 0;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+124], 0

; 4160 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN3@xmlTextRea:

; 4161 :     }
; 4162 :     if (reader->mode != XML_TEXTREADER_MODE_INITIAL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN7@xmlTextRea

; 4163 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN7@xmlTextRea:

; 4164 :     if (reader->rngSchemas != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+116], 0
	je	SHORT $LN8@xmlTextRea

; 4165 : 	xmlRelaxNGFree(reader->rngSchemas);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	call	_xmlRelaxNGFree
	add	esp, 4

; 4166 : 	reader->rngSchemas = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+116], 0
$LN8@xmlTextRea:

; 4167 :     }
; 4168 :     if (reader->rngValidCtxt != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+120], 0
	je	SHORT $LN9@xmlTextRea

; 4169 : 	if (! reader->rngPreserveCtxt)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+124], 0
	jne	SHORT $LN10@xmlTextRea

; 4170 : 	    xmlRelaxNGFreeValidCtxt(reader->rngValidCtxt);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGFreeValidCtxt
	add	esp, 4
$LN10@xmlTextRea:

; 4171 : 	reader->rngValidCtxt = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+120], 0
$LN9@xmlTextRea:

; 4172 :     }
; 4173 :     reader->rngPreserveCtxt = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+124], 0

; 4174 :     reader->rngValidCtxt = xmlRelaxNGNewValidCtxt(schema);

	mov	eax, DWORD PTR _schema$[ebp]
	push	eax
	call	_xmlRelaxNGNewValidCtxt
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+120], eax

; 4175 :     if (reader->rngValidCtxt == NULL)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+120], 0
	jne	SHORT $LN11@xmlTextRea

; 4176 :         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN11@xmlTextRea:

; 4177 :     if (reader->errorFunc != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+108], 0
	je	SHORT $LN12@xmlTextRea

; 4178 : 	xmlRelaxNGSetValidErrors(reader->rngValidCtxt,

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	push	OFFSET _xmlTextReaderValidityWarningRelay
	push	OFFSET _xmlTextReaderValidityErrorRelay
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+120]
	push	eax
	call	_xmlRelaxNGSetValidErrors
	add	esp, 16					; 00000010H
$LN12@xmlTextRea:

; 4179 : 			xmlTextReaderValidityErrorRelay,
; 4180 : 			xmlTextReaderValidityWarningRelay,
; 4181 : 			reader);
; 4182 :     }
; 4183 : 	if (reader->sErrorFunc != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+192], 0
	je	SHORT $LN13@xmlTextRea

; 4184 : 		xmlRelaxNGSetValidStructuredErrors(reader->rngValidCtxt,

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	push	OFFSET _xmlTextReaderValidityStructuredRelay
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_xmlRelaxNGSetValidStructuredErrors
	add	esp, 12					; 0000000cH
$LN13@xmlTextRea:

; 4185 : 			xmlTextReaderValidityStructuredRelay,
; 4186 : 			reader);
; 4187 :     }
; 4188 :     reader->rngValidErrors = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+128], 0

; 4189 :     reader->rngFullNode = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+132], 0

; 4190 :     reader->validate = XML_TEXTREADER_VALIDATE_RNG;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+8], 2

; 4191 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 4192 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderRelaxNGSetSchema ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderRelaxNGValidateCtxt
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_ctxt$ = 12						; size = 4
_options$ = 16						; size = 4
_xmlTextReaderRelaxNGValidateCtxt PROC			; COMDAT

; 4614 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4615 :     return(xmlTextReaderRelaxNGValidateInternal(reader, NULL, ctxt, options));

	mov	eax, DWORD PTR _options$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderRelaxNGValidateInternal
	add	esp, 16					; 00000010H

; 4616 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderRelaxNGValidateCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderRelaxNGValidate
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_rng$ = 12						; size = 4
_xmlTextReaderRelaxNGValidate PROC			; COMDAT

; 4632 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4633 :     return(xmlTextReaderRelaxNGValidateInternal(reader, rng, NULL, 0));

	push	0
	push	0
	mov	eax, DWORD PTR _rng$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderRelaxNGValidateInternal
	add	esp, 16					; 00000010H

; 4634 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderRelaxNGValidate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderIsValid
_TEXT	SEGMENT
tv74 = -8						; size = 4
tv69 = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderIsValid PROC				; COMDAT

; 5071 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5072 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 5073 :         return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 5074 : #ifdef LIBXML_SCHEMAS_ENABLED
; 5075 :     if (reader->validate == XML_TEXTREADER_VALIDATE_RNG)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+8], 2
	jne	SHORT $LN3@xmlTextRea

; 5076 :         return (reader->rngValidErrors == 0);

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+128], 0
	jne	SHORT $LN7@xmlTextRea
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN8@xmlTextRea
$LN7@xmlTextRea:
	mov	DWORD PTR tv69[ebp], 0
$LN8@xmlTextRea:
	mov	eax, DWORD PTR tv69[ebp]
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 5077 :     if (reader->validate == XML_TEXTREADER_VALIDATE_XSD)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+8], 4
	jne	SHORT $LN4@xmlTextRea

; 5078 :         return (reader->xsdValidErrors == 0);

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+148], 0
	jne	SHORT $LN9@xmlTextRea
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN10@xmlTextRea
$LN9@xmlTextRea:
	mov	DWORD PTR tv74[ebp], 0
$LN10@xmlTextRea:
	mov	eax, DWORD PTR tv74[ebp]
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 5079 : #endif
; 5080 :     if ((reader->ctxt != NULL) && (reader->ctxt->validate == 1))

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN5@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+104], 1
	jne	SHORT $LN5@xmlTextRea

; 5081 :         return (reader->ctxt->valid);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+100]
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 5082 :     return (0);

	xor	eax, eax
$LN1@xmlTextRea:

; 5083 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderIsValid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderNextSibling
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderNextSibling PROC				; COMDAT

; 2036 : xmlTextReaderNextSibling(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2037 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 2038 :         return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 2039 :     if (reader->doc == NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN3@xmlTextRea

; 2040 :         /* TODO */
; 2041 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 2042 :     }
; 2043 : 
; 2044 :     if (reader->state == XML_TEXTREADER_END)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+16], 2
	jne	SHORT $LN4@xmlTextRea

; 2045 :         return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 2046 : 
; 2047 :     if (reader->node == NULL)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+64], 0
	jne	SHORT $LN5@xmlTextRea

; 2048 :         return(xmlTextReaderNextTree(reader));

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderNextTree
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 2049 : 
; 2050 :     if (reader->node->next != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN6@xmlTextRea

; 2051 :         reader->node = reader->node->next;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+64], eax

; 2052 :         reader->state = XML_TEXTREADER_START;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 0

; 2053 :         return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 2054 :     }
; 2055 : 
; 2056 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 2057 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderNextSibling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderNext
_TEXT	SEGMENT
_cur$ = -8						; size = 4
_ret$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderNext PROC					; COMDAT

; 1669 : xmlTextReaderNext(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1670 :     int ret;
; 1671 :     xmlNodePtr cur;
; 1672 : 
; 1673 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN5@xmlTextRea

; 1674 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 1675 :     if (reader->doc != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN6@xmlTextRea

; 1676 :         return(xmlTextReaderNextTree(reader));

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderNextTree
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN6@xmlTextRea:

; 1677 :     cur = reader->node;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _cur$[ebp], eax

; 1678 :     if ((cur == NULL) || (cur->type != XML_ELEMENT_NODE))

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN8@xmlTextRea
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	je	SHORT $LN7@xmlTextRea
$LN8@xmlTextRea:

; 1679 :         return(xmlTextReaderRead(reader));

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderRead
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 1680 :     if (reader->state == XML_TEXTREADER_END || reader->state == XML_TEXTREADER_BACKTRACK)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+16], 2
	je	SHORT $LN10@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+16], 4
	jne	SHORT $LN9@xmlTextRea
$LN10@xmlTextRea:

; 1681 :         return(xmlTextReaderRead(reader));

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderRead
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 1682 :     if (cur->extra & NODE_IS_EMPTY)

	mov	eax, DWORD PTR _cur$[ebp]
	movzx	ecx, WORD PTR [eax+58]
	and	ecx, 1
	je	SHORT $LN4@xmlTextRea

; 1683 :         return(xmlTextReaderRead(reader));

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderRead
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 1684 :     do {
; 1685 :         ret = xmlTextReaderRead(reader);

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderRead
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 1686 : 	if (ret != 1)

	cmp	DWORD PTR _ret$[ebp], 1
	je	SHORT $LN2@xmlTextRea

; 1687 : 	    return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 1688 :     } while (reader->node != cur);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	edx, DWORD PTR _cur$[ebp]
	jne	SHORT $LN4@xmlTextRea

; 1689 :     return(xmlTextReaderRead(reader));

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderRead
	add	esp, 4
$LN1@xmlTextRea:

; 1690 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderNext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderExpand
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderExpand PROC				; COMDAT

; 1646 : xmlTextReaderExpand(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1647 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 1648 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 1649 :     if (reader->doc != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN4@xmlTextRea

; 1650 :         return(reader->node);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 1651 :     if (reader->ctxt == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN5@xmlTextRea

; 1652 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 1653 :     if (xmlTextReaderDoExpand(reader) < 0)

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderDoExpand
	add	esp, 4
	test	eax, eax
	jge	SHORT $LN6@xmlTextRea

; 1654 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 1655 :     return(reader->node);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
$LN1@xmlTextRea:

; 1656 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderExpand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderCurrentDoc
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderCurrentDoc PROC				; COMDAT

; 4044 : xmlTextReaderCurrentDoc(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4045 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4046 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 4047 :     if (reader->doc != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@xmlTextRea

; 4048 :         return(reader->doc);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 4049 :     if ((reader->ctxt == NULL) || (reader->ctxt->myDoc == NULL))

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN5@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 4050 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 4051 : 
; 4052 :     reader->preserve = 1;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+80], 1

; 4053 :     return(reader->ctxt->myDoc);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	eax, DWORD PTR [ecx+8]
$LN1@xmlTextRea:

; 4054 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderCurrentDoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderPreservePattern
_TEXT	SEGMENT
tv148 = -12						; size = 4
_tmp$1 = -8						; size = 4
_comp$ = -4						; size = 4
_reader$ = 8						; size = 4
_pattern$ = 12						; size = 4
_namespaces$ = 16					; size = 4
_xmlTextReaderPreservePattern PROC			; COMDAT

; 3994 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3995 :     xmlPatternPtr comp;
; 3996 : 
; 3997 :     if ((reader == NULL) || (pattern == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	cmp	DWORD PTR _pattern$[ebp], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3998 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 3999 : 
; 4000 :     comp = xmlPatterncompile(pattern, reader->dict, 0, namespaces);

	mov	eax, DWORD PTR _namespaces$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	mov	eax, DWORD PTR _pattern$[ebp]
	push	eax
	call	_xmlPatterncompile
	add	esp, 16					; 00000010H
	mov	DWORD PTR _comp$[ebp], eax

; 4001 :     if (comp == NULL)

	cmp	DWORD PTR _comp$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 4002 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 4003 : 
; 4004 :     if (reader->patternMax <= 0) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+176], 0
	jg	SHORT $LN5@xmlTextRea

; 4005 : 	reader->patternMax = 4;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+176], 4

; 4006 : 	reader->patternTab = (xmlPatternPtr *) xmlMalloc(reader->patternMax *

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+180], eax

; 4007 : 					      sizeof(reader->patternTab[0]));
; 4008 :         if (reader->patternTab == NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN5@xmlTextRea

; 4009 :             xmlGenericError(xmlGenericErrorContext, "xmlMalloc failed !\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BE@MPMNBMMA@xmlMalloc?5failed?5?$CB?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4010 :             return (-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 4011 :         }
; 4012 :     }
; 4013 :     if (reader->patternNr >= reader->patternMax) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+172]
	cmp	edx, DWORD PTR [ecx+176]
	jl	$LN7@xmlTextRea

; 4014 :         xmlPatternPtr *tmp;
; 4015 :         reader->patternMax *= 2;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	shl	ecx, 1
	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+176], ecx

; 4016 : 	tmp = (xmlPatternPtr *) xmlRealloc(reader->patternTab,

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+176]
	shl	ecx, 2
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+180]
	push	eax
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$1[ebp], eax

; 4017 :                                       reader->patternMax *
; 4018 :                                       sizeof(reader->patternTab[0]));
; 4019 :         if (tmp == NULL) {

	cmp	DWORD PTR _tmp$1[ebp], 0
	jne	SHORT $LN8@xmlTextRea

; 4020 :             xmlGenericError(xmlGenericErrorContext, "xmlRealloc failed !\n");

	mov	esi, esp
	push	OFFSET ??_C@_0BF@DCPGEBNC@xmlRealloc?5failed?5?$CB?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 4021 : 	    reader->patternMax /= 2;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [eax+176]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+176], eax

; 4022 :             return (-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 4023 :         }
; 4024 : 	reader->patternTab = tmp;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [edx+180], eax
$LN7@xmlTextRea:

; 4025 :     }
; 4026 :     reader->patternTab[reader->patternNr] = comp;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	mov	eax, DWORD PTR _comp$[ebp]
	mov	DWORD PTR [ecx+edx*4], eax

; 4027 :     return(reader->patternNr++);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	DWORD PTR tv148[ebp], edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+172]
	add	ecx, 1
	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+172], ecx
	mov	eax, DWORD PTR tv148[ebp]
$LN1@xmlTextRea:

; 4028 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderPreservePattern ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderPreserve
_TEXT	SEGMENT
_parent$ = -8						; size = 4
_cur$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderPreserve PROC				; COMDAT

; 3950 : xmlTextReaderPreserve(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3951 :     xmlNodePtr cur, parent;
; 3952 : 
; 3953 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 3954 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 3955 : 
; 3956 :     if (reader->curnode != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN5@xmlTextRea

; 3957 :         cur = reader->curnode;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN6@xmlTextRea
$LN5@xmlTextRea:

; 3958 :     else
; 3959 :         cur = reader->node;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _cur$[ebp], ecx
$LN6@xmlTextRea:

; 3960 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN7@xmlTextRea

; 3961 :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN7@xmlTextRea:

; 3962 : 
; 3963 :     if ((cur->type != XML_DOCUMENT_NODE) && (cur->type != XML_DTD_NODE)) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 9
	je	SHORT $LN8@xmlTextRea
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 14			; 0000000eH
	je	SHORT $LN8@xmlTextRea

; 3964 : 	cur->extra |= NODE_IS_PRESERVED;

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, WORD PTR [ecx+58]
	or	edx, 2
	mov	eax, DWORD PTR _cur$[ebp]
	mov	WORD PTR [eax+58], dx

; 3965 : 	cur->extra |= NODE_IS_SPRESERVED;

	mov	ecx, DWORD PTR _cur$[ebp]
	movzx	edx, WORD PTR [ecx+58]
	or	edx, 4
	mov	eax, DWORD PTR _cur$[ebp]
	mov	WORD PTR [eax+58], dx
$LN8@xmlTextRea:

; 3966 :     }
; 3967 :     reader->preserves++;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	add	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+184], edx

; 3968 : 
; 3969 :     parent = cur->parent;;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _parent$[ebp], edx
$LN2@xmlTextRea:

; 3970 :     while (parent != NULL) {

	cmp	DWORD PTR _parent$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 3971 :         if (parent->type == XML_ELEMENT_NODE)

	mov	eax, DWORD PTR _parent$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN9@xmlTextRea

; 3972 : 	    parent->extra |= NODE_IS_PRESERVED;

	mov	ecx, DWORD PTR _parent$[ebp]
	movzx	edx, WORD PTR [ecx+58]
	or	edx, 2
	mov	eax, DWORD PTR _parent$[ebp]
	mov	WORD PTR [eax+58], dx
$LN9@xmlTextRea:

; 3973 : 	parent = parent->parent;

	mov	ecx, DWORD PTR _parent$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR _parent$[ebp], edx

; 3974 :     }

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3975 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlTextRea:

; 3976 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderPreserve ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGetParserColumnNumber
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderGetParserColumnNumber PROC		; COMDAT

; 3911 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3912 :     if ((reader == NULL) || (reader->ctxt == NULL) ||

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3913 :         (reader->ctxt->input == NULL)) {
; 3914 :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3915 :     }
; 3916 :     return (reader->ctxt->input->col);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+32]
$LN1@xmlTextRea:

; 3917 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderGetParserColumnNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGetParserLineNumber
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderGetParserLineNumber PROC			; COMDAT

; 3893 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3894 :     if ((reader == NULL) || (reader->ctxt == NULL) ||

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3895 :         (reader->ctxt->input == NULL)) {
; 3896 :         return (0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3897 :     }
; 3898 :     return (reader->ctxt->input->line);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+28]
$LN1@xmlTextRea:

; 3899 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderGetParserLineNumber ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderCurrentNode
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderCurrentNode PROC				; COMDAT

; 3930 : xmlTextReaderCurrentNode(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3931 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 3932 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3933 : 
; 3934 :     if (reader->curnode != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN3@xmlTextRea

; 3935 : 	return(reader->curnode);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+68]
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 3936 :     return(reader->node);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
$LN1@xmlTextRea:

; 3937 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderCurrentNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGetParserProp
_TEXT	SEGMENT
tv68 = -12						; size = 4
_ctxt$ = -8						; size = 4
_p$ = -4						; size = 4
_reader$ = 8						; size = 4
_prop$ = 12						; size = 4
_xmlTextReaderGetParserProp PROC			; COMDAT

; 3857 : xmlTextReaderGetParserProp(xmlTextReaderPtr reader, int prop) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3858 :     xmlParserProperties p = (xmlParserProperties) prop;

	mov	eax, DWORD PTR _prop$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 3859 :     xmlParserCtxtPtr ctxt;
; 3860 : 
; 3861 :     if ((reader == NULL) || (reader->ctxt == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN5@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 3862 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 3863 :     ctxt = reader->ctxt;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _ctxt$[ebp], eax

; 3864 : 
; 3865 :     switch (p) {

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	sub	edx, 1
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 3
	ja	SHORT $LN2@xmlTextRea
	mov	eax, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN14@xmlTextRea[eax*4]
$LN6@xmlTextRea:

; 3866 :         case XML_PARSER_LOADDTD:
; 3867 : 	    if ((ctxt->loadsubset != 0) || (ctxt->validate != 0))

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+276], 0
	jne	SHORT $LN8@xmlTextRea
	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+104], 0
	je	SHORT $LN7@xmlTextRea
$LN8@xmlTextRea:

; 3868 : 		return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 3869 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 3870 :         case XML_PARSER_DEFAULTATTRS:
; 3871 : 	    if (ctxt->loadsubset & XML_COMPLETE_ATTRS)

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+276]
	and	ecx, 4
	je	SHORT $LN10@xmlTextRea

; 3872 : 		return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN10@xmlTextRea:

; 3873 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN11@xmlTextRea:

; 3874 :         case XML_PARSER_VALIDATE:
; 3875 : 	    return(reader->validate);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+8]
	jmp	SHORT $LN1@xmlTextRea
$LN12@xmlTextRea:

; 3876 : 	case XML_PARSER_SUBST_ENTITIES:
; 3877 : 	    return(ctxt->replaceEntities);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [eax+16]
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3878 :     }
; 3879 :     return(-1);

	or	eax, -1
$LN1@xmlTextRea:

; 3880 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN14@xmlTextRea:
	DD	$LN6@xmlTextRea
	DD	$LN9@xmlTextRea
	DD	$LN11@xmlTextRea
	DD	$LN12@xmlTextRea
_xmlTextReaderGetParserProp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderSetParserProp
_TEXT	SEGMENT
tv68 = -12						; size = 4
_ctxt$ = -8						; size = 4
_p$ = -4						; size = 4
_reader$ = 8						; size = 4
_prop$ = 12						; size = 4
_value$ = 16						; size = 4
_xmlTextReaderSetParserProp PROC			; COMDAT

; 3800 : xmlTextReaderSetParserProp(xmlTextReaderPtr reader, int prop, int value) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3801 :     xmlParserProperties p = (xmlParserProperties) prop;

	mov	eax, DWORD PTR _prop$[ebp]
	mov	DWORD PTR _p$[ebp], eax

; 3802 :     xmlParserCtxtPtr ctxt;
; 3803 : 
; 3804 :     if ((reader == NULL) || (reader->ctxt == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN5@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 3805 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 3806 :     ctxt = reader->ctxt;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _ctxt$[ebp], eax

; 3807 : 
; 3808 :     switch (p) {

	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR tv68[ebp], ecx
	mov	edx, DWORD PTR tv68[ebp]
	sub	edx, 1
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 3
	ja	$LN2@xmlTextRea
	mov	eax, DWORD PTR tv68[ebp]
	jmp	DWORD PTR $LN22@xmlTextRea[eax*4]
$LN6@xmlTextRea:

; 3809 :         case XML_PARSER_LOADDTD:
; 3810 : 	    if (value != 0) {

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN7@xmlTextRea

; 3811 : 		if (ctxt->loadsubset == 0) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+276], 0
	jne	SHORT $LN9@xmlTextRea

; 3812 : 		    if (reader->mode != XML_TEXTREADER_MODE_INITIAL)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN10@xmlTextRea

; 3813 : 			return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN10@xmlTextRea:

; 3814 : 		    ctxt->loadsubset = XML_DETECT_IDS;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+276], 2
$LN9@xmlTextRea:

; 3815 : 		}
; 3816 : 	    } else {

	jmp	SHORT $LN8@xmlTextRea
$LN7@xmlTextRea:

; 3817 : 		ctxt->loadsubset = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+276], 0
$LN8@xmlTextRea:

; 3818 : 	    }
; 3819 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN11@xmlTextRea:

; 3820 :         case XML_PARSER_DEFAULTATTRS:
; 3821 : 	    if (value != 0) {

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN12@xmlTextRea

; 3822 : 		ctxt->loadsubset |= XML_COMPLETE_ATTRS;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+276]
	or	eax, 4
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+276], eax

; 3823 : 	    } else {

	jmp	SHORT $LN13@xmlTextRea
$LN12@xmlTextRea:

; 3824 : 		if (ctxt->loadsubset & XML_COMPLETE_ATTRS)

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+276]
	and	eax, 4
	je	SHORT $LN13@xmlTextRea

; 3825 : 		    ctxt->loadsubset -= XML_COMPLETE_ATTRS;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+276]
	sub	edx, 4
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+276], edx
$LN13@xmlTextRea:

; 3826 : 	    }
; 3827 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN15@xmlTextRea:

; 3828 :         case XML_PARSER_VALIDATE:
; 3829 : 	    if (value != 0) {

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN16@xmlTextRea

; 3830 : 		ctxt->validate = 1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+104], 1

; 3831 : 		reader->validate = XML_TEXTREADER_VALIDATE_DTD;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+8], 1

; 3832 : 	    } else {

	jmp	SHORT $LN17@xmlTextRea
$LN16@xmlTextRea:

; 3833 : 		ctxt->validate = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+104], 0
$LN17@xmlTextRea:

; 3834 : 	    }
; 3835 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN18@xmlTextRea:

; 3836 :         case XML_PARSER_SUBST_ENTITIES:
; 3837 : 	    if (value != 0) {

	cmp	DWORD PTR _value$[ebp], 0
	je	SHORT $LN19@xmlTextRea

; 3838 : 		ctxt->replaceEntities = 1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+16], 1

; 3839 : 	    } else {

	jmp	SHORT $LN20@xmlTextRea
$LN19@xmlTextRea:

; 3840 : 		ctxt->replaceEntities = 0;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+16], 0
$LN20@xmlTextRea:

; 3841 : 	    }
; 3842 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3843 :     }
; 3844 :     return(-1);

	or	eax, -1
$LN1@xmlTextRea:

; 3845 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN22@xmlTextRea:
	DD	$LN6@xmlTextRea
	DD	$LN11@xmlTextRea
	DD	$LN15@xmlTextRea
	DD	$LN18@xmlTextRea
_xmlTextReaderSetParserProp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstEncoding
_TEXT	SEGMENT
_doc$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderConstEncoding PROC			; COMDAT

; 2933 : xmlTextReaderConstEncoding(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2934 :     xmlDocPtr doc = NULL;

	mov	DWORD PTR _doc$[ebp], 0

; 2935 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 2936 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 2937 :     if (reader->doc != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN3@xmlTextRea

; 2938 :         doc = reader->doc;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _doc$[ebp], edx
	jmp	SHORT $LN4@xmlTextRea
$LN3@xmlTextRea:

; 2939 :     else if (reader->ctxt != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN4@xmlTextRea

; 2940 : 	doc = reader->ctxt->myDoc;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _doc$[ebp], eax
$LN4@xmlTextRea:

; 2941 :     if (doc == NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN6@xmlTextRea

; 2942 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 2943 : 
; 2944 :     if (doc->encoding == NULL)

	mov	ecx, DWORD PTR _doc$[ebp]
	cmp	DWORD PTR [ecx+60], 0
	jne	SHORT $LN7@xmlTextRea

; 2945 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 2946 :     else
; 2947 :       return(CONSTSTR(doc->encoding));

	push	-1
	mov	edx, DWORD PTR _doc$[ebp]
	mov	eax, DWORD PTR [edx+60]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
$LN1@xmlTextRea:

; 2948 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderConstEncoding ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderNormalization
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderNormalization PROC			; COMDAT

; 3775 : xmlTextReaderNormalization(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3776 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 3777 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3778 :     return(1);

	mov	eax, 1
$LN1@xmlTextRea:

; 3779 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderNormalization ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderMoveToElement
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderMoveToElement PROC			; COMDAT

; 2865 : xmlTextReaderMoveToElement(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2866 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 2867 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 2868 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 2869 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 2870 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN4@xmlTextRea

; 2871 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 2872 :     if (reader->curnode != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN5@xmlTextRea

; 2873 : 	reader->curnode = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 2874 : 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 2875 :     }
; 2876 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 2877 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderMoveToElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderMoveToNextAttribute
_TEXT	SEGMENT
_ns$1 = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderMoveToNextAttribute PROC			; COMDAT

; 2826 : xmlTextReaderMoveToNextAttribute(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2827 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 2828 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 2829 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 2830 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN3@xmlTextRea:

; 2831 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN4@xmlTextRea

; 2832 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 2833 :     if (reader->curnode == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+68], 0
	jne	SHORT $LN5@xmlTextRea

; 2834 : 	return(xmlTextReaderMoveToFirstAttribute(reader));

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderMoveToFirstAttribute
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 2835 : 
; 2836 :     if (reader->curnode->type == XML_NAMESPACE_DECL) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlTextRea

; 2837 : 	xmlNsPtr ns = (xmlNsPtr) reader->curnode;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	DWORD PTR _ns$1[ebp], edx

; 2838 : 	if (ns->next != NULL) {

	mov	eax, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN8@xmlTextRea

; 2839 : 	    reader->curnode = (xmlNodePtr) ns->next;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+68], eax

; 2840 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 2841 : 	}
; 2842 : 	if (reader->node->properties != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+44], 0
	je	SHORT $LN9@xmlTextRea

; 2843 : 	    reader->curnode = (xmlNodePtr) reader->node->properties;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+44]
	mov	DWORD PTR [edx+68], eax

; 2844 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 2845 : 	}
; 2846 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
	jmp	SHORT $LN7@xmlTextRea
$LN6@xmlTextRea:

; 2847 :     } else if ((reader->curnode->type == XML_ATTRIBUTE_NODE) &&

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	cmp	DWORD PTR [edx+4], 2
	jne	SHORT $LN7@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	cmp	DWORD PTR [ecx+24], 0
	je	SHORT $LN7@xmlTextRea

; 2848 : 	       (reader->curnode->next != NULL)) {
; 2849 : 	reader->curnode = reader->curnode->next;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+68], edx

; 2850 : 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 2851 :     }
; 2852 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 2853 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderMoveToNextAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderMoveToFirstAttribute
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderMoveToFirstAttribute PROC			; COMDAT

; 2797 : xmlTextReaderMoveToFirstAttribute(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2798 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 2799 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 2800 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 2801 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 2802 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN4@xmlTextRea

; 2803 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 2804 : 
; 2805 :     if (reader->node->nsDef != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+48], 0
	je	SHORT $LN5@xmlTextRea

; 2806 : 	reader->curnode = (xmlNodePtr) reader->node->nsDef;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+48]
	mov	DWORD PTR [ecx+68], edx

; 2807 : 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 2808 :     }
; 2809 :     if (reader->node->properties != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+44], 0
	je	SHORT $LN6@xmlTextRea

; 2810 : 	reader->curnode = (xmlNodePtr) reader->node->properties;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+44]
	mov	DWORD PTR [ecx+68], edx

; 2811 : 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 2812 :     }
; 2813 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 2814 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderMoveToFirstAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderMoveToAttributeNs
_TEXT	SEGMENT
_prefix$ = -16						; size = 4
_ns$ = -12						; size = 4
_node$ = -8						; size = 4
_prop$ = -4						; size = 4
_reader$ = 8						; size = 4
_localName$ = 12					; size = 4
_namespaceURI$ = 16					; size = 4
_xmlTextReaderMoveToAttributeNs PROC			; COMDAT

; 2739 : 	const xmlChar *localName, const xmlChar *namespaceURI) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2740 :     xmlAttrPtr prop;
; 2741 :     xmlNodePtr node;
; 2742 :     xmlNsPtr ns;
; 2743 :     xmlChar *prefix = NULL;

	mov	DWORD PTR _prefix$[ebp], 0

; 2744 : 
; 2745 :     if ((reader == NULL) || (localName == NULL) || (namespaceURI == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN7@xmlTextRea
	cmp	DWORD PTR _localName$[ebp], 0
	je	SHORT $LN7@xmlTextRea
	cmp	DWORD PTR _namespaceURI$[ebp], 0
	jne	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 2746 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN6@xmlTextRea:

; 2747 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN8@xmlTextRea

; 2748 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN8@xmlTextRea:

; 2749 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN9@xmlTextRea

; 2750 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 2751 :     node = reader->node;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _node$[ebp], ecx

; 2752 : 
; 2753 :     if (xmlStrEqual(namespaceURI, BAD_CAST "http://www.w3.org/2000/xmlns/")) {

	push	OFFSET ??_C@_0BO@GBJIDPIB@http?3?1?1www?4w3?4org?12000?1xmlns?1@
	mov	edx, DWORD PTR _namespaceURI$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN10@xmlTextRea

; 2754 : 		if (! xmlStrEqual(localName, BAD_CAST "xmlns")) {

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _localName$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN11@xmlTextRea

; 2755 : 			prefix = BAD_CAST localName;

	mov	ecx, DWORD PTR _localName$[ebp]
	mov	DWORD PTR _prefix$[ebp], ecx
$LN11@xmlTextRea:

; 2756 : 		}
; 2757 : 		ns = reader->node->nsDef;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR _ns$[ebp], ecx
$LN2@xmlTextRea:

; 2758 : 		while (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 2759 : 			if ((prefix == NULL && ns->prefix == NULL) ||

	cmp	DWORD PTR _prefix$[ebp], 0
	jne	SHORT $LN14@xmlTextRea
	mov	edx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN13@xmlTextRea
$LN14@xmlTextRea:
	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN12@xmlTextRea
	mov	ecx, DWORD PTR _localName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@xmlTextRea
$LN13@xmlTextRea:

; 2760 : 				((ns->prefix != NULL) && (xmlStrEqual(ns->prefix, localName)))) {
; 2761 : 				reader->curnode = (xmlNodePtr) ns;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _ns$[ebp]
	mov	DWORD PTR [ecx+68], edx

; 2762 : 				return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN12@xmlTextRea:

; 2763 : 			}
; 2764 : 			ns = ns->next;

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ns$[ebp], ecx

; 2765 : 		}

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 2766 : 		return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN10@xmlTextRea:

; 2767 :     }
; 2768 : 
; 2769 :     prop = node->properties;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _prop$[ebp], eax
$LN4@xmlTextRea:

; 2770 :     while (prop != NULL) {

	cmp	DWORD PTR _prop$[ebp], 0
	je	SHORT $LN5@xmlTextRea

; 2771 : 	/*
; 2772 : 	 * One need to have
; 2773 : 	 *   - same attribute names
; 2774 : 	 *   - and the attribute carrying that namespace
; 2775 : 	 */
; 2776 :         if (xmlStrEqual(prop->name, localName) &&

	mov	ecx, DWORD PTR _localName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlTextRea
	mov	ecx, DWORD PTR _prop$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN15@xmlTextRea
	mov	edx, DWORD PTR _namespaceURI$[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlTextRea

; 2777 : 	    ((prop->ns != NULL) &&
; 2778 : 	     (xmlStrEqual(prop->ns->href, namespaceURI)))) {
; 2779 : 	    reader->curnode = (xmlNodePtr) prop;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	DWORD PTR [eax+68], ecx

; 2780 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN15@xmlTextRea:

; 2781 :         }
; 2782 : 	prop = prop->next;

	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _prop$[ebp], eax

; 2783 :     }

	jmp	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 2784 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 2785 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderMoveToAttributeNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderMoveToAttribute
_TEXT	SEGMENT
_prop$ = -24						; size = 4
_ns$ = -20						; size = 4
_localname$ = -16					; size = 4
_prefix$ = -8						; size = 4
_reader$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlTextReaderMoveToAttribute PROC			; COMDAT

; 2634 : xmlTextReaderMoveToAttribute(xmlTextReaderPtr reader, const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2635 :     xmlChar *prefix = NULL;

	mov	DWORD PTR _prefix$[ebp], 0

; 2636 :     xmlChar *localname;
; 2637 :     xmlNsPtr ns;
; 2638 :     xmlAttrPtr prop;
; 2639 : 
; 2640 :     if ((reader == NULL) || (name == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN11@xmlTextRea
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN10@xmlTextRea
$LN11@xmlTextRea:

; 2641 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN10@xmlTextRea:

; 2642 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN12@xmlTextRea

; 2643 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN12@xmlTextRea:

; 2644 : 
; 2645 :     /* TODO: handle the xmlDecl */
; 2646 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN13@xmlTextRea

; 2647 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN13@xmlTextRea:

; 2648 : 
; 2649 :     localname = xmlSplitQName2(name, &prefix);

	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	_xmlSplitQName2
	add	esp, 8
	mov	DWORD PTR _localname$[ebp], eax

; 2650 :     if (localname == NULL) {

	cmp	DWORD PTR _localname$[ebp], 0
	jne	$LN14@xmlTextRea

; 2651 : 	/*
; 2652 : 	 * Namespace default decl
; 2653 : 	 */
; 2654 : 	if (xmlStrEqual(name, BAD_CAST "xmlns")) {

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlTextRea

; 2655 : 	    ns = reader->node->nsDef;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _ns$[ebp], edx
$LN2@xmlTextRea:

; 2656 : 	    while (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 2657 : 		if (ns->prefix == NULL) {

	mov	eax, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN16@xmlTextRea

; 2658 : 		    reader->curnode = (xmlNodePtr) ns;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _ns$[ebp]
	mov	DWORD PTR [ecx+68], edx

; 2659 : 		    return(1);

	mov	eax, 1
	jmp	$LN1@xmlTextRea
$LN16@xmlTextRea:

; 2660 : 		}
; 2661 : 		ns = ns->next;

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ns$[ebp], ecx

; 2662 : 	    }

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 2663 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN15@xmlTextRea:

; 2664 : 	}
; 2665 : 
; 2666 : 	prop = reader->node->properties;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _prop$[ebp], ecx
$LN4@xmlTextRea:

; 2667 : 	while (prop != NULL) {

	cmp	DWORD PTR _prop$[ebp], 0
	je	SHORT $LN5@xmlTextRea

; 2668 : 	    /*
; 2669 : 	     * One need to have
; 2670 : 	     *   - same attribute names
; 2671 : 	     *   - and the attribute carrying that namespace
; 2672 : 	     */
; 2673 : 	    if ((xmlStrEqual(prop->name, name)) &&

	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN17@xmlTextRea
	mov	edx, DWORD PTR _prop$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN18@xmlTextRea
	mov	eax, DWORD PTR _prop$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN17@xmlTextRea
$LN18@xmlTextRea:

; 2674 : 		((prop->ns == NULL) || (prop->ns->prefix == NULL))) {
; 2675 : 		reader->curnode = (xmlNodePtr) prop;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _prop$[ebp]
	mov	DWORD PTR [edx+68], eax

; 2676 : 		return(1);

	mov	eax, 1
	jmp	$LN1@xmlTextRea
$LN17@xmlTextRea:

; 2677 : 	    }
; 2678 : 	    prop = prop->next;

	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _prop$[ebp], edx

; 2679 : 	}

	jmp	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 2680 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN14@xmlTextRea:

; 2681 :     }
; 2682 : 
; 2683 :     /*
; 2684 :      * Namespace default decl
; 2685 :      */
; 2686 :     if (xmlStrEqual(prefix, BAD_CAST "xmlns")) {

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN19@xmlTextRea

; 2687 : 	ns = reader->node->nsDef;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _ns$[ebp], eax
$LN6@xmlTextRea:

; 2688 : 	while (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN7@xmlTextRea

; 2689 : 	    if ((ns->prefix != NULL) && (xmlStrEqual(ns->prefix, localname))) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN20@xmlTextRea
	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN20@xmlTextRea

; 2690 : 		reader->curnode = (xmlNodePtr) ns;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _ns$[ebp]
	mov	DWORD PTR [edx+68], eax

; 2691 : 		goto found;

	jmp	$found$30
$LN20@xmlTextRea:

; 2692 : 	    }
; 2693 : 	    ns = ns->next;

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ns$[ebp], edx

; 2694 : 	}

	jmp	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 2695 : 	goto not_found;

	jmp	SHORT $not_found$31
$LN19@xmlTextRea:

; 2696 :     }
; 2697 :     prop = reader->node->properties;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+44]
	mov	DWORD PTR _prop$[ebp], edx
$LN8@xmlTextRea:

; 2698 :     while (prop != NULL) {

	cmp	DWORD PTR _prop$[ebp], 0
	je	SHORT $not_found$31

; 2699 : 	/*
; 2700 : 	 * One need to have
; 2701 : 	 *   - same attribute names
; 2702 : 	 *   - and the attribute carrying that namespace
; 2703 : 	 */
; 2704 : 	if ((xmlStrEqual(prop->name, localname)) &&
; 2705 : 	    (prop->ns != NULL) && (xmlStrEqual(prop->ns->prefix, prefix))) {

	mov	eax, DWORD PTR _localname$[ebp]
	push	eax
	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@xmlTextRea
	mov	eax, DWORD PTR _prop$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN21@xmlTextRea
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _prop$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN21@xmlTextRea

; 2706 : 	    reader->curnode = (xmlNodePtr) prop;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _prop$[ebp]
	mov	DWORD PTR [edx+68], eax

; 2707 : 	    goto found;

	jmp	SHORT $found$30
$LN21@xmlTextRea:

; 2708 : 	}
; 2709 : 	prop = prop->next;

	mov	ecx, DWORD PTR _prop$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _prop$[ebp], edx

; 2710 :     }

	jmp	SHORT $LN8@xmlTextRea
$not_found$31:

; 2711 : not_found:
; 2712 :     if (localname != NULL)

	cmp	DWORD PTR _localname$[ebp], 0
	je	SHORT $LN22@xmlTextRea

; 2713 :         xmlFree(localname);

	mov	esi, esp
	mov	eax, DWORD PTR _localname$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN22@xmlTextRea:

; 2714 :     if (prefix != NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN23@xmlTextRea

; 2715 :         xmlFree(prefix);

	mov	esi, esp
	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@xmlTextRea:

; 2716 :     return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$found$30:

; 2717 : 
; 2718 : found:
; 2719 :     if (localname != NULL)

	cmp	DWORD PTR _localname$[ebp], 0
	je	SHORT $LN24@xmlTextRea

; 2720 :         xmlFree(localname);

	mov	esi, esp
	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN24@xmlTextRea:

; 2721 :     if (prefix != NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN25@xmlTextRea

; 2722 :         xmlFree(prefix);

	mov	esi, esp
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN25@xmlTextRea:

; 2723 :     return(1);

	mov	eax, 1
$LN1@xmlTextRea:

; 2724 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@xmlTextRea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN29@xmlTextRea:
	DD	1
	DD	$LN28@xmlTextRea
$LN28@xmlTextRea:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN27@xmlTextRea
$LN27@xmlTextRea:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlTextReaderMoveToAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderMoveToAttributeNo
_TEXT	SEGMENT
_ns$ = -12						; size = 4
_cur$ = -8						; size = 4
_i$ = -4						; size = 4
_reader$ = 8						; size = 4
_no$ = 12						; size = 4
_xmlTextReaderMoveToAttributeNo PROC			; COMDAT

; 2585 : xmlTextReaderMoveToAttributeNo(xmlTextReaderPtr reader, int no) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2586 :     int i;
; 2587 :     xmlAttrPtr cur;
; 2588 :     xmlNsPtr ns;
; 2589 : 
; 2590 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN8@xmlTextRea

; 2591 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN8@xmlTextRea:

; 2592 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN9@xmlTextRea

; 2593 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 2594 :     /* TODO: handle the xmlDecl */
; 2595 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN10@xmlTextRea

; 2596 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN10@xmlTextRea:

; 2597 : 
; 2598 :     reader->curnode = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+68], 0

; 2599 : 
; 2600 :     ns = reader->node->nsDef;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _ns$[ebp], eax

; 2601 :     for (i = 0;(i < no) && (ns != NULL);i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlTextRea
$LN2@xmlTextRea:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlTextRea:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _no$[ebp]
	jge	SHORT $LN3@xmlTextRea
	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 2602 : 	ns = ns->next;

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ns$[ebp], ecx

; 2603 :     }

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 2604 :     if (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN11@xmlTextRea

; 2605 : 	reader->curnode = (xmlNodePtr) ns;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _ns$[ebp]
	mov	DWORD PTR [edx+68], eax

; 2606 : 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN11@xmlTextRea:

; 2607 :     }
; 2608 : 
; 2609 :     cur = reader->node->properties;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _cur$[ebp], eax

; 2610 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN12@xmlTextRea

; 2611 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN12@xmlTextRea:

; 2612 :     for (;i < no;i++) {

	jmp	SHORT $LN7@xmlTextRea
$LN5@xmlTextRea:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@xmlTextRea:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _no$[ebp]
	jge	SHORT $LN6@xmlTextRea

; 2613 : 	cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx

; 2614 : 	if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN13@xmlTextRea

; 2615 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN13@xmlTextRea:

; 2616 :     }

	jmp	SHORT $LN5@xmlTextRea
$LN6@xmlTextRea:

; 2617 :     /* TODO walk the DTD if present */
; 2618 : 
; 2619 :     reader->curnode = (xmlNodePtr) cur;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+68], eax

; 2620 :     return(1);

	mov	eax, 1
$LN1@xmlTextRea:

; 2621 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderMoveToAttributeNo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderLookupNamespace
_TEXT	SEGMENT
_ns$ = -4						; size = 4
_reader$ = 8						; size = 4
_prefix$ = 12						; size = 4
_xmlTextReaderLookupNamespace PROC			; COMDAT

; 2559 : xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2560 :     xmlNsPtr ns;
; 2561 : 
; 2562 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 2563 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 2564 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 2565 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 2566 : 
; 2567 :     ns = xmlSearchNs(reader->node->doc, reader->node, prefix);

	mov	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ns$[ebp], eax

; 2568 :     if (ns == NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 2569 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 2570 :     return(xmlStrdup(ns->href));

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrdup
	add	esp, 4
$LN1@xmlTextRea:

; 2571 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderLookupNamespace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGetRemainder
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderGetRemainder PROC				; COMDAT

; 2511 : xmlTextReaderGetRemainder(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2512 :     xmlParserInputBufferPtr ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 2513 : 
; 2514 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 2515 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 2516 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 2517 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN3@xmlTextRea:

; 2518 : 
; 2519 :     reader->node = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+64], 0

; 2520 :     reader->curnode = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+68], 0

; 2521 :     reader->mode = XML_TEXTREADER_MODE_EOF;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax], 3

; 2522 :     if (reader->ctxt != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN4@xmlTextRea

; 2523 : 	xmlStopParser(reader->ctxt);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_xmlStopParser
	add	esp, 4

; 2524 : 	if (reader->ctxt->myDoc != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN4@xmlTextRea

; 2525 : 	    if (reader->preserve == 0)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN6@xmlTextRea

; 2526 : 		xmlTextReaderFreeDoc(reader, reader->ctxt->myDoc);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderFreeDoc
	add	esp, 8
$LN6@xmlTextRea:

; 2527 : 	    reader->ctxt->myDoc = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+8], 0
$LN4@xmlTextRea:

; 2528 : 	}
; 2529 :     }
; 2530 :     if (reader->allocs & XML_TEXTREADER_INPUT) {

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 1
	je	SHORT $LN7@xmlTextRea

; 2531 : 	ret = reader->input;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _ret$[ebp], ecx

; 2532 : 	reader->input = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+28], 0

; 2533 : 	reader->allocs -= XML_TEXTREADER_INPUT;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	sub	ecx, 1
	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 2534 :     } else {

	jmp	SHORT $LN8@xmlTextRea
$LN7@xmlTextRea:

; 2535 : 	/*
; 2536 : 	 * Hum, one may need to duplicate the data structure because
; 2537 : 	 * without reference counting the input may be freed twice:
; 2538 : 	 *   - by the layer which allocated it.
; 2539 : 	 *   - by the layer to which would have been returned to.
; 2540 : 	 */
; 2541 : 	TODO

	mov	esi, esp
	push	2541					; 000009edH
	push	OFFSET ??_C@_0GL@PIJMIJNC@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2542 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 2543 :     }
; 2544 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 2545 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderGetRemainder ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGetAttributeNs
_TEXT	SEGMENT
_ns$ = -8						; size = 4
_prefix$ = -4						; size = 4
_reader$ = 8						; size = 4
_localName$ = 12					; size = 4
_namespaceURI$ = 16					; size = 4
_xmlTextReaderGetAttributeNs PROC			; COMDAT

; 2462 : 			    const xmlChar *namespaceURI) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2463 :     xmlChar *prefix = NULL;

	mov	DWORD PTR _prefix$[ebp], 0

; 2464 :     xmlNsPtr ns;
; 2465 : 
; 2466 :     if ((reader == NULL) || (localName == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN5@xmlTextRea
	cmp	DWORD PTR _localName$[ebp], 0
	jne	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 2467 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 2468 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN6@xmlTextRea

; 2469 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN6@xmlTextRea:

; 2470 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN7@xmlTextRea

; 2471 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN7@xmlTextRea:

; 2472 : 
; 2473 :     /* TODO: handle the xmlDecl */
; 2474 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN8@xmlTextRea

; 2475 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN8@xmlTextRea:

; 2476 : 
; 2477 :     if (xmlStrEqual(namespaceURI, BAD_CAST "http://www.w3.org/2000/xmlns/")) {

	push	OFFSET ??_C@_0BO@GBJIDPIB@http?3?1?1www?4w3?4org?12000?1xmlns?1@
	mov	ecx, DWORD PTR _namespaceURI$[ebp]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN9@xmlTextRea

; 2478 : 		if (! xmlStrEqual(localName, BAD_CAST "xmlns")) {

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _localName$[ebp]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@xmlTextRea

; 2479 : 			prefix = BAD_CAST localName;

	mov	eax, DWORD PTR _localName$[ebp]
	mov	DWORD PTR _prefix$[ebp], eax
$LN10@xmlTextRea:

; 2480 : 		}
; 2481 : 		ns = reader->node->nsDef;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _ns$[ebp], eax
$LN2@xmlTextRea:

; 2482 : 		while (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 2483 : 			if ((prefix == NULL && ns->prefix == NULL) ||

	cmp	DWORD PTR _prefix$[ebp], 0
	jne	SHORT $LN13@xmlTextRea
	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN12@xmlTextRea
$LN13@xmlTextRea:
	mov	edx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN11@xmlTextRea
	mov	eax, DWORD PTR _localName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN11@xmlTextRea
$LN12@xmlTextRea:

; 2484 : 				((ns->prefix != NULL) && (xmlStrEqual(ns->prefix, localName)))) {
; 2485 : 				return xmlStrdup(ns->href);

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN11@xmlTextRea:

; 2486 : 			}
; 2487 : 			ns = ns->next;

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _ns$[ebp], eax

; 2488 : 		}

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 2489 : 		return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 2490 :     }
; 2491 : 
; 2492 :     return(xmlGetNsProp(reader->node, localName, namespaceURI));

	mov	ecx, DWORD PTR _namespaceURI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _localName$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_xmlGetNsProp
	add	esp, 12					; 0000000cH
$LN1@xmlTextRea:

; 2493 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderGetAttributeNs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGetAttribute
_TEXT	SEGMENT
_ret$ = -24						; size = 4
_ns$ = -20						; size = 4
_localname$ = -16					; size = 4
_prefix$ = -8						; size = 4
_reader$ = 8						; size = 4
_name$ = 12						; size = 4
_xmlTextReaderGetAttribute PROC				; COMDAT

; 2389 : xmlTextReaderGetAttribute(xmlTextReaderPtr reader, const xmlChar *name) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2390 :     xmlChar *prefix = NULL;

	mov	DWORD PTR _prefix$[ebp], 0

; 2391 :     xmlChar *localname;
; 2392 :     xmlNsPtr ns;
; 2393 :     xmlChar *ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 2394 : 
; 2395 :     if ((reader == NULL) || (name == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN7@xmlTextRea
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 2396 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN6@xmlTextRea:

; 2397 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN8@xmlTextRea

; 2398 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN8@xmlTextRea:

; 2399 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN9@xmlTextRea

; 2400 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 2401 : 
; 2402 :     /* TODO: handle the xmlDecl */
; 2403 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN10@xmlTextRea

; 2404 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN10@xmlTextRea:

; 2405 : 
; 2406 :     localname = xmlSplitQName2(name, &prefix);

	lea	ecx, DWORD PTR _prefix$[ebp]
	push	ecx
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	call	_xmlSplitQName2
	add	esp, 8
	mov	DWORD PTR _localname$[ebp], eax

; 2407 :     if (localname == NULL) {

	cmp	DWORD PTR _localname$[ebp], 0
	jne	SHORT $LN11@xmlTextRea

; 2408 : 		/*
; 2409 : 		 * Namespace default decl
; 2410 : 		 */
; 2411 : 		if (xmlStrEqual(name, BAD_CAST "xmlns")) {

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN12@xmlTextRea

; 2412 : 			ns = reader->node->nsDef;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _ns$[ebp], eax
$LN2@xmlTextRea:

; 2413 : 			while (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 2414 : 				if (ns->prefix == NULL) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN13@xmlTextRea

; 2415 : 					return(xmlStrdup(ns->href));

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN13@xmlTextRea:

; 2416 : 				}
; 2417 : 				ns = ns->next;

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ns$[ebp], edx

; 2418 : 			}

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 2419 : 			return NULL;

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN12@xmlTextRea:

; 2420 : 		}
; 2421 : 		return(xmlGetNoNsProp(reader->node, name));

	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	_xmlGetNoNsProp
	add	esp, 8
	jmp	$LN1@xmlTextRea
$LN11@xmlTextRea:

; 2422 : 	}
; 2423 : 
; 2424 :     /*
; 2425 :      * Namespace default decl
; 2426 :      */
; 2427 :     if (xmlStrEqual(prefix, BAD_CAST "xmlns")) {

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN14@xmlTextRea

; 2428 : 		ns = reader->node->nsDef;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _ns$[ebp], eax
$LN4@xmlTextRea:

; 2429 : 		while (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN5@xmlTextRea

; 2430 : 			if ((ns->prefix != NULL) && (xmlStrEqual(ns->prefix, localname))) {

	mov	ecx, DWORD PTR _ns$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN16@xmlTextRea
	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN16@xmlTextRea

; 2431 : 				ret = xmlStrdup(ns->href);

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 2432 : 				break;

	jmp	SHORT $LN5@xmlTextRea
$LN16@xmlTextRea:

; 2433 : 			}
; 2434 : 			ns = ns->next;

	mov	ecx, DWORD PTR _ns$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _ns$[ebp], edx

; 2435 : 		}

	jmp	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 2436 :     } else {

	jmp	SHORT $LN15@xmlTextRea
$LN14@xmlTextRea:

; 2437 : 		ns = xmlSearchNs(reader->node->doc, reader->node, prefix);

	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+32]
	push	edx
	call	_xmlSearchNs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ns$[ebp], eax

; 2438 : 		if (ns != NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN15@xmlTextRea

; 2439 : 			ret = xmlGetNsProp(reader->node, localname, ns->href);

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_xmlGetNsProp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax
$LN15@xmlTextRea:

; 2440 : 	}
; 2441 : 
; 2442 :     xmlFree(localname);

	mov	esi, esp
	mov	edx, DWORD PTR _localname$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2443 :     if (prefix != NULL)

	cmp	DWORD PTR _prefix$[ebp], 0
	je	SHORT $LN18@xmlTextRea

; 2444 :         xmlFree(prefix);

	mov	esi, esp
	mov	eax, DWORD PTR _prefix$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN18@xmlTextRea:

; 2445 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 2446 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@xmlTextRea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN22@xmlTextRea:
	DD	1
	DD	$LN21@xmlTextRea
$LN21@xmlTextRea:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN20@xmlTextRea
$LN20@xmlTextRea:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
_xmlTextReaderGetAttribute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderGetAttributeNo
_TEXT	SEGMENT
_ns$ = -16						; size = 4
_cur$ = -12						; size = 4
_i$ = -8						; size = 4
_ret$ = -4						; size = 4
_reader$ = 8						; size = 4
_no$ = 12						; size = 4
_xmlTextReaderGetAttributeNo PROC			; COMDAT

; 2340 : xmlTextReaderGetAttributeNo(xmlTextReaderPtr reader, int no) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2341 :     xmlChar *ret;
; 2342 :     int i;
; 2343 :     xmlAttrPtr cur;
; 2344 :     xmlNsPtr ns;
; 2345 : 
; 2346 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN8@xmlTextRea

; 2347 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN8@xmlTextRea:

; 2348 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN9@xmlTextRea

; 2349 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 2350 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN10@xmlTextRea

; 2351 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN10@xmlTextRea:

; 2352 :     /* TODO: handle the xmlDecl */
; 2353 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN11@xmlTextRea

; 2354 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN11@xmlTextRea:

; 2355 : 
; 2356 :     ns = reader->node->nsDef;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _ns$[ebp], eax

; 2357 :     for (i = 0;(i < no) && (ns != NULL);i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlTextRea
$LN2@xmlTextRea:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@xmlTextRea:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _no$[ebp]
	jge	SHORT $LN3@xmlTextRea
	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 2358 : 	ns = ns->next;

	mov	eax, DWORD PTR _ns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ns$[ebp], ecx

; 2359 :     }

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 2360 :     if (ns != NULL)

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN12@xmlTextRea

; 2361 : 	return(xmlStrdup(ns->href));

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN12@xmlTextRea:

; 2362 : 
; 2363 :     cur = reader->node->properties;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+44]
	mov	DWORD PTR _cur$[ebp], eax

; 2364 :     if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN13@xmlTextRea

; 2365 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN13@xmlTextRea:

; 2366 :     for (;i < no;i++) {

	jmp	SHORT $LN7@xmlTextRea
$LN5@xmlTextRea:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN7@xmlTextRea:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _no$[ebp]
	jge	SHORT $LN6@xmlTextRea

; 2367 : 	cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx

; 2368 : 	if (cur == NULL)

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN14@xmlTextRea

; 2369 : 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN14@xmlTextRea:

; 2370 :     }

	jmp	SHORT $LN5@xmlTextRea
$LN6@xmlTextRea:

; 2371 :     /* TODO walk the DTD if present */
; 2372 : 
; 2373 :     ret = xmlNodeListGetString(reader->node->doc, cur->children, 1);

	push	1
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+32]
	push	eax
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 2374 :     if (ret == NULL) return(xmlStrdup((xmlChar *)""));

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN15@xmlTextRea
	push	OFFSET ??_C@_00CNPNBAHC@@
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN15@xmlTextRea:

; 2375 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 2376 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderGetAttributeNo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderClose
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderClose PROC				; COMDAT

; 2307 : xmlTextReaderClose(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2308 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 2309 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 2310 :     reader->node = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+64], 0

; 2311 :     reader->curnode = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 2312 :     reader->mode = XML_TEXTREADER_MODE_CLOSED;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx], 4

; 2313 :     if (reader->ctxt != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN3@xmlTextRea

; 2314 : 	xmlStopParser(reader->ctxt);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_xmlStopParser
	add	esp, 4

; 2315 : 	if (reader->ctxt->myDoc != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN3@xmlTextRea

; 2316 : 	    if (reader->preserve == 0)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+80], 0
	jne	SHORT $LN5@xmlTextRea

; 2317 : 		xmlTextReaderFreeDoc(reader, reader->ctxt->myDoc);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderFreeDoc
	add	esp, 8
$LN5@xmlTextRea:

; 2318 : 	    reader->ctxt->myDoc = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+8], 0
$LN3@xmlTextRea:

; 2319 : 	}
; 2320 :     }
; 2321 :     if ((reader->input != NULL)  && (reader->allocs & XML_TEXTREADER_INPUT)) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN6@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 1
	je	SHORT $LN6@xmlTextRea

; 2322 : 	xmlFreeParserInputBuffer(reader->input);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	call	_xmlFreeParserInputBuffer
	add	esp, 4

; 2323 : 	reader->allocs -= XML_TEXTREADER_INPUT;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN6@xmlTextRea:

; 2324 :     }
; 2325 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 2326 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderClose ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderValue
_TEXT	SEGMENT
tv72 = -12						; size = 4
_attr$1 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderValue PROC				; COMDAT

; 3564 : xmlTextReaderValue(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3565 :     xmlNodePtr node;
; 3566 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 3567 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 3568 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN5@xmlTextRea

; 3569 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 3570 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN6@xmlTextRea

; 3571 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN7@xmlTextRea
$LN6@xmlTextRea:

; 3572 :     else
; 3573 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN7@xmlTextRea:

; 3574 : 
; 3575 :     switch (node->type) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	sub	edx, 2
	mov	DWORD PTR tv72[ebp], edx
	cmp	DWORD PTR tv72[ebp], 16			; 00000010H
	ja	$LN2@xmlTextRea
	mov	eax, DWORD PTR tv72[ebp]
	movzx	ecx, BYTE PTR $LN16@xmlTextRea[eax]
	jmp	DWORD PTR $LN17@xmlTextRea[ecx*4]
$LN8@xmlTextRea:

; 3576 :         case XML_NAMESPACE_DECL:
; 3577 : 	    return(xmlStrdup(((xmlNsPtr) node)->href));

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 3578 :         case XML_ATTRIBUTE_NODE:{
; 3579 : 	    xmlAttrPtr attr = (xmlAttrPtr) node;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _attr$1[ebp], ecx

; 3580 : 
; 3581 : 	    if (attr->parent != NULL)

	mov	edx, DWORD PTR _attr$1[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN10@xmlTextRea

; 3582 : 		return (xmlNodeListGetString

	push	1
	mov	eax, DWORD PTR _attr$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _attr$1[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
	jmp	SHORT $LN11@xmlTextRea
$LN10@xmlTextRea:

; 3583 : 			(attr->parent->doc, attr->children, 1));
; 3584 : 	    else
; 3585 : 		return (xmlNodeListGetString(NULL, attr->children, 1));

	push	1
	mov	edx, DWORD PTR _attr$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	push	0
	call	_xmlNodeListGetString
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN11@xmlTextRea:

; 3586 : 	    break;

	jmp	SHORT $LN2@xmlTextRea
$LN12@xmlTextRea:

; 3587 : 	}
; 3588 :         case XML_TEXT_NODE:
; 3589 :         case XML_CDATA_SECTION_NODE:
; 3590 :         case XML_PI_NODE:
; 3591 :         case XML_COMMENT_NODE:
; 3592 :             if (node->content != NULL)

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN2@xmlTextRea

; 3593 :                 return (xmlStrdup(node->content));

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3594 : 	default:
; 3595 : 	    break;
; 3596 :     }
; 3597 :     return(NULL);

	xor	eax, eax
$LN1@xmlTextRea:

; 3598 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN17@xmlTextRea:
	DD	$LN9@xmlTextRea
	DD	$LN12@xmlTextRea
	DD	$LN8@xmlTextRea
	DD	$LN2@xmlTextRea
$LN16@xmlTextRea:
	DB	0
	DB	1
	DB	1
	DB	3
	DB	3
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
_xmlTextReaderValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderXmlLang
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderXmlLang PROC				; COMDAT

; 3711 : xmlTextReaderXmlLang(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3712 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 3713 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3714 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 3715 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 3716 :     return(xmlNodeGetLang(reader->node));

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	_xmlNodeGetLang
	add	esp, 4
$LN1@xmlTextRea:

; 3717 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderXmlLang ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderPrefix
_TEXT	SEGMENT
_ns$1 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderPrefix PROC				; COMDAT

; 3319 : xmlTextReaderPrefix(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3320 :     xmlNodePtr node;
; 3321 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3322 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 3323 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN4@xmlTextRea

; 3324 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN5@xmlTextRea
$LN4@xmlTextRea:

; 3325 :     else
; 3326 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN5@xmlTextRea:

; 3327 :     if (node->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlTextRea

; 3328 : 	xmlNsPtr ns = (xmlNsPtr) node;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _ns$1[ebp], ecx

; 3329 : 	if (ns->prefix == NULL)

	mov	edx, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN7@xmlTextRea

; 3330 : 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 3331 : 	return(xmlStrdup(BAD_CAST "xmlns"));

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 3332 :     }
; 3333 :     if ((node->type != XML_ELEMENT_NODE) &&

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN8@xmlTextRea
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	je	SHORT $LN8@xmlTextRea

; 3334 : 	(node->type != XML_ATTRIBUTE_NODE))
; 3335 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 3336 :     if ((node->ns != NULL) && (node->ns->prefix != NULL))

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN9@xmlTextRea
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN9@xmlTextRea

; 3337 : 	return(xmlStrdup(node->ns->prefix));

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 3338 :     return(NULL);

	xor	eax, eax
$LN1@xmlTextRea:

; 3339 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderPrefix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderNamespaceUri
_TEXT	SEGMENT
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderNamespaceUri PROC				; COMDAT

; 3383 : xmlTextReaderNamespaceUri(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3384 :     xmlNodePtr node;
; 3385 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3386 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3387 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN4@xmlTextRea

; 3388 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN5@xmlTextRea
$LN4@xmlTextRea:

; 3389 :     else
; 3390 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN5@xmlTextRea:

; 3391 :     if (node->type == XML_NAMESPACE_DECL)

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlTextRea

; 3392 : 	return(xmlStrdup(BAD_CAST "http://www.w3.org/2000/xmlns/"));

	push	OFFSET ??_C@_0BO@GBJIDPIB@http?3?1?1www?4w3?4org?12000?1xmlns?1@
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 3393 :     if ((node->type != XML_ELEMENT_NODE) &&

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	je	SHORT $LN7@xmlTextRea
	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+4], 2
	je	SHORT $LN7@xmlTextRea

; 3394 : 	(node->type != XML_ATTRIBUTE_NODE))
; 3395 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 3396 :     if (node->ns != NULL)

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN8@xmlTextRea

; 3397 : 	return(xmlStrdup(node->ns->href));

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 3398 :     return(NULL);

	xor	eax, eax
$LN1@xmlTextRea:

; 3399 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderNamespaceUri ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderName
_TEXT	SEGMENT
tv72 = -16						; size = 4
_ns$1 = -12						; size = 4
_ret$ = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderName PROC					; COMDAT

; 3175 : xmlTextReaderName(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3176 :     xmlNodePtr node;
; 3177 :     xmlChar *ret;
; 3178 : 
; 3179 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN5@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 3180 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 3181 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN6@xmlTextRea

; 3182 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN7@xmlTextRea
$LN6@xmlTextRea:

; 3183 :     else
; 3184 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN7@xmlTextRea:

; 3185 :     switch (node->type) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	sub	edx, 1
	mov	DWORD PTR tv72[ebp], edx
	cmp	DWORD PTR tv72[ebp], 20			; 00000014H
	ja	$LN2@xmlTextRea
	mov	eax, DWORD PTR tv72[ebp]
	movzx	ecx, BYTE PTR $LN24@xmlTextRea[eax]
	jmp	DWORD PTR $LN25@xmlTextRea[ecx*4]
$LN8@xmlTextRea:

; 3186 :         case XML_ELEMENT_NODE:
; 3187 :         case XML_ATTRIBUTE_NODE:
; 3188 : 	    if ((node->ns == NULL) ||

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN10@xmlTextRea
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN9@xmlTextRea
$LN10@xmlTextRea:

; 3189 : 		(node->ns->prefix == NULL))
; 3190 : 		return(xmlStrdup(node->name));

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 3191 : 
; 3192 : 	    ret = xmlStrdup(node->ns->prefix);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 3193 : 	    ret = xmlStrcat(ret, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 3194 : 	    ret = xmlStrcat(ret, node->name);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 3195 : 	    return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlTextRea
$LN11@xmlTextRea:

; 3196 :         case XML_TEXT_NODE:
; 3197 : 	    return(xmlStrdup(BAD_CAST "#text"));

	push	OFFSET ??_C@_05NOBOONOA@?$CDtext@
	call	_xmlStrdup
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN12@xmlTextRea:

; 3198 :         case XML_CDATA_SECTION_NODE:
; 3199 : 	    return(xmlStrdup(BAD_CAST "#cdata-section"));

	push	OFFSET ??_C@_0P@LIENAFBO@?$CDcdata?9section@
	call	_xmlStrdup
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN13@xmlTextRea:

; 3200 :         case XML_ENTITY_NODE:
; 3201 :         case XML_ENTITY_REF_NODE:
; 3202 : 	    return(xmlStrdup(node->name));

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN14@xmlTextRea:

; 3203 :         case XML_PI_NODE:
; 3204 : 	    return(xmlStrdup(node->name));

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN15@xmlTextRea:

; 3205 :         case XML_COMMENT_NODE:
; 3206 : 	    return(xmlStrdup(BAD_CAST "#comment"));

	push	OFFSET ??_C@_08FBDKDMPC@?$CDcomment@
	call	_xmlStrdup
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN16@xmlTextRea:

; 3207 :         case XML_DOCUMENT_NODE:
; 3208 :         case XML_HTML_DOCUMENT_NODE:
; 3209 : #ifdef LIBXML_DOCB_ENABLED
; 3210 :         case XML_DOCB_DOCUMENT_NODE:
; 3211 : #endif
; 3212 : 	    return(xmlStrdup(BAD_CAST "#document"));

	push	OFFSET ??_C@_09DFKKGJPK@?$CDdocument@
	call	_xmlStrdup
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN17@xmlTextRea:

; 3213 :         case XML_DOCUMENT_FRAG_NODE:
; 3214 : 	    return(xmlStrdup(BAD_CAST "#document-fragment"));

	push	OFFSET ??_C@_0BD@FMMPJIKP@?$CDdocument?9fragment@
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN18@xmlTextRea:

; 3215 :         case XML_NOTATION_NODE:
; 3216 : 	    return(xmlStrdup(node->name));

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN19@xmlTextRea:

; 3217 :         case XML_DOCUMENT_TYPE_NODE:
; 3218 :         case XML_DTD_NODE:
; 3219 : 	    return(xmlStrdup(node->name));

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN20@xmlTextRea:

; 3220 :         case XML_NAMESPACE_DECL: {
; 3221 : 	    xmlNsPtr ns = (xmlNsPtr) node;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _ns$1[ebp], ecx

; 3222 : 
; 3223 : 	    ret = xmlStrdup(BAD_CAST "xmlns");

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 3224 : 	    if (ns->prefix == NULL)

	mov	edx, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN21@xmlTextRea

; 3225 : 		return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN1@xmlTextRea
$LN21@xmlTextRea:

; 3226 : 	    ret = xmlStrcat(ret, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 3227 : 	    ret = xmlStrcat(ret, ns->prefix);

	mov	ecx, DWORD PTR _ns$1[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 3228 : 	    return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	SHORT $LN1@xmlTextRea
$LN22@xmlTextRea:

; 3229 : 	}
; 3230 : 
; 3231 :         case XML_ELEMENT_DECL:
; 3232 :         case XML_ATTRIBUTE_DECL:
; 3233 :         case XML_ENTITY_DECL:
; 3234 :         case XML_XINCLUDE_START:
; 3235 :         case XML_XINCLUDE_END:
; 3236 : 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3237 :     }
; 3238 :     return(NULL);

	xor	eax, eax
$LN1@xmlTextRea:

; 3239 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN25@xmlTextRea:
	DD	$LN8@xmlTextRea
	DD	$LN11@xmlTextRea
	DD	$LN12@xmlTextRea
	DD	$LN13@xmlTextRea
	DD	$LN14@xmlTextRea
	DD	$LN15@xmlTextRea
	DD	$LN16@xmlTextRea
	DD	$LN19@xmlTextRea
	DD	$LN17@xmlTextRea
	DD	$LN18@xmlTextRea
	DD	$LN22@xmlTextRea
	DD	$LN20@xmlTextRea
$LN24@xmlTextRea:
	DB	0
	DB	0
	DB	1
	DB	2
	DB	3
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	6
	DB	7
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	6
_xmlTextReaderName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderLocalName
_TEXT	SEGMENT
_ns$1 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderLocalName PROC				; COMDAT

; 3113 : xmlTextReaderLocalName(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3114 :     xmlNodePtr node;
; 3115 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3116 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 3117 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN4@xmlTextRea

; 3118 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN5@xmlTextRea
$LN4@xmlTextRea:

; 3119 :     else
; 3120 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN5@xmlTextRea:

; 3121 :     if (node->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlTextRea

; 3122 : 	xmlNsPtr ns = (xmlNsPtr) node;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _ns$1[ebp], ecx

; 3123 : 	if (ns->prefix == NULL)

	mov	edx, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN7@xmlTextRea

; 3124 : 	    return(xmlStrdup(BAD_CAST "xmlns"));

	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
	jmp	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 3125 : 	else
; 3126 : 	    return(xmlStrdup(ns->prefix));

	mov	eax, DWORD PTR _ns$1[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 3127 :     }
; 3128 :     if ((node->type != XML_ELEMENT_NODE) &&

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN9@xmlTextRea
	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 2
	je	SHORT $LN9@xmlTextRea

; 3129 : 	(node->type != XML_ATTRIBUTE_NODE))
; 3130 : 	return(xmlTextReaderName(reader));

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderName
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 3131 :     return(xmlStrdup(node->name));

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrdup
	add	esp, 4
$LN1@xmlTextRea:

; 3132 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderLocalName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderBaseUri
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderBaseUri PROC				; COMDAT

; 3439 : xmlTextReaderBaseUri(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3440 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3441 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3442 :     return(xmlNodeGetBase(NULL, reader->node));

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	push	0
	call	_xmlNodeGetBase
	add	esp, 8
$LN1@xmlTextRea:

; 3443 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderBaseUri ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstValue
_TEXT	SEGMENT
tv72 = -16						; size = 4
_ret$1 = -12						; size = 4
_attr$2 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderConstValue PROC				; COMDAT

; 3610 : xmlTextReaderConstValue(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3611 :     xmlNodePtr node;
; 3612 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 3613 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 3614 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN5@xmlTextRea

; 3615 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 3616 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN6@xmlTextRea

; 3617 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN7@xmlTextRea
$LN6@xmlTextRea:

; 3618 :     else
; 3619 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN7@xmlTextRea:

; 3620 : 
; 3621 :     switch (node->type) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	sub	edx, 2
	mov	DWORD PTR tv72[ebp], edx
	cmp	DWORD PTR tv72[ebp], 16			; 00000010H
	ja	$LN2@xmlTextRea
	mov	eax, DWORD PTR tv72[ebp]
	movzx	ecx, BYTE PTR $LN19@xmlTextRea[eax]
	jmp	DWORD PTR $LN20@xmlTextRea[ecx*4]
$LN8@xmlTextRea:

; 3622 :         case XML_NAMESPACE_DECL:
; 3623 : 	    return(((xmlNsPtr) node)->href);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 3624 :         case XML_ATTRIBUTE_NODE:{
; 3625 : 	    xmlAttrPtr attr = (xmlAttrPtr) node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _attr$2[ebp], eax

; 3626 : 	    const xmlChar *ret;
; 3627 : 
; 3628 : 	    if ((attr->children != NULL) &&
; 3629 : 	        (attr->children->type == XML_TEXT_NODE) &&

	mov	ecx, DWORD PTR _attr$2[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN10@xmlTextRea
	mov	edx, DWORD PTR _attr$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	DWORD PTR [eax+4], 3
	jne	SHORT $LN10@xmlTextRea
	mov	ecx, DWORD PTR _attr$2[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+24], 0
	jne	SHORT $LN10@xmlTextRea

; 3630 : 		(attr->children->next == NULL))
; 3631 : 		return(attr->children->content);

	mov	eax, DWORD PTR _attr$2[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [ecx+40]
	jmp	$LN1@xmlTextRea
	jmp	$LN11@xmlTextRea
$LN10@xmlTextRea:

; 3632 : 	    else {
; 3633 : 		if (reader->buffer == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+84], 0
	jne	SHORT $LN12@xmlTextRea

; 3634 : 		    reader->buffer = xmlBufCreateSize(100);

	push	100					; 00000064H
	call	_xmlBufCreateSize
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 3635 :                     if (reader->buffer == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+84], 0
	jne	SHORT $LN14@xmlTextRea

; 3636 :                         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CE@MNBJMFAB@xmlTextReaderSetup?5?3?5malloc?5fai@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3637 :                                         "xmlTextReaderSetup : malloc failed\n");
; 3638 :                         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN14@xmlTextRea:

; 3639 :                     }
; 3640 : 		    xmlBufSetAllocationScheme(reader->buffer,

	push	5
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	_xmlBufSetAllocationScheme
	add	esp, 8

; 3641 : 		                              XML_BUFFER_ALLOC_BOUNDED);
; 3642 :                 } else

	jmp	SHORT $LN13@xmlTextRea
$LN12@xmlTextRea:

; 3643 :                     xmlBufEmpty(reader->buffer);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	call	_xmlBufEmpty
	add	esp, 4
$LN13@xmlTextRea:

; 3644 : 	        xmlBufGetNodeContent(reader->buffer, node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	call	_xmlBufGetNodeContent
	add	esp, 8

; 3645 : 		ret = xmlBufContent(reader->buffer);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	_xmlBufContent
	add	esp, 4
	mov	DWORD PTR _ret$1[ebp], eax

; 3646 : 		if (ret == NULL) {

	cmp	DWORD PTR _ret$1[ebp], 0
	jne	SHORT $LN15@xmlTextRea

; 3647 : 		    /* error on the buffer best to reallocate */
; 3648 : 		    xmlBufFree(reader->buffer);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	_xmlBufFree
	add	esp, 4

; 3649 : 		    reader->buffer = xmlBufCreateSize(100);

	push	100					; 00000064H
	call	_xmlBufCreateSize
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 3650 : 		    xmlBufSetAllocationScheme(reader->buffer,

	push	5
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	_xmlBufSetAllocationScheme
	add	esp, 8

; 3651 : 		                              XML_BUFFER_ALLOC_BOUNDED);
; 3652 : 		    ret = BAD_CAST "";

	mov	DWORD PTR _ret$1[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN15@xmlTextRea:

; 3653 : 		}
; 3654 : 		return(ret);

	mov	eax, DWORD PTR _ret$1[ebp]
	jmp	SHORT $LN1@xmlTextRea
$LN11@xmlTextRea:

; 3655 : 	    }
; 3656 : 	    break;

	jmp	SHORT $LN2@xmlTextRea
$LN16@xmlTextRea:

; 3657 : 	}
; 3658 :         case XML_TEXT_NODE:
; 3659 :         case XML_CDATA_SECTION_NODE:
; 3660 :         case XML_PI_NODE:
; 3661 :         case XML_COMMENT_NODE:
; 3662 : 	    return(node->content);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [ecx+40]
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3663 : 	default:
; 3664 : 	    break;
; 3665 :     }
; 3666 :     return(NULL);

	xor	eax, eax
$LN1@xmlTextRea:

; 3667 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN20@xmlTextRea:
	DD	$LN9@xmlTextRea
	DD	$LN16@xmlTextRea
	DD	$LN8@xmlTextRea
	DD	$LN2@xmlTextRea
$LN19@xmlTextRea:
	DB	0
	DB	1
	DB	1
	DB	3
	DB	3
	DB	1
	DB	1
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	2
_xmlTextReaderConstValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstString
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_str$ = 12						; size = 4
_xmlTextReaderConstString PROC				; COMDAT

; 3756 : xmlTextReaderConstString(xmlTextReaderPtr reader, const xmlChar *str) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3757 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 3758 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3759 :     return(CONSTSTR(str));

	push	-1
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
$LN1@xmlTextRea:

; 3760 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderConstString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstXmlLang
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_tmp$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderConstXmlLang PROC				; COMDAT

; 3728 : xmlTextReaderConstXmlLang(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3729 :     xmlChar *tmp;
; 3730 :     const xmlChar *ret;
; 3731 : 
; 3732 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 3733 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3734 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 3735 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 3736 :     tmp = xmlNodeGetLang(reader->node);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	call	_xmlNodeGetLang
	add	esp, 4
	mov	DWORD PTR _tmp$[ebp], eax

; 3737 :     if (tmp == NULL)

	cmp	DWORD PTR _tmp$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 3738 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 3739 :     ret = CONSTSTR(tmp);

	push	-1
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 3740 :     xmlFree(tmp);

	mov	esi, esp
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3741 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 3742 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderConstXmlLang ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstPrefix
_TEXT	SEGMENT
_ns$1 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderConstPrefix PROC				; COMDAT

; 3351 : xmlTextReaderConstPrefix(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3352 :     xmlNodePtr node;
; 3353 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3354 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 3355 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN4@xmlTextRea

; 3356 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN5@xmlTextRea
$LN4@xmlTextRea:

; 3357 :     else
; 3358 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN5@xmlTextRea:

; 3359 :     if (node->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlTextRea

; 3360 : 	xmlNsPtr ns = (xmlNsPtr) node;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _ns$1[ebp], ecx

; 3361 : 	if (ns->prefix == NULL)

	mov	edx, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN7@xmlTextRea

; 3362 : 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 3363 : 	return(CONSTSTR(BAD_CAST "xmlns"));

	push	-1
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 3364 :     }
; 3365 :     if ((node->type != XML_ELEMENT_NODE) &&

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN8@xmlTextRea
	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 2
	je	SHORT $LN8@xmlTextRea

; 3366 : 	(node->type != XML_ATTRIBUTE_NODE))
; 3367 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 3368 :     if ((node->ns != NULL) && (node->ns->prefix != NULL))

	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN9@xmlTextRea
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN9@xmlTextRea

; 3369 : 	return(CONSTSTR(node->ns->prefix));

	push	-1
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 3370 :     return(NULL);

	xor	eax, eax
$LN1@xmlTextRea:

; 3371 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderConstPrefix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstNamespaceUri
_TEXT	SEGMENT
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderConstNamespaceUri PROC			; COMDAT

; 3411 : xmlTextReaderConstNamespaceUri(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3412 :     xmlNodePtr node;
; 3413 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3414 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3415 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN4@xmlTextRea

; 3416 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN5@xmlTextRea
$LN4@xmlTextRea:

; 3417 :     else
; 3418 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN5@xmlTextRea:

; 3419 :     if (node->type == XML_NAMESPACE_DECL)

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlTextRea

; 3420 : 	return(CONSTSTR(BAD_CAST "http://www.w3.org/2000/xmlns/"));

	push	-1
	push	OFFSET ??_C@_0BO@GBJIDPIB@http?3?1?1www?4w3?4org?12000?1xmlns?1@
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 3421 :     if ((node->type != XML_ELEMENT_NODE) &&

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN7@xmlTextRea
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	je	SHORT $LN7@xmlTextRea

; 3422 : 	(node->type != XML_ATTRIBUTE_NODE))
; 3423 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 3424 :     if (node->ns != NULL)

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN8@xmlTextRea

; 3425 : 	return(CONSTSTR(node->ns->href));

	push	-1
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 3426 :     return(NULL);

	xor	eax, eax
$LN1@xmlTextRea:

; 3427 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderConstNamespaceUri ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstName
_TEXT	SEGMENT
tv72 = -12						; size = 4
_ns$1 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderConstName PROC				; COMDAT

; 3251 : xmlTextReaderConstName(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3252 :     xmlNodePtr node;
; 3253 : 
; 3254 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN5@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 3255 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 3256 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN6@xmlTextRea

; 3257 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN7@xmlTextRea
$LN6@xmlTextRea:

; 3258 :     else
; 3259 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN7@xmlTextRea:

; 3260 :     switch (node->type) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	sub	edx, 1
	mov	DWORD PTR tv72[ebp], edx
	cmp	DWORD PTR tv72[ebp], 20			; 00000014H
	ja	$LN2@xmlTextRea
	mov	eax, DWORD PTR tv72[ebp]
	movzx	ecx, BYTE PTR $LN24@xmlTextRea[eax]
	jmp	DWORD PTR $LN25@xmlTextRea[ecx*4]
$LN8@xmlTextRea:

; 3261 :         case XML_ELEMENT_NODE:
; 3262 :         case XML_ATTRIBUTE_NODE:
; 3263 : 	    if ((node->ns == NULL) ||

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN10@xmlTextRea
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN9@xmlTextRea
$LN10@xmlTextRea:

; 3264 : 		(node->ns->prefix == NULL))
; 3265 : 		return(node->name);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 3266 : 	    return(CONSTQSTR(node->ns->prefix, node->name));

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	_xmlDictQLookup
	add	esp, 12					; 0000000cH
	jmp	$LN1@xmlTextRea
$LN11@xmlTextRea:

; 3267 :         case XML_TEXT_NODE:
; 3268 : 	    return(CONSTSTR(BAD_CAST "#text"));

	push	-1
	push	OFFSET ??_C@_05NOBOONOA@?$CDtext@
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	$LN1@xmlTextRea
$LN12@xmlTextRea:

; 3269 :         case XML_CDATA_SECTION_NODE:
; 3270 : 	    return(CONSTSTR(BAD_CAST "#cdata-section"));

	push	-1
	push	OFFSET ??_C@_0P@LIENAFBO@?$CDcdata?9section@
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	$LN1@xmlTextRea
$LN13@xmlTextRea:

; 3271 :         case XML_ENTITY_NODE:
; 3272 :         case XML_ENTITY_REF_NODE:
; 3273 : 	    return(CONSTSTR(node->name));

	push	-1
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	$LN1@xmlTextRea
$LN14@xmlTextRea:

; 3274 :         case XML_PI_NODE:
; 3275 : 	    return(CONSTSTR(node->name));

	push	-1
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	$LN1@xmlTextRea
$LN15@xmlTextRea:

; 3276 :         case XML_COMMENT_NODE:
; 3277 : 	    return(CONSTSTR(BAD_CAST "#comment"));

	push	-1
	push	OFFSET ??_C@_08FBDKDMPC@?$CDcomment@
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	$LN1@xmlTextRea
$LN16@xmlTextRea:

; 3278 :         case XML_DOCUMENT_NODE:
; 3279 :         case XML_HTML_DOCUMENT_NODE:
; 3280 : #ifdef LIBXML_DOCB_ENABLED
; 3281 :         case XML_DOCB_DOCUMENT_NODE:
; 3282 : #endif
; 3283 : 	    return(CONSTSTR(BAD_CAST "#document"));

	push	-1
	push	OFFSET ??_C@_09DFKKGJPK@?$CDdocument@
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	$LN1@xmlTextRea
$LN17@xmlTextRea:

; 3284 :         case XML_DOCUMENT_FRAG_NODE:
; 3285 : 	    return(CONSTSTR(BAD_CAST "#document-fragment"));

	push	-1
	push	OFFSET ??_C@_0BD@FMMPJIKP@?$CDdocument?9fragment@
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN18@xmlTextRea:

; 3286 :         case XML_NOTATION_NODE:
; 3287 : 	    return(CONSTSTR(node->name));

	push	-1
	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN19@xmlTextRea:

; 3288 :         case XML_DOCUMENT_TYPE_NODE:
; 3289 :         case XML_DTD_NODE:
; 3290 : 	    return(CONSTSTR(node->name));

	push	-1
	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN20@xmlTextRea:

; 3291 :         case XML_NAMESPACE_DECL: {
; 3292 : 	    xmlNsPtr ns = (xmlNsPtr) node;

	mov	eax, DWORD PTR _node$[ebp]
	mov	DWORD PTR _ns$1[ebp], eax

; 3293 : 
; 3294 : 	    if (ns->prefix == NULL)

	mov	ecx, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN21@xmlTextRea

; 3295 : 		return(CONSTSTR(BAD_CAST "xmlns"));

	push	-1
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN21@xmlTextRea:

; 3296 : 	    return(CONSTQSTR(BAD_CAST "xmlns", ns->prefix));

	mov	ecx, DWORD PTR _ns$1[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlDictQLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN22@xmlTextRea:

; 3297 : 	}
; 3298 : 
; 3299 :         case XML_ELEMENT_DECL:
; 3300 :         case XML_ATTRIBUTE_DECL:
; 3301 :         case XML_ENTITY_DECL:
; 3302 :         case XML_XINCLUDE_START:
; 3303 :         case XML_XINCLUDE_END:
; 3304 : 	    return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3305 :     }
; 3306 :     return(NULL);

	xor	eax, eax
$LN1@xmlTextRea:

; 3307 : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN25@xmlTextRea:
	DD	$LN8@xmlTextRea
	DD	$LN11@xmlTextRea
	DD	$LN12@xmlTextRea
	DD	$LN13@xmlTextRea
	DD	$LN14@xmlTextRea
	DD	$LN15@xmlTextRea
	DD	$LN16@xmlTextRea
	DD	$LN19@xmlTextRea
	DD	$LN17@xmlTextRea
	DD	$LN18@xmlTextRea
	DD	$LN22@xmlTextRea
	DD	$LN20@xmlTextRea
$LN24@xmlTextRea:
	DB	0
	DB	0
	DB	1
	DB	2
	DB	3
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	6
	DB	7
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	6
_xmlTextReaderConstName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstLocalName
_TEXT	SEGMENT
_ns$1 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderConstLocalName PROC			; COMDAT

; 3144 : xmlTextReaderConstLocalName(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3145 :     xmlNodePtr node;
; 3146 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3147 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3148 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN4@xmlTextRea

; 3149 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN5@xmlTextRea
$LN4@xmlTextRea:

; 3150 :     else
; 3151 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN5@xmlTextRea:

; 3152 :     if (node->type == XML_NAMESPACE_DECL) {

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlTextRea

; 3153 : 	xmlNsPtr ns = (xmlNsPtr) node;

	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR _ns$1[ebp], ecx

; 3154 : 	if (ns->prefix == NULL)

	mov	edx, DWORD PTR _ns$1[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN7@xmlTextRea

; 3155 : 	    return(CONSTSTR(BAD_CAST "xmlns"));

	push	-1
	push	OFFSET ??_C@_05PPEFOGKI@xmlns@
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
	jmp	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 3156 : 	else
; 3157 : 	    return(ns->prefix);

	mov	edx, DWORD PTR _ns$1[ebp]
	mov	eax, DWORD PTR [edx+12]
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 3158 :     }
; 3159 :     if ((node->type != XML_ELEMENT_NODE) &&

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN9@xmlTextRea
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	je	SHORT $LN9@xmlTextRea

; 3160 : 	(node->type != XML_ATTRIBUTE_NODE))
; 3161 : 	return(xmlTextReaderConstName(reader));

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderConstName
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 3162 :     return(node->name);

	mov	eax, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [eax+8]
$LN1@xmlTextRea:

; 3163 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderConstLocalName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderConstBaseUri
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_tmp$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderConstBaseUri PROC				; COMDAT

; 3455 : xmlTextReaderConstBaseUri(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3456 :     xmlChar *tmp;
; 3457 :     const xmlChar *ret;
; 3458 : 
; 3459 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3460 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3461 :     tmp = xmlNodeGetBase(NULL, reader->node);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	push	0
	call	_xmlNodeGetBase
	add	esp, 8
	mov	DWORD PTR _tmp$[ebp], eax

; 3462 :     if (tmp == NULL)

	cmp	DWORD PTR _tmp$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 3463 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 3464 :     ret = CONSTSTR(tmp);

	push	-1
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ret$[ebp], eax

; 3465 :     xmlFree(tmp);

	mov	esi, esp
	mov	eax, DWORD PTR _tmp$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 3466 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 3467 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderConstBaseUri ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderIsNamespaceDecl
_TEXT	SEGMENT
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderIsNamespaceDecl PROC			; COMDAT

; 4650 : xmlTextReaderIsNamespaceDecl(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 4651 :     xmlNodePtr node;
; 4652 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 4653 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 4654 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 4655 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 4656 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN4@xmlTextRea

; 4657 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN5@xmlTextRea
$LN4@xmlTextRea:

; 4658 :     else
; 4659 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN5@xmlTextRea:

; 4660 : 
; 4661 :     if (XML_NAMESPACE_DECL == node->type)

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 18			; 00000012H
	jne	SHORT $LN6@xmlTextRea

; 4662 : 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 4663 :     else
; 4664 : 	return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 4665 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderIsNamespaceDecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderReadState
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderReadState PROC				; COMDAT

; 1629 : xmlTextReaderReadState(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1630 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 1631 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 1632 :     return(reader->mode);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [eax]
$LN1@xmlTextRea:

; 1633 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderReadState ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderQuoteChar
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderQuoteChar PROC				; COMDAT

; 3694 : xmlTextReaderQuoteChar(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3695 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 3696 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3697 :     /* TODO maybe lookup the attribute value for " first */
; 3698 :     return((int) '"');

	mov	eax, 34					; 00000022H
$LN1@xmlTextRea:

; 3699 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderQuoteChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderNodeType
_TEXT	SEGMENT
tv72 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderNodeType PROC				; COMDAT

; 3011 : xmlTextReaderNodeType(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3012 :     xmlNodePtr node;
; 3013 : 
; 3014 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 3015 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 3016 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN5@xmlTextRea

; 3017 : 	return(XML_READER_TYPE_NONE);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 3018 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN6@xmlTextRea

; 3019 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN7@xmlTextRea
$LN6@xmlTextRea:

; 3020 :     else
; 3021 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN7@xmlTextRea:

; 3022 :     switch (node->type) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	sub	edx, 1
	mov	DWORD PTR tv72[ebp], edx
	cmp	DWORD PTR tv72[ebp], 20			; 00000014H
	ja	$LN2@xmlTextRea
	mov	eax, DWORD PTR tv72[ebp]
	jmp	DWORD PTR $LN28@xmlTextRea[eax*4]
$LN8@xmlTextRea:

; 3023 :         case XML_ELEMENT_NODE:
; 3024 : 	    if ((reader->state == XML_TEXTREADER_END) ||

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+16], 2
	je	SHORT $LN10@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+16], 4
	jne	SHORT $LN9@xmlTextRea
$LN10@xmlTextRea:

; 3025 : 		(reader->state == XML_TEXTREADER_BACKTRACK))
; 3026 : 		return(XML_READER_TYPE_END_ELEMENT);

	mov	eax, 15					; 0000000fH
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 3027 : 	    return(XML_READER_TYPE_ELEMENT);

	mov	eax, 1
	jmp	$LN1@xmlTextRea
$LN11@xmlTextRea:

; 3028 :         case XML_NAMESPACE_DECL:
; 3029 :         case XML_ATTRIBUTE_NODE:
; 3030 : 	    return(XML_READER_TYPE_ATTRIBUTE);

	mov	eax, 2
	jmp	$LN1@xmlTextRea
$LN12@xmlTextRea:

; 3031 :         case XML_TEXT_NODE:
; 3032 : 	    if (xmlIsBlankNode(reader->node)) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	_xmlIsBlankNode
	add	esp, 4
	test	eax, eax
	je	SHORT $LN13@xmlTextRea

; 3033 : 		if (xmlNodeGetSpacePreserve(reader->node))

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	call	_xmlNodeGetSpacePreserve
	add	esp, 4
	test	eax, eax
	je	SHORT $LN15@xmlTextRea

; 3034 : 		    return(XML_READER_TYPE_SIGNIFICANT_WHITESPACE);

	mov	eax, 14					; 0000000eH
	jmp	SHORT $LN1@xmlTextRea
	jmp	SHORT $LN16@xmlTextRea
$LN15@xmlTextRea:

; 3035 : 		else
; 3036 : 		    return(XML_READER_TYPE_WHITESPACE);

	mov	eax, 13					; 0000000dH
	jmp	SHORT $LN1@xmlTextRea
$LN16@xmlTextRea:

; 3037 : 	    } else {

	jmp	SHORT $LN17@xmlTextRea
$LN13@xmlTextRea:

; 3038 : 		return(XML_READER_TYPE_TEXT);

	mov	eax, 3
	jmp	SHORT $LN1@xmlTextRea
$LN17@xmlTextRea:

; 3039 : 	    }
; 3040 :         case XML_CDATA_SECTION_NODE:
; 3041 : 	    return(XML_READER_TYPE_CDATA);

	mov	eax, 4
	jmp	SHORT $LN1@xmlTextRea
$LN18@xmlTextRea:

; 3042 :         case XML_ENTITY_REF_NODE:
; 3043 : 	    return(XML_READER_TYPE_ENTITY_REFERENCE);

	mov	eax, 5
	jmp	SHORT $LN1@xmlTextRea
$LN19@xmlTextRea:

; 3044 :         case XML_ENTITY_NODE:
; 3045 : 	    return(XML_READER_TYPE_ENTITY);

	mov	eax, 6
	jmp	SHORT $LN1@xmlTextRea
$LN20@xmlTextRea:

; 3046 :         case XML_PI_NODE:
; 3047 : 	    return(XML_READER_TYPE_PROCESSING_INSTRUCTION);

	mov	eax, 7
	jmp	SHORT $LN1@xmlTextRea
$LN21@xmlTextRea:

; 3048 :         case XML_COMMENT_NODE:
; 3049 : 	    return(XML_READER_TYPE_COMMENT);

	mov	eax, 8
	jmp	SHORT $LN1@xmlTextRea
$LN22@xmlTextRea:

; 3050 :         case XML_DOCUMENT_NODE:
; 3051 :         case XML_HTML_DOCUMENT_NODE:
; 3052 : #ifdef LIBXML_DOCB_ENABLED
; 3053 :         case XML_DOCB_DOCUMENT_NODE:
; 3054 : #endif
; 3055 : 	    return(XML_READER_TYPE_DOCUMENT);

	mov	eax, 9
	jmp	SHORT $LN1@xmlTextRea
$LN23@xmlTextRea:

; 3056 :         case XML_DOCUMENT_FRAG_NODE:
; 3057 : 	    return(XML_READER_TYPE_DOCUMENT_FRAGMENT);

	mov	eax, 11					; 0000000bH
	jmp	SHORT $LN1@xmlTextRea
$LN24@xmlTextRea:

; 3058 :         case XML_NOTATION_NODE:
; 3059 : 	    return(XML_READER_TYPE_NOTATION);

	mov	eax, 12					; 0000000cH
	jmp	SHORT $LN1@xmlTextRea
$LN25@xmlTextRea:

; 3060 :         case XML_DOCUMENT_TYPE_NODE:
; 3061 :         case XML_DTD_NODE:
; 3062 : 	    return(XML_READER_TYPE_DOCUMENT_TYPE);

	mov	eax, 10					; 0000000aH
	jmp	SHORT $LN1@xmlTextRea
$LN26@xmlTextRea:

; 3063 : 
; 3064 :         case XML_ELEMENT_DECL:
; 3065 :         case XML_ATTRIBUTE_DECL:
; 3066 :         case XML_ENTITY_DECL:
; 3067 :         case XML_XINCLUDE_START:
; 3068 :         case XML_XINCLUDE_END:
; 3069 : 	    return(XML_READER_TYPE_NONE);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3070 :     }
; 3071 :     return(-1);

	or	eax, -1
$LN1@xmlTextRea:

; 3072 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN28@xmlTextRea:
	DD	$LN8@xmlTextRea
	DD	$LN11@xmlTextRea
	DD	$LN12@xmlTextRea
	DD	$LN17@xmlTextRea
	DD	$LN18@xmlTextRea
	DD	$LN19@xmlTextRea
	DD	$LN20@xmlTextRea
	DD	$LN21@xmlTextRea
	DD	$LN22@xmlTextRea
	DD	$LN25@xmlTextRea
	DD	$LN23@xmlTextRea
	DD	$LN24@xmlTextRea
	DD	$LN22@xmlTextRea
	DD	$LN25@xmlTextRea
	DD	$LN26@xmlTextRea
	DD	$LN26@xmlTextRea
	DD	$LN26@xmlTextRea
	DD	$LN11@xmlTextRea
	DD	$LN26@xmlTextRea
	DD	$LN26@xmlTextRea
	DD	$LN22@xmlTextRea
_xmlTextReaderNodeType ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderIsEmptyElement
_TEXT	SEGMENT
tv86 = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderIsEmptyElement PROC			; COMDAT

; 3083 : xmlTextReaderIsEmptyElement(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3084 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 3085 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3086 :     if (reader->node->type != XML_ELEMENT_NODE)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 1
	je	SHORT $LN4@xmlTextRea

; 3087 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 3088 :     if (reader->curnode != NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN5@xmlTextRea

; 3089 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 3090 :     if (reader->node->children != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN6@xmlTextRea

; 3091 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 3092 :     if (reader->state == XML_TEXTREADER_END)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+16], 2
	jne	SHORT $LN7@xmlTextRea

; 3093 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 3094 :     if (reader->doc != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN8@xmlTextRea

; 3095 :         return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN8@xmlTextRea:

; 3096 : #ifdef LIBXML_XINCLUDE_ENABLED
; 3097 :     if (reader->in_xinclude > 0)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+168], 0
	jle	SHORT $LN9@xmlTextRea

; 3098 :         return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 3099 : #endif
; 3100 :     return((reader->node->extra & NODE_IS_EMPTY) != 0);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+58]
	and	edx, 1
	je	SHORT $LN11@xmlTextRea
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN12@xmlTextRea
$LN11@xmlTextRea:
	mov	DWORD PTR tv86[ebp], 0
$LN12@xmlTextRea:
	mov	eax, DWORD PTR tv86[ebp]
$LN1@xmlTextRea:

; 3101 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderIsEmptyElement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderIsDefault
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderIsDefault PROC				; COMDAT

; 3679 : xmlTextReaderIsDefault(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3680 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 3681 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3682 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 3683 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderIsDefault ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderHasValue
_TEXT	SEGMENT
tv72 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderHasValue PROC				; COMDAT

; 3529 : xmlTextReaderHasValue(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3530 :     xmlNodePtr node;
; 3531 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 3532 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 3533 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN5@xmlTextRea

; 3534 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 3535 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN6@xmlTextRea

; 3536 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN7@xmlTextRea
$LN6@xmlTextRea:

; 3537 :     else
; 3538 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN7@xmlTextRea:

; 3539 : 
; 3540 :     switch (node->type) {

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR tv72[ebp]
	sub	edx, 2
	mov	DWORD PTR tv72[ebp], edx
	cmp	DWORD PTR tv72[ebp], 16			; 00000010H
	ja	SHORT $LN2@xmlTextRea
	mov	eax, DWORD PTR tv72[ebp]
	movzx	ecx, BYTE PTR $LN11@xmlTextRea[eax]
	jmp	DWORD PTR $LN12@xmlTextRea[ecx*4]
$LN8@xmlTextRea:

; 3541 :         case XML_ATTRIBUTE_NODE:
; 3542 :         case XML_TEXT_NODE:
; 3543 :         case XML_CDATA_SECTION_NODE:
; 3544 :         case XML_PI_NODE:
; 3545 :         case XML_COMMENT_NODE:
; 3546 :         case XML_NAMESPACE_DECL:
; 3547 : 	    return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3548 : 	default:
; 3549 : 	    break;
; 3550 :     }
; 3551 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 3552 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN12@xmlTextRea:
	DD	$LN8@xmlTextRea
	DD	$LN2@xmlTextRea
$LN11@xmlTextRea:
	DB	0
	DB	0
	DB	0
	DB	1
	DB	1
	DB	0
	DB	0
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	1
	DB	0
_xmlTextReaderHasValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderHasAttributes
_TEXT	SEGMENT
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderHasAttributes PROC			; COMDAT

; 3502 : xmlTextReaderHasAttributes(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3503 :     xmlNodePtr node;
; 3504 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 3505 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3506 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 3507 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 3508 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN4@xmlTextRea

; 3509 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN5@xmlTextRea
$LN4@xmlTextRea:

; 3510 :     else
; 3511 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN5@xmlTextRea:

; 3512 : 
; 3513 :     if ((node->type == XML_ELEMENT_NODE) &&

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN6@xmlTextRea
	mov	ecx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [ecx+44], 0
	jne	SHORT $LN7@xmlTextRea
	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+48], 0
	je	SHORT $LN6@xmlTextRea
$LN7@xmlTextRea:

; 3514 : 	((node->properties != NULL) || (node->nsDef != NULL)))
; 3515 : 	return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 3516 :     /* TODO: handle the xmlDecl */
; 3517 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 3518 : }

	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderHasAttributes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderDepth
_TEXT	SEGMENT
_reader$ = 8						; size = 4
_xmlTextReaderDepth PROC				; COMDAT

; 3478 : xmlTextReaderDepth(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 3479 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 3480 : 	return(-1);

	or	eax, -1
	jmp	SHORT $LN1@xmlTextRea
$LN2@xmlTextRea:

; 3481 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 3482 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN3@xmlTextRea:

; 3483 : 
; 3484 :     if (reader->curnode != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN4@xmlTextRea

; 3485 : 	if ((reader->curnode->type == XML_ATTRIBUTE_NODE) ||

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	cmp	DWORD PTR [eax+4], 2
	je	SHORT $LN6@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	SHORT $LN5@xmlTextRea
$LN6@xmlTextRea:

; 3486 : 	    (reader->curnode->type == XML_NAMESPACE_DECL))
; 3487 : 	    return(reader->depth + 1);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [eax+72]
	add	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 3488 : 	return(reader->depth + 2);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	add	eax, 2
	jmp	SHORT $LN1@xmlTextRea
$LN4@xmlTextRea:

; 3489 :     }
; 3490 :     return(reader->depth);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+72]
$LN1@xmlTextRea:

; 3491 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlTextReaderDepth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderAttributeCount
_TEXT	SEGMENT
_node$ = -16						; size = 4
_ns$ = -12						; size = 4
_attr$ = -8						; size = 4
_ret$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderAttributeCount PROC			; COMDAT

; 2965 : xmlTextReaderAttributeCount(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2966 :     int ret;
; 2967 :     xmlAttrPtr attr;
; 2968 :     xmlNsPtr ns;
; 2969 :     xmlNodePtr node;
; 2970 : 
; 2971 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN6@xmlTextRea

; 2972 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN6@xmlTextRea:

; 2973 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN7@xmlTextRea

; 2974 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN7@xmlTextRea:

; 2975 : 
; 2976 :     if (reader->curnode != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN8@xmlTextRea

; 2977 : 	node = reader->curnode;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _node$[ebp], eax
	jmp	SHORT $LN9@xmlTextRea
$LN8@xmlTextRea:

; 2978 :     else
; 2979 : 	node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$[ebp], edx
$LN9@xmlTextRea:

; 2980 : 
; 2981 :     if (node->type != XML_ELEMENT_NODE)

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+4], 1
	je	SHORT $LN10@xmlTextRea

; 2982 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN10@xmlTextRea:

; 2983 :     if ((reader->state == XML_TEXTREADER_END) ||

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+16], 2
	je	SHORT $LN12@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+16], 4
	jne	SHORT $LN11@xmlTextRea
$LN12@xmlTextRea:

; 2984 : 	(reader->state == XML_TEXTREADER_BACKTRACK))
; 2985 : 	return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN11@xmlTextRea:

; 2986 :     ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 2987 :     attr = node->properties;

	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _attr$[ebp], ecx
$LN2@xmlTextRea:

; 2988 :     while (attr != NULL) {

	cmp	DWORD PTR _attr$[ebp], 0
	je	SHORT $LN3@xmlTextRea

; 2989 : 	ret++;

	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, 1
	mov	DWORD PTR _ret$[ebp], edx

; 2990 : 	attr = attr->next;

	mov	eax, DWORD PTR _attr$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _attr$[ebp], ecx

; 2991 :     }

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 2992 :     ns = node->nsDef;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _ns$[ebp], eax
$LN4@xmlTextRea:

; 2993 :     while (ns != NULL) {

	cmp	DWORD PTR _ns$[ebp], 0
	je	SHORT $LN5@xmlTextRea

; 2994 : 	ret++;

	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, 1
	mov	DWORD PTR _ret$[ebp], ecx

; 2995 : 	ns = ns->next;

	mov	edx, DWORD PTR _ns$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _ns$[ebp], eax

; 2996 :     }

	jmp	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 2997 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlTextRea:

; 2998 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderAttributeCount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderReadAttributeValue
_TEXT	SEGMENT
_ns$1 = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderReadAttributeValue PROC			; COMDAT

; 2890 : xmlTextReaderReadAttributeValue(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2891 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN2@xmlTextRea

; 2892 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 2893 :     if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN3@xmlTextRea

; 2894 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN3@xmlTextRea:

; 2895 :     if (reader->curnode == NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	jne	SHORT $LN4@xmlTextRea

; 2896 : 	return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 2897 :     if (reader->curnode->type == XML_ATTRIBUTE_NODE) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	cmp	DWORD PTR [eax+4], 2
	jne	SHORT $LN5@xmlTextRea

; 2898 : 	if (reader->curnode->children == NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN7@xmlTextRea

; 2899 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN7@xmlTextRea:

; 2900 : 	reader->curnode = reader->curnode->children;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+68], eax
	jmp	$LN6@xmlTextRea
$LN5@xmlTextRea:

; 2901 :     } else if (reader->curnode->type == XML_NAMESPACE_DECL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	cmp	DWORD PTR [edx+4], 18			; 00000012H
	jne	$LN8@xmlTextRea

; 2902 : 	xmlNsPtr ns = (xmlNsPtr) reader->curnode;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _ns$1[ebp], ecx

; 2903 : 
; 2904 : 	if (reader->faketext == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+76], 0
	jne	SHORT $LN10@xmlTextRea

; 2905 : 	    reader->faketext = xmlNewDocText(reader->node->doc,

	mov	eax, DWORD PTR _ns$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+32]
	push	ecx
	call	_xmlNewDocText
	add	esp, 8
	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+76], eax

; 2906 : 		                             ns->href);
; 2907 : 	} else {

	jmp	SHORT $LN11@xmlTextRea
$LN10@xmlTextRea:

; 2908 :             if ((reader->faketext->content != NULL) &&

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN12@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+76]
	add	edx, 44					; 0000002cH
	cmp	DWORD PTR [eax+40], edx
	je	SHORT $LN12@xmlTextRea

; 2909 : 	        (reader->faketext->content !=
; 2910 : 		 (xmlChar *) &(reader->faketext->properties)))
; 2911 : 		xmlFree(reader->faketext->content);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlTextRea:

; 2912 : 	    reader->faketext->content = xmlStrdup(ns->href);

	mov	eax, DWORD PTR _ns$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+76]
	mov	DWORD PTR [ecx+40], eax
$LN11@xmlTextRea:

; 2913 : 	}
; 2914 : 	reader->curnode = reader->faketext;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR [edx+68], ecx

; 2915 :     } else {

	jmp	SHORT $LN6@xmlTextRea
$LN8@xmlTextRea:

; 2916 : 	if (reader->curnode->next == NULL)

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN13@xmlTextRea

; 2917 : 	    return(0);

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN13@xmlTextRea:

; 2918 : 	reader->curnode = reader->curnode->next;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+68], ecx
$LN6@xmlTextRea:

; 2919 :     }
; 2920 :     return(1);

	mov	eax, 1
$LN1@xmlTextRea:

; 2921 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderReadAttributeValue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderReadString
_TEXT	SEGMENT
tv73 = -12						; size = 4
tv71 = -8						; size = 4
_node$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderReadString PROC				; COMDAT

; 1797 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1798 :     xmlNodePtr node;
; 1799 : 
; 1800 :     if ((reader == NULL) || (reader->node == NULL))

	cmp	DWORD PTR _reader$[ebp], 0
	je	SHORT $LN5@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN4@xmlTextRea
$LN5@xmlTextRea:

; 1801 :        return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 1802 : 
; 1803 :     node = (reader->curnode != NULL) ? reader->curnode : reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+68], 0
	je	SHORT $LN13@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN14@xmlTextRea
$LN13@xmlTextRea:
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR tv71[ebp], edx
$LN14@xmlTextRea:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _node$[ebp], eax

; 1804 :     switch (node->type) {

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR tv73[ebp], edx
	cmp	DWORD PTR tv73[ebp], 1
	je	SHORT $LN8@xmlTextRea
	cmp	DWORD PTR tv73[ebp], 2
	je	SHORT $LN10@xmlTextRea
	cmp	DWORD PTR tv73[ebp], 3
	je	SHORT $LN6@xmlTextRea
	jmp	SHORT $LN2@xmlTextRea
$LN6@xmlTextRea:

; 1805 :     case XML_TEXT_NODE:
; 1806 :        if (node->content != NULL)

	mov	eax, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN7@xmlTextRea

; 1807 :            return(xmlStrdup(node->content));

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_xmlStrdup
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN7@xmlTextRea:

; 1808 :        break;

	jmp	SHORT $LN2@xmlTextRea
$LN8@xmlTextRea:

; 1809 :     case XML_ELEMENT_NODE:
; 1810 : 	if (xmlTextReaderDoExpand(reader) != -1) {

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderDoExpand
	add	esp, 4
	cmp	eax, -1
	je	SHORT $LN9@xmlTextRea

; 1811 : 	    return xmlTextReaderCollectSiblings(node->children);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	call	_xmlTextReaderCollectSiblings
	add	esp, 4
	jmp	SHORT $LN1@xmlTextRea
$LN9@xmlTextRea:

; 1812 : 	}
; 1813 : 	break;

	jmp	SHORT $LN2@xmlTextRea
$LN10@xmlTextRea:

; 1814 :     case XML_ATTRIBUTE_NODE:
; 1815 : 	TODO

	mov	esi, esp
	push	1815					; 00000717H
	push	OFFSET ??_C@_0GL@PIJMIJNC@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@xmlTextRea:

; 1816 : 	break;
; 1817 :     default:
; 1818 :        break;
; 1819 :     }
; 1820 :     return(NULL);

	xor	eax, eax
$LN1@xmlTextRea:

; 1821 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderReadString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderReadOuterXml
_TEXT	SEGMENT
_doc$ = -16						; size = 4
_buff$ = -12						; size = 4
_node$ = -8						; size = 4
_resbuf$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderReadOuterXml PROC				; COMDAT

; 1752 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1753 :     xmlChar *resbuf;
; 1754 :     xmlNodePtr node;
; 1755 :     xmlBufferPtr buff;
; 1756 :     xmlDocPtr doc;
; 1757 : 
; 1758 :     node = reader->node;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _node$[ebp], ecx

; 1759 :     doc = node->doc;

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _doc$[ebp], eax

; 1760 :     if (xmlTextReaderExpand(reader) == NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderExpand
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN2@xmlTextRea

; 1761 :         return NULL;

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 1762 :     }
; 1763 :     /* XXX: Why is the node copied? */
; 1764 : 	if (node->type == XML_DTD_NODE) {

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+4], 14			; 0000000eH
	jne	SHORT $LN3@xmlTextRea

; 1765 : 		node = (xmlNodePtr) xmlCopyDtd((xmlDtdPtr) node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	_xmlCopyDtd
	add	esp, 4
	mov	DWORD PTR _node$[ebp], eax

; 1766 : 	} else {

	jmp	SHORT $LN4@xmlTextRea
$LN3@xmlTextRea:

; 1767 : 		node = xmlDocCopyNode(node, doc, 1);

	push	1
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	call	_xmlDocCopyNode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _node$[ebp], eax
$LN4@xmlTextRea:

; 1768 : 	}
; 1769 :     buff = xmlBufferCreate();

	call	_xmlBufferCreate
	mov	DWORD PTR _buff$[ebp], eax

; 1770 :     if (xmlNodeDump(buff, doc, node, 0, 0) == -1) {

	push	0
	push	0
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buff$[ebp]
	push	edx
	call	_xmlNodeDump
	add	esp, 20					; 00000014H
	cmp	eax, -1
	jne	SHORT $LN5@xmlTextRea

; 1771 :         xmlFreeNode(node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	call	_xmlFreeNode
	add	esp, 4

; 1772 :         xmlBufferFree(buff);

	mov	ecx, DWORD PTR _buff$[ebp]
	push	ecx
	call	_xmlBufferFree
	add	esp, 4

; 1773 :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN5@xmlTextRea:

; 1774 :     }
; 1775 : 
; 1776 :     resbuf = buff->content;

	mov	edx, DWORD PTR _buff$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _resbuf$[ebp], eax

; 1777 :     buff->content = NULL;

	mov	ecx, DWORD PTR _buff$[ebp]
	mov	DWORD PTR [ecx], 0

; 1778 : 
; 1779 :     xmlFreeNode(node);

	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	call	_xmlFreeNode
	add	esp, 4

; 1780 :     xmlBufferFree(buff);

	mov	eax, DWORD PTR _buff$[ebp]
	push	eax
	call	_xmlBufferFree
	add	esp, 4

; 1781 :     return resbuf;

	mov	eax, DWORD PTR _resbuf$[ebp]
$LN1@xmlTextRea:

; 1782 : }

	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderReadOuterXml ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderReadInnerXml
_TEXT	SEGMENT
_doc$ = -24						; size = 4
_buff2$ = -20						; size = 4
_buff$ = -16						; size = 4
_cur_node$ = -12					; size = 4
_node$ = -8						; size = 4
_resbuf$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderReadInnerXml PROC				; COMDAT

; 1705 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1706 :     xmlChar *resbuf;
; 1707 :     xmlNodePtr node, cur_node;
; 1708 :     xmlBufferPtr buff, buff2;
; 1709 :     xmlDocPtr doc;
; 1710 : 
; 1711 :     if (xmlTextReaderExpand(reader) == NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderExpand
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN5@xmlTextRea

; 1712 :         return NULL;

	xor	eax, eax
	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 1713 :     }
; 1714 :     doc = reader->node->doc;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _doc$[ebp], eax

; 1715 :     buff = xmlBufferCreate();

	call	_xmlBufferCreate
	mov	DWORD PTR _buff$[ebp], eax

; 1716 :     for (cur_node = reader->node->children; cur_node != NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur_node$[ebp], eax
	jmp	SHORT $LN4@xmlTextRea
$LN2@xmlTextRea:

; 1717 :          cur_node = cur_node->next) {

	mov	ecx, DWORD PTR _cur_node$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur_node$[ebp], edx
$LN4@xmlTextRea:

; 1716 :     for (cur_node = reader->node->children; cur_node != NULL;

	cmp	DWORD PTR _cur_node$[ebp], 0
	je	$LN3@xmlTextRea

; 1718 :         /* XXX: Why is the node copied? */
; 1719 :         node = xmlDocCopyNode(cur_node, doc, 1);

	push	1
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur_node$[ebp]
	push	ecx
	call	_xmlDocCopyNode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _node$[ebp], eax

; 1720 :         buff2 = xmlBufferCreate();

	call	_xmlBufferCreate
	mov	DWORD PTR _buff2$[ebp], eax

; 1721 :         if (xmlNodeDump(buff2, doc, node, 0, 0) == -1) {

	push	0
	push	0
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buff2$[ebp]
	push	ecx
	call	_xmlNodeDump
	add	esp, 20					; 00000014H
	cmp	eax, -1
	jne	SHORT $LN6@xmlTextRea

; 1722 :             xmlFreeNode(node);

	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	call	_xmlFreeNode
	add	esp, 4

; 1723 :             xmlBufferFree(buff2);

	mov	eax, DWORD PTR _buff2$[ebp]
	push	eax
	call	_xmlBufferFree
	add	esp, 4

; 1724 :             xmlBufferFree(buff);

	mov	ecx, DWORD PTR _buff$[ebp]
	push	ecx
	call	_xmlBufferFree
	add	esp, 4

; 1725 :             return NULL;

	xor	eax, eax
	jmp	SHORT $LN1@xmlTextRea
$LN6@xmlTextRea:

; 1726 :         }
; 1727 :         xmlBufferCat(buff, buff2->content);

	mov	edx, DWORD PTR _buff2$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _buff$[ebp]
	push	ecx
	call	_xmlBufferCat
	add	esp, 8

; 1728 :         xmlFreeNode(node);

	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	call	_xmlFreeNode
	add	esp, 4

; 1729 :         xmlBufferFree(buff2);

	mov	eax, DWORD PTR _buff2$[ebp]
	push	eax
	call	_xmlBufferFree
	add	esp, 4

; 1730 :     }

	jmp	$LN2@xmlTextRea
$LN3@xmlTextRea:

; 1731 :     resbuf = buff->content;

	mov	ecx, DWORD PTR _buff$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _resbuf$[ebp], edx

; 1732 :     buff->content = NULL;

	mov	eax, DWORD PTR _buff$[ebp]
	mov	DWORD PTR [eax], 0

; 1733 : 
; 1734 :     xmlBufferFree(buff);

	mov	ecx, DWORD PTR _buff$[ebp]
	push	ecx
	call	_xmlBufferFree
	add	esp, 4

; 1735 :     return resbuf;

	mov	eax, DWORD PTR _resbuf$[ebp]
$LN1@xmlTextRea:

; 1736 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderReadInnerXml ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderRead
_TEXT	SEGMENT
tv600 = -36						; size = 4
_i$1 = -32						; size = 4
_node$2 = -28						; size = 4
_tmp$3 = -24						; size = 4
_tmp$4 = -20						; size = 4
_oldnode$ = -16						; size = 4
_oldstate$ = -12					; size = 4
_olddepth$ = -8						; size = 4
_val$ = -4						; size = 4
_reader$ = 8						; size = 4
_xmlTextReaderRead PROC					; COMDAT

; 1291 : xmlTextReaderRead(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 1292 :     int val, olddepth = 0;

	mov	DWORD PTR _olddepth$[ebp], 0

; 1293 :     xmlTextReaderState oldstate = XML_TEXTREADER_START;

	mov	DWORD PTR _oldstate$[ebp], 0

; 1294 :     xmlNodePtr oldnode = NULL;

	mov	DWORD PTR _oldnode$[ebp], 0

; 1295 : 
; 1296 : 
; 1297 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN10@xmlTextRea

; 1298 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN10@xmlTextRea:

; 1299 :     reader->curnode = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+68], 0

; 1300 :     if (reader->doc != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN11@xmlTextRea

; 1301 :         return(xmlTextReaderReadTree(reader));

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderReadTree
	add	esp, 4
	jmp	$LN1@xmlTextRea
$LN11@xmlTextRea:

; 1302 :     if (reader->ctxt == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	SHORT $LN12@xmlTextRea

; 1303 : 	return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN12@xmlTextRea:

; 1304 : 
; 1305 : #ifdef DEBUG_READER
; 1306 :     fprintf(stderr, "\nREAD ");
; 1307 :     DUMP_READER
; 1308 : #endif
; 1309 :     if (reader->mode == XML_TEXTREADER_MODE_INITIAL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx], 0
	jne	$LN13@xmlTextRea

; 1310 : 	reader->mode = XML_TEXTREADER_MODE_INTERACTIVE;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx], 1
$LN4@xmlTextRea:

; 1311 : 	/*
; 1312 : 	 * Initial state
; 1313 : 	 */
; 1314 : 	do {
; 1315 : 	    val = xmlTextReaderPushData(reader);

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderPushData
	add	esp, 4
	mov	DWORD PTR _val$[ebp], eax

; 1316 : 		if (val < 0){

	cmp	DWORD PTR _val$[ebp], 0
	jge	SHORT $LN2@xmlTextRea

; 1317 : 			reader->mode = XML_TEXTREADER_MODE_ERROR;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx], 2

; 1318 : 			reader->state = XML_TEXTREADER_ERROR;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 6

; 1319 : 		return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN2@xmlTextRea:

; 1320 : 		}
; 1321 : 	} while ((reader->ctxt->node == NULL) &&

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+52], 0
	jne	SHORT $LN3@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx], 3
	je	SHORT $LN3@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+16], 5
	jne	SHORT $LN4@xmlTextRea
$LN3@xmlTextRea:

; 1322 : 		 ((reader->mode != XML_TEXTREADER_MODE_EOF) &&
; 1323 : 		  (reader->state != XML_TEXTREADER_DONE)));
; 1324 : 	if (reader->ctxt->node == NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN17@xmlTextRea

; 1325 : 	    if (reader->ctxt->myDoc != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN19@xmlTextRea

; 1326 : 		reader->node = reader->ctxt->myDoc->children;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+64], eax
$LN19@xmlTextRea:

; 1327 : 	    }
; 1328 : 	    if (reader->node == NULL){

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN20@xmlTextRea

; 1329 : 			reader->mode = XML_TEXTREADER_MODE_ERROR;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx], 2

; 1330 : 			reader->state = XML_TEXTREADER_ERROR;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 6

; 1331 : 		return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN20@xmlTextRea:

; 1332 : 		}
; 1333 : 	    reader->state = XML_TEXTREADER_ELEMENT;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 1

; 1334 : 	} else {

	jmp	SHORT $LN18@xmlTextRea
$LN17@xmlTextRea:

; 1335 : 	    if (reader->ctxt->myDoc != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN21@xmlTextRea

; 1336 : 		reader->node = reader->ctxt->myDoc->children;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+64], edx
$LN21@xmlTextRea:

; 1337 : 	    }
; 1338 : 	    if (reader->node == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	jne	SHORT $LN22@xmlTextRea

; 1339 : 		reader->node = reader->ctxt->nodeTab[0];

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR [edx+64]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [ecx+edx]
	mov	DWORD PTR [eax+64], ecx
$LN22@xmlTextRea:

; 1340 : 	    reader->state = XML_TEXTREADER_ELEMENT;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 1
$LN18@xmlTextRea:

; 1341 : 	}
; 1342 : 	reader->depth = 0;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+72], 0

; 1343 : 	reader->ctxt->parseMode = XML_PARSE_READER;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+436], 5

; 1344 : 	goto node_found;

	jmp	$node_found$74
$LN13@xmlTextRea:

; 1345 :     }
; 1346 :     oldstate = reader->state;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _oldstate$[ebp], ecx

; 1347 :     olddepth = reader->ctxt->nodeNr;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _olddepth$[ebp], ecx

; 1348 :     oldnode = reader->node;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _oldnode$[ebp], eax
$get_next_node$75:

; 1349 : 
; 1350 : get_next_node:
; 1351 :     if (reader->node == NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN5@xmlTextRea

; 1352 : 	if (reader->mode == XML_TEXTREADER_MODE_EOF)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx], 3
	jne	SHORT $LN24@xmlTextRea

; 1353 : 	    return(0);

	xor	eax, eax
	jmp	$LN1@xmlTextRea
	jmp	SHORT $LN5@xmlTextRea
$LN24@xmlTextRea:

; 1354 : 	else
; 1355 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN5@xmlTextRea:

; 1356 :     }
; 1357 : 
; 1358 :     /*
; 1359 :      * If we are not backtracking on ancestors or examined nodes,
; 1360 :      * that the parser didn't finished or that we arent at the end
; 1361 :      * of stream, continue processing.
; 1362 :      */
; 1363 :     while ((reader->node != NULL) && (reader->node->next == NULL) &&
; 1364 : 	   (reader->ctxt->nodeNr == olddepth) &&
; 1365 :            ((oldstate == XML_TEXTREADER_BACKTRACK) ||
; 1366 :             (reader->node->children == NULL) ||
; 1367 : 	    (reader->node->type == XML_ENTITY_REF_NODE) ||
; 1368 : 	    ((reader->node->children != NULL) &&
; 1369 : 	     (reader->node->children->type == XML_TEXT_NODE) &&
; 1370 : 	     (reader->node->children->next == NULL)) ||
; 1371 : 	    (reader->node->type == XML_DTD_NODE) ||
; 1372 : 	    (reader->node->type == XML_DOCUMENT_NODE) ||
; 1373 : 	    (reader->node->type == XML_HTML_DOCUMENT_NODE)) &&
; 1374 : 	   ((reader->ctxt->node == NULL) ||
; 1375 : 	    (reader->ctxt->node == reader->node) ||
; 1376 : 	    (reader->ctxt->node == reader->node->parent)) &&

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	$LN6@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+24], 0
	jne	$LN6@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+56]
	cmp	edx, DWORD PTR _olddepth$[ebp]
	jne	$LN6@xmlTextRea
	cmp	DWORD PTR _oldstate$[ebp], 4
	je	SHORT $LN26@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN26@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 5
	je	SHORT $LN26@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN27@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 3
	jne	SHORT $LN27@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN26@xmlTextRea
$LN27@xmlTextRea:
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 14			; 0000000eH
	je	SHORT $LN26@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 9
	je	SHORT $LN26@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 13			; 0000000dH
	jne	$LN6@xmlTextRea
$LN26@xmlTextRea:
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN28@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+52]
	cmp	edx, DWORD PTR [ecx+64]
	je	SHORT $LN28@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [ecx+52]
	cmp	ecx, DWORD PTR [eax+20]
	jne	SHORT $LN6@xmlTextRea
$LN28@xmlTextRea:
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+172], -1
	je	SHORT $LN6@xmlTextRea

; 1377 : 	   (reader->ctxt->instate != XML_PARSER_EOF)) {
; 1378 : 	val = xmlTextReaderPushData(reader);

	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderPushData
	add	esp, 4
	mov	DWORD PTR _val$[ebp], eax

; 1379 : 	if (val < 0){

	cmp	DWORD PTR _val$[ebp], 0
	jge	SHORT $LN29@xmlTextRea

; 1380 : 		reader->mode = XML_TEXTREADER_MODE_ERROR;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx], 2

; 1381 : 		reader->state = XML_TEXTREADER_ERROR;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+16], 6

; 1382 : 	    return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN29@xmlTextRea:

; 1383 : 	}
; 1384 : 	if (reader->node == NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	jne	SHORT $LN30@xmlTextRea

; 1385 : 	    goto node_end;

	jmp	$node_end$76
$LN30@xmlTextRea:

; 1386 :     }

	jmp	$LN5@xmlTextRea
$LN6@xmlTextRea:

; 1387 :     if (oldstate != XML_TEXTREADER_BACKTRACK) {

	cmp	DWORD PTR _oldstate$[ebp], 4
	je	SHORT $LN31@xmlTextRea

; 1388 : 	if ((reader->node->children != NULL) &&
; 1389 : 	    (reader->node->type != XML_ENTITY_REF_NODE) &&
; 1390 : 	    (reader->node->type != XML_XINCLUDE_START) &&

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN31@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 5
	je	SHORT $LN31@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 19			; 00000013H
	je	SHORT $LN31@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 14			; 0000000eH
	je	SHORT $LN31@xmlTextRea

; 1391 : 	    (reader->node->type != XML_DTD_NODE)) {
; 1392 : 	    reader->node = reader->node->children;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR [eax+64], ecx

; 1393 : 	    reader->depth++;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+72]
	add	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 1394 : 	    reader->state = XML_TEXTREADER_ELEMENT;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 1

; 1395 : 	    goto node_found;

	jmp	$node_found$74
$LN31@xmlTextRea:

; 1396 : 	}
; 1397 :     }
; 1398 :     if (reader->node->next != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+24], 0
	je	$LN33@xmlTextRea

; 1399 : 	if ((oldstate == XML_TEXTREADER_ELEMENT) &&
; 1400 :             (reader->node->type == XML_ELEMENT_NODE) &&
; 1401 : 	    (reader->node->children == NULL) &&
; 1402 : 	    ((reader->node->extra & NODE_IS_EMPTY) == 0)
; 1403 : #ifdef LIBXML_XINCLUDE_ENABLED
; 1404 : 	    && (reader->in_xinclude <= 0)

	cmp	DWORD PTR _oldstate$[ebp], 1
	jne	SHORT $LN34@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN34@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN34@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	movzx	edx, WORD PTR [ecx+58]
	and	edx, 1
	jne	SHORT $LN34@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+168], 0
	jg	SHORT $LN34@xmlTextRea

; 1405 : #endif
; 1406 : 	    ) {
; 1407 : 	    reader->state = XML_TEXTREADER_END;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 2

; 1408 : 	    goto node_found;

	jmp	$node_found$74
$LN34@xmlTextRea:

; 1409 : 	}
; 1410 : #ifdef LIBXML_REGEXP_ENABLED
; 1411 : 	if ((reader->validate) &&

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN35@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN35@xmlTextRea

; 1412 : 	    (reader->node->type == XML_ELEMENT_NODE))
; 1413 : 	    xmlTextReaderValidatePop(reader);

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderValidatePop
	add	esp, 4
$LN35@xmlTextRea:

; 1414 : #endif /* LIBXML_REGEXP_ENABLED */
; 1415 :         if ((reader->preserves > 0) &&

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+184], 0
	jle	SHORT $LN36@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	movzx	eax, WORD PTR [edx+58]
	and	eax, 4
	je	SHORT $LN36@xmlTextRea

; 1416 : 	    (reader->node->extra & NODE_IS_SPRESERVED))
; 1417 : 	    reader->preserves--;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+184]
	sub	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+184], edx
$LN36@xmlTextRea:

; 1418 : 	reader->node = reader->node->next;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+64], ecx

; 1419 : 	reader->state = XML_TEXTREADER_ELEMENT;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 1

; 1420 : 
; 1421 : 	/*
; 1422 : 	 * Cleanup of the old node
; 1423 : 	 */
; 1424 : 	if ((reader->preserves == 0) &&
; 1425 : #ifdef LIBXML_XINCLUDE_ENABLED
; 1426 : 	    (reader->in_xinclude == 0) &&
; 1427 : #endif
; 1428 : 	    (reader->entNr == 0) &&
; 1429 : 	    (reader->node->prev != NULL) &&

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+184], 0
	jne	SHORT $LN37@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+168], 0
	jne	SHORT $LN37@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+96], 0
	jne	SHORT $LN37@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN37@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+28]
	cmp	DWORD PTR [ecx+4], 14			; 0000000eH
	je	SHORT $LN37@xmlTextRea

; 1430 :             (reader->node->prev->type != XML_DTD_NODE)) {
; 1431 : 	    xmlNodePtr tmp = reader->node->prev;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _tmp$4[ebp], ecx

; 1432 : 	    if ((tmp->extra & NODE_IS_PRESERVED) == 0) {

	mov	edx, DWORD PTR _tmp$4[ebp]
	movzx	eax, WORD PTR [edx+58]
	and	eax, 2
	jne	SHORT $LN37@xmlTextRea

; 1433 : 		xmlUnlinkNode(tmp);

	mov	ecx, DWORD PTR _tmp$4[ebp]
	push	ecx
	call	_xmlUnlinkNode
	add	esp, 4

; 1434 : 		xmlTextReaderFreeNode(reader, tmp);

	mov	edx, DWORD PTR _tmp$4[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderFreeNode
	add	esp, 8
$LN37@xmlTextRea:

; 1435 : 	    }
; 1436 : 	}
; 1437 : 
; 1438 : 	goto node_found;

	jmp	$node_found$74
$LN33@xmlTextRea:

; 1439 :     }
; 1440 :     if ((oldstate == XML_TEXTREADER_ELEMENT) &&
; 1441 : 	(reader->node->type == XML_ELEMENT_NODE) &&
; 1442 : 	(reader->node->children == NULL) &&

	cmp	DWORD PTR _oldstate$[ebp], 1
	jne	SHORT $LN39@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN39@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN39@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	movzx	ecx, WORD PTR [eax+58]
	and	ecx, 1
	jne	SHORT $LN39@xmlTextRea

; 1443 : 	((reader->node->extra & NODE_IS_EMPTY) == 0)) {;
; 1444 : 	reader->state = XML_TEXTREADER_END;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+16], 2

; 1445 : 	goto node_found;

	jmp	$node_found$74
$LN39@xmlTextRea:

; 1446 :     }
; 1447 : #ifdef LIBXML_REGEXP_ENABLED
; 1448 :     if ((reader->validate != XML_TEXTREADER_NOT_VALIDATE) && (reader->node->type == XML_ELEMENT_NODE))

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN40@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN40@xmlTextRea

; 1449 : 	xmlTextReaderValidatePop(reader);

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderValidatePop
	add	esp, 4
$LN40@xmlTextRea:

; 1450 : #endif /* LIBXML_REGEXP_ENABLED */
; 1451 :     if ((reader->preserves > 0) &&

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+184], 0
	jle	SHORT $LN41@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	movzx	ecx, WORD PTR [eax+58]
	and	ecx, 4
	je	SHORT $LN41@xmlTextRea

; 1452 : 	(reader->node->extra & NODE_IS_SPRESERVED))
; 1453 : 	reader->preserves--;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+184]
	sub	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+184], eax
$LN41@xmlTextRea:

; 1454 :     reader->node = reader->node->parent;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+64], edx

; 1455 :     if ((reader->node == NULL) ||
; 1456 : 	(reader->node->type == XML_DOCUMENT_NODE) ||
; 1457 : #ifdef LIBXML_DOCB_ENABLED
; 1458 : 	(reader->node->type == XML_DOCB_DOCUMENT_NODE) ||

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN43@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 9
	je	SHORT $LN43@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 21			; 00000015H
	je	SHORT $LN43@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 13			; 0000000dH
	jne	$LN42@xmlTextRea
$LN43@xmlTextRea:

; 1459 : #endif
; 1460 : 	(reader->node->type == XML_HTML_DOCUMENT_NODE)) {
; 1461 : 	if (reader->mode != XML_TEXTREADER_MODE_EOF) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx], 3
	je	SHORT $LN44@xmlTextRea

; 1462 : 	    val = xmlParseChunk(reader->ctxt, "", 0, 1);

	push	1
	push	0
	push	OFFSET ??_C@_00CNPNBAHC@@
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_xmlParseChunk
	add	esp, 16					; 00000010H
	mov	DWORD PTR _val$[ebp], eax

; 1463 : 	    reader->state = XML_TEXTREADER_DONE;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 5

; 1464 : 	    if (val != 0)

	cmp	DWORD PTR _val$[ebp], 0
	je	SHORT $LN44@xmlTextRea

; 1465 : 	        return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN44@xmlTextRea:

; 1466 : 	}
; 1467 : 	reader->node = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+64], 0

; 1468 : 	reader->depth = -1;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+72], -1

; 1469 : 
; 1470 : 	/*
; 1471 : 	 * Cleanup of the old node
; 1472 : 	 */
; 1473 : 	if ((oldnode != NULL) && (reader->preserves == 0) &&
; 1474 : #ifdef LIBXML_XINCLUDE_ENABLED
; 1475 : 	    (reader->in_xinclude == 0) &&
; 1476 : #endif
; 1477 : 	    (reader->entNr == 0) &&
; 1478 : 	    (oldnode->type != XML_DTD_NODE) &&

	cmp	DWORD PTR _oldnode$[ebp], 0
	je	SHORT $LN46@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+184], 0
	jne	SHORT $LN46@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+168], 0
	jne	SHORT $LN46@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	SHORT $LN46@xmlTextRea
	mov	ecx, DWORD PTR _oldnode$[ebp]
	cmp	DWORD PTR [ecx+4], 14			; 0000000eH
	je	SHORT $LN46@xmlTextRea
	mov	edx, DWORD PTR _oldnode$[ebp]
	movzx	eax, WORD PTR [edx+58]
	and	eax, 2
	jne	SHORT $LN46@xmlTextRea

; 1479 : 	    ((oldnode->extra & NODE_IS_PRESERVED) == 0)) {
; 1480 : 	    xmlUnlinkNode(oldnode);

	mov	ecx, DWORD PTR _oldnode$[ebp]
	push	ecx
	call	_xmlUnlinkNode
	add	esp, 4

; 1481 : 	    xmlTextReaderFreeNode(reader, oldnode);

	mov	edx, DWORD PTR _oldnode$[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderFreeNode
	add	esp, 8
$LN46@xmlTextRea:

; 1482 : 	}
; 1483 : 
; 1484 : 	goto node_end;

	jmp	$node_end$76
$LN42@xmlTextRea:

; 1485 :     }
; 1486 :     if ((reader->preserves == 0) &&
; 1487 : #ifdef LIBXML_XINCLUDE_ENABLED
; 1488 :         (reader->in_xinclude == 0) &&
; 1489 : #endif
; 1490 : 	(reader->entNr == 0) &&
; 1491 :         (reader->node->last != NULL) &&

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+184], 0
	jne	SHORT $LN47@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+168], 0
	jne	SHORT $LN47@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	SHORT $LN47@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN47@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [ecx+16]
	movzx	eax, WORD PTR [edx+58]
	and	eax, 2
	jne	SHORT $LN47@xmlTextRea

; 1492 :         ((reader->node->last->extra & NODE_IS_PRESERVED) == 0)) {
; 1493 : 	xmlNodePtr tmp = reader->node->last;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _tmp$3[ebp], eax

; 1494 : 	xmlUnlinkNode(tmp);

	mov	ecx, DWORD PTR _tmp$3[ebp]
	push	ecx
	call	_xmlUnlinkNode
	add	esp, 4

; 1495 : 	xmlTextReaderFreeNode(reader, tmp);

	mov	edx, DWORD PTR _tmp$3[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderFreeNode
	add	esp, 8
$LN47@xmlTextRea:

; 1496 :     }
; 1497 :     reader->depth--;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	sub	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+72], edx

; 1498 :     reader->state = XML_TEXTREADER_BACKTRACK;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 4
$node_found$74:

; 1499 : 
; 1500 : node_found:
; 1501 :     DUMP_READER
; 1502 : 
; 1503 :     /*
; 1504 :      * If we are in the middle of a piece of CDATA make sure it's finished
; 1505 :      */
; 1506 :     if ((reader->node != NULL) &&
; 1507 :         (reader->node->next == NULL) &&

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN48@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN48@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 3
	je	SHORT $LN49@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	cmp	DWORD PTR [edx+4], 4
	jne	SHORT $LN48@xmlTextRea
$LN49@xmlTextRea:

; 1508 :         ((reader->node->type == XML_TEXT_NODE) ||
; 1509 : 	 (reader->node->type == XML_CDATA_SECTION_NODE))) {
; 1510 :             if (xmlTextReaderExpand(reader) == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderExpand
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN48@xmlTextRea

; 1511 : 	        return -1;

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN48@xmlTextRea:

; 1512 :     }
; 1513 : 
; 1514 : #ifdef LIBXML_XINCLUDE_ENABLED
; 1515 :     /*
; 1516 :      * Handle XInclude if asked for
; 1517 :      */
; 1518 :     if ((reader->xinclude) && (reader->node != NULL) &&
; 1519 : 	(reader->node->type == XML_ELEMENT_NODE) &&
; 1520 : 	(reader->node->ns != NULL) &&

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+156], 0
	je	$LN51@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	$LN51@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 1
	jne	$LN51@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+36], 0
	je	$LN51@xmlTextRea
	push	OFFSET ??_C@_0CA@MIIEHMNN@http?3?1?1www?4w3?4org?12003?1XInclude@
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN52@xmlTextRea
	push	OFFSET ??_C@_0CA@JAOIMFBM@http?3?1?1www?4w3?4org?12001?1XInclude@
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN51@xmlTextRea
$LN52@xmlTextRea:

; 1521 : 	((xmlStrEqual(reader->node->ns->href, XINCLUDE_NS)) ||
; 1522 : 	 (xmlStrEqual(reader->node->ns->href, XINCLUDE_OLD_NS)))) {
; 1523 : 	if (reader->xincctxt == NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+164], 0
	jne	SHORT $LN53@xmlTextRea

; 1524 : 	    reader->xincctxt = xmlXIncludeNewContext(reader->ctxt->myDoc);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlXIncludeNewContext
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+164], eax

; 1525 : 	    xmlXIncludeSetFlags(reader->xincctxt,

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+188]
	and	eax, -32769				; ffff7fffH
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	call	_xmlXIncludeSetFlags
	add	esp, 8
$LN53@xmlTextRea:

; 1526 : 	                        reader->parserFlags & (~XML_PARSE_NOXINCNODE));
; 1527 : 	}
; 1528 : 	/*
; 1529 : 	 * expand that node and process it
; 1530 : 	 */
; 1531 : 	if (xmlTextReaderExpand(reader) == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderExpand
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN54@xmlTextRea

; 1532 : 	    return -1;

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN54@xmlTextRea:

; 1533 : 	xmlXIncludeProcessNode(reader->xincctxt, reader->node);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	call	_xmlXIncludeProcessNode
	add	esp, 8
$LN51@xmlTextRea:

; 1534 :     }
; 1535 :     if ((reader->node != NULL) && (reader->node->type == XML_XINCLUDE_START)) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN55@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 19			; 00000013H
	jne	SHORT $LN55@xmlTextRea

; 1536 :         reader->in_xinclude++;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+168]
	add	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+168], eax

; 1537 : 	goto get_next_node;

	jmp	$get_next_node$75
$LN55@xmlTextRea:

; 1538 :     }
; 1539 :     if ((reader->node != NULL) && (reader->node->type == XML_XINCLUDE_END)) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	SHORT $LN56@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 20			; 00000014H
	jne	SHORT $LN56@xmlTextRea

; 1540 :         reader->in_xinclude--;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+168]
	sub	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+168], eax

; 1541 : 	goto get_next_node;

	jmp	$get_next_node$75
$LN56@xmlTextRea:

; 1542 :     }
; 1543 : #endif
; 1544 :     /*
; 1545 :      * Handle entities enter and exit when in entity replacement mode
; 1546 :      */
; 1547 :     if ((reader->node != NULL) &&
; 1548 : 	(reader->node->type == XML_ENTITY_REF_NODE) &&
; 1549 : 	(reader->ctxt != NULL) && (reader->ctxt->replaceEntities == 1)) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+64], 0
	je	$LN57@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+4], 5
	jne	$LN57@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	$LN57@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+16], 1
	jne	$LN57@xmlTextRea

; 1550 : 	/*
; 1551 : 	 * Case where the underlying tree is not availble, lookup the entity
; 1552 : 	 * and walk it.
; 1553 : 	 */
; 1554 : 	if ((reader->node->children == NULL) && (reader->ctxt->sax != NULL) &&

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN59@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN59@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN59@xmlTextRea

; 1555 : 	    (reader->ctxt->sax->getEntity != NULL)) {
; 1556 : 	    reader->node->children = (xmlNodePtr)

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [edx+12], eax
$LN59@xmlTextRea:

; 1557 : 		reader->ctxt->sax->getEntity(reader->ctxt, reader->node->name);
; 1558 : 	}
; 1559 : 
; 1560 : 	if ((reader->node->children != NULL) &&
; 1561 : 	    (reader->node->children->type == XML_ENTITY_DECL) &&

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN60@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+4], 17			; 00000011H
	jne	SHORT $LN60@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+12]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN60@xmlTextRea

; 1562 : 	    (reader->node->children->children != NULL)) {
; 1563 : 	    xmlTextReaderEntPush(reader, reader->node);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderEntPush
	add	esp, 8

; 1564 : 	    reader->node = reader->node->children->children;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+64], eax
$LN60@xmlTextRea:

; 1565 : 	}
; 1566 : #ifdef LIBXML_REGEXP_ENABLED
; 1567 :     } else if ((reader->node != NULL) &&

	jmp	SHORT $LN58@xmlTextRea
$LN57@xmlTextRea:

; 1568 : 	       (reader->node->type == XML_ENTITY_REF_NODE) &&
; 1569 : 	       (reader->ctxt != NULL) && (reader->validate)) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN58@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 5
	jne	SHORT $LN58@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	je	SHORT $LN58@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN58@xmlTextRea

; 1570 : 	xmlTextReaderValidateEntity(reader);

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderValidateEntity
	add	esp, 4
$LN58@xmlTextRea:

; 1571 : #endif /* LIBXML_REGEXP_ENABLED */
; 1572 :     }
; 1573 :     if ((reader->node != NULL) &&
; 1574 : 	(reader->node->type == XML_ENTITY_DECL) &&
; 1575 : 	(reader->ent != NULL) && (reader->ent->children == reader->node)) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN62@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	cmp	DWORD PTR [eax+4], 17			; 00000011H
	jne	SHORT $LN62@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+92], 0
	je	SHORT $LN62@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+64]
	jne	SHORT $LN62@xmlTextRea

; 1576 : 	reader->node = xmlTextReaderEntPop(reader);

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderEntPop
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 1577 : 	reader->depth++;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+72]
	add	eax, 1
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 1578 :         goto get_next_node;

	jmp	$get_next_node$75
$LN62@xmlTextRea:

; 1579 :     }
; 1580 : #ifdef LIBXML_REGEXP_ENABLED
; 1581 :     if ((reader->validate != XML_TEXTREADER_NOT_VALIDATE) && (reader->node != NULL)) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN63@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN63@xmlTextRea

; 1582 : 	xmlNodePtr node = reader->node;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR _node$2[ebp], edx

; 1583 : 
; 1584 : 	if ((node->type == XML_ELEMENT_NODE) &&

	mov	eax, DWORD PTR _node$2[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN64@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+16], 2
	je	SHORT $LN64@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+16], 4
	je	SHORT $LN64@xmlTextRea

; 1585 :             ((reader->state != XML_TEXTREADER_END) &&
; 1586 : 	     (reader->state != XML_TEXTREADER_BACKTRACK))) {
; 1587 : 	    xmlTextReaderValidatePush(reader);

	mov	eax, DWORD PTR _reader$[ebp]
	push	eax
	call	_xmlTextReaderValidatePush
	add	esp, 4
	jmp	SHORT $LN63@xmlTextRea
$LN64@xmlTextRea:

; 1588 : 	} else if ((node->type == XML_TEXT_NODE) ||

	mov	ecx, DWORD PTR _node$2[ebp]
	cmp	DWORD PTR [ecx+4], 3
	je	SHORT $LN67@xmlTextRea
	mov	edx, DWORD PTR _node$2[ebp]
	cmp	DWORD PTR [edx+4], 4
	jne	SHORT $LN63@xmlTextRea
$LN67@xmlTextRea:

; 1589 : 		   (node->type == XML_CDATA_SECTION_NODE)) {
; 1590 :             xmlTextReaderValidateCData(reader, node->content,

	mov	eax, DWORD PTR _node$2[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	call	_xmlStrlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _node$2[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	_xmlTextReaderValidateCData
	add	esp, 12					; 0000000cH
$LN63@xmlTextRea:

; 1591 : 	                               xmlStrlen(node->content));
; 1592 : 	}
; 1593 :     }
; 1594 : #endif /* LIBXML_REGEXP_ENABLED */
; 1595 : #ifdef LIBXML_PATTERN_ENABLED
; 1596 :     if ((reader->patternNr > 0) && (reader->state != XML_TEXTREADER_END) &&

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+172], 0
	jle	SHORT $LN68@xmlTextRea
	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+16], 2
	je	SHORT $LN68@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+16], 4
	je	SHORT $LN68@xmlTextRea

; 1597 :         (reader->state != XML_TEXTREADER_BACKTRACK)) {
; 1598 :         int i;
; 1599 : 	for (i = 0;i < reader->patternNr;i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN9@xmlTextRea
$LN7@xmlTextRea:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN9@xmlTextRea:
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+172]
	jge	SHORT $LN68@xmlTextRea

; 1600 : 	     if (xmlPatternMatch(reader->patternTab[i], reader->node) == 1) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+64]
	push	eax
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR [edx+eax*4]
	push	ecx
	call	_xmlPatternMatch
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN69@xmlTextRea

; 1601 : 	         xmlTextReaderPreserve(reader);

	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderPreserve
	add	esp, 4

; 1602 : 		 break;

	jmp	SHORT $LN68@xmlTextRea
$LN69@xmlTextRea:

; 1603 :              }
; 1604 : 	}

	jmp	SHORT $LN7@xmlTextRea
$LN68@xmlTextRea:

; 1605 :     }
; 1606 : #endif /* LIBXML_PATTERN_ENABLED */
; 1607 : #ifdef LIBXML_SCHEMAS_ENABLED
; 1608 :     if ((reader->validate == XML_TEXTREADER_VALIDATE_XSD) &&
; 1609 :         (reader->xsdValidErrors == 0) &&

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+8], 4
	jne	SHORT $LN70@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+148], 0
	jne	SHORT $LN70@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+140], 0
	je	SHORT $LN70@xmlTextRea

; 1610 : 	(reader->xsdValidCtxt != NULL)) {
; 1611 : 	reader->xsdValidErrors = !xmlSchemaIsValid(reader->xsdValidCtxt);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaIsValid
	add	esp, 4
	test	eax, eax
	jne	SHORT $LN72@xmlTextRea
	mov	DWORD PTR tv600[ebp], 1
	jmp	SHORT $LN73@xmlTextRea
$LN72@xmlTextRea:
	mov	DWORD PTR tv600[ebp], 0
$LN73@xmlTextRea:
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR tv600[ebp]
	mov	DWORD PTR [edx+148], eax
$LN70@xmlTextRea:

; 1612 :     }
; 1613 : #endif /* LIBXML_PATTERN_ENABLED */
; 1614 :     return(1);

	mov	eax, 1
	jmp	SHORT $LN1@xmlTextRea
$node_end$76:

; 1615 : node_end:
; 1616 :     reader->state = XML_TEXTREADER_DONE;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+16], 5

; 1617 :     return(0);

	xor	eax, eax
$LN1@xmlTextRea:

; 1618 : }

	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderRead ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlTextReaderSetup
_TEXT	SEGMENT
_hdlr$1 = -16						; size = 4
_enc$2 = -12						; size = 4
_buf$3 = -8						; size = 4
_inputStream$4 = -4					; size = 4
_reader$ = 8						; size = 4
_input$ = 12						; size = 4
_URL$ = 16						; size = 4
_encoding$ = 20						; size = 4
_options$ = 24						; size = 4
_xmlTextReaderSetup PROC				; COMDAT

; 5125 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 5126 :     if (reader == NULL) {

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN4@xmlTextRea

; 5127 :         if (input != NULL)

	cmp	DWORD PTR _input$[ebp], 0
	je	SHORT $LN5@xmlTextRea

; 5128 : 	    xmlFreeParserInputBuffer(input);

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_xmlFreeParserInputBuffer
	add	esp, 4
$LN5@xmlTextRea:

; 5129 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN4@xmlTextRea:

; 5130 :     }
; 5131 : 
; 5132 :     /*
; 5133 :      * we force the generation of compact text nodes on the reader
; 5134 :      * since usr applications should never modify the tree
; 5135 :      */
; 5136 :     options |= XML_PARSE_COMPACT;

	mov	ecx, DWORD PTR _options$[ebp]
	or	ecx, 65536				; 00010000H
	mov	DWORD PTR _options$[ebp], ecx

; 5137 : 
; 5138 :     reader->doc = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+4], 0

; 5139 :     reader->entNr = 0;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+96], 0

; 5140 :     reader->parserFlags = options;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _options$[ebp]
	mov	DWORD PTR [ecx+188], edx

; 5141 :     reader->validate = XML_TEXTREADER_NOT_VALIDATE;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+8], 0

; 5142 :     if ((input != NULL) && (reader->input != NULL) &&

	cmp	DWORD PTR _input$[ebp], 0
	je	SHORT $LN6@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN6@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+12]
	and	eax, 1
	je	SHORT $LN6@xmlTextRea

; 5143 :         (reader->allocs & XML_TEXTREADER_INPUT)) {
; 5144 : 	xmlFreeParserInputBuffer(reader->input);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	call	_xmlFreeParserInputBuffer
	add	esp, 4

; 5145 : 	reader->input = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+28], 0

; 5146 : 	reader->allocs -= XML_TEXTREADER_INPUT;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	sub	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+12], edx
$LN6@xmlTextRea:

; 5147 :     }
; 5148 :     if (input != NULL) {

	cmp	DWORD PTR _input$[ebp], 0
	je	SHORT $LN7@xmlTextRea

; 5149 : 	reader->input = input;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 5150 : 	reader->allocs |= XML_TEXTREADER_INPUT;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	or	ecx, 1
	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+12], ecx
$LN7@xmlTextRea:

; 5151 :     }
; 5152 :     if (reader->buffer == NULL)

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+84], 0
	jne	SHORT $LN8@xmlTextRea

; 5153 :         reader->buffer = xmlBufCreateSize(100);

	push	100					; 00000064H
	call	_xmlBufCreateSize
	add	esp, 4
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+84], eax
$LN8@xmlTextRea:

; 5154 :     if (reader->buffer == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+84], 0
	jne	SHORT $LN9@xmlTextRea

; 5155 :         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CE@MNBJMFAB@xmlTextReaderSetup?5?3?5malloc?5fai@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5156 :                         "xmlTextReaderSetup : malloc failed\n");
; 5157 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN9@xmlTextRea:

; 5158 :     }
; 5159 :     /* no operation on a reader should require a huge buffer */
; 5160 :     xmlBufSetAllocationScheme(reader->buffer,

	push	5
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	_xmlBufSetAllocationScheme
	add	esp, 8

; 5161 : 			      XML_BUFFER_ALLOC_BOUNDED);
; 5162 :     if (reader->sax == NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN10@xmlTextRea

; 5163 : 	reader->sax = (xmlSAXHandler *) xmlMalloc(sizeof(xmlSAXHandler));

	mov	esi, esp
	push	128					; 00000080H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+24], eax
$LN10@xmlTextRea:

; 5164 :     if (reader->sax == NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN11@xmlTextRea

; 5165 :         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CE@MNBJMFAB@xmlTextReaderSetup?5?3?5malloc?5fai@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5166 :                         "xmlTextReaderSetup : malloc failed\n");
; 5167 :         return (-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN11@xmlTextRea:

; 5168 :     }
; 5169 :     xmlSAXVersion(reader->sax, 2);

	push	2
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlSAXVersion
	add	esp, 8

; 5170 :     reader->startElement = reader->sax->startElement;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+56]
	mov	DWORD PTR [ecx+32], edx

; 5171 :     reader->sax->startElement = xmlTextReaderStartElement;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+56], OFFSET _xmlTextReaderStartElement

; 5172 :     reader->endElement = reader->sax->endElement;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+60]
	mov	DWORD PTR [ecx+36], edx

; 5173 :     reader->sax->endElement = xmlTextReaderEndElement;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+60], OFFSET _xmlTextReaderEndElement

; 5174 : #ifdef LIBXML_SAX1_ENABLED
; 5175 :     if (reader->sax->initialized == XML_SAX2_MAGIC) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	DWORD PTR [eax+108], -554844497		; deedbeafH
	jne	SHORT $LN12@xmlTextRea

; 5176 : #endif /* LIBXML_SAX1_ENABLED */
; 5177 :         reader->startElementNs = reader->sax->startElementNs;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	mov	DWORD PTR [eax+40], ecx

; 5178 :         reader->sax->startElementNs = xmlTextReaderStartElementNs;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+116], OFFSET _xmlTextReaderStartElementNs

; 5179 :         reader->endElementNs = reader->sax->endElementNs;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+120]
	mov	DWORD PTR [eax+44], ecx

; 5180 :         reader->sax->endElementNs = xmlTextReaderEndElementNs;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+120], OFFSET _xmlTextReaderEndElementNs

; 5181 : #ifdef LIBXML_SAX1_ENABLED
; 5182 :     } else {

	jmp	SHORT $LN13@xmlTextRea
$LN12@xmlTextRea:

; 5183 :         reader->startElementNs = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 5184 :         reader->endElementNs = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+44], 0
$LN13@xmlTextRea:

; 5185 :     }
; 5186 : #endif /* LIBXML_SAX1_ENABLED */
; 5187 :     reader->characters = reader->sax->characters;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR [edx+48], eax

; 5188 :     reader->sax->characters = xmlTextReaderCharacters;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+68], OFFSET _xmlTextReaderCharacters

; 5189 :     reader->sax->ignorableWhitespace = xmlTextReaderCharacters;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+72], OFFSET _xmlTextReaderCharacters

; 5190 :     reader->cdataBlock = reader->sax->cdataBlock;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+100]
	mov	DWORD PTR [ecx+52], edx

; 5191 :     reader->sax->cdataBlock = xmlTextReaderCDataBlock;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+100], OFFSET _xmlTextReaderCDataBlock

; 5192 : 
; 5193 :     reader->mode = XML_TEXTREADER_MODE_INITIAL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx], 0

; 5194 :     reader->node = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+64], 0

; 5195 :     reader->curnode = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 5196 :     if (input != NULL) {

	cmp	DWORD PTR _input$[ebp], 0
	je	$LN14@xmlTextRea

; 5197 :         if (xmlBufUse(reader->input->buffer) < 4) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlBufUse
	add	esp, 4
	cmp	eax, 4
	jae	SHORT $LN15@xmlTextRea

; 5198 :             xmlParserInputBufferRead(input, 4);

	push	4
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_xmlParserInputBufferRead
	add	esp, 8
$LN15@xmlTextRea:

; 5199 :         }
; 5200 :         if (reader->ctxt == NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+20], 0
	jne	$LN16@xmlTextRea

; 5201 :             if (xmlBufUse(reader->input->buffer) >= 4) {

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlBufUse
	add	esp, 4
	cmp	eax, 4
	jb	SHORT $LN18@xmlTextRea

; 5202 :                 reader->ctxt = xmlCreatePushParserCtxt(reader->sax, NULL,

	mov	ecx, DWORD PTR _URL$[ebp]
	push	ecx
	push	4
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlBufContent
	add	esp, 4
	push	eax
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlCreatePushParserCtxt
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 5203 : 		       (const char *) xmlBufContent(reader->input->buffer),
; 5204 :                                       4, URL);
; 5205 :                 reader->base = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+56], 0

; 5206 :                 reader->cur = 4;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+60], 4

; 5207 :             } else {

	jmp	SHORT $LN19@xmlTextRea
$LN18@xmlTextRea:

; 5208 :                 reader->ctxt =

	mov	ecx, DWORD PTR _URL$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlCreatePushParserCtxt
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 5209 :                     xmlCreatePushParserCtxt(reader->sax, NULL, NULL, 0, URL);
; 5210 :                 reader->base = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+56], 0

; 5211 :                 reader->cur = 0;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+60], 0
$LN19@xmlTextRea:

; 5212 :             }
; 5213 :         } else {

	jmp	$LN17@xmlTextRea
$LN16@xmlTextRea:

; 5214 : 	    xmlParserInputPtr inputStream;
; 5215 : 	    xmlParserInputBufferPtr buf;
; 5216 : 	    xmlCharEncoding enc = XML_CHAR_ENCODING_NONE;

	mov	DWORD PTR _enc$2[ebp], 0

; 5217 : 
; 5218 : 	    xmlCtxtReset(reader->ctxt);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_xmlCtxtReset
	add	esp, 4

; 5219 : 	    buf = xmlAllocParserInputBuffer(enc);

	mov	eax, DWORD PTR _enc$2[ebp]
	push	eax
	call	_xmlAllocParserInputBuffer
	add	esp, 4
	mov	DWORD PTR _buf$3[ebp], eax

; 5220 : 	    if (buf == NULL) return(-1);

	cmp	DWORD PTR _buf$3[ebp], 0
	jne	SHORT $LN20@xmlTextRea
	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN20@xmlTextRea:

; 5221 : 	    inputStream = xmlNewInputStream(reader->ctxt);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	call	_xmlNewInputStream
	add	esp, 4
	mov	DWORD PTR _inputStream$4[ebp], eax

; 5222 : 	    if (inputStream == NULL) {

	cmp	DWORD PTR _inputStream$4[ebp], 0
	jne	SHORT $LN21@xmlTextRea

; 5223 : 		xmlFreeParserInputBuffer(buf);

	mov	eax, DWORD PTR _buf$3[ebp]
	push	eax
	call	_xmlFreeParserInputBuffer
	add	esp, 4

; 5224 : 		return(-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN21@xmlTextRea:

; 5225 : 	    }
; 5226 : 
; 5227 : 	    if (URL == NULL)

	cmp	DWORD PTR _URL$[ebp], 0
	jne	SHORT $LN22@xmlTextRea

; 5228 : 		inputStream->filename = NULL;

	mov	ecx, DWORD PTR _inputStream$4[ebp]
	mov	DWORD PTR [ecx+4], 0
	jmp	SHORT $LN23@xmlTextRea
$LN22@xmlTextRea:

; 5229 : 	    else
; 5230 : 		inputStream->filename = (char *)

	mov	edx, DWORD PTR _URL$[ebp]
	push	edx
	call	_xmlCanonicPath
	add	esp, 4
	mov	ecx, DWORD PTR _inputStream$4[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN23@xmlTextRea:

; 5231 : 		    xmlCanonicPath((const xmlChar *) URL);
; 5232 : 	    inputStream->buf = buf;

	mov	edx, DWORD PTR _inputStream$4[ebp]
	mov	eax, DWORD PTR _buf$3[ebp]
	mov	DWORD PTR [edx], eax

; 5233 :             xmlBufResetInput(buf->buffer, inputStream);

	mov	ecx, DWORD PTR _inputStream$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$3[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlBufResetInput
	add	esp, 8

; 5234 : 
; 5235 : 	    inputPush(reader->ctxt, inputStream);

	mov	ecx, DWORD PTR _inputStream$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_inputPush
	add	esp, 8

; 5236 : 	    reader->cur = 0;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+60], 0
$LN17@xmlTextRea:

; 5237 : 	}
; 5238 :         if (reader->ctxt == NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+20], 0
	jne	SHORT $LN14@xmlTextRea

; 5239 :             xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CE@MNBJMFAB@xmlTextReaderSetup?5?3?5malloc?5fai@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 5240 :                             "xmlTextReaderSetup : malloc failed\n");
; 5241 :             return (-1);

	or	eax, -1
	jmp	$LN1@xmlTextRea
$LN14@xmlTextRea:

; 5242 :         }
; 5243 :     }
; 5244 :     if (reader->dict != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+88], 0
	je	SHORT $LN25@xmlTextRea

; 5245 :         if (reader->ctxt->dict != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	cmp	DWORD PTR [ecx+296], 0
	je	SHORT $LN27@xmlTextRea

; 5246 : 	    if (reader->dict != reader->ctxt->dict) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	cmp	edx, DWORD PTR [eax+296]
	je	SHORT $LN29@xmlTextRea

; 5247 : 		xmlDictFree(reader->dict);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlDictFree
	add	esp, 4

; 5248 : 		reader->dict = reader->ctxt->dict;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [eax+296]
	mov	DWORD PTR [ecx+88], edx
$LN29@xmlTextRea:

; 5249 : 	    }
; 5250 : 	} else {

	jmp	SHORT $LN28@xmlTextRea
$LN27@xmlTextRea:

; 5251 : 	    reader->ctxt->dict = reader->dict;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	DWORD PTR [ecx+296], eax
$LN28@xmlTextRea:

; 5252 : 	}
; 5253 :     } else {

	jmp	SHORT $LN26@xmlTextRea
$LN25@xmlTextRea:

; 5254 : 	if (reader->ctxt->dict == NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+296], 0
	jne	SHORT $LN30@xmlTextRea

; 5255 : 	    reader->ctxt->dict = xmlDictCreate();

	call	_xmlDictCreate
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+296], eax
$LN30@xmlTextRea:

; 5256 :         reader->dict = reader->ctxt->dict;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [ecx+296]
	mov	DWORD PTR [edx+88], eax
$LN26@xmlTextRea:

; 5257 :     }
; 5258 :     reader->ctxt->_private = reader;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+272], eax

; 5259 :     reader->ctxt->linenumbers = 1;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+280], 1

; 5260 :     reader->ctxt->dictNames = 1;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+364], 1

; 5261 :     /*
; 5262 :      * use the parser dictionary to allocate all elements and attributes names
; 5263 :      */
; 5264 :     reader->ctxt->docdict = 1;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+308], 1

; 5265 :     reader->ctxt->parseMode = XML_PARSE_READER;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+436], 5

; 5266 : 
; 5267 : #ifdef LIBXML_XINCLUDE_ENABLED
; 5268 :     if (reader->xincctxt != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+164], 0
	je	SHORT $LN31@xmlTextRea

; 5269 : 	xmlXIncludeFreeContext(reader->xincctxt);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+164]
	push	edx
	call	_xmlXIncludeFreeContext
	add	esp, 4

; 5270 : 	reader->xincctxt = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+164], 0
$LN31@xmlTextRea:

; 5271 :     }
; 5272 :     if (options & XML_PARSE_XINCLUDE) {

	mov	ecx, DWORD PTR _options$[ebp]
	and	ecx, 1024				; 00000400H
	je	SHORT $LN32@xmlTextRea

; 5273 :         reader->xinclude = 1;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+156], 1

; 5274 : 	reader->xinclude_name = xmlDictLookup(reader->dict, XINCLUDE_NODE, -1);

	push	-1
	push	OFFSET ??_C@_07FHOHOHLG@include@
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+160], eax

; 5275 : 	options -= XML_PARSE_XINCLUDE;

	mov	eax, DWORD PTR _options$[ebp]
	sub	eax, 1024				; 00000400H
	mov	DWORD PTR _options$[ebp], eax

; 5276 :     } else

	jmp	SHORT $LN33@xmlTextRea
$LN32@xmlTextRea:

; 5277 :         reader->xinclude = 0;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+156], 0
$LN33@xmlTextRea:

; 5278 :     reader->in_xinclude = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+168], 0

; 5279 : #endif
; 5280 : #ifdef LIBXML_PATTERN_ENABLED
; 5281 :     if (reader->patternTab == NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+180], 0
	jne	SHORT $LN2@xmlTextRea

; 5282 :         reader->patternNr = 0;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+172], 0

; 5283 : 	reader->patternMax = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+176], 0
$LN2@xmlTextRea:

; 5284 :     }
; 5285 :     while (reader->patternNr > 0) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+172], 0
	jle	SHORT $LN3@xmlTextRea

; 5286 :         reader->patternNr--;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	sub	edx, 1
	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+172], edx

; 5287 : 	if (reader->patternTab[reader->patternNr] != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	cmp	DWORD PTR [ecx+edx*4], 0
	je	SHORT $LN35@xmlTextRea

; 5288 : 	    xmlFreePattern(reader->patternTab[reader->patternNr]);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+172]
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+180]
	mov	eax, DWORD PTR [edx+eax*4]
	push	eax
	call	_xmlFreePattern
	add	esp, 4

; 5289 :             reader->patternTab[reader->patternNr] = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+172]
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	mov	DWORD PTR [ecx+edx*4], 0
$LN35@xmlTextRea:

; 5290 : 	}
; 5291 :     }

	jmp	SHORT $LN2@xmlTextRea
$LN3@xmlTextRea:

; 5292 : #endif
; 5293 : 
; 5294 :     if (options & XML_PARSE_DTDVALID)

	mov	edx, DWORD PTR _options$[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN36@xmlTextRea

; 5295 :         reader->validate = XML_TEXTREADER_VALIDATE_DTD;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+8], 1
$LN36@xmlTextRea:

; 5296 : 
; 5297 :     xmlCtxtUseOptions(reader->ctxt, options);

	mov	ecx, DWORD PTR _options$[ebp]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_xmlCtxtUseOptions
	add	esp, 8

; 5298 :     if (encoding != NULL) {

	cmp	DWORD PTR _encoding$[ebp], 0
	je	SHORT $LN37@xmlTextRea

; 5299 :         xmlCharEncodingHandlerPtr hdlr;
; 5300 : 
; 5301 :         hdlr = xmlFindCharEncodingHandler(encoding);

	mov	ecx, DWORD PTR _encoding$[ebp]
	push	ecx
	call	_xmlFindCharEncodingHandler
	add	esp, 4
	mov	DWORD PTR _hdlr$1[ebp], eax

; 5302 :         if (hdlr != NULL)

	cmp	DWORD PTR _hdlr$1[ebp], 0
	je	SHORT $LN37@xmlTextRea

; 5303 :             xmlSwitchToEncoding(reader->ctxt, hdlr);

	mov	edx, DWORD PTR _hdlr$1[ebp]
	push	edx
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlSwitchToEncoding
	add	esp, 8
$LN37@xmlTextRea:

; 5304 :     }
; 5305 :     if ((URL != NULL) && (reader->ctxt->input != NULL) &&

	cmp	DWORD PTR _URL$[ebp], 0
	je	SHORT $LN39@xmlTextRea
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN39@xmlTextRea
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	eax, DWORD PTR [edx+36]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN39@xmlTextRea

; 5306 :         (reader->ctxt->input->filename == NULL))
; 5307 :         reader->ctxt->input->filename = (char *)

	mov	ecx, DWORD PTR _URL$[ebp]
	push	ecx
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [edx+20]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [edx+4], eax
$LN39@xmlTextRea:

; 5308 :             xmlStrdup((const xmlChar *) URL);
; 5309 : 
; 5310 :     reader->doc = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+4], 0

; 5311 : 
; 5312 :     return (0);

	xor	eax, eax
$LN1@xmlTextRea:

; 5313 : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlTextReaderSetup ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlFreeTextReader
_TEXT	SEGMENT
_i$1 = -4						; size = 4
_reader$ = 8						; size = 4
_xmlFreeTextReader PROC					; COMDAT

; 2218 : xmlFreeTextReader(xmlTextReaderPtr reader) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2219 :     if (reader == NULL)

	cmp	DWORD PTR _reader$[ebp], 0
	jne	SHORT $LN5@xmlFreeTex

; 2220 : 	return;

	jmp	$LN1@xmlFreeTex
$LN5@xmlFreeTex:

; 2221 : #ifdef LIBXML_SCHEMAS_ENABLED
; 2222 :     if (reader->rngSchemas != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+116], 0
	je	SHORT $LN6@xmlFreeTex

; 2223 : 	xmlRelaxNGFree(reader->rngSchemas);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	push	edx
	call	_xmlRelaxNGFree
	add	esp, 4

; 2224 : 	reader->rngSchemas = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+116], 0
$LN6@xmlFreeTex:

; 2225 :     }
; 2226 :     if (reader->rngValidCtxt != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+120], 0
	je	SHORT $LN7@xmlFreeTex

; 2227 : 	if (! reader->rngPreserveCtxt)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+124], 0
	jne	SHORT $LN8@xmlFreeTex

; 2228 : 	    xmlRelaxNGFreeValidCtxt(reader->rngValidCtxt);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+120]
	push	ecx
	call	_xmlRelaxNGFreeValidCtxt
	add	esp, 4
$LN8@xmlFreeTex:

; 2229 : 	reader->rngValidCtxt = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+120], 0
$LN7@xmlFreeTex:

; 2230 :     }
; 2231 :     if (reader->xsdPlug != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+152], 0
	je	SHORT $LN9@xmlFreeTex

; 2232 : 	xmlSchemaSAXUnplug(reader->xsdPlug);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+152]
	push	edx
	call	_xmlSchemaSAXUnplug
	add	esp, 4

; 2233 : 	reader->xsdPlug = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+152], 0
$LN9@xmlFreeTex:

; 2234 :     }
; 2235 :     if (reader->xsdValidCtxt != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+140], 0
	je	SHORT $LN10@xmlFreeTex

; 2236 : 	if (! reader->xsdPreserveCtxt)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+144], 0
	jne	SHORT $LN11@xmlFreeTex

; 2237 : 	    xmlSchemaFreeValidCtxt(reader->xsdValidCtxt);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	call	_xmlSchemaFreeValidCtxt
	add	esp, 4
$LN11@xmlFreeTex:

; 2238 : 	reader->xsdValidCtxt = NULL;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [edx+140], 0
$LN10@xmlFreeTex:

; 2239 :     }
; 2240 :     if (reader->xsdSchemas != NULL) {

	mov	eax, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	SHORT $LN12@xmlFreeTex

; 2241 : 	xmlSchemaFree(reader->xsdSchemas);

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	call	_xmlSchemaFree
	add	esp, 4

; 2242 : 	reader->xsdSchemas = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [eax+136], 0
$LN12@xmlFreeTex:

; 2243 :     }
; 2244 : #endif
; 2245 : #ifdef LIBXML_XINCLUDE_ENABLED
; 2246 :     if (reader->xincctxt != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+164], 0
	je	SHORT $LN13@xmlFreeTex

; 2247 : 	xmlXIncludeFreeContext(reader->xincctxt);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	call	_xmlXIncludeFreeContext
	add	esp, 4
$LN13@xmlFreeTex:

; 2248 : #endif
; 2249 : #ifdef LIBXML_PATTERN_ENABLED
; 2250 :     if (reader->patternTab != NULL) {

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+180], 0
	je	SHORT $LN14@xmlFreeTex

; 2251 :         int i;
; 2252 : 	for (i = 0;i < reader->patternNr;i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@xmlFreeTex
$LN2@xmlFreeTex:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@xmlFreeTex:
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR [eax+172]
	jge	SHORT $LN3@xmlFreeTex

; 2253 : 	    if (reader->patternTab[i] != NULL)

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN15@xmlFreeTex

; 2254 : 	        xmlFreePattern(reader->patternTab[i]);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+180]
	mov	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_xmlFreePattern
	add	esp, 4
$LN15@xmlFreeTex:

; 2255 : 	}

	jmp	SHORT $LN2@xmlFreeTex
$LN3@xmlFreeTex:

; 2256 : 	xmlFree(reader->patternTab);

	mov	esi, esp
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+180]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@xmlFreeTex:

; 2257 :     }
; 2258 : #endif
; 2259 :     if (reader->faketext != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+76], 0
	je	SHORT $LN16@xmlFreeTex

; 2260 : 	xmlFreeNode(reader->faketext);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	push	ecx
	call	_xmlFreeNode
	add	esp, 4
$LN16@xmlFreeTex:

; 2261 :     }
; 2262 :     if (reader->ctxt != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	$LN17@xmlFreeTex

; 2263 :         if (reader->dict == reader->ctxt->dict)

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+88]
	cmp	eax, DWORD PTR [ecx+296]
	jne	SHORT $LN18@xmlFreeTex

; 2264 : 	    reader->dict = NULL;

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	DWORD PTR [ecx+88], 0
$LN18@xmlFreeTex:

; 2265 : 	if (reader->ctxt->myDoc != NULL) {

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN19@xmlFreeTex

; 2266 : 	    if (reader->preserve == 0)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+80], 0
	jne	SHORT $LN20@xmlFreeTex

; 2267 : 		xmlTextReaderFreeDoc(reader, reader->ctxt->myDoc);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _reader$[ebp]
	push	edx
	call	_xmlTextReaderFreeDoc
	add	esp, 8
$LN20@xmlFreeTex:

; 2268 : 	    reader->ctxt->myDoc = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+8], 0
$LN19@xmlFreeTex:

; 2269 : 	}
; 2270 : 	if ((reader->ctxt->vctxt.vstateTab != NULL) &&

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	DWORD PTR [eax+160], 0
	je	SHORT $LN21@xmlFreeTex
	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+156], 0
	jle	SHORT $LN21@xmlFreeTex

; 2271 : 	    (reader->ctxt->vctxt.vstateMax > 0)){
; 2272 : 	    xmlFree(reader->ctxt->vctxt.vstateTab);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	esi, esp
	mov	edx, DWORD PTR [ecx+160]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2273 : 	    reader->ctxt->vctxt.vstateTab = NULL;

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+160], 0

; 2274 : 	    reader->ctxt->vctxt.vstateMax = 0;

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+156], 0
$LN21@xmlFreeTex:

; 2275 : 	}
; 2276 : 	if (reader->allocs & XML_TEXTREADER_CTXT)

	mov	ecx, DWORD PTR _reader$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	and	edx, 2
	je	SHORT $LN17@xmlFreeTex

; 2277 : 	    xmlFreeParserCtxt(reader->ctxt);

	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlFreeParserCtxt
	add	esp, 4
$LN17@xmlFreeTex:

; 2278 :     }
; 2279 :     if (reader->sax != NULL)

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN23@xmlFreeTex

; 2280 : 	xmlFree(reader->sax);

	mov	esi, esp
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN23@xmlFreeTex:

; 2281 :     if ((reader->input != NULL)  && (reader->allocs & XML_TEXTREADER_INPUT))

	mov	edx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [edx+28], 0
	je	SHORT $LN24@xmlFreeTex
	mov	eax, DWORD PTR _reader$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	and	ecx, 1
	je	SHORT $LN24@xmlFreeTex

; 2282 : 	xmlFreeParserInputBuffer(reader->input);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	call	_xmlFreeParserInputBuffer
	add	esp, 4
$LN24@xmlFreeTex:

; 2283 :     if (reader->buffer != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+84], 0
	je	SHORT $LN25@xmlFreeTex

; 2284 :         xmlBufFree(reader->buffer);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+84]
	push	eax
	call	_xmlBufFree
	add	esp, 4
$LN25@xmlFreeTex:

; 2285 :     if (reader->entTab != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+104], 0
	je	SHORT $LN26@xmlFreeTex

; 2286 : 	xmlFree(reader->entTab);

	mov	esi, esp
	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+104]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN26@xmlFreeTex:

; 2287 :     if (reader->dict != NULL)

	mov	ecx, DWORD PTR _reader$[ebp]
	cmp	DWORD PTR [ecx+88], 0
	je	SHORT $LN27@xmlFreeTex

; 2288 :         xmlDictFree(reader->dict);

	mov	edx, DWORD PTR _reader$[ebp]
	mov	eax, DWORD PTR [edx+88]
	push	eax
	call	_xmlDictFree
	add	esp, 4
$LN27@xmlFreeTex:

; 2289 :     xmlFree(reader);

	mov	esi, esp
	mov	ecx, DWORD PTR _reader$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlFreeTex:

; 2290 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlFreeTextReader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlNewTextReaderFilename
_TEXT	SEGMENT
_directory$ = -12					; size = 4
_ret$ = -8						; size = 4
_input$ = -4						; size = 4
_URI$ = 8						; size = 4
_xmlNewTextReaderFilename PROC				; COMDAT

; 2188 : xmlNewTextReaderFilename(const char *URI) {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2189 :     xmlParserInputBufferPtr input;
; 2190 :     xmlTextReaderPtr ret;
; 2191 :     char *directory = NULL;

	mov	DWORD PTR _directory$[ebp], 0

; 2192 : 
; 2193 :     input = xmlParserInputBufferCreateFilename(URI, XML_CHAR_ENCODING_NONE);

	push	0
	mov	eax, DWORD PTR _URI$[ebp]
	push	eax
	call	_xmlParserInputBufferCreateFilename
	add	esp, 8
	mov	DWORD PTR _input$[ebp], eax

; 2194 :     if (input == NULL)

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN2@xmlNewText

; 2195 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlNewText
$LN2@xmlNewText:

; 2196 :     ret = xmlNewTextReader(input, URI);

	mov	ecx, DWORD PTR _URI$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_xmlNewTextReader
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 2197 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@xmlNewText

; 2198 : 	xmlFreeParserInputBuffer(input);

	mov	eax, DWORD PTR _input$[ebp]
	push	eax
	call	_xmlFreeParserInputBuffer
	add	esp, 4

; 2199 : 	return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlNewText
$LN3@xmlNewText:

; 2200 :     }
; 2201 :     ret->allocs |= XML_TEXTREADER_INPUT;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	or	edx, 1
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+12], edx

; 2202 :     if (ret->ctxt->directory == NULL)

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+180], 0
	jne	SHORT $LN4@xmlNewText

; 2203 :         directory = xmlParserGetDirectory(URI);

	mov	eax, DWORD PTR _URI$[ebp]
	push	eax
	call	_xmlParserGetDirectory
	add	esp, 4
	mov	DWORD PTR _directory$[ebp], eax
$LN4@xmlNewText:

; 2204 :     if ((ret->ctxt->directory == NULL) && (directory != NULL))

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+180], 0
	jne	SHORT $LN5@xmlNewText
	cmp	DWORD PTR _directory$[ebp], 0
	je	SHORT $LN5@xmlNewText

; 2205 :         ret->ctxt->directory = (char *) xmlStrdup((xmlChar *) directory);

	mov	eax, DWORD PTR _directory$[ebp]
	push	eax
	call	_xmlStrdup
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+180], eax
$LN5@xmlNewText:

; 2206 :     if (directory != NULL)

	cmp	DWORD PTR _directory$[ebp], 0
	je	SHORT $LN6@xmlNewText

; 2207 : 	xmlFree(directory);

	mov	esi, esp
	mov	eax, DWORD PTR _directory$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlNewText:

; 2208 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlNewText:

; 2209 : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlNewTextReaderFilename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\xmlreader.c
;	COMDAT _xmlNewTextReader
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_input$ = 8						; size = 4
_URI$ = 12						; size = 4
_xmlNewTextReader PROC					; COMDAT

; 2074 : xmlNewTextReader(xmlParserInputBufferPtr input, const char *URI) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __BC13D883_xmlreader@c
	call	@__CheckForDebuggerJustMyCode@4

; 2075 :     xmlTextReaderPtr ret;
; 2076 : 
; 2077 :     if (input == NULL)

	cmp	DWORD PTR _input$[ebp], 0
	jne	SHORT $LN2@xmlNewText

; 2078 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlNewText
$LN2@xmlNewText:

; 2079 :     ret = xmlMalloc(sizeof(xmlTextReader));

	mov	esi, esp
	push	196					; 000000c4H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 2080 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@xmlNewText

; 2081 :         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CC@HCDAIILG@xmlNewTextReader?5?3?5malloc?5faile@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2082 : 		"xmlNewTextReader : malloc failed\n");
; 2083 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlNewText
$LN3@xmlNewText:

; 2084 :     }
; 2085 :     memset(ret, 0, sizeof(xmlTextReader));

	push	196					; 000000c4H
	push	0
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH

; 2086 :     ret->doc = NULL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+4], 0

; 2087 :     ret->entTab = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+104], 0

; 2088 :     ret->entMax = 0;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+100], 0

; 2089 :     ret->entNr = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+96], 0

; 2090 :     ret->input = input;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _input$[ebp]
	mov	DWORD PTR [ecx+28], edx

; 2091 :     ret->buffer = xmlBufCreateSize(100);

	push	100					; 00000064H
	call	_xmlBufCreateSize
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 2092 :     if (ret->buffer == NULL) {

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+84], 0
	jne	SHORT $LN4@xmlNewText

; 2093 :         xmlFree(ret);

	mov	esi, esp
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2094 :         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CC@HCDAIILG@xmlNewTextReader?5?3?5malloc?5faile@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2095 : 		"xmlNewTextReader : malloc failed\n");
; 2096 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlNewText
$LN4@xmlNewText:

; 2097 :     }
; 2098 :     /* no operation on a reader should require a huge buffer */
; 2099 :     xmlBufSetAllocationScheme(ret->buffer,

	push	5
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	call	_xmlBufSetAllocationScheme
	add	esp, 8

; 2100 : 			      XML_BUFFER_ALLOC_BOUNDED);
; 2101 :     ret->sax = (xmlSAXHandler *) xmlMalloc(sizeof(xmlSAXHandler));

	mov	esi, esp
	push	128					; 00000080H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], eax

; 2102 :     if (ret->sax == NULL) {

	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+24], 0
	jne	SHORT $LN5@xmlNewText

; 2103 : 	xmlBufFree(ret->buffer);

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	call	_xmlBufFree
	add	esp, 4

; 2104 : 	xmlFree(ret);

	mov	esi, esp
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2105 :         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CC@HCDAIILG@xmlNewTextReader?5?3?5malloc?5faile@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2106 : 		"xmlNewTextReader : malloc failed\n");
; 2107 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlNewText
$LN5@xmlNewText:

; 2108 :     }
; 2109 :     xmlSAXVersion(ret->sax, 2);

	push	2
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlSAXVersion
	add	esp, 8

; 2110 :     ret->startElement = ret->sax->startElement;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [eax+56]
	mov	DWORD PTR [ecx+32], edx

; 2111 :     ret->sax->startElement = xmlTextReaderStartElement;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+56], OFFSET _xmlTextReaderStartElement

; 2112 :     ret->endElement = ret->sax->endElement;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [eax+60]
	mov	DWORD PTR [ecx+36], edx

; 2113 :     ret->sax->endElement = xmlTextReaderEndElement;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+60], OFFSET _xmlTextReaderEndElement

; 2114 : #ifdef LIBXML_SAX1_ENABLED
; 2115 :     if (ret->sax->initialized == XML_SAX2_MAGIC) {

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+24]
	cmp	DWORD PTR [eax+108], -554844497		; deedbeafH
	jne	SHORT $LN6@xmlNewText

; 2116 : #endif /* LIBXML_SAX1_ENABLED */
; 2117 : 	ret->startElementNs = ret->sax->startElementNs;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [edx+116]
	mov	DWORD PTR [eax+40], ecx

; 2118 : 	ret->sax->startElementNs = xmlTextReaderStartElementNs;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+116], OFFSET _xmlTextReaderStartElementNs

; 2119 : 	ret->endElementNs = ret->sax->endElementNs;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [edx+120]
	mov	DWORD PTR [eax+44], ecx

; 2120 : 	ret->sax->endElementNs = xmlTextReaderEndElementNs;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [eax+120], OFFSET _xmlTextReaderEndElementNs

; 2121 : #ifdef LIBXML_SAX1_ENABLED
; 2122 :     } else {

	jmp	SHORT $LN7@xmlNewText
$LN6@xmlNewText:

; 2123 : 	ret->startElementNs = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+40], 0

; 2124 : 	ret->endElementNs = NULL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+44], 0
$LN7@xmlNewText:

; 2125 :     }
; 2126 : #endif /* LIBXML_SAX1_ENABLED */
; 2127 :     ret->characters = ret->sax->characters;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR [edx+48], eax

; 2128 :     ret->sax->characters = xmlTextReaderCharacters;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [edx+68], OFFSET _xmlTextReaderCharacters

; 2129 :     ret->sax->ignorableWhitespace = xmlTextReaderCharacters;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+72], OFFSET _xmlTextReaderCharacters

; 2130 :     ret->cdataBlock = ret->sax->cdataBlock;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [eax+100]
	mov	DWORD PTR [ecx+52], edx

; 2131 :     ret->sax->cdataBlock = xmlTextReaderCDataBlock;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [ecx+100], OFFSET _xmlTextReaderCDataBlock

; 2132 : 
; 2133 :     ret->mode = XML_TEXTREADER_MODE_INITIAL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], 0

; 2134 :     ret->node = NULL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+64], 0

; 2135 :     ret->curnode = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+68], 0

; 2136 :     if (xmlBufUse(ret->input->buffer) < 4) {

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlBufUse
	add	esp, 4
	cmp	eax, 4
	jae	SHORT $LN8@xmlNewText

; 2137 : 	xmlParserInputBufferRead(input, 4);

	push	4
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	call	_xmlParserInputBufferRead
	add	esp, 8
$LN8@xmlNewText:

; 2138 :     }
; 2139 :     if (xmlBufUse(ret->input->buffer) >= 4) {

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	call	_xmlBufUse
	add	esp, 4
	cmp	eax, 4
	jb	SHORT $LN9@xmlNewText

; 2140 : 	ret->ctxt = xmlCreatePushParserCtxt(ret->sax, NULL,

	mov	eax, DWORD PTR _URI$[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlBufContent
	add	esp, 4
	push	eax
	push	0
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlCreatePushParserCtxt
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 2141 : 			     (const char *) xmlBufContent(ret->input->buffer),
; 2142 :                                             4, URI);
; 2143 : 	ret->base = 0;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+56], 0

; 2144 : 	ret->cur = 4;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+60], 4

; 2145 :     } else {

	jmp	SHORT $LN10@xmlNewText
$LN9@xmlNewText:

; 2146 : 	ret->ctxt = xmlCreatePushParserCtxt(ret->sax, NULL, NULL, 0, URI);

	mov	ecx, DWORD PTR _URI$[ebp]
	push	ecx
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlCreatePushParserCtxt
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+20], eax

; 2147 : 	ret->base = 0;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+56], 0

; 2148 : 	ret->cur = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+60], 0
$LN10@xmlNewText:

; 2149 :     }
; 2150 : 
; 2151 :     if (ret->ctxt == NULL) {

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+20], 0
	jne	SHORT $LN11@xmlNewText

; 2152 :         xmlGenericError(xmlGenericErrorContext,

	mov	esi, esp
	push	OFFSET ??_C@_0CC@HCDAIILG@xmlNewTextReader?5?3?5malloc?5faile@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2153 : 		"xmlNewTextReader : malloc failed\n");
; 2154 : 	xmlBufFree(ret->buffer);

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+84]
	push	edx
	call	_xmlBufFree
	add	esp, 4

; 2155 : 	xmlFree(ret->sax);

	mov	esi, esp
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2156 : 	xmlFree(ret);

	mov	esi, esp
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 2157 : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlNewText
$LN11@xmlNewText:

; 2158 :     }
; 2159 :     ret->ctxt->parseMode = XML_PARSE_READER;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+436], 5

; 2160 :     ret->ctxt->_private = ret;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+272], ecx

; 2161 :     ret->ctxt->linenumbers = 1;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR [eax+280], 1

; 2162 :     ret->ctxt->dictNames = 1;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+364], 1

; 2163 :     ret->allocs = XML_TEXTREADER_CTXT;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+12], 2

; 2164 :     /*
; 2165 :      * use the parser dictionary to allocate all elements and attributes names
; 2166 :      */
; 2167 :     ret->ctxt->docdict = 1;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+308], 1

; 2168 :     ret->dict = ret->ctxt->dict;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [ecx+296]
	mov	DWORD PTR [edx+88], eax

; 2169 : #ifdef LIBXML_XINCLUDE_ENABLED
; 2170 :     ret->xinclude = 0;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+156], 0

; 2171 : #endif
; 2172 : #ifdef LIBXML_PATTERN_ENABLED
; 2173 :     ret->patternMax = 0;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+176], 0

; 2174 :     ret->patternTab = NULL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+180], 0

; 2175 : #endif
; 2176 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlNewText:

; 2177 : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlNewTextReader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _printf
_TEXT	SEGMENT
__Format$ = -16						; size = 4
__Stream$ = -12						; size = 4
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT

; 954  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A452D4A0_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 955  :         int _Result;
; 956  :         va_list _ArgList;
; 957  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __Format$[ebp]
	mov	DWORD PTR __Format$[ebp], ecx
	mov	esi, esp
	push	1
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Stream$[ebp], eax

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	edx, DWORD PTR __ArgList$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR __Format$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Stream$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 958  :         _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	DWORD PTR __Result$[ebp], eax

; 959  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 960  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 961  :     }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __2CC6E67D_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
