; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27027.1 

	TITLE	C:\Users\DAG\Documents\_Clients\CodeProject Authors Group\Windows on ARM\libxml2\libxml2-2.9.9\schematron.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0CF@CBADNNMC@http?3?1?1purl?4oclc?4org?1dsdl?1schem@ ; `string'
PUBLIC	??_C@_0CD@PAAIHHGB@http?3?1?1www?4ascc?4net?1xml?1schemat@ ; `string'
_DATA	SEGMENT
COMM	_xmlMalloc:DWORD
COMM	_xmlMallocAtomic:DWORD
COMM	_xmlRealloc:DWORD
COMM	_xmlFree:DWORD
COMM	_xmlMemStrdup:DWORD
COMM	_xmlXPathNAN:QWORD
COMM	_xmlXPathPINF:QWORD
COMM	_xmlXPathNINF:QWORD
COMM	_forbiddenExp:DWORD
COMM	_emptyExp:DWORD
_DATA	ENDS
msvcjmc	SEGMENT
__188180DA_corecrt_math@h DB 01H
__2CC6E67D_corecrt_stdio_config@h DB 01H
__05476D76_corecrt_wstdio@h DB 01H
__A452D4A0_stdio@h DB 01H
__4384A2D9_corecrt_memcpy_s@h DB 01H
__4E51A221_corecrt_wstring@h DB 01H
__2140C079_string@h DB 01H
__D7D5901C_schematron@c DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_0CD@PAAIHHGB@http?3?1?1www?4ascc?4net?1xml?1schemat@
CONST	SEGMENT
??_C@_0CD@PAAIHHGB@http?3?1?1www?4ascc?4net?1xml?1schemat@ DB 'http://www'
	DB	'.ascc.net/xml/schematron', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CBADNNMC@http?3?1?1purl?4oclc?4org?1dsdl?1schem@
CONST	SEGMENT
??_C@_0CF@CBADNNMC@http?3?1?1purl?4oclc?4org?1dsdl?1schem@ DB 'http://pur'
	DB	'l.oclc.org/dsdl/schematron', 00H		; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_fprintf
PUBLIC	_snprintf
PUBLIC	_xmlSchematronNewParserCtxt
PUBLIC	_xmlSchematronNewMemParserCtxt
PUBLIC	_xmlSchematronNewDocParserCtxt
PUBLIC	_xmlSchematronFreeParserCtxt
PUBLIC	_xmlSchematronParse
PUBLIC	_xmlSchematronFree
PUBLIC	_xmlSchematronSetValidStructuredErrors
PUBLIC	_xmlSchematronNewValidCtxt
PUBLIC	_xmlSchematronFreeValidCtxt
PUBLIC	_xmlSchematronValidateDoc
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0CF@CDHGHDAB@Failed?5to?5compile?5test?5expressi@ ; `string'
PUBLIC	??_C@_0BH@EFIEABMK@allocating?5schema?5test@	; `string'
PUBLIC	??_C@_0CI@BJKODKAC@Failed?5to?5compile?5context?5expre@ ; `string'
PUBLIC	??_C@_0BH@NOHOGEKI@allocating?5schema?5rule@	; `string'
PUBLIC	??_C@_0BK@KCAFICNM@allocating?5schema?5pattern@	; `string'
PUBLIC	??_C@_0BC@BFLACGOA@allocating?5schema@		; `string'
PUBLIC	??_C@_0CB@NCMLFNIB@allocating?5schema?5parser?5contex@ ; `string'
PUBLIC	??_C@_0CH@JIEMFKIC@allocating?5schema?5parser?5XPath?5@ ; `string'
PUBLIC	??_C@_0BN@GJJHFKFH@allocating?5parser?5namespaces@ ; `string'
PUBLIC	??_C@_07JKKCBBMM@context@			; `string'
PUBLIC	??_C@_0BO@OOKBPBKF@rule?5has?5no?5context?5attribute@ ; `string'
PUBLIC	??_C@_0CE@PPHKJDMN@rule?5has?5an?5empty?5context?5attri@ ; `string'
PUBLIC	??_C@_06GMEIIFFN@assert@			; `string'
PUBLIC	??_C@_04CEJDCDCH@test@				; `string'
PUBLIC	??_C@_0BN@CLPNCGJA@assert?5has?5no?5test?5attribute@ ; `string'
PUBLIC	??_C@_0CD@COBAHICO@assert?5has?5an?5empty?5test?5attrib@ ; `string'
PUBLIC	??_C@_06MHOMHIDM@report@			; `string'
PUBLIC	??_C@_0DG@GPEPPHEL@Expecting?5an?5assert?5or?5a?5report@ ; `string'
PUBLIC	??_C@_0CG@GJJAJNIB@rule?5has?5no?5assert?5nor?5report?5e@ ; `string'
PUBLIC	??_C@_02EGCJHIOB@id@				; `string'
PUBLIC	??_C@_04MEMAJGDJ@name@				; `string'
PUBLIC	??_C@_04LPGJEGEF@rule@				; `string'
PUBLIC	??_C@_0CH@HMMHEKDJ@Expecting?5a?5rule?5element?5instea@ ; `string'
PUBLIC	??_C@_0BM@HPHJEBHK@Pattern?5has?5no?5rule?5element@ ; `string'
PUBLIC	??_C@_0CK@FENMHHNI@xmlSchematronParse?3?5could?5not?5l@ ; `string'
PUBLIC	??_C@_0CG@KJCFFGDH@xmlSchematronParse?3?5could?5not?5p@ ; `string'
PUBLIC	??_C@_0BB@IEONCAEH@in_memory_buffer@		; `string'
PUBLIC	??_C@_0CF@CKMAMFKI@The?5schema?5has?5no?5document?5elem@ ; `string'
PUBLIC	??_C@_06KICAKOOL@schema@			; `string'
PUBLIC	??_C@_0DH@PDEEDFDL@The?5XML?5document?5?8?$CFs?8?5is?5not?5a?5@ ; `string'
PUBLIC	??_C@_05PHLGJONK@title@				; `string'
PUBLIC	??_C@_02EGOFOKPC@ns@				; `string'
PUBLIC	??_C@_06CHGOAPND@prefix@			; `string'
PUBLIC	??_C@_03GBBABMJN@uri@				; `string'
PUBLIC	??_C@_0BG@GCEGAJCF@ns?5element?5has?5no?5uri@	; `string'
PUBLIC	??_C@_0BJ@FJJOLCKN@ns?5element?5has?5no?5prefix@ ; `string'
PUBLIC	??_C@_07CHFOACKJ@pattern@			; `string'
PUBLIC	??_C@_0CK@GKEBAOHO@Expecting?5a?5pattern?5element?5ins@ ; `string'
PUBLIC	??_C@_0CM@EHOBNHNH@The?5schematron?5document?5?8?$CFs?8?5ha@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_04LNEJFJGI@path@				; `string'
PUBLIC	??_C@_01JLIPDDHJ@?3@				; `string'
PUBLIC	??_C@_0GM@OEFFILND@c?3?2users?2dag?2documents?2_clients@ ; `string'
PUBLIC	??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@ ; `string'
PUBLIC	??_C@_0BD@IJCBIFPI@node?5failed?5assert@	; `string'
PUBLIC	??_C@_0BD@CCIFHIJJ@node?5failed?5report@	; `string'
PUBLIC	??_C@_0BB@HNMKNBOB@?$CFs?5line?5?$CFld?3?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0N@IHDDKFAG@Pattern?3?5?$CFs?6@		; `string'
PUBLIC	??_C@_0BO@JGCBGKGF@allocating?5validation?5context@ ; `string'
PUBLIC	__real@0000000000000000
EXTRN	_xmlStrdup:PROC
EXTRN	_xmlStrEqual:PROC
EXTRN	_xmlStrlen:PROC
EXTRN	_xmlStrcat:PROC
EXTRN	__imp____acrt_iob_func:PROC
EXTRN	__imp____stdio_common_vfprintf:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	_xmlDictCreate:PROC
EXTRN	_xmlDictReference:PROC
EXTRN	_xmlDictFree:PROC
EXTRN	_xmlDictLookup:PROC
EXTRN	_xmlFreeDoc:PROC
EXTRN	_xmlGetLineNo:PROC
EXTRN	_xmlGetNodePath:PROC
EXTRN	_xmlDocGetRootElement:PROC
EXTRN	_xmlGetNoNsProp:PROC
EXTRN	_xmlNodeGetContent:PROC
EXTRN	___xmlRaiseError:PROC
EXTRN	___xmlSimpleError:PROC
EXTRN	___xmlGenericError:PROC
EXTRN	___xmlGenericErrorContext:PROC
EXTRN	_xmlReadFile:PROC
EXTRN	_xmlReadMemory:PROC
EXTRN	_xmlXPathFreeObject:PROC
EXTRN	_xmlXPathNewContext:PROC
EXTRN	_xmlXPathFreeContext:PROC
EXTRN	_xmlXPathEval:PROC
EXTRN	_xmlXPathCtxtCompile:PROC
EXTRN	_xmlXPathCompiledEval:PROC
EXTRN	_xmlXPathFreeCompExpr:PROC
EXTRN	_xmlXPathIsNaN:PROC
EXTRN	_xmlXPathRegisterNs:PROC
EXTRN	_xmlFreePattern:PROC
EXTRN	_xmlPatterncompile:PROC
EXTRN	_xmlPatternMatch:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BO@JGCBGKGF@allocating?5validation?5context@
CONST	SEGMENT
??_C@_0BO@JGCBGKGF@allocating?5validation?5context@ DB 'allocating valida'
	DB	'tion context', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IHDDKFAG@Pattern?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0N@IHDDKFAG@Pattern?3?5?$CFs?6@ DB 'Pattern: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HNMKNBOB@?$CFs?5line?5?$CFld?3?5?$CFs?6@
CONST	SEGMENT
??_C@_0BB@HNMKNBOB@?$CFs?5line?5?$CFld?3?5?$CFs?6@ DB '%s line %ld: %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CCIFHIJJ@node?5failed?5report@
CONST	SEGMENT
??_C@_0BD@CCIFHIJJ@node?5failed?5report@ DB 'node failed report', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IJCBIFPI@node?5failed?5assert@
CONST	SEGMENT
??_C@_0BD@IJCBIFPI@node?5failed?5assert@ DB 'node failed assert', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
CONST	SEGMENT
??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@ DB 'Unimplem'
	DB	'ented block at %s:%d', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@OEFFILND@c?3?2users?2dag?2documents?2_clients@
CONST	SEGMENT
??_C@_0GM@OEFFILND@c?3?2users?2dag?2documents?2_clients@ DB 'c:\users\dag'
	DB	'\documents\_clients\codeproject authors group\windows on arm\'
	DB	'libxml2\libxml2-2.9.9\schematron.c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01JLIPDDHJ@?3@
CONST	SEGMENT
??_C@_01JLIPDDHJ@?3@ DB ':', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNEJFJGI@path@
CONST	SEGMENT
??_C@_04LNEJFJGI@path@ DB 'path', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EHOBNHNH@The?5schematron?5document?5?8?$CFs?8?5ha@
CONST	SEGMENT
??_C@_0CM@EHOBNHNH@The?5schematron?5document?5?8?$CFs?8?5ha@ DB 'The sche'
	DB	'matron document ''%s'' has no pattern', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@GKEBAOHO@Expecting?5a?5pattern?5element?5ins@
CONST	SEGMENT
??_C@_0CK@GKEBAOHO@Expecting?5a?5pattern?5element?5ins@ DB 'Expecting a p'
	DB	'attern element instead of %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CHFOACKJ@pattern@
CONST	SEGMENT
??_C@_07CHFOACKJ@pattern@ DB 'pattern', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@FJJOLCKN@ns?5element?5has?5no?5prefix@
CONST	SEGMENT
??_C@_0BJ@FJJOLCKN@ns?5element?5has?5no?5prefix@ DB 'ns element has no pr'
	DB	'efix', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GCEGAJCF@ns?5element?5has?5no?5uri@
CONST	SEGMENT
??_C@_0BG@GCEGAJCF@ns?5element?5has?5no?5uri@ DB 'ns element has no uri', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GBBABMJN@uri@
CONST	SEGMENT
??_C@_03GBBABMJN@uri@ DB 'uri', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHGOAPND@prefix@
CONST	SEGMENT
??_C@_06CHGOAPND@prefix@ DB 'prefix', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGOFOKPC@ns@
CONST	SEGMENT
??_C@_02EGOFOKPC@ns@ DB 'ns', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PHLGJONK@title@
CONST	SEGMENT
??_C@_05PHLGJONK@title@ DB 'title', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@PDEEDFDL@The?5XML?5document?5?8?$CFs?8?5is?5not?5a?5@
CONST	SEGMENT
??_C@_0DH@PDEEDFDL@The?5XML?5document?5?8?$CFs?8?5is?5not?5a?5@ DB 'The X'
	DB	'ML document ''%s'' is not a XML schematron document', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KICAKOOL@schema@
CONST	SEGMENT
??_C@_06KICAKOOL@schema@ DB 'schema', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CKMAMFKI@The?5schema?5has?5no?5document?5elem@
CONST	SEGMENT
??_C@_0CF@CKMAMFKI@The?5schema?5has?5no?5document?5elem@ DB 'The schema h'
	DB	'as no document element.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IEONCAEH@in_memory_buffer@
CONST	SEGMENT
??_C@_0BB@IEONCAEH@in_memory_buffer@ DB 'in_memory_buffer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KJCFFGDH@xmlSchematronParse?3?5could?5not?5p@
CONST	SEGMENT
??_C@_0CG@KJCFFGDH@xmlSchematronParse?3?5could?5not?5p@ DB 'xmlSchematron'
	DB	'Parse: could not parse.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FENMHHNI@xmlSchematronParse?3?5could?5not?5l@
CONST	SEGMENT
??_C@_0CK@FENMHHNI@xmlSchematronParse?3?5could?5not?5l@ DB 'xmlSchematron'
	DB	'Parse: could not load ''%s''.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HPHJEBHK@Pattern?5has?5no?5rule?5element@
CONST	SEGMENT
??_C@_0BM@HPHJEBHK@Pattern?5has?5no?5rule?5element@ DB 'Pattern has no ru'
	DB	'le element', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HMMHEKDJ@Expecting?5a?5rule?5element?5instea@
CONST	SEGMENT
??_C@_0CH@HMMHEKDJ@Expecting?5a?5rule?5element?5instea@ DB 'Expecting a r'
	DB	'ule element instead of %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LPGJEGEF@rule@
CONST	SEGMENT
??_C@_04LPGJEGEF@rule@ DB 'rule', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name@ DB 'name', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id@
CONST	SEGMENT
??_C@_02EGCJHIOB@id@ DB 'id', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GJJAJNIB@rule?5has?5no?5assert?5nor?5report?5e@
CONST	SEGMENT
??_C@_0CG@GJJAJNIB@rule?5has?5no?5assert?5nor?5report?5e@ DB 'rule has no'
	DB	' assert nor report element', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@GPEPPHEL@Expecting?5an?5assert?5or?5a?5report@
CONST	SEGMENT
??_C@_0DG@GPEPPHEL@Expecting?5an?5assert?5or?5a?5report@ DB 'Expecting an'
	DB	' assert or a report element instead of %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MHOMHIDM@report@
CONST	SEGMENT
??_C@_06MHOMHIDM@report@ DB 'report', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@COBAHICO@assert?5has?5an?5empty?5test?5attrib@
CONST	SEGMENT
??_C@_0CD@COBAHICO@assert?5has?5an?5empty?5test?5attrib@ DB 'assert has a'
	DB	'n empty test attribute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CLPNCGJA@assert?5has?5no?5test?5attribute@
CONST	SEGMENT
??_C@_0BN@CLPNCGJA@assert?5has?5no?5test?5attribute@ DB 'assert has no te'
	DB	'st attribute', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEJDCDCH@test@
CONST	SEGMENT
??_C@_04CEJDCDCH@test@ DB 'test', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GMEIIFFN@assert@
CONST	SEGMENT
??_C@_06GMEIIFFN@assert@ DB 'assert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@PPHKJDMN@rule?5has?5an?5empty?5context?5attri@
CONST	SEGMENT
??_C@_0CE@PPHKJDMN@rule?5has?5an?5empty?5context?5attri@ DB 'rule has an '
	DB	'empty context attribute', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OOKBPBKF@rule?5has?5no?5context?5attribute@
CONST	SEGMENT
??_C@_0BO@OOKBPBKF@rule?5has?5no?5context?5attribute@ DB 'rule has no con'
	DB	'text attribute', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKKCBBMM@context@
CONST	SEGMENT
??_C@_07JKKCBBMM@context@ DB 'context', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GJJHFKFH@allocating?5parser?5namespaces@
CONST	SEGMENT
??_C@_0BN@GJJHFKFH@allocating?5parser?5namespaces@ DB 'allocating parser '
	DB	'namespaces', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@JIEMFKIC@allocating?5schema?5parser?5XPath?5@
CONST	SEGMENT
??_C@_0CH@JIEMFKIC@allocating?5schema?5parser?5XPath?5@ DB 'allocating sc'
	DB	'hema parser XPath context', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NCMLFNIB@allocating?5schema?5parser?5contex@
CONST	SEGMENT
??_C@_0CB@NCMLFNIB@allocating?5schema?5parser?5contex@ DB 'allocating sch'
	DB	'ema parser context', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BFLACGOA@allocating?5schema@
CONST	SEGMENT
??_C@_0BC@BFLACGOA@allocating?5schema@ DB 'allocating schema', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KCAFICNM@allocating?5schema?5pattern@
CONST	SEGMENT
??_C@_0BK@KCAFICNM@allocating?5schema?5pattern@ DB 'allocating schema pat'
	DB	'tern', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NOHOGEKI@allocating?5schema?5rule@
CONST	SEGMENT
??_C@_0BH@NOHOGEKI@allocating?5schema?5rule@ DB 'allocating schema rule', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BJKODKAC@Failed?5to?5compile?5context?5expre@
CONST	SEGMENT
??_C@_0CI@BJKODKAC@Failed?5to?5compile?5context?5expre@ DB 'Failed to com'
	DB	'pile context expression %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EFIEABMK@allocating?5schema?5test@
CONST	SEGMENT
??_C@_0BH@EFIEABMK@allocating?5schema?5test@ DB 'allocating schema test', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CDHGHDAB@Failed?5to?5compile?5test?5expressi@
CONST	SEGMENT
??_C@_0CF@CDHGHDAB@Failed?5to?5compile?5test?5expressi@ DB 'Failed to com'
	DB	'pile test expression %s', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
_xmlSchematronNs DD FLAT:??_C@_0CF@CBADNNMC@http?3?1?1purl?4oclc?4org?1dsdl?1schem@
_xmlOldSchematronNs DD FLAT:??_C@_0CD@PAAIHHGB@http?3?1?1www?4ascc?4net?1xml?1schemat@
_DATA	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	push	ebp
	mov	ebp, esp
	pop	ebp
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronRunTest
_TEXT	SEGMENT
tv153 = -24						; size = 4
tv146 = -20						; size = 4
tv83 = -16						; size = 4
tv75 = -12						; size = 4
_failed$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_test$ = 12						; size = 4
_instance$ = 16						; size = 4
_cur$ = 20						; size = 4
_pattern$ = 24						; size = 4
_xmlSchematronRunTest PROC				; COMDAT

; 1604 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1605 :     xmlXPathObjectPtr ret;
; 1606 :     int failed;
; 1607 : 
; 1608 :     failed = 0;

	mov	DWORD PTR _failed$[ebp], 0

; 1609 :     ctxt->xctxt->doc = instance;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _instance$[ebp]
	mov	DWORD PTR [ecx], edx

; 1610 :     ctxt->xctxt->node = cur;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 1611 :     ret = xmlXPathCompiledEval(test->comp, ctxt->xctxt);

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	mov	edx, DWORD PTR _test$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlXPathCompiledEval
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 1612 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN4@xmlSchemat

; 1613 : 	failed = 1;

	mov	DWORD PTR _failed$[ebp], 1

; 1614 :     } else {

	jmp	$LN5@xmlSchemat
$LN4@xmlSchemat:

; 1615 :         switch (ret->type) {

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv75[ebp], edx
	cmp	DWORD PTR tv75[ebp], 9
	ja	$LN2@xmlSchemat
	mov	eax, DWORD PTR tv75[ebp]
	jmp	DWORD PTR $LN27@xmlSchemat[eax*4]
$LN6@xmlSchemat:

; 1616 : 	    case XPATH_XSLT_TREE:
; 1617 : 	    case XPATH_NODESET:
; 1618 : 		if ((ret->nodesetval == NULL) ||

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN8@xmlSchemat
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+4]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN7@xmlSchemat
$LN8@xmlSchemat:

; 1619 : 		    (ret->nodesetval->nodeNr == 0))
; 1620 : 		    failed = 1;

	mov	DWORD PTR _failed$[ebp], 1
$LN7@xmlSchemat:

; 1621 : 		break;

	jmp	$LN2@xmlSchemat
$LN9@xmlSchemat:

; 1622 : 	    case XPATH_BOOLEAN:
; 1623 : 		failed = !ret->boolval;

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN21@xmlSchemat
	mov	DWORD PTR tv83[ebp], 1
	jmp	SHORT $LN22@xmlSchemat
$LN21@xmlSchemat:
	mov	DWORD PTR tv83[ebp], 0
$LN22@xmlSchemat:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _failed$[ebp], edx

; 1624 : 		break;

	jmp	SHORT $LN2@xmlSchemat
$LN10@xmlSchemat:

; 1625 : 	    case XPATH_NUMBER:
; 1626 : 		if ((xmlXPathIsNaN(ret->floatval)) ||

	mov	eax, DWORD PTR _ret$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+16]
	movsd	QWORD PTR [esp], xmm0
	call	_xmlXPathIsNaN
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN12@xmlSchemat
	mov	ecx, DWORD PTR _ret$[ebp]
	movsd	xmm0, QWORD PTR [ecx+16]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN11@xmlSchemat
$LN12@xmlSchemat:

; 1627 : 		    (ret->floatval == 0.0))
; 1628 : 		    failed = 1;

	mov	DWORD PTR _failed$[ebp], 1
$LN11@xmlSchemat:

; 1629 : 		break;

	jmp	SHORT $LN2@xmlSchemat
$LN13@xmlSchemat:

; 1630 : 	    case XPATH_STRING:
; 1631 : 		if ((ret->stringval == NULL) ||

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN15@xmlSchemat
	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+24]
	movzx	ecx, BYTE PTR [eax+ecx]
	test	ecx, ecx
	jne	SHORT $LN14@xmlSchemat
$LN15@xmlSchemat:

; 1632 : 		    (ret->stringval[0] == 0))
; 1633 : 		    failed = 1;

	mov	DWORD PTR _failed$[ebp], 1
$LN14@xmlSchemat:

; 1634 : 		break;

	jmp	SHORT $LN2@xmlSchemat
$LN16@xmlSchemat:

; 1635 : 	    case XPATH_UNDEFINED:
; 1636 : 	    case XPATH_POINT:
; 1637 : 	    case XPATH_RANGE:
; 1638 : 	    case XPATH_LOCATIONSET:
; 1639 : 	    case XPATH_USERS:
; 1640 : 		failed = 1;

	mov	DWORD PTR _failed$[ebp], 1
$LN2@xmlSchemat:

; 1641 : 		break;
; 1642 : 	}
; 1643 : 	xmlXPathFreeObject(ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4
$LN5@xmlSchemat:

; 1644 :     }
; 1645 :     if ((failed) && (test->type == XML_SCHEMATRON_ASSERT))

	cmp	DWORD PTR _failed$[ebp], 0
	je	SHORT $LN17@xmlSchemat
	mov	eax, DWORD PTR _test$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN17@xmlSchemat

; 1646 :         ctxt->nberrors++;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+12], edx
	jmp	SHORT $LN19@xmlSchemat
$LN17@xmlSchemat:

; 1647 :     else if ((!failed) && (test->type == XML_SCHEMATRON_REPORT))

	cmp	DWORD PTR _failed$[ebp], 0
	jne	SHORT $LN19@xmlSchemat
	mov	ecx, DWORD PTR _test$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN19@xmlSchemat

; 1648 :         ctxt->nberrors++;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN19@xmlSchemat:

; 1649 : 
; 1650 :     xmlSchematronReportSuccess(ctxt, test, cur, pattern, !failed);

	cmp	DWORD PTR _failed$[ebp], 0
	jne	SHORT $LN23@xmlSchemat
	mov	DWORD PTR tv146[ebp], 1
	jmp	SHORT $LN24@xmlSchemat
$LN23@xmlSchemat:
	mov	DWORD PTR tv146[ebp], 0
$LN24@xmlSchemat:
	mov	edx, DWORD PTR tv146[ebp]
	push	edx
	mov	eax, DWORD PTR _pattern$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _test$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronReportSuccess
	add	esp, 20					; 00000014H

; 1651 : 
; 1652 :     return(!failed);

	cmp	DWORD PTR _failed$[ebp], 0
	jne	SHORT $LN25@xmlSchemat
	mov	DWORD PTR tv153[ebp], 1
	jmp	SHORT $LN26@xmlSchemat
$LN25@xmlSchemat:
	mov	DWORD PTR tv153[ebp], 0
$LN26@xmlSchemat:
	mov	eax, DWORD PTR tv153[ebp]

; 1653 : }

	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN27@xmlSchemat:
	DD	$LN16@xmlSchemat
	DD	$LN6@xmlSchemat
	DD	$LN9@xmlSchemat
	DD	$LN10@xmlSchemat
	DD	$LN13@xmlSchemat
	DD	$LN16@xmlSchemat
	DD	$LN16@xmlSchemat
	DD	$LN16@xmlSchemat
	DD	$LN16@xmlSchemat
	DD	$LN6@xmlSchemat
_xmlSchematronRunTest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronNextNode
_TEXT	SEGMENT
_cur$ = 8						; size = 4
_xmlSchematronNextNode PROC				; COMDAT

; 1556 : xmlSchematronNextNode(xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1557 :     if (cur->children != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN2@xmlSchemat

; 1558 : 	/*
; 1559 : 	 * Do not descend on entities declarations
; 1560 : 	 */
; 1561 : 	if (cur->children->type != XML_ENTITY_DECL) {

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	DWORD PTR [edx+4], 17			; 00000011H
	je	SHORT $LN2@xmlSchemat

; 1562 : 	    cur = cur->children;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _cur$[ebp], ecx

; 1563 : 	    /*
; 1564 : 	     * Skip DTDs
; 1565 : 	     */
; 1566 : 	    if (cur->type != XML_DTD_NODE)

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 14			; 0000000eH
	je	SHORT $LN2@xmlSchemat

; 1567 : 		return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN1@xmlSchemat
$LN2@xmlSchemat:

; 1568 : 	}
; 1569 :     }
; 1570 : 
; 1571 :     while (cur->next != NULL) {

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN6@xmlSchemat

; 1572 : 	cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx

; 1573 : 	if ((cur->type != XML_ENTITY_DECL) &&

	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 17			; 00000011H
	je	SHORT $LN10@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 14			; 0000000eH
	je	SHORT $LN10@xmlSchemat

; 1574 : 	    (cur->type != XML_DTD_NODE))
; 1575 : 	    return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN1@xmlSchemat
$LN10@xmlSchemat:

; 1576 :     }

	jmp	SHORT $LN2@xmlSchemat
$LN6@xmlSchemat:

; 1577 : 
; 1578 :     do {
; 1579 : 	cur = cur->parent;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _cur$[ebp], eax

; 1580 : 	if (cur == NULL) break;

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN11@xmlSchemat
	jmp	SHORT $LN5@xmlSchemat
$LN11@xmlSchemat:

; 1581 : 	if (cur->type == XML_DOCUMENT_NODE) return(NULL);

	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 9
	jne	SHORT $LN12@xmlSchemat
	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN12@xmlSchemat:

; 1582 : 	if (cur->next != NULL) {

	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN4@xmlSchemat

; 1583 : 	    cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx

; 1584 : 	    return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	jmp	SHORT $LN1@xmlSchemat
$LN4@xmlSchemat:

; 1585 : 	}
; 1586 :     } while (cur != NULL);

	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN6@xmlSchemat
$LN5@xmlSchemat:

; 1587 :     return(cur);

	mov	eax, DWORD PTR _cur$[ebp]
$LN1@xmlSchemat:

; 1588 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSchematronNextNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronReportPattern
_TEXT	SEGMENT
_msg$1 = -1004						; size = 1000
_ctxt$ = 8						; size = 4
_pattern$ = 12						; size = 4
_xmlSchematronReportPattern PROC			; COMDAT

; 1451 : 			   xmlSchematronPatternPtr pattern) {

	push	ebp
	mov	ebp, esp
	sub	esp, 1008				; 000003f0H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1008]
	mov	ecx, 252				; 000000fcH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1452 :     if ((ctxt == NULL) || (pattern == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlSchemat
	cmp	DWORD PTR _pattern$[ebp], 0
	jne	SHORT $LN2@xmlSchemat
$LN3@xmlSchemat:

; 1453 :         return;

	jmp	$LN1@xmlSchemat
$LN2@xmlSchemat:

; 1454 :     if ((ctxt->flags & XML_SCHEMATRON_OUT_QUIET) || (ctxt->flags & XML_SCHEMATRON_OUT_ERROR)) /* Error gives pattern name as part of error */

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1
	jne	SHORT $LN5@xmlSchemat
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 8
	je	SHORT $LN4@xmlSchemat
$LN5@xmlSchemat:

; 1455 :         return;

	jmp	$LN1@xmlSchemat
$LN4@xmlSchemat:

; 1456 :     if (ctxt->flags & XML_SCHEMATRON_OUT_XML) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 4
	je	SHORT $LN6@xmlSchemat

; 1457 :         TODO

	mov	esi, esp
	push	1457					; 000005b1H
	push	OFFSET ??_C@_0GM@OEFFILND@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	eax, DWORD PTR [eax]
	push	eax
	call	___xmlGenericError
	mov	ecx, DWORD PTR [eax]
	call	ecx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1458 :     } else {

	jmp	SHORT $LN1@xmlSchemat
$LN6@xmlSchemat:

; 1459 : 	char msg[1000];
; 1460 : 
; 1461 : 	if (pattern->name == NULL)

	mov	edx, DWORD PTR _pattern$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN8@xmlSchemat

; 1462 : 	    return;

	jmp	SHORT $LN1@xmlSchemat
$LN8@xmlSchemat:

; 1463 : 	snprintf(msg, 999, "Pattern: %s\n", (const char *) pattern->name);

	mov	eax, DWORD PTR _pattern$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0N@IHDDKFAG@Pattern?3?5?$CFs?6@
	push	999					; 000003e7H
	lea	edx, DWORD PTR _msg$1[ebp]
	push	edx
	call	_snprintf
	add	esp, 16					; 00000010H

; 1464 : 	xmlSchematronReportOutput(ctxt, NULL, &msg[0]);

	mov	eax, 1
	imul	ecx, eax, 0
	lea	edx, DWORD PTR _msg$1[ebp+ecx]
	push	edx
	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronReportOutput
	add	esp, 12					; 0000000cH
$LN1@xmlSchemat:

; 1465 :     }
; 1466 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@xmlSchemat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 1008				; 000003f0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN12@xmlSchemat:
	DD	1
	DD	$LN11@xmlSchemat
$LN11@xmlSchemat:
	DD	-1004					; fffffc14H
	DD	1000					; 000003e8H
	DD	$LN10@xmlSchemat
$LN10@xmlSchemat:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
_xmlSchematronReportPattern ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronReportSuccess
_TEXT	SEGMENT
tv178 = -1052						; size = 4
tv171 = -1048						; size = 4
tv93 = -1044						; size = 4
tv87 = -1040						; size = 4
tv88 = -1036						; size = 4
_data$1 = -1032						; size = 4
_channel$2 = -1028					; size = 4
_schannel$3 = -1024					; size = 4
_report$4 = -1020					; size = 4
_line$5 = -1016						; size = 4
_msg$6 = -1008						; size = 1000
_path$7 = -4						; size = 4
_ctxt$ = 8						; size = 4
_test$ = 12						; size = 4
_cur$ = 16						; size = 4
_pattern$ = 20						; size = 4
_success$ = 24						; size = 4
_xmlSchematronReportSuccess PROC			; COMDAT

; 1371 : 		   xmlSchematronTestPtr test, xmlNodePtr cur, xmlSchematronPatternPtr pattern, int success) {

	push	ebp
	mov	ebp, esp
	sub	esp, 1052				; 0000041cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-1052]
	mov	ecx, 263				; 00000107H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1372 :     if ((ctxt == NULL) || (cur == NULL) || (test == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlSchemat
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlSchemat
	cmp	DWORD PTR _test$[ebp], 0
	jne	SHORT $LN2@xmlSchemat
$LN3@xmlSchemat:

; 1373 :         return;

	jmp	$LN1@xmlSchemat
$LN2@xmlSchemat:

; 1374 :     /* if quiet and not SVRL report only failures */
; 1375 :     if ((ctxt->flags & XML_SCHEMATRON_OUT_QUIET) &&
; 1376 :         ((ctxt->flags & XML_SCHEMATRON_OUT_XML) == 0) &&

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 1
	je	SHORT $LN4@xmlSchemat
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 4
	jne	SHORT $LN4@xmlSchemat
	mov	ecx, DWORD PTR _test$[ebp]
	cmp	DWORD PTR [ecx+4], 2
	jne	SHORT $LN4@xmlSchemat

; 1377 : 	(test->type == XML_SCHEMATRON_REPORT))
; 1378 :         return;

	jmp	$LN1@xmlSchemat
$LN4@xmlSchemat:

; 1379 :     if (ctxt->flags & XML_SCHEMATRON_OUT_XML) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	and	eax, 4
	je	SHORT $LN5@xmlSchemat

; 1380 :         TODO

	mov	esi, esp
	push	1380					; 00000564H
	push	OFFSET ??_C@_0GM@OEFFILND@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	___xmlGenericError
	mov	edx, DWORD PTR [eax]
	call	edx
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1381 :     } else {

	jmp	$LN1@xmlSchemat
$LN5@xmlSchemat:

; 1382 :         xmlChar *path;
; 1383 : 	char msg[1000];
; 1384 : 	long line;
; 1385 : 	const xmlChar *report = NULL;

	mov	DWORD PTR _report$4[ebp], 0

; 1386 : 
; 1387 :         if (((test->type == XML_SCHEMATRON_REPORT) & (!success)) ||

	mov	eax, DWORD PTR _test$[ebp]
	cmp	DWORD PTR [eax+4], 2
	jne	SHORT $LN23@xmlSchemat
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN24@xmlSchemat
$LN23@xmlSchemat:
	mov	DWORD PTR tv88[ebp], 0
$LN24@xmlSchemat:
	cmp	DWORD PTR _success$[ebp], 0
	jne	SHORT $LN21@xmlSchemat
	mov	DWORD PTR tv87[ebp], 1
	jmp	SHORT $LN22@xmlSchemat
$LN21@xmlSchemat:
	mov	DWORD PTR tv87[ebp], 0
$LN22@xmlSchemat:
	mov	ecx, DWORD PTR tv88[ebp]
	and	ecx, DWORD PTR tv87[ebp]
	jne	SHORT $LN8@xmlSchemat
	mov	edx, DWORD PTR _test$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN25@xmlSchemat
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN26@xmlSchemat
$LN25@xmlSchemat:
	mov	DWORD PTR tv93[ebp], 0
$LN26@xmlSchemat:
	mov	eax, DWORD PTR tv93[ebp]
	and	eax, DWORD PTR _success$[ebp]
	je	SHORT $LN7@xmlSchemat
$LN8@xmlSchemat:

; 1388 : 	    ((test->type == XML_SCHEMATRON_ASSERT) & (success)))
; 1389 : 	    return;

	jmp	$LN1@xmlSchemat
$LN7@xmlSchemat:

; 1390 : 	line = xmlGetLineNo(cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_xmlGetLineNo
	add	esp, 4
	mov	DWORD PTR _line$5[ebp], eax

; 1391 : 	path = xmlGetNodePath(cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlGetNodePath
	add	esp, 4
	mov	DWORD PTR _path$7[ebp], eax

; 1392 : 	if (path == NULL)

	cmp	DWORD PTR _path$7[ebp], 0
	jne	SHORT $LN9@xmlSchemat

; 1393 : 	    path = (xmlChar *) cur->name;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR _path$7[ebp], ecx
$LN9@xmlSchemat:

; 1394 : #if 0
; 1395 : 	if ((test->report != NULL) && (test->report[0] != 0))
; 1396 : 	    report = test->report;
; 1397 : #endif
; 1398 : 	if (test->node != NULL)

	mov	edx, DWORD PTR _test$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN10@xmlSchemat

; 1399 :             report = xmlSchematronFormatReport(ctxt, test->node, cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _test$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronFormatReport
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _report$4[ebp], eax
$LN10@xmlSchemat:

; 1400 : 	if (report == NULL) {

	cmp	DWORD PTR _report$4[ebp], 0
	jne	SHORT $LN11@xmlSchemat

; 1401 : 	    if (test->type == XML_SCHEMATRON_ASSERT) {

	mov	ecx, DWORD PTR _test$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN12@xmlSchemat

; 1402 :             report = xmlStrdup((const xmlChar *) "node failed assert");

	push	OFFSET ??_C@_0BD@IJCBIFPI@node?5failed?5assert@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _report$4[ebp], eax

; 1403 : 	    } else {

	jmp	SHORT $LN11@xmlSchemat
$LN12@xmlSchemat:

; 1404 :             report = xmlStrdup((const xmlChar *) "node failed report");

	push	OFFSET ??_C@_0BD@CCIFHIJJ@node?5failed?5report@
	call	_xmlStrdup
	add	esp, 4
	mov	DWORD PTR _report$4[ebp], eax
$LN11@xmlSchemat:

; 1405 : 	    }
; 1406 : 	    }
; 1407 : 	    snprintf(msg, 999, "%s line %ld: %s\n", (const char *) path,

	mov	edx, DWORD PTR _report$4[ebp]
	push	edx
	mov	eax, DWORD PTR _line$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _path$7[ebp]
	push	ecx
	push	OFFSET ??_C@_0BB@HNMKNBOB@?$CFs?5line?5?$CFld?3?5?$CFs?6@
	push	999					; 000003e7H
	lea	edx, DWORD PTR _msg$6[ebp]
	push	edx
	call	_snprintf
	add	esp, 24					; 00000018H

; 1408 : 		     line, (const char *) report);
; 1409 : 
; 1410 :     if (ctxt->flags & XML_SCHEMATRON_OUT_ERROR) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	and	ecx, 8
	je	$LN14@xmlSchemat

; 1411 :         xmlStructuredErrorFunc schannel = NULL;

	mov	DWORD PTR _schannel$3[ebp], 0

; 1412 :         xmlGenericErrorFunc channel = NULL;

	mov	DWORD PTR _channel$2[ebp], 0

; 1413 :         void *data = NULL;

	mov	DWORD PTR _data$1[ebp], 0

; 1414 : 
; 1415 :         if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN16@xmlSchemat

; 1416 :             if (ctxt->serror != NULL)

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+60], 0
	je	SHORT $LN17@xmlSchemat

; 1417 :                 schannel = ctxt->serror;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _schannel$3[ebp], ecx
	jmp	SHORT $LN18@xmlSchemat
$LN17@xmlSchemat:

; 1418 :             else
; 1419 :                 channel = ctxt->error;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR _channel$2[ebp], eax
$LN18@xmlSchemat:

; 1420 :             data = ctxt->userData;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _data$1[ebp], edx
$LN16@xmlSchemat:

; 1421 : 	}
; 1422 : 
; 1423 :         __xmlRaiseError(schannel, channel, data,

	cmp	DWORD PTR _pattern$[ebp], 0
	jne	SHORT $LN27@xmlSchemat
	mov	DWORD PTR tv171[ebp], 0
	jmp	SHORT $LN28@xmlSchemat
$LN27@xmlSchemat:
	mov	eax, DWORD PTR _pattern$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR tv171[ebp], ecx
$LN28@xmlSchemat:
	mov	edx, DWORD PTR _test$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN29@xmlSchemat
	mov	DWORD PTR tv178[ebp], 4000		; 00000fa0H
	jmp	SHORT $LN30@xmlSchemat
$LN29@xmlSchemat:
	mov	DWORD PTR tv178[ebp], 4001		; 00000fa1H
$LN30@xmlSchemat:
	lea	eax, DWORD PTR _msg$6[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	push	0
	push	0
	mov	ecx, DWORD PTR _report$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _path$7[ebp]
	push	edx
	mov	eax, DWORD PTR tv171[ebp]
	push	eax
	mov	ecx, DWORD PTR _line$5[ebp]
	push	ecx
	push	0
	push	2
	mov	edx, DWORD PTR tv178[ebp]
	push	edx
	push	28					; 0000001cH
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _data$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _channel$2[ebp]
	push	edx
	mov	eax, DWORD PTR _schannel$3[ebp]
	push	eax
	call	___xmlRaiseError
	add	esp, 68					; 00000044H

; 1424 :                         NULL, cur, XML_FROM_SCHEMATRONV,
; 1425 :                         (test->type == XML_SCHEMATRON_ASSERT)?XML_SCHEMATRONV_ASSERT:XML_SCHEMATRONV_REPORT,
; 1426 :                         XML_ERR_ERROR, NULL, line,
; 1427 :                         (pattern == NULL)?NULL:((const char *) pattern->name),
; 1428 :                         (const char *) path,
; 1429 :                         (const char *) report, 0, 0,
; 1430 :                         "%s", msg);
; 1431 :     } else {

	jmp	SHORT $LN15@xmlSchemat
$LN14@xmlSchemat:

; 1432 : 	xmlSchematronReportOutput(ctxt, cur, &msg[0]);

	mov	ecx, 1
	imul	edx, ecx, 0
	lea	eax, DWORD PTR _msg$6[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronReportOutput
	add	esp, 12					; 0000000cH
$LN15@xmlSchemat:

; 1433 :     }
; 1434 : 
; 1435 :     xmlFree((char *) report);

	mov	esi, esp
	mov	eax, DWORD PTR _report$4[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1436 : 
; 1437 : 	if ((path != NULL) && (path != (xmlChar *) cur->name))

	cmp	DWORD PTR _path$7[ebp], 0
	je	SHORT $LN1@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR _path$7[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	je	SHORT $LN1@xmlSchemat

; 1438 : 	    xmlFree(path);

	mov	esi, esp
	mov	eax, DWORD PTR _path$7[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlSchemat:

; 1439 :     }
; 1440 : }

	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@xmlSchemat
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 1052				; 0000041cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN33@xmlSchemat:
	DD	1
	DD	$LN32@xmlSchemat
$LN32@xmlSchemat:
	DD	-1008					; fffffc10H
	DD	1000					; 000003e8H
	DD	$LN31@xmlSchemat
$LN31@xmlSchemat:
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
_xmlSchematronReportSuccess ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronFormatReport
_TEXT	SEGMENT
_c$1 = -21						; size = 1
_len$2 = -20						; size = 4
_path$3 = -16						; size = 4
_node$ = -12						; size = 4
_child$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_test$ = 12						; size = 4
_cur$ = 16						; size = 4
_xmlSchematronFormatReport PROC				; COMDAT

; 1294 : 			  xmlNodePtr test, xmlNodePtr cur) {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1295 :     xmlChar *ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 1296 :     xmlNodePtr child, node;
; 1297 : 
; 1298 :     if ((test == NULL) || (cur == NULL))

	cmp	DWORD PTR _test$[ebp], 0
	je	SHORT $LN7@xmlSchemat
	cmp	DWORD PTR _cur$[ebp], 0
	jne	SHORT $LN6@xmlSchemat
$LN7@xmlSchemat:

; 1299 :         return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	jmp	$LN1@xmlSchemat
$LN6@xmlSchemat:

; 1300 : 
; 1301 :     child = test->children;

	mov	eax, DWORD PTR _test$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _child$[ebp], ecx
$LN2@xmlSchemat:

; 1302 :     while (child != NULL) {

	cmp	DWORD PTR _child$[ebp], 0
	je	$LN3@xmlSchemat

; 1303 :         if ((child->type == XML_TEXT_NODE) ||

	mov	edx, DWORD PTR _child$[ebp]
	cmp	DWORD PTR [edx+4], 3
	je	SHORT $LN10@xmlSchemat
	mov	eax, DWORD PTR _child$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jne	SHORT $LN8@xmlSchemat
$LN10@xmlSchemat:

; 1304 : 	    (child->type == XML_CDATA_SECTION_NODE))
; 1305 : 	    ret = xmlStrcat(ret, child->content);

	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
	jmp	$LN9@xmlSchemat
$LN8@xmlSchemat:

; 1306 : 	else if (IS_SCHEMATRON(child, "name")) {

	cmp	DWORD PTR _child$[ebp], 0
	je	$LN11@xmlSchemat
	mov	ecx, DWORD PTR _child$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	$LN11@xmlSchemat
	mov	edx, DWORD PTR _child$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	$LN11@xmlSchemat
	push	OFFSET ??_C@_04MEMAJGDJ@name@
	mov	eax, DWORD PTR _child$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN11@xmlSchemat
	mov	edx, DWORD PTR _xmlSchematronNs
	push	edx
	mov	eax, DWORD PTR _child$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@xmlSchemat
	mov	eax, DWORD PTR _xmlOldSchematronNs
	push	eax
	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN11@xmlSchemat
$LN13@xmlSchemat:

; 1307 : 	    xmlChar *path;
; 1308 : 
; 1309 : 	    path = xmlGetNoNsProp(child, BAD_CAST "path");

	push	OFFSET ??_C@_04LNEJFJGI@path@
	mov	ecx, DWORD PTR _child$[ebp]
	push	ecx
	call	_xmlGetNoNsProp
	add	esp, 8
	mov	DWORD PTR _path$3[ebp], eax

; 1310 : 
; 1311 :             node = cur;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _node$[ebp], edx

; 1312 : 	    if (path != NULL) {

	cmp	DWORD PTR _path$3[ebp], 0
	je	SHORT $LN14@xmlSchemat

; 1313 : 	        node = xmlSchematronGetNode(ctxt, cur, path);

	mov	eax, DWORD PTR _path$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronGetNode
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _node$[ebp], eax

; 1314 : 		if (node == NULL)

	cmp	DWORD PTR _node$[ebp], 0
	jne	SHORT $LN15@xmlSchemat

; 1315 : 		    node = cur;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR _node$[ebp], eax
$LN15@xmlSchemat:

; 1316 : 		xmlFree(path);

	mov	esi, esp
	mov	ecx, DWORD PTR _path$3[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN14@xmlSchemat:

; 1317 : 	    }
; 1318 : 
; 1319 : 	    if ((node->ns == NULL) || (node->ns->prefix == NULL))

	mov	edx, DWORD PTR _node$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN18@xmlSchemat
	mov	eax, DWORD PTR _node$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN16@xmlSchemat
$LN18@xmlSchemat:

; 1320 : 	        ret = xmlStrcat(ret, node->name);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
	jmp	SHORT $LN17@xmlSchemat
$LN16@xmlSchemat:

; 1321 : 	    else {
; 1322 : 	        ret = xmlStrcat(ret, node->ns->prefix);

	mov	edx, DWORD PTR _node$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 1323 : 	        ret = xmlStrcat(ret, BAD_CAST ":");

	push	OFFSET ??_C@_01JLIPDDHJ@?3@
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 1324 : 	        ret = xmlStrcat(ret, node->name);

	mov	ecx, DWORD PTR _node$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlStrcat
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax
$LN17@xmlSchemat:

; 1325 : 	    }
; 1326 : 	} else {

	jmp	SHORT $LN9@xmlSchemat
$LN11@xmlSchemat:

; 1327 : 	    child = child->next;

	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _child$[ebp], edx

; 1328 : 	    continue;

	jmp	$LN2@xmlSchemat
$LN9@xmlSchemat:

; 1329 : 	}
; 1330 : 
; 1331 : 	/*
; 1332 : 	 * remove superfluous \n
; 1333 : 	 */
; 1334 : 	if (ret != NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	$LN19@xmlSchemat

; 1335 : 	    int len = xmlStrlen(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlStrlen
	add	esp, 4
	mov	DWORD PTR _len$2[ebp], eax

; 1336 : 	    xmlChar c;
; 1337 : 
; 1338 : 	    if (len > 0) {

	cmp	DWORD PTR _len$2[ebp], 0
	jle	$LN19@xmlSchemat

; 1339 : 		c = ret[len - 1];

	mov	ecx, DWORD PTR _ret$[ebp]
	add	ecx, DWORD PTR _len$2[ebp]
	mov	dl, BYTE PTR [ecx-1]
	mov	BYTE PTR _c$1[ebp], dl

; 1340 : 		if ((c == ' ') || (c == '\n') || (c == '\r') || (c == '\t')) {

	movzx	eax, BYTE PTR _c$1[ebp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN4@xmlSchemat
	movzx	ecx, BYTE PTR _c$1[ebp]
	cmp	ecx, 10					; 0000000aH
	je	SHORT $LN4@xmlSchemat
	movzx	edx, BYTE PTR _c$1[ebp]
	cmp	edx, 13					; 0000000dH
	je	SHORT $LN4@xmlSchemat
	movzx	eax, BYTE PTR _c$1[ebp]
	cmp	eax, 9
	jne	SHORT $LN19@xmlSchemat
$LN4@xmlSchemat:

; 1341 : 		    while ((c == ' ') || (c == '\n') ||
; 1342 : 		           (c == '\r') || (c == '\t')) {

	movzx	ecx, BYTE PTR _c$1[ebp]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN23@xmlSchemat
	movzx	edx, BYTE PTR _c$1[ebp]
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN23@xmlSchemat
	movzx	eax, BYTE PTR _c$1[ebp]
	cmp	eax, 13					; 0000000dH
	je	SHORT $LN23@xmlSchemat
	movzx	ecx, BYTE PTR _c$1[ebp]
	cmp	ecx, 9
	jne	SHORT $LN5@xmlSchemat
$LN23@xmlSchemat:

; 1343 : 			len--;

	mov	edx, DWORD PTR _len$2[ebp]
	sub	edx, 1
	mov	DWORD PTR _len$2[ebp], edx

; 1344 : 			if (len == 0)

	jne	SHORT $LN24@xmlSchemat

; 1345 : 			    break;

	jmp	SHORT $LN5@xmlSchemat
$LN24@xmlSchemat:

; 1346 : 			c = ret[len - 1];

	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _len$2[ebp]
	mov	cl, BYTE PTR [eax-1]
	mov	BYTE PTR _c$1[ebp], cl

; 1347 : 		    }

	jmp	SHORT $LN4@xmlSchemat
$LN5@xmlSchemat:

; 1348 : 		    ret[len] = ' ';

	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, DWORD PTR _len$2[ebp]
	mov	BYTE PTR [edx], 32			; 00000020H

; 1349 : 		    ret[len + 1] = 0;

	mov	eax, DWORD PTR _ret$[ebp]
	add	eax, DWORD PTR _len$2[ebp]
	mov	BYTE PTR [eax+1], 0
$LN19@xmlSchemat:

; 1350 : 		}
; 1351 : 	    }
; 1352 : 	}
; 1353 : 
; 1354 :         child = child->next;

	mov	ecx, DWORD PTR _child$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _child$[ebp], edx

; 1355 :     }

	jmp	$LN2@xmlSchemat
$LN3@xmlSchemat:

; 1356 :     return(ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 1357 : }

	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronFormatReport ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronReportOutput
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_msg$ = 16						; size = 4
_xmlSchematronReportOutput PROC				; COMDAT

; 1276 :                           const char *msg) {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1277 :     /* TODO */
; 1278 :     fprintf(stderr, "%s", msg);

	mov	eax, DWORD PTR _msg$[ebp]
	push	eax
	push	OFFSET ??_C@_02DKCKIIND@?$CFs@
	mov	esi, esp
	push	2
	call	DWORD PTR __imp____acrt_iob_func
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH

; 1279 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSchematronReportOutput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronGetNode
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_node$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_cur$ = 12						; size = 4
_xpath$ = 16						; size = 4
_xmlSchematronGetNode PROC				; COMDAT

; 1244 :                      xmlNodePtr cur, const xmlChar *xpath) {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1245 :     xmlNodePtr node = NULL;

	mov	DWORD PTR _node$[ebp], 0

; 1246 :     xmlXPathObjectPtr ret;
; 1247 : 
; 1248 :     if ((ctxt == NULL) || (cur == NULL) || (xpath == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN3@xmlSchemat
	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlSchemat
	cmp	DWORD PTR _xpath$[ebp], 0
	jne	SHORT $LN2@xmlSchemat
$LN3@xmlSchemat:

; 1249 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN2@xmlSchemat:

; 1250 : 
; 1251 :     ctxt->xctxt->doc = cur->doc;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx], eax

; 1252 :     ctxt->xctxt->node = cur;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR _cur$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1253 :     ret = xmlXPathEval(xpath, ctxt->xctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	mov	eax, DWORD PTR _xpath$[ebp]
	push	eax
	call	_xmlXPathEval
	add	esp, 8
	mov	DWORD PTR _ret$[ebp], eax

; 1254 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN4@xmlSchemat

; 1255 :         return(NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN4@xmlSchemat:

; 1256 : 
; 1257 :     if ((ret->type == XPATH_NODESET) &&
; 1258 :         (ret->nodesetval != NULL) && (ret->nodesetval->nodeNr > 0))

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx], 1
	jne	SHORT $LN5@xmlSchemat
	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN5@xmlSchemat
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	DWORD PTR [ecx], 0
	jle	SHORT $LN5@xmlSchemat

; 1259 : 	node = ret->nodesetval->nodeTab[0];

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR [eax+8]
	mov	ecx, DWORD PTR [edx+eax]
	mov	DWORD PTR _node$[ebp], ecx
$LN5@xmlSchemat:

; 1260 : 
; 1261 :     xmlXPathFreeObject(ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlXPathFreeObject
	add	esp, 4

; 1262 :     return(node);

	mov	eax, DWORD PTR _node$[ebp]
$LN1@xmlSchemat:

; 1263 : }

	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronGetNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronParsePattern
_TEXT	SEGMENT
_id$ = -16						; size = 4
_nbRules$ = -12						; size = 4
_pattern$ = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_pat$ = 12						; size = 4
_xmlSchematronParsePattern PROC				; COMDAT

; 960  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 961  :     xmlNodePtr cur;
; 962  :     xmlSchematronPatternPtr pattern;
; 963  :     int nbRules = 0;

	mov	DWORD PTR _nbRules$[ebp], 0

; 964  :     xmlChar *id;
; 965  : 
; 966  :     if ((ctxt == NULL) || (pat == NULL)) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN9@xmlSchemat
	cmp	DWORD PTR _pat$[ebp], 0
	jne	SHORT $LN8@xmlSchemat
$LN9@xmlSchemat:
	jmp	$LN1@xmlSchemat
$LN8@xmlSchemat:

; 967  : 
; 968  :     id = xmlGetNoNsProp(pat, BAD_CAST "id");

	push	OFFSET ??_C@_02EGCJHIOB@id@
	mov	eax, DWORD PTR _pat$[ebp]
	push	eax
	call	_xmlGetNoNsProp
	add	esp, 8
	mov	DWORD PTR _id$[ebp], eax

; 969  :     if (id == NULL) {

	cmp	DWORD PTR _id$[ebp], 0
	jne	SHORT $LN10@xmlSchemat

; 970  : 	id = xmlGetNoNsProp(pat, BAD_CAST "name");

	push	OFFSET ??_C@_04MEMAJGDJ@name@
	mov	ecx, DWORD PTR _pat$[ebp]
	push	ecx
	call	_xmlGetNoNsProp
	add	esp, 8
	mov	DWORD PTR _id$[ebp], eax
$LN10@xmlSchemat:

; 971  :     }
; 972  :     pattern = xmlSchematronAddPattern(ctxt, ctxt->schema, pat, id);

	mov	edx, DWORD PTR _id$[ebp]
	push	edx
	mov	eax, DWORD PTR _pat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronAddPattern
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pattern$[ebp], eax

; 973  :     if (pattern == NULL) {

	cmp	DWORD PTR _pattern$[ebp], 0
	jne	SHORT $LN11@xmlSchemat

; 974  : 	if (id != NULL)

	cmp	DWORD PTR _id$[ebp], 0
	je	SHORT $LN12@xmlSchemat

; 975  : 	    xmlFree(id);

	mov	esi, esp
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN12@xmlSchemat:

; 976  :         return;

	jmp	$LN1@xmlSchemat
$LN11@xmlSchemat:

; 977  :     }
; 978  :     cur = pat->children;

	mov	edx, DWORD PTR _pat$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@xmlSchemat:

; 979  :     NEXT_SCHEMATRON(cur);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN4@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN13@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN13@xmlSchemat
	mov	eax, DWORD PTR _xmlSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN14@xmlSchemat
	mov	ecx, DWORD PTR _xmlOldSchematronNs
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN13@xmlSchemat
$LN14@xmlSchemat:
	jmp	SHORT $LN4@xmlSchemat
$LN13@xmlSchemat:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN2@xmlSchemat
$LN4@xmlSchemat:

; 980  :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@xmlSchemat

; 981  : 	if (IS_SCHEMATRON(cur, "rule")) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN15@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN15@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN15@xmlSchemat
	push	OFFSET ??_C@_04LPGJEGEF@rule@
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlSchemat
	mov	edx, DWORD PTR _xmlSchematronNs
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN17@xmlSchemat
	mov	eax, DWORD PTR _xmlOldSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlSchemat
$LN17@xmlSchemat:

; 982  : 	    xmlSchematronParseRule(ctxt, pattern, cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pattern$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronParseRule
	add	esp, 12					; 0000000cH

; 983  : 	    nbRules++;

	mov	ecx, DWORD PTR _nbRules$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nbRules$[ebp], ecx

; 984  : 	} else {

	jmp	SHORT $LN16@xmlSchemat
$LN15@xmlSchemat:

; 985  : 	    xmlSchematronPErr(ctxt, cur,

	push	0
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	push	OFFSET ??_C@_0CH@HMMHEKDJ@Expecting?5a?5rule?5element?5instea@
	push	1759					; 000006dfH
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
$LN16@xmlSchemat:

; 986  : 		XML_SCHEMAP_NOROOT,
; 987  : 		"Expecting a rule element instead of %s", cur->name, NULL);
; 988  : 	}
; 989  : 	cur = cur->next;

	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx
$LN6@xmlSchemat:

; 990  : 	NEXT_SCHEMATRON(cur);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN7@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+4], 1
	jne	SHORT $LN18@xmlSchemat
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN18@xmlSchemat
	mov	ecx, DWORD PTR _xmlSchematronNs
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@xmlSchemat
	mov	edx, DWORD PTR _xmlOldSchematronNs
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN18@xmlSchemat
$LN19@xmlSchemat:
	jmp	SHORT $LN7@xmlSchemat
$LN18@xmlSchemat:
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR _cur$[ebp], ecx
	jmp	SHORT $LN6@xmlSchemat
$LN7@xmlSchemat:

; 991  :     }

	jmp	$LN4@xmlSchemat
$LN5@xmlSchemat:

; 992  :     if (nbRules == 0) {

	cmp	DWORD PTR _nbRules$[ebp], 0
	jne	SHORT $LN1@xmlSchemat

; 993  : 	xmlSchematronPErr(ctxt, pat,

	push	0
	push	0
	push	OFFSET ??_C@_0BM@HPHJEBHK@Pattern?5has?5no?5rule?5element@
	push	1759					; 000006dfH
	mov	edx, DWORD PTR _pat$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
$LN1@xmlSchemat:

; 994  : 	    XML_SCHEMAP_NOROOT,
; 995  : 	    "Pattern has no rule element", NULL, NULL);
; 996  :     }
; 997  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronParsePattern ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronParseRule
_TEXT	SEGMENT
_testptr$ = -28						; size = 4
_ruleptr$ = -24						; size = 4
_report$ = -20						; size = 4
_context$ = -16						; size = 4
_test$ = -12						; size = 4
_nbChecks$ = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_pattern$ = 12						; size = 4
_rule$ = 16						; size = 4
_xmlSchematronParseRule PROC				; COMDAT

; 852  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 853  :     xmlNodePtr cur;
; 854  :     int nbChecks = 0;

	mov	DWORD PTR _nbChecks$[ebp], 0

; 855  :     xmlChar *test;
; 856  :     xmlChar *context;
; 857  :     xmlChar *report;
; 858  :     xmlSchematronRulePtr ruleptr;
; 859  :     xmlSchematronTestPtr testptr;
; 860  : 
; 861  :     if ((ctxt == NULL) || (rule == NULL)) return;

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN9@xmlSchemat
	cmp	DWORD PTR _rule$[ebp], 0
	jne	SHORT $LN8@xmlSchemat
$LN9@xmlSchemat:
	jmp	$LN1@xmlSchemat
$LN8@xmlSchemat:

; 862  : 
; 863  :     context = xmlGetNoNsProp(rule, BAD_CAST "context");

	push	OFFSET ??_C@_07JKKCBBMM@context@
	mov	eax, DWORD PTR _rule$[ebp]
	push	eax
	call	_xmlGetNoNsProp
	add	esp, 8
	mov	DWORD PTR _context$[ebp], eax

; 864  :     if (context == NULL) {

	cmp	DWORD PTR _context$[ebp], 0
	jne	SHORT $LN10@xmlSchemat

; 865  : 	xmlSchematronPErr(ctxt, rule,

	push	0
	push	0
	push	OFFSET ??_C@_0BO@OOKBPBKF@rule?5has?5no?5context?5attribute@
	push	1759					; 000006dfH
	mov	ecx, DWORD PTR _rule$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 866  : 	    XML_SCHEMAP_NOROOT,
; 867  : 	    "rule has no context attribute",
; 868  : 	    NULL, NULL);
; 869  : 	return;

	jmp	$LN1@xmlSchemat
	jmp	$LN11@xmlSchemat
$LN10@xmlSchemat:

; 870  :     } else if (context[0] == 0) {

	mov	eax, 1
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _context$[ebp]
	movzx	eax, BYTE PTR [edx+ecx]
	test	eax, eax
	jne	SHORT $LN12@xmlSchemat

; 871  : 	xmlSchematronPErr(ctxt, rule,

	push	0
	push	0
	push	OFFSET ??_C@_0CE@PPHKJDMN@rule?5has?5an?5empty?5context?5attri@
	push	1759					; 000006dfH
	mov	ecx, DWORD PTR _rule$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 872  : 	    XML_SCHEMAP_NOROOT,
; 873  : 	    "rule has an empty context attribute",
; 874  : 	    NULL, NULL);
; 875  : 	xmlFree(context);

	mov	esi, esp
	mov	eax, DWORD PTR _context$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 876  : 	return;

	jmp	$LN1@xmlSchemat

; 877  :     } else {

	jmp	SHORT $LN11@xmlSchemat
$LN12@xmlSchemat:

; 878  : 	ruleptr = xmlSchematronAddRule(ctxt, ctxt->schema, pattern,

	push	0
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	mov	edx, DWORD PTR _rule$[ebp]
	push	edx
	mov	eax, DWORD PTR _pattern$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronAddRule
	add	esp, 24					; 00000018H
	mov	DWORD PTR _ruleptr$[ebp], eax

; 879  : 	                               rule, context, NULL);
; 880  : 	if (ruleptr == NULL) {

	cmp	DWORD PTR _ruleptr$[ebp], 0
	jne	SHORT $LN11@xmlSchemat

; 881  : 	    xmlFree(context);

	mov	esi, esp
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 882  : 	    return;

	jmp	$LN1@xmlSchemat
$LN11@xmlSchemat:

; 883  : 	}
; 884  :     }
; 885  : 
; 886  :     cur = rule->children;

	mov	edx, DWORD PTR _rule$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@xmlSchemat:

; 887  :     NEXT_SCHEMATRON(cur);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN4@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN15@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN15@xmlSchemat
	mov	eax, DWORD PTR _xmlSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN16@xmlSchemat
	mov	ecx, DWORD PTR _xmlOldSchematronNs
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN15@xmlSchemat
$LN16@xmlSchemat:
	jmp	SHORT $LN4@xmlSchemat
$LN15@xmlSchemat:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN2@xmlSchemat
$LN4@xmlSchemat:

; 888  :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN5@xmlSchemat

; 889  : 	if (IS_SCHEMATRON(cur, "assert")) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN17@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	$LN17@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	$LN17@xmlSchemat
	push	OFFSET ??_C@_06GMEIIFFN@assert@
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN17@xmlSchemat
	mov	edx, DWORD PTR _xmlSchematronNs
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN19@xmlSchemat
	mov	eax, DWORD PTR _xmlOldSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN17@xmlSchemat
$LN19@xmlSchemat:

; 890  : 	    nbChecks++;

	mov	ecx, DWORD PTR _nbChecks$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nbChecks$[ebp], ecx

; 891  : 	    test = xmlGetNoNsProp(cur, BAD_CAST "test");

	push	OFFSET ??_C@_04CEJDCDCH@test@
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlGetNoNsProp
	add	esp, 8
	mov	DWORD PTR _test$[ebp], eax

; 892  : 	    if (test == NULL) {

	cmp	DWORD PTR _test$[ebp], 0
	jne	SHORT $LN20@xmlSchemat

; 893  : 		xmlSchematronPErr(ctxt, cur,

	push	0
	push	0
	push	OFFSET ??_C@_0BN@CLPNCGJA@assert?5has?5no?5test?5attribute@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
	jmp	$LN21@xmlSchemat
$LN20@xmlSchemat:

; 894  : 		    XML_SCHEMAP_NOROOT,
; 895  : 		    "assert has no test attribute",
; 896  : 		    NULL, NULL);
; 897  : 	    } else if (test[0] == 0) {

	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _test$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN22@xmlSchemat

; 898  : 		xmlSchematronPErr(ctxt, cur,

	push	0
	push	0
	push	OFFSET ??_C@_0CD@COBAHICO@assert?5has?5an?5empty?5test?5attrib@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 899  : 		    XML_SCHEMAP_NOROOT,
; 900  : 		    "assert has an empty test attribute",
; 901  : 		    NULL, NULL);
; 902  : 		xmlFree(test);

	mov	esi, esp
	mov	edx, DWORD PTR _test$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 903  : 	    } else {

	jmp	SHORT $LN21@xmlSchemat
$LN22@xmlSchemat:

; 904  : 		/* TODO will need dynamic processing instead */
; 905  : 		report = xmlNodeGetContent(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_xmlNodeGetContent
	add	esp, 4
	mov	DWORD PTR _report$[ebp], eax

; 906  : 
; 907  : 		testptr = xmlSchematronAddTest(ctxt, XML_SCHEMATRON_ASSERT,

	mov	ecx, DWORD PTR _report$[ebp]
	push	ecx
	mov	edx, DWORD PTR _test$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ruleptr$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronAddTest
	add	esp, 24					; 00000018H
	mov	DWORD PTR _testptr$[ebp], eax

; 908  : 		                               ruleptr, cur, test, report);
; 909  : 		if (testptr == NULL)

	cmp	DWORD PTR _testptr$[ebp], 0
	jne	SHORT $LN21@xmlSchemat

; 910  : 		    xmlFree(test);

	mov	esi, esp
	mov	eax, DWORD PTR _test$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN21@xmlSchemat:

; 911  : 	    }

	jmp	$LN18@xmlSchemat
$LN17@xmlSchemat:

; 912  : 	} else if (IS_SCHEMATRON(cur, "report")) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN25@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	$LN25@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	$LN25@xmlSchemat
	push	OFFSET ??_C@_06MHOMHIDM@report@
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN25@xmlSchemat
	mov	edx, DWORD PTR _xmlSchematronNs
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN27@xmlSchemat
	mov	eax, DWORD PTR _xmlOldSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN25@xmlSchemat
$LN27@xmlSchemat:

; 913  : 	    nbChecks++;

	mov	ecx, DWORD PTR _nbChecks$[ebp]
	add	ecx, 1
	mov	DWORD PTR _nbChecks$[ebp], ecx

; 914  : 	    test = xmlGetNoNsProp(cur, BAD_CAST "test");

	push	OFFSET ??_C@_04CEJDCDCH@test@
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlGetNoNsProp
	add	esp, 8
	mov	DWORD PTR _test$[ebp], eax

; 915  : 	    if (test == NULL) {

	cmp	DWORD PTR _test$[ebp], 0
	jne	SHORT $LN28@xmlSchemat

; 916  : 		xmlSchematronPErr(ctxt, cur,

	push	0
	push	0
	push	OFFSET ??_C@_0BN@CLPNCGJA@assert?5has?5no?5test?5attribute@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
	jmp	$LN29@xmlSchemat
$LN28@xmlSchemat:

; 917  : 		    XML_SCHEMAP_NOROOT,
; 918  : 		    "assert has no test attribute",
; 919  : 		    NULL, NULL);
; 920  : 	    } else if (test[0] == 0) {

	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _test$[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN30@xmlSchemat

; 921  : 		xmlSchematronPErr(ctxt, cur,

	push	0
	push	0
	push	OFFSET ??_C@_0CD@COBAHICO@assert?5has?5an?5empty?5test?5attrib@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 922  : 		    XML_SCHEMAP_NOROOT,
; 923  : 		    "assert has an empty test attribute",
; 924  : 		    NULL, NULL);
; 925  : 		xmlFree(test);

	mov	esi, esp
	mov	edx, DWORD PTR _test$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 926  : 	    } else {

	jmp	SHORT $LN29@xmlSchemat
$LN30@xmlSchemat:

; 927  : 		/* TODO will need dynamic processing instead */
; 928  : 		report = xmlNodeGetContent(cur);

	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_xmlNodeGetContent
	add	esp, 4
	mov	DWORD PTR _report$[ebp], eax

; 929  : 
; 930  : 		testptr = xmlSchematronAddTest(ctxt, XML_SCHEMATRON_REPORT,

	mov	ecx, DWORD PTR _report$[ebp]
	push	ecx
	mov	edx, DWORD PTR _test$[ebp]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ruleptr$[ebp]
	push	ecx
	push	2
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronAddTest
	add	esp, 24					; 00000018H
	mov	DWORD PTR _testptr$[ebp], eax

; 931  : 		                               ruleptr, cur, test, report);
; 932  : 		if (testptr == NULL)

	cmp	DWORD PTR _testptr$[ebp], 0
	jne	SHORT $LN29@xmlSchemat

; 933  : 		    xmlFree(test);

	mov	esi, esp
	mov	eax, DWORD PTR _test$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN29@xmlSchemat:

; 934  : 	    }
; 935  : 	} else {

	jmp	SHORT $LN18@xmlSchemat
$LN25@xmlSchemat:

; 936  : 	    xmlSchematronPErr(ctxt, cur,

	push	0
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	push	OFFSET ??_C@_0DG@GPEPPHEL@Expecting?5an?5assert?5or?5a?5report@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
$LN18@xmlSchemat:

; 937  : 		XML_SCHEMAP_NOROOT,
; 938  : 		"Expecting an assert or a report element instead of %s",
; 939  : 		cur->name, NULL);
; 940  : 	}
; 941  : 	cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
$LN6@xmlSchemat:

; 942  : 	NEXT_SCHEMATRON(cur);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN7@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN33@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN33@xmlSchemat
	mov	eax, DWORD PTR _xmlSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN34@xmlSchemat
	mov	ecx, DWORD PTR _xmlOldSchematronNs
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN33@xmlSchemat
$LN34@xmlSchemat:
	jmp	SHORT $LN7@xmlSchemat
$LN33@xmlSchemat:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN6@xmlSchemat
$LN7@xmlSchemat:

; 943  :     }

	jmp	$LN4@xmlSchemat
$LN5@xmlSchemat:

; 944  :     if (nbChecks == 0) {

	cmp	DWORD PTR _nbChecks$[ebp], 0
	jne	SHORT $LN1@xmlSchemat

; 945  : 	xmlSchematronPErr(ctxt, rule,

	push	0
	push	0
	push	OFFSET ??_C@_0CG@GJJAJNIB@rule?5has?5no?5assert?5nor?5report?5e@
	push	1759					; 000006dfH
	mov	ecx, DWORD PTR _rule$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
$LN1@xmlSchemat:

; 946  : 	    XML_SCHEMAP_NOROOT,
; 947  : 	    "rule has no assert nor report element", NULL, NULL);
; 948  :     }
; 949  : }

	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronParseRule ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronAddNamespace
_TEXT	SEGMENT
_tmp$1 = -4						; size = 4
_ctxt$ = 8						; size = 4
_prefix$ = 12						; size = 4
_ns$ = 16						; size = 4
_xmlSchematronAddNamespace PROC				; COMDAT

; 806  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 807  :     if (ctxt->namespaces == NULL) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN2@xmlSchemat

; 808  :         ctxt->maxNamespaces = 10;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+48], 10			; 0000000aH

; 809  :         ctxt->namespaces = (const xmlChar **)

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+48]
	shl	eax, 1
	shl	eax, 2
	mov	esi, esp
	push	eax
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 810  : 	    xmlMalloc(ctxt->maxNamespaces * 2 * sizeof(const xmlChar *));
; 811  : 	if (ctxt->namespaces == NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+52], 0
	jne	SHORT $LN4@xmlSchemat

; 812  : 	    xmlSchematronPErrMemory(NULL, "allocating parser namespaces",

	push	0
	push	OFFSET ??_C@_0BN@GJJHFKFH@allocating?5parser?5namespaces@
	push	0
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 813  : 				    NULL);
; 814  : 	    return;

	jmp	$LN1@xmlSchemat
$LN4@xmlSchemat:

; 815  : 	}
; 816  :         ctxt->nbNamespaces = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+44], 0
	jmp	SHORT $LN3@xmlSchemat
$LN2@xmlSchemat:

; 817  :     } else if (ctxt->nbNamespaces + 2 >= ctxt->maxNamespaces) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	add	edx, 2
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	edx, DWORD PTR [eax+48]
	jl	SHORT $LN3@xmlSchemat

; 818  :         const xmlChar **tmp;
; 819  : 
; 820  : 	tmp = (const xmlChar **)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	shl	edx, 2
	shl	edx, 2
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	DWORD PTR _xmlRealloc
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _tmp$1[ebp], eax

; 821  : 	    xmlRealloc((xmlChar **) ctxt->namespaces, ctxt->maxNamespaces * 4 *
; 822  : 	               sizeof(const xmlChar *));
; 823  : 	if (tmp == NULL) {

	cmp	DWORD PTR _tmp$1[ebp], 0
	jne	SHORT $LN6@xmlSchemat

; 824  : 	    xmlSchematronPErrMemory(NULL, "allocating parser namespaces",

	push	0
	push	OFFSET ??_C@_0BN@GJJHFKFH@allocating?5parser?5namespaces@
	push	0
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 825  : 				    NULL);
; 826  : 	    return;

	jmp	$LN1@xmlSchemat
$LN6@xmlSchemat:

; 827  : 	}
; 828  :         ctxt->namespaces = tmp;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR _tmp$1[ebp]
	mov	DWORD PTR [edx+52], eax

; 829  : 	ctxt->maxNamespaces *= 2;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	shl	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+48], edx
$LN3@xmlSchemat:

; 830  :     }
; 831  :     ctxt->namespaces[2 * ctxt->nbNamespaces] =

	push	-1
	mov	ecx, DWORD PTR _ns$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	shl	edx, 1
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [ecx+edx*4], eax

; 832  :         xmlDictLookup(ctxt->dict, ns, -1);
; 833  :     ctxt->namespaces[2 * ctxt->nbNamespaces + 1] =

	push	-1
	mov	edx, DWORD PTR _prefix$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [edx+44]
	shl	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [edx+52]
	mov	DWORD PTR [edx+ecx*4+4], eax

; 834  :         xmlDictLookup(ctxt->dict, prefix, -1);
; 835  :     ctxt->nbNamespaces++;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+44], ecx

; 836  :     ctxt->namespaces[2 * ctxt->nbNamespaces] = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	shl	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	DWORD PTR [eax+ecx*4], 0

; 837  :     ctxt->namespaces[2 * ctxt->nbNamespaces + 1] = NULL;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	shl	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [ecx+edx*4+4], 0
$LN1@xmlSchemat:

; 838  : 
; 839  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronAddNamespace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronNewSchematron
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlSchematronNewSchematron PROC			; COMDAT

; 541  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 542  :     xmlSchematronPtr ret;
; 543  : 
; 544  :     ret = (xmlSchematronPtr) xmlMalloc(sizeof(xmlSchematron));

	mov	esi, esp
	push	56					; 00000038H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 545  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN2@xmlSchemat

; 546  :         xmlSchematronPErrMemory(ctxt, "allocating schema", NULL);

	push	0
	push	OFFSET ??_C@_0BC@BFLACGOA@allocating?5schema@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 547  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN2@xmlSchemat:

; 548  :     }
; 549  :     memset(ret, 0, sizeof(xmlSchematron));

	push	56					; 00000038H
	push	0
	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH

; 550  :     ret->dict = ctxt->dict;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+20], ecx

; 551  :     xmlDictReference(ret->dict);

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_xmlDictReference
	add	esp, 4

; 552  : 
; 553  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 554  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronNewSchematron ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronFreePatterns
_TEXT	SEGMENT
_next$ = -4						; size = 4
_patterns$ = 8						; size = 4
_xmlSchematronFreePatterns PROC				; COMDAT

; 519  : xmlSchematronFreePatterns(xmlSchematronPatternPtr patterns) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@xmlSchemat:

; 520  :     xmlSchematronPatternPtr next;
; 521  : 
; 522  :     while (patterns != NULL) {

	cmp	DWORD PTR _patterns$[ebp], 0
	je	SHORT $LN1@xmlSchemat

; 523  :         next = patterns->next;

	mov	eax, DWORD PTR _patterns$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx

; 524  : 	if (patterns->name != NULL)

	mov	edx, DWORD PTR _patterns$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN4@xmlSchemat

; 525  : 	    xmlFree(patterns->name);

	mov	esi, esp
	mov	eax, DWORD PTR _patterns$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlSchemat:

; 526  : 	xmlFree(patterns);

	mov	esi, esp
	mov	edx, DWORD PTR _patterns$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 527  : 	patterns = next;

	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _patterns$[ebp], eax

; 528  :     }

	jmp	SHORT $LN2@xmlSchemat
$LN1@xmlSchemat:

; 529  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronFreePatterns ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronAddPattern
_TEXT	SEGMENT
_prev$1 = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_schema$ = 12						; size = 4
_node$ = 16						; size = 4
_name$ = 20						; size = 4
_xmlSchematronAddPattern PROC				; COMDAT

; 486  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 487  :     xmlSchematronPatternPtr ret;
; 488  : 
; 489  :     if ((ctxt == NULL) || (schema == NULL) || (node == NULL) || (name == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlSchemat
	cmp	DWORD PTR _schema$[ebp], 0
	je	SHORT $LN5@xmlSchemat
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN5@xmlSchemat
	cmp	DWORD PTR _name$[ebp], 0
	jne	SHORT $LN4@xmlSchemat
$LN5@xmlSchemat:

; 490  :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN4@xmlSchemat:

; 491  : 
; 492  :     ret = (xmlSchematronPatternPtr) xmlMalloc(sizeof(xmlSchematronPattern));

	mov	esi, esp
	push	12					; 0000000cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 493  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN6@xmlSchemat

; 494  :         xmlSchematronPErrMemory(ctxt, "allocating schema pattern", node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	push	OFFSET ??_C@_0BK@KCAFICNM@allocating?5schema?5pattern@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 495  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN6@xmlSchemat:

; 496  :     }
; 497  :     memset(ret, 0, sizeof(xmlSchematronPattern));

	xor	edx, edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx

; 498  :     ret->name = name;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 499  :     ret->next = NULL;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], 0

; 500  :     if (schema->patterns == NULL) {

	mov	ecx, DWORD PTR _schema$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	jne	SHORT $LN7@xmlSchemat

; 501  : 	schema->patterns = ret;

	mov	edx, DWORD PTR _schema$[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+36], eax

; 502  :     } else {

	jmp	SHORT $LN8@xmlSchemat
$LN7@xmlSchemat:

; 503  :         xmlSchematronPatternPtr prev = schema->patterns;

	mov	ecx, DWORD PTR _schema$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _prev$1[ebp], edx
$LN2@xmlSchemat:

; 504  : 
; 505  : 	while (prev->next != NULL)

	mov	eax, DWORD PTR _prev$1[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@xmlSchemat

; 506  : 	     prev = prev->next;

	mov	ecx, DWORD PTR _prev$1[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _prev$1[ebp], edx
	jmp	SHORT $LN2@xmlSchemat
$LN3@xmlSchemat:

; 507  :         prev->next = ret;

	mov	eax, DWORD PTR _prev$1[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], ecx
$LN8@xmlSchemat:

; 508  :     }
; 509  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 510  : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronAddPattern ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronFreeRules
_TEXT	SEGMENT
_next$ = -4						; size = 4
_rules$ = 8						; size = 4
_xmlSchematronFreeRules PROC				; COMDAT

; 454  : xmlSchematronFreeRules(xmlSchematronRulePtr rules) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@xmlSchemat:

; 455  :     xmlSchematronRulePtr next;
; 456  : 
; 457  :     while (rules != NULL) {

	cmp	DWORD PTR _rules$[ebp], 0
	je	$LN1@xmlSchemat

; 458  :         next = rules->next;

	mov	eax, DWORD PTR _rules$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx

; 459  : 	if (rules->tests)

	mov	edx, DWORD PTR _rules$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN4@xmlSchemat

; 460  : 	    xmlSchematronFreeTests(rules->tests);

	mov	eax, DWORD PTR _rules$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlSchematronFreeTests
	add	esp, 4
$LN4@xmlSchemat:

; 461  : 	if (rules->context != NULL)

	mov	edx, DWORD PTR _rules$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN5@xmlSchemat

; 462  : 	    xmlFree(rules->context);

	mov	esi, esp
	mov	eax, DWORD PTR _rules$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlSchemat:

; 463  : 	if (rules->pattern)

	mov	edx, DWORD PTR _rules$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN6@xmlSchemat

; 464  : 	    xmlFreePattern(rules->pattern);

	mov	eax, DWORD PTR _rules$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlFreePattern
	add	esp, 4
$LN6@xmlSchemat:

; 465  : 	if (rules->report != NULL)

	mov	edx, DWORD PTR _rules$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN7@xmlSchemat

; 466  : 	    xmlFree(rules->report);

	mov	esi, esp
	mov	eax, DWORD PTR _rules$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN7@xmlSchemat:

; 467  : 	xmlFree(rules);

	mov	esi, esp
	mov	edx, DWORD PTR _rules$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 468  : 	rules = next;

	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _rules$[ebp], eax

; 469  :     }

	jmp	$LN2@xmlSchemat
$LN1@xmlSchemat:

; 470  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronFreeRules ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronAddRule
_TEXT	SEGMENT
_prev$1 = -16						; size = 4
_prev$2 = -12						; size = 4
_pattern$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_schema$ = 12						; size = 4
_pat$ = 16						; size = 4
_node$ = 20						; size = 4
_context$ = 24						; size = 4
_report$ = 28						; size = 4
_xmlSchematronAddRule PROC				; COMDAT

; 394  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 395  :     xmlSchematronRulePtr ret;
; 396  :     xmlPatternPtr pattern;
; 397  : 
; 398  :     if ((ctxt == NULL) || (schema == NULL) || (node == NULL) ||

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN7@xmlSchemat
	cmp	DWORD PTR _schema$[ebp], 0
	je	SHORT $LN7@xmlSchemat
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN7@xmlSchemat
	cmp	DWORD PTR _context$[ebp], 0
	jne	SHORT $LN6@xmlSchemat
$LN7@xmlSchemat:

; 399  :         (context == NULL))
; 400  :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN6@xmlSchemat:

; 401  : 
; 402  :     /*
; 403  :      * Try first to compile the pattern
; 404  :      */
; 405  :     pattern = xmlPatterncompile(context, ctxt->dict, XML_PATTERN_XPATH,

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	push	1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _context$[ebp]
	push	ecx
	call	_xmlPatterncompile
	add	esp, 16					; 00000010H
	mov	DWORD PTR _pattern$[ebp], eax

; 406  :                                 ctxt->namespaces);
; 407  :     if (pattern == NULL) {

	cmp	DWORD PTR _pattern$[ebp], 0
	jne	SHORT $LN8@xmlSchemat

; 408  : 	xmlSchematronPErr(ctxt, node,

	push	0
	mov	edx, DWORD PTR _context$[ebp]
	push	edx
	push	OFFSET ??_C@_0CI@BJKODKAC@Failed?5to?5compile?5context?5expre@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
$LN8@xmlSchemat:

; 409  : 	    XML_SCHEMAP_NOROOT,
; 410  : 	    "Failed to compile context expression %s",
; 411  : 	    context, NULL);
; 412  :     }
; 413  : 
; 414  :     ret = (xmlSchematronRulePtr) xmlMalloc(sizeof(xmlSchematronRule));

	mov	esi, esp
	push	28					; 0000001cH
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 415  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN9@xmlSchemat

; 416  :         xmlSchematronPErrMemory(ctxt, "allocating schema rule", node);

	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	push	OFFSET ??_C@_0BH@NOHOGEKI@allocating?5schema?5rule@
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 417  :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN9@xmlSchemat:

; 418  :     }
; 419  :     memset(ret, 0, sizeof(xmlSchematronRule));

	xor	ecx, ecx
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	DWORD PTR [edx+4], ecx
	mov	DWORD PTR [edx+8], ecx
	mov	DWORD PTR [edx+12], ecx
	mov	DWORD PTR [edx+16], ecx
	mov	DWORD PTR [edx+20], ecx
	mov	DWORD PTR [edx+24], ecx

; 420  :     ret->node = node;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 421  :     ret->context = context;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _context$[ebp]
	mov	DWORD PTR [edx+12], eax

; 422  :     ret->pattern = pattern;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _pattern$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 423  :     ret->report = report;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _report$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 424  :     ret->next = NULL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], 0

; 425  :     if (schema->rules == NULL) {

	mov	eax, DWORD PTR _schema$[ebp]
	cmp	DWORD PTR [eax+40], 0
	jne	SHORT $LN10@xmlSchemat

; 426  : 	schema->rules = ret;

	mov	ecx, DWORD PTR _schema$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+40], edx

; 427  :     } else {

	jmp	SHORT $LN11@xmlSchemat
$LN10@xmlSchemat:

; 428  :         xmlSchematronRulePtr prev = schema->rules;

	mov	eax, DWORD PTR _schema$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _prev$2[ebp], ecx
$LN2@xmlSchemat:

; 429  : 
; 430  : 	while (prev->next != NULL)

	mov	edx, DWORD PTR _prev$2[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@xmlSchemat

; 431  : 	     prev = prev->next;

	mov	eax, DWORD PTR _prev$2[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _prev$2[ebp], ecx
	jmp	SHORT $LN2@xmlSchemat
$LN3@xmlSchemat:

; 432  :         prev->next = ret;

	mov	edx, DWORD PTR _prev$2[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], eax
$LN11@xmlSchemat:

; 433  :     }
; 434  :     ret->patnext = NULL;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 435  :     if (pat->rules == NULL) {

	mov	edx, DWORD PTR _pat$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN12@xmlSchemat

; 436  : 	pat->rules = ret;

	mov	eax, DWORD PTR _pat$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 437  :     } else {

	jmp	SHORT $LN13@xmlSchemat
$LN12@xmlSchemat:

; 438  :         xmlSchematronRulePtr prev = pat->rules;

	mov	edx, DWORD PTR _pat$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _prev$1[ebp], eax
$LN4@xmlSchemat:

; 439  : 
; 440  : 	while (prev->patnext != NULL)

	mov	ecx, DWORD PTR _prev$1[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN5@xmlSchemat

; 441  : 	     prev = prev->patnext;

	mov	edx, DWORD PTR _prev$1[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _prev$1[ebp], eax
	jmp	SHORT $LN4@xmlSchemat
$LN5@xmlSchemat:

; 442  :         prev->patnext = ret;

	mov	ecx, DWORD PTR _prev$1[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN13@xmlSchemat:

; 443  :     }
; 444  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 445  : }

	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronAddRule ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronFreeTests
_TEXT	SEGMENT
_next$ = -4						; size = 4
_tests$ = 8						; size = 4
_xmlSchematronFreeTests PROC				; COMDAT

; 362  : xmlSchematronFreeTests(xmlSchematronTestPtr tests) {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4
$LN2@xmlSchemat:

; 363  :     xmlSchematronTestPtr next;
; 364  : 
; 365  :     while (tests != NULL) {

	cmp	DWORD PTR _tests$[ebp], 0
	je	$LN1@xmlSchemat

; 366  :         next = tests->next;

	mov	eax, DWORD PTR _tests$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _next$[ebp], ecx

; 367  : 	if (tests->test != NULL)

	mov	edx, DWORD PTR _tests$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN4@xmlSchemat

; 368  : 	    xmlFree(tests->test);

	mov	esi, esp
	mov	eax, DWORD PTR _tests$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlSchemat:

; 369  : 	if (tests->comp != NULL)

	mov	edx, DWORD PTR _tests$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN5@xmlSchemat

; 370  : 	    xmlXPathFreeCompExpr(tests->comp);

	mov	eax, DWORD PTR _tests$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_xmlXPathFreeCompExpr
	add	esp, 4
$LN5@xmlSchemat:

; 371  : 	if (tests->report != NULL)

	mov	edx, DWORD PTR _tests$[ebp]
	cmp	DWORD PTR [edx+20], 0
	je	SHORT $LN6@xmlSchemat

; 372  : 	    xmlFree(tests->report);

	mov	esi, esp
	mov	eax, DWORD PTR _tests$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@xmlSchemat:

; 373  : 	xmlFree(tests);

	mov	esi, esp
	mov	edx, DWORD PTR _tests$[ebp]
	push	edx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp

; 374  : 	tests = next;

	mov	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _tests$[ebp], eax

; 375  :     }

	jmp	$LN2@xmlSchemat
$LN1@xmlSchemat:

; 376  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronFreeTests ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronAddTest
_TEXT	SEGMENT
_prev$1 = -12						; size = 4
_comp$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_type$ = 12						; size = 4
_rule$ = 16						; size = 4
_node$ = 20						; size = 4
_test$ = 24						; size = 4
_report$ = 28						; size = 4
_xmlSchematronAddTest PROC				; COMDAT

; 311  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 312  :     xmlSchematronTestPtr ret;
; 313  :     xmlXPathCompExprPtr comp;
; 314  : 
; 315  :     if ((ctxt == NULL) || (rule == NULL) || (node == NULL) ||

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN5@xmlSchemat
	cmp	DWORD PTR _rule$[ebp], 0
	je	SHORT $LN5@xmlSchemat
	cmp	DWORD PTR _node$[ebp], 0
	je	SHORT $LN5@xmlSchemat
	cmp	DWORD PTR _test$[ebp], 0
	jne	SHORT $LN4@xmlSchemat
$LN5@xmlSchemat:

; 316  :         (test == NULL))
; 317  :         return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN4@xmlSchemat:

; 318  : 
; 319  :     /*
; 320  :      * try first to compile the test expression
; 321  :      */
; 322  :     comp = xmlXPathCtxtCompile(ctxt->xctxt, test);

	mov	eax, DWORD PTR _test$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_xmlXPathCtxtCompile
	add	esp, 8
	mov	DWORD PTR _comp$[ebp], eax

; 323  :     if (comp == NULL) {

	cmp	DWORD PTR _comp$[ebp], 0
	jne	SHORT $LN6@xmlSchemat

; 324  : 	xmlSchematronPErr(ctxt, node,

	push	0
	mov	eax, DWORD PTR _test$[ebp]
	push	eax
	push	OFFSET ??_C@_0CF@CDHGHDAB@Failed?5to?5compile?5test?5expressi@
	push	1759					; 000006dfH
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 325  : 	    XML_SCHEMAP_NOROOT,
; 326  : 	    "Failed to compile test expression %s",
; 327  : 	    test, NULL);
; 328  : 	return(NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN6@xmlSchemat:

; 329  :     }
; 330  : 
; 331  :     ret = (xmlSchematronTestPtr) xmlMalloc(sizeof(xmlSchematronTest));

	mov	esi, esp
	push	24					; 00000018H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 332  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN7@xmlSchemat

; 333  :         xmlSchematronPErrMemory(ctxt, "allocating schema test", node);

	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	push	OFFSET ??_C@_0BH@EFIEABMK@allocating?5schema?5test@
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 334  :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN7@xmlSchemat:

; 335  :     }
; 336  :     memset(ret, 0, sizeof(xmlSchematronTest));

	xor	edx, edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+4], edx
	mov	DWORD PTR [eax+8], edx
	mov	DWORD PTR [eax+12], edx
	mov	DWORD PTR [eax+16], edx
	mov	DWORD PTR [eax+20], edx

; 337  :     ret->type = type;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _type$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 338  :     ret->node = node;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _node$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 339  :     ret->test = test;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _test$[ebp]
	mov	DWORD PTR [edx+12], eax

; 340  :     ret->comp = comp;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _comp$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 341  :     ret->report = report;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _report$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 342  :     ret->next = NULL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], 0

; 343  :     if (rule->tests == NULL) {

	mov	eax, DWORD PTR _rule$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN8@xmlSchemat

; 344  : 	rule->tests = ret;

	mov	ecx, DWORD PTR _rule$[ebp]
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 345  :     } else {

	jmp	SHORT $LN9@xmlSchemat
$LN8@xmlSchemat:

; 346  :         xmlSchematronTestPtr prev = rule->tests;

	mov	eax, DWORD PTR _rule$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _prev$1[ebp], ecx
$LN2@xmlSchemat:

; 347  : 
; 348  : 	while (prev->next != NULL)

	mov	edx, DWORD PTR _prev$1[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN3@xmlSchemat

; 349  : 	     prev = prev->next;

	mov	eax, DWORD PTR _prev$1[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _prev$1[ebp], ecx
	jmp	SHORT $LN2@xmlSchemat
$LN3@xmlSchemat:

; 350  :         prev->next = ret;

	mov	edx, DWORD PTR _prev$1[ebp]
	mov	eax, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx], eax
$LN9@xmlSchemat:

; 351  :     }
; 352  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 353  : }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronAddTest ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronVErrMemory
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_extra$ = 12						; size = 4
_node$ = 16						; size = 4
_xmlSchematronVErrMemory PROC				; COMDAT

; 278  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 279  :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlSchemat

; 280  :         ctxt->nberrors++;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+12], ecx

; 281  :         ctxt->err = XML_SCHEMAV_INTERNAL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+16], 1818		; 0000071aH
$LN2@xmlSchemat:

; 282  :     }
; 283  :     __xmlSimpleError(XML_FROM_SCHEMASV, XML_ERR_NO_MEMORY, node, NULL,

	mov	ecx, DWORD PTR _extra$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _node$[ebp]
	push	edx
	push	2
	push	17					; 00000011H
	call	___xmlSimpleError
	add	esp, 20					; 00000014H

; 284  :                      extra);
; 285  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSchematronVErrMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronPErr
_TEXT	SEGMENT
_data$ = -12						; size = 4
_schannel$ = -8						; size = 4
_channel$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_node$ = 12						; size = 4
_error$ = 16						; size = 4
_msg$ = 20						; size = 4
_str1$ = 24						; size = 4
_str2$ = 28						; size = 4
_xmlSchematronPErr PROC					; COMDAT

; 251  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 252  :     xmlGenericErrorFunc channel = NULL;

	mov	DWORD PTR _channel$[ebp], 0

; 253  :     xmlStructuredErrorFunc schannel = NULL;

	mov	DWORD PTR _schannel$[ebp], 0

; 254  :     void *data = NULL;

	mov	DWORD PTR _data$[ebp], 0

; 255  : 
; 256  :     if (ctxt != NULL) {

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlSchemat

; 257  :         ctxt->nberrors++;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+28], ecx

; 258  :         channel = ctxt->error;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _channel$[ebp], ecx

; 259  :         data = ctxt->userData;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR _data$[ebp], eax

; 260  : 	schannel = ctxt->serror;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+80]
	mov	DWORD PTR _schannel$[ebp], edx
$LN2@xmlSchemat:

; 261  :     }
; 262  :     __xmlRaiseError(schannel, channel, data, ctxt, node, XML_FROM_SCHEMASP,

	mov	eax, DWORD PTR _str2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _msg$[ebp]
	push	edx
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR _str2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str1$[ebp]
	push	ecx
	push	0
	push	0
	push	2
	mov	edx, DWORD PTR _error$[ebp]
	push	edx
	push	16					; 00000010H
	mov	eax, DWORD PTR _node$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _channel$[ebp]
	push	eax
	mov	ecx, DWORD PTR _schannel$[ebp]
	push	ecx
	call	___xmlRaiseError
	add	esp, 72					; 00000048H

; 263  :                     error, XML_ERR_ERROR, NULL, 0,
; 264  :                     (const char *) str1, (const char *) str2, NULL, 0, 0,
; 265  :                     msg, str1, str2);
; 266  : }

	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronPErr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronPErrMemory
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_extra$ = 12						; size = 4
_node$ = 16						; size = 4
_xmlSchematronPErrMemory PROC				; COMDAT

; 230  : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 231  :     if (ctxt != NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN2@xmlSchemat

; 232  :         ctxt->nberrors++;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN2@xmlSchemat:

; 233  :     __xmlSimpleError(XML_FROM_SCHEMASP, XML_ERR_NO_MEMORY, node, NULL,

	mov	eax, DWORD PTR _extra$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _node$[ebp]
	push	ecx
	push	2
	push	16					; 00000010H
	call	___xmlSimpleError
	add	esp, 20					; 00000014H

; 234  :                      extra);
; 235  : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSchematronPErrMemory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronValidateDoc
_TEXT	SEGMENT
_test$ = -20						; size = 4
_rule$ = -16						; size = 4
_pattern$ = -12						; size = 4
_root$ = -8						; size = 4
_cur$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_instance$ = 12						; size = 4
_xmlSchematronValidateDoc PROC				; COMDAT

; 1667 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1668 :     xmlNodePtr cur, root;
; 1669 :     xmlSchematronPatternPtr pattern;
; 1670 :     xmlSchematronRulePtr rule;
; 1671 :     xmlSchematronTestPtr test;
; 1672 : 
; 1673 :     if ((ctxt == NULL) || (ctxt->schema == NULL) ||
; 1674 :         (ctxt->schema->rules == NULL) || (instance == NULL))

	cmp	DWORD PTR _ctxt$[ebp], 0
	je	SHORT $LN17@xmlSchemat
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN17@xmlSchemat
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	cmp	DWORD PTR [edx+40], 0
	je	SHORT $LN17@xmlSchemat
	cmp	DWORD PTR _instance$[ebp], 0
	jne	SHORT $LN16@xmlSchemat
$LN17@xmlSchemat:

; 1675 :         return(-1);

	or	eax, -1
	jmp	$LN1@xmlSchemat
$LN16@xmlSchemat:

; 1676 :     ctxt->nberrors = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+12], 0

; 1677 :     root = xmlDocGetRootElement(instance);

	mov	ecx, DWORD PTR _instance$[ebp]
	push	ecx
	call	_xmlDocGetRootElement
	add	esp, 4
	mov	DWORD PTR _root$[ebp], eax

; 1678 :     if (root == NULL) {

	cmp	DWORD PTR _root$[ebp], 0
	jne	SHORT $LN18@xmlSchemat

; 1679 :         TODO

	mov	esi, esp
	push	1679					; 0000068fH
	push	OFFSET ??_C@_0GM@OEFFILND@c?3?2users?2dag?2documents?2_clients@
	push	OFFSET ??_C@_0BO@MDEMDPPE@Unimplemented?5block?5at?5?$CFs?3?$CFd?6@
	call	___xmlGenericErrorContext
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___xmlGenericError
	mov	eax, DWORD PTR [eax]
	call	eax
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 1680 : 	ctxt->nberrors++;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 1
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+12], edx

; 1681 : 	return(1);

	mov	eax, 1
	jmp	$LN1@xmlSchemat
$LN18@xmlSchemat:

; 1682 :     }
; 1683 :     if ((ctxt->flags & XML_SCHEMATRON_OUT_QUIET) ||

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	and	edx, 1
	jne	SHORT $LN21@xmlSchemat
	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN19@xmlSchemat
$LN21@xmlSchemat:

; 1684 :         (ctxt->flags == 0)) {
; 1685 : 	/*
; 1686 : 	 * we are just trying to assert the validity of the document,
; 1687 : 	 * speed primes over the output, run in a single pass
; 1688 : 	 */
; 1689 : 	cur = root;

	mov	ecx, DWORD PTR _root$[ebp]
	mov	DWORD PTR _cur$[ebp], ecx
$LN2@xmlSchemat:

; 1690 : 	while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN3@xmlSchemat

; 1691 : 	    rule = ctxt->schema->rules;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _rule$[ebp], ecx
$LN4@xmlSchemat:

; 1692 : 	    while (rule != NULL) {

	cmp	DWORD PTR _rule$[ebp], 0
	je	SHORT $LN5@xmlSchemat

; 1693 : 		if (xmlPatternMatch(rule->pattern, cur) == 1) {

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _rule$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlPatternMatch
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN22@xmlSchemat

; 1694 : 		    test = rule->tests;

	mov	edx, DWORD PTR _rule$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _test$[ebp], eax
$LN6@xmlSchemat:

; 1695 : 		    while (test != NULL) {

	cmp	DWORD PTR _test$[ebp], 0
	je	SHORT $LN22@xmlSchemat

; 1696 : 			xmlSchematronRunTest(ctxt, test, instance, cur, (xmlSchematronPatternPtr)rule->pattern);

	mov	ecx, DWORD PTR _rule$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _instance$[ebp]
	push	ecx
	mov	edx, DWORD PTR _test$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronRunTest
	add	esp, 20					; 00000014H

; 1697 : 			test = test->next;

	mov	ecx, DWORD PTR _test$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _test$[ebp], edx

; 1698 : 		    }

	jmp	SHORT $LN6@xmlSchemat
$LN22@xmlSchemat:

; 1699 : 		}
; 1700 : 		rule = rule->next;

	mov	eax, DWORD PTR _rule$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _rule$[ebp], ecx

; 1701 : 	    }

	jmp	SHORT $LN4@xmlSchemat
$LN5@xmlSchemat:

; 1702 : 
; 1703 : 	    cur = xmlSchematronNextNode(cur);

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	call	_xmlSchematronNextNode
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 1704 : 	}

	jmp	$LN2@xmlSchemat
$LN3@xmlSchemat:

; 1705 :     } else {

	jmp	$LN20@xmlSchemat
$LN19@xmlSchemat:

; 1706 :         /*
; 1707 : 	 * Process all contexts one at a time
; 1708 : 	 */
; 1709 : 	pattern = ctxt->schema->patterns;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _pattern$[ebp], edx
$LN8@xmlSchemat:

; 1710 : 
; 1711 : 	while (pattern != NULL) {

	cmp	DWORD PTR _pattern$[ebp], 0
	je	$LN20@xmlSchemat

; 1712 : 	    xmlSchematronReportPattern(ctxt, pattern);

	mov	eax, DWORD PTR _pattern$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronReportPattern
	add	esp, 8

; 1713 : 
; 1714 : 	    /*
; 1715 : 	     * TODO convert the pattern rule to a direct XPath and
; 1716 : 	     * compute directly instead of using the pattern matching
; 1717 : 	     * over the full document...
; 1718 : 	     * Check the exact semantic
; 1719 : 	     */
; 1720 : 	    cur = root;

	mov	edx, DWORD PTR _root$[ebp]
	mov	DWORD PTR _cur$[ebp], edx
$LN10@xmlSchemat:

; 1721 : 	    while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN11@xmlSchemat

; 1722 : 		rule = pattern->rules;

	mov	eax, DWORD PTR _pattern$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _rule$[ebp], ecx
$LN12@xmlSchemat:

; 1723 : 		while (rule != NULL) {

	cmp	DWORD PTR _rule$[ebp], 0
	je	SHORT $LN13@xmlSchemat

; 1724 : 		    if (xmlPatternMatch(rule->pattern, cur) == 1) {

	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _rule$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlPatternMatch
	add	esp, 8
	cmp	eax, 1
	jne	SHORT $LN23@xmlSchemat

; 1725 : 			test = rule->tests;

	mov	edx, DWORD PTR _rule$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR _test$[ebp], eax
$LN14@xmlSchemat:

; 1726 : 			while (test != NULL) {

	cmp	DWORD PTR _test$[ebp], 0
	je	SHORT $LN23@xmlSchemat

; 1727 : 			    xmlSchematronRunTest(ctxt, test, instance, cur, pattern);

	mov	ecx, DWORD PTR _pattern$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _instance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _test$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronRunTest
	add	esp, 20					; 00000014H

; 1728 : 			    test = test->next;

	mov	eax, DWORD PTR _test$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _test$[ebp], ecx

; 1729 : 			}

	jmp	SHORT $LN14@xmlSchemat
$LN23@xmlSchemat:

; 1730 : 		    }
; 1731 : 		    rule = rule->patnext;

	mov	edx, DWORD PTR _rule$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _rule$[ebp], eax

; 1732 : 		}

	jmp	SHORT $LN12@xmlSchemat
$LN13@xmlSchemat:

; 1733 : 
; 1734 : 		cur = xmlSchematronNextNode(cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_xmlSchematronNextNode
	add	esp, 4
	mov	DWORD PTR _cur$[ebp], eax

; 1735 : 	    }

	jmp	SHORT $LN10@xmlSchemat
$LN11@xmlSchemat:

; 1736 : 	    pattern = pattern->next;

	mov	edx, DWORD PTR _pattern$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _pattern$[ebp], eax

; 1737 : 	}

	jmp	$LN8@xmlSchemat
$LN20@xmlSchemat:

; 1738 :     }
; 1739 :     return(ctxt->nberrors);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [ecx+12]
$LN1@xmlSchemat:

; 1740 : }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronValidateDoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronFreeValidCtxt
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_xmlSchematronFreeValidCtxt PROC			; COMDAT

; 1545 : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1546 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlSchemat

; 1547 :         return;

	jmp	SHORT $LN1@xmlSchemat
$LN2@xmlSchemat:

; 1548 :     if (ctxt->xctxt != NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+24], 0
	je	SHORT $LN3@xmlSchemat

; 1549 :         xmlXPathFreeContext(ctxt->xctxt);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlXPathFreeContext
	add	esp, 4
$LN3@xmlSchemat:

; 1550 :     if (ctxt->dict != NULL)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN4@xmlSchemat

; 1551 :         xmlDictFree(ctxt->dict);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlDictFree
	add	esp, 4
$LN4@xmlSchemat:

; 1552 :     xmlFree(ctxt);

	mov	esi, esp
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlSchemat:

; 1553 : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSchematronFreeValidCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronNewValidCtxt
_TEXT	SEGMENT
_ret$ = -8						; size = 4
_i$ = -4						; size = 4
_schema$ = 8						; size = 4
_options$ = 12						; size = 4
_xmlSchematronNewValidCtxt PROC				; COMDAT

; 1506 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1507 :     int i;
; 1508 :     xmlSchematronValidCtxtPtr ret;
; 1509 : 
; 1510 :     ret = (xmlSchematronValidCtxtPtr) xmlMalloc(sizeof(xmlSchematronValidCtxt));

	mov	esi, esp
	push	64					; 00000040H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 1511 :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN5@xmlSchemat

; 1512 :         xmlSchematronVErrMemory(NULL, "allocating validation context",

	push	0
	push	OFFSET ??_C@_0BO@JGCBGKGF@allocating?5validation?5context@
	push	0
	call	_xmlSchematronVErrMemory
	add	esp, 12					; 0000000cH

; 1513 :                                 NULL);
; 1514 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN5@xmlSchemat:

; 1515 :     }
; 1516 :     memset(ret, 0, sizeof(xmlSchematronValidCtxt));

	push	64					; 00000040H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1517 :     ret->type = XML_STRON_CTXT_VALIDATOR;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 2

; 1518 :     ret->schema = schema;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _schema$[ebp]
	mov	DWORD PTR [edx+20], eax

; 1519 :     ret->xctxt = xmlXPathNewContext(NULL);

	push	0
	call	_xmlXPathNewContext
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 1520 :     ret->flags = options;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _options$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1521 :     if (ret->xctxt == NULL) {

	mov	ecx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [ecx+24], 0
	jne	SHORT $LN6@xmlSchemat

; 1522 :         xmlSchematronPErrMemory(NULL, "allocating schema parser XPath context",

	push	0
	push	OFFSET ??_C@_0CH@JIEMFKIC@allocating?5schema?5parser?5XPath?5@
	push	0
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 1523 :                                 NULL);
; 1524 : 	xmlSchematronFreeValidCtxt(ret);

	mov	edx, DWORD PTR _ret$[ebp]
	push	edx
	call	_xmlSchematronFreeValidCtxt
	add	esp, 4

; 1525 :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN6@xmlSchemat:

; 1526 :     }
; 1527 :     for (i = 0;i < schema->nbNamespaces;i++) {

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@xmlSchemat
$LN2@xmlSchemat:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@xmlSchemat:
	mov	ecx, DWORD PTR _schema$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jge	SHORT $LN3@xmlSchemat

; 1528 :         if ((schema->namespaces[2 * i] == NULL) ||

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _schema$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+eax*4], 0
	je	SHORT $LN8@xmlSchemat
	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _schema$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	cmp	DWORD PTR [edx+eax*4+4], 0
	jne	SHORT $LN7@xmlSchemat
$LN8@xmlSchemat:

; 1529 :             (schema->namespaces[2 * i + 1] == NULL))
; 1530 : 	    break;

	jmp	SHORT $LN3@xmlSchemat
$LN7@xmlSchemat:

; 1531 : 	xmlXPathRegisterNs(ret->xctxt, schema->namespaces[2 * i + 1],

	mov	eax, DWORD PTR _i$[ebp]
	shl	eax, 1
	mov	ecx, DWORD PTR _schema$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+eax*4]
	push	eax
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 1
	mov	edx, DWORD PTR _schema$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR [eax+ecx*4+4]
	push	ecx
	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	call	_xmlXPathRegisterNs
	add	esp, 12					; 0000000cH

; 1532 : 	                   schema->namespaces[2 * i]);
; 1533 :     }

	jmp	SHORT $LN2@xmlSchemat
$LN3@xmlSchemat:

; 1534 :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 1535 : }

	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronNewValidCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronSetValidStructuredErrors
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_serror$ = 12						; size = 4
_ctx$ = 16						; size = 4
_xmlSchematronSetValidStructuredErrors PROC		; COMDAT

; 1486 : {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1487 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlSchemat

; 1488 :         return;

	jmp	SHORT $LN1@xmlSchemat
$LN2@xmlSchemat:

; 1489 :     ctxt->serror = serror;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _serror$[ebp]
	mov	DWORD PTR [eax+60], ecx

; 1490 :     ctxt->error = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+52], 0

; 1491 :     ctxt->warning = NULL;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+56], 0

; 1492 :     ctxt->userData = ctx;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR _ctx$[ebp]
	mov	DWORD PTR [ecx+48], edx
$LN1@xmlSchemat:

; 1493 : }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSchematronSetValidStructuredErrors ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronFree
_TEXT	SEGMENT
_schema$ = 8						; size = 4
_xmlSchematronFree PROC					; COMDAT

; 564  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 565  :     if (schema == NULL)

	cmp	DWORD PTR _schema$[ebp], 0
	jne	SHORT $LN2@xmlSchemat

; 566  :         return;

	jmp	$LN1@xmlSchemat
$LN2@xmlSchemat:

; 567  : 
; 568  :     if ((schema->doc != NULL) && (!(schema->preserve)))

	mov	eax, DWORD PTR _schema$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@xmlSchemat
	mov	ecx, DWORD PTR _schema$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN3@xmlSchemat

; 569  :         xmlFreeDoc(schema->doc);

	mov	edx, DWORD PTR _schema$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlFreeDoc
	add	esp, 4
$LN3@xmlSchemat:

; 570  : 
; 571  :     if (schema->namespaces != NULL)

	mov	ecx, DWORD PTR _schema$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN4@xmlSchemat

; 572  :         xmlFree((char **) schema->namespaces);

	mov	esi, esp
	mov	edx, DWORD PTR _schema$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@xmlSchemat:

; 573  : 
; 574  :     xmlSchematronFreeRules(schema->rules);

	mov	ecx, DWORD PTR _schema$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	call	_xmlSchematronFreeRules
	add	esp, 4

; 575  :     xmlSchematronFreePatterns(schema->patterns);

	mov	eax, DWORD PTR _schema$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	call	_xmlSchematronFreePatterns
	add	esp, 4

; 576  :     xmlDictFree(schema->dict);

	mov	edx, DWORD PTR _schema$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	_xmlDictFree
	add	esp, 4

; 577  :     xmlFree(schema);

	mov	esi, esp
	mov	ecx, DWORD PTR _schema$[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlSchemat:

; 578  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSchematronFree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronParse
_TEXT	SEGMENT
_uri$1 = -32						; size = 4
_prefix$2 = -28						; size = 4
_title$3 = -24						; size = 4
_preserve$ = -20					; size = 4
_cur$ = -16						; size = 4
_root$ = -12						; size = 4
_doc$ = -8						; size = 4
_ret$ = -4						; size = 4
_ctxt$ = 8						; size = 4
_xmlSchematronParse PROC				; COMDAT

; 1078 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 1079 :     xmlSchematronPtr ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 1080 :     xmlDocPtr doc;
; 1081 :     xmlNodePtr root, cur;
; 1082 :     int preserve = 0;

	mov	DWORD PTR _preserve$[ebp], 0

; 1083 : 
; 1084 :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN14@xmlSchemat

; 1085 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN14@xmlSchemat:

; 1086 : 
; 1087 :     ctxt->nberrors = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+28], 0

; 1088 : 
; 1089 :     /*
; 1090 :      * First step is to parse the input document into an DOM/Infoset
; 1091 :      */
; 1092 :     if (ctxt->URL != NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN15@xmlSchemat

; 1093 :         doc = xmlReadFile((const char *) ctxt->URL, NULL,

	push	2
	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_xmlReadFile
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _doc$[ebp], eax

; 1094 : 	                  SCHEMATRON_PARSE_OPTIONS);
; 1095 :         if (doc == NULL) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN17@xmlSchemat

; 1096 : 	    xmlSchematronPErr(ctxt, NULL,

	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET ??_C@_0CK@FENMHHNI@xmlSchematronParse?3?5could?5not?5l@
	push	1757					; 000006ddH
	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 1097 : 			  XML_SCHEMAP_FAILED_LOAD,
; 1098 :                           "xmlSchematronParse: could not load '%s'.\n",
; 1099 :                           ctxt->URL, NULL);
; 1100 :             return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN17@xmlSchemat:

; 1101 :         }
; 1102 : 	ctxt->preserve = 0;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+12], 0
	jmp	$LN16@xmlSchemat
$LN15@xmlSchemat:

; 1103 :     } else if (ctxt->buffer != NULL) {

	mov	edx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	$LN18@xmlSchemat

; 1104 :         doc = xmlReadMemory(ctxt->buffer, ctxt->size, NULL, NULL,

	push	2
	push	0
	push	0
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	_xmlReadMemory
	add	esp, 20					; 00000014H
	mov	DWORD PTR _doc$[ebp], eax

; 1105 : 	                    SCHEMATRON_PARSE_OPTIONS);
; 1106 :         if (doc == NULL) {

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN20@xmlSchemat

; 1107 : 	    xmlSchematronPErr(ctxt, NULL,

	push	0
	push	0
	push	OFFSET ??_C@_0CG@KJCFFGDH@xmlSchematronParse?3?5could?5not?5p@
	push	1766					; 000006e6H
	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 1108 : 			  XML_SCHEMAP_FAILED_PARSE,
; 1109 :                           "xmlSchematronParse: could not parse.\n",
; 1110 :                           NULL, NULL);
; 1111 :             return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN20@xmlSchemat:

; 1112 :         }
; 1113 :         doc->URL = xmlStrdup(BAD_CAST "in_memory_buffer");

	push	OFFSET ??_C@_0BB@IEONCAEH@in_memory_buffer@
	call	_xmlStrdup
	add	esp, 4
	mov	edx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+72], eax

; 1114 :         ctxt->URL = xmlDictLookup(ctxt->dict, BAD_CAST "in_memory_buffer", -1);

	push	-1
	push	OFFSET ??_C@_0BB@IEONCAEH@in_memory_buffer@
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+4], eax

; 1115 : 	ctxt->preserve = 0;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [eax+12], 0
	jmp	SHORT $LN16@xmlSchemat
$LN18@xmlSchemat:

; 1116 :     } else if (ctxt->doc != NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN21@xmlSchemat

; 1117 :         doc = ctxt->doc;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _doc$[ebp], eax

; 1118 : 	preserve = 1;

	mov	DWORD PTR _preserve$[ebp], 1

; 1119 : 	ctxt->preserve = 1;

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [ecx+12], 1

; 1120 :     } else {

	jmp	SHORT $LN16@xmlSchemat
$LN21@xmlSchemat:

; 1121 : 	xmlSchematronPErr(ctxt, NULL,

	push	0
	push	0
	push	OFFSET ??_C@_0CG@KJCFFGDH@xmlSchematronParse?3?5could?5not?5p@
	push	1758					; 000006deH
	push	0
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 1122 : 		      XML_SCHEMAP_NOTHING_TO_PARSE,
; 1123 : 		      "xmlSchematronParse: could not parse.\n",
; 1124 : 		      NULL, NULL);
; 1125 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN16@xmlSchemat:

; 1126 :     }
; 1127 : 
; 1128 :     /*
; 1129 :      * Then extract the root and Schematron parse it
; 1130 :      */
; 1131 :     root = xmlDocGetRootElement(doc);

	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlDocGetRootElement
	add	esp, 4
	mov	DWORD PTR _root$[ebp], eax

; 1132 :     if (root == NULL) {

	cmp	DWORD PTR _root$[ebp], 0
	jne	SHORT $LN23@xmlSchemat

; 1133 : 	xmlSchematronPErr(ctxt, (xmlNodePtr) doc,

	push	0
	push	0
	push	OFFSET ??_C@_0CF@CKMAMFKI@The?5schema?5has?5no?5document?5elem@
	push	1759					; 000006dfH
	mov	ecx, DWORD PTR _doc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 1134 : 		      XML_SCHEMAP_NOROOT,
; 1135 : 		      "The schema has no document element.\n", NULL, NULL);
; 1136 : 	if (!preserve) {

	cmp	DWORD PTR _preserve$[ebp], 0
	jne	SHORT $LN24@xmlSchemat

; 1137 : 	    xmlFreeDoc(doc);

	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlFreeDoc
	add	esp, 4
$LN24@xmlSchemat:

; 1138 : 	}
; 1139 :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN23@xmlSchemat:

; 1140 :     }
; 1141 : 
; 1142 :     if (!IS_SCHEMATRON(root, "schema")) {

	cmp	DWORD PTR _root$[ebp], 0
	je	SHORT $LN26@xmlSchemat
	mov	ecx, DWORD PTR _root$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN26@xmlSchemat
	mov	edx, DWORD PTR _root$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN26@xmlSchemat
	push	OFFSET ??_C@_06KICAKOOL@schema@
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN26@xmlSchemat
	mov	edx, DWORD PTR _xmlSchematronNs
	push	edx
	mov	eax, DWORD PTR _root$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@xmlSchemat
	mov	eax, DWORD PTR _xmlOldSchematronNs
	push	eax
	mov	ecx, DWORD PTR _root$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN25@xmlSchemat
$LN26@xmlSchemat:

; 1143 : 	xmlSchematronPErr(ctxt, root,

	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET ??_C@_0DH@PDEEDFDL@The?5XML?5document?5?8?$CFs?8?5is?5not?5a?5@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 1144 : 	    XML_SCHEMAP_NOROOT,
; 1145 : 	    "The XML document '%s' is not a XML schematron document",
; 1146 : 	    ctxt->URL, NULL);
; 1147 : 	goto exit;

	jmp	$exit$57
$LN25@xmlSchemat:

; 1148 :     }
; 1149 :     ret = xmlSchematronNewSchematron(ctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronNewSchematron
	add	esp, 4
	mov	DWORD PTR _ret$[ebp], eax

; 1150 :     if (ret == NULL)

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN27@xmlSchemat

; 1151 :         goto exit;

	jmp	$exit$57
$LN27@xmlSchemat:

; 1152 :     ctxt->schema = ret;

	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [eax+40], ecx

; 1153 : 
; 1154 :     /*
; 1155 :      * scan the schema elements
; 1156 :      */
; 1157 :     cur = root->children;

	mov	edx, DWORD PTR _root$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR _cur$[ebp], eax
$LN2@xmlSchemat:

; 1158 :     NEXT_SCHEMATRON(cur);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN3@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN28@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN28@xmlSchemat
	mov	eax, DWORD PTR _xmlSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN29@xmlSchemat
	mov	ecx, DWORD PTR _xmlOldSchematronNs
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN28@xmlSchemat
$LN29@xmlSchemat:
	jmp	SHORT $LN3@xmlSchemat
$LN28@xmlSchemat:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN2@xmlSchemat
$LN3@xmlSchemat:

; 1159 :     if (IS_SCHEMATRON(cur, "title")) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN6@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	$LN6@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	$LN6@xmlSchemat
	push	OFFSET ??_C@_05PHLGJONK@title@
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN6@xmlSchemat
	mov	edx, DWORD PTR _xmlSchematronNs
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN31@xmlSchemat
	mov	eax, DWORD PTR _xmlOldSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN6@xmlSchemat
$LN31@xmlSchemat:

; 1160 :         xmlChar *title = xmlNodeGetContent(cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_xmlNodeGetContent
	add	esp, 4
	mov	DWORD PTR _title$3[ebp], eax

; 1161 : 	if (title != NULL) {

	cmp	DWORD PTR _title$3[ebp], 0
	je	SHORT $LN32@xmlSchemat

; 1162 : 	    ret->title = xmlDictLookup(ret->dict, title, -1);

	push	-1
	mov	edx, DWORD PTR _title$3[ebp]
	push	edx
	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], eax

; 1163 : 	    xmlFree(title);

	mov	esi, esp
	mov	eax, DWORD PTR _title$3[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN32@xmlSchemat:

; 1164 : 	}
; 1165 : 	cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx
$LN4@xmlSchemat:

; 1166 : 	NEXT_SCHEMATRON(cur);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN6@xmlSchemat
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN33@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN33@xmlSchemat
	mov	edx, DWORD PTR _xmlSchematronNs
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN34@xmlSchemat
	mov	eax, DWORD PTR _xmlOldSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN33@xmlSchemat
$LN34@xmlSchemat:
	jmp	SHORT $LN6@xmlSchemat
$LN33@xmlSchemat:
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN4@xmlSchemat
$LN6@xmlSchemat:

; 1167 :     }
; 1168 :     while (IS_SCHEMATRON(cur, "ns")) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN10@xmlSchemat
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	$LN10@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	$LN10@xmlSchemat
	push	OFFSET ??_C@_02EGOFOKPC@ns@
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN10@xmlSchemat
	mov	ecx, DWORD PTR _xmlSchematronNs
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN35@xmlSchemat
	mov	edx, DWORD PTR _xmlOldSchematronNs
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	$LN10@xmlSchemat
$LN35@xmlSchemat:

; 1169 :         xmlChar *prefix = xmlGetNoNsProp(cur, BAD_CAST "prefix");

	push	OFFSET ??_C@_06CHGOAPND@prefix@
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	call	_xmlGetNoNsProp
	add	esp, 8
	mov	DWORD PTR _prefix$2[ebp], eax

; 1170 :         xmlChar *uri = xmlGetNoNsProp(cur, BAD_CAST "uri");

	push	OFFSET ??_C@_03GBBABMJN@uri@
	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	call	_xmlGetNoNsProp
	add	esp, 8
	mov	DWORD PTR _uri$1[ebp], eax

; 1171 : 	if ((uri == NULL) || (uri[0] == 0)) {

	cmp	DWORD PTR _uri$1[ebp], 0
	je	SHORT $LN37@xmlSchemat
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _uri$1[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN36@xmlSchemat
$LN37@xmlSchemat:

; 1172 : 	    xmlSchematronPErr(ctxt, cur,

	push	0
	push	0
	push	OFFSET ??_C@_0BG@GCEGAJCF@ns?5element?5has?5no?5uri@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
$LN36@xmlSchemat:

; 1173 : 		XML_SCHEMAP_NOROOT,
; 1174 : 		"ns element has no uri", NULL, NULL);
; 1175 : 	}
; 1176 : 	if ((prefix == NULL) || (prefix[0] == 0)) {

	cmp	DWORD PTR _prefix$2[ebp], 0
	je	SHORT $LN39@xmlSchemat
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _prefix$2[ebp]
	movzx	edx, BYTE PTR [ecx+eax]
	test	edx, edx
	jne	SHORT $LN38@xmlSchemat
$LN39@xmlSchemat:

; 1177 : 	    xmlSchematronPErr(ctxt, cur,

	push	0
	push	0
	push	OFFSET ??_C@_0BJ@FJJOLCKN@ns?5element?5has?5no?5prefix@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _cur$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
$LN38@xmlSchemat:

; 1178 : 		XML_SCHEMAP_NOROOT,
; 1179 : 		"ns element has no prefix", NULL, NULL);
; 1180 : 	}
; 1181 : 	if ((prefix) && (uri)) {

	cmp	DWORD PTR _prefix$2[ebp], 0
	je	SHORT $LN40@xmlSchemat
	cmp	DWORD PTR _uri$1[ebp], 0
	je	SHORT $LN40@xmlSchemat

; 1182 : 	    xmlXPathRegisterNs(ctxt->xctxt, prefix, uri);

	mov	edx, DWORD PTR _uri$1[ebp]
	push	edx
	mov	eax, DWORD PTR _prefix$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	push	edx
	call	_xmlXPathRegisterNs
	add	esp, 12					; 0000000cH

; 1183 : 	    xmlSchematronAddNamespace(ctxt, prefix, uri);

	mov	eax, DWORD PTR _uri$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _prefix$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronAddNamespace
	add	esp, 12					; 0000000cH

; 1184 : 	    ret->nbNs++;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 1
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN40@xmlSchemat:

; 1185 : 	}
; 1186 : 	if (uri)

	cmp	DWORD PTR _uri$1[ebp], 0
	je	SHORT $LN41@xmlSchemat

; 1187 : 	    xmlFree(uri);

	mov	esi, esp
	mov	eax, DWORD PTR _uri$1[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN41@xmlSchemat:

; 1188 : 	if (prefix)

	cmp	DWORD PTR _prefix$2[ebp], 0
	je	SHORT $LN42@xmlSchemat

; 1189 : 	    xmlFree(prefix);

	mov	esi, esp
	mov	ecx, DWORD PTR _prefix$2[ebp]
	push	ecx
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN42@xmlSchemat:

; 1190 : 	cur = cur->next;

	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
$LN8@xmlSchemat:

; 1191 : 	NEXT_SCHEMATRON(cur);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN9@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN43@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN43@xmlSchemat
	mov	eax, DWORD PTR _xmlSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN44@xmlSchemat
	mov	ecx, DWORD PTR _xmlOldSchematronNs
	push	ecx
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+36]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN43@xmlSchemat
$LN44@xmlSchemat:
	jmp	SHORT $LN9@xmlSchemat
$LN43@xmlSchemat:
	mov	edx, DWORD PTR _cur$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR _cur$[ebp], eax
	jmp	SHORT $LN8@xmlSchemat
$LN9@xmlSchemat:

; 1192 :     }

	jmp	$LN6@xmlSchemat
$LN10@xmlSchemat:

; 1193 :     while (cur != NULL) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN11@xmlSchemat

; 1194 : 	if (IS_SCHEMATRON(cur, "pattern")) {

	cmp	DWORD PTR _cur$[ebp], 0
	je	$LN45@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+4], 1
	jne	SHORT $LN45@xmlSchemat
	mov	edx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN45@xmlSchemat
	push	OFFSET ??_C@_07CHFOACKJ@pattern@
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN45@xmlSchemat
	mov	edx, DWORD PTR _xmlSchematronNs
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN47@xmlSchemat
	mov	eax, DWORD PTR _xmlOldSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN45@xmlSchemat
$LN47@xmlSchemat:

; 1195 : 	    xmlSchematronParsePattern(ctxt, cur);

	mov	ecx, DWORD PTR _cur$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ctxt$[ebp]
	push	edx
	call	_xmlSchematronParsePattern
	add	esp, 8

; 1196 : 	    ret->nbPattern++;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	add	ecx, 1
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+32], ecx

; 1197 : 	} else {

	jmp	SHORT $LN46@xmlSchemat
$LN45@xmlSchemat:

; 1198 : 	    xmlSchematronPErr(ctxt, cur,

	push	0
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	push	OFFSET ??_C@_0CK@GKEBAOHO@Expecting?5a?5pattern?5element?5ins@
	push	1759					; 000006dfH
	mov	edx, DWORD PTR _cur$[ebp]
	push	edx
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H
$LN46@xmlSchemat:

; 1199 : 		XML_SCHEMAP_NOROOT,
; 1200 : 		"Expecting a pattern element instead of %s", cur->name, NULL);
; 1201 : 	}
; 1202 : 	cur = cur->next;

	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx
$LN12@xmlSchemat:

; 1203 : 	NEXT_SCHEMATRON(cur);

	cmp	DWORD PTR _cur$[ebp], 0
	je	SHORT $LN13@xmlSchemat
	mov	eax, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [eax+4], 1
	jne	SHORT $LN48@xmlSchemat
	mov	ecx, DWORD PTR _cur$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN48@xmlSchemat
	mov	edx, DWORD PTR _xmlSchematronNs
	push	edx
	mov	eax, DWORD PTR _cur$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN49@xmlSchemat
	mov	eax, DWORD PTR _xmlOldSchematronNs
	push	eax
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlStrEqual
	add	esp, 8
	test	eax, eax
	je	SHORT $LN48@xmlSchemat
$LN49@xmlSchemat:
	jmp	SHORT $LN13@xmlSchemat
$LN48@xmlSchemat:
	mov	ecx, DWORD PTR _cur$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _cur$[ebp], edx
	jmp	SHORT $LN12@xmlSchemat
$LN13@xmlSchemat:

; 1204 :     }

	jmp	$LN10@xmlSchemat
$LN11@xmlSchemat:

; 1205 :     if (ret->nbPattern == 0) {

	mov	eax, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [eax+32], 0
	jne	SHORT $LN50@xmlSchemat

; 1206 : 	xmlSchematronPErr(ctxt, root,

	push	0
	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	push	OFFSET ??_C@_0CM@EHOBNHNH@The?5schematron?5document?5?8?$CFs?8?5ha@
	push	1759					; 000006dfH
	mov	eax, DWORD PTR _root$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ctxt$[ebp]
	push	ecx
	call	_xmlSchematronPErr
	add	esp, 24					; 00000018H

; 1207 : 	    XML_SCHEMAP_NOROOT,
; 1208 : 	    "The schematron document '%s' has no pattern",
; 1209 : 	    ctxt->URL, NULL);
; 1210 : 	goto exit;

	jmp	SHORT $exit$57
$LN50@xmlSchemat:

; 1211 :     }
; 1212 :     /* the original document must be kept for reporting */
; 1213 :     ret->doc = doc;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [edx+8], eax

; 1214 :     if (preserve) {

	cmp	DWORD PTR _preserve$[ebp], 0
	je	SHORT $LN51@xmlSchemat

; 1215 : 	    ret->preserve = 1;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], 1
$LN51@xmlSchemat:

; 1216 :     }
; 1217 :     preserve = 1;

	mov	DWORD PTR _preserve$[ebp], 1
$exit$57:

; 1218 : 
; 1219 : exit:
; 1220 :     if (!preserve) {

	cmp	DWORD PTR _preserve$[ebp], 0
	jne	SHORT $LN52@xmlSchemat

; 1221 : 	xmlFreeDoc(doc);

	mov	edx, DWORD PTR _doc$[ebp]
	push	edx
	call	_xmlFreeDoc
	add	esp, 4
$LN52@xmlSchemat:

; 1222 :     }
; 1223 :     if (ret != NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	je	SHORT $LN53@xmlSchemat

; 1224 : 	if (ctxt->nberrors != 0) {

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN54@xmlSchemat

; 1225 : 	    xmlSchematronFree(ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	call	_xmlSchematronFree
	add	esp, 4

; 1226 : 	    ret = NULL;

	mov	DWORD PTR _ret$[ebp], 0

; 1227 : 	} else {

	jmp	SHORT $LN53@xmlSchemat
$LN54@xmlSchemat:

; 1228 : 	    ret->namespaces = ctxt->namespaces;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+52], ecx

; 1229 : 	    ret->nbNamespaces = ctxt->nbNamespaces;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	eax, DWORD PTR _ctxt$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+44], ecx

; 1230 : 	    ctxt->namespaces = NULL;

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	DWORD PTR [edx+52], 0
$LN53@xmlSchemat:

; 1231 : 	}
; 1232 :     }
; 1233 :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 1234 : }

	pop	esi
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronParse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronFreeParserCtxt
_TEXT	SEGMENT
_ctxt$ = 8						; size = 4
_xmlSchematronFreeParserCtxt PROC			; COMDAT

; 710  : {

	push	ebp
	mov	ebp, esp
	push	esi
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 711  :     if (ctxt == NULL)

	cmp	DWORD PTR _ctxt$[ebp], 0
	jne	SHORT $LN2@xmlSchemat

; 712  :         return;

	jmp	$LN1@xmlSchemat
$LN2@xmlSchemat:

; 713  :     if (ctxt->doc != NULL && !ctxt->preserve)

	mov	eax, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN3@xmlSchemat
	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	jne	SHORT $LN3@xmlSchemat

; 714  :         xmlFreeDoc(ctxt->doc);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_xmlFreeDoc
	add	esp, 4
$LN3@xmlSchemat:

; 715  :     if (ctxt->xctxt != NULL) {

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+36], 0
	je	SHORT $LN4@xmlSchemat

; 716  :         xmlXPathFreeContext(ctxt->xctxt);

	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+36]
	push	eax
	call	_xmlXPathFreeContext
	add	esp, 4
$LN4@xmlSchemat:

; 717  :     }
; 718  :     if (ctxt->namespaces != NULL)

	mov	ecx, DWORD PTR _ctxt$[ebp]
	cmp	DWORD PTR [ecx+52], 0
	je	SHORT $LN5@xmlSchemat

; 719  :         xmlFree((char **) ctxt->namespaces);

	mov	esi, esp
	mov	edx, DWORD PTR _ctxt$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@xmlSchemat:

; 720  :     xmlDictFree(ctxt->dict);

	mov	ecx, DWORD PTR _ctxt$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlDictFree
	add	esp, 4

; 721  :     xmlFree(ctxt);

	mov	esi, esp
	mov	eax, DWORD PTR _ctxt$[ebp]
	push	eax
	call	DWORD PTR _xmlFree
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@xmlSchemat:

; 722  : }

	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_xmlSchematronFreeParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronNewDocParserCtxt
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_doc$ = 8						; size = 4
_xmlSchematronNewDocParserCtxt PROC			; COMDAT

; 672  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 673  :     xmlSchematronParserCtxtPtr ret;
; 674  : 
; 675  :     if (doc == NULL)

	cmp	DWORD PTR _doc$[ebp], 0
	jne	SHORT $LN2@xmlSchemat

; 676  :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN2@xmlSchemat:

; 677  : 
; 678  :     ret =

	mov	esi, esp
	push	84					; 00000054H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 679  :         (xmlSchematronParserCtxtPtr)
; 680  :         xmlMalloc(sizeof(xmlSchematronParserCtxt));
; 681  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@xmlSchemat

; 682  :         xmlSchematronPErrMemory(NULL, "allocating schema parser context",

	push	0
	push	OFFSET ??_C@_0CB@NCMLFNIB@allocating?5schema?5parser?5contex@
	push	0
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 683  :                                 NULL);
; 684  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN3@xmlSchemat:

; 685  :     }
; 686  :     memset(ret, 0, sizeof(xmlSchematronParserCtxt));

	push	84					; 00000054H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 687  :     ret->doc = doc;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _doc$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 688  :     ret->dict = xmlDictCreate();

	call	_xmlDictCreate
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 689  :     /* The application has responsibility for the document */
; 690  :     ret->preserve = 1;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+12], 1

; 691  :     ret->xctxt = xmlXPathNewContext(doc);

	mov	eax, DWORD PTR _doc$[ebp]
	push	eax
	call	_xmlXPathNewContext
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 692  :     if (ret->xctxt == NULL) {

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN4@xmlSchemat

; 693  :         xmlSchematronPErrMemory(NULL, "allocating schema parser XPath context",

	push	0
	push	OFFSET ??_C@_0CH@JIEMFKIC@allocating?5schema?5parser?5XPath?5@
	push	0
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 694  :                                 NULL);
; 695  : 	xmlSchematronFreeParserCtxt(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlSchematronFreeParserCtxt
	add	esp, 4

; 696  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN4@xmlSchemat:

; 697  :     }
; 698  : 
; 699  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 700  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronNewDocParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronNewMemParserCtxt
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
_xmlSchematronNewMemParserCtxt PROC			; COMDAT

; 633  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 634  :     xmlSchematronParserCtxtPtr ret;
; 635  : 
; 636  :     if ((buffer == NULL) || (size <= 0))

	cmp	DWORD PTR _buffer$[ebp], 0
	je	SHORT $LN3@xmlSchemat
	cmp	DWORD PTR _size$[ebp], 0
	jg	SHORT $LN2@xmlSchemat
$LN3@xmlSchemat:

; 637  :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN2@xmlSchemat:

; 638  : 
; 639  :     ret =

	mov	esi, esp
	push	84					; 00000054H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 640  :         (xmlSchematronParserCtxtPtr)
; 641  :         xmlMalloc(sizeof(xmlSchematronParserCtxt));
; 642  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN4@xmlSchemat

; 643  :         xmlSchematronPErrMemory(NULL, "allocating schema parser context",

	push	0
	push	OFFSET ??_C@_0CB@NCMLFNIB@allocating?5schema?5parser?5contex@
	push	0
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 644  :                                 NULL);
; 645  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN4@xmlSchemat:

; 646  :     }
; 647  :     memset(ret, 0, sizeof(xmlSchematronParserCtxt));

	push	84					; 00000054H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 648  :     ret->buffer = buffer;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 649  :     ret->size = size;

	mov	eax, DWORD PTR _ret$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 650  :     ret->dict = xmlDictCreate();

	call	_xmlDictCreate
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], eax

; 651  :     ret->xctxt = xmlXPathNewContext(NULL);

	push	0
	call	_xmlXPathNewContext
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 652  :     if (ret->xctxt == NULL) {

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN5@xmlSchemat

; 653  :         xmlSchematronPErrMemory(NULL, "allocating schema parser XPath context",

	push	0
	push	OFFSET ??_C@_0CH@JIEMFKIC@allocating?5schema?5parser?5XPath?5@
	push	0
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 654  :                                 NULL);
; 655  : 	xmlSchematronFreeParserCtxt(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlSchematronFreeParserCtxt
	add	esp, 4

; 656  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN5@xmlSchemat:

; 657  :     }
; 658  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 659  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronNewMemParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\users\dag\documents\_clients\codeproject authors group\windows on arm\libxml2\libxml2-2.9.9\schematron.c
;	COMDAT _xmlSchematronNewParserCtxt
_TEXT	SEGMENT
_ret$ = -4						; size = 4
_URL$ = 8						; size = 4
_xmlSchematronNewParserCtxt PROC			; COMDAT

; 591  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __D7D5901C_schematron@c
	call	@__CheckForDebuggerJustMyCode@4

; 592  :     xmlSchematronParserCtxtPtr ret;
; 593  : 
; 594  :     if (URL == NULL)

	cmp	DWORD PTR _URL$[ebp], 0
	jne	SHORT $LN2@xmlSchemat

; 595  :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN2@xmlSchemat:

; 596  : 
; 597  :     ret =

	mov	esi, esp
	push	84					; 00000054H
	call	DWORD PTR _xmlMalloc
	add	esp, 4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _ret$[ebp], eax

; 598  :         (xmlSchematronParserCtxtPtr)
; 599  :         xmlMalloc(sizeof(xmlSchematronParserCtxt));
; 600  :     if (ret == NULL) {

	cmp	DWORD PTR _ret$[ebp], 0
	jne	SHORT $LN3@xmlSchemat

; 601  :         xmlSchematronPErrMemory(NULL, "allocating schema parser context",

	push	0
	push	OFFSET ??_C@_0CB@NCMLFNIB@allocating?5schema?5parser?5contex@
	push	0
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 602  :                                 NULL);
; 603  :         return (NULL);

	xor	eax, eax
	jmp	$LN1@xmlSchemat
$LN3@xmlSchemat:

; 604  :     }
; 605  :     memset(ret, 0, sizeof(xmlSchematronParserCtxt));

	push	84					; 00000054H
	push	0
	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 606  :     ret->type = XML_STRON_CTXT_PARSER;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx], 1

; 607  :     ret->dict = xmlDictCreate();

	call	_xmlDictCreate
	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+24], eax

; 608  :     ret->URL = xmlDictLookup(ret->dict, (const xmlChar *) URL, -1);

	push	-1
	mov	eax, DWORD PTR _URL$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	_xmlDictLookup
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 609  :     ret->includes = NULL;

	mov	edx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [edx+64], 0

; 610  :     ret->xctxt = xmlXPathNewContext(NULL);

	push	0
	call	_xmlXPathNewContext
	add	esp, 4
	mov	ecx, DWORD PTR _ret$[ebp]
	mov	DWORD PTR [ecx+36], eax

; 611  :     if (ret->xctxt == NULL) {

	mov	edx, DWORD PTR _ret$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN4@xmlSchemat

; 612  :         xmlSchematronPErrMemory(NULL, "allocating schema parser XPath context",

	push	0
	push	OFFSET ??_C@_0CH@JIEMFKIC@allocating?5schema?5parser?5XPath?5@
	push	0
	call	_xmlSchematronPErrMemory
	add	esp, 12					; 0000000cH

; 613  :                                 NULL);
; 614  : 	xmlSchematronFreeParserCtxt(ret);

	mov	eax, DWORD PTR _ret$[ebp]
	push	eax
	call	_xmlSchematronFreeParserCtxt
	add	esp, 4

; 615  :         return (NULL);

	xor	eax, eax
	jmp	SHORT $LN1@xmlSchemat
$LN4@xmlSchemat:

; 616  :     }
; 617  :     ret->xctxt->flags = XML_XPATH_CHECKNS;

	mov	ecx, DWORD PTR _ret$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [edx+196], 1

; 618  :     return (ret);

	mov	eax, DWORD PTR _ret$[ebp]
$LN1@xmlSchemat:

; 619  : }

	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_xmlSchematronNewParserCtxt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _snprintf
_TEXT	SEGMENT
tv81 = -20						; size = 4
__Result$1 = -16					; size = 4
__Format$ = -12						; size = 4
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_snprintf PROC						; COMDAT

; 1948 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	ecx, OFFSET __A452D4A0_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 1949 :         int _Result;
; 1950 :         va_list _ArgList;
; 1951 :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 1952 :     #pragma warning(suppress:28719)    // 28719
; 1953 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

	mov	ecx, DWORD PTR __Format$[ebp]
	mov	DWORD PTR __Format$[ebp], ecx

; 1440 :         int const _Result = __stdio_common_vsprintf(

	mov	esi, esp
	mov	edx, DWORD PTR __ArgList$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR __Format$[ebp]
	push	eax
	mov	ecx, DWORD PTR __BufferCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Buffer$[ebp]
	push	edx
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	or	ecx, 2
	mov	edx, DWORD PTR [eax+4]
	push	edx
	push	ecx
	call	DWORD PTR __imp____stdio_common_vsprintf
	add	esp, 28					; 0000001cH
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR __Result$1[ebp], eax

; 1441 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR,
; 1442 :             _Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1443 : 
; 1444 :         return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR __Result$1[ebp], 0
	jge	SHORT $LN5@snprintf
	mov	DWORD PTR tv81[ebp], -1
	jmp	SHORT $LN3@snprintf
$LN5@snprintf:
	mov	eax, DWORD PTR __Result$1[ebp]
	mov	DWORD PTR tv81[ebp], eax
$LN3@snprintf:

; 1952 :     #pragma warning(suppress:28719)    // 28719
; 1953 :         _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);

	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR __Result$[ebp], ecx

; 1954 :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 1955 :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 1956 :     }

	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _fprintf
_TEXT	SEGMENT
__Format$ = -12						; size = 4
__ArgList$ = -8						; size = 4
__Result$ = -4						; size = 4
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
_fprintf PROC						; COMDAT

; 835  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, OFFSET __A452D4A0_stdio@h
	call	@__CheckForDebuggerJustMyCode@4

; 836  :         int _Result;
; 837  :         va_list _ArgList;
; 838  :         __crt_va_start(_ArgList, _Format);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	ecx, DWORD PTR __Format$[ebp]
	mov	DWORD PTR __Format$[ebp], ecx

; 643  :         return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	mov	esi, esp
	mov	edx, DWORD PTR __ArgList$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR __Format$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Stream$[ebp]
	push	ecx
	call	___local_stdio_printf_options
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	call	DWORD PTR __imp____stdio_common_vfprintf
	add	esp, 24					; 00000018H
	cmp	esi, esp
	call	__RTC_CheckEsp

; 839  :         _Result = _vfprintf_l(_Stream, _Format, NULL, _ArgList);

	mov	DWORD PTR __Result$[ebp], eax

; 840  :         __crt_va_end(_ArgList);

	mov	DWORD PTR __ArgList$[ebp], 0

; 841  :         return _Result;

	mov	eax, DWORD PTR __Result$[ebp]

; 842  :     }

	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_fprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET __2CC6E67D_corecrt_stdio_config@h
	call	@__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
